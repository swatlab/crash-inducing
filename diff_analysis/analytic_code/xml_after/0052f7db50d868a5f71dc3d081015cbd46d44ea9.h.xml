<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="0052f7db50d868a5f71dc3d081015cbd46d44ea9.h"><comment type="block">/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */</comment>
<comment type="block">/* vim:expandtab:shiftwidth=4:tabstop=4:
 */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Christopher Blizzard
 * &lt;blizzard@mozilla.org&gt;.  Portions created by the Initial Developer
 * are Copyright (C) 2001 the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Masayuki Nakano &lt;masayuki@d-toybox.com&gt;
 *   Vladimir Vukicevic &lt;vladimir@pobox.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__nsWindow_h__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__nsWindow_h__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QKeyEvent&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qgraphicswidget.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAutoPtr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsBaseWidget.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGUIEvent.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsWeakReference.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsWidgetAtoms.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_LOGGING</name></cpp:ifdef>

<comment type="line">// make sure that logging is enabled before including prlog.h</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORCE_PR_LOG</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsTArray.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>PRLogModuleInfo</name> *</type><name>gWidgetLog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>PRLogModuleInfo</name> *</type><name>gWidgetFocusLog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>PRLogModuleInfo</name> *</type><name>gWidgetIMLog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>PRLogModuleInfo</name> *</type><name>gWidgetDrawLog</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PR_LOG(gWidgetLog, 4, args)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGFOCUS</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PR_LOG(gWidgetFocusLog, 4, args)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGIM</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PR_LOG(gWidgetIMLog, 4, args)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGDRAW</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PR_LOG(gWidgetDrawLog, 4, args)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_WIDGETS</name></cpp:ifdef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PR_LOG2</name><parameter_list>(<param><type><name>_args</name></type></param>)</parameter_list></cpp:macro>         \
    <cpp:value>PR_BEGIN_MACRO             \
      qDebug _args;            \
    PR_END_MACRO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PR_LOG2(args)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGFOCUS</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PR_LOG2(args)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGIM</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PR_LOG2(args)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGDRAW</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PR_LOG2(args)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGFOCUS</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGIM</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGDRAW</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MOZ_LOGGING */</comment>

<decl_stmt><decl><type><name>class</name></type> <name>QEvent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MozQWidget</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QGraphicsScene</name></decl>;</decl_stmt>

<expr_stmt><expr><name>class</name> <name>nsWindow</name> : <name>public</name> <name>nsBaseWidget</name></expr>,
                 <expr><name>public</name> <name>nsSupportsWeakReference</name>
<block>{
<expr><name>public</name>:
    <call><name>nsWindow</name><argument_list>()</argument_list></call></expr>;
    <expr><name>virtual</name> ~<call><name>nsWindow</name><argument_list>()</argument_list></call></expr>;

    <expr><name>nsEventStatus</name> <call><name>DoPaint</name><argument_list>( <argument><expr><name>QPainter</name>* <name>aPainter</name></expr></argument>, <argument><expr>const <name>QStyleOptionGraphicsItem</name> * <name>aOption</name></expr></argument> )</argument_list></call></expr>;

    <expr>static <name>void</name> <call><name>ReleaseGlobals</name><argument_list>()</argument_list></call></expr>;

    <expr><name>NS_DECL_ISUPPORTS_INHERITED</name>

    <comment type="line">//</comment>
    <comment type="line">// nsIWidget</comment>
    <comment type="line">//</comment>

    <name>NS_IMETHOD</name>         <call><name>ConfigureChildren</name><argument_list>(<argument><expr>const <name>nsTArray</name>&lt;<name>nsIWidget</name>::<name>Configuration</name>&gt;&amp;</expr></argument>)</argument_list></call></expr>;

    <expr><name>NS_IMETHOD</name>         <macro><name>Create</name><argument_list>(<argument>nsIWidget        *aParent</argument>,
                              <argument>nsNativeWidget   aNativeParent</argument>,
                              <argument>const nsIntRect  &amp;aRect</argument>,
                              <argument>EVENT_CALLBACK   aHandleEventFunction</argument>,
                              <argument>nsIDeviceContext *aContext</argument>,
                              <argument>nsIAppShell      *aAppShell</argument>,
                              <argument>nsIToolkit       *aToolkit</argument>,
                              <argument>nsWidgetInitData *aInitData</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <call><name>Destroy</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>NS_IMETHOD</name>         <call><name>SetParent</name><argument_list>(<argument><expr><name>nsIWidget</name>* <name>aNewParent</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>virtual</name> <name>nsIWidget</name> *<call><name>GetParent</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>NS_IMETHOD</name>         <macro><name>Show</name><argument_list>(<argument>PRBool aState</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <macro><name>SetModal</name><argument_list>(<argument>PRBool aModal</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <call><name>IsVisible</name><argument_list>(<argument><expr><name>PRBool</name> &amp; <name>aState</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>NS_IMETHOD</name>         <macro><name>ConstrainPosition</name><argument_list>(<argument>PRBool aAllowSlop</argument>,
                                         <argument>PRInt32 *aX</argument>,
                                         <argument>PRInt32 *aY</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <macro><name>Move</name><argument_list>(<argument>PRInt32 aX</argument>,
                            <argument>PRInt32 aY</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <macro><name>Resize</name><argument_list>(<argument>PRInt32 aWidth</argument>,
                              <argument>PRInt32 aHeight</argument>,
                              <argument>PRBool  aRepaint</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <macro><name>Resize</name><argument_list>(<argument>PRInt32 aX</argument>,
                              <argument>PRInt32 aY</argument>,
                              <argument>PRInt32 aWidth</argument>,
                              <argument>PRInt32 aHeight</argument>,
                              <argument>PRBool   aRepaint</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <macro><name>PlaceBehind</name><argument_list>(<argument>nsTopLevelWidgetZPlacement  aPlacement</argument>,
                                   <argument>nsIWidget                  *aWidget</argument>,
                                   <argument>PRBool                      aActivate</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <macro><name>SetSizeMode</name><argument_list>(<argument>PRInt32 aMode</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <macro><name>Enable</name><argument_list>(<argument>PRBool aState</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <macro><name>SetFocus</name><argument_list>(<argument>PRBool aRaise = PR_FALSE</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <call><name>GetScreenBounds</name><argument_list>(<argument><expr><name>nsIntRect</name> &amp;<name>aRect</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>NS_IMETHOD</name>         <call><name>SetForegroundColor</name><argument_list>(<argument><expr>const <name>nscolor</name> &amp;<name>aColor</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>NS_IMETHOD</name>         <call><name>SetBackgroundColor</name><argument_list>(<argument><expr>const <name>nscolor</name> &amp;<name>aColor</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>NS_IMETHOD</name>         <macro><name>SetCursor</name><argument_list>(<argument>nsCursor aCursor</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <macro><name>SetCursor</name><argument_list>(<argument>imgIContainer* aCursor</argument>,
                                 <argument>PRUint32 aHotspotX</argument>, <argument>PRUint32 aHotspotY</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <macro><name>SetHasTransparentBackground</name><argument_list>(<argument>PRBool aTransparent</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <call><name>GetHasTransparentBackground</name><argument_list>(<argument><expr><name>PRBool</name>&amp; <name>aTransparent</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>NS_IMETHOD</name>         <macro><name>HideWindowChrome</name><argument_list>(<argument>PRBool aShouldHide</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <macro><name>MakeFullScreen</name><argument_list>(<argument>PRBool aFullScreen</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <macro><name>Invalidate</name><argument_list>(<argument>const nsIntRect &amp;aRect</argument>,
                                  <argument>PRBool        aIsSynchronous</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <call><name>Update</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name>               <call><name>Scroll</name><argument_list>(<argument><expr>const <name>nsIntPoint</name>&amp;</expr></argument>,
                              <argument><expr>const <name>nsTArray</name>&lt;<name>nsIntRect</name>&gt;&amp;</expr></argument>,
                              <argument><expr>const <name>nsTArray</name>&lt;<name>nsIWidget</name>::<name>Configuration</name>&gt;&amp;</expr></argument>)</argument_list></call></expr>;

    <expr><name>virtual</name> <name>void</name>*      <macro><name>GetNativeData</name><argument_list>(<argument>PRUint32 aDataType</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <call><name>SetTitle</name><argument_list>(<argument><expr>const <name>nsAString</name>&amp; <name>aTitle</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>NS_IMETHOD</name>         <call><name>SetIcon</name><argument_list>(<argument><expr>const <name>nsAString</name>&amp; <name>aIconSpec</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>virtual</name> <name>nsIntPoint</name> <call><name>WidgetToScreenOffset</name><argument_list>()</argument_list></call></expr>;
    <expr><name>NS_IMETHOD</name>         <call><name>DispatchEvent</name><argument_list>(<argument><expr><name>nsGUIEvent</name> *<name>aEvent</name></expr></argument>, <argument><expr><name>nsEventStatus</name> &amp;<name>aStatus</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>NS_IMETHOD</name>         <macro><name>EnableDragDrop</name><argument_list>(<argument>PRBool aEnable</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <macro><name>CaptureMouse</name><argument_list>(<argument>PRBool aCapture</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <macro><name>CaptureRollupEvents</name><argument_list>(<argument>nsIRollupListener *aListener</argument>,
                                           <argument>nsIMenuRollup *aMenuRollup</argument>,
                                           <argument>PRBool aDoCapture</argument>,
                                           <argument>PRBool aConsumeRollupEvent</argument>)</argument_list></macro></expr>;

    <expr><name>NS_IMETHOD</name>         <call><name>SetWindowClass</name><argument_list>(<argument><expr>const <name>nsAString</name>&amp; <name>xulWinType</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>NS_IMETHOD</name>         <macro><name>GetAttention</name><argument_list>(<argument>PRInt32 aCycleCount</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHOD</name>         <macro><name>BeginResizeDrag</name>   <argument_list>(<argument>nsGUIEvent* aEvent</argument>, <argument>PRInt32 aHorizontal</argument>, <argument>PRInt32 aVertical</argument>)</argument_list></macro></expr>;

    <expr><name>NS_IMETHODIMP</name>      <macro><name>SetIMEEnabled</name><argument_list>(<argument>PRUint32 aState</argument>)</argument_list></macro></expr>;
    <expr><name>NS_IMETHODIMP</name>      <call><name>GetIMEEnabled</name><argument_list>(<argument><expr><name>PRUint32</name>* <name>aState</name></expr></argument>)</argument_list></call></expr>;

    <comment type="line">//</comment>
    <comment type="line">// utility methods</comment>
    <comment type="line">//</comment>
    <expr><name>void</name>               <call><name>QWidgetDestroyed</name><argument_list>()</argument_list></call></expr>;

    <comment type="block">/***** from CommonWidget *****/</comment>

    <comment type="line">// event handling code</comment>

    <expr><name>void</name> <call><name>DispatchActivateEvent</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>DispatchDeactivateEvent</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>DispatchResizeEvent</name><argument_list>(<argument><expr><name>nsIntRect</name> &amp;<name>aRect</name></expr></argument>, <argument><expr><name>nsEventStatus</name> &amp;<name>aStatus</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>nsEventStatus</name> <macro><name>DispatchEvent</name><argument_list>(<argument>nsGUIEvent *aEvent</argument>)</argument_list></macro> <block>{
        <expr><name>nsEventStatus</name> <name>status</name></expr>;
        <expr><call><name>DispatchEvent</name><argument_list>(<argument><expr><name>aEvent</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><name>status</name></expr>;</return></block></expr>
    }</block>

    <comment type="line">// Some of the nsIWidget methods</comment>
    <name>NS_IMETHOD</name>         <call><name>IsEnabled</name>        <argument_list>(<argument><expr><name>PRBool</name> *<name>aState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// called when we are destroyed</comment>
    <function_decl><type><name>void</name></type> <name>OnDestroy</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// called to check and see if a widget's dimensions are sane</comment>
    <function_decl><type><name>PRBool</name></type> <name>AreBoundsSane</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIWidget</name>&gt; <name>mParent</name></expr>;</expr_stmt>
    <comment type="line">// Is this a toplevel window?</comment>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>        <name>mIsTopLevel</name></decl>;</decl_stmt>
    <comment type="line">// Has this widget been destroyed yet?</comment>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>        <name>mIsDestroyed</name></decl>;</decl_stmt>

    <comment type="line">// This flag tracks if we're hidden or shown.</comment>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>        <name>mIsShown</name></decl>;</decl_stmt>
    <comment type="line">// is this widget enabled?</comment>
    <decl_stmt><decl><type><name>PRBool</name></type>              <name>mEnabled</name></decl>;</decl_stmt>
    <comment type="line">// Has anyone set an x/y location for this widget yet? Toplevels</comment>
    <comment type="line">// shouldn't be automatically set to 0,0 for first show.</comment>
    <decl_stmt><decl><type><name>PRBool</name></type>              <name>mPlaced</name></decl>;</decl_stmt>

    <comment type="line">// Remember the last sizemode so that we can restore it when</comment>
    <comment type="line">// leaving fullscreen</comment>
    <decl_stmt><decl><type><name>nsSizeMode</name></type>         <name>mLastSizeMode</name></decl>;</decl_stmt>

    <comment type="block">/**
     * Event handlers (proxied from the actual qwidget).
     * They follow normal Qt widget semantics.
     */</comment>
    <function_decl><type><name>void</name></type> <name>Initialize</name><parameter_list>(<param><decl><type><name>MozQWidget</name> *</type><name>widget</name></decl></param>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>nsQtEventDispatcher</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>InterceptContainer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>MozQWidget</name></decl>;</decl_stmt>

    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>OnMoveEvent</name><parameter_list>(<param><decl><type><name>QGraphicsSceneHoverEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>OnResizeEvent</name><parameter_list>(<param><decl><type><name>QGraphicsSceneResizeEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>OnCloseEvent</name><parameter_list>(<param><decl><type><name>QCloseEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>OnEnterNotifyEvent</name><parameter_list>(<param><decl><type><name>QGraphicsSceneHoverEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>OnLeaveNotifyEvent</name><parameter_list>(<param><decl><type><name>QGraphicsSceneHoverEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>OnMotionNotifyEvent</name><parameter_list>(<param><decl><type><name>QGraphicsSceneMouseEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>OnButtonPressEvent</name><parameter_list>(<param><decl><type><name>QGraphicsSceneMouseEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>OnButtonReleaseEvent</name><parameter_list>(<param><decl><type><name>QGraphicsSceneMouseEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>mouseDoubleClickEvent</name><parameter_list>(<param><decl><type><name>QGraphicsSceneMouseEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>OnFocusInEvent</name><parameter_list>(<param><decl><type><name>QEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>OnFocusOutEvent</name><parameter_list>(<param><decl><type><name>QEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>OnKeyPressEvent</name><parameter_list>(<param><decl><type><name>QKeyEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>OnKeyReleaseEvent</name><parameter_list>(<param><decl><type><name>QKeyEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>OnScrollEvent</name><parameter_list>(<param><decl><type><name>QGraphicsSceneWheelEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>contextMenuEvent</name><parameter_list>(<param><decl><type><name>QGraphicsSceneContextMenuEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>imStartEvent</name><parameter_list>(<param><decl><type><name>QEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>imComposeEvent</name><parameter_list>(<param><decl><type><name>QEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>imEndEvent</name><parameter_list>(<param><decl><type><name>QEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>OnDragEnter</name> <parameter_list>(<param><decl><type><name>QGraphicsSceneDragDropEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>OnDragMotionEvent</name><parameter_list>(<param><decl><type><name>QGraphicsSceneDragDropEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>OnDragLeaveEvent</name><parameter_list>(<param><decl><type><name>QGraphicsSceneDragDropEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>OnDragDropEvent</name> <parameter_list>(<param><decl><type><name>QGraphicsSceneDragDropEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>showEvent</name><parameter_list>(<param><decl><type><name>QShowEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>hideEvent</name><parameter_list>(<param><decl><type><name>QHideEvent</name> *</type></decl></param>)</parameter_list>;</function_decl>

<comment type="line">//Gestures are only supported in qt &gt; 4.6</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>QT_VERSION</name> &gt;= <call><name>QT_VERSION_CHECK</name><argument_list>(<argument><expr>4, 6, 0</expr></argument>)</argument_list></call>)</expr></cpp:if>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>OnTouchEvent</name><parameter_list>(<param><decl><type><name>QTouchEvent</name> *</type><name>event</name></decl></param>, <param><decl><type><name>PRBool</name> &amp;</type><name>handled</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsEventStatus</name></type> <name>OnGestureEvent</name><parameter_list>(<param><decl><type><name>QGestureEvent</name> *</type><name>event</name></decl></param>, <param><decl><type><name>PRBool</name> &amp;</type><name>handled</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>double</name></type> <name>DistanceBetweenPoints</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>QPointF</name> &amp;</type><name>aFirstPoint</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>QPointF</name> &amp;</type><name>aSecondPoint</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <function_decl><type><name>void</name></type>               <name>NativeResize</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aWidth</name></decl></param>,
                                    <param><decl><type><name>PRInt32</name></type> <name>aHeight</name></decl></param>,
                                    <param><decl><type><name>PRBool</name></type>  <name>aRepaint</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type>               <name>NativeResize</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aX</name></decl></param>,
                                    <param><decl><type><name>PRInt32</name></type> <name>aY</name></decl></param>,
                                    <param><decl><type><name>PRInt32</name></type> <name>aWidth</name></decl></param>,
                                    <param><decl><type><name>PRInt32</name></type> <name>aHeight</name></decl></param>,
                                    <param><decl><type><name>PRBool</name></type>  <name>aRepaint</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type>               <name>NativeShow</name>  <parameter_list>(<param><decl><type><name>PRBool</name></type>  <name>aAction</name></decl></param>)</parameter_list>;</function_decl>

    <enum>enum <name>PluginType</name> <block>{
        <decl><name>PluginType_NONE</name> <init>= <expr>0</expr></init></decl>,   <comment type="block">/* do not have any plugin */</comment>
        <decl><name>PluginType_XEMBED</name></decl>,     <comment type="block">/* the plugin support xembed */</comment>
        <decl><name>PluginType_NONXEMBED</name></decl>   <comment type="block">/* the plugin does not support xembed */</comment>
    }</block>;</enum>

    <function_decl><type><name>void</name></type>               <name>SetPluginType</name><parameter_list>(<param><decl><type><name>PluginType</name></type> <name>aPluginType</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type>               <name>ThemeChanged</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>gfxASurface</name>*</type>       <name>GetThebesSurface</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
    <function_decl><type><name>void</name></type>               <name>GetToplevelWidget</name><parameter_list>(<param><decl><type><name>MozQWidget</name> **</type><name>aWidget</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name>*</type>              <name>SetupPluginPort</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>nsresult</name></type>           <name>SetWindowIconList</name><argument_list>(<argument><expr>const <name>nsTArray</name>&lt;<name>nsCString</name>&gt; &amp;<name>aIconList</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <function_decl><type><name>void</name></type>               <name>SetDefaultIcon</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type>               <name>InitButtonEvent</name><parameter_list>(<param><decl><type><name>nsMouseEvent</name> &amp;</type><name>event</name></decl></param>, <param><decl><type><name>QGraphicsSceneMouseEvent</name> *</type><name>aEvent</name></decl></param>, <param><decl><type><name>int</name></type> <name>aClickCount</name> <init>= <expr>1</expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>PRBool</name></type>             <name>DispatchCommandEvent</name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aCommand</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>MozQWidget</name>*</type>        <name>createQWidget</name><parameter_list>(<param><decl><type><name>MozQWidget</name> *</type><name>parent</name></decl></param>, <param><decl><type><name>nsWidgetInitData</name> *</type><name>aInitData</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>QWidget</name>*</type>           <name>GetViewWidget</name><parameter_list>()</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name>MozQWidget</name>*</type>        <name>mWidget</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>PRUint32</name>           <name>mIsVisible</name> : 1</expr>,
                       <expr><name>mActivatePending</name> : 1</expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PRInt32</name></type>            <name>mSizeState</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PluginType</name></type>         <name>mPluginType</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>nsRefPtr</name>&lt;<name>gfxASurface</name>&gt; <name>mThebesSurface</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PRBool</name></type>       <name>mIsTransparent</name></decl>;</decl_stmt>
 
    <comment type="line">// all of our DND stuff</comment>
    <comment type="line">// this is the last window that had a drag event happen on it.</comment>
    <function_decl><type><name>void</name></type>   <name>InitDragEvent</name>         <parameter_list>(<param><decl><type><name>nsMouseEvent</name> &amp;</type><name>aEvent</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// this is everything we need to be able to fire motion events</comment>
    <comment type="line">// repeatedly</comment>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name><name>mKeyDownFlags</name><index>[<expr>8</expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* Helper methods for DOM Key Down event suppression. */</comment>
    <function><type><name>PRUint32</name>*</type> <name>GetFlagWord32</name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aKeyCode</name></decl></param>, <param><decl><type><name>PRUint32</name>*</type> <name>aMask</name></decl></param>)</parameter_list> <block>{
        <comment type="block">/* Mozilla DOM Virtual Key Code is from 0 to 224. */</comment>
        <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>(<name>aKeyCode</name> &lt;= 0xFF)</expr></argument>, <argument><expr>"Invalid DOM Key Code"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>aKeyCode</name> &amp;= 0xFF</expr>;</expr_stmt>

        <comment type="block">/* 32 = 2^5 = 0x20 */</comment>
        <expr_stmt><expr>*<name>aMask</name> = <call><name>PRUint32</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call> &lt;&lt; (<name>aKeyCode</name> &amp; 0x1F)</expr>;</expr_stmt>
        <return>return <expr>&amp;<name><name>mKeyDownFlags</name><index>[<expr>(<name>aKeyCode</name> &gt;&gt; 5)</expr>]</index></name></expr>;</return>
    }</block></function>

    <function><type><name>PRBool</name></type> <name>IsKeyDown</name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aKeyCode</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>PRUint32</name></type> <name>mask</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PRUint32</name>*</type> <name>flag</name> <init>= <expr><call><name>GetFlagWord32</name><argument_list>(<argument><expr><name>aKeyCode</name></expr></argument>, <argument><expr>&amp;<name>mask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>((*<name>flag</name>) &amp; <name>mask</name>) != 0</expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>SetKeyDownFlag</name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aKeyCode</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>PRUint32</name></type> <name>mask</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PRUint32</name>*</type> <name>flag</name> <init>= <expr><call><name>GetFlagWord32</name><argument_list>(<argument><expr><name>aKeyCode</name></expr></argument>, <argument><expr>&amp;<name>mask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr>*<name>flag</name> |= <name>mask</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>ClearKeyDownFlag</name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aKeyCode</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>PRUint32</name></type> <name>mask</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PRUint32</name>*</type> <name>flag</name> <init>= <expr><call><name>GetFlagWord32</name><argument_list>(<argument><expr><name>aKeyCode</name></expr></argument>, <argument><expr>&amp;<name>mask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr>*<name>flag</name> &amp;= ~<name>mask</name></expr>;</expr_stmt>
    }</block></function>
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>mQCursor</name></decl>;</decl_stmt>

    <comment type="line">// Remember dirty area caused by ::Scroll</comment>
    <decl_stmt><decl><type><name>QRegion</name></type> <name>mDirtyScrollArea</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>QT_VERSION</name> &gt;= <call><name>QT_VERSION_CHECK</name><argument_list>(<argument><expr>4, 6, 0</expr></argument>)</argument_list></call>)</expr></cpp:if>
    <decl_stmt><decl><type><name>double</name></type> <name>mTouchPointDistance</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>mLastPinchDistance</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>mMouseEventsDisabled</name></decl>;</decl_stmt>
 <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};

<expr_stmt><expr><name>class</name> <name>nsChildWindow</name> : <name>public</name> <name>nsWindow</name>
<block>{
<expr><name>public</name>:
    <call><name>nsChildWindow</name><argument_list>()</argument_list></call></expr>;
    <expr>~<call><name>nsChildWindow</name><argument_list>()</argument_list></call></expr>;

    <expr><name>PRInt32</name> <name>mChildID</name></expr>;
}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>class</name> <name>nsPopupWindow</name> : <name>public</name> <name>nsWindow</name>
<block>{
<expr><name>public</name>:
    <call><name>nsPopupWindow</name> <argument_list>()</argument_list></call></expr>;
    <expr>~<call><name>nsPopupWindow</name> <argument_list>()</argument_list></call></expr>;

    <expr><name>PRInt32</name> <name>mChildID</name></expr>;
}</block></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __nsWindow_h__ */</comment>

</unit>
