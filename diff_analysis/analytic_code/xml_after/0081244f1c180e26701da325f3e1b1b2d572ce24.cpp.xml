<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0081244f1c180e26701da325f3e1b1b2d572ce24.cpp"><comment type="block">/* -*- Mode: C++; c-basic-offset: 2; indent-tabs-mode: nil; tab-width: 8 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Firefox.
 *
 * The Initial Developer of the Original Code is
 * the Mozilla Foundation &lt;http://www.mozilla.org&gt;.
 * Portions created by the Initial Developer are Copyright (C) 2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozilla/jetpack/JetpackParent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozilla/jetpack/Handle.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIURI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNetUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIVariant.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIXPConnect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIJSContextStack.h"</cpp:file></cpp:include>

<namespace>namespace <name>mozilla</name> <block>{
<namespace>namespace <name>jetpack</name> <block>{

<constructor><name><name>JetpackParent</name>::<name>JetpackParent</name></name><parameter_list>(<param><decl><type><name>JSContext</name>*</type> <name>cx</name></decl></param>)</parameter_list>
  <member_list>: <call><name>mSubprocess</name><argument_list>(<argument><expr>new <call><name>JetpackProcessParent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
  , <call><name>mContext</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call>
</member_list><block>{
  <expr_stmt><expr><call><name><name>mSubprocess</name>-&gt;<name>Launch</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Open</name><argument_list>(<argument><expr><call><name><name>mSubprocess</name>-&gt;<name>GetChannel</name></name><argument_list>()</argument_list></call></expr></argument>,
       <argument><expr><call><name><name>mSubprocess</name>-&gt;<name>GetChildProcessHandle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>JetpackParent</name>::~<name>JetpackParent</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mSubprocess</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>Destroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
}</block></destructor>

<macro><name>NS_IMPL_ISUPPORTS1</name><argument_list>(<argument>JetpackParent</argument>, <argument>nsIJetpack</argument>)</argument_list></macro>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>JetpackParent</name>::<name>SendMessage</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aMessageName</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXPConnect</name></expr></argument>&gt;</argument_list></name></type> <name>xpc</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><call><name><name>nsIXPConnect</name>::<name>GetCID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsAXPCNativeCallContext</name>*</type> <name>ncc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>xpc</name>-&gt;<name>GetCurrentNativeCallContext</name></name><argument_list>(<argument><expr>&amp;<name>ncc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>JSContext</name>*</type> <name>cx</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>ncc</name>-&gt;<name>GetJSContext</name></name><argument_list>(<argument><expr>&amp;<name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>argc</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>ncc</name>-&gt;<name>GetArgc</name></name><argument_list>(<argument><expr>&amp;<name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>jsval</name>*</type> <name>argv</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>ncc</name>-&gt;<name>GetArgvPtr</name></name><argument_list>(<argument><expr>&amp;<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>Variant</name></expr></argument>&gt;</argument_list></name></type> <name>data</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><call><name><name>data</name>.<name>SetCapacity</name></name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>JSAutoRequest</name></type> <name>request</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>JSAutoEnterCompartment</name></type> <name>ac</name></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<call><name><name>ac</name>.<name>enter</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JS_GetGlobalObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr>false</expr>;</return></then></if>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>argc</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
    <if>if <condition>(<expr>!<call><name>jsval_to_Variant</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>data</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
      <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return></then></if></for>

  <decl_stmt><decl><type><name><name>InfallibleTArray</name><argument_list>&lt;<argument><expr><name>Variant</name></expr></argument>&gt;</argument_list></name></type> <name>dataForSend</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>dataForSend</name>.<name>SwapElements</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<call><name>SendSendMessage</name><argument_list>(<argument><expr><call><name>nsString</name><argument_list>(<argument><expr><name>aMessageName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dataForSend</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>JetpackParent</name>::<name>RegisterReceiver</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aMessageName</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>jsval</name> &amp;</type><name>aReceiver</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>JetpackActorCommon</name>::<name>RegisterReceiver</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>,
                                              <argument><expr><call><name>nsString</name><argument_list>(<argument><expr><name>aMessageName</name></expr></argument>)</argument_list></call></expr></argument>,
                                              <argument><expr><name>aReceiver</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>JetpackParent</name>::<name>UnregisterReceiver</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aMessageName</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>jsval</name> &amp;</type><name>aReceiver</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>JetpackActorCommon</name>::<name>UnregisterReceiver</name></name><argument_list>(<argument><expr><call><name>nsString</name><argument_list>(<argument><expr><name>aMessageName</name></expr></argument>)</argument_list></call></expr></argument>,
                                         <argument><expr><name>aReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>JetpackParent</name>::<name>UnregisterReceivers</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aMessageName</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>JetpackActorCommon</name>::<name>UnregisterReceivers</name></name><argument_list>(<argument><expr><call><name>nsString</name><argument_list>(<argument><expr><name>aMessageName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>JetpackParent</name>::<name>EvalScript</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aScript</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>SendEvalScript</name><argument_list>(<argument><expr><call><name>nsString</name><argument_list>(<argument><expr><name>aScript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<class>class <name>AutoCXPusher</name>
<block>{<private type="default">
</private><public>public:
  <constructor><name>AutoCXPusher</name><parameter_list>(<param><decl><type><name>JSContext</name>*</type> <name>cx</name></decl></param>)</parameter_list>
    <member_list>: <call><name>mCXStack</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/js/xpc/ContextStack;1"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
  </member_list><block>{
    <if>if <condition>(<expr><name>mCXStack</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>mCXStack</name>-&gt;<name>Push</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  }</block></constructor>
  <destructor><name>~<name>AutoCXPusher</name></name><parameter_list>()</parameter_list>
  <block>{
    <if>if <condition>(<expr><name>mCXStack</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>mCXStack</name>-&gt;<name>Pop</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  }</block></destructor>

</public><private>private:
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIJSContextStack</name></expr></argument>&gt;</argument_list></name></type> <name>mCXStack</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JSContext</name>*</type> <name>mCX</name></decl>;</decl_stmt>
</private>}</block>;</class>

<function><type><name>bool</name></type>
<name><name>JetpackParent</name>::<name>RecvSendMessage</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsString</name>&amp;</type> <name>messageName</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name><name>InfallibleTArray</name><argument_list>&lt;<argument><expr><name>Variant</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>data</name></decl></param>)</parameter_list>
<block>{
  <function_decl><type><name>AutoCXPusher</name></type> <name>cxp</name><parameter_list>(<param><decl><type><name>mContext</name></type></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>JSAutoRequest</name></type> <name>request</name><parameter_list>(<param><decl><type><name>mContext</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>JSAutoEnterCompartment</name></type> <name>ac</name></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<call><name><name>ac</name>.<name>enter</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name>JS_GetGlobalObject</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr>false</expr>;</return></then></if>

  <return>return <expr><call><name><name>JetpackActorCommon</name>::<name>RecvMessage</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>messageName</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>bool</name></type>
<name><name>JetpackParent</name>::<name>AnswerCallMessage</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsString</name>&amp;</type> <name>messageName</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name><name>InfallibleTArray</name><argument_list>&lt;<argument><expr><name>Variant</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>data</name></decl></param>,
                                 <param><decl><type><name><name>InfallibleTArray</name><argument_list>&lt;<argument><expr><name>Variant</name></expr></argument>&gt;</argument_list></name>*</type> <name>results</name></decl></param>)</parameter_list>
<block>{
  <function_decl><type><name>AutoCXPusher</name></type> <name>cxp</name><parameter_list>(<param><decl><type><name>mContext</name></type></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>JSAutoRequest</name></type> <name>request</name><parameter_list>(<param><decl><type><name>mContext</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>JSAutoEnterCompartment</name></type> <name>ac</name></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<call><name><name>ac</name>.<name>enter</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name>JS_GetGlobalObject</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr>false</expr>;</return></then></if>

  <return>return <expr><call><name><name>JetpackActorCommon</name>::<name>RecvMessage</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>messageName</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>JetpackParent</name>::<name>CreateHandle</name></name><parameter_list>(<param><decl><type><name>nsIVariant</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>HandleParent</name>*</type> <name>handle</name> <init>=
    <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>HandleParent</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>SendPHandleConstructor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXPConnect</name></expr></argument>&gt;</argument_list></name></type> <name>xpc</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><call><name><name>nsIXPConnect</name>::<name>GetCID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>JSAutoRequest</name></type> <name>request</name><parameter_list>(<param><decl><type><name>mContext</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>JSAutoEnterCompartment</name></type> <name>ac</name></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<call><name><name>ac</name>.<name>enter</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name>JS_GetGlobalObject</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr>false</expr>;</return></then></if>

  <decl_stmt><decl><type><name>JSObject</name>*</type> <name>hobj</name> <init>= <expr><call><name><name>handle</name>-&gt;<name>ToJSObject</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>hobj</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <return>return <expr><call><name><name>xpc</name>-&gt;<name>JSToVariant</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>hobj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>JetpackParent</name>::<name>Destroy</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mSubprocess</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_NOT_INITIALIZED</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>Close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>XRE_GetIOMessageLoop</name><argument_list>()</argument_list></call>
    -&gt;<call><name>PostTask</name><argument_list>(<argument><expr><name>FROM_HERE</name></expr></argument>, <argument><expr>new <call><name><name>DeleteTask</name><argument_list>&lt;<argument><expr><name>JetpackProcessParent</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mSubprocess</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mSubprocess</name> = <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>PHandleParent</name>*</type>
<name><name>JetpackParent</name>::<name>AllocPHandle</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr>new <call><name>HandleParent</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>bool</name></type>
<name><name>JetpackParent</name>::<name>DeallocPHandle</name></name><parameter_list>(<param><decl><type><name>PHandleParent</name>*</type> <name>actor</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>delete <name>actor</name></expr>;</expr_stmt>
  <return>return <expr>true</expr>;</return>
}</block></function>

}</block></namespace> <comment type="line">// namespace jetpack</comment>
}</block></namespace> <comment type="line">// namespace mozilla</comment>
</unit>
