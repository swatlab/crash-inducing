<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="0067d29811fa30a8d7986279899e93a418e81ec8.h"><comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Fennec Electrolysis.
 *
 * The Initial Developer of the Original Code is
 *   The Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>mozilla_dom_DocumentRendererChild</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mozilla_dom_DocumentRendererChild</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozilla/ipc/PDocumentRendererChild.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsICanvasRenderingContextInternal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gfxContext.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>nsIDOMWindow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>mozilla</name> <block>{
<decl_stmt><decl><type><name>namespace</name></type> <name>ipc</name> <block>{

<expr_stmt><expr><name>class</name> <name>DocumentRendererChild</name> : <name>public</name> <name>PDocumentRendererChild</name>
<block>{
<expr><name>public</name>:
    <call><name>DocumentRendererChild</name><argument_list>()</argument_list></call></expr>;
    <expr><name>virtual</name> ~<call><name>DocumentRendererChild</name><argument_list>()</argument_list></call></expr>;
    
    <expr><name>bool</name> <macro><name>RenderDocument</name><argument_list>(<argument>nsIDOMWindow *window</argument>,
                        <argument>const nsRect&amp; documentRect</argument>, <argument>const gfxMatrix&amp; transform</argument>,
                        <argument>const nsString&amp; bgcolor</argument>,
                        <argument>PRUint32 renderFlags</argument>, <argument>PRBool flushLayout</argument>, 
                        <argument>const nsIntSize&amp; renderSize</argument>, <argument>nsCString&amp; data</argument>)</argument_list></macro></expr>;

<expr><name>private</name>:

    <call><name>DISALLOW_EVIL_CONSTRUCTORS</name><argument_list>(<argument><expr><name>DocumentRendererChild</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

}</block></decl></decl_stmt>
}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
