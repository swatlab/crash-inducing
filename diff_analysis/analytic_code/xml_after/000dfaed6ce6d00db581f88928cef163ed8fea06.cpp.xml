<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="000dfaed6ce6d00db581f88928cef163ed8fea06.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: set ts=8 sw=4 et tw=78:
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code, released
 * March 31, 1998.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<comment type="block">/*
 * JavaScript API.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jstypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsstdint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsarena.h"</cpp:file></cpp:include> <comment type="block">/* Added by JSIFY */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsutil.h"</cpp:file></cpp:include> <comment type="block">/* Added by JSIFY */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsclist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsdhash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsprf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsarray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsatom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsbool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsbuiltins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jscntxt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsversion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsdate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsdtoa.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsemit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsexn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsfun.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsgc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsinterp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsiter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jslock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsmath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsobj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsopcode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsparse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsregexp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsscan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsscope.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsscript.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsstr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jstask.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jstracer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsdbgapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prmjtime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsstaticcheck.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsvector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jstypedarray.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsatominlines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsscopeinlines.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_XML_SUPPORT</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsxml.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<using>using namespace <name>js</name>;</using>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_VA_LIST_AS_ARRAY</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_ADDRESSOF_VA_LIST</name><parameter_list>(<param><type><name>ap</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((va_list *)(ap))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_ADDRESSOF_VA_LIST</name><parameter_list>(<param><type><name>ap</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(&amp;(ap))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JS_THREADSAFE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_REQUEST</name><parameter_list>(<param><type><name>cx</name></type></param>)</parameter_list></cpp:macro>                                                   \
    <cpp:value>JS_ASSERT((cx)-&gt;requestDepth || (cx)-&gt;thread == (cx)-&gt;runtime-&gt;gcThread)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_REQUEST</name><parameter_list>(<param><type><name>cx</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Check that we can cast JSObject* as jsval without tag bit manipulations. */</comment>
<expr_stmt><expr><call><name>JS_STATIC_ASSERT</name><argument_list>(<argument><expr><name>JSVAL_OBJECT</name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Check that JSVAL_TRACE_KIND works. */</comment>
<expr_stmt><expr><call><name>JS_STATIC_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_TRACE_KIND</name><argument_list>(<argument><expr><name>JSVAL_OBJECT</name></expr></argument>)</argument_list></call> == <name>JSTRACE_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>JS_STATIC_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_TRACE_KIND</name><argument_list>(<argument><expr><name>JSVAL_DOUBLE</name></expr></argument>)</argument_list></call> == <name>JSTRACE_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>JS_STATIC_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_TRACE_KIND</name><argument_list>(<argument><expr><name>JSVAL_STRING</name></expr></argument>)</argument_list></call> == <name>JSTRACE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>int64</argument>)</argument_list></macro>
<macro><name>JS_Now</name><argument_list>()</argument_list></macro>
<block>{
    <return>return <expr><call><name>PRMJ_Now</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>jsval</argument>)</argument_list></macro>
<macro><name>JS_GetNaNValue</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <return>return <expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>NaNValue</name></name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>jsval</argument>)</argument_list></macro>
<macro><name>JS_GetNegativeInfinityValue</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <return>return <expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>negativeInfinityValue</name></name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>jsval</argument>)</argument_list></macro>
<macro><name>JS_GetPositiveInfinityValue</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <return>return <expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>positiveInfinityValue</name></name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>jsval</argument>)</argument_list></macro>
<macro><name>JS_GetEmptyStringValue</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>TryArgumentFormatter</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>formatp</name></decl></param>, <param><decl><type><name>JSBool</name></type> <name>fromJS</name></decl></param>,
                     <param><decl><type><name>jsval</name> **</type><name>vpp</name></decl></param>, <param><decl><type><name>va_list</name> *</type><name>app</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>format</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSArgumentFormatMap</name> *</type><name>map</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>format</name> = *<name>formatp</name></expr>;</expr_stmt>
    <for>for (<init><expr><name>map</name> = <name><name>cx</name>-&gt;<name>argumentFormatMap</name></name></expr>;</init> <condition><expr><name>map</name></expr>;</condition> <incr><expr><name>map</name> = <name><name>map</name>-&gt;<name>next</name></name></expr></incr>) <block>{
        <if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name><name>map</name>-&gt;<name>format</name></name></expr></argument>, <argument><expr><name><name>map</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>formatp</name> = <name>format</name> + <name><name>map</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
            <return>return <expr><call><name><name>map</name>-&gt;<name>formatter</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>fromJS</name></expr></argument>, <argument><expr><name>vpp</name></expr></argument>, <argument><expr><name>app</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSMSG_BAD_CHAR</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_FALSE</name></expr>;</return>
}</block></function>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ConvertArguments</name><argument_list>(<argument>JSContext *cx</argument>, <argument>uintN argc</argument>, <argument>jsval *argv</argument>, <argument>const char *format</argument>,
                    <argument>...</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>JS_ConvertArgumentsVA</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ConvertArgumentsVA</name><argument_list>(<argument>JSContext *cx</argument>, <argument>uintN argc</argument>, <argument>jsval *argv</argument>,
                      <argument>const char *format</argument>, <argument>va_list ap</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>jsval</name> *</type><name>sp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>required</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsdouble</name></type> <name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sp</name> = <name>argv</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>required</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <while>while <condition>(<expr>(<name>c</name> = *<name>format</name>++) != '\0'</expr>)</condition> <block>{
        <if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <continue>continue;</continue></then></if>
        <if>if <condition>(<expr><name>c</name> == '/'</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>required</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <if>if <condition>(<expr><name>sp</name> == <name>argv</name> + <name>argc</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>required</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>fun</name> = <call><name>js_ValueToFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>argv</name><index>[<expr>-2</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>fun</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>char</name></type> <name><name>numBuf</name><index>[<expr>12</expr>]</index></name></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>JS_snprintf</name><argument_list>(<argument><expr><name>numBuf</name></expr></argument>, <argument><expr>sizeof <name>numBuf</name></expr></argument>, <argument><expr>"%u"</expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                         <argument><expr><name>JSMSG_MORE_ARGS_NEEDED</name></expr></argument>,
                                         <argument><expr><call><name>JS_GetFunctionName</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numBuf</name></expr></argument>,
                                         <argument><expr>(<name>argc</name> == 1) ? "" : "s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><name>JS_FALSE</name></expr>;</return>
            }</block></then></if>
            <break>break;</break>
        }</block></then></if>
        <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{
          <case>case <expr>'b'</expr>:
            <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>JSBool</name> *</expr></argument>)</argument_list></call> = <call><name>js_ValueToBoolean</name><argument_list>(<argument><expr>*<name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </case><case>case <expr>'c'</expr>:
            <if>if <condition>(<expr>!<call><name>JS_ValueToUint16</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>sp</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>uint16</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <break>break;</break>
          </case><case>case <expr>'i'</expr>:
            <if>if <condition>(<expr>!<call><name>JS_ValueToECMAInt32</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>sp</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int32</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <break>break;</break>
          </case><case>case <expr>'u'</expr>:
            <if>if <condition>(<expr>!<call><name>JS_ValueToECMAUint32</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>sp</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>uint32</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <break>break;</break>
          </case><case>case <expr>'j'</expr>:
            <if>if <condition>(<expr>!<call><name>JS_ValueToInt32</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>sp</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int32</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <break>break;</break>
          </case><case>case <expr>'d'</expr>:
            <if>if <condition>(<expr>!<call><name>JS_ValueToNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>sp</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>jsdouble</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <break>break;</break>
          </case><case>case <expr>'I'</expr>:
            <if>if <condition>(<expr>!<call><name>JS_ValueToNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>sp</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>jsdouble</name> *</expr></argument>)</argument_list></call> = <call><name>js_DoubleToInteger</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </case><case>case <expr>'s'</expr>:
          </case><case>case <expr>'S'</expr>:
          </case><case>case <expr>'W'</expr>:
            <expr_stmt><expr><name>str</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <expr_stmt><expr>*<name>sp</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>c</name> == 's'</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bytes</name> <init>= <expr><call><name>js_GetStringBytes</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<name>bytes</name></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
                <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr>const <name>char</name> **</expr></argument>)</argument_list></call> = <name>bytes</name></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>c</name> == 'W'</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>const</specifier> <name>jschar</name> *</type><name>chars</name> <init>= <expr><call><name>js_GetStringChars</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<name>chars</name></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
                <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr>const <name>jschar</name> **</expr></argument>)</argument_list></call> = <name>chars</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>JSString</name> **</expr></argument>)</argument_list></call> = <name>str</name></expr>;</expr_stmt>
            }</block></else></if></else></if>
            <break>break;</break>
          </case><case>case <expr>'o'</expr>:
            <if>if <condition>(<expr>!<call><name>js_ValueToObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>sp</name></expr></argument>, <argument><expr>&amp;<name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <expr_stmt><expr>*<name>sp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>JSObject</name> **</expr></argument>)</argument_list></call> = <name>obj</name></expr>;</expr_stmt>
            <break>break;</break>
          </case><case>case <expr>'f'</expr>:
            <expr_stmt><expr><name>obj</name> = <call><name>js_ValueToFunctionObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <expr_stmt><expr>*<name>sp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>JSFunction</name> **</expr></argument>)</argument_list></call> = <call><name>GET_FUNCTION_PRIVATE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </case><case>case <expr>'v'</expr>:
            <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>jsval</name> *</expr></argument>)</argument_list></call> = *<name>sp</name></expr>;</expr_stmt>
            <break>break;</break>
          </case><case>case <expr>'*'</expr>:
            <break>break;</break>
          </case><default>default:
            <expr_stmt><expr><name>format</name>--</expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name>TryArgumentFormatter</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>format</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>, <argument><expr>&amp;<name>sp</name></expr></argument>,
                                      <argument><expr><call><name>JS_ADDRESSOF_VA_LIST</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>JS_FALSE</name></expr>;</return>
            }</block></then></if>
            <comment type="block">/* NB: the formatter already updated sp, so we continue here. */</comment>
            <continue>continue;</continue>
        </default>}</block></switch>
        <expr_stmt><expr><name>sp</name>++</expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_AddArgumentFormatter</name><argument_list>(<argument>JSContext *cx</argument>, <argument>const char *format</argument>,
                        <argument>JSArgumentFormatter formatter</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSArgumentFormatMap</name> **</type><name>mpp</name></decl>, *<decl><type ref="prev"/><name>map</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>length</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mpp</name> = &amp;<name><name>cx</name>-&gt;<name>argumentFormatMap</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr>(<name>map</name> = *<name>mpp</name>) != <name>NULL</name></expr>)</condition> <block>{
        <comment type="block">/* Insert before any shorter string to match before prefixes. */</comment>
        <if>if <condition>(<expr><name><name>map</name>-&gt;<name>length</name></name> &lt; <name>length</name></expr>)</condition><then>
            <break>break;</break></then></if>
        <if>if <condition>(<expr><name><name>map</name>-&gt;<name>length</name></name> == <name>length</name> &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>map</name>-&gt;<name>format</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>out</name>;</goto></then></if>
        <expr_stmt><expr><name>mpp</name> = &amp;<name><name>map</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>map</name> = (<name>JSArgumentFormatMap</name> *) <call><name><name>cx</name>-&gt;<name>malloc</name></name><argument_list>(<argument><expr>sizeof *<name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>map</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>map</name>-&gt;<name>format</name></name> = <name>format</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name>-&gt;<name>length</name></name> = <name>length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name>-&gt;<name>next</name></name> = *<name>mpp</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>mpp</name> = <name>map</name></expr>;</expr_stmt>
<label><name>out</name>:</label>
    <expr_stmt><expr><name><name>map</name>-&gt;<name>formatter</name></name> = <name>formatter</name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_RemoveArgumentFormatter</name><argument_list>(<argument>JSContext *cx</argument>, <argument>const char *format</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSArgumentFormatMap</name> **</type><name>mpp</name></decl>, *<decl><type ref="prev"/><name>map</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>length</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mpp</name> = &amp;<name><name>cx</name>-&gt;<name>argumentFormatMap</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr>(<name>map</name> = *<name>mpp</name>) != <name>NULL</name></expr>)</condition> <block>{
        <if>if <condition>(<expr><name><name>map</name>-&gt;<name>length</name></name> == <name>length</name> &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>map</name>-&gt;<name>format</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>mpp</name> = <name><name>map</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>free</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><name>mpp</name> = &amp;<name><name>map</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
    }</block></while>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ConvertValue</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval v</argument>, <argument>JSType type</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsdouble</name></type> <name>d</name></decl>, *<decl><type ref="prev"/><name>dp</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
      <case>case <expr><name>JSTYPE_VOID</name></expr>:
        <expr_stmt><expr>*<name>vp</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
        <break>break;</break>
      </case><case>case <expr><name>JSTYPE_OBJECT</name></expr>:
        <expr_stmt><expr><name>ok</name> = <call><name>js_ValueToObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr>&amp;<name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>ok</name></expr>)</condition><then>
            <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <break>break;</break>
      </case><case>case <expr><name>JSTYPE_FUNCTION</name></expr>:
        <expr_stmt><expr>*<name>vp</name> = <name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>obj</name> = <call><name>js_ValueToFunctionObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSV2F_SEARCH_STACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ok</name> = (<name>obj</name> != <name>NULL</name>)</expr>;</expr_stmt>
        <break>break;</break>
      </case><case>case <expr><name>JSTYPE_STRING</name></expr>:
        <expr_stmt><expr><name>str</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ok</name> = (<name>str</name> != <name>NULL</name>)</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>ok</name></expr>)</condition><then>
            <expr_stmt><expr>*<name>vp</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <break>break;</break>
      </case><case>case <expr><name>JSTYPE_NUMBER</name></expr>:
        <expr_stmt><expr><name>ok</name> = <call><name>JS_ValueToNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>dp</name> = <call><name>js_NewWeaklyRootedDouble</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ok</name> = (<name>dp</name> != <name>NULL</name>)</expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ok</name></expr>)</condition><then>
                <expr_stmt><expr>*<name>vp</name> = <call><name>DOUBLE_TO_JSVAL</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if>
        <break>break;</break>
      </case><case>case <expr><name>JSTYPE_BOOLEAN</name></expr>:
        <expr_stmt><expr>*<name>vp</name> = <call><name>BOOLEAN_TO_JSVAL</name><argument_list>(<argument><expr><call><name>js_ValueToBoolean</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
      </case><default>default: <block>{
        <decl_stmt><decl><type><name>char</name></type> <name><name>numBuf</name><index>[<expr>12</expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>JS_snprintf</name><argument_list>(<argument><expr><name>numBuf</name></expr></argument>, <argument><expr>sizeof <name>numBuf</name></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr>(<name>int</name>)<name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSMSG_BAD_TYPE</name></expr></argument>,
                             <argument><expr><name>numBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
        <break>break;</break>
      }</block>
    </default>}</block></switch>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ValueToObject</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval v</argument>, <argument>JSObject **objp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_ValueToObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>objp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSFunction *</argument>)</argument_list></macro>
<macro><name>JS_ValueToFunction</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval v</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_ValueToFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>, <argument><expr><name>JSV2F_SEARCH_STACK</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSFunction *</argument>)</argument_list></macro>
<macro><name>JS_ValueToConstructor</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval v</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_ValueToFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>, <argument><expr><name>JSV2F_SEARCH_STACK</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro>
<macro><name>JS_ValueToString</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval v</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro>
<macro><name>JS_ValueToSource</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval v</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_ValueToSource</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ValueToNumber</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval v</argument>, <argument>jsdouble *dp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>AutoValueRooter</name></type> <name>tvr</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>v</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr>*<name>dp</name> = <call><name>js_ValueToNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name><name>tvr</name>.<name>addr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>!<call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><call><name><name>tvr</name>.<name>value</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_DoubleIsInt32</name><argument_list>(<argument>jsdouble d</argument>, <argument>jsint *ip</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>JSDOUBLE_IS_INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>*<name>ip</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ValueToECMAInt32</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval v</argument>, <argument>int32 *ip</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>AutoValueRooter</name></type> <name>tvr</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>v</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr>*<name>ip</name> = <call><name>js_ValueToECMAInt32</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name><name>tvr</name>.<name>addr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>!<call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><call><name><name>tvr</name>.<name>value</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ValueToECMAUint32</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval v</argument>, <argument>uint32 *ip</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>AutoValueRooter</name></type> <name>tvr</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>v</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr>*<name>ip</name> = <call><name>js_ValueToECMAUint32</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name><name>tvr</name>.<name>addr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>!<call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><call><name><name>tvr</name>.<name>value</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ValueToInt32</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval v</argument>, <argument>int32 *ip</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>AutoValueRooter</name></type> <name>tvr</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>v</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr>*<name>ip</name> = <call><name>js_ValueToInt32</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name><name>tvr</name>.<name>addr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>!<call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><call><name><name>tvr</name>.<name>value</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ValueToUint16</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval v</argument>, <argument>uint16 *ip</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>AutoValueRooter</name></type> <name>tvr</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>v</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr>*<name>ip</name> = <call><name>js_ValueToUint16</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name><name>tvr</name>.<name>addr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>!<call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><call><name><name>tvr</name>.<name>value</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ValueToBoolean</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval v</argument>, <argument>JSBool *bp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>bp</name> = <call><name>js_ValueToBoolean</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSType</argument>)</argument_list></macro>
<macro><name>JS_TypeOfValue</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval v</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSType</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>obj</name></expr>)</condition><then>
            <return>return <expr><call><name><name>obj</name>-&gt;<name>map</name>-&gt;<name>ops</name>-&gt;<name>typeOf</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        <expr_stmt><expr><name>type</name> = <name>JSTYPE_OBJECT</name></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>JSVAL_IS_NUMBER</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>type</name> = <name>JSTYPE_NUMBER</name></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>type</name> = <name>JSTYPE_STRING</name></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>JSVAL_IS_BOOLEAN</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>type</name> = <name>JSTYPE_BOOLEAN</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>type</name> = <name>JSTYPE_VOID</name></expr>;</expr_stmt>
    }</block></else></if></else></if></else></if></else></if>
    <return>return <expr><name>type</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>const char *</argument>)</argument_list></macro>
<macro><name>JS_GetTypeName</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSType type</argument>)</argument_list></macro>
<block>{
    <if>if <condition>(<expr>(<name>uintN</name>)<name>type</name> &gt;= (<name>uintN</name>)<name>JSTYPE_LIMIT</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><call><name>JS_TYPE_STR</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_StrictlyEqual</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval v1</argument>, <argument>jsval v2</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>js_StrictlyEqual</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_SameValue</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval v1</argument>, <argument>jsval v2</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>js_SameValue</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<comment type="block" format="doxygen">/************************************************************************/</comment>

<comment type="block">/*
 * Has a new runtime ever been created?  This flag is used to detect unsafe
 * changes to js_CStringsAreUTF8 after a runtime has been created, and to
 * ensure that "first checks" on runtime creation are run only once.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>JSBool</name></type> <name>js_NewRuntimeWasCalled</name> <init>= <expr><name>JS_FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<constructor><name><name>JSRuntime</name>::<name>JSRuntime</name></name><parameter_list>()</parameter_list>
<block>{
    <comment type="block">/* Initialize infallibly first, so we can goto bad and JS_DestroyRuntime. */</comment>
    <expr_stmt><expr><call><name>JS_INIT_CLIST</name><argument_list>(<argument><expr>&amp;<name>contextList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_INIT_CLIST</name><argument_list>(<argument><expr>&amp;<name>trapList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_INIT_CLIST</name><argument_list>(<argument><expr>&amp;<name>watchPointList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<function><type><name>bool</name></type>
<name><name>JSRuntime</name>::<name>init</name></name><parameter_list>(<param><decl><type><name>uint32</name></type> <name>maxbytes</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<call><name>js_InitGC</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>maxbytes</name></expr></argument>)</argument_list></call> || !<call><name>js_InitAtomState</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>

    <expr_stmt><expr><name>deflatedStringCache</name> = new <call><name><name>js</name>::<name>DeflatedStringCache</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>deflatedStringCache</name> || !<call><name><name>deflatedStringCache</name>-&gt;<name>init</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <expr_stmt><expr><name>gcLock</name> = <call><name>JS_NEW_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>gcLock</name></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>
    <expr_stmt><expr><name>gcDone</name> = <call><name>JS_NEW_CONDVAR</name><argument_list>(<argument><expr><name>gcLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>gcDone</name></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>
    <expr_stmt><expr><name>requestDone</name> = <call><name>JS_NEW_CONDVAR</name><argument_list>(<argument><expr><name>gcLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>requestDone</name></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>
    <comment type="block">/* this is asymmetric with JS_ShutDown: */</comment>
    <if>if <condition>(<expr>!<call><name>js_SetupLocks</name><argument_list>(<argument><expr>8</expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>
    <expr_stmt><expr><name>rtLock</name> = <call><name>JS_NEW_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>rtLock</name></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>
    <expr_stmt><expr><name>stateChange</name> = <call><name>JS_NEW_CONDVAR</name><argument_list>(<argument><expr><name>gcLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>stateChange</name></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>
    <expr_stmt><expr><name>titleSharingDone</name> = <call><name>JS_NEW_CONDVAR</name><argument_list>(<argument><expr><name>gcLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>titleSharingDone</name></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>
    <expr_stmt><expr><name>titleSharingTodo</name> = <name>NO_TITLE_SHARING_TODO</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>debuggerLock</name> = <call><name>JS_NEW_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>debuggerLock</name></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>
    <expr_stmt><expr><name>deallocatorThread</name> = new <call><name>JSBackgroundThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>deallocatorThread</name> || !<call><name><name>deallocatorThread</name>-&gt;<name>init</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><call><name><name>propertyTree</name>.<name>init</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name>js_InitThreads</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<destructor><name><name>JSRuntime</name>::~<name>JSRuntime</name></name><parameter_list>()</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <comment type="block">/* Don't hurt everyone in leaky ol' Mozilla with a fatal JS_ASSERT! */</comment>
    <if>if <condition>(<expr>!<call><name>JS_CLIST_IS_EMPTY</name><argument_list>(<argument><expr>&amp;<name>contextList</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name></decl>, *<decl><type ref="prev"/><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uintN</name></type> <name>cxcount</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr>(<name>cx</name> = <call><name>js_ContextIterator</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>, <argument><expr>&amp;<name>iter</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"JS API usage error: found live context at %p\n"</expr></argument>,
                    <argument><expr>(<name>void</name> *) <name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cxcount</name>++</expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"JS API usage error: %u context%s left in runtime upon JS_DestroyRuntime.\n"</expr></argument>,
                <argument><expr><name>cxcount</name></expr></argument>, <argument><expr>(<name>cxcount</name> == 1) ? "" : "s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>js_FinishThreads</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_FreeRuntimeScriptState</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_FinishAtomState</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Finish the deflated string cache after the last GC and after
     * calling js_FinishAtomState, which finalizes strings.
     */</comment>
    <expr_stmt><expr>delete <name>deflatedStringCache</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_FinishGC</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <if>if <condition>(<expr><name>gcLock</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_DESTROY_LOCK</name><argument_list>(<argument><expr><name>gcLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>gcDone</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_DESTROY_CONDVAR</name><argument_list>(<argument><expr><name>gcDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>requestDone</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_DESTROY_CONDVAR</name><argument_list>(<argument><expr><name>requestDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>rtLock</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_DESTROY_LOCK</name><argument_list>(<argument><expr><name>rtLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>stateChange</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_DESTROY_CONDVAR</name><argument_list>(<argument><expr><name>stateChange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>titleSharingDone</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_DESTROY_CONDVAR</name><argument_list>(<argument><expr><name>titleSharingDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>debuggerLock</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_DESTROY_LOCK</name><argument_list>(<argument><expr><name>debuggerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>deallocatorThread</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>deallocatorThread</name>-&gt;<name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>delete <name>deallocatorThread</name></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name><name>propertyTree</name>.<name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>


<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSRuntime *</argument>)</argument_list></macro>
<macro><name>JS_NewRuntime</name><argument_list>(<argument>uint32 maxbytes</argument>)</argument_list></macro>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <if>if <condition>(<expr>!<name>js_NewRuntimeWasCalled</name></expr>)</condition><then> <block>{
        <comment type="block">/*
         * This code asserts that the numbers associated with the error names
         * in jsmsg.def are monotonically increasing.  It uses values for the
         * error names enumerated in jscntxt.c.  It's not a compile-time check
         * but it's better than nothing.
         */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>errorNumber</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_DEF</name><parameter_list>(<param><type><name>name</name></type></param>, <param><type><name>number</name></type></param>, <param><type><name>count</name></type></param>, <param><type><name>exception</name></type></param>, <param><type><name>format</name></type></param>)</parameter_list></cpp:macro>                       \
    <cpp:value>JS_ASSERT(name == errorNumber++);</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"js.msg"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MSG_DEF</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_DEF</name><parameter_list>(<param><type><name>name</name></type></param>, <param><type><name>number</name></type></param>, <param><type><name>count</name></type></param>, <param><type><name>exception</name></type></param>, <param><type><name>format</name></type></param>)</parameter_list></cpp:macro>                       \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        uintN numfmtspecs = 0;                                                \
        const char *fmt;                                                      \
        for (fmt = format; *fmt != '\0'; fmt++) {                             \
            if (*fmt == '{' &amp;&amp; isdigit(fmt[1]))                               \
                ++numfmtspecs;                                                \
        }                                                                     \
        JS_ASSERT(count == numfmtspecs);                                      \
    JS_END_MACRO;</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"js.msg"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MSG_DEF</name></cpp:undef>

        <comment type="block">/*
         * If it were possible for pure inline function calls with constant
         * arguments to be computed at compile time, these would be static
         * assertions, but since it isn't, this is the best we can do.
         */</comment>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>JSVAL_NULL</name> == <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>JSVAL_ZERO</name> == <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>JSVAL_ONE</name> == <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>JSVAL_FALSE</name> == <call><name>BOOLEAN_TO_JSVAL</name><argument_list>(<argument><expr><name>JS_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>JSVAL_TRUE</name> == <call><name>BOOLEAN_TO_JSVAL</name><argument_list>(<argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_TO_SPECIAL</name><argument_list>(<argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call> == 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_TO_SPECIAL</name><argument_list>(<argument><expr><name>JSVAL_HOLE</name></expr></argument>)</argument_list></call> == (2 | (<name>JSVAL_HOLE_FLAG</name> &gt;&gt; <name>JSVAL_TAGBITS</name>))</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_TO_SPECIAL</name><argument_list>(<argument><expr><name>JSVAL_ARETURN</name></expr></argument>)</argument_list></call> == 8</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>js_NewRuntimeWasCalled</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DEBUG */</comment>

    <decl_stmt><decl><type><name>void</name> *</type><name>mem</name> <init>= <expr><call><name>js_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JSRuntime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>mem</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>JSRuntime</name> *</type><name>rt</name> <init>= <expr>new (<name>mem</name>) <call><name>JSRuntime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name><name>rt</name>-&gt;<name>init</name></name><argument_list>(<argument><expr><name>maxbytes</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_DestroyRuntime</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>rt</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_CommenceRuntimeShutDown</name><argument_list>(<argument>JSRuntime *rt</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name><name>rt</name>-&gt;<name>gcFlushCodeCaches</name></name> = true</expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_DestroyRuntime</name><argument_list>(<argument>JSRuntime *rt</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name><name>rt</name>-&gt;~<name>JSRuntime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>js_free</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_REPRMETER</name></cpp:ifdef>
<namespace>namespace <name>reprmeter</name> <block>{
    <function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>js_DumpReprMeter</name><parameter_list>()</parameter_list>;</function_decl>
}</block></namespace>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_ShutDown</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_TRACEVIS</name></cpp:ifdef>
    <expr_stmt><expr><call><name>StopTraceVis</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_OPMETER</name></cpp:ifdef>
    <function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>js_DumpOpMeters</name><parameter_list>()</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>js_DumpOpMeters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_REPRMETER</name></cpp:ifdef>
    <expr_stmt><expr><call><name><name>reprmeter</name>::<name>js_DumpReprMeter</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>js_CleanupLocks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>PRMJ_NowShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void *</argument>)</argument_list></macro>
<macro><name>JS_GetRuntimePrivate</name><argument_list>(<argument>JSRuntime *rt</argument>)</argument_list></macro>
<block>{
    <return>return <expr><name><name>rt</name>-&gt;<name>data</name></name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_SetRuntimePrivate</name><argument_list>(<argument>JSRuntime *rt</argument>, <argument>void *data</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name><name>rt</name>-&gt;<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_BeginRequest</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>CURRENT_THREAD_IS_ME</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>thread</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>cx</name>-&gt;<name>requestDepth</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>JSRuntime</name> *</type><name>rt</name> <init>= <expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>JS_LOCK_GC</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Wait until the GC is finished. */</comment>
        <if>if <condition>(<expr><name><name>rt</name>-&gt;<name>gcThread</name></name> != <name><name>cx</name>-&gt;<name>thread</name></name></expr>)</condition><then> <block>{
            <while>while <condition>(<expr><name><name>rt</name>-&gt;<name>gcLevel</name></name> &gt; 0</expr>)</condition>
                <expr_stmt><expr><call><name>JS_AWAIT_GC_DONE</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
        }</block></then></if>

        <comment type="block">/* Indicate that a request is running. */</comment>
        <expr_stmt><expr><name><name>rt</name>-&gt;<name>requestCount</name></name>++</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cx</name>-&gt;<name>requestDepth</name></name> = 1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cx</name>-&gt;<name>outstandingRequests</name></name>++</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_UNLOCK_GC</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>requestDepth</name></name>++</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>outstandingRequests</name></name>++</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_EndRequest</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <decl_stmt><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>CURRENT_THREAD_IS_ME</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>thread</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>requestDepth</name></name> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>outstandingRequests</name></name> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>cx</name>-&gt;<name>requestDepth</name></name> == 1</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LeaveTrace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* for GC safety */</comment>

        <comment type="block">/* Lock before clearing to interlock with ClaimScope, in jslock.c. */</comment>
        <expr_stmt><expr><name>rt</name> = <name><name>cx</name>-&gt;<name>runtime</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_LOCK_GC</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cx</name>-&gt;<name>requestDepth</name></name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cx</name>-&gt;<name>outstandingRequests</name></name>--</expr>;</expr_stmt>

        <expr_stmt><expr><call><name>js_ShareWaitingTitles</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Give the GC a chance to run if this was the last request running. */</comment>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>rt</name>-&gt;<name>requestCount</name></name> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rt</name>-&gt;<name>requestCount</name></name>--</expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>rt</name>-&gt;<name>requestCount</name></name> == 0</expr>)</condition><then>
            <expr_stmt><expr><call><name>JS_NOTIFY_REQUEST_DONE</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><call><name>JS_UNLOCK_GC</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>cx</name>-&gt;<name>requestDepth</name></name>--</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>outstandingRequests</name></name>--</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>

<comment type="block">/* Yield to pending GC operations, regardless of request depth */</comment>
<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_YieldRequest</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ResumeRequest</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JS_SuspendRequest</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>jsrefcount</argument>)</argument_list></macro>
<macro><name>JS_SuspendRequest</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <decl_stmt><decl><type><name>jsrefcount</name></type> <name>saveDepth</name> <init>= <expr><name><name>cx</name>-&gt;<name>requestDepth</name></name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name><name>cx</name>-&gt;<name>requestDepth</name></name></expr>)</condition> <block>{
        <expr_stmt><expr><name><name>cx</name>-&gt;<name>outstandingRequests</name></name>++</expr>;</expr_stmt>  <comment type="block">/* compensate for JS_EndRequest */</comment>
        <expr_stmt><expr><call><name>JS_EndRequest</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>saveDepth</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr>0</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_ResumeRequest</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsrefcount saveDepth</argument>)</argument_list></macro>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name><name>cx</name>-&gt;<name>requestDepth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr>--<name>saveDepth</name> &gt;= 0</expr>)</condition> <block>{
        <expr_stmt><expr><call><name>JS_BeginRequest</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cx</name>-&gt;<name>outstandingRequests</name></name>--</expr>;</expr_stmt>  <comment type="block">/* compensate for JS_BeginRequest */</comment>
    }</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_TransferRequest</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSContext *another</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>cx</name> != <name>another</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name> == <name><name>another</name>-&gt;<name>runtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>another</name>-&gt;<name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>thread</name></name> == <name><name>another</name>-&gt;<name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>requestDepth</name></name> != 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>another</name>-&gt;<name>requestDepth</name></name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Serialize access to JSContext::requestDepth from other threads. */</comment>
    <expr_stmt><expr><call><name>JS_LOCK_GC</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>another</name>-&gt;<name>requestDepth</name></name> = <name><name>cx</name>-&gt;<name>requestDepth</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>requestDepth</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_UNLOCK_GC</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_Lock</name><argument_list>(<argument>JSRuntime *rt</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>JS_LOCK_RUNTIME</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_Unlock</name><argument_list>(<argument>JSRuntime *rt</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>JS_UNLOCK_RUNTIME</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSContextCallback</argument>)</argument_list></macro>
<macro><name>JS_SetContextCallback</name><argument_list>(<argument>JSRuntime *rt</argument>, <argument>JSContextCallback cxCallback</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSContextCallback</name></type> <name>old</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>old</name> = <name><name>rt</name>-&gt;<name>cxCallback</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rt</name>-&gt;<name>cxCallback</name></name> = <name>cxCallback</name></expr>;</expr_stmt>
    <return>return <expr><name>old</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSContext *</argument>)</argument_list></macro>
<macro><name>JS_NewContext</name><argument_list>(<argument>JSRuntime *rt</argument>, <argument>size_t stackChunkSize</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>js_NewContext</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>stackChunkSize</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_DestroyContext</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>js_DestroyContext</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSDCM_FORCE_GC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_DestroyContextNoGC</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>js_DestroyContext</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSDCM_NO_GC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_DestroyContextMaybeGC</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>js_DestroyContext</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSDCM_MAYBE_GC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void *</argument>)</argument_list></macro>
<macro><name>JS_GetContextPrivate</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <return>return <expr><name><name>cx</name>-&gt;<name>data</name></name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_SetContextPrivate</name><argument_list>(<argument>JSContext *cx</argument>, <argument>void *data</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSRuntime *</argument>)</argument_list></macro>
<macro><name>JS_GetRuntime</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <return>return <expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSContext *</argument>)</argument_list></macro>
<macro><name>JS_ContextIterator</name><argument_list>(<argument>JSRuntime *rt</argument>, <argument>JSContext **iterp</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>js_ContextIterator</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>, <argument><expr><name>iterp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSVersion</argument>)</argument_list></macro>
<macro><name>JS_GetVersion</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>JSVERSION_NUMBER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSVersion</argument>)</argument_list></macro>
<macro><name>JS_SetVersion</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSVersion version</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSVersion</name></type> <name>oldVersion</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>version</name> != <name>JSVERSION_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>(<name>version</name> &amp; ~<name>JSVERSION_MASK</name>) == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldVersion</name> = <call><name>JSVERSION_NUMBER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>version</name> == <name>oldVersion</name></expr>)</condition><then>
        <return>return <expr><name>oldVersion</name></expr>;</return></then></if>

    <comment type="block">/* We no longer support 1.4 or below. */</comment>
    <if>if <condition>(<expr><name>version</name> != <name>JSVERSION_DEFAULT</name> &amp;&amp; <name>version</name> &lt;= <name>JSVERSION_1_4</name></expr>)</condition><then>
        <return>return <expr><name>oldVersion</name></expr>;</return></then></if>

    <expr_stmt><expr><name><name>cx</name>-&gt;<name>version</name></name> = (<name><name>cx</name>-&gt;<name>version</name></name> &amp; ~<name>JSVERSION_MASK</name>) | <name>version</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_OnVersionChange</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>oldVersion</name></expr>;</return>
}</block>

<struct><specifier>static</specifier> struct <name>v2smap</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>JSVersion</name></type>   <name>version</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>  *</type><name>string</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>v2smap</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><name>JSVERSION_1_0</name></expr>,     <expr>"1.0"</expr>}</block></expr>,
    <expr><block>{<expr><name>JSVERSION_1_1</name></expr>,     <expr>"1.1"</expr>}</block></expr>,
    <expr><block>{<expr><name>JSVERSION_1_2</name></expr>,     <expr>"1.2"</expr>}</block></expr>,
    <expr><block>{<expr><name>JSVERSION_1_3</name></expr>,     <expr>"1.3"</expr>}</block></expr>,
    <expr><block>{<expr><name>JSVERSION_1_4</name></expr>,     <expr>"1.4"</expr>}</block></expr>,
    <expr><block>{<expr><name>JSVERSION_ECMA_3</name></expr>,  <expr>"ECMAv3"</expr>}</block></expr>,
    <expr><block>{<expr><name>JSVERSION_1_5</name></expr>,     <expr>"1.5"</expr>}</block></expr>,
    <expr><block>{<expr><name>JSVERSION_1_6</name></expr>,     <expr>"1.6"</expr>}</block></expr>,
    <expr><block>{<expr><name>JSVERSION_1_7</name></expr>,     <expr>"1.7"</expr>}</block></expr>,
    <expr><block>{<expr><name>JSVERSION_1_8</name></expr>,     <expr>"1.8"</expr>}</block></expr>,
    <expr><block>{<expr><name>JSVERSION_ECMA_5</name></expr>,  <expr>"ECMAv5"</expr>}</block></expr>,
    <expr><block>{<expr><name>JSVERSION_DEFAULT</name></expr>, <expr><name>js_default_str</name></expr>}</block></expr>,
    <expr><block>{<expr><name>JSVERSION_UNKNOWN</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,          <comment type="block">/* must be last, NULL is sentinel */</comment>
}</block></expr></init></decl>;</struct>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>const char *</argument>)</argument_list></macro>
<macro><name>JS_VersionToString</name><argument_list>(<argument>JSVersion version</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>v2smap</name><index>[<expr><name>i</name></expr>]</index></name>.<name>string</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <if>if <condition>(<expr><name><name>v2smap</name><index>[<expr><name>i</name></expr>]</index></name>.<name>version</name> == <name>version</name></expr>)</condition><then>
            <return>return <expr><name><name>v2smap</name><index>[<expr><name>i</name></expr>]</index></name>.<name>string</name></expr>;</return></then></if></for>
    <return>return <expr>"unknown"</expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSVersion</argument>)</argument_list></macro>
<macro><name>JS_StringToVersion</name><argument_list>(<argument>const char *string</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>v2smap</name><index>[<expr><name>i</name></expr>]</index></name>.<name>string</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>v2smap</name><index>[<expr><name>i</name></expr>]</index></name>.<name>string</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <return>return <expr><name><name>v2smap</name><index>[<expr><name>i</name></expr>]</index></name>.<name>version</name></expr>;</return></then></if></for>
    <return>return <expr><name>JSVERSION_UNKNOWN</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>uint32</argument>)</argument_list></macro>
<macro><name>JS_GetOptions</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <return>return <expr><name><name>cx</name>-&gt;<name>options</name></name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>uint32</argument>)</argument_list></macro>
<macro><name>JS_SetOptions</name><argument_list>(<argument>JSContext *cx</argument>, <argument>uint32 options</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>JS_LOCK_GC</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>oldopts</name> <init>= <expr><name><name>cx</name>-&gt;<name>options</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>options</name></name> = <name>options</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_SyncOptionsToVersion</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>updateJITEnabled</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_UNLOCK_GC</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>oldopts</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>uint32</argument>)</argument_list></macro>
<macro><name>JS_ToggleOptions</name><argument_list>(<argument>JSContext *cx</argument>, <argument>uint32 options</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>JS_LOCK_GC</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>oldopts</name> <init>= <expr><name><name>cx</name>-&gt;<name>options</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>options</name></name> ^= <name>options</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_SyncOptionsToVersion</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>updateJITEnabled</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_UNLOCK_GC</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>oldopts</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>const char *</argument>)</argument_list></macro>
<macro><name>JS_GetImplementationVersion</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<block>{
    <return>return <expr>"JavaScript-C 1.8.0 pre-release 1 2007-10-03"</expr>;</return>
}</block>


<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_GetGlobalObject</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <return>return <expr><name><name>cx</name>-&gt;<name>globalObject</name></name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_SetGlobalObject</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>globalObject</name></name> = <name>obj</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_XML_SUPPORT</name></expr></cpp:if>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>xmlSettingFlags</name></name> = 0</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>

<function><type><name>JS_BEGIN_EXTERN_C</name>

<name>JSObject</name> *</type>
<name>js_InitFunctionAndObjectClasses</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSDHashTable</name> *</type><name>table</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>resolving</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSResolvingKey</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSResolvingEntry</name> *</type><name>entry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>fun_proto</name></decl>, *<decl><type ref="prev"/><name>obj_proto</name></decl>;</decl_stmt>

    <comment type="block">/* If cx has no global object, use obj so prototypes can be found. */</comment>
    <if>if <condition>(<expr>!<name><name>cx</name>-&gt;<name>globalObject</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_SetGlobalObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <comment type="block">/* Record Function and Object in cx-&gt;resolvingTable, if we are resolving. */</comment>
    <expr_stmt><expr><name>table</name> = <name><name>cx</name>-&gt;<name>resolvingTable</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>resolving</name> = (<name>table</name> &amp;&amp; <name><name>table</name>-&gt;<name>entryCount</name></name>)</expr>;</expr_stmt>
    <expr_stmt><expr><name>rt</name> = <name><name>cx</name>-&gt;<name>runtime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name>.<name>obj</name></name> = <name>obj</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>resolving</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>key</name>.<name>id</name></name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name><name>rt</name>-&gt;<name>atomState</name>.<name>classAtoms</name><index>[<expr><name>JSProto_Function</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>entry</name> = (<name>JSResolvingEntry</name> *)
                <call><name>JS_DHashTableOperate</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>JS_DHASH_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>entry</name> &amp;&amp; <name><name>entry</name>-&gt;<name>key</name>.<name>obj</name></name> &amp;&amp; (<name><name>entry</name>-&gt;<name>flags</name></name> &amp; <name>JSRESFLAG_LOOKUP</name>)</expr>)</condition><then> <block>{
            <comment type="block">/* Already resolving Function, record Object too. */</comment>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>key</name>.<name>obj</name></name> == <name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>key</name>.<name>id</name></name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name><name>rt</name>-&gt;<name>atomState</name>.<name>classAtoms</name><index>[<expr><name>JSProto_Object</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>entry</name> = (<name>JSResolvingEntry</name> *)
                    <call><name>JS_DHashTableOperate</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>JS_DHASH_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name><name>entry</name>-&gt;<name>key</name>.<name>obj</name></name> &amp;&amp; <name><name>entry</name>-&gt;<name>flags</name></name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>entry</name>-&gt;<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>entry</name>-&gt;<name>flags</name></name> = <name>JSRESFLAG_LOOKUP</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name><name>key</name>.<name>id</name></name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name><name>rt</name>-&gt;<name>atomState</name>.<name>classAtoms</name><index>[<expr><name>JSProto_Object</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>js_StartResolving</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>JSRESFLAG_LOOKUP</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>

        <expr_stmt><expr><name><name>key</name>.<name>id</name></name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name><name>rt</name>-&gt;<name>atomState</name>.<name>classAtoms</name><index>[<expr><name>JSProto_Function</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>js_StartResolving</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>JSRESFLAG_LOOKUP</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>key</name>.<name>id</name></name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name><name>rt</name>-&gt;<name>atomState</name>.<name>classAtoms</name><index>[<expr><name>JSProto_Object</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_DHashTableOperate</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>JS_DHASH_REMOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>table</name> = <name><name>cx</name>-&gt;<name>resolvingTable</name></name></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="block">/* Initialize the function class first so constructors can be made. */</comment>
    <if>if <condition>(<expr>!<call><name>js_GetClassPrototype</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>JSProto_Function</name></expr></argument>, <argument><expr>&amp;<name>fun_proto</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>fun_proto</name> = <name>NULL</name></expr>;</expr_stmt>
        <goto>goto <name>out</name>;</goto>
    }</block></then></if>
    <if>if <condition>(<expr>!<name>fun_proto</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>fun_proto</name> = <call><name>js_InitFunctionClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>fun_proto</name></expr>)</condition><then>
            <goto>goto <name>out</name>;</goto></then></if>
    }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name>JSObject</name> *</type><name>ctor</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>ctor</name> = <call><name>JS_GetConstructor</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun_proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ctor</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>fun_proto</name> = <name>NULL</name></expr>;</expr_stmt>
            <goto>goto <name>out</name>;</goto>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>obj</name>-&gt;<name>defineProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><call><name>CLASS_ATOM</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>Function</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>ctor</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="block">/* Initialize the object class next so Object.prototype works. */</comment>
    <if>if <condition>(<expr>!<call><name>js_GetClassPrototype</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>JSProto_Object</name></expr></argument>, <argument><expr>&amp;<name>obj_proto</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>fun_proto</name> = <name>NULL</name></expr>;</expr_stmt>
        <goto>goto <name>out</name>;</goto>
    }</block></then></if>
    <if>if <condition>(<expr>!<name>obj_proto</name></expr>)</condition><then>
        <expr_stmt><expr><name>obj_proto</name> = <call><name>js_InitObjectClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr>!<name>obj_proto</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>fun_proto</name> = <name>NULL</name></expr>;</expr_stmt>
        <goto>goto <name>out</name>;</goto>
    }</block></then></if>

    <comment type="block">/* Function.prototype and the global object delegate to Object.prototype. */</comment>
    <expr_stmt><expr><call><name><name>fun_proto</name>-&gt;<name>setProto</name></name><argument_list>(<argument><expr><name>obj_proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>getProto</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>obj</name>-&gt;<name>setProto</name></name><argument_list>(<argument><expr><name>obj_proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

<label><name>out</name>:</label>
    <comment type="block">/* If resolving, remove the other entry (Object or Function) from table. */</comment>
    <expr_stmt><expr><call><name>JS_DHashTableOperate</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>JS_DHASH_REMOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>resolving</name></expr>)</condition><then> <block>{
        <comment type="block">/* If not resolving, remove the first entry added above, for Object. */</comment>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>key</name>.<name>id</name></name> ==                                                   \
                  <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name><name>rt</name>-&gt;<name>atomState</name>.<name>classAtoms</name><index>[<expr><name>JSProto_Function</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>key</name>.<name>id</name></name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name><name>rt</name>-&gt;<name>atomState</name>.<name>classAtoms</name><index>[<expr><name>JSProto_Object</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_DHashTableOperate</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>JS_DHASH_REMOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>fun_proto</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>JS_END_EXTERN_C</name></type>

<name>JS_PUBLIC_API</name><argument_list>(<argument><expr><name>JSBool</name></expr></argument>)</argument_list>
<name>JS_InitStandardClasses</name><argument_list>(<argument><expr><name>JSContext</name> *<name>cx</name></expr></argument>, <argument><expr><name>JSObject</name> *<name>obj</name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><name>JSAtom</name> *<name>atom</name></expr></argument>;

    <argument><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="block">/* Define a top-level property 'undefined' with the undefined value. */</comment>
    <argument><expr><name>atom</name> = <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>atomState</name>.<name>typeAtoms</name><index>[<expr><name>JSTYPE_VOID</name></expr>]</index></name></expr></argument>;
    if <argument><expr>(!<call><name><name>obj</name>-&gt;<name>defineProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>,
                             <argument><expr><name>JS_PropertyStub</name></expr></argument>, <argument><expr><name>JS_PropertyStub</name></expr></argument>,
                             <argument><expr><name>JSPROP_PERMANENT</name> | <name>JSPROP_READONLY</name></expr></argument>)</argument_list></call>) <block>{
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></expr></argument>

    <comment type="block">/* Function and Object require cooperative bootstrapping magic. */</comment>
    <if>if <condition>(<expr>!<call><name>js_InitFunctionAndObjectClasses</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if></argument_list></decl></decl_stmt>

    <comment type="block">/* Initialize the rest of the standard objects and functions. */</comment>
    <return>return <expr><call><name>js_InitArrayClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> &amp;&amp;
           <call><name>js_InitBooleanClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> &amp;&amp;
           <call><name>js_InitExceptionClasses</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> &amp;&amp;
           <call><name>js_InitMathClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> &amp;&amp;
           <call><name>js_InitNumberClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> &amp;&amp;
           <call><name>js_InitJSONClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> &amp;&amp;
           <call><name>js_InitRegExpClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> &amp;&amp;
           <call><name>js_InitStringClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> &amp;&amp;
           <call><name>js_InitEval</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> &amp;&amp;
           <call><name>js_InitTypedArrayClasses</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> &amp;&amp;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_XML_SUPPORT</name></expr></cpp:if>
           <call><name>js_InitXMLClasses</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> &amp;&amp;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_GENERATORS</name></expr></cpp:if>
           <call><name>js_InitIteratorClasses</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> &amp;&amp;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
           <call><name>js_InitDateClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
}

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASP</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro>                 <cpp:value>(&amp;js_##name##Class)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XCLASP</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro>                <cpp:value>(&amp;js_##name##Class.base)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAGER_ATOM</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro>            <cpp:value>ATOM_OFFSET(name), NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAGER_CLASS_ATOM</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>CLASS_ATOM_OFFSET(name), NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAGER_ATOM_AND_CLASP</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>EAGER_CLASS_ATOM(name), CLASP(name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAGER_ATOM_AND_XCLASP</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>EAGER_CLASS_ATOM(name), XCLASP(name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAZY_ATOM</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro>             <cpp:value>ATOM_OFFSET(lazy.name), js_##name##_str</cpp:value></cpp:define>

typedef <struct>struct <name>JSStdName</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>JSObjectOp</name></type>  <name>init</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>      <name>atomOffset</name></decl>;</decl_stmt>     <comment type="block">/* offset of atom pointer in JSAtomState */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>  *</type><name>name</name></decl>;</decl_stmt>          <comment type="block">/* null if atom is pre-pinned, else name */</comment>
    <decl_stmt><decl><type><name>JSClass</name>     *</type><name>clasp</name></decl>;</decl_stmt>
</public>}</block> <decl><name>JSStdName</name></decl>;</struct>

<function><type><specifier>static</specifier> <name>JSAtom</name> *</type>
<name>StdNameToAtom</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSStdName</name> *</type><name>stdn</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>offset</name> = <name><name>stdn</name>-&gt;<name>atomOffset</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>atom</name> = <call><name>OFFSET_TO_ATOM</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>name</name> = <name><name>stdn</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>name</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>atom</name> = <call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ATOM_PINNED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>OFFSET_TO_ATOM</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call> = <name>atom</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <return>return <expr><name>atom</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Table of class initializers and their atom offsets in rt-&gt;atomState.
 * If you add a "standard" class, remember to update this table.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>JSStdName</name></type> <name><name>standard_class_atoms</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><name>js_InitFunctionAndObjectClasses</name></expr>,   <macro><name>EAGER_ATOM_AND_CLASP</name><argument_list>(<argument>Function</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitFunctionAndObjectClasses</name></expr>,   <macro><name>EAGER_ATOM_AND_CLASP</name><argument_list>(<argument>Object</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitArrayClass</name></expr>,                 <macro><name>EAGER_ATOM_AND_CLASP</name><argument_list>(<argument>Array</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitBooleanClass</name></expr>,               <macro><name>EAGER_ATOM_AND_CLASP</name><argument_list>(<argument>Boolean</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitDateClass</name></expr>,                  <macro><name>EAGER_ATOM_AND_CLASP</name><argument_list>(<argument>Date</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitMathClass</name></expr>,                  <macro><name>EAGER_ATOM_AND_CLASP</name><argument_list>(<argument>Math</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitNumberClass</name></expr>,                <macro><name>EAGER_ATOM_AND_CLASP</name><argument_list>(<argument>Number</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitStringClass</name></expr>,                <macro><name>EAGER_ATOM_AND_CLASP</name><argument_list>(<argument>String</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitExceptionClasses</name></expr>,           <macro><name>EAGER_ATOM_AND_CLASP</name><argument_list>(<argument>Error</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitRegExpClass</name></expr>,                <macro><name>EAGER_ATOM_AND_CLASP</name><argument_list>(<argument>RegExp</argument>)</argument_list></macro>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_XML_SUPPORT</name></expr></cpp:if>
    <expr><block>{<expr><name>js_InitXMLClass</name></expr>,                   <macro><name>EAGER_ATOM_AND_CLASP</name><argument_list>(<argument>XML</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitNamespaceClass</name></expr>,             <macro><name>EAGER_ATOM_AND_XCLASP</name><argument_list>(<argument>Namespace</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitQNameClass</name></expr>,                 <macro><name>EAGER_ATOM_AND_XCLASP</name><argument_list>(<argument>QName</argument>)</argument_list></macro>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_GENERATORS</name></expr></cpp:if>
    <expr><block>{<expr><name>js_InitIteratorClasses</name></expr>,            <macro><name>EAGER_ATOM_AND_CLASP</name><argument_list>(<argument>StopIteration</argument>)</argument_list></macro>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{<expr><name>js_InitJSONClass</name></expr>,                  <macro><name>EAGER_ATOM_AND_CLASP</name><argument_list>(<argument>JSON</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitTypedArrayClasses</name></expr>,          <expr><call><name>EAGER_CLASS_ATOM</name><argument_list>(<argument><expr><name>ArrayBuffer</name></expr></argument>)</argument_list></call></expr>, <expr>&amp;<name><name>js</name>::<name>ArrayBuffer</name>::<name>jsclass</name></name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>,                              <expr>0</expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Table of top-level function and constant names and their init functions.
 * If you add a "standard" global function or property, remember to update
 * this table.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>JSStdName</name></type> <name><name>standard_class_names</name><index>[]</index></name> <init>= <expr><block>{
    <comment type="block">/* ECMA requires that eval be a direct property of the global object. */</comment>
    <expr><block>{<expr><name>js_InitEval</name></expr>,               <expr><call><name>EAGER_ATOM</name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,

    <comment type="block">/* Global properties and functions defined by the Number class. */</comment>
    <expr><block>{<expr><name>js_InitNumberClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>NaN</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitNumberClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>Infinity</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitNumberClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>isNaN</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitNumberClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>isFinite</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitNumberClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>parseFloat</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitNumberClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>parseInt</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,

    <comment type="block">/* String global functions. */</comment>
    <expr><block>{<expr><name>js_InitStringClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>escape</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitStringClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>unescape</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitStringClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>decodeURI</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitStringClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>encodeURI</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitStringClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>decodeURIComponent</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitStringClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>encodeURIComponent</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_UNEVAL</name></expr></cpp:if>
    <expr><block>{<expr><name>js_InitStringClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>uneval</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Exception constructors. */</comment>
    <expr><block>{<expr><name>js_InitExceptionClasses</name></expr>,   <expr><call><name>EAGER_CLASS_ATOM</name><argument_list>(<argument><expr><name>Error</name></expr></argument>)</argument_list></call></expr>, <macro><name>CLASP</name><argument_list>(<argument>Error</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitExceptionClasses</name></expr>,   <expr><call><name>EAGER_CLASS_ATOM</name><argument_list>(<argument><expr><name>InternalError</name></expr></argument>)</argument_list></call></expr>, <macro><name>CLASP</name><argument_list>(<argument>Error</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitExceptionClasses</name></expr>,   <expr><call><name>EAGER_CLASS_ATOM</name><argument_list>(<argument><expr><name>EvalError</name></expr></argument>)</argument_list></call></expr>, <macro><name>CLASP</name><argument_list>(<argument>Error</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitExceptionClasses</name></expr>,   <expr><call><name>EAGER_CLASS_ATOM</name><argument_list>(<argument><expr><name>RangeError</name></expr></argument>)</argument_list></call></expr>, <macro><name>CLASP</name><argument_list>(<argument>Error</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitExceptionClasses</name></expr>,   <expr><call><name>EAGER_CLASS_ATOM</name><argument_list>(<argument><expr><name>ReferenceError</name></expr></argument>)</argument_list></call></expr>, <macro><name>CLASP</name><argument_list>(<argument>Error</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitExceptionClasses</name></expr>,   <expr><call><name>EAGER_CLASS_ATOM</name><argument_list>(<argument><expr><name>SyntaxError</name></expr></argument>)</argument_list></call></expr>, <macro><name>CLASP</name><argument_list>(<argument>Error</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitExceptionClasses</name></expr>,   <expr><call><name>EAGER_CLASS_ATOM</name><argument_list>(<argument><expr><name>TypeError</name></expr></argument>)</argument_list></call></expr>, <macro><name>CLASP</name><argument_list>(<argument>Error</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitExceptionClasses</name></expr>,   <expr><call><name>EAGER_CLASS_ATOM</name><argument_list>(<argument><expr><name>URIError</name></expr></argument>)</argument_list></call></expr>, <macro><name>CLASP</name><argument_list>(<argument>Error</argument>)</argument_list></macro>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_XML_SUPPORT</name></expr></cpp:if>
    <expr><block>{<expr><name>js_InitAnyNameClass</name></expr>,       <macro><name>EAGER_ATOM_AND_CLASP</name><argument_list>(<argument>AnyName</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitAttributeNameClass</name></expr>, <macro><name>EAGER_ATOM_AND_CLASP</name><argument_list>(<argument>AttributeName</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitXMLClass</name></expr>,           <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>XMLList</name></expr></argument>)</argument_list></call></expr>, <expr>&amp;<name>js_XMLClass</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitXMLClass</name></expr>,           <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>isXMLName</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_GENERATORS</name></expr></cpp:if>
    <expr><block>{<expr><name>js_InitIteratorClasses</name></expr>,    <macro><name>EAGER_ATOM_AND_CLASP</name><argument_list>(<argument>Iterator</argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>js_InitIteratorClasses</name></expr>,    <macro><name>EAGER_ATOM_AND_CLASP</name><argument_list>(<argument>Generator</argument>)</argument_list></macro>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Typed Arrays */</comment>
    <expr><block>{<expr><name>js_InitTypedArrayClasses</name></expr>,  <expr><call><name>EAGER_CLASS_ATOM</name><argument_list>(<argument><expr><name>ArrayBuffer</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitTypedArrayClasses</name></expr>,  <expr><call><name>EAGER_CLASS_ATOM</name><argument_list>(<argument><expr><name>Int8Array</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitTypedArrayClasses</name></expr>,  <expr><call><name>EAGER_CLASS_ATOM</name><argument_list>(<argument><expr><name>Uint8Array</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitTypedArrayClasses</name></expr>,  <expr><call><name>EAGER_CLASS_ATOM</name><argument_list>(<argument><expr><name>Int16Array</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitTypedArrayClasses</name></expr>,  <expr><call><name>EAGER_CLASS_ATOM</name><argument_list>(<argument><expr><name>Uint16Array</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitTypedArrayClasses</name></expr>,  <expr><call><name>EAGER_CLASS_ATOM</name><argument_list>(<argument><expr><name>Int32Array</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitTypedArrayClasses</name></expr>,  <expr><call><name>EAGER_CLASS_ATOM</name><argument_list>(<argument><expr><name>Uint32Array</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitTypedArrayClasses</name></expr>,  <expr><call><name>EAGER_CLASS_ATOM</name><argument_list>(<argument><expr><name>Float32Array</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitTypedArrayClasses</name></expr>,  <expr><call><name>EAGER_CLASS_ATOM</name><argument_list>(<argument><expr><name>Float64Array</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitTypedArrayClasses</name></expr>,  <expr><call><name>EAGER_CLASS_ATOM</name><argument_list>(<argument><expr><name>Uint8ClampedArray</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,

    <expr><block>{<expr><name>NULL</name></expr>,                      <expr>0</expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>JSStdName</name></type> <name><name>object_prototype_names</name><index>[]</index></name> <init>= <expr><block>{
    <comment type="block">/* Object.prototype properties (global delegates to Object.prototype). */</comment>
    <expr><block>{<expr><name>js_InitObjectClass</name></expr>,        <expr><call><name>EAGER_ATOM</name><argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitObjectClass</name></expr>,        <expr><call><name>EAGER_ATOM</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_TOSOURCE</name></expr></cpp:if>
    <expr><block>{<expr><name>js_InitObjectClass</name></expr>,        <expr><call><name>EAGER_ATOM</name><argument_list>(<argument><expr><name>toSource</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{<expr><name>js_InitObjectClass</name></expr>,        <expr><call><name>EAGER_ATOM</name><argument_list>(<argument><expr><name>toString</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitObjectClass</name></expr>,        <expr><call><name>EAGER_ATOM</name><argument_list>(<argument><expr><name>toLocaleString</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitObjectClass</name></expr>,        <expr><call><name>EAGER_ATOM</name><argument_list>(<argument><expr><name>valueOf</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_OBJ_WATCHPOINT</name></expr></cpp:if>
    <expr><block>{<expr><name>js_InitObjectClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>watch</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitObjectClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>unwatch</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{<expr><name>js_InitObjectClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>hasOwnProperty</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitObjectClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>isPrototypeOf</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitObjectClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>propertyIsEnumerable</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_GETTER_SETTER</name></expr></cpp:if>
    <expr><block>{<expr><name>js_InitObjectClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>defineGetter</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitObjectClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>defineSetter</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitObjectClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>lookupGetter</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_InitObjectClass</name></expr>,        <expr><call><name>LAZY_ATOM</name><argument_list>(<argument><expr><name>lookupSetter</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr><block>{<expr><name>NULL</name></expr>,                      <expr>0</expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ResolveStandardClass</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsval id</argument>,
                        <argument>JSBool *resolved</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSString</name> *</type><name>idstr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSStdName</name> *</type><name>stdnm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uintN</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>resolved</name> = <name>JS_FALSE</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>rt</name> = <name><name>cx</name>-&gt;<name>runtime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>rt</name>-&gt;<name>state</name></name> != <name>JSRTS_DOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>rt</name>-&gt;<name>state</name></name> == <name>JSRTS_LANDING</name> || !<call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>idstr</name> = <call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check whether we're resolving 'undefined', and define it if so. */</comment>
    <expr_stmt><expr><name>atom</name> = <name><name>rt</name>-&gt;<name>atomState</name>.<name>typeAtoms</name><index>[<expr><name>JSTYPE_VOID</name></expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>idstr</name> == <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>resolved</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
        <return>return <expr><call><name><name>obj</name>-&gt;<name>defineProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>,
                                   <argument><expr><name>JS_PropertyStub</name></expr></argument>, <argument><expr><name>JS_PropertyStub</name></expr></argument>,
                                   <argument><expr><name>JSPROP_PERMANENT</name> | <name>JSPROP_READONLY</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Try for class constructors/prototypes named by well-known atoms. */</comment>
    <expr_stmt><expr><name>stdnm</name> = <name>NULL</name></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>standard_class_atoms</name><index>[<expr><name>i</name></expr>]</index></name>.<name>init</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>atom</name> = <call><name>OFFSET_TO_ATOM</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name><name>standard_class_atoms</name><index>[<expr><name>i</name></expr>]</index></name>.<name>atomOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>idstr</name> == <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>stdnm</name> = &amp;<name><name>standard_class_atoms</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block></for>

    <if>if <condition>(<expr>!<name>stdnm</name></expr>)</condition><then> <block>{
        <comment type="block">/* Try less frequently used top-level functions and constants. */</comment>
        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>standard_class_names</name><index>[<expr><name>i</name></expr>]</index></name>.<name>init</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>atom</name> = <call><name>StdNameToAtom</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>standard_class_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <if>if <condition>(<expr><name>idstr</name> == <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>stdnm</name> = &amp;<name><name>standard_class_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>

        <if>if <condition>(<expr>!<name>stdnm</name> &amp;&amp; !<call><name><name>obj</name>-&gt;<name>getProto</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="block">/*
             * Try even less frequently used names delegated from the global
             * object to Object.prototype, but only if the Object class hasn't
             * yet been initialized.
             */</comment>
            <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>object_prototype_names</name><index>[<expr><name>i</name></expr>]</index></name>.<name>init</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>atom</name> = <call><name>StdNameToAtom</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>object_prototype_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
                <if>if <condition>(<expr><name>idstr</name> == <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>stdnm</name> = &amp;<name><name>standard_class_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>stdnm</name></expr>)</condition><then> <block>{
        <comment type="block">/*
         * If this standard class is anonymous and obj advertises itself as a
         * global object (in order to reserve slots for standard class object
         * pointers), then we don't want to resolve by name.
         *
         * If inversely, either id does not name a class, or id does not name
         * an anonymous class, or the global does not reserve slots for class
         * objects, then we must call the init hook here.
         */</comment>
        <if>if <condition>(<expr><name><name>stdnm</name>-&gt;<name>clasp</name></name> &amp;&amp;
            (<name><name>stdnm</name>-&gt;<name>clasp</name>-&gt;<name>flags</name></name> &amp; <name>JSCLASS_IS_ANONYMOUS</name>) &amp;&amp;
            (<call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call>-&gt;<name>flags</name> &amp; <name>JSCLASS_IS_GLOBAL</name>)</expr>)</condition><then> <block>{
            <return>return <expr><name>JS_TRUE</name></expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name><name>stdnm</name>-&gt;<name>init</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr>*<name>resolved</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>AlreadyHasOwnProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>JSAtom</name> *</type><name>atom</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>JS_LOCK_OBJ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSScope</name> *</type><name>scope</name> <init>= <expr><call><name>OBJ_SCOPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><call><name><name>scope</name>-&gt;<name>hasProperty</name></name><argument_list>(<argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_UNLOCK_SCOPE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>found</name></expr>;</return>
}</block></function>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_EnumerateStandardClasses</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uintN</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rt</name> = <name><name>cx</name>-&gt;<name>runtime</name></name></expr>;</expr_stmt>

    <comment type="block">/* Check whether we need to bind 'undefined' and define it if so. */</comment>
    <expr_stmt><expr><name>atom</name> = <name><name>rt</name>-&gt;<name>atomState</name>.<name>typeAtoms</name><index>[<expr><name>JSTYPE_VOID</name></expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>AlreadyHasOwnProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call> &amp;&amp;
        !<call><name><name>obj</name>-&gt;<name>defineProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>,
                             <argument><expr><name>JS_PropertyStub</name></expr></argument>, <argument><expr><name>JS_PropertyStub</name></expr></argument>,
                             <argument><expr><name>JSPROP_PERMANENT</name> | <name>JSPROP_READONLY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Initialize any classes that have not been resolved yet. */</comment>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>standard_class_atoms</name><index>[<expr><name>i</name></expr>]</index></name>.<name>init</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>atom</name> = <call><name>OFFSET_TO_ATOM</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name><name>standard_class_atoms</name><index>[<expr><name>i</name></expr>]</index></name>.<name>atomOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>AlreadyHasOwnProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call> &amp;&amp;
            !<name><name>standard_class_atoms</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>init</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>
    }</block></for>

    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block>

<function><type><specifier>static</specifier> <name>JSIdArray</name> *</type>
<name>NewIdArray</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsint</name></type> <name>length</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSIdArray</name> *</type><name>ida</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ida</name> = (<name>JSIdArray</name> *)
        <call><name><name>cx</name>-&gt;<name>malloc</name></name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>JSIdArray</name></expr></argument>, <argument><expr><name>vector</name></expr></argument>)</argument_list></call> + <name>length</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>jsval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ida</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>ida</name>-&gt;<name>length</name></name> = <name>length</name></expr>;</expr_stmt></then></if>
    <return>return <expr><name>ida</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Unlike realloc(3), this function frees ida on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>JSIdArray</name> *</type>
<name>SetIdArrayLength</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSIdArray</name> *</type><name>ida</name></decl></param>, <param><decl><type><name>jsint</name></type> <name>length</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSIdArray</name> *</type><name>rida</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>rida</name> = (<name>JSIdArray</name> *)
           <call><name>JS_realloc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ida</name></expr></argument>,
                      <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>JSIdArray</name></expr></argument>, <argument><expr><name>vector</name></expr></argument>)</argument_list></call> + <name>length</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>jsval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>rida</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_DestroyIdArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ida</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><name><name>rida</name>-&gt;<name>length</name></name> = <name>length</name></expr>;</expr_stmt></else></if>
    <return>return <expr><name>rida</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSIdArray</name> *</type>
<name>AddAtomToArray</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSAtom</name> *</type><name>atom</name></decl></param>, <param><decl><type><name>JSIdArray</name> *</type><name>ida</name></decl></param>, <param><decl><type><name>jsint</name> *</type><name>ip</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsint</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>i</name> = *<name>ip</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>length</name> = <name><name>ida</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>i</name> &gt;= <name>length</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ida</name> = <call><name>SetIdArrayLength</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ida</name></expr></argument>, <argument><expr><call><name>JS_MAX</name><argument_list>(<argument><expr><name>length</name> * 2</expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ida</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>i</name> &lt; <name><name>ida</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>ida</name>-&gt;<name>vector</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>ip</name> = <name>i</name> + 1</expr>;</expr_stmt>
    <return>return <expr><name>ida</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSIdArray</name> *</type>
<name>EnumerateIfResolved</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>JSAtom</name> *</type><name>atom</name></decl></param>, <param><decl><type><name>JSIdArray</name> *</type><name>ida</name></decl></param>,
                    <param><decl><type><name>jsint</name> *</type><name>ip</name></decl></param>, <param><decl><type><name>JSBool</name> *</type><name>foundp</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>foundp</name> = <call><name>AlreadyHasOwnProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>*<name>foundp</name></expr>)</condition><then>
        <expr_stmt><expr><name>ida</name> = <call><name>AddAtomToArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><name>ida</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>ida</name></expr>;</return>
}</block></function>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSIdArray *</argument>)</argument_list></macro>
<macro><name>JS_EnumerateResolvedStandardClasses</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                                    <argument>JSIdArray *ida</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsint</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>found</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObjectOp</name></type> <name>init</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rt</name> = <name><name>cx</name>-&gt;<name>runtime</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ida</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>i</name> = <name><name>ida</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>ida</name> = <call><name>NewIdArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ida</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
    }</block></else></if>

    <comment type="block">/* Check whether 'undefined' has been resolved and enumerate it if so. */</comment>
    <expr_stmt><expr><name>atom</name> = <name><name>rt</name>-&gt;<name>atomState</name>.<name>typeAtoms</name><index>[<expr><name>JSTYPE_VOID</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ida</name> = <call><name>EnumerateIfResolved</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><name>ida</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>, <argument><expr>&amp;<name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ida</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <comment type="block">/* Enumerate only classes that *have* been resolved. */</comment>
    <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name><name>standard_class_atoms</name><index>[<expr><name>j</name></expr>]</index></name>.<name>init</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>atom</name> = <call><name>OFFSET_TO_ATOM</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name><name>standard_class_atoms</name><index>[<expr><name>j</name></expr>]</index></name>.<name>atomOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ida</name> = <call><name>EnumerateIfResolved</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><name>ida</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>, <argument><expr>&amp;<name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ida</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>

        <if>if <condition>(<expr><name>found</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>init</name> = <name><name>standard_class_atoms</name><index>[<expr><name>j</name></expr>]</index></name>.<name>init</name></expr>;</expr_stmt>

            <for>for (<init><expr><name>k</name> = 0</expr>;</init> <condition><expr><name><name>standard_class_names</name><index>[<expr><name>k</name></expr>]</index></name>.<name>init</name></expr>;</condition> <incr><expr><name>k</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><name><name>standard_class_names</name><index>[<expr><name>k</name></expr>]</index></name>.<name>init</name> == <name>init</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>atom</name> = <call><name>StdNameToAtom</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>standard_class_names</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ida</name> = <call><name>AddAtomToArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><name>ida</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<name>ida</name></expr>)</condition><then>
                        <return>return <expr><name>NULL</name></expr>;</return></then></if>
                }</block></then></if>
            }</block></for>

            <if>if <condition>(<expr><name>init</name> == <name>js_InitObjectClass</name></expr>)</condition><then> <block>{
                <for>for (<init><expr><name>k</name> = 0</expr>;</init> <condition><expr><name><name>object_prototype_names</name><index>[<expr><name>k</name></expr>]</index></name>.<name>init</name></expr>;</condition> <incr><expr><name>k</name>++</expr></incr>) <block>{
                    <expr_stmt><expr><name>atom</name> = <call><name>StdNameToAtom</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>object_prototype_names</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ida</name> = <call><name>AddAtomToArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><name>ida</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<name>ida</name></expr>)</condition><then>
                        <return>return <expr><name>NULL</name></expr>;</return></then></if>
                }</block></for>
            }</block></then></if>
        }</block></then></if>
    }</block></for>

    <comment type="block">/* Trim to exact length. */</comment>
    <return>return <expr><call><name>SetIdArrayLength</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ida</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CLASP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAGER_ATOM</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAGER_CLASS_ATOM</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAGER_ATOM_CLASP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LAZY_ATOM</name></cpp:undef>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_GetClassObject</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>JSProtoKey key</argument>,
                  <argument>JSObject **objp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_GetClassObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>objp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_GetScopeChain</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSStackFrame</name> *</type><name>fp</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fp</name> = <call><name>js_GetTopStackFrame</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>fp</name></expr>)</condition><then> <block>{
        <comment type="block">/*
         * There is no code active on this context. In place of an actual
         * scope chain, use the context's global object, which is set in
         * js_InitFunctionAndObjectClasses, and which represents the default
         * scope chain for the embedding. See also js_FindClassObject.
         *
         * For embeddings that use the inner and outer object hooks, the inner
         * object represents the ultimate global object, with the outer object
         * acting as a stand-in.
         */</comment>
        <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name> <init>= <expr><name><name>cx</name>-&gt;<name>globalObject</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSMSG_INACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name>OBJ_TO_INNER_OBJECT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>obj</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name>js_GetScopeChain</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_GetGlobalForObject</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>)</argument_list></macro>
<block>{
   <while>while <condition>(<decl><type><name>JSObject</name> *</type><name>parent</name> <init>= <expr><call><name><name>obj</name>-&gt;<name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>)</condition>
        <expr_stmt><expr><name>obj</name> = <name>parent</name></expr>;</expr_stmt></while>
    <return>return <expr><name>obj</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>jsval</argument>)</argument_list></macro>
<macro><name>JS_ComputeThis</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <if>if <condition>(<expr>!<call><name>js_ComputeThis</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>, <argument><expr><name>vp</name> + 2</expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JSVAL_NULL</name></expr>;</return></then></if>
    <return>return <expr><name><name>vp</name><index>[<expr>1</expr>]</index></name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void *</argument>)</argument_list></macro>
<macro><name>JS_malloc</name><argument_list>(<argument>JSContext *cx</argument>, <argument>size_t nbytes</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name><name>cx</name>-&gt;<name>malloc</name></name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void *</argument>)</argument_list></macro>
<macro><name>JS_realloc</name><argument_list>(<argument>JSContext *cx</argument>, <argument>void *p</argument>, <argument>size_t nbytes</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name><name>cx</name>-&gt;<name>realloc</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_free</name><argument_list>(<argument>JSContext *cx</argument>, <argument>void *p</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name><name>cx</name>-&gt;<name>free</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_updateMallocCounter</name><argument_list>(<argument>JSContext *cx</argument>, <argument>size_t nbytes</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name><name>cx</name>-&gt;<name>updateMallocCounter</name></name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>char *</argument>)</argument_list></macro>
<macro><name>JS_strdup</name><argument_list>(<argument>JSContext *cx</argument>, <argument>const char *s</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> *</type><name>p</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>n</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> = <call><name><name>cx</name>-&gt;<name>malloc</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr>(<name>char</name> *)<call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>jsdouble *</argument>)</argument_list></macro>
<macro><name>JS_NewDouble</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsdouble d</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_NewWeaklyRootedDouble</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_NewDoubleValue</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsdouble d</argument>, <argument>jsval *rval</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>jsdouble</name> *</type><name>dp</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dp</name> = <call><name>js_NewWeaklyRootedDouble</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>dp</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>rval</name> = <call><name>DOUBLE_TO_JSVAL</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_NewNumberValue</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsdouble d</argument>, <argument>jsval *rval</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_NewWeaklyRootedNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>JS_AddRoot</name></cpp:undef>
<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_AddRoot</name><argument_list>(<argument>JSContext *cx</argument>, <argument>void *rp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_AddRoot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_AddNamedRootRT</name><argument_list>(<argument>JSRuntime *rt</argument>, <argument>void *rp</argument>, <argument>const char *name</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>js_AddRootRT</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_RemoveRoot</name><argument_list>(<argument>JSContext *cx</argument>, <argument>void *rp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_RemoveRoot</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>, <argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_RemoveRootRT</name><argument_list>(<argument>JSRuntime *rt</argument>, <argument>void *rp</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>js_RemoveRoot</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_AddNamedRoot</name><argument_list>(<argument>JSContext *cx</argument>, <argument>void *rp</argument>, <argument>const char *name</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_AddRoot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_ClearNewbornRoots</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>JS_CLEAR_WEAK_ROOTS</name><argument_list>(<argument><expr>&amp;<name><name>cx</name>-&gt;<name>weakRoots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_EnterLocalRootScope</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_EnterLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_LeaveLocalRootScope</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_LeaveLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_LeaveLocalRootScopeWithResult</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval rval</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_LeaveLocalRootScopeWithResult</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_ForgetLocalRoot</name><argument_list>(<argument>JSContext *cx</argument>, <argument>void *thing</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_ForgetLocalRoot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>jsval</name>) <name>thing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_DumpNamedRoots</name><argument_list>(<argument>JSRuntime *rt</argument>,
                  <argument>void (*dump)(const char *name, void *rp, void *data)</argument>,
                  <argument>void *data</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>js_DumpNamedRoots</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>dump</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DEBUG */</comment>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>uint32</argument>)</argument_list></macro>
<macro><name>JS_MapGCRoots</name><argument_list>(<argument>JSRuntime *rt</argument>, <argument>JSGCRootMapFun map</argument>, <argument>void *data</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>js_MapGCRoots</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_LockGCThing</name><argument_list>(<argument>JSContext *cx</argument>, <argument>void *thing</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>js_LockGCThingRT</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>, <argument><expr><name>thing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_LockGCThingRT</name><argument_list>(<argument>JSRuntime *rt</argument>, <argument>void *thing</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>js_LockGCThingRT</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>thing</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_UnlockGCThing</name><argument_list>(<argument>JSContext *cx</argument>, <argument>void *thing</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_UnlockGCThingRT</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>, <argument><expr><name>thing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_UnlockGCThingRT</name><argument_list>(<argument>JSRuntime *rt</argument>, <argument>void *thing</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>js_UnlockGCThingRT</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>thing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_SetExtraGCRoots</name><argument_list>(<argument>JSRuntime *rt</argument>, <argument>JSTraceDataOp traceOp</argument>, <argument>void *data</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name><name>rt</name>-&gt;<name>gcExtraRootsTraceOp</name></name> = <name>traceOp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rt</name>-&gt;<name>gcExtraRootsData</name></name> = <name>data</name></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_TraceRuntime</name><argument_list>(<argument>JSTracer *trc</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>allAtoms</name> <init>= <expr><name><name>trc</name>-&gt;<name>context</name>-&gt;<name>runtime</name>-&gt;<name>gcKeepAtoms</name></name> != 0</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>LeaveTrace</name><argument_list>(<argument><expr><name><name>trc</name>-&gt;<name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_TraceRuntime</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name>allAtoms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_CallTracer</name><argument_list>(<argument>JSTracer *trc</argument>, <argument>void *thing</argument>, <argument>uint32 kind</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>js_CallGCMarker</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name>thing</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_XPCONNECT</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dump_xpc.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_PrintTraceThingInfo</name><argument_list>(<argument>char *buf</argument>, <argument>size_t bufsize</argument>, <argument>JSTracer *trc</argument>,
                       <argument>void *thing</argument>, <argument>uint32 kind</argument>, <argument>JSBool details</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>bufsize</name> == 0</expr>)</condition><then>
        <return>return;</return></then></if>

    <switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{
      <case>case <expr><name>JSTRACE_OBJECT</name></expr>:
      <block>{
        <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name> <init>= <expr>(<name>JSObject</name> *)<name>thing</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JSClass</name> *</type><name>clasp</name> <init>= <expr><call><name><name>obj</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>name</name> = <name><name>clasp</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_XPCONNECT</name></cpp:ifdef>
        <if>if <condition>(<expr><name><name>clasp</name>-&gt;<name>flags</name></name> &amp; <name>JSCLASS_PRIVATE_IS_NSISUPPORTS</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>void</name> *</type><name>privateThing</name> <init>= <expr><call><name><name>obj</name>-&gt;<name>getPrivate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>privateThing</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>xpcClassName</name> <init>= <expr><call><name>GetXPCObjectClassName</name><argument_list>(<argument><expr><name>privateThing</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>xpcClassName</name></expr>)</condition><then>
                    <expr_stmt><expr><name>name</name> = <name>xpcClassName</name></expr>;</expr_stmt></then></if>
            }</block></then></if>
        }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <break>break;</break>
      }</block>

      </case><case>case <expr><name>JSTRACE_STRING</name></expr>:
        <expr_stmt><expr><name>name</name> = ((<name>JSString</name> *)<name>thing</name>)-&gt;<call><name>isDependent</name><argument_list>()</argument_list></call>
               ? "substring"
               : "string"</expr>;</expr_stmt>
        <break>break;</break>

      </case><case>case <expr><name>JSTRACE_DOUBLE</name></expr>:
        <expr_stmt><expr><name>name</name> = "double"</expr>;</expr_stmt>
        <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_XML_SUPPORT</name></expr></cpp:if>
      </case><case>case <expr><name>JSTRACE_XML</name></expr>:
        <expr_stmt><expr><name>name</name> = "xml"</expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </case><default>default:
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
        <break>break;</break>
    </default>}</block></switch>

    <expr_stmt><expr><name>n</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>n</name> &gt; <name>bufsize</name> - 1</expr>)</condition><then>
        <expr_stmt><expr><name>n</name> = <name>bufsize</name> - 1</expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>n</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf</name> += <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>bufsize</name> -= <name>n</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>details</name> &amp;&amp; <name>bufsize</name> &gt; 2</expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>buf</name>++ = ' '</expr>;</expr_stmt>
        <expr_stmt><expr><name>bufsize</name>--</expr>;</expr_stmt>

        <switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{
          <case>case <expr><name>JSTRACE_OBJECT</name></expr>:
          <block>{
            <decl_stmt><decl><type><name>JSObject</name>  *</type><name>obj</name> <init>= <expr>(<name>JSObject</name> *)<name>thing</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JSClass</name> *</type><name>clasp</name> <init>= <expr><call><name><name>obj</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>clasp</name> == &amp;<name>js_FunctionClass</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name> <init>= <expr><call><name>GET_FUNCTION_PRIVATE</name><argument_list>(<argument><expr><name><name>trc</name>-&gt;<name>context</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<name>fun</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>JS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr>"&lt;newborn&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name>FUN_OBJECT</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call> != <name>obj</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>JS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr>"%p"</expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <if>if <condition>(<expr><name><name>fun</name>-&gt;<name>atom</name></name> &amp;&amp; <call><name>ATOM_IS_STRING</name><argument_list>(<argument><expr><name><name>fun</name>-&gt;<name>atom</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <expr_stmt><expr><call><name>js_PutEscapedString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>,
                                            <argument><expr><call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name><name>fun</name>-&gt;<name>atom</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></else></if></else></if>
            }</block></then> <else>else <if>if <condition>(<expr><name><name>clasp</name>-&gt;<name>flags</name></name> &amp; <name>JSCLASS_HAS_PRIVATE</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>JS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr>"%p"</expr></argument>, <argument><expr><call><name><name>obj</name>-&gt;<name>getPrivate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>JS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr>"&lt;no private&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>
            <break>break;</break>
          }</block>

          </case><case>case <expr><name>JSTRACE_STRING</name></expr>:
            <expr_stmt><expr><call><name>js_PutEscapedString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr>(<name>JSString</name> *)<name>thing</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

          </case><case>case <expr><name>JSTRACE_DOUBLE</name></expr>:
            <expr_stmt><expr><call><name>JS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr>"%g"</expr></argument>, <argument><expr>*(<name>jsdouble</name> *)<name>thing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_XML_SUPPORT</name></expr></cpp:if>
          </case><case>case <expr><name>JSTRACE_XML</name></expr>:
          <block>{
            <decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>js_xml_class_str</name><index>[]</index></name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name> <init>= <expr>(<name>JSXML</name> *)<name>thing</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>JS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name><name>js_xml_class_str</name><index>[<expr><name><name>xml</name>-&gt;<name>xml_class</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          }</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          </case><default>default:
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </default>}</block></switch>
    }</block></then></if>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>bufsize</name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block>

<typedef>typedef <type>struct <name>JSHeapDumpNode</name></type> <name>JSHeapDumpNode</name>;</typedef>

<struct>struct <name>JSHeapDumpNode</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>void</name>            *</type><name>thing</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>          <name>kind</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSHeapDumpNode</name>  *</type><name>next</name></decl>;</decl_stmt>          <comment type="block">/* next sibling */</comment>
    <decl_stmt><decl><type><name>JSHeapDumpNode</name>  *</type><name>parent</name></decl>;</decl_stmt>        <comment type="block">/* node with the thing that refer to thing
                                       from this node */</comment>
    <decl_stmt><decl><type><name>char</name></type>            <name><name>edgeName</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>    <comment type="block">/* name of the edge from parent-&gt;thing
                                       into thing */</comment>
</public>}</block>;</struct>

<typedef>typedef <type><struct>struct <name>JSDumpingTracer</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>JSTracer</name></type>            <name>base</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSDHashTable</name></type>        <name>visited</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type>              <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>                *</type><name>startThing</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>                *</type><name>thingToFind</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>                *</type><name>thingToIgnore</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSHeapDumpNode</name>      *</type><name>parentNode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSHeapDumpNode</name>      **</type><name>lastNodep</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>                <name><name>buffer</name><index>[<expr>200</expr>]</index></name></decl>;</decl_stmt>
</public>}</block></struct></type> <name>JSDumpingTracer</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DumpNotify</name><parameter_list>(<param><decl><type><name>JSTracer</name> *</type><name>trc</name></decl></param>, <param><decl><type><name>void</name> *</type><name>thing</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>kind</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSDumpingTracer</name> *</type><name>dtrc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSDHashEntryStub</name> *</type><name>entry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSHeapDumpNode</name> *</type><name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>edgeName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>edgeNameSize</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>trc</name>-&gt;<name>callback</name></name> == <name>DumpNotify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dtrc</name> = (<name>JSDumpingTracer</name> *)<name>trc</name></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name><name>dtrc</name>-&gt;<name>ok</name></name> || <name>thing</name> == <name><name>dtrc</name>-&gt;<name>thingToIgnore</name></name></expr>)</condition><then>
        <return>return;</return></then></if>

    <expr_stmt><expr><name>cx</name> = <name><name>trc</name>-&gt;<name>context</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * Check if we have already seen thing unless it is thingToFind to include
     * it to the graph each time we reach it and print all live things that
     * refer to thingToFind.
     *
     * This does not print all possible paths leading to thingToFind since
     * when a thing A refers directly or indirectly to thingToFind and A is
     * present several times in the graph, we will print only the first path
     * leading to A and thingToFind, other ways to reach A will be ignored.
     */</comment>
    <if>if <condition>(<expr><name><name>dtrc</name>-&gt;<name>thingToFind</name></name> != <name>thing</name></expr>)</condition><then> <block>{
        <comment type="block">/*
         * The startThing check allows to avoid putting startThing into the
         * hash table before tracing startThing in JS_DumpHeap.
         */</comment>
        <if>if <condition>(<expr><name>thing</name> == <name><name>dtrc</name>-&gt;<name>startThing</name></name></expr>)</condition><then>
            <return>return;</return></then></if>
        <expr_stmt><expr><name>entry</name> = (<name>JSDHashEntryStub</name> *)
            <call><name>JS_DHashTableOperate</name><argument_list>(<argument><expr>&amp;<name><name>dtrc</name>-&gt;<name>visited</name></name></expr></argument>, <argument><expr><name>thing</name></expr></argument>, <argument><expr><name>JS_DHASH_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dtrc</name>-&gt;<name>ok</name></name> = <name>JS_FALSE</name></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>key</name></name></expr>)</condition><then>
            <return>return;</return></then></if>
        <expr_stmt><expr><name><name>entry</name>-&gt;<name>key</name></name> = <name>thing</name></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>dtrc</name>-&gt;<name>base</name>.<name>debugPrinter</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>dtrc</name>-&gt;<name>base</name>.<name>debugPrinter</name></name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name><name>dtrc</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dtrc</name>-&gt;<name>buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>edgeName</name> = <name><name>dtrc</name>-&gt;<name>buffer</name></name></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name><name>dtrc</name>-&gt;<name>base</name>.<name>debugPrintIndex</name></name> != (<name>size_t</name>)-1</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_snprintf</name><argument_list>(<argument><expr><name><name>dtrc</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dtrc</name>-&gt;<name>buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%s[%lu]"</expr></argument>,
                    <argument><expr>(const <name>char</name> *)<name><name>dtrc</name>-&gt;<name>base</name>.<name>debugPrintArg</name></name></expr></argument>,
                    <argument><expr><name><name>dtrc</name>-&gt;<name>base</name>.<name>debugPrintIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>edgeName</name> = <name><name>dtrc</name>-&gt;<name>buffer</name></name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>edgeName</name> = (const <name>char</name>*)<name><name>dtrc</name>-&gt;<name>base</name>.<name>debugPrintArg</name></name></expr>;</expr_stmt>
    }</block></else></if></else></if>

    <expr_stmt><expr><name>edgeNameSize</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>edgeName</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
    <expr_stmt><expr><name>node</name> = (<name>JSHeapDumpNode</name> *)
        <call><name><name>cx</name>-&gt;<name>malloc</name></name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>JSHeapDumpNode</name></expr></argument>, <argument><expr><name>edgeName</name></expr></argument>)</argument_list></call> + <name>edgeNameSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>node</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>dtrc</name>-&gt;<name>ok</name></name> = <name>JS_FALSE</name></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>node</name>-&gt;<name>thing</name></name> = <name>thing</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name>-&gt;<name>kind</name></name> = <name>kind</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name>-&gt;<name>parent</name></name> = <name><name>dtrc</name>-&gt;<name>parentNode</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>node</name>-&gt;<name>edgeName</name></name></expr></argument>, <argument><expr><name>edgeName</name></expr></argument>, <argument><expr><name>edgeNameSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!*<name><name>dtrc</name>-&gt;<name>lastNodep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name><name>dtrc</name>-&gt;<name>lastNodep</name></name> = <name>node</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dtrc</name>-&gt;<name>lastNodep</name></name> = &amp;<name><name>node</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* Dump node and the chain that leads to thing it contains. */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>DumpNode</name><parameter_list>(<param><decl><type><name>JSDumpingTracer</name> *</type><name>dtrc</name></decl></param>, <param><decl><type><name>FILE</name>*</type> <name>fp</name></decl></param>, <param><decl><type><name>JSHeapDumpNode</name> *</type><name>node</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSHeapDumpNode</name> *</type><name>prev</name></decl>, *<decl><type ref="prev"/><name>following</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>chainLimit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <enum>enum <block>{ <decl><name>MAX_PARENTS_TO_PRINT</name> <init>= <expr>10</expr></init></decl> }</block>;</enum>

    <expr_stmt><expr><call><name>JS_PrintTraceThingInfo</name><argument_list>(<argument><expr><name><name>dtrc</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr>sizeof <name><name>dtrc</name>-&gt;<name>buffer</name></name></expr></argument>,
                           <argument><expr>&amp;<name><name>dtrc</name>-&gt;<name>base</name></name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>thing</name></name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>kind</name></name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"%p %-22s via "</expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>thing</name></name></expr></argument>, <argument><expr><name><name>dtrc</name>-&gt;<name>buffer</name></name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <comment type="block">/*
     * We need to print the parent chain in the reverse order. To do it in
     * O(N) time where N is the chain length we first reverse the chain while
     * searching for the top and then print each node while restoring the
     * chain order.
     */</comment>
    <expr_stmt><expr><name>chainLimit</name> = <name>MAX_PARENTS_TO_PRINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>prev</name> = <name>NULL</name></expr>;</expr_stmt>
    <for>for (<init>;</init><condition>;</condition><incr/>) <block>{
        <expr_stmt><expr><name>following</name> = <name><name>node</name>-&gt;<name>parent</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>node</name>-&gt;<name>parent</name></name> = <name>prev</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>prev</name> = <name>node</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>node</name> = <name>following</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>node</name></expr>)</condition><then>
            <break>break;</break></then></if>
        <if>if <condition>(<expr><name>chainLimit</name> == 0</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>fputs</name><argument_list>(<argument><expr>"..."</expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <break>break;</break>
        }</block></then></if>
        <expr_stmt><expr>--<name>chainLimit</name></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name>node</name> = <name>prev</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>prev</name> = <name>following</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <do>do <block>{
        <comment type="block">/* Loop must continue even when !ok to restore the parent chain. */</comment>
        <if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<name>prev</name></expr>)</condition><then> <block>{
                <comment type="block">/* Print edge from some runtime root or startThing. */</comment>
                <if>if <condition>(<expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>node</name>-&gt;<name>edgeName</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
                    <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt></then></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>JS_PrintTraceThingInfo</name><argument_list>(<argument><expr><name><name>dtrc</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr>sizeof <name><name>dtrc</name>-&gt;<name>buffer</name></name></expr></argument>,
                                       <argument><expr>&amp;<name><name>dtrc</name>-&gt;<name>base</name></name></expr></argument>, <argument><expr><name><name>prev</name>-&gt;<name>thing</name></name></expr></argument>, <argument><expr><name><name>prev</name>-&gt;<name>kind</name></name></expr></argument>,
                                       <argument><expr><name>JS_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"(%p %s).%s"</expr></argument>,
                           <argument><expr><name><name>prev</name>-&gt;<name>thing</name></name></expr></argument>, <argument><expr><name><name>dtrc</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>edgeName</name></name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
        }</block></then></if>
        <expr_stmt><expr><name>following</name> = <name><name>node</name>-&gt;<name>parent</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>node</name>-&gt;<name>parent</name></name> = <name>prev</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>prev</name> = <name>node</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>node</name> = <name>following</name></expr>;</expr_stmt>
    }</block> while <condition>(<expr><name>node</name></expr>)</condition>;</do>

    <return>return <expr><name>ok</name> &amp;&amp; <call><name>putc</name><argument_list>(<argument><expr>'\n'</expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> &gt;= 0</expr>;</return>
}</block></function>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_DumpHeap</name><argument_list>(<argument>JSContext *cx</argument>, <argument>FILE *fp</argument>, <argument>void* startThing</argument>, <argument>uint32 startKind</argument>,
            <argument>void *thingToFind</argument>, <argument>size_t maxDepth</argument>, <argument>void *thingToIgnore</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSDumpingTracer</name></type> <name>dtrc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSHeapDumpNode</name> *</type><name>node</name></decl>, *<decl><type ref="prev"/><name>children</name></decl>, *<decl><type ref="prev"/><name>next</name></decl>, *<decl><type ref="prev"/><name>parent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>depth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>thingToFindWasTraced</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>maxDepth</name> == 0</expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>JS_TRACER_INIT</name><argument_list>(<argument><expr>&amp;<name><name>dtrc</name>.<name>base</name></name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>DumpNotify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JS_DHashTableInit</name><argument_list>(<argument><expr>&amp;<name><name>dtrc</name>.<name>visited</name></name></expr></argument>, <argument><expr><call><name>JS_DHashGetStubOps</name><argument_list>()</argument_list></call></expr></argument>,
                           <argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JSDHashEntryStub</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                           <argument><expr><call><name>JS_DHASH_DEFAULT_CAPACITY</name><argument_list>(<argument><expr>100</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>dtrc</name>.<name>ok</name></name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dtrc</name>.<name>startThing</name></name> = <name>startThing</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dtrc</name>.<name>thingToFind</name></name> = <name>thingToFind</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dtrc</name>.<name>thingToIgnore</name></name> = <name>thingToIgnore</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dtrc</name>.<name>parentNode</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>node</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dtrc</name>.<name>lastNodep</name></name> = &amp;<name>node</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>startThing</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>startKind</name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_TraceRuntime</name><argument_list>(<argument><expr>&amp;<name><name>dtrc</name>.<name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>JS_TraceChildren</name><argument_list>(<argument><expr>&amp;<name><name>dtrc</name>.<name>base</name></name></expr></argument>, <argument><expr><name>startThing</name></expr></argument>, <argument><expr><name>startKind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name>depth</name> = 1</expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>node</name></expr>)</condition><then>
        <goto>goto <name>dump_out</name>;</goto></then></if>

    <expr_stmt><expr><name>thingToFindWasTraced</name> = <name>thingToFind</name> &amp;&amp; <name>thingToFind</name> == <name>startThing</name></expr>;</expr_stmt>
    <for>for (<init>;</init><condition>;</condition><incr/>) <block>{
        <comment type="block">/*
         * Loop must continue even when !dtrc.ok to free all nodes allocated
         * so far.
         */</comment>
        <if>if <condition>(<expr><name><name>dtrc</name>.<name>ok</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>thingToFind</name> == <name>NULL</name> || <name>thingToFind</name> == <name><name>node</name>-&gt;<name>thing</name></name></expr>)</condition><then>
                <expr_stmt><expr><name><name>dtrc</name>.<name>ok</name></name> = <call><name>DumpNode</name><argument_list>(<argument><expr>&amp;<name>dtrc</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <comment type="block">/* Descend into children. */</comment>
            <if>if <condition>(<expr><name><name>dtrc</name>.<name>ok</name></name> &amp;&amp;
                <name>depth</name> &lt; <name>maxDepth</name> &amp;&amp;
                (<name>thingToFind</name> != <name><name>node</name>-&gt;<name>thing</name></name> || !<name>thingToFindWasTraced</name>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>dtrc</name>.<name>parentNode</name></name> = <name>node</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>children</name> = <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>dtrc</name>.<name>lastNodep</name></name> = &amp;<name>children</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>JS_TraceChildren</name><argument_list>(<argument><expr>&amp;<name><name>dtrc</name>.<name>base</name></name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>thing</name></name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>thingToFind</name> == <name><name>node</name>-&gt;<name>thing</name></name></expr>)</condition><then>
                    <expr_stmt><expr><name>thingToFindWasTraced</name> = <name>JS_TRUE</name></expr>;</expr_stmt></then></if>
                <if>if <condition>(<expr><name>children</name> != <name>NULL</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr>++<name>depth</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>node</name> = <name>children</name></expr>;</expr_stmt>
                    <continue>continue;</continue>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>

        <comment type="block">/* Move to next or parents next and free the node. */</comment>
        <for>for (<init>;</init><condition>;</condition><incr/>) <block>{
            <expr_stmt><expr><name>next</name> = <name><name>node</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>parent</name> = <name><name>node</name>-&gt;<name>parent</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>free</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>node</name> = <name>next</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>node</name></expr>)</condition><then>
                <break>break;</break></then></if>
            <if>if <condition>(<expr>!<name>parent</name></expr>)</condition><then>
                <goto>goto <name>dump_out</name>;</goto></then></if>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>depth</name> &gt; 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>--<name>depth</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>node</name> = <name>parent</name></expr>;</expr_stmt>
        }</block></for>
    }</block></for>

  <label><name>dump_out</name>:</label>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>depth</name> == 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_DHashTableFinish</name><argument_list>(<argument><expr>&amp;<name><name>dtrc</name>.<name>visited</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>dtrc</name>.<name>ok</name></name></expr>;</return>
}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DEBUG */</comment>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_MarkGCThing</name><argument_list>(<argument>JSContext *cx</argument>, <argument>void *thing</argument>, <argument>const char *name</argument>, <argument>void *arg</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSTracer</name> *</type><name>trc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>trc</name> = (<name>JSTracer</name> *)<name>arg</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>trc</name></expr>)</condition><then>
        <expr_stmt><expr><name>trc</name> = <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>gcMarkingTracer</name></name></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>trc</name> == <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>gcMarkingTracer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>gcThread</name></name> == <name><name>trc</name>-&gt;<name>context</name>-&gt;<name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>JS_SET_TRACING_NAME</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name>name</name> ? <name>name</name> : "unknown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_CallValueTracerIfGCThing</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr>(<name>jsval</name>)<name>thing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<extern>extern JS_PUBLIC_API(JSBool</extern>)
<macro><name>JS_IsGCMarkingTracer</name><argument_list>(<argument>JSTracer *trc</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>IS_GC_MARKING_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_GC</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>LeaveTrace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Don't nuke active arenas if executing or compiling. */</comment>
    <if>if <condition>(<expr><name><name>cx</name>-&gt;<name>stackPool</name>.<name>current</name></name> == &amp;<name><name>cx</name>-&gt;<name>stackPool</name>.<name>first</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_FinishArenaPool</name><argument_list>(<argument><expr>&amp;<name><name>cx</name>-&gt;<name>stackPool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name><name>cx</name>-&gt;<name>tempPool</name>.<name>current</name></name> == &amp;<name><name>cx</name>-&gt;<name>tempPool</name>.<name>first</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_FinishArenaPool</name><argument_list>(<argument><expr>&amp;<name><name>cx</name>-&gt;<name>tempPool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>js_GC</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>GC_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_MaybeGC</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>bytes</name></decl>, <decl><type ref="prev"/><name>lastBytes</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>rt</name> = <name><name>cx</name>-&gt;<name>runtime</name></name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_GC_ZEAL</name></cpp:ifdef>
    <if>if <condition>(<expr><name><name>rt</name>-&gt;<name>gcZeal</name></name> &gt; 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_GC</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>bytes</name> = <name><name>rt</name>-&gt;<name>gcBytes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>lastBytes</name> = <name><name>rt</name>-&gt;<name>gcLastBytes</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * We run the GC if we used all available free GC cells and had to
     * allocate extra 1/3 of GC arenas since the last run of GC, or if
     * we have malloc'd more bytes through JS_malloc than we were told
     * to allocate by JS_NewRuntime.
     *
     * The reason for
     *   bytes &gt; 4/3 lastBytes
     * condition is the following. Bug 312238 changed bytes and lastBytes
     * to mean the total amount of memory that the GC uses now and right
     * after the last GC.
     *
     * Before the bug the variables meant the size of allocated GC things
     * now and right after the last GC. That size did not include the
     * memory taken by free GC cells and the condition was
     *   bytes &gt; 3/2 lastBytes.
     * That is, we run the GC if we have half again as many bytes of
     * GC-things as the last time we GC'd. To be compatible we need to
     * express that condition through the new meaning of bytes and
     * lastBytes.
     *
     * We write the original condition as
     *   B*(1-F) &gt; 3/2 Bl*(1-Fl)
     * where B is the total memory size allocated by GC and F is the free
     * cell density currently and Sl and Fl are the size and the density
     * right after GC. The density by definition is memory taken by free
     * cells divided by total amount of memory. In other words, B and Bl
     * are bytes and lastBytes with the new meaning and B*(1-F) and
     * Bl*(1-Fl) are bytes and lastBytes with the original meaning.
     *
     * Our task is to exclude F and Fl from the last statement. According
     * to the stats from bug 331966 comment 23, Fl is about 10-25% for a
     * typical run of the browser. It means that the original condition
     * implied that we did not run GC unless we exhausted the pool of
     * free cells. Indeed if we still have free cells, then B == Bl since
     * we did not yet allocated any new arenas and the condition means
     *   1 - F &gt; 3/2 (1-Fl) or 3/2Fl &gt; 1/2 + F
     * That implies 3/2 Fl &gt; 1/2 or Fl &gt; 1/3. That cannot be fulfilled
     * for the state described by the stats. So we can write the original
     * condition as:
     *   F == 0 &amp;&amp; B &gt; 3/2 Bl(1-Fl)
     * Again using the stats we see that Fl is about 11% when the browser
     * starts up and when we are far from hitting rt-&gt;gcMaxBytes. With
     * this F we have
     * F == 0 &amp;&amp; B &gt; 3/2 Bl(1-0.11)
     * or approximately F == 0 &amp;&amp; B &gt; 4/3 Bl.
     */</comment>
    <if>if <condition>(<expr>(<name>bytes</name> &gt; 8192 &amp;&amp; <name>bytes</name> &gt; <name>lastBytes</name> + <name>lastBytes</name> / 3) ||
        <call><name><name>rt</name>-&gt;<name>isGCMallocLimitReached</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_GC</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSGCCallback</argument>)</argument_list></macro>
<macro><name>JS_SetGCCallback</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSGCCallback cb</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>JS_SetGCCallbackRT</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSGCCallback</argument>)</argument_list></macro>
<macro><name>JS_SetGCCallbackRT</name><argument_list>(<argument>JSRuntime *rt</argument>, <argument>JSGCCallback cb</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSGCCallback</name></type> <name>oldcb</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>oldcb</name> = <name><name>rt</name>-&gt;<name>gcCallback</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rt</name>-&gt;<name>gcCallback</name></name> = <name>cb</name></expr>;</expr_stmt>
    <return>return <expr><name>oldcb</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_IsAboutToBeFinalized</name><argument_list>(<argument>JSContext *cx</argument>, <argument>void *thing</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>thing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_IsAboutToBeFinalized</name><argument_list>(<argument><expr><name>thing</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_SetGCParameter</name><argument_list>(<argument>JSRuntime *rt</argument>, <argument>JSGCParamKey key</argument>, <argument>uint32 value</argument>)</argument_list></macro>
<block>{
    <switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{
      <case>case <expr><name>JSGC_MAX_BYTES</name></expr>:
        <expr_stmt><expr><name><name>rt</name>-&gt;<name>gcMaxBytes</name></name> = <name>value</name></expr>;</expr_stmt>
        <break>break;</break>
      </case><case>case <expr><name>JSGC_MAX_MALLOC_BYTES</name></expr>:
        <expr_stmt><expr><call><name><name>rt</name>-&gt;<name>setGCMaxMallocBytes</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </case><case>case <expr><name>JSGC_STACKPOOL_LIFESPAN</name></expr>:
        <expr_stmt><expr><name><name>rt</name>-&gt;<name>gcEmptyArenaPoolLifespan</name></name> = <name>value</name></expr>;</expr_stmt>
        <break>break;</break>
      </case><default>default:
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>key</name> == <name>JSGC_TRIGGER_FACTOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>value</name> &gt;= 100</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rt</name>-&gt;<name>setGCTriggerFactor</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </default>}</block></switch>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>uint32</argument>)</argument_list></macro>
<macro><name>JS_GetGCParameter</name><argument_list>(<argument>JSRuntime *rt</argument>, <argument>JSGCParamKey key</argument>)</argument_list></macro>
<block>{
    <switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{
      <case>case <expr><name>JSGC_MAX_BYTES</name></expr>:
        <return>return <expr><name><name>rt</name>-&gt;<name>gcMaxBytes</name></name></expr>;</return>
      </case><case>case <expr><name>JSGC_MAX_MALLOC_BYTES</name></expr>:
        <return>return <expr><name><name>rt</name>-&gt;<name>gcMaxMallocBytes</name></name></expr>;</return>
      </case><case>case <expr><name>JSGC_STACKPOOL_LIFESPAN</name></expr>:
        <return>return <expr><name><name>rt</name>-&gt;<name>gcEmptyArenaPoolLifespan</name></name></expr>;</return>
      </case><case>case <expr><name>JSGC_TRIGGER_FACTOR</name></expr>:
        <return>return <expr><name><name>rt</name>-&gt;<name>gcTriggerFactor</name></name></expr>;</return>
      </case><case>case <expr><name>JSGC_BYTES</name></expr>:
        <return>return <expr><name><name>rt</name>-&gt;<name>gcBytes</name></name></expr>;</return>
      </case><default>default:
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>key</name> == <name>JSGC_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>rt</name>-&gt;<name>gcNumber</name></name></expr>;</return>
    </default>}</block></switch>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_SetGCParameterForThread</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSGCParamKey key</argument>, <argument>uint32 value</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>key</name> == <name>JSGC_MAX_CODE_CACHE_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_TRACER</name></cpp:ifdef>
    <expr_stmt><expr><call><name>SetMaxCodeCacheBytes</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>uint32</argument>)</argument_list></macro>
<macro><name>JS_GetGCParameterForThread</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSGCParamKey key</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>key</name> == <name>JSGC_MAX_CODE_CACHE_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_TRACER</name></cpp:ifdef>
    <return>return <expr><call><name>JS_THREAD_DATA</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call>-&gt;<name><name>traceMonitor</name>.<name>maxCodeCacheBytes</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr>0</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_FlushCaches</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_TRACER</name></cpp:ifdef>
    <expr_stmt><expr><call><name>FlushJITCache</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>intN</argument>)</argument_list></macro>
<macro><name>JS_AddExternalStringFinalizer</name><argument_list>(<argument>JSStringFinalizeOp finalizer</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>js_ChangeExternalStringFinalizer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>finalizer</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>intN</argument>)</argument_list></macro>
<macro><name>JS_RemoveExternalStringFinalizer</name><argument_list>(<argument>JSStringFinalizeOp finalizer</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>js_ChangeExternalStringFinalizer</name><argument_list>(<argument><expr><name>finalizer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro>
<macro><name>JS_NewExternalString</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jschar *chars</argument>, <argument>size_t length</argument>, <argument>intN type</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>uintN</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> &lt; <name>JS_EXTERNAL_STRING_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name> <init>= <expr><call><name>js_NewGCExternalString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>uintN</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name><name>str</name>-&gt;<name>initFlat</name></name><argument_list>(<argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>updateMallocCounter</name></name><argument_list>(<argument><expr>(<name>length</name> + 1) * <sizeof>sizeof<argument_list>(<argument><expr><name>jschar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>str</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>intN</argument>)</argument_list></macro>
<macro><name>JS_GetExternalStringGCType</name><argument_list>(<argument>JSRuntime *rt</argument>, <argument>JSString *str</argument>)</argument_list></macro>
<block>{
    <comment type="block">/*
     * No need to test this in js_GetExternalStringGCType, which asserts its
     * inverse instead of wasting cycles on testing a condition we can ensure
     * by auditing in-VM calls to the js_... helper.
     */</comment>
    <if>if <condition>(<expr><call><name><name>JSString</name>::<name>isStatic</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr>-1</expr>;</return></then></if>

    <return>return <expr><call><name>js_GetExternalStringGCType</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_SetThreadStackLimit</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsuword limitAddr</argument>)</argument_list></macro>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_STACK_GROWTH_DIRECTION</name> &gt; 0</expr></cpp:if>
    <if>if <condition>(<expr><name>limitAddr</name> == 0</expr>)</condition><then>
        <expr_stmt><expr><name>limitAddr</name> = (<name>jsuword</name>)-1</expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>stackLimit</name></name> = <name>limitAddr</name></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_SetScriptStackQuota</name><argument_list>(<argument>JSContext *cx</argument>, <argument>size_t quota</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>scriptStackQuota</name></name> = <name>quota</name></expr>;</expr_stmt>
}</block>

<comment type="block" format="doxygen">/************************************************************************/</comment>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_DestroyIdArray</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSIdArray *ida</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>free</name></name><argument_list>(<argument><expr><name>ida</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ValueToId</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval v</argument>, <argument>jsid *idp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_INT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>idp</name> = <call><name>INT_JSVAL_TO_JSID</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_XML_SUPPORT</name></expr></cpp:if>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>JSClass</name> *</type><name>clasp</name> <init>= <expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call>-&gt;<call><name>getClass</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>JS_UNLIKELY</name><argument_list>(<argument><expr><name>clasp</name> == &amp;<name><name>js_QNameClass</name>.<name>base</name></name> ||
                        <name>clasp</name> == &amp;<name>js_AttributeNameClass</name> ||
                        <name>clasp</name> == &amp;<name>js_AnyNameClass</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>idp</name> = <call><name>OBJECT_JSVAL_TO_JSID</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_TRUE</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><call><name>js_ValueToStringId</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_IdToValue</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsid id</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>vp</name> = <call><name>ID_TO_VALUE</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_PropertyStub</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsval id</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_EnumerateStub</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>)</argument_list></macro>
<block>{
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ResolveStub</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsval id</argument>)</argument_list></macro>
<block>{
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ConvertStub</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>JSType type</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>js_TryValueOf</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_FinalizeStub</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>)</argument_list></macro>
<block>{
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_InitClass</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>JSObject *parent_proto</argument>,
             <argument>JSClass *clasp</argument>, <argument>JSNative constructor</argument>, <argument>uintN nargs</argument>,
             <argument>JSPropertySpec *ps</argument>, <argument>JSFunctionSpec *fs</argument>,
             <argument>JSPropertySpec *static_ps</argument>, <argument>JSFunctionSpec *static_fs</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_InitClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>parent_proto</name></expr></argument>, <argument><expr><name>clasp</name></expr></argument>, <argument><expr><name>constructor</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>,
                        <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>static_ps</name></expr></argument>, <argument><expr><name>static_fs</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSClass *</argument>)</argument_list></macro>
<macro><name>JS_GetClass</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name><name>obj</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSClass *</argument>)</argument_list></macro>
<macro><name>JS_GetClass</name><argument_list>(<argument>JSObject *obj</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name><name>obj</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_InstanceOf</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>JSClass *clasp</argument>, <argument>jsval *argv</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>obj</name> &amp;&amp; <call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> == <name>clasp</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name>argv</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>fun</name> = <call><name>js_ValueToFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>argv</name><index>[<expr>-2</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>fun</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><name>JSMSG_INCOMPATIBLE_PROTO</name></expr></argument>,
                                 <argument><expr><name><name>clasp</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><call><name>JS_GetFunctionName</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><name>obj</name>
                                 ? <call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call>-&gt;<name>name</name>
                                 : <name>js_null_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <return>return <expr><name>JS_FALSE</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_HasInstance</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsval v</argument>, <argument>JSBool *bp</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>js_HasInstance</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void *</argument>)</argument_list></macro>
<macro><name>JS_GetPrivate</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name><name>obj</name>-&gt;<name>getPrivate</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_SetPrivate</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>void *data</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name><name>obj</name>-&gt;<name>setPrivate</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void *</argument>)</argument_list></macro>
<macro><name>JS_GetInstancePrivate</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>JSClass *clasp</argument>,
                      <argument>jsval *argv</argument>)</argument_list></macro>
<block>{
    <if>if <condition>(<expr>!<call><name>JS_InstanceOf</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>clasp</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><call><name><name>obj</name>-&gt;<name>getPrivate</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_GetPrototype</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>proto</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>proto</name> = <call><name><name>obj</name>-&gt;<name>getProto</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Beware ref to dead object (we may be called from obj's finalizer). */</comment>
    <return>return <expr><name>proto</name> &amp;&amp; <name><name>proto</name>-&gt;<name>map</name></name> ? <name>proto</name> : <name>NULL</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_SetPrototype</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>JSObject *proto</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_SetProtoOrParent</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>JSSLOT_PROTO</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_GetParent</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>parent</name> <init>= <expr><call><name><name>obj</name>-&gt;<name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Beware ref to dead object (we may be called from obj's finalizer). */</comment>
    <return>return <expr><name>parent</name> &amp;&amp; <name><name>parent</name>-&gt;<name>map</name></name> ? <name>parent</name> : <name>NULL</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_SetParent</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>JSObject *parent</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_SetProtoOrParent</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>JSSLOT_PARENT</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_GetConstructor</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *proto</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>cval</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{
        <function_decl><type><name>JSAutoResolveFlags</name></type> <name>rf</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>JSRESOLVE_QUALIFIED</name></type></decl></param>)</parameter_list>;</function_decl>

        <if>if <condition>(<expr>!<call><name><name>proto</name>-&gt;<name>getProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>atomState</name>.<name>constructorAtom</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>cval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
    }</block>
    <if>if <condition>(<expr>!<call><name>VALUE_IS_FUNCTION</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSMSG_NO_CONSTRUCTOR</name></expr></argument>,
                             <argument><expr><call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>)</argument_list></call>-&gt;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>cval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_GetObjectId</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid *idp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSID_IS_OBJECT</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>idp</name> = <call><name>OBJECT_TO_JSID</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_NewObject</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSClass *clasp</argument>, <argument>JSObject *proto</argument>, <argument>JSObject *parent</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>clasp</name></expr>)</condition><then>
        <expr_stmt><expr><name>clasp</name> = &amp;<name>js_ObjectClass</name></expr>;</expr_stmt></then></if>    <comment type="block">/* default class is Object */</comment>
    <return>return <expr><call><name>js_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>clasp</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_NewObjectWithGivenProto</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSClass *clasp</argument>, <argument>JSObject *proto</argument>,
                           <argument>JSObject *parent</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>clasp</name></expr>)</condition><then>
        <expr_stmt><expr><name>clasp</name> = &amp;<name>js_ObjectClass</name></expr>;</expr_stmt></then></if>    <comment type="block">/* default class is Object */</comment>
    <return>return <expr><call><name>js_NewObjectWithGivenProto</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>clasp</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_SealObject</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>JSBool deep</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSScope</name> *</type><name>scope</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSIdArray</name> *</type><name>ida</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>nslots</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>obj</name>-&gt;<name>isDenseArray</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name>js_MakeArraySlow</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<call><name>OBJ_IS_NATIVE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><name>JSMSG_CANT_SEAL_OBJECT</name></expr></argument>,
                             <argument><expr><call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call>-&gt;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>scope</name> = <call><name>OBJ_SCOPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>JS_THREADSAFE</name> &amp;&amp; <name>defined</name> <name>DEBUG</name></expr></cpp:if>
    <comment type="block">/* Insist on scope being used exclusively by cx's thread. */</comment>
    <if>if <condition>(<expr><name><name>scope</name>-&gt;<name>title</name>.<name>ownercx</name></name> != <name>cx</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_LOCK_OBJ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>OBJ_SCOPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> == <name>scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>scope</name>-&gt;<name>title</name>.<name>ownercx</name></name> == <name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_UNLOCK_SCOPE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Nothing to do if obj's scope is already sealed. */</comment>
    <if>if <condition>(<expr><call><name><name>scope</name>-&gt;<name>sealed</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <comment type="block">/* XXX Enumerate lazy properties now, as they can't be added later. */</comment>
    <expr_stmt><expr><name>ida</name> = <call><name>JS_Enumerate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ida</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>JS_DestroyIdArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ida</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Ensure that obj has its own, mutable scope, and seal that scope. */</comment>
    <expr_stmt><expr><call><name>JS_LOCK_OBJ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>scope</name> = <call><name>js_GetMutableScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>scope</name></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>scope</name>-&gt;<name>seal</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>JS_UNLOCK_OBJ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>scope</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <comment type="block">/* If we are not sealing an entire object graph, we're done. */</comment>
    <if>if <condition>(<expr>!<name>deep</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <comment type="block">/* Walk slots in obj and if any value is a non-null object, seal it. */</comment>
    <expr_stmt><expr><name>nslots</name> = <name><name>scope</name>-&gt;<name>freeslot</name></name></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> != <name>nslots</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <expr_stmt><expr><name>v</name> = <call><name><name>obj</name>-&gt;<name>getSlot</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>i</name> == <name>JSSLOT_PRIVATE</name> &amp;&amp; (<call><name><name>obj</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call>-&gt;<name>flags</name> &amp; <name>JSCLASS_HAS_PRIVATE</name>)</expr>)</condition><then>
            <continue>continue;</continue></then></if>
        <if>if <condition>(<expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <continue>continue;</continue></then></if>
        <if>if <condition>(<expr>!<call><name>JS_SealObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>deep</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></for>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_ConstructObject</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSClass *clasp</argument>, <argument>JSObject *proto</argument>,
                   <argument>JSObject *parent</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>clasp</name></expr>)</condition><then>
        <expr_stmt><expr><name>clasp</name> = &amp;<name>js_ObjectClass</name></expr>;</expr_stmt></then></if>    <comment type="block">/* default class is Object */</comment>
    <return>return <expr><call><name>js_ConstructObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>clasp</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_ConstructObjectWithArguments</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSClass *clasp</argument>, <argument>JSObject *proto</argument>,
                                <argument>JSObject *parent</argument>, <argument>uintN argc</argument>, <argument>jsval *argv</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>clasp</name></expr>)</condition><then>
        <expr_stmt><expr><name>clasp</name> = &amp;<name>js_ObjectClass</name></expr>;</expr_stmt></then></if>    <comment type="block">/* default class is Object */</comment>
    <return>return <expr><call><name>js_ConstructObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>clasp</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>DefinePropertyById</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>value</name></decl></param>,
                   <param><decl><type><name>JSPropertyOp</name></type> <name>getter</name></decl></param>, <param><decl><type><name>JSPropertyOp</name></type> <name>setter</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>attrs</name></decl></param>,
                   <param><decl><type><name>uintN</name></type> <name>flags</name></decl></param>, <param><decl><type><name>intN</name></type> <name>tinyid</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>flags</name> != 0 &amp;&amp; <call><name>OBJ_IS_NATIVE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>JSAutoResolveFlags</name></type> <name>rf</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSRESOLVE_QUALIFIED</name> | <name>JSRESOLVE_DECLARING</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <return>return <expr>!!<call><name>js_DefineNativeProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>getter</name></expr></argument>, <argument><expr><name>setter</name></expr></argument>,
                                         <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>tinyid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name><name>obj</name>-&gt;<name>defineProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>getter</name></expr></argument>, <argument><expr><name>setter</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>DefineProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>value</name></decl></param>,
               <param><decl><type><name>JSPropertyOp</name></type> <name>getter</name></decl></param>, <param><decl><type><name>JSPropertyOp</name></type> <name>setter</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>attrs</name></decl></param>,
               <param><decl><type><name>uintN</name></type> <name>flags</name></decl></param>, <param><decl><type><name>intN</name></type> <name>tinyid</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsid</name></type> <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>attrs</name> &amp; <name>JSPROP_INDEX</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>id</name> = <call><name>INT_TO_JSID</name><argument_list>(<argument><expr><call><name>intptr_t</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>atom</name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>attrs</name> &amp;= ~<name>JSPROP_INDEX</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>atom</name> = <call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><call><name>DefinePropertyById</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>getter</name></expr></argument>, <argument><expr><name>setter</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>,
                              <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>tinyid</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTO_NAMELEN</name><parameter_list>(<param><type><name>s</name></type></param>,<param><type><name>n</name></type></param>)</parameter_list></cpp:macro>   <cpp:value>(((n) == (size_t)-1) ? js_strlen(s) : (n))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>DefineUCProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>jschar</name> *</type><name>name</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>namelen</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>value</name></decl></param>,
                 <param><decl><type><name>JSPropertyOp</name></type> <name>getter</name></decl></param>, <param><decl><type><name>JSPropertyOp</name></type> <name>setter</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>attrs</name></decl></param>,
                 <param><decl><type><name>uintN</name></type> <name>flags</name></decl></param>, <param><decl><type><name>intN</name></type> <name>tinyid</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>atom</name> = <call><name>js_AtomizeChars</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>AUTO_NAMELEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name>flags</name> != 0 &amp;&amp; <call><name>OBJ_IS_NATIVE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>JSAutoResolveFlags</name></type> <name>rf</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSRESOLVE_QUALIFIED</name> | <name>JSRESOLVE_DECLARING</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <return>return <expr>!!<call><name>js_DefineNativeProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>,
                                         <argument><expr><name>getter</name></expr></argument>, <argument><expr><name>setter</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>tinyid</name></expr></argument>,
                                         <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name><name>obj</name>-&gt;<name>defineProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>getter</name></expr></argument>, <argument><expr><name>setter</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_DefineObject</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *name</argument>, <argument>JSClass *clasp</argument>,
                <argument>JSObject *proto</argument>, <argument>uintN attrs</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>nobj</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>clasp</name></expr>)</condition><then>
        <expr_stmt><expr><name>clasp</name> = &amp;<name>js_ObjectClass</name></expr>;</expr_stmt></then></if>    <comment type="block">/* default class is Object */</comment>
    <expr_stmt><expr><name>nobj</name> = <call><name>js_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>clasp</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>nobj</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>DefineProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>nobj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>,
                        <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>nobj</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_DefineConstDoubles</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>JSConstDoubleSpec *cds</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uintN</name></type> <name>attrs</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</init> <condition><expr><name><name>cds</name>-&gt;<name>name</name></name></expr>;</condition> <incr><expr><name>cds</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>ok</name> = <call><name>js_NewNumberInRootedValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>cds</name>-&gt;<name>dval</name></name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
            <break>break;</break></then></if>
        <expr_stmt><expr><name>attrs</name> = <name><name>cds</name>-&gt;<name>flags</name></name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>attrs</name></expr>)</condition><then>
            <expr_stmt><expr><name>attrs</name> = <name>JSPROP_READONLY</name> | <name>JSPROP_PERMANENT</name></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name>ok</name> = <call><name>DefineProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>cds</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
            <break>break;</break></then></if>
    }</block></for>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_DefineProperties</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>JSPropertySpec *ps</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</init> <condition><expr><name><name>ps</name>-&gt;<name>name</name></name></expr>;</condition> <incr><expr><name>ps</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>ok</name> = <call><name>DefineProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>ps</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>,
                            <argument><expr><name><name>ps</name>-&gt;<name>getter</name></name></expr></argument>, <argument><expr><name><name>ps</name>-&gt;<name>setter</name></name></expr></argument>, <argument><expr><name><name>ps</name>-&gt;<name>flags</name></name></expr></argument>,
                            <argument><expr><name><name>JSScopeProperty</name>::<name>HAS_SHORTID</name></name></expr></argument>, <argument><expr><name><name>ps</name>-&gt;<name>tinyid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
            <break>break;</break></then></if>
    }</block></for>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_DefineProperty</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *name</argument>, <argument>jsval value</argument>,
                  <argument>JSPropertyOp getter</argument>, <argument>JSPropertyOp setter</argument>, <argument>uintN attrs</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>DefineProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>getter</name></expr></argument>, <argument><expr><name>setter</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_DefinePropertyById</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>, <argument>jsval value</argument>,
                      <argument>JSPropertyOp getter</argument>, <argument>JSPropertyOp setter</argument>, <argument>uintN attrs</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>DefinePropertyById</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>getter</name></expr></argument>, <argument><expr><name>setter</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_DefinePropertyWithTinyId</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *name</argument>,
                            <argument>int8 tinyid</argument>, <argument>jsval value</argument>,
                            <argument>JSPropertyOp getter</argument>, <argument>JSPropertyOp setter</argument>,
                            <argument>uintN attrs</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>DefineProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>getter</name></expr></argument>, <argument><expr><name>setter</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>,
                          <argument><expr><name><name>JSScopeProperty</name>::<name>HAS_SHORTID</name></name></expr></argument>, <argument><expr><name>tinyid</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_DefineOwnProperty</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>, <argument>jsval descriptor</argument>, <argument>JSBool *bp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_DefineOwnProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>LookupPropertyById</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>flags</name></decl></param>,
                   <param><decl><type><name>JSObject</name> **</type><name>objp</name></decl></param>, <param><decl><type><name>JSProperty</name> **</type><name>propp</name></decl></param>)</parameter_list>
<block>{
    <function_decl><type><name>JSAutoResolveFlags</name></type> <name>rf</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>flags</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>id</name> = <call><name>js_CheckForStringIndex</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>obj</name>-&gt;<name>lookupProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>objp</name></expr></argument>, <argument><expr><name>propp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>LookupProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>flags</name></decl></param>,
               <param><decl><type><name>JSObject</name> **</type><name>objp</name></decl></param>, <param><decl><type><name>JSProperty</name> **</type><name>propp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>atom</name> = <call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <return>return <expr><call><name>LookupPropertyById</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>objp</name></expr></argument>, <argument><expr><name>propp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>LookupUCProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>jschar</name> *</type><name>name</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>namelen</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>flags</name></decl></param>,
                 <param><decl><type><name>JSObject</name> **</type><name>objp</name></decl></param>, <param><decl><type><name>JSProperty</name> **</type><name>propp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>atom</name> = <call><name>js_AtomizeChars</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>AUTO_NAMELEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <return>return <expr><call><name>LookupPropertyById</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>objp</name></expr></argument>, <argument><expr><name>propp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_AliasProperty</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *name</argument>,
                 <argument>const char *alias</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScopeProperty</name> *</type><name>sprop</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>LookupProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>JSRESOLVE_QUALIFIED</name></expr></argument>, <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<name>prop</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>js_ReportIsNotDefined</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>obj2</name> != <name>obj</name> || !<call><name>OBJ_IS_NATIVE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>obj2</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSMSG_CANT_ALIAS</name></expr></argument>,
                             <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>)</argument_list></call>-&gt;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>atom</name> = <call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>sprop</name> = (<name>JSScopeProperty</name> *)<name>prop</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ok</name> = (<call><name>js_AddNativeProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><call><name><name>sprop</name>-&gt;<name>getter</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sprop</name>-&gt;<name>setter</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>sprop</name>-&gt;<name>slot</name></name></expr></argument>,
                                   <argument><expr><call><name><name>sprop</name>-&gt;<name>attributes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sprop</name>-&gt;<name>getFlags</name></name><argument_list>()</argument_list></call> | <name><name>JSScopeProperty</name>::<name>ALIAS</name></name></expr></argument>,
                                   <argument><expr><name><name>sprop</name>-&gt;<name>shortid</name></name></expr></argument>)</argument_list></call>
              != <name>NULL</name>)</expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name><name>obj</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>LookupResult</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj2</name></decl></param>, <param><decl><type><name>JSProperty</name> *</type><name>prop</name></decl></param>,
             <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>prop</name></expr>)</condition><then> <block>{
        <comment type="block">/* XXX bad API: no way to tell "not defined" from "void value" */</comment>
        <expr_stmt><expr>*<name>vp</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name> <init>= <expr><name>JS_TRUE</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>OBJ_IS_NATIVE</name><argument_list>(<argument><expr><name>obj2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>JSScopeProperty</name> *</type><name>sprop</name> <init>= <expr>(<name>JSScopeProperty</name> *) <name>prop</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>sprop</name>-&gt;<name>isMethod</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <function_decl><type><name>AutoScopePropertyRooter</name></type> <name>root</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>sprop</name></type></decl></param>)</parameter_list>;</function_decl>
            <expr_stmt><expr><call><name>JS_UNLOCK_OBJ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>vp</name> = <call><name><name>sprop</name>-&gt;<name>methodValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>OBJ_SCOPE</name><argument_list>(<argument><expr><name>obj2</name></expr></argument>)</argument_list></call>-&gt;<call><name>methodReadBarrier</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>sprop</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <comment type="block">/* Peek at the native property's slot value, without doing a Get. */</comment>
        <expr_stmt><expr>*<name>vp</name> = <call><name>SPROP_HAS_VALID_SLOT</name><argument_list>(<argument><expr><name>sprop</name></expr></argument>, <argument><expr><call><name>OBJ_SCOPE</name><argument_list>(<argument><expr><name>obj2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
               ? <call><name>LOCKED_OBJ_GET_SLOT</name><argument_list>(<argument><expr><name>obj2</name></expr></argument>, <argument><expr><name><name>sprop</name>-&gt;<name>slot</name></name></expr></argument>)</argument_list></call>
               : <name>JSVAL_TRUE</name></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><call><name><name>obj2</name>-&gt;<name>isDenseArray</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ok</name> = <call><name>js_GetDenseArrayElementValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <comment type="block">/* XXX bad API: no way to return "defined but value unknown" */</comment>
        <expr_stmt><expr>*<name>vp</name> = <name>JSVAL_TRUE</name></expr>;</expr_stmt>
    }</block></else></if></else></if>
    <expr_stmt><expr><call><name><name>obj2</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>GetPropertyAttributesById</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>flags</name></decl></param>,
                          <param><decl><type><name>JSBool</name></type> <name>own</name></decl></param>, <param><decl><type><name>JSPropertyDescriptor</name> *</type><name>desc</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>LookupPropertyById</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name>prop</name> || (<name>own</name> &amp;&amp; <name>obj</name> != <name>obj2</name>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>desc</name>-&gt;<name>obj</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>desc</name>-&gt;<name>attrs</name></name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>desc</name>-&gt;<name>getter</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>desc</name>-&gt;<name>setter</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>desc</name>-&gt;<name>value</name></name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>prop</name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>obj2</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>desc</name>-&gt;<name>obj</name></name> = <name>obj2</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ok</name> = <call><name><name>obj2</name>-&gt;<name>getAttributes</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr>&amp;<name><name>desc</name>-&gt;<name>attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>OBJ_IS_NATIVE</name><argument_list>(<argument><expr><name>obj2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>JSScopeProperty</name> *</type><name>sprop</name> <init>= <expr>(<name>JSScopeProperty</name> *) <name>prop</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>desc</name>-&gt;<name>getter</name></name> = <call><name><name>sprop</name>-&gt;<name>getter</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>desc</name>-&gt;<name>setter</name></name> = <call><name><name>sprop</name>-&gt;<name>setter</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>desc</name>-&gt;<name>value</name></name> = <call><name>SPROP_HAS_VALID_SLOT</name><argument_list>(<argument><expr><name>sprop</name></expr></argument>, <argument><expr><call><name>OBJ_SCOPE</name><argument_list>(<argument><expr><name>obj2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                          ? <call><name>LOCKED_OBJ_GET_SLOT</name><argument_list>(<argument><expr><name>obj2</name></expr></argument>, <argument><expr><name><name>sprop</name>-&gt;<name>slot</name></name></expr></argument>)</argument_list></call>
                          : <name>JSVAL_VOID</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>desc</name>-&gt;<name>getter</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>desc</name>-&gt;<name>setter</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>desc</name>-&gt;<name>value</name></name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>obj2</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>GetPropertyAttributes</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>JSAtom</name> *</type><name>atom</name></decl></param>,
                      <param><decl><type><name>uintN</name> *</type><name>attrsp</name></decl></param>, <param><decl><type><name>JSBool</name> *</type><name>foundp</name></decl></param>,
                      <param><decl><type><name>JSPropertyOp</name> *</type><name>getterp</name></decl></param>, <param><decl><type><name>JSPropertyOp</name> *</type><name>setterp</name></decl></param>)</parameter_list>

<block>{
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>JSPropertyDescriptor</name></type> <name>desc</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>GetPropertyAttributesById</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name>JSRESOLVE_QUALIFIED</name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr>*<name>attrsp</name> = <name><name>desc</name>.<name>attrs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>foundp</name> = (<name><name>desc</name>.<name>obj</name></name> != <name>NULL</name>)</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>getterp</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>getterp</name> = <name><name>desc</name>.<name>getter</name></name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>setterp</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>setterp</name> = <name><name>desc</name>.<name>setter</name></name></expr>;</expr_stmt></then></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>SetPropertyAttributes</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>JSAtom</name> *</type><name>atom</name></decl></param>,
                      <param><decl><type><name>uintN</name></type> <name>attrs</name></decl></param>, <param><decl><type><name>JSBool</name> *</type><name>foundp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>LookupPropertyById</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>JSRESOLVE_QUALIFIED</name></expr></argument>,
                            <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr>!<name>prop</name> || <name>obj</name> != <name>obj2</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>foundp</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>prop</name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>obj2</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr>*<name>foundp</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name><name>obj</name>-&gt;<name>setAttributes</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr>&amp;<name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block></function>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_GetPropertyAttributes</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *name</argument>,
                         <argument>uintN *attrsp</argument>, <argument>JSBool *foundp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>GetPropertyAttributes</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
                                 <argument><expr><call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><name>attrsp</name></expr></argument>, <argument><expr><name>foundp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_GetPropertyAttrsGetterAndSetter</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                                   <argument>const char *name</argument>,
                                   <argument>uintN *attrsp</argument>, <argument>JSBool *foundp</argument>,
                                   <argument>JSPropertyOp *getterp</argument>,
                                   <argument>JSPropertyOp *setterp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>GetPropertyAttributes</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
                                 <argument><expr><call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><name>attrsp</name></expr></argument>, <argument><expr><name>foundp</name></expr></argument>, <argument><expr><name>getterp</name></expr></argument>, <argument><expr><name>setterp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_GetPropertyAttrsGetterAndSetterById</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                                       <argument>jsid id</argument>,
                                       <argument>uintN *attrsp</argument>, <argument>JSBool *foundp</argument>,
                                       <argument>JSPropertyOp *getterp</argument>,
                                       <argument>JSPropertyOp *setterp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JSPropertyDescriptor</name></type> <name>desc</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>GetPropertyAttributesById</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>JSRESOLVE_QUALIFIED</name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr>*<name>attrsp</name> = <name><name>desc</name>.<name>attrs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>foundp</name> = (<name><name>desc</name>.<name>obj</name></name> != <name>NULL</name>)</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>getterp</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>getterp</name> = <name><name>desc</name>.<name>getter</name></name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>setterp</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>setterp</name> = <name><name>desc</name>.<name>setter</name></name></expr>;</expr_stmt></then></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_SetPropertyAttributes</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *name</argument>,
                         <argument>uintN attrs</argument>, <argument>JSBool *foundp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>SetPropertyAttributes</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
                                 <argument><expr><call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>foundp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>AlreadyHasOwnPropertyHelper</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>,
                            <param><decl><type><name>JSBool</name> *</type><name>foundp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSScope</name> *</type><name>scope</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>OBJ_IS_NATIVE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj2</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<call><name>LookupPropertyById</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>,
                                <argument><expr><name>JSRESOLVE_QUALIFIED</name> | <name>JSRESOLVE_DETECTING</name></expr></argument>,
                                <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr>*<name>foundp</name> = (<name>obj</name> == <name>obj2</name>)</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>prop</name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>obj2</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>JS_LOCK_OBJ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>scope</name> = <call><name>OBJ_SCOPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>foundp</name> = <call><name><name>scope</name>-&gt;<name>hasProperty</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_UNLOCK_SCOPE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_AlreadyHasOwnProperty</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *name</argument>,
                         <argument>JSBool *foundp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>atom</name> = <call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <return>return <expr><call><name>AlreadyHasOwnPropertyHelper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>foundp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_AlreadyHasOwnPropertyById</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>,
                             <argument>JSBool *foundp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>AlreadyHasOwnPropertyHelper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>foundp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_HasProperty</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *name</argument>, <argument>JSBool *foundp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>LookupProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                        <argument><expr><name>JSRESOLVE_QUALIFIED</name> | <name>JSRESOLVE_DETECTING</name></expr></argument>,
                        <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>foundp</name> = (<name>prop</name> != <name>NULL</name>)</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>prop</name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>obj2</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_HasPropertyById</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>, <argument>JSBool *foundp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>LookupPropertyById</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>,
                            <argument><expr><name>JSRESOLVE_QUALIFIED</name> | <name>JSRESOLVE_DETECTING</name></expr></argument>,
                            <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block>{
       <expr_stmt><expr>*<name>foundp</name> = (<name>prop</name> != <name>NULL</name>)</expr>;</expr_stmt>
       <if>if <condition>(<expr><name>prop</name></expr>)</condition><then>
           <expr_stmt><expr><call><name><name>obj2</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_LookupProperty</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *name</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>LookupProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>JSRESOLVE_QUALIFIED</name></expr></argument>, <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call> &amp;&amp;
           <call><name>LookupResult</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_LookupPropertyById</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>LookupPropertyById</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>JSRESOLVE_QUALIFIED</name></expr></argument>, <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call> &amp;&amp;
           <call><name>LookupResult</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_LookupPropertyWithFlags</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *name</argument>,
                           <argument>uintN flags</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj2</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>atom</name> = <call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>atom</name> &amp;&amp;
           <call><name>JS_LookupPropertyWithFlagsById</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
                                          <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_LookupPropertyWithFlagsById</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>,
                               <argument>uintN flags</argument>, <argument>JSObject **objp</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>OBJ_IS_NATIVE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call>
         ? <call><name>js_LookupPropertyWithFlags</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>objp</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call> &gt;= 0
         : <call><name><name>obj</name>-&gt;<name>lookupProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>objp</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ok</name></expr>)</condition><then>
        <expr_stmt><expr><name>ok</name> = <call><name>LookupResult</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>*<name>objp</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_GetPropertyDescriptorById</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>, <argument>uintN flags</argument>,
                             <argument>JSPropertyDescriptor *desc</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>GetPropertyAttributesById</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_GetOwnPropertyDescriptor</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_GetOwnPropertyDescriptor</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_GetProperty</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *name</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>atom</name> = <call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <function_decl><type><name>JSAutoResolveFlags</name></type> <name>rf</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>JSRESOLVE_QUALIFIED</name></type></decl></param>)</parameter_list>;</function_decl>
    <return>return <expr><call><name><name>obj</name>-&gt;<name>getProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_GetPropertyById</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>JSAutoResolveFlags</name></type> <name>rf</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>JSRESOLVE_QUALIFIED</name></type></decl></param>)</parameter_list>;</function_decl>
    <return>return <expr><call><name><name>obj</name>-&gt;<name>getProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_GetMethodById</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>, <argument>JSObject **objp</argument>,
                 <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>js_GetMethod</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>JSGET_METHOD_BARRIER</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name>objp</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>objp</name> = <name>obj</name></expr>;</expr_stmt></then></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_GetMethod</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *name</argument>, <argument>JSObject **objp</argument>,
             <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>atom</name> = <call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <return>return <expr><call><name>JS_GetMethodById</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>objp</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_SetProperty</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *name</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>atom</name> = <call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>JSAutoResolveFlags</name></type> <name>rf</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSRESOLVE_QUALIFIED</name> | <name>JSRESOLVE_ASSIGNING</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><call><name><name>obj</name>-&gt;<name>setProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_SetPropertyById</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSAutoResolveFlags</name></type> <name>rf</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSRESOLVE_QUALIFIED</name> | <name>JSRESOLVE_ASSIGNING</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><call><name><name>obj</name>-&gt;<name>setProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_DeleteProperty</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *name</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>junk</name></decl>;</decl_stmt>

    <return>return <expr><call><name>JS_DeleteProperty2</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>junk</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_DeleteProperty2</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *name</argument>,
                   <argument>jsval *rval</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>atom</name> = <call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <function_decl><type><name>JSAutoResolveFlags</name></type> <name>rf</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>JSRESOLVE_QUALIFIED</name></type></decl></param>)</parameter_list>;</function_decl>
    <return>return <expr><call><name><name>obj</name>-&gt;<name>deleteProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_DeletePropertyById</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>junk</name></decl>;</decl_stmt>

    <return>return <expr><call><name>JS_DeletePropertyById2</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>junk</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_DeletePropertyById2</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>, <argument>jsval *rval</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>JSAutoResolveFlags</name></type> <name>rf</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>JSRESOLVE_QUALIFIED</name></type></decl></param>)</parameter_list>;</function_decl>
    <return>return <expr><call><name><name>obj</name>-&gt;<name>deleteProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_DefineUCProperty</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                    <argument>const jschar *name</argument>, <argument>size_t namelen</argument>, <argument>jsval value</argument>,
                    <argument>JSPropertyOp getter</argument>, <argument>JSPropertyOp setter</argument>,
                    <argument>uintN attrs</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>DefineUCProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>getter</name></expr></argument>, <argument><expr><name>setter</name></expr></argument>,
                            <argument><expr><name>attrs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_GetUCPropertyAttributes</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                           <argument>const jschar *name</argument>, <argument>size_t namelen</argument>,
                           <argument>uintN *attrsp</argument>, <argument>JSBool *foundp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>GetPropertyAttributes</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
                    <argument><expr><call><name>js_AtomizeChars</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>AUTO_NAMELEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>attrsp</name></expr></argument>, <argument><expr><name>foundp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_GetUCPropertyAttrsGetterAndSetter</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                                     <argument>const jschar *name</argument>, <argument>size_t namelen</argument>,
                                     <argument>uintN *attrsp</argument>, <argument>JSBool *foundp</argument>,
                                     <argument>JSPropertyOp *getterp</argument>,
                                     <argument>JSPropertyOp *setterp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>GetPropertyAttributes</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
                    <argument><expr><call><name>js_AtomizeChars</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>AUTO_NAMELEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>attrsp</name></expr></argument>, <argument><expr><name>foundp</name></expr></argument>, <argument><expr><name>getterp</name></expr></argument>, <argument><expr><name>setterp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_SetUCPropertyAttributes</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                           <argument>const jschar *name</argument>, <argument>size_t namelen</argument>,
                           <argument>uintN attrs</argument>, <argument>JSBool *foundp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>SetPropertyAttributes</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
                    <argument><expr><call><name>js_AtomizeChars</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>AUTO_NAMELEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>foundp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_DefineUCPropertyWithTinyId</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                              <argument>const jschar *name</argument>, <argument>size_t namelen</argument>,
                              <argument>int8 tinyid</argument>, <argument>jsval value</argument>,
                              <argument>JSPropertyOp getter</argument>, <argument>JSPropertyOp setter</argument>,
                              <argument>uintN attrs</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>DefineUCProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>getter</name></expr></argument>, <argument><expr><name>setter</name></expr></argument>,
                            <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name><name>JSScopeProperty</name>::<name>HAS_SHORTID</name></name></expr></argument>, <argument><expr><name>tinyid</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_AlreadyHasOwnUCProperty</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                           <argument>const jschar *name</argument>, <argument>size_t namelen</argument>,
                           <argument>JSBool *foundp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>atom</name> = <call><name>js_AtomizeChars</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>AUTO_NAMELEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <return>return <expr><call><name>AlreadyHasOwnPropertyHelper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>foundp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_HasUCProperty</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                 <argument>const jschar *name</argument>, <argument>size_t namelen</argument>,
                 <argument>JSBool *vp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>LookupUCProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>,
                          <argument><expr><name>JSRESOLVE_QUALIFIED</name> | <name>JSRESOLVE_DETECTING</name></expr></argument>,
                          <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>vp</name> = (<name>prop</name> != <name>NULL</name>)</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>prop</name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>obj2</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_LookupUCProperty</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                    <argument>const jschar *name</argument>, <argument>size_t namelen</argument>,
                    <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>LookupUCProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>, <argument><expr><name>JSRESOLVE_QUALIFIED</name></expr></argument>,
                            <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call> &amp;&amp;
           <call><name>LookupResult</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_GetUCProperty</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                 <argument>const jschar *name</argument>, <argument>size_t namelen</argument>,
                 <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>atom</name> = <call><name>js_AtomizeChars</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>AUTO_NAMELEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <function_decl><type><name>JSAutoResolveFlags</name></type> <name>rf</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>JSRESOLVE_QUALIFIED</name></type></decl></param>)</parameter_list>;</function_decl>
    <return>return <expr><call><name><name>obj</name>-&gt;<name>getProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_SetUCProperty</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                 <argument>const jschar *name</argument>, <argument>size_t namelen</argument>,
                 <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>atom</name> = <call><name>js_AtomizeChars</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>AUTO_NAMELEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>JSAutoResolveFlags</name></type> <name>rf</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSRESOLVE_QUALIFIED</name> | <name>JSRESOLVE_ASSIGNING</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><call><name><name>obj</name>-&gt;<name>setProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_DeleteUCProperty2</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                     <argument>const jschar *name</argument>, <argument>size_t namelen</argument>,
                     <argument>jsval *rval</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>atom</name> = <call><name>js_AtomizeChars</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>AUTO_NAMELEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <function_decl><type><name>JSAutoResolveFlags</name></type> <name>rf</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>JSRESOLVE_QUALIFIED</name></type></decl></param>)</parameter_list>;</function_decl>
    <return>return <expr><call><name><name>obj</name>-&gt;<name>deleteProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_NewArrayObject</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsint length</argument>, <argument>jsval *vector</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* NB: jsuint cast does ToUint32. */</comment>
    <return>return <expr><call><name>js_NewArrayObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>jsuint</name>)<name>length</name></expr></argument>, <argument><expr><name>vector</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_IsArrayObject</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>js_GetWrappedObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call>-&gt;<call><name>isArray</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_GetArrayLength</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsuint *lengthp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_GetLengthProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>lengthp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_SetArrayLength</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsuint length</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_SetLengthProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_HasArrayLength</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsuint *lengthp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_HasLengthProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>lengthp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_DefineElement</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsint index</argument>, <argument>jsval value</argument>,
                 <argument>JSPropertyOp getter</argument>, <argument>JSPropertyOp setter</argument>, <argument>uintN attrs</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSAutoResolveFlags</name></type> <name>rf</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSRESOLVE_QUALIFIED</name> | <name>JSRESOLVE_DECLARING</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>obj</name>-&gt;<name>defineProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>INT_TO_JSID</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>getter</name></expr></argument>, <argument><expr><name>setter</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_AliasElement</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *name</argument>, <argument>jsint alias</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScopeProperty</name> *</type><name>sprop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>LookupProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>JSRESOLVE_QUALIFIED</name></expr></argument>, <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<name>prop</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>js_ReportIsNotDefined</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>obj2</name> != <name>obj</name> || !<call><name>OBJ_IS_NATIVE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name></type> <name><name>numBuf</name><index>[<expr>12</expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>obj2</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_snprintf</name><argument_list>(<argument><expr><name>numBuf</name></expr></argument>, <argument><expr>sizeof <name>numBuf</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr>(<name>long</name>)<name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSMSG_CANT_ALIAS</name></expr></argument>,
                             <argument><expr><name>numBuf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>)</argument_list></call>-&gt;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>sprop</name> = (<name>JSScopeProperty</name> *)<name>prop</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = (<call><name>js_AddNativeProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>INT_TO_JSID</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name><name>sprop</name>-&gt;<name>getter</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sprop</name>-&gt;<name>setter</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>sprop</name>-&gt;<name>slot</name></name></expr></argument>,
                               <argument><expr><call><name><name>sprop</name>-&gt;<name>attributes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sprop</name>-&gt;<name>getFlags</name></name><argument_list>()</argument_list></call> | <name><name>JSScopeProperty</name>::<name>ALIAS</name></name></expr></argument>,
                               <argument><expr><name><name>sprop</name>-&gt;<name>shortid</name></name></expr></argument>)</argument_list></call>
          != <name>NULL</name>)</expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_AlreadyHasOwnElement</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsint index</argument>,
                        <argument>JSBool *foundp</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>AlreadyHasOwnPropertyHelper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>INT_TO_JSID</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>foundp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_HasElement</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsint index</argument>, <argument>JSBool *foundp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>LookupPropertyById</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>INT_TO_JSID</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name>JSRESOLVE_QUALIFIED</name> | <name>JSRESOLVE_DETECTING</name></expr></argument>,
                            <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>foundp</name> = (<name>prop</name> != <name>NULL</name>)</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>prop</name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>obj2</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_LookupElement</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsint index</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>LookupPropertyById</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>INT_TO_JSID</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>JSRESOLVE_QUALIFIED</name></expr></argument>,
                              <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call> &amp;&amp;
           <call><name>LookupResult</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_GetElement</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsint index</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <function_decl><type><name>JSAutoResolveFlags</name></type> <name>rf</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>JSRESOLVE_QUALIFIED</name></type></decl></param>)</parameter_list>;</function_decl>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>obj</name>-&gt;<name>getProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>INT_TO_JSID</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_SetElement</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsint index</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSAutoResolveFlags</name></type> <name>rf</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSRESOLVE_QUALIFIED</name> | <name>JSRESOLVE_ASSIGNING</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>obj</name>-&gt;<name>setProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>INT_TO_JSID</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_DeleteElement</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsint index</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>junk</name></decl>;</decl_stmt>

    <return>return <expr><call><name>JS_DeleteElement2</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>&amp;<name>junk</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_DeleteElement2</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsint index</argument>, <argument>jsval *rval</argument>)</argument_list></macro>
<block>{
    <function_decl><type><name>JSAutoResolveFlags</name></type> <name>rf</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>JSRESOLVE_QUALIFIED</name></type></decl></param>)</parameter_list>;</function_decl>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>obj</name>-&gt;<name>deleteProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>INT_TO_JSID</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_ClearScope</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>obj</name>-&gt;<name>map</name>-&gt;<name>ops</name>-&gt;<name>clear</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>obj</name>-&gt;<name>map</name>-&gt;<name>ops</name>-&gt;<name>clear</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <comment type="block">/* Clear cached class objects on the global object. */</comment>
    <if>if <condition>(<expr><call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call>-&gt;<name>flags</name> &amp; <name>JSCLASS_IS_GLOBAL</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

        <for>for (<init><expr><name>key</name> = <name>JSProto_Null</name></expr>;</init> <condition><expr><name>key</name> &lt; <name>JSProto_LIMIT</name></expr>;</condition> <incr><expr><name>key</name>++</expr></incr>)
            <expr_stmt><expr><call><name>JS_SetReservedSlot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
    }</block></then></if>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSIdArray *</argument>)</argument_list></macro>
<macro><name>JS_Enumerate</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>jsint</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsid</name></type> <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSIdArray</name> *</type><name>ida</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name> *</type><name>vector</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ida</name> = <name>NULL</name></expr>;</expr_stmt>
    <function_decl><type><name>AutoEnumStateRooter</name></type> <name>iterState</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>obj</name></type></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/* Get the number of properties to enumerate. */</comment>
    <decl_stmt><decl><type><name>jsval</name></type> <name>num_properties</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>enumerate</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSENUMERATE_INIT</name></expr></argument>, <argument><expr><call><name><name>iterState</name>.<name>addr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>num_properties</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_INT</name><argument_list>(<argument><expr><name>num_properties</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    }</block></then></if>

    <comment type="block">/* Grow as needed if we don't know the exact amount ahead of time. */</comment>
    <expr_stmt><expr><name>n</name> = <call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name>num_properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>n</name> &lt;= 0</expr>)</condition><then>
        <expr_stmt><expr><name>n</name> = 8</expr>;</expr_stmt></then></if>

    <comment type="block">/* Create an array of jsids large enough to hold all the properties */</comment>
    <expr_stmt><expr><name>ida</name> = <call><name>NewIdArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ida</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>

    <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>vector</name> = &amp;<name><name>ida</name>-&gt;<name>vector</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    <for>for (<init>;</init><condition>;</condition><incr/>) <block>{
        <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>enumerate</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSENUMERATE_NEXT</name></expr></argument>, <argument><expr><call><name><name>iterState</name>.<name>addr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>

        <comment type="block">/* No more jsid's to enumerate ? */</comment>
        <if>if <condition>(<expr><call><name><name>iterState</name>.<name>state</name></name><argument_list>()</argument_list></call> == <name>JSVAL_NULL</name></expr>)</condition><then>
            <break>break;</break></then></if>

        <if>if <condition>(<expr><name>i</name> == <name><name>ida</name>-&gt;<name>length</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ida</name> = <call><name>SetIdArrayLength</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ida</name></expr></argument>, <argument><expr><name><name>ida</name>-&gt;<name>length</name></name> * 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ida</name></expr>)</condition><then>
                <goto>goto <name>error</name>;</goto></then></if>
            <expr_stmt><expr><name>vector</name> = &amp;<name><name>ida</name>-&gt;<name>vector</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>vector</name><index>[<expr><name>i</name>++</expr>]</index></name> = <name>id</name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><call><name>SetIdArrayLength</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ida</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>error</name>:</label>
    <if>if <condition>(<expr><name>ida</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_DestroyIdArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ida</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block>

<comment type="block">/*
 * XXX reverse iterator for properties, unreverse and meld with jsinterp.c's
 *     prop_iterator_class somehow...
 * + preserve the obj-&gt;enumerate API while optimizing the native object case
 * + native case here uses a JSScopeProperty *, but that iterates in reverse!
 * + so we make non-native match, by reverse-iterating after JS_Enumerating
 */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>JSSLOT_ITER_INDEX</name> <init>= <expr><name>JSSLOT_PRIVATE</name> + 1</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>JS_STATIC_ASSERT</name><argument_list>(<argument><expr><name>JSSLOT_ITER_INDEX</name> &lt; <name>JS_INITIAL_NSLOTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>prop_iter_finalize</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>void</name> *</type><name>pdata</name> <init>= <expr><call><name><name>obj</name>-&gt;<name>getPrivate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>pdata</name></expr>)</condition><then>
        <return>return;</return></then></if>

    <if>if <condition>(<expr><call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name><name>obj</name>-&gt;<name>fslots</name><index>[<expr><name>JSSLOT_ITER_INDEX</name></expr>]</index></name></expr></argument>)</argument_list></call> &gt;= 0</expr>)</condition><then> <block>{
        <comment type="block">/* Non-native case: destroy the ida enumerated when obj was created. */</comment>
        <decl_stmt><decl><type><name>JSIdArray</name> *</type><name>ida</name> <init>= <expr>(<name>JSIdArray</name> *) <name>pdata</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>JS_DestroyIdArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ida</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>prop_iter_trace</name><parameter_list>(<param><decl><type><name>JSTracer</name> *</type><name>trc</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>void</name> *</type><name>pdata</name> <init>= <expr><call><name><name>obj</name>-&gt;<name>getPrivate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>pdata</name></expr>)</condition><then>
        <return>return;</return></then></if>

    <if>if <condition>(<expr><call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name><name>obj</name>-&gt;<name>fslots</name><index>[<expr><name>JSSLOT_ITER_INDEX</name></expr>]</index></name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
        <comment type="block">/* Native case: just mark the next property to visit. */</comment>
        <expr_stmt><expr>((<name>JSScopeProperty</name> *) <name>pdata</name>)-&gt;<call><name>trace</name><argument_list>(<argument><expr><name>trc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <comment type="block">/* Non-native case: mark each id in the JSIdArray private. */</comment>
        <decl_stmt><decl><type><name>JSIdArray</name> *</type><name>ida</name> <init>= <expr>(<name>JSIdArray</name> *) <name>pdata</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>jsint</name></type> <name>i</name> <init>= <expr>0</expr></init>, <name>n</name> <init>= <expr><name><name>ida</name>-&gt;<name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <expr_stmt><expr><call><name>js_TraceId</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name><name>ida</name>-&gt;<name>vector</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
    }</block></else></if>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>JSClass</name></type> <name>prop_iter_class</name> <init>= <expr><block>{
    <expr>"PropertyIterator"</expr>,
    <expr><name>JSCLASS_HAS_PRIVATE</name> | <call><name>JSCLASS_HAS_RESERVED_SLOTS</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call> |
    <name>JSCLASS_MARK_IS_TRACE</name></expr>,
    <expr><name>JS_PropertyStub</name></expr>,  <expr><name>JS_PropertyStub</name></expr>, <expr><name>JS_PropertyStub</name></expr>, <expr><name>JS_PropertyStub</name></expr>,
    <expr><name>JS_EnumerateStub</name></expr>, <expr><name>JS_ResolveStub</name></expr>,  <expr><name>JS_ConvertStub</name></expr>,  <expr><name>prop_iter_finalize</name></expr>,
    <expr><name>NULL</name></expr>,             <expr><name>NULL</name></expr>,            <expr><name>NULL</name></expr>,            <expr><name>NULL</name></expr>,
    <expr><name>NULL</name></expr>,             <expr><name>NULL</name></expr>,            <expr><call><name>JS_CLASS_TRACE</name><argument_list>(<argument><expr><name>prop_iter_trace</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_NewPropertyIterator</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>iterobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScope</name> *</type><name>scope</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> *</type><name>pdata</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsint</name></type> <name>index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSIdArray</name> *</type><name>ida</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iterobj</name> = <call><name>js_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>prop_iter_class</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>iterobj</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name>OBJ_IS_NATIVE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* Native case: start with the last property in obj's own scope. */</comment>
        <expr_stmt><expr><name>scope</name> = <call><name>OBJ_SCOPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pdata</name> = <call><name><name>scope</name>-&gt;<name>lastProperty</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>index</name> = -1</expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <comment type="block">/*
         * Non-native case: enumerate a JSIdArray and keep it via private.
         *
         * Note: we have to make sure that we root obj around the call to
         * JS_Enumerate to protect against multiple allocations under it.
         */</comment>
        <function_decl><type><name>AutoValueRooter</name></type> <name>tvr</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>iterobj</name></type></decl></param>)</parameter_list>;</function_decl>
        <expr_stmt><expr><name>ida</name> = <call><name>JS_Enumerate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ida</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name>pdata</name> = <name>ida</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>index</name> = <name><name>ida</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="block">/* iterobj cannot escape to other threads here. */</comment>
    <expr_stmt><expr><call><name><name>iterobj</name>-&gt;<name>setPrivate</name></name><argument_list>(<argument><expr><name>pdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iterobj</name>-&gt;<name>fslots</name><index>[<expr><name>JSSLOT_ITER_INDEX</name></expr>]</index></name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>iterobj</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_NextProperty</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *iterobj</argument>, <argument>jsid *idp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>jsint</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScope</name> *</type><name>scope</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScopeProperty</name> *</type><name>sprop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSIdArray</name> *</type><name>ida</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> = <call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name><name>iterobj</name>-&gt;<name>fslots</name><index>[<expr><name>JSSLOT_ITER_INDEX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>i</name> &lt; 0</expr>)</condition><then> <block>{
        <comment type="block">/* Native case: private data is a property tree node pointer. */</comment>
        <expr_stmt><expr><name>obj</name> = <call><name><name>iterobj</name>-&gt;<name>getParent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>OBJ_IS_NATIVE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>scope</name> = <call><name>OBJ_SCOPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sprop</name> = (<name>JSScopeProperty</name> *) <call><name><name>iterobj</name>-&gt;<name>getPrivate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * If the next property mapped by scope in the property tree ancestor
         * line is not enumerable, or it's an alias, skip it and keep on trying
         * to find an enumerable property that is still in scope.
         */</comment>
        <while>while <condition>(<expr><name>sprop</name> &amp;&amp; (!<call><name><name>sprop</name>-&gt;<name>enumerable</name></name><argument_list>()</argument_list></call> || <call><name><name>sprop</name>-&gt;<name>isAlias</name></name><argument_list>()</argument_list></call>)</expr>)</condition>
            <expr_stmt><expr><name>sprop</name> = <name><name>sprop</name>-&gt;<name>parent</name></name></expr>;</expr_stmt></while>

        <if>if <condition>(<expr>!<name>sprop</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>idp</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>iterobj</name>-&gt;<name>setPrivate</name></name><argument_list>(<argument><expr><name><name>sprop</name>-&gt;<name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>idp</name> = <name><name>sprop</name>-&gt;<name>id</name></name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then> <else>else <block>{
        <comment type="block">/* Non-native case: use the ida enumerated when iterobj was created. */</comment>
        <expr_stmt><expr><name>ida</name> = (<name>JSIdArray</name> *) <call><name><name>iterobj</name>-&gt;<name>getPrivate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>i</name> &lt;= <name><name>ida</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>i</name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>idp</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr>*<name>idp</name> = <name><name>ida</name>-&gt;<name>vector</name><index>[<expr>--<name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>iterobj</name>-&gt;<name>setSlot</name></name><argument_list>(<argument><expr><name>JSSLOT_ITER_INDEX</name></expr></argument>, <argument><expr><call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_CheckAccess</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>, <argument>JSAccessMode mode</argument>,
               <argument>jsval *vp</argument>, <argument>uintN *attrsp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>obj</name>-&gt;<name>checkAccess</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>attrsp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_GetReservedSlot</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>uint32 index</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_GetReservedSlot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_SetReservedSlot</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>uint32 index</argument>, <argument>jsval v</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_SetReservedSlot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>jsrefcount</argument>)</argument_list></macro>
<macro><name>JS_HoldPrincipals</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSPrincipals *principals</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>JS_ATOMIC_INCREMENT</name><argument_list>(<argument><expr>&amp;<name><name>principals</name>-&gt;<name>refcount</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>jsrefcount</argument>)</argument_list></macro>
<macro><name>JS_DropPrincipals</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSPrincipals *principals</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>jsrefcount</name></type> <name>rc</name> <init>= <expr><call><name>JS_ATOMIC_DECREMENT</name><argument_list>(<argument><expr>&amp;<name><name>principals</name>-&gt;<name>refcount</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>rc</name> == 0</expr>)</condition><then>
        <expr_stmt><expr><call><name><name>principals</name>-&gt;<name>destroy</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>principals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>rc</name></expr>;</return>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSSecurityCallbacks *</argument>)</argument_list></macro>
<macro><name>JS_SetRuntimeSecurityCallbacks</name><argument_list>(<argument>JSRuntime *rt</argument>, <argument>JSSecurityCallbacks *callbacks</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSSecurityCallbacks</name> *</type><name>oldcallbacks</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>oldcallbacks</name> = <name><name>rt</name>-&gt;<name>securityCallbacks</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rt</name>-&gt;<name>securityCallbacks</name></name> = <name>callbacks</name></expr>;</expr_stmt>
    <return>return <expr><name>oldcallbacks</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSSecurityCallbacks *</argument>)</argument_list></macro>
<macro><name>JS_GetRuntimeSecurityCallbacks</name><argument_list>(<argument>JSRuntime *rt</argument>)</argument_list></macro>
<block>{
  <return>return <expr><name><name>rt</name>-&gt;<name>securityCallbacks</name></name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSSecurityCallbacks *</argument>)</argument_list></macro>
<macro><name>JS_SetContextSecurityCallbacks</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSSecurityCallbacks *callbacks</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSSecurityCallbacks</name> *</type><name>oldcallbacks</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>oldcallbacks</name> = <name><name>cx</name>-&gt;<name>securityCallbacks</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>securityCallbacks</name></name> = <name>callbacks</name></expr>;</expr_stmt>
    <return>return <expr><name>oldcallbacks</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSSecurityCallbacks *</argument>)</argument_list></macro>
<macro><name>JS_GetSecurityCallbacks</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
  <return>return <expr><name><name>cx</name>-&gt;<name>securityCallbacks</name></name>
         ? <name><name>cx</name>-&gt;<name>securityCallbacks</name></name>
         : <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>securityCallbacks</name></name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSFunction *</argument>)</argument_list></macro>
<macro><name>JS_NewFunction</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSNative native</argument>, <argument>uintN nargs</argument>, <argument>uintN flags</argument>,
               <argument>JSObject *parent</argument>, <argument>const char *name</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name>name</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>atom</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>atom</name> = <call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
    }</block></else></if>
    <return>return <expr><call><name>js_NewFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>native</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_CloneFunctionObject</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *funobj</argument>, <argument>JSObject *parent</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>parent</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>cx</name>-&gt;<name>fp</name></name></expr>)</condition><then>
            <expr_stmt><expr><name>parent</name> = <call><name>js_GetScopeChain</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>cx</name>-&gt;<name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr>!<name>parent</name></expr>)</condition><then>
            <expr_stmt><expr><name>parent</name> = <name><name>cx</name>-&gt;<name>globalObject</name></name></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>funobj</name></expr></argument>)</argument_list></call> != &amp;<name>js_FunctionClass</name></expr>)</condition><then> <block>{
        <comment type="block">/*
         * We cannot clone this object, so fail (we used to return funobj, bad
         * idea, but we changed incompatibly to teach any abusers a lesson!).
         */</comment>
        <decl_stmt><decl><type><name>jsval</name></type> <name>v</name> <init>= <expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>funobj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>js_ReportIsNotFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name> <init>= <expr><call><name>GET_FUNCTION_PRIVATE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>funobj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>clone</name> <init>= <expr><call><name>CloneFunctionObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>clone</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <comment type="block">/*
     * A flat closure carries its own environment, so why clone it? In case
     * someone wants to mutate its fixed slots or add ad-hoc properties. API
     * compatibility suggests we not return funobj and let callers mutate the
     * returned object at will.
     *
     * But it's worse than that: API compatibility according to the test for
     * bug 300079 requires we get "upvars" from parent and its ancestors! So
     * we do that (grudgingly!). The scope chain ancestors are searched as if
     * they were activations, respecting the skip field in each upvar's cookie
     * but looking up the property by name instead of frame slot.
     */</comment>
    <if>if <condition>(<expr><call><name>FUN_FLAT_CLOSURE</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>funobj</name>-&gt;<name>dslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>js_EnsureReservedSlots</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>,
                                    <argument><expr><call><name><name>fun</name>-&gt;<name>countInterpretedReservedSlots</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>JSUpvarArray</name> *</type><name>uva</name> <init>= <expr><call><name><name>fun</name>-&gt;<name>u</name>.<name>i</name>.<name>script</name>-&gt;<name>upvars</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>uva</name>-&gt;<name>length</name></name> &lt;= <call><name>size_t</name><argument_list>(<argument><expr><name><name>clone</name>-&gt;<name>dslots</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>void</name> *</type><name>mark</name> <init>= <expr><call><name>JS_ARENA_MARK</name><argument_list>(<argument><expr>&amp;<name><name>cx</name>-&gt;<name>tempPool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>jsuword</name> *</type><name>names</name> <init>= <expr><call><name>js_GetLocalNameArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr>&amp;<name><name>cx</name>-&gt;<name>tempPool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>names</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>

        <decl_stmt><decl><type><name>uint32</name></type> <name>i</name> <init>= <expr>0</expr></init>, <name>n</name> <init>= <expr><name><name>uva</name>-&gt;<name>length</name></name></expr></init></decl>;</decl_stmt>
        <for>for (<init>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name> <init>= <expr><name>parent</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><call><name>UPVAR_FRAME_SKIP</name><argument_list>(<argument><expr><name><name>uva</name>-&gt;<name>vector</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr>--<name>skip</name> &gt; 0</expr>)</condition> <block>{
                <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                         <argument><expr><name>JSMSG_BAD_CLONE_FUNOBJ_SCOPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto>goto <name>break2</name>;</goto>
                }</block></then></if>
                <expr_stmt><expr><name>obj</name> = <call><name><name>obj</name>-&gt;<name>getParent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></while>

            <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name> <init>= <expr><call><name>JS_LOCAL_NAME_TO_ATOM</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>getProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name><name>clone</name>-&gt;<name>dslots</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <break>break;</break></then></if>
        }</block></for>

      <label><name>break2</name>:</label>
        <expr_stmt><expr><call><name>JS_ARENA_RELEASE</name><argument_list>(<argument><expr>&amp;<name><name>cx</name>-&gt;<name>tempPool</name></name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>i</name> &lt; <name>n</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
    }</block></then></if>

    <return>return <expr><name>clone</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_GetFunctionObject</name><argument_list>(<argument>JSFunction *fun</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>FUN_OBJECT</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>const char *</argument>)</argument_list></macro>
<macro><name>JS_GetFunctionName</name><argument_list>(<argument>JSFunction *fun</argument>)</argument_list></macro>
<block>{
    <return>return <expr><name><name>fun</name>-&gt;<name>atom</name></name>
           ? <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name><name>fun</name>-&gt;<name>atom</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
           : <name>js_anonymous_str</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro>
<macro><name>JS_GetFunctionId</name><argument_list>(<argument>JSFunction *fun</argument>)</argument_list></macro>
<block>{
    <return>return <expr><name><name>fun</name>-&gt;<name>atom</name></name> ? <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name><name>fun</name>-&gt;<name>atom</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>uintN</argument>)</argument_list></macro>
<macro><name>JS_GetFunctionFlags</name><argument_list>(<argument>JSFunction *fun</argument>)</argument_list></macro>
<block>{
    <return>return <expr><name><name>fun</name>-&gt;<name>flags</name></name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>uint16</argument>)</argument_list></macro>
<macro><name>JS_GetFunctionArity</name><argument_list>(<argument>JSFunction *fun</argument>)</argument_list></macro>
<block>{
    <return>return <expr><name><name>fun</name>-&gt;<name>nargs</name></name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ObjectIsFunction</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> == &amp;<name>js_FunctionClass</name></expr>;</return>
}</block>

<function><type><name>JS_BEGIN_EXTERN_C</name>
<specifier>static</specifier> <name>JSBool</name></type>
<name>js_generic_fast_native_method_dispatcher</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>fsv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSFunctionSpec</name> *</type><name>fs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>tmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSFastNative</name></type> <name>native</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>JS_GetReservedSlot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>fsv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>fs</name> = (<name>JSFunctionSpec</name> *) <call><name>JSVAL_TO_PRIVATE</name><argument_list>(<argument><expr><name>fsv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>(~<name><name>fs</name>-&gt;<name>flags</name></name> &amp; (<name>JSFUN_FAST_NATIVE</name> | <name>JSFUN_GENERIC_NATIVE</name>)) == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * We know that vp[2] is valid because JS_DefineFunctions, which is our
     * only (indirect) referrer, defined us as requiring at least one argument
     * (notice how it passes fs-&gt;nargs + 1 as the next-to-last argument to
     * JS_DefineFunction).
     */</comment>
    <if>if <condition>(<expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name><name>vp</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/*
         * Make sure that this is an object or null, as required by the generic
         * functions.
         */</comment>
        <if>if <condition>(<expr>!<call><name>js_ValueToObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>vp</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>vp</name><index>[<expr>2</expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/*
     * Copy all actual (argc) arguments down over our |this| parameter, vp[1],
     * which is almost always the class constructor object, e.g. Array.  Then
     * call the corresponding prototype native method with our first argument
     * passed as |this|.
     */</comment>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>vp</name> + 1</expr></argument>, <argument><expr><name>vp</name> + 2</expr></argument>, <argument><expr><name>argc</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>jsval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Follow Function.prototype.apply and .call by using the global object as
     * the 'this' param if no args.
     */</comment>
    <if>if <condition>(<expr>!<call><name>js_ComputeThis</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>, <argument><expr><name>vp</name> + 2</expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <comment type="block">/*
     * Protect against argc underflowing. By calling js_ComputeThis, we made
     * it as if the static was called with one parameter, the explicit |this|
     * object.
     */</comment>
    <if>if <condition>(<expr><name>argc</name> != 0</expr>)</condition><then> <block>{
        <comment type="block">/* Clear the last parameter in case too few arguments were passed. */</comment>
        <expr_stmt><expr><name><name>vp</name><index>[<expr>2 + --<name>argc</name></expr>]</index></name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>native</name> =
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_TRACER</name></cpp:ifdef>
             (<name><name>fs</name>-&gt;<name>flags</name></name> &amp; <name>JSFUN_TRCINFO</name>)
             ? <call><name>JS_FUNC_TO_DATA_PTR</name><argument_list>(<argument><expr><name>JSNativeTraceInfo</name> *</expr></argument>, <argument><expr><name><name>fs</name>-&gt;<name>call</name></name></expr></argument>)</argument_list></call>-&gt;<name>native</name>
             :
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
               (<name>JSFastNative</name>) <name><name>fs</name>-&gt;<name>call</name></name></expr>;</expr_stmt>
    <return>return <expr><call><name>native</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>js_generic_native_method_dispatcher</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>,
                                    <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>fsv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSFunctionSpec</name> *</type><name>fs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>tmp</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>JS_GetReservedSlot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>-2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>fsv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>fs</name> = (<name>JSFunctionSpec</name> *) <call><name>JSVAL_TO_PRIVATE</name><argument_list>(<argument><expr><name>fsv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>(<name><name>fs</name>-&gt;<name>flags</name></name> &amp; (<name>JSFUN_FAST_NATIVE</name> | <name>JSFUN_GENERIC_NATIVE</name>)) ==
              <name>JSFUN_GENERIC_NATIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * We know that argv[0] is valid because JS_DefineFunctions, which is our
     * only (indirect) referrer, defined us as requiring at least one argument
     * (notice how it passes fs-&gt;nargs + 1 as the next-to-last argument to
     * JS_DefineFunction).
     */</comment>
    <if>if <condition>(<expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/*
         * Make sure that this is an object or null, as required by the generic
         * functions.
         */</comment>
        <if>if <condition>(<expr>!<call><name>js_ValueToObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/*
     * Copy all actual (argc) arguments down over our |this| parameter,
     * argv[-1], which is almost always the class constructor object, e.g.
     * Array.  Then call the corresponding prototype native method with our
     * first argument passed as |this|.
     */</comment>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>argv</name> - 1</expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>jsval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Follow Function.prototype.apply and .call by using the global object as
     * the 'this' param if no args.
     */</comment>
    <if>if <condition>(<expr>!<call><name>js_ComputeThis</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>js_GetTopStackFrame</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call>-&gt;<name>thisv</name> = <name><name>argv</name><index>[<expr>-1</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>fp</name>-&gt;<name>argv</name></name> == <name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Protect against argc underflowing. By calling js_ComputeThis, we made
     * it as if the static was called with one parameter, the explicit |this|
     * object.
     */</comment>
    <if>if <condition>(<expr><name>argc</name> != 0</expr>)</condition><then> <block>{
        <comment type="block">/* Clear the last parameter in case too few arguments were passed. */</comment>
        <expr_stmt><expr><name><name>argv</name><index>[<expr>--<name>argc</name></expr>]</index></name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><call><name><name>fs</name>-&gt;<name>call</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>JS_END_EXTERN_C</name></type>

<name>JS_PUBLIC_API</name><argument_list>(<argument><expr><name>JSBool</name></expr></argument>)</argument_list>
<name>JS_DefineFunctions</name><argument_list>(<argument><expr><name>JSContext</name> *<name>cx</name></expr></argument>, <argument><expr><name>JSObject</name> *<name>obj</name></expr></argument>, <argument><expr><name>JSFunctionSpec</name> *<name>fs</name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><name>uintN</name> <name>flags</name></expr></argument>;
    <argument><expr><name>JSObject</name> *<name>ctor</name></expr></argument>;
    <argument><expr><name>JSFunction</name> *<name>fun</name></expr></argument>;

    <argument><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>ctor</name> = <name>NULL</name></expr></argument>;
    for <argument><expr>(; <name><name>fs</name>-&gt;<name>name</name></name>; <name>fs</name>++) <block>{
        <expr><name>flags</name> = <name><name>fs</name>-&gt;<name>flags</name></name></expr>;

        <comment type="block">/*
         * Define a generic arity N+1 static method for the arity N prototype
         * method if flags contains JSFUN_GENERIC_NATIVE.
         */</comment>
        <if>if <condition>(<expr><name>flags</name> &amp; <name>JSFUN_GENERIC_NATIVE</name></expr>)</condition><then> <expr_stmt><expr><block>{
            <if>if <condition>(<expr>!<name>ctor</name></expr>)</condition><then> <expr_stmt><expr><block>{
                <expr><name>ctor</name> = <call><name>JS_GetConstructor</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt></then></if>
                <if>if <condition>(<expr>!<name>ctor</name></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            }</block>

            <name>flags</name> &amp;= ~<name>JSFUN_GENERIC_NATIVE</name></expr>;</expr_stmt></then></if>
            <name>fun</name> = <call><name>JS_DefineFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ctor</name></expr></argument>, <argument><expr><name><name>fs</name>-&gt;<name>name</name></name></expr></argument>,
                                    <argument><expr>(<name>flags</name> &amp; <name>JSFUN_FAST_NATIVE</name>)
                                    ? (<name>JSNative</name>)
                                      <name>js_generic_fast_native_method_dispatcher</name>
                                    : <name>js_generic_native_method_dispatcher</name></expr></argument>,
                                    <argument><expr><name><name>fs</name>-&gt;<name>nargs</name></name> + 1</expr></argument>,
                                    <argument><expr><name>flags</name> &amp; ~<name>JSFUN_TRCINFO</name></expr></argument>)</argument_list></call></block></expr></argument>;
            if <argument><expr>(!<name>fun</name>)</expr></argument>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></argument_list></decl></decl_stmt>
            <expr_stmt><expr><name><name>fun</name>-&gt;<name>u</name>.<name>n</name>.<name>extra</name></name> = (<name>uint16</name>)<name><name>fs</name>-&gt;<name>extra</name></name></expr>;</expr_stmt>

            <comment type="block">/*
             * As jsapi.h notes, fs must point to storage that lives as long
             * as fun-&gt;object lives.
             */</comment>
            <if>if <condition>(<expr>!<call><name>JS_SetReservedSlot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>FUN_OBJECT</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>PRIVATE_TO_JSVAL</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        }

        JS_ASSERT<expr_stmt><expr>(!(<name>flags</name> &amp; <name>JSFUN_FAST_NATIVE</name>) ||
                  <call>(<name>uint16</name>)<argument_list>(<argument><expr><name><name>fs</name>-&gt;<name>extra</name></name> &gt;&gt; 16</expr></argument>)</argument_list></call> &lt;= <name><name>fs</name>-&gt;<name>nargs</name></name>)</expr>;</expr_stmt>
        <expr_stmt><expr><name>fun</name> = <call><name>JS_DefineFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>fs</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>fs</name>-&gt;<name>call</name></name></expr></argument>, <argument><expr><name><name>fs</name>-&gt;<name>nargs</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>fun</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>fun</name>-&gt;<name>u</name>.<name>n</name>.<name>extra</name></name> = (<name>uint16</name>)<name><name>fs</name>-&gt;<name>extra</name></name></expr>;</expr_stmt>
    }
    return <expr_stmt><expr><name>JS_TRUE</name></expr>;</expr_stmt>
}

JS_PUBLIC_API<expr_stmt><expr>(<name>JSFunction</name> *)
<macro><name>JS_DefineFunction</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *name</argument>, <argument>JSNative call</argument>,
                  <argument>uintN nargs</argument>, <argument>uintN attrs</argument>)</argument_list></macro>
<block>{
    <expr><name>JSAtom</name> *<name>atom</name></expr>;

    <expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>atom</name> = <call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if></block></expr></expr_stmt>
    <return>return <expr><call><name>js_DefineFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</return>
}

JS_PUBLIC_API<expr_stmt><expr>(<name>JSFunction</name> *)
<macro><name>JS_DefineUCFunction</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                    <argument>const jschar *name</argument>, <argument>size_t namelen</argument>, <argument>JSNative call</argument>,
                    <argument>uintN nargs</argument>, <argument>uintN attrs</argument>)</argument_list></macro>
<block>{
    <expr><name>JSAtom</name> *<name>atom</name></expr>;

    <expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>atom</name> = <call><name>js_AtomizeChars</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>AUTO_NAMELEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if></block></expr></expr_stmt>
    <return>return <expr><call><name>js_DefineFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><name>call</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</return>
}

JS_PUBLIC_API<expr_stmt><expr>(<name>JSScript</name> *)
<macro><name>JS_CompileScript</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                 <argument>const char *bytes</argument>, <argument>size_t length</argument>,
                 <argument>const char *filename</argument>, <argument>uintN lineno</argument>)</argument_list></macro>
<block>{
    <expr><name>jschar</name> *<name>chars</name></expr>;
    <expr><name>JSScript</name> *<name>script</name></expr>;

    <expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>chars</name> = <call><name>js_InflateString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr>;
    <if>if <condition>(<expr>!<name>chars</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <name>script</name> = <call><name>JS_CompileUCScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>free</name></name><argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>script</name></expr>;</return>
}

JS_PUBLIC_API<expr_stmt><expr>(<name>JSScript</name> *)
<macro><name>JS_CompileScriptForPrincipals</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                              <argument>JSPrincipals *principals</argument>,
                              <argument>const char *bytes</argument>, <argument>size_t length</argument>,
                              <argument>const char *filename</argument>, <argument>uintN lineno</argument>)</argument_list></macro>
<block>{
    <expr><name>jschar</name> *<name>chars</name></expr>;
    <expr><name>JSScript</name> *<name>script</name></expr>;

    <expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>chars</name> = <call><name>js_InflateString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr>;
    <if>if <condition>(<expr>!<name>chars</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <name>script</name> = <call><name>JS_CompileUCScriptForPrincipals</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>principals</name></expr></argument>,
                                             <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>free</name></name><argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>script</name></expr>;</return>
}

JS_PUBLIC_API<expr_stmt><expr>(<name>JSScript</name> *)
<macro><name>JS_CompileUCScript</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                   <argument>const jschar *chars</argument>, <argument>size_t length</argument>,
                   <argument>const char *filename</argument>, <argument>uintN lineno</argument>)</argument_list></macro>
<block>{
    <expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;
    <return>return <expr><call><name>JS_CompileUCScriptForPrincipals</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,
                                           <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAST_FRAME_EXCEPTION_CHECK</name><parameter_list>(<param><type><name>cx</name></type></param>,<param><type><name>result</name></type></param>)</parameter_list></cpp:macro>                                 \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        if (!(result) &amp;&amp; !((cx)-&gt;options &amp; JSOPTION_DONT_REPORT_UNCAUGHT))    \
            js_ReportUncaughtException(cx);                                   \
    JS_END_MACRO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAST_FRAME_CHECKS</name><parameter_list>(<param><type><name>cx</name></type></param>,<param><type><name>result</name></type></param>)</parameter_list></cpp:macro>                                          \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        if (!JS_IsRunning(cx)) {                                              \
            (cx)-&gt;weakRoots.lastInternalResult = JSVAL_NULL;                  \
            LAST_FRAME_EXCEPTION_CHECK(cx, result);                           \
        }                                                                     \
    JS_END_MACRO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_OPTIONS_TO_TCFLAGS</name><parameter_list>(<param><type><name>cx</name></type></param>)</parameter_list></cpp:macro>                                             \
    <cpp:value>((((cx)-&gt;options &amp; JSOPTION_COMPILE_N_GO) ? TCF_COMPILE_N_GO : 0) |       \
     (((cx)-&gt;options &amp; JSOPTION_NO_SCRIPT_RVAL) ? TCF_NO_SCRIPT_RVAL : 0))</cpp:value></cpp:define>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSScript *</argument>)</argument_list></macro>
<macro><name>JS_CompileUCScriptForPrincipals</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                                <argument>JSPrincipals *principals</argument>,
                                <argument>const jschar *chars</argument>, <argument>size_t length</argument>,
                                <argument>const char *filename</argument>, <argument>uintN lineno</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>uint32</name></type> <name>tcflags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScript</name> *</type><name>script</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tcflags</name> = <call><name>JS_OPTIONS_TO_TCFLAGS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call> | <name>TCF_NEED_MUTABLE_SCRIPT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>script</name> = <call><name><name>JSCompiler</name>::<name>compileScript</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>principals</name></expr></argument>, <argument><expr><name>tcflags</name></expr></argument>,
                                       <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LAST_FRAME_CHECKS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>script</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_BufferIsCompilableUnit</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                          <argument>const char *bytes</argument>, <argument>size_t length</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>jschar</name> *</type><name>chars</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSExceptionState</name> *</type><name>exnState</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSErrorReporter</name></type> <name>older</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>chars</name> = <call><name>js_InflateString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>chars</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <comment type="block">/*
     * Return true on any out-of-memory error, so our caller doesn't try to
     * collect more buffered source.
     */</comment>
    <expr_stmt><expr><name>result</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>exnState</name> = <call><name>JS_SaveExceptionState</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{
        <function_decl><type><name>JSCompiler</name></type> <name>jsc</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>)</parameter_list>;</function_decl>
        <if>if <condition>(<expr><call><name><name>jsc</name>.<name>init</name></name><argument_list>(<argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>older</name> = <call><name>JS_SetErrorReporter</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name><name>jsc</name>.<name>parse</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> &amp;&amp;
                (<name><name>jsc</name>.<name>tokenStream</name>.<name>flags</name></name> &amp; <name>TSF_UNEXPECTED_EOF</name>)</expr>)</condition><then> <block>{
                <comment type="block">/*
                 * We ran into an error. If it was because we ran out of
                 * source, we return false so our caller knows to try to
                 * collect more buffered source.
                 */</comment>
                <expr_stmt><expr><name>result</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>JS_SetErrorReporter</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>older</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
    <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>free</name></name><argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_RestoreExceptionState</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>exnState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSScript *</argument>)</argument_list></macro>
<macro><name>JS_CompileFile</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *filename</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>FILE</name> *</type><name>fp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>tcflags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScript</name> *</type><name>script</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>filename</name> || <call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>fp</name> = <name>stdin</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>fp</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr>"r"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>fp</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSMSG_CANT_OPEN</name></expr></argument>,
                                 <argument><expr><name>filename</name></expr></argument>, <argument><expr>"No such file or directory"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
    }</block></else></if>

    <expr_stmt><expr><name>tcflags</name> = <call><name>JS_OPTIONS_TO_TCFLAGS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>script</name> = <call><name><name>JSCompiler</name>::<name>compileScript</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tcflags</name></expr></argument>,
                                       <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>fp</name> != <name>stdin</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>LAST_FRAME_CHECKS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>script</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSScript *</argument>)</argument_list></macro>
<macro><name>JS_CompileFileHandle</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *filename</argument>,
                     <argument>FILE *file</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>JS_CompileFileHandleForPrincipals</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSScript *</argument>)</argument_list></macro>
<macro><name>JS_CompileFileHandleForPrincipals</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                                  <argument>const char *filename</argument>, <argument>FILE *file</argument>,
                                  <argument>JSPrincipals *principals</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>uint32</name></type> <name>tcflags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScript</name> *</type><name>script</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tcflags</name> = <call><name>JS_OPTIONS_TO_TCFLAGS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>script</name> = <call><name><name>JSCompiler</name>::<name>compileScript</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>principals</name></expr></argument>, <argument><expr><name>tcflags</name></expr></argument>,
                                       <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LAST_FRAME_CHECKS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>script</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_NewScriptObject</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSScript *script</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>script</name></expr>)</condition><then>
        <return>return <expr><call><name>js_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>js_ScriptClass</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name><name>script</name>-&gt;<name>u</name>.<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block>{
        <function_decl><type><name>AutoScriptRooter</name></type> <name>root</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>script</name></type></decl></param>)</parameter_list>;</function_decl>

        <expr_stmt><expr><name>obj</name> = <call><name>js_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>js_ScriptClass</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>obj</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>obj</name>-&gt;<name>setPrivate</name></name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>script</name>-&gt;<name>u</name>.<name>object</name></name> = <name>obj</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CHECK_SCRIPT_OWNER</name></cpp:ifdef>
            <expr_stmt><expr><name><name>script</name>-&gt;<name>owner</name></name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        }</block></then></if>
    }</block>

    <return>return <expr><name>obj</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_GetScriptObject</name><argument_list>(<argument>JSScript *script</argument>)</argument_list></macro>
<block>{
    <return>return <expr><name><name>script</name>-&gt;<name>u</name>.<name>object</name></name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_DestroyScript</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSScript *script</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_DestroyScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSFunction *</argument>)</argument_list></macro>
<macro><name>JS_CompileFunction</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *name</argument>,
                   <argument>uintN nargs</argument>, <argument>const char **argnames</argument>,
                   <argument>const char *bytes</argument>, <argument>size_t length</argument>,
                   <argument>const char *filename</argument>, <argument>uintN lineno</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>jschar</name> *</type><name>chars</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>chars</name> = <call><name>js_InflateString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>chars</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name>fun</name> = <call><name>JS_CompileUCFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>argnames</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,
                               <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>free</name></name><argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>fun</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSFunction *</argument>)</argument_list></macro>
<macro><name>JS_CompileFunctionForPrincipals</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                                <argument>JSPrincipals *principals</argument>, <argument>const char *name</argument>,
                                <argument>uintN nargs</argument>, <argument>const char **argnames</argument>,
                                <argument>const char *bytes</argument>, <argument>size_t length</argument>,
                                <argument>const char *filename</argument>, <argument>uintN lineno</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>jschar</name> *</type><name>chars</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>chars</name> = <call><name>js_InflateString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>chars</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name>fun</name> = <call><name>JS_CompileUCFunctionForPrincipals</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>principals</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                                            <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>argnames</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,
                                            <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>free</name></name><argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>fun</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSFunction *</argument>)</argument_list></macro>
<macro><name>JS_CompileUCFunction</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *name</argument>,
                     <argument>uintN nargs</argument>, <argument>const char **argnames</argument>,
                     <argument>const jschar *chars</argument>, <argument>size_t length</argument>,
                     <argument>const char *filename</argument>, <argument>uintN lineno</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>JS_CompileUCFunctionForPrincipals</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                                             <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>argnames</name></expr></argument>,
                                             <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,
                                             <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSFunction *</argument>)</argument_list></macro>
<macro><name>JS_CompileUCFunctionForPrincipals</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                                  <argument>JSPrincipals *principals</argument>, <argument>const char *name</argument>,
                                  <argument>uintN nargs</argument>, <argument>const char **argnames</argument>,
                                  <argument>const jschar *chars</argument>, <argument>size_t length</argument>,
                                  <argument>const char *filename</argument>, <argument>uintN lineno</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>funAtom</name></decl>, *<decl><type ref="prev"/><name>argAtom</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uintN</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>name</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>funAtom</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>funAtom</name> = <call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>funAtom</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>fun</name> = <name>NULL</name></expr>;</expr_stmt>
            <goto>goto <name>out2</name>;</goto>
        }</block></then></if>
    }</block></else></if>
    <expr_stmt><expr><name>fun</name> = <call><name>js_NewFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>JSFUN_INTERPRETED</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>funAtom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>fun</name></expr>)</condition><then>
        <goto>goto <name>out2</name>;</goto></then></if>

    <block>{
        <decl_stmt><decl><type><name>AutoValueRooter</name></type> <name>tvr</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>FUN_OBJECT</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>MUST_FLOW_THROUGH</name><argument_list>(<argument><expr>"out"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nargs</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>argAtom</name> = <call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>argAtom</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>fun</name> = <name>NULL</name></expr>;</expr_stmt>
                <goto>goto <name>out</name>;</goto>
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name>js_AddLocal</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr><name>argAtom</name></expr></argument>, <argument><expr><name>JSLOCAL_ARG</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>fun</name> = <name>NULL</name></expr>;</expr_stmt>
                <goto>goto <name>out</name>;</goto>
            }</block></then></if>
        }</block></for>

        <if>if <condition>(<expr>!<call><name><name>JSCompiler</name>::<name>compileFunctionBody</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr><name>principals</name></expr></argument>,
                                             <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>fun</name> = <name>NULL</name></expr>;</expr_stmt>
            <goto>goto <name>out</name>;</goto>
        }</block></then></if>

        <if>if <condition>(<expr><name>obj</name> &amp;&amp; <name>funAtom</name> &amp;&amp;
            !<call><name><name>obj</name>-&gt;<name>defineProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>funAtom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><call><name>FUN_OBJECT</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSPROP_ENUMERATE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>fun</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_SCOPE_DEPTH_METER</name></cpp:ifdef>
        <if>if <condition>(<expr><name>fun</name> &amp;&amp; <name>obj</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>JSObject</name> *</type><name>pobj</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uintN</name></type> <name>depth</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>

            <while>while <condition>(<expr>(<name>pobj</name> = <call><name><name>pobj</name>-&gt;<name>getParent</name></name><argument_list>()</argument_list></call>) != <name>NULL</name></expr>)</condition>
                <expr_stmt><expr>++<name>depth</name></expr>;</expr_stmt></while>
            <expr_stmt><expr><call><name>JS_BASIC_STATS_ACCUM</name><argument_list>(<argument><expr>&amp;<name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>hostenvScopeDepthStats</name></name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <label><name>out</name>:</label>
        <expr_stmt><expr><name><name>cx</name>-&gt;<name>weakRoots</name>.<name>finalizableNewborns</name><index>[<expr><name>FINALIZE_FUNCTION</name></expr>]</index></name> = <name>fun</name></expr>;</expr_stmt>
    }</block>

  <label><name>out2</name>:</label>
    <expr_stmt><expr><call><name>LAST_FRAME_CHECKS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>fun</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro>
<macro><name>JS_DecompileScript</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSScript *script</argument>, <argument>const char *name</argument>,
                   <argument>uintN indent</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSPrinter</name> *</type><name>jp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>jp</name> = <call><name>js_NewPrinter</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                       <argument><expr><name>indent</name> &amp; ~<name>JS_DONT_PRETTY_PRINT</name></expr></argument>,
                       <argument><expr>!(<name>indent</name> &amp; <name>JS_DONT_PRETTY_PRINT</name>)</expr></argument>,
                       <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>jp</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr><call><name>js_DecompileScript</name><argument_list>(<argument><expr><name>jp</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>str</name> = <call><name>js_GetPrinterOutput</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><name>str</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
    <expr_stmt><expr><call><name>js_DestroyPrinter</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>str</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro>
<macro><name>JS_DecompileFunction</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSFunction *fun</argument>, <argument>uintN indent</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_DecompileToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"JS_DecompileFunction"</expr></argument>, <argument><expr><name>fun</name></expr></argument>,
                                <argument><expr><name>indent</name> &amp; ~<name>JS_DONT_PRETTY_PRINT</name></expr></argument>,
                                <argument><expr>!(<name>indent</name> &amp; <name>JS_DONT_PRETTY_PRINT</name>)</expr></argument>,
                                <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><name>js_DecompileFunction</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro>
<macro><name>JS_DecompileFunctionBody</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSFunction *fun</argument>, <argument>uintN indent</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_DecompileToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"JS_DecompileFunctionBody"</expr></argument>, <argument><expr><name>fun</name></expr></argument>,
                                <argument><expr><name>indent</name> &amp; ~<name>JS_DONT_PRETTY_PRINT</name></expr></argument>,
                                <argument><expr>!(<name>indent</name> &amp; <name>JS_DONT_PRETTY_PRINT</name>)</expr></argument>,
                                <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><name>js_DecompileFunctionBody</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ExecuteScript</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>JSScript *script</argument>, <argument>jsval *rval</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>js_Execute</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LAST_FRAME_CHECKS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<comment type="block">/* Ancient uintN nbytes is part of API/ABI, so use size_t length local. */</comment>
<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_EvaluateScript</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                  <argument>const char *bytes</argument>, <argument>uintN nbytes</argument>,
                  <argument>const char *filename</argument>, <argument>uintN lineno</argument>,
                  <argument>jsval *rval</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><name>nbytes</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jschar</name> *</type><name>chars</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>chars</name> = <call><name>js_InflateString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>chars</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>ok</name> = <call><name>JS_EvaluateUCScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>free</name></name><argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<comment type="block">/* Ancient uintN nbytes is part of API/ABI, so use size_t length local. */</comment>
<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_EvaluateScriptForPrincipals</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                               <argument>JSPrincipals *principals</argument>,
                               <argument>const char *bytes</argument>, <argument>uintN nbytes</argument>,
                               <argument>const char *filename</argument>, <argument>uintN lineno</argument>,
                               <argument>jsval *rval</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><name>nbytes</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jschar</name> *</type><name>chars</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>chars</name> = <call><name>js_InflateString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>chars</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>ok</name> = <call><name>JS_EvaluateUCScriptForPrincipals</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>principals</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,
                                          <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>free</name></name><argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_EvaluateUCScript</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                    <argument>const jschar *chars</argument>, <argument>uintN length</argument>,
                    <argument>const char *filename</argument>, <argument>uintN lineno</argument>,
                    <argument>jsval *rval</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>JS_EvaluateUCScriptForPrincipals</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,
                                            <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_EvaluateUCScriptForPrincipals</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>,
                                 <argument>JSPrincipals *principals</argument>,
                                 <argument>const jschar *chars</argument>, <argument>uintN length</argument>,
                                 <argument>const char *filename</argument>, <argument>uintN lineno</argument>,
                                 <argument>jsval *rval</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSScript</name> *</type><name>script</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>script</name> = <call><name><name>JSCompiler</name>::<name>compileScript</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>principals</name></expr></argument>,
                                       <argument><expr>!<name>rval</name>
                                       ? <name>TCF_COMPILE_N_GO</name> | <name>TCF_NO_SCRIPT_RVAL</name>
                                       : <name>TCF_COMPILE_N_GO</name></expr></argument>,
                                       <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>script</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LAST_FRAME_CHECKS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>ok</name> = <call><name>js_Execute</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LAST_FRAME_CHECKS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_DestroyScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_CallFunction</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>JSFunction *fun</argument>, <argument>uintN argc</argument>,
                <argument>jsval *argv</argument>, <argument>jsval *rval</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>js_InternalCall</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><call><name>FUN_OBJECT</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>,
                         <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LAST_FRAME_CHECKS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_CallFunctionName</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>const char *name</argument>, <argument>uintN argc</argument>,
                    <argument>jsval *argv</argument>, <argument>jsval *rval</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>AutoValueRooter</name></type> <name>tvr</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name> <init>= <expr><call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name> <init>= <expr><name>atom</name> &amp;&amp;
                <call><name>js_GetMethod</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>JSGET_NO_METHOD_BARRIER</name></expr></argument>, <argument><expr><call><name><name>tvr</name>.<name>addr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp;
                <call><name>js_InternalCall</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name><name>tvr</name>.<name>value</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LAST_FRAME_CHECKS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_CallFunctionValue</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsval fval</argument>, <argument>uintN argc</argument>,
                     <argument>jsval *argv</argument>, <argument>jsval *rval</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>js_InternalCall</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fval</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LAST_FRAME_CHECKS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_New</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *ctor</argument>, <argument>uintN argc</argument>, <argument>jsval *argv</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// This is not a simple variation of JS_CallFunctionValue because JSOP_NEW</comment>
    <comment type="line">// is not a simple variation of JSOP_CALL. We have to determine what class</comment>
    <comment type="line">// of object to create, create it, and clamp the return value to an object,</comment>
    <comment type="line">// among other details. js_InvokeConstructor does the hard work.</comment>
    <decl_stmt><decl><type><name>void</name> *</type><name>mark</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name> *</type><name>vp</name> <init>= <expr><call><name>js_AllocStack</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>2 + <name>argc</name></expr></argument>, <argument><expr>&amp;<name>mark</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>vp</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>vp</name><index>[<expr>0</expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>ctor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vp</name><index>[<expr>1</expr>]</index></name> = <name>JSVAL_NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vp</name> + 2</expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>jsval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name> <init>= <expr><call><name>js_InvokeConstructor</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name> <init>= <expr><name>ok</name> ? <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name><name>vp</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>js_FreeStack</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LAST_FRAME_CHECKS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>obj</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSOperationCallback</argument>)</argument_list></macro>
<macro><name>JS_SetOperationCallback</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSOperationCallback callback</argument>)</argument_list></macro>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>CURRENT_THREAD_IS_ME</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>thread</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>JSOperationCallback</name></type> <name>old</name> <init>= <expr><name><name>cx</name>-&gt;<name>operationCallback</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>operationCallback</name></name> = <name>callback</name></expr>;</expr_stmt>
    <return>return <expr><name>old</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSOperationCallback</argument>)</argument_list></macro>
<macro><name>JS_GetOperationCallback</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <return>return <expr><name><name>cx</name>-&gt;<name>operationCallback</name></name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_TriggerOperationCallback</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <comment type="block">/*
     * Use JS_ATOMIC_SET in the hope that it will make sure the write
     * will become immediately visible to other processors polling
     * cx-&gt;operationCallbackFlag. Note that we only care about
     * visibility here, not read/write ordering.
     */</comment>
    <expr_stmt><expr><call><name>JS_ATOMIC_SET</name><argument_list>(<argument><expr>&amp;<name><name>cx</name>-&gt;<name>operationCallbackFlag</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_TriggerAllOperationCallbacks</name><argument_list>(<argument>JSRuntime *rt</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>js_TriggerAllOperationCallbacks</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_IsRunning</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <comment type="block">/*
     * The use of cx-&gt;fp below is safe. Rationale: Here we don't care if the
     * interpreter state is stale. We just want to know if there *is* any
     * interpreter state.
     */</comment>
    <expr_stmt><expr><call><name>VOUCH_DOES_NOT_REQUIRE_STACK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_TRACER</name></cpp:ifdef>
    <expr_stmt><expr><call><name>JS_ASSERT_IF</name><argument_list>(<argument><expr><call><name>JS_TRACE_MONITOR</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call>.<name>tracecx</name> == <name>cx</name></expr></argument>, <argument><expr><name><name>cx</name>-&gt;<name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name><name>cx</name>-&gt;<name>fp</name></name> != <name>NULL</name></expr>;</return>
}</block>



<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_IsConstructing</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name><name>cx</name>-&gt;<name>isConstructing</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSStackFrame *</argument>)</argument_list></macro>
<macro><name>JS_SaveFrameChain</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSStackFrame</name> *</type><name>fp</name> <init>= <expr><call><name>js_GetTopStackFrame</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>fp</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>saveActiveCallStack</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>fp</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_RestoreFrameChain</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSStackFrame *fp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT_NOT_ON_TRACE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name><name>cx</name>-&gt;<name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>fp</name></expr>)</condition><then>
        <return>return;</return></then></if>
    <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>restoreCallStack</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block>

<comment type="block" format="doxygen">/************************************************************************/</comment>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro>
<macro><name>JS_NewString</name><argument_list>(<argument>JSContext *cx</argument>, <argument>char *bytes</argument>, <argument>size_t nbytes</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><name>nbytes</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jschar</name> *</type><name>chars</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Make a UTF-16 vector from the 8-bit char codes in bytes. */</comment>
    <expr_stmt><expr><name>chars</name> = <call><name>js_InflateString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>chars</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <comment type="block">/* Free chars (but not bytes, which caller frees on error) if we fail. */</comment>
    <expr_stmt><expr><name>str</name> = <call><name>js_NewString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>free</name></name><argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Hand off bytes to the deflated string cache, if possible. */</comment>
    <if>if <condition>(<expr>!<call><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>deflatedStringCache</name>-&gt;<name>setBytes</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>free</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>str</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro>
<macro><name>JS_NewStringCopyN</name><argument_list>(<argument>JSContext *cx</argument>, <argument>const char *s</argument>, <argument>size_t n</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>jschar</name> *</type><name>js</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>js</name> = <call><name>js_InflateString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>js</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name>str</name> = <call><name>js_NewString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>free</name></name><argument_list>(<argument><expr><name>js</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>str</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro>
<macro><name>JS_NewStringCopyZ</name><argument_list>(<argument>JSContext *cx</argument>, <argument>const char *s</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jschar</name> *</type><name>js</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>s</name></expr>)</condition><then>
        <return>return <expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr>;</return></then></if>
    <expr_stmt><expr><name>n</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>js</name> = <call><name>js_InflateString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>js</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name>str</name> = <call><name>js_NewString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>free</name></name><argument_list>(<argument><expr><name>js</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>str</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro>
<macro><name>JS_InternString</name><argument_list>(<argument>JSContext *cx</argument>, <argument>const char *s</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>atom</name> = <call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ATOM_INTERNED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro>
<macro><name>JS_NewUCString</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jschar *chars</argument>, <argument>size_t length</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_NewString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro>
<macro><name>JS_NewUCStringCopyN</name><argument_list>(<argument>JSContext *cx</argument>, <argument>const jschar *s</argument>, <argument>size_t n</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_NewStringCopyN</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro>
<macro><name>JS_NewUCStringCopyZ</name><argument_list>(<argument>JSContext *cx</argument>, <argument>const jschar *s</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>s</name></expr>)</condition><then>
        <return>return <expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr>;</return></then></if>
    <return>return <expr><call><name>js_NewStringCopyZ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro>
<macro><name>JS_InternUCStringN</name><argument_list>(<argument>JSContext *cx</argument>, <argument>const jschar *s</argument>, <argument>size_t length</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>atom</name> = <call><name>js_AtomizeChars</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>ATOM_INTERNED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro>
<macro><name>JS_InternUCString</name><argument_list>(<argument>JSContext *cx</argument>, <argument>const jschar *s</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>JS_InternUCStringN</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>js_strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>char *</argument>)</argument_list></macro>
<macro><name>JS_GetStringBytes</name><argument_list>(<argument>JSString *str</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bytes</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>bytes</name> = <call><name>js_GetStringBytes</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>(<name>char</name> *)(<name>bytes</name> ? <name>bytes</name> : "")</expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>jschar *</argument>)</argument_list></macro>
<macro><name>JS_GetStringChars</name><argument_list>(<argument>JSString *str</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jschar</name> *</type><name>s</name></decl>;</decl_stmt>

    <comment type="block">/*
     * API botch (again, shades of JS_GetStringBytes): we have no cx to report
     * out-of-memory when undepending strings, so we replace js_UndependString
     * with explicit malloc call and ignore its errors.
     *
     * If we fail to convert a dependent string into an independent one, our
     * caller will not be guaranteed a \u0000 terminator as a backstop.  This
     * may break some clients who already misbehave on embedded NULs.
     *
     * The gain of dependent strings, which cure quadratic and cubic growth
     * rate bugs in string concatenation, is worth this slight loss in API
     * compatibility.
     */</comment>
    <if>if <condition>(<expr><call><name><name>str</name>-&gt;<name>isDependent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>n</name> = <call><name><name>str</name>-&gt;<name>dependentLength</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> = (<name>n</name> + 1) * <sizeof>sizeof<argument_list>(<argument><expr><name>jschar</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> = (<name>jschar</name> *) <call><name>js_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>s</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>str</name>-&gt;<name>dependentChars</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>n</name> * sizeof *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>s</name><index>[<expr><name>n</name></expr>]</index></name> = 0</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>str</name>-&gt;<name>initFlat</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>s</name> = <call><name><name>str</name>-&gt;<name>dependentChars</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>str</name>-&gt;<name>flatClearMutable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> = <call><name><name>str</name>-&gt;<name>flatChars</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>s</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>size_t</argument>)</argument_list></macro>
<macro><name>JS_GetStringLength</name><argument_list>(<argument>JSString *str</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name><name>str</name>-&gt;<name>length</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>const char *</argument>)</argument_list></macro>
<macro><name>JS_GetStringBytesZ</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSString *str</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>js_GetStringBytes</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>const jschar *</argument>)</argument_list></macro>
<macro><name>JS_GetStringCharsZ</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSString *str</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>js_UndependString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>intN</argument>)</argument_list></macro>
<macro><name>JS_CompareStrings</name><argument_list>(<argument>JSString *str1</argument>, <argument>JSString *str2</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>js_CompareStrings</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro>
<macro><name>JS_NewGrowableString</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jschar *chars</argument>, <argument>size_t length</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name> = <call><name>js_NewString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <return>return <expr><name>str</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name><name>str</name>-&gt;<name>flatSetMutable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>str</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro>
<macro><name>JS_NewDependentString</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSString *str</argument>, <argument>size_t start</argument>,
                      <argument>size_t length</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_NewDependentString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro>
<macro><name>JS_ConcatStrings</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSString *left</argument>, <argument>JSString *right</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_ConcatStrings</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>const jschar *</argument>)</argument_list></macro>
<macro><name>JS_UndependString</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSString *str</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_UndependString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_MakeStringImmutable</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSString *str</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_MakeStringImmutable</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_EncodeCharacters</name><argument_list>(<argument>JSContext *cx</argument>, <argument>const jschar *src</argument>, <argument>size_t srclen</argument>, <argument>char *dst</argument>,
                    <argument>size_t *dstlenp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>dst</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>n</name> = <call><name>js_GetDeflatedStringLength</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>n</name> == (<name>size_t</name>)-1</expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>dstlenp</name> = 0</expr>;</expr_stmt>
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr>*<name>dstlenp</name> = <name>n</name></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><call><name>js_DeflateStringToBuffer</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srclen</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstlenp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_DecodeBytes</name><argument_list>(<argument>JSContext *cx</argument>, <argument>const char *src</argument>, <argument>size_t srclen</argument>, <argument>jschar *dst</argument>,
               <argument>size_t *dstlenp</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>js_InflateStringToBuffer</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srclen</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstlenp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>char *</argument>)</argument_list></macro>
<macro><name>JS_EncodeString</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSString *str</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>js_DeflateString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name><name>str</name>-&gt;<name>chars</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>str</name>-&gt;<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_Stringify</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval *vp</argument>, <argument>JSObject *replacer</argument>, <argument>jsval space</argument>,
             <argument>JSONWriteCallback callback</argument>, <argument>void *data</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>JSCharBuffer</name></type> <name>cb</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>)</parameter_list>;</function_decl>
    <if>if <condition>(<expr>!<call><name>js_Stringify</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>replacer</name></expr></argument>, <argument><expr><name>space</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>
    <return>return <expr><call><name>callback</name><argument_list>(<argument><expr><call><name><name>cb</name>.<name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cb</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_TryJSON</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_TryJSON</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSONParser *</argument>)</argument_list></macro>
<macro><name>JS_BeginJSONParse</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_BeginJSONParse</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ConsumeJSONText</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSONParser *jp</argument>, <argument>const jschar *data</argument>, <argument>uint32 len</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_ConsumeJSONText</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_FinishJSONParse</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSONParser *jp</argument>, <argument>jsval reviver</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_FinishJSONParse</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jp</name></expr></argument>, <argument><expr><name>reviver</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<comment type="block">/*
 * The following determines whether C Strings are to be treated as UTF-8
 * or ISO-8859-1.  For correct operation, it must be set prior to the
 * first call to JS_NewRuntime.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JS_C_STRINGS_ARE_UTF8</name></cpp:ifndef>
<decl_stmt><decl><type><name>JSBool</name></type> <name>js_CStringsAreUTF8</name> <init>= <expr><name>JS_FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_CStringsAreUTF8</name><argument_list>()</argument_list></macro>
<block>{
    <return>return <expr><name>js_CStringsAreUTF8</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_SetCStringsAreUTF8</name><argument_list>()</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name>js_NewRuntimeWasCalled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JS_C_STRINGS_ARE_UTF8</name></cpp:ifndef>
    <expr_stmt><expr><name>js_CStringsAreUTF8</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>

<comment type="block" format="doxygen">/************************************************************************/</comment>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_ReportError</name><argument_list>(<argument>JSContext *cx</argument>, <argument>const char *format</argument>, <argument>...</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_ReportErrorVA</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSREPORT_ERROR</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_ReportErrorNumber</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSErrorCallback errorCallback</argument>,
                     <argument>void *userRef</argument>, <argument>const uintN errorNumber</argument>, <argument>...</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>errorNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_ReportErrorNumberVA</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSREPORT_ERROR</name></expr></argument>, <argument><expr><name>errorCallback</name></expr></argument>, <argument><expr><name>userRef</name></expr></argument>,
                           <argument><expr><name>errorNumber</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_ReportErrorNumberUC</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSErrorCallback errorCallback</argument>,
                     <argument>void *userRef</argument>, <argument>const uintN errorNumber</argument>, <argument>...</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>errorNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_ReportErrorNumberVA</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSREPORT_ERROR</name></expr></argument>, <argument><expr><name>errorCallback</name></expr></argument>, <argument><expr><name>userRef</name></expr></argument>,
                           <argument><expr><name>errorNumber</name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ReportWarning</name><argument_list>(<argument>JSContext *cx</argument>, <argument>const char *format</argument>, <argument>...</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>js_ReportErrorVA</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSREPORT_WARNING</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ReportErrorFlagsAndNumber</name><argument_list>(<argument>JSContext *cx</argument>, <argument>uintN flags</argument>,
                             <argument>JSErrorCallback errorCallback</argument>, <argument>void *userRef</argument>,
                             <argument>const uintN errorNumber</argument>, <argument>...</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>errorNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>js_ReportErrorNumberVA</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>errorCallback</name></expr></argument>, <argument><expr><name>userRef</name></expr></argument>,
                                <argument><expr><name>errorNumber</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ReportErrorFlagsAndNumberUC</name><argument_list>(<argument>JSContext *cx</argument>, <argument>uintN flags</argument>,
                               <argument>JSErrorCallback errorCallback</argument>, <argument>void *userRef</argument>,
                               <argument>const uintN errorNumber</argument>, <argument>...</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>errorNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>js_ReportErrorNumberVA</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>errorCallback</name></expr></argument>, <argument><expr><name>userRef</name></expr></argument>,
                                <argument><expr><name>errorNumber</name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_ReportOutOfMemory</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>js_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_ReportAllocationOverflow</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>js_ReportAllocationOverflow</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSErrorReporter</argument>)</argument_list></macro>
<macro><name>JS_SetErrorReporter</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSErrorReporter er</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSErrorReporter</name></type> <name>older</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>older</name> = <name><name>cx</name>-&gt;<name>errorReporter</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>errorReporter</name></name> = <name>er</name></expr>;</expr_stmt>
    <return>return <expr><name>older</name></expr>;</return>
}</block>

<comment type="block" format="doxygen">/************************************************************************/</comment>

<comment type="block">/*
 * Regular Expressions.
 */</comment>
<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_NewRegExpObject</name><argument_list>(<argument>JSContext *cx</argument>, <argument>char *bytes</argument>, <argument>size_t length</argument>, <argument>uintN flags</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>jschar</name> *</type><name>chars</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>chars</name> = <call><name>js_InflateString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>chars</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name>obj</name> = <call><name>js_NewRegExpObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>free</name></name><argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>obj</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro>
<macro><name>JS_NewUCRegExpObject</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jschar *chars</argument>, <argument>size_t length</argument>, <argument>uintN flags</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_NewRegExpObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_SetRegExpInput</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSString *input</argument>, <argument>JSBool multiline</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSRegExpStatics</name> *</type><name>res</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* No locking required, cx is thread-private and input must be live. */</comment>
    <expr_stmt><expr><name>res</name> = &amp;<name><name>cx</name>-&gt;<name>regExpStatics</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name>-&gt;<name>input</name></name> = <name>input</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name>-&gt;<name>multiline</name></name> = <name>multiline</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>gcPoke</name></name> = <name>JS_TRUE</name></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_ClearRegExpStatics</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSRegExpStatics</name> *</type><name>res</name></decl>;</decl_stmt>

    <comment type="block">/* No locking required, cx is thread-private and input must be live. */</comment>
    <expr_stmt><expr><name>res</name> = &amp;<name><name>cx</name>-&gt;<name>regExpStatics</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name>-&gt;<name>input</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name>-&gt;<name>multiline</name></name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name>-&gt;<name>parenCount</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name>-&gt;<name>lastMatch</name></name> = <name><name>res</name>-&gt;<name>lastParen</name></name> = <name>js_EmptySubString</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name>-&gt;<name>leftContext</name></name> = <name><name>res</name>-&gt;<name>rightContext</name></name> = <name>js_EmptySubString</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>res</name>-&gt;<name>moreParens</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>free</name></name><argument_list>(<argument><expr><name><name>res</name>-&gt;<name>moreParens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>res</name>-&gt;<name>moreParens</name></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>gcPoke</name></name> = <name>JS_TRUE</name></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_ClearRegExpRoots</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSRegExpStatics</name> *</type><name>res</name></decl>;</decl_stmt>

    <comment type="block">/* No locking required, cx is thread-private and input must be live. */</comment>
    <expr_stmt><expr><name>res</name> = &amp;<name><name>cx</name>-&gt;<name>regExpStatics</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name>-&gt;<name>input</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>gcPoke</name></name> = <name>JS_TRUE</name></expr>;</expr_stmt>
}</block>

<comment type="block">/* TODO: compile, execute, get/set other statics... */</comment>

<comment type="block" format="doxygen">/************************************************************************/</comment>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_SetLocaleCallbacks</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSLocaleCallbacks *callbacks</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>localeCallbacks</name></name> = <name>callbacks</name></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSLocaleCallbacks *</argument>)</argument_list></macro>
<macro><name>JS_GetLocaleCallbacks</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <return>return <expr><name><name>cx</name>-&gt;<name>localeCallbacks</name></name></expr>;</return>
}</block>

<comment type="block" format="doxygen">/************************************************************************/</comment>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_IsExceptionPending</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <return>return <expr>(<name>JSBool</name>) <name><name>cx</name>-&gt;<name>throwing</name></name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_GetPendingException</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>cx</name>-&gt;<name>throwing</name></name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>vp</name> = <name><name>cx</name>-&gt;<name>exception</name></name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_SetPendingException</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval v</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>throwing</name></name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>exception</name></name> = <name>v</name></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_ClearPendingException</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>throwing</name></name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>exception</name></name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ReportPendingException</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSPackedBool</name></type> <name>save</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Set cx-&gt;generatingError to suppress the standard error-to-exception
     * conversion done by all {js,JS}_Report* functions except for OOM.  The
     * cx-&gt;generatingError flag was added to suppress recursive divergence
     * under js_ErrorToException, but it serves for our purposes here too.
     */</comment>
    <expr_stmt><expr><name>save</name> = <name><name>cx</name>-&gt;<name>generatingError</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>generatingError</name></name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>js_ReportUncaughtException</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>generatingError</name></name> = <name>save</name></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block>

<struct>struct <name>JSExceptionState</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>JSBool</name></type> <name>throwing</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type>  <name>exception</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSExceptionState *</argument>)</argument_list></macro>
<macro><name>JS_SaveExceptionState</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSExceptionState</name> *</type><name>state</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>state</name> = (<name>JSExceptionState</name> *) <call><name><name>cx</name>-&gt;<name>malloc</name></name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JSExceptionState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>state</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>state</name>-&gt;<name>throwing</name></name> = <call><name>JS_GetPendingException</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>state</name>-&gt;<name>exception</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>state</name>-&gt;<name>throwing</name></name> &amp;&amp; <call><name>JSVAL_IS_GCTHING</name><argument_list>(<argument><expr><name><name>state</name>-&gt;<name>exception</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>js_AddRoot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>state</name>-&gt;<name>exception</name></name></expr></argument>, <argument><expr>"JSExceptionState.exception"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>
    <return>return <expr><name>state</name></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_RestoreExceptionState</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSExceptionState *state</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>state</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>state</name>-&gt;<name>throwing</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>JS_SetPendingException</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>state</name>-&gt;<name>exception</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call><name>JS_ClearPendingException</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        <expr_stmt><expr><call><name>JS_DropExceptionState</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_DropExceptionState</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSExceptionState *state</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>state</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>state</name>-&gt;<name>throwing</name></name> &amp;&amp; <call><name>JSVAL_IS_GCTHING</name><argument_list>(<argument><expr><name><name>state</name>-&gt;<name>exception</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>JS_RemoveRoot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>state</name>-&gt;<name>exception</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>free</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSErrorReport *</argument>)</argument_list></macro>
<macro><name>JS_ErrorFromException</name><argument_list>(<argument>JSContext *cx</argument>, <argument>jsval v</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>CHECK_REQUEST</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_ErrorFromException</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ThrowReportedError</name><argument_list>(<argument>JSContext *cx</argument>, <argument>const char *message</argument>,
                      <argument>JSErrorReport *reportp</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>JS_IsRunning</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call> &amp;&amp;
           <call><name>js_ErrorToException</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>reportp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JS_ThrowStopIteration</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>js_ThrowStopIteration</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<comment type="block">/*
 * Get the owning thread id of a context. Returns 0 if the context is not
 * owned by any thread.
 */</comment>
<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>jsword</argument>)</argument_list></macro>
<macro><name>JS_GetContextThread</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <return>return <expr><call><name>JS_THREAD_ID</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr>0</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>

<comment type="block">/*
 * Set the current thread as the owning thread of a context. Returns the
 * old owning thread id, or -1 if the operation failed.
 */</comment>
<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>jsword</argument>)</argument_list></macro>
<macro><name>JS_SetContextThread</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>requestDepth</name></name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>cx</name>-&gt;<name>thread</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>CURRENT_THREAD_IS_ME</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>thread</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>cx</name>-&gt;<name>thread</name>-&gt;<name>id</name></name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name>js_InitContextThread</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>js_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>-1</expr>;</return>
    }</block></then></if>

    <comment type="block">/* Here the GC lock is still held after js_InitContextThread took it. */</comment>
    <expr_stmt><expr><call><name>JS_UNLOCK_GC</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr>0</expr>;</return>
}</block>

<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>jsword</argument>)</argument_list></macro>
<macro><name>JS_ClearContextThread</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <comment type="block">/*
     * This must be called outside a request and, if cx is associated with a
     * thread, this must be called only from that thread.  If not, this is a
     * harmless no-op.
     */</comment>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>requestDepth</name></name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>cx</name>-&gt;<name>thread</name></name></expr>)</condition><then>
        <return>return <expr>0</expr>;</return></then></if>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>CURRENT_THREAD_IS_ME</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>thread</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>jsword</name></type> <name>old</name> <init>= <expr><name><name>cx</name>-&gt;<name>thread</name>-&gt;<name>id</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * We must not race with a GC that accesses cx-&gt;thread for all threads,
     * see bug 476934.
     */</comment>
    <decl_stmt><decl><type><name>JSRuntime</name> *</type><name>rt</name> <init>= <expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_LOCK_GC</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_WaitForGC</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_ClearContextThread</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_UNLOCK_GC</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>old</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr>0</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_GC_ZEAL</name></cpp:ifdef>
<macro><name>JS_PUBLIC_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JS_SetGCZeal</name><argument_list>(<argument>JSContext *cx</argument>, <argument>uint8 zeal</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>gcZeal</name></name> = <name>zeal</name></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/************************************************************************/</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STATIC_JS_API</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>XP_WIN</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name> <argument_list>(<argument><expr><name>WINCE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
 * Initialization routine for the JS DLL.
 */</comment>
<function><type><name>BOOL</name> <name>WINAPI</name></type> <name>DllMain</name> <parameter_list>(<param><decl><type><name>HINSTANCE</name></type> <name>hDLL</name></decl></param>, <param><decl><type><name>DWORD</name></type> <name>dwReason</name></decl></param>, <param><decl><type><name>LPVOID</name></type> <name>lpReserved</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
