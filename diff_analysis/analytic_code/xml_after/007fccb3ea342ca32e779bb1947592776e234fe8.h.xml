<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="007fccb3ea342ca32e779bb1947592776e234fe8.h"><comment type="block">/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*- */</comment>
<comment type="block">/* vim: set sw=4 ts=8 et tw=80 : */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Content App.
 *
 * The Initial Developer of the Original Code is
 *   The Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>mozilla_dom_ContentParent_h</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mozilla_dom_ContentParent_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/waitable_event_watcher.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozilla/dom/PContentParent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozilla/ipc/GeckoChildProcessHost.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIObserver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIThreadInternal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozilla/Monitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNetUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPermissionManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMGeoPositionCallback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIAccelerometer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>mozilla</name> <block>{

<decl_stmt><decl><type><name>namespace</name></type> <name>ipc</name> <block>{
<decl_stmt><decl><type><name>class</name></type> <name>TestShellParent</name></decl>;</decl_stmt>
}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>dom</name> <block>{

<decl_stmt><decl><type><name>class</name></type> <name>TabParent</name></decl>;</decl_stmt>

<expr_stmt><expr><name>class</name> <name>ContentParent</name> : <name>public</name> <name>PContentParent</name></expr>
                    , <expr><name>public</name> <name>nsIObserver</name></expr>
                    , <expr><name>public</name> <name>nsIThreadObserver</name></expr>
                    , <expr><name>public</name> <name>nsIDOMGeoPositionCallback</name></expr>
                    , <expr><name>public</name> <name>nsIAccelerationListener</name>
<block>{
<expr><name>private</name>:</expr>
    <typedef>typedef <expr_stmt><expr><name>mozilla</name>::<name>ipc</name>::<name>GeckoChildProcessHost</name> <name>GeckoChildProcessHost</name></expr>;</expr_stmt></typedef></block></expr></expr_stmt>
    <typedef>typedef <expr_stmt><expr><name>mozilla</name>::<name>ipc</name>::<name>TestShellParent</name> <name>TestShellParent</name></expr>;</expr_stmt></typedef>

<label><name>public</name>:</label>
    <function_decl><type><specifier>static</specifier> <name>ContentParent</name>*</type> <name>GetSingleton</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aForceNew</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl></param>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
    <comment type="line">// TODO: implement this somewhere!</comment>
    static ContentParent* FreeSingleton();
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <function_decl><type><name>NS_DECL_ISUPPORTS</name>
    <name>NS_DECL_NSIOBSERVER</name>
    <name>NS_DECL_NSITHREADOBSERVER</name>
    <name>NS_DECL_NSIDOMGEOPOSITIONCALLBACK</name>
    <name>NS_DECL_NSIACCELERATIONLISTENER</name>

    <name>TabParent</name>*</type> <name>CreateTab</name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aChromeFlags</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>TestShellParent</name>*</type> <name>CreateTestShell</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>DestroyTestShell</name><parameter_list>(<param><decl><type><name>TestShellParent</name>*</type> <name>aTestShell</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>ReportChildAlreadyBlocked</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>RequestRunToCompletion</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>bool</name></type> <name>IsAlive</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>ActorDestroy</name><parameter_list>(<param><decl><type><name>ActorDestroyReason</name></type> <name>why</name></decl></param>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
    <decl_stmt><decl><type><specifier>static</specifier> <name>ContentParent</name>*</type> <name>gSingleton</name></decl>;</decl_stmt>

    <comment type="line">// Hide the raw constructor methods since we don't want client code</comment>
    <comment type="line">// using them.</comment>
    <expr_stmt><expr><name>using</name> <name>PContentParent</name>::<name>SendPBrowserConstructor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>using</name> <name>PContentParent</name>::<name>SendPTestShellConstructor</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ContentParent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>virtual</name> ~<call><name>ContentParent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>virtual</name> <name>PBrowserParent</name>*</type> <name>AllocPBrowser</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUint32</name>&amp;</type> <name>aChromeFlags</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>DeallocPBrowser</name><parameter_list>(<param><decl><type><name>PBrowserParent</name>*</type> <name>frame</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>PTestShellParent</name>*</type> <name>AllocPTestShell</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>DeallocPTestShell</name><parameter_list>(<param><decl><type><name>PTestShellParent</name>*</type> <name>shell</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>PAudioParent</name>*</type> <name>AllocPAudio</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRInt32</name>&amp;</type></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>PRInt32</name>&amp;</type></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>PRInt32</name>&amp;</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>DeallocPAudio</name><parameter_list>(<param><decl><type><name>PAudioParent</name>*</type></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>PNeckoParent</name>*</type> <name>AllocPNecko</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>DeallocPNecko</name><parameter_list>(<param><decl><type><name>PNeckoParent</name>*</type> <name>necko</name></decl></param>)</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name>virtual</name> <name>PExternalHelperAppParent</name>*</type> <name>AllocPExternalHelperApp</name><argument_list>(
            <argument><expr>const <name>IPC</name>::<name>URI</name>&amp; <name>uri</name></expr></argument>,
            <argument><expr>const <name>nsCString</name>&amp; <name>aMimeContentType</name></expr></argument>,
            <argument><expr>const <name>nsCString</name>&amp; <name>aContentDisposition</name></expr></argument>,
            <argument><expr>const <name>bool</name>&amp; <name>aForceSave</name></expr></argument>,
            <argument><expr>const <name>PRInt64</name>&amp; <name>aContentLength</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>DeallocPExternalHelperApp</name><parameter_list>(<param><decl><type><name>PExternalHelperAppParent</name>*</type> <name>aService</name></decl></param>)</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>RecvReadPrefsArray</name><argument_list>(<argument><expr><name>InfallibleTArray</name>&lt;<name>PrefTuple</name>&gt; *<name>retValue</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <function_decl><type><name>void</name></type> <name>EnsurePrefService</name><parameter_list>()</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>RecvReadPermissions</name><argument_list>(<argument><expr><name>InfallibleTArray</name>&lt;<name>IPC</name>::<name>Permission</name>&gt;* <name>aPermissions</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>RecvStartVisitedQuery</name><argument_list>(<argument><expr>const <name>IPC</name>::<name>URI</name>&amp; <name>uri</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>RecvVisitURI</name><argument_list>(<argument><expr>const <name>IPC</name>::<name>URI</name>&amp; <name>uri</name></expr></argument>,
                              <argument><expr>const <name>IPC</name>::<name>URI</name>&amp; <name>referrer</name></expr></argument>,
                              <argument><expr>const <name>PRUint32</name>&amp; <name>flags</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>RecvSetURITitle</name><argument_list>(<argument><expr>const <name>IPC</name>::<name>URI</name>&amp; <name>uri</name></expr></argument>,
                                 <argument><expr>const <name>nsString</name>&amp; <name>title</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>RecvShowFilePicker</name><argument_list>(<argument><expr>const <name>PRInt16</name>&amp; <name>mode</name></expr></argument>,
                                    <argument><expr>const <name>PRInt16</name>&amp; <name>selectedType</name></expr></argument>,
                                    <argument><expr>const <name>nsString</name>&amp; <name>title</name></expr></argument>,
                                    <argument><expr>const <name>nsString</name>&amp; <name>defaultFile</name></expr></argument>,
                                    <argument><expr>const <name>nsString</name>&amp; <name>defaultExtension</name></expr></argument>,
                                    <argument><expr>const <name>InfallibleTArray</name>&lt;<name>nsString</name>&gt;&amp; <name>filters</name></expr></argument>,
                                    <argument><expr>const <name>InfallibleTArray</name>&lt;<name>nsString</name>&gt;&amp; <name>filterNames</name></expr></argument>,
                                    <argument><expr><name>InfallibleTArray</name>&lt;<name>nsString</name>&gt;* <name>files</name></expr></argument>,
                                    <argument><expr><name>PRInt16</name>* <name>retValue</name></expr></argument>,
                                    <argument><expr><name>nsresult</name>* <name>result</name></expr></argument>)</argument_list></decl>;</decl_stmt>
 
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>RecvShowAlertNotification</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsString</name>&amp;</type> <name>aImageUrl</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsString</name>&amp;</type> <name>aTitle</name></decl></param>,
                                           <param><decl><type><specifier>const</specifier> <name>nsString</name>&amp;</type> <name>aText</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>PRBool</name>&amp;</type> <name>aTextClickable</name></decl></param>,
                                           <param><decl><type><specifier>const</specifier> <name>nsString</name>&amp;</type> <name>aCookie</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsString</name>&amp;</type> <name>aName</name></decl></param>)</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>RecvLoadURIExternal</name><argument_list>(<argument><expr>const <name>IPC</name>::<name>URI</name>&amp; <name>uri</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>RecvSyncMessage</name><argument_list>(<argument><expr>const <name>nsString</name>&amp; <name>aMsg</name></expr></argument>, <argument><expr>const <name>nsString</name>&amp; <name>aJSON</name></expr></argument>,
                                 <argument><expr><name>InfallibleTArray</name>&lt;<name>nsString</name>&gt;* <name>aRetvals</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>RecvAsyncMessage</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsString</name>&amp;</type> <name>aMsg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsString</name>&amp;</type> <name>aJSON</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>RecvAddGeolocationListener</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>RecvRemoveGeolocationListener</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>RecvAddAccelerometerListener</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>RecvRemoveAccelerometerListener</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>RecvConsoleMessage</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsString</name>&amp;</type> <name>aMessage</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>RecvScriptError</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsString</name>&amp;</type> <name>aMessage</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>nsString</name>&amp;</type> <name>aSourceName</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>nsString</name>&amp;</type> <name>aSourceLine</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>PRUint32</name>&amp;</type> <name>aLineNumber</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>PRUint32</name>&amp;</type> <name>aColNumber</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>PRUint32</name>&amp;</type> <name>aFlags</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>nsCString</name>&amp;</type> <name>aCategory</name></decl></param>)</parameter_list>;</function_decl>

    <expr_stmt><expr><name>mozilla</name>::<name>Monitor</name> <name>mMonitor</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GeckoChildProcessHost</name>*</type> <name>mSubprocess</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PRInt32</name></type> <name>mGeolocationWatchID</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mRunToCompletionDepth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>mShouldCallUnblockChild</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIThreadObserver</name>&gt; <name>mOldObserver</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>mIsAlive</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIPrefServiceInternal</name>&gt; <name>mPrefService</name></expr>;</expr_stmt> 
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}</block></decl></decl_stmt> <comment type="line">// namespace dom</comment>
} <comment type="line">// namespace mozilla</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
