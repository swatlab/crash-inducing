<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="00247215f123c7bf1741ad34429ead0f1ff57e7f.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Josh Aas &lt;josh@mozilla.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prtypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prclist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAutoLock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNPAPIPlugin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNPAPIPluginInstance.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNPAPIPluginStreamListener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIServiceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsThreadUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrivateBrowsingService.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPluginStreamListener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPluginsDir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPluginSafety.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefBranch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPluginLogging.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPluginInstancePeer2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIJSContextStack.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPIPluginInstancePeer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPIDOMWindow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptGlobalObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMJSUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrincipal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jscntxt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIXPConnect.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIObserverService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;prinrval.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_MACOSX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Carbon/Carbon.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// needed for nppdf plugin</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_WIDGET_GTK2</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdk.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdkx.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtk2xtbin.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsJSNPRuntime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIHttpAuthManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsICookieService.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>PRLock</name> *</type><name>sPluginThreadAsyncCallLock</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PRCList</name></type> <name>sPendingAsyncCalls</name> <init>= <expr><call><name>PR_INIT_STATIC_CLIST</name><argument_list>(<argument><expr>&amp;<name>sPendingAsyncCalls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="line">// POST/GET stream type</comment>
<enum>enum <name>eNPPStreamTypeInternal</name> <block>{
  <decl><name>eNPPStreamTypeInternal_Get</name></decl>,
  <decl><name>eNPPStreamTypeInternal_Post</name></decl>
}</block>;</enum>

<expr_stmt><expr>static <call><name>NS_DEFINE_IID</name><argument_list>(<argument><expr><name>kCPluginManagerCID</name></expr></argument>, <argument><expr><name>NS_PLUGINMANAGER_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>NS_DEFINE_IID</name><argument_list>(<argument><expr><name>kPluginManagerCID</name></expr></argument>, <argument><expr><name>NS_PLUGINMANAGER_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>NS_DEFINE_IID</name><argument_list>(<argument><expr><name>kMemoryCID</name></expr></argument>, <argument><expr><name>NS_MEMORY_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">// Static stub functions that are exported to the 4.x plugin as entry</comment>
<comment type="line">// points via the CALLBACKS variable.</comment>
<function_decl><type><name>PR_BEGIN_EXTERN_C</name>

  <specifier>static</specifier> <name>NPError</name> <name>NP_CALLBACK</name></type>
  <name>_requestread</name><parameter_list>(<param><decl><type><name>NPStream</name> *</type><name>pstream</name></decl></param>, <param><decl><type><name>NPByteRange</name> *</type><name>rangeList</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>NPError</name> <name>NP_CALLBACK</name></type>
  <name>_geturlnotify</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>relativeURL</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>target</name></decl></param>,
                <param><decl><type><name>void</name>*</type> <name>notifyData</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>NPError</name> <name>NP_CALLBACK</name></type>
  <name>_getvalue</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPNVariable</name></type> <name>variable</name></decl></param>, <param><decl><type><name>void</name> *</type><name>r_value</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>NPError</name> <name>NP_CALLBACK</name></type>
  <name>_setvalue</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPPVariable</name></type> <name>variable</name></decl></param>, <param><decl><type><name>void</name> *</type><name>r_value</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>NPError</name> <name>NP_CALLBACK</name></type>
  <name>_geturl</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>relativeURL</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>target</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>NPError</name> <name>NP_CALLBACK</name></type>
  <name>_posturlnotify</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>relativeURL</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                 <param><decl><type><name>uint32_t</name></type> <name>len</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>NPBool</name></type> <name>file</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>notifyData</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>NPError</name> <name>NP_CALLBACK</name></type>
  <name>_posturl</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>relativeURL</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>, <param><decl><type><name>uint32_t</name></type> <name>len</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>NPBool</name></type> <name>file</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>NPError</name> <name>NP_CALLBACK</name></type>
  <name>_newstream</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPMIMEType</name></type> <name>type</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>window</name></decl></param>, <param><decl><type><name>NPStream</name>**</type> <name>pstream</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>int32_t</name> <name>NP_CALLBACK</name></type>
  <name>_write</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPStream</name> *</type><name>pstream</name></decl></param>, <param><decl><type><name>int32_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>void</name> *</type><name>buffer</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>NPError</name> <name>NP_CALLBACK</name></type>
  <name>_destroystream</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPStream</name> *</type><name>pstream</name></decl></param>, <param><decl><type><name>NPError</name></type> <name>reason</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>void</name> <name>NP_CALLBACK</name></type>
  <name>_status</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>void</name> <name>NP_CALLBACK</name></type>
  <name>_memfree</name> <parameter_list>(<param><decl><type><name>void</name> *</type><name>ptr</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>uint32_t</name> <name>NP_CALLBACK</name></type>
  <name>_memflush</name><parameter_list>(<param><decl><type><name>uint32_t</name></type> <name>size</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>void</name> <name>NP_CALLBACK</name></type>
  <name>_reloadplugins</name><parameter_list>(<param><decl><type><name>NPBool</name></type> <name>reloadPages</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>void</name> <name>NP_CALLBACK</name></type>
  <name>_invalidaterect</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPRect</name> *</type><name>invalidRect</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>void</name> <name>NP_CALLBACK</name></type>
  <name>_invalidateregion</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPRegion</name></type> <name>invalidRegion</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>void</name> <name>NP_CALLBACK</name></type>
  <name>_forceredraw</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>* <name>NP_CALLBACK</name></type>
  <name>_useragent</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>void</name>* <name>NP_CALLBACK</name></type>
  <name>_memalloc</name> <parameter_list>(<param><decl><type><name>uint32_t</name></type> <name>size</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// Deprecated entry points for the old Java plugin.</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name>* <name>NP_CALLBACK</name></type> <comment type="block">/* OJI type: JRIEnv* */</comment>
  <name>_getJavaEnv</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>void</name>* <name>NP_CALLBACK</name></type> <comment type="block">/* OJI type: jref */</comment>
  <name>_getJavaPeer</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>)</parameter_list>;</function_decl>

<function><type><name>PR_END_EXTERN_C</name>

<comment type="line">// This function sends a notification using the observer service to any object</comment>
<comment type="line">// registered to listen to the "experimental-notify-plugin-call" subject.</comment>
<comment type="line">// Each "experimental-notify-plugin-call" notification carries with it the run</comment>
<comment type="line">// time value in milliseconds that the call took to execute.</comment>
<name>void</name></type> <name>NS_NotifyPluginCall</name><parameter_list>(<param><decl><type><name>PRIntervalTime</name></type> <name>startTime</name></decl></param>)</parameter_list> 
<block>{
  <decl_stmt><decl><type><name>PRIntervalTime</name></type> <name>endTime</name> <init>= <expr><call><name>PR_IntervalNow</name><argument_list>()</argument_list></call> - <name>startTime</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIObserverService</name></expr></argument>&gt;</argument_list></name></type> <name>notifyUIService</name> <init>=
    <expr><call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/observer-service;1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>float</name></type> <name>runTimeInSeconds</name> <init>= <expr><call><name>float</name><argument_list>(<argument><expr><name>endTime</name></expr></argument>)</argument_list></call> / <call><name>PR_TicksPerSecond</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>runTimeString</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>runTimeString</name>.<name>AppendFloat</name></name><argument_list>(<argument><expr><name>runTimeInSeconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>PRUnichar</name>*</type> <name>runTime</name> <init>= <expr><call><name><name>runTimeString</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>notifyUIService</name>-&gt;<name>NotifyObservers</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr>"experimental-notify-plugin-call"</expr></argument>,
                                   <argument><expr><name>runTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>NPNetscapeFuncs</name></type> <name><name>nsNPAPIPlugin</name>::<name>CALLBACKS</name></name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name><name>nsNPAPIPlugin</name>::<name>CheckClassInitialized</name></name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>static</specifier> <name>PRBool</name></type> <name>initialized</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>initialized</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <comment type="line">// XXX It'd be nice to make this const and initialize it statically...</comment>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>size</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>CALLBACKS</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>version</name></name> = (<name>NP_VERSION_MAJOR</name> &lt;&lt; 8) + <name>NP_VERSION_MINOR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>geturl</name></name> = ((<name>NPN_GetURLProcPtr</name>)<name>_geturl</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>posturl</name></name> = ((<name>NPN_PostURLProcPtr</name>)<name>_posturl</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>requestread</name></name> = ((<name>NPN_RequestReadProcPtr</name>)<name>_requestread</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>newstream</name></name> = ((<name>NPN_NewStreamProcPtr</name>)<name>_newstream</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>write</name></name> = ((<name>NPN_WriteProcPtr</name>)<name>_write</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>destroystream</name></name> = ((<name>NPN_DestroyStreamProcPtr</name>)<name>_destroystream</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>status</name></name> = ((<name>NPN_StatusProcPtr</name>)<name>_status</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>uagent</name></name> = ((<name>NPN_UserAgentProcPtr</name>)<name>_useragent</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>memalloc</name></name> = ((<name>NPN_MemAllocProcPtr</name>)<name>_memalloc</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>memfree</name></name> = ((<name>NPN_MemFreeProcPtr</name>)<name>_memfree</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>memflush</name></name> = ((<name>NPN_MemFlushProcPtr</name>)<name>_memflush</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>reloadplugins</name></name> = ((<name>NPN_ReloadPluginsProcPtr</name>)<name>_reloadplugins</name>)</expr>;</expr_stmt>

  <comment type="line">// Deprecated API callbacks.</comment>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>getJavaEnv</name></name> = ((<name>NPN_GetJavaEnvProcPtr</name>)<name>_getJavaEnv</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>getJavaPeer</name></name> = ((<name>NPN_GetJavaPeerProcPtr</name>)<name>_getJavaPeer</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>geturlnotify</name></name> = ((<name>NPN_GetURLNotifyProcPtr</name>)<name>_geturlnotify</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>posturlnotify</name></name> = ((<name>NPN_PostURLNotifyProcPtr</name>)<name>_posturlnotify</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>getvalue</name></name> = ((<name>NPN_GetValueProcPtr</name>)<name>_getvalue</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>setvalue</name></name> = ((<name>NPN_SetValueProcPtr</name>)<name>_setvalue</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>invalidaterect</name></name> = ((<name>NPN_InvalidateRectProcPtr</name>)<name>_invalidaterect</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>invalidateregion</name></name> = ((<name>NPN_InvalidateRegionProcPtr</name>)<name>_invalidateregion</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>forceredraw</name></name> = ((<name>NPN_ForceRedrawProcPtr</name>)<name>_forceredraw</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>getstringidentifier</name></name> = ((<name>NPN_GetStringIdentifierProcPtr</name>)<name>_getstringidentifier</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>getstringidentifiers</name></name> = ((<name>NPN_GetStringIdentifiersProcPtr</name>)<name>_getstringidentifiers</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>getintidentifier</name></name> = ((<name>NPN_GetIntIdentifierProcPtr</name>)<name>_getintidentifier</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>identifierisstring</name></name> = ((<name>NPN_IdentifierIsStringProcPtr</name>)<name>_identifierisstring</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>utf8fromidentifier</name></name> = ((<name>NPN_UTF8FromIdentifierProcPtr</name>)<name>_utf8fromidentifier</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>intfromidentifier</name></name> = ((<name>NPN_IntFromIdentifierProcPtr</name>)<name>_intfromidentifier</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>createobject</name></name> = ((<name>NPN_CreateObjectProcPtr</name>)<name>_createobject</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>retainobject</name></name> = ((<name>NPN_RetainObjectProcPtr</name>)<name>_retainobject</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>releaseobject</name></name> = ((<name>NPN_ReleaseObjectProcPtr</name>)<name>_releaseobject</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>invoke</name></name> = ((<name>NPN_InvokeProcPtr</name>)<name>_invoke</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>invokeDefault</name></name> = ((<name>NPN_InvokeDefaultProcPtr</name>)<name>_invokeDefault</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>evaluate</name></name> = ((<name>NPN_EvaluateProcPtr</name>)<name>_evaluate</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>getproperty</name></name> = ((<name>NPN_GetPropertyProcPtr</name>)<name>_getproperty</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>setproperty</name></name> = ((<name>NPN_SetPropertyProcPtr</name>)<name>_setproperty</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>removeproperty</name></name> = ((<name>NPN_RemovePropertyProcPtr</name>)<name>_removeproperty</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>hasproperty</name></name> = ((<name>NPN_HasPropertyProcPtr</name>)<name>_hasproperty</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>hasmethod</name></name> = ((<name>NPN_HasMethodProcPtr</name>)<name>_hasmethod</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>enumerate</name></name> = ((<name>NPN_EnumerateProcPtr</name>)<name>_enumerate</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>construct</name></name> = ((<name>NPN_ConstructProcPtr</name>)<name>_construct</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>releasevariantvalue</name></name> = ((<name>NPN_ReleaseVariantValueProcPtr</name>)<name>_releasevariantvalue</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>setexception</name></name> = ((<name>NPN_SetExceptionProcPtr</name>)<name>_setexception</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>pushpopupsenabledstate</name></name> = ((<name>NPN_PushPopupsEnabledStateProcPtr</name>)<name>_pushpopupsenabledstate</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>poppopupsenabledstate</name></name> = ((<name>NPN_PopPopupsEnabledStateProcPtr</name>)<name>_poppopupsenabledstate</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>pluginthreadasynccall</name></name> = ((<name>NPN_PluginThreadAsyncCallProcPtr</name>)<name>_pluginthreadasynccall</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>getvalueforurl</name></name> = ((<name>NPN_GetValueForURLPtr</name>)<name>_getvalueforurl</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>setvalueforurl</name></name> = ((<name>NPN_SetValueForURLPtr</name>)<name>_setvalueforurl</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>CALLBACKS</name>.<name>getauthenticationinfo</name></name> = ((<name>NPN_GetAuthenticationInfoPtr</name>)<name>_getauthenticationinfo</name>)</expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>sPluginThreadAsyncCallLock</name></expr>)</condition><then>
    <expr_stmt><expr><name>sPluginThreadAsyncCallLock</name> = <call><name><name>nsAutoLock</name>::<name>NewLock</name></name><argument_list>(<argument><expr>"sPluginThreadAsyncCallLock"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><name>initialized</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>,<argument><expr>("NPN callbacks initialized\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<macro><name>NS_IMPL_ISUPPORTS2</name><argument_list>(<argument>nsNPAPIPlugin</argument>, <argument>nsIPlugin</argument>, <argument>nsIFactory</argument>)</argument_list></macro>

<constructor><name><name>nsNPAPIPlugin</name>::<name>nsNPAPIPlugin</name></name><parameter_list>(<param><decl><type><name>NPPluginFuncs</name>*</type> <name>callbacks</name></decl></param>, <param><decl><type><name>PRLibrary</name>*</type> <name>aLibrary</name></decl></param>,
                             <param><decl><type><name>NP_PLUGINSHUTDOWN</name></type> <name>aShutdown</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>(<name>void</name>*) &amp;<name>fCallbacks</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fCallbacks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>fLibrary</name> = <name>nsnull</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_WIN</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>XP_OS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// On Windows (and Mac) we need to keep a direct reference to the</comment>
  <comment type="line">// fCallbacks and NOT just copy the struct. See Bugzilla 85334</comment>

  <decl_stmt><decl><type><name>NP_GETENTRYPOINTS</name></type> <name>pfnGetEntryPoints</name> <init>=
    <expr>(<name>NP_GETENTRYPOINTS</name>)<call><name>PR_FindSymbol</name><argument_list>(<argument><expr><name>aLibrary</name></expr></argument>, <argument><expr>"NP_GetEntryPoints"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>pfnGetEntryPoints</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <expr_stmt><expr><name><name>fCallbacks</name>.<name>size</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>fCallbacks</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>result</name> <init>= <expr><call><name>pfnGetEntryPoints</name><argument_list>(<argument><expr>&amp;<name>fCallbacks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>result</name> == <name>NS_OK</name></expr></argument>, <argument><expr>"Failed to get callbacks"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>HIBYTE</name><argument_list>(<argument><expr><name><name>fCallbacks</name>.<name>version</name></name></expr></argument>)</argument_list></call> &gt;= <name>NP_VERSION_MAJOR</name></expr></argument>,
               <argument><expr>"callback version is less than NP version"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>fShutdownEntry</name> = (<name>NP_PLUGINSHUTDOWN</name>)<call><name>PR_FindSymbol</name><argument_list>(<argument><expr><name>aLibrary</name></expr></argument>, <argument><expr>"NP_Shutdown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name>NPPluginFuncs</name></type> <name>np_callbacks</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>(<name>void</name>*) &amp;<name>np_callbacks</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>np_callbacks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>np_callbacks</name>.<name>size</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>np_callbacks</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <expr_stmt><expr><name>fShutdownEntry</name> = (<name>NP_PLUGINSHUTDOWN</name>)<call><name>PR_FindSymbol</name><argument_list>(<argument><expr><name>aLibrary</name></expr></argument>, <argument><expr>"NP_Shutdown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>NP_GETENTRYPOINTS</name></type> <name>pfnGetEntryPoints</name> <init>= <expr>(<name>NP_GETENTRYPOINTS</name>)<call><name>PR_FindSymbol</name><argument_list>(<argument><expr><name>aLibrary</name></expr></argument>, <argument><expr>"NP_GetEntryPoints"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>NP_PLUGININIT</name></type> <name>pfnInitialize</name> <init>= <expr>(<name>NP_PLUGININIT</name>)<call><name>PR_FindSymbol</name><argument_list>(<argument><expr><name>aLibrary</name></expr></argument>, <argument><expr>"NP_Initialize"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>pfnGetEntryPoints</name> || !<name>pfnInitialize</name> || !<name>fShutdownEntry</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"Not all necessary functions exposed by plugin, it will not load."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <comment type="line">// we call NP_Initialize before getting function pointers to match</comment>
  <comment type="line">// WebKit's behavior. They implemented this first on Mac OS X.</comment>
  <if>if <condition>(<expr><call><name>pfnInitialize</name><argument_list>(<argument><expr>&amp;(<name><name>nsNPAPIPlugin</name>::<name>CALLBACKS</name></name>)</expr></argument>)</argument_list></call> != <name>NPERR_NO_ERROR</name></expr>)</condition><then>
    <return>return;</return></then></if>
  <if>if <condition>(<expr><call><name>pfnGetEntryPoints</name><argument_list>(<argument><expr>&amp;<name>np_callbacks</name></expr></argument>)</argument_list></call> != <name>NPERR_NO_ERROR</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <expr_stmt><expr><name><name>fCallbacks</name>.<name>size</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>fCallbacks</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fCallbacks</name>.<name>version</name></name> = <name><name>np_callbacks</name>.<name>version</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fCallbacks</name>.<name>newp</name></name> = (<name>NPP_NewProcPtr</name>)<name><name>np_callbacks</name>.<name>newp</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fCallbacks</name>.<name>destroy</name></name> = (<name>NPP_DestroyProcPtr</name>)<name><name>np_callbacks</name>.<name>destroy</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fCallbacks</name>.<name>setwindow</name></name> = (<name>NPP_SetWindowProcPtr</name>)<name><name>np_callbacks</name>.<name>setwindow</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fCallbacks</name>.<name>newstream</name></name> = (<name>NPP_NewStreamProcPtr</name>)<name><name>np_callbacks</name>.<name>newstream</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fCallbacks</name>.<name>destroystream</name></name> = (<name>NPP_DestroyStreamProcPtr</name>)<name><name>np_callbacks</name>.<name>destroystream</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fCallbacks</name>.<name>asfile</name></name> = (<name>NPP_StreamAsFileProcPtr</name>)<name><name>np_callbacks</name>.<name>asfile</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fCallbacks</name>.<name>writeready</name></name> = (<name>NPP_WriteReadyProcPtr</name>)<name><name>np_callbacks</name>.<name>writeready</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fCallbacks</name>.<name>write</name></name> = (<name>NPP_WriteProcPtr</name>)<name><name>np_callbacks</name>.<name>write</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fCallbacks</name>.<name>print</name></name> = (<name>NPP_PrintProcPtr</name>)<name><name>np_callbacks</name>.<name>print</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fCallbacks</name>.<name>event</name></name> = (<name>NPP_HandleEventProcPtr</name>)<name><name>np_callbacks</name>.<name>event</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fCallbacks</name>.<name>urlnotify</name></name> = (<name>NPP_URLNotifyProcPtr</name>)<name><name>np_callbacks</name>.<name>urlnotify</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fCallbacks</name>.<name>getvalue</name></name> = (<name>NPP_GetValueProcPtr</name>)<name><name>np_callbacks</name>.<name>getvalue</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fCallbacks</name>.<name>setvalue</name></name> = (<name>NPP_SetValueProcPtr</name>)<name><name>np_callbacks</name>.<name>setvalue</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="line">// for everyone else</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>(<name>void</name>*) &amp;<name>fCallbacks</name></expr></argument>, <argument><expr>(<name>void</name>*) <name>callbacks</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fCallbacks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>fShutdownEntry</name> = <name>aShutdown</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>fLibrary</name> = <name>aLibrary</name></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>nsNPAPIPlugin</name>::~<name>nsNPAPIPlugin</name></name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <comment type="line">// reset the callbacks list</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>(<name>void</name>*) &amp;<name>fCallbacks</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fCallbacks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></destructor>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name><name>nsNPAPIPlugin</name>::<name>SetPluginRefNum</name></name><parameter_list>(<param><decl><type><name>short</name></type> <name>aRefNum</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>fPluginRefNum</name> = <name>aRefNum</name></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// Creates the nsNPAPIPlugin object. One nsNPAPIPlugin object exists per plugin (not instance).</comment>
<function><type><name>nsresult</name></type>
<name><name>nsNPAPIPlugin</name>::<name>CreatePlugin</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>aFileName</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>aFullPath</name></decl></param>,
                            <param><decl><type><name>PRLibrary</name>*</type> <name>aLibrary</name></decl></param>, <param><decl><type><name>nsIPlugin</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>CheckClassInitialized</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_UNIX</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>XP_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>nsNPAPIPlugin</name> *</type><name>plptr</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>NPPluginFuncs</name></type> <name>callbacks</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>(<name>void</name>*) &amp;<name>callbacks</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks</name>.<name>size</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>NP_PLUGINSHUTDOWN</name></type> <name>pfnShutdown</name> <init>=
    <expr>(<name>NP_PLUGINSHUTDOWN</name>)<call><name>PR_FindFunctionSymbol</name><argument_list>(<argument><expr><name>aLibrary</name></expr></argument>, <argument><expr>"NP_Shutdown"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// create the new plugin handler</comment>
  <expr_stmt><expr>*<name>aResult</name> = <name>plptr</name> =
    new <call><name>nsNPAPIPlugin</name><argument_list>(<argument><expr>&amp;<name>callbacks</name></expr></argument>, <argument><expr><name>aLibrary</name></expr></argument>, <argument><expr><name>pfnShutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>*<name>aResult</name> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>aFileName</name></expr>)</condition><then> <comment type="line">//do not call NP_Initialize in this case, bug 74938</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <comment type="line">// we must init here because the plugin may call NPN functions</comment>
  <comment type="line">// when we call into the NP_Initialize entry point - NPN functions</comment>
  <comment type="line">// require that mBrowserManager be set up</comment>
  <expr_stmt><expr><call><name><name>plptr</name>-&gt;<name>Initialize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>NP_PLUGINUNIXINIT</name></type> <name>pfnInitialize</name> <init>=
    <expr>(<name>NP_PLUGINUNIXINIT</name>)<call><name>PR_FindFunctionSymbol</name><argument_list>(<argument><expr><name>aLibrary</name></expr></argument>, <argument><expr>"NP_Initialize"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>pfnInitialize</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return></then></if>

  <if>if <condition>(<expr><call><name>pfnInitialize</name><argument_list>(<argument><expr>&amp;(<name><name>nsNPAPIPlugin</name>::<name>CALLBACKS</name></name>)</expr></argument>,<argument><expr>&amp;<name>callbacks</name></expr></argument>)</argument_list></call> != <name>NS_OK</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return></then></if>

  <comment type="line">// now copy function table back to nsNPAPIPlugin instance</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>(<name>void</name>*) &amp;(<name><name>plptr</name>-&gt;<name>fCallbacks</name></name>)</expr></argument>, <argument><expr>(<name>void</name>*)&amp;<name>callbacks</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_WIN</name></cpp:ifdef>
  <comment type="line">// Note: on Windows, we must use the fCallback because plugins may</comment>
  <comment type="line">// change the function table. The Shockwave installer makes changes</comment>
  <comment type="line">// in the table while running</comment>
  <expr_stmt><expr>*<name>aResult</name> = new <call><name>nsNPAPIPlugin</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aLibrary</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>*<name>aResult</name> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// we must init here because the plugin may call NPN functions</comment>
  <comment type="line">// when we call into the NP_Initialize entry point - NPN functions</comment>
  <comment type="line">// require that mBrowserManager be set up</comment>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name>(*<name>aResult</name>)-&gt;<name>Initialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr>*<name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>NP_PLUGININIT</name></type> <name>pfnInitialize</name> <init>=
    <expr>(<name>NP_PLUGININIT</name>)<call><name>PR_FindSymbol</name><argument_list>(<argument><expr><name>aLibrary</name></expr></argument>, <argument><expr>"NP_Initialize"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>pfnInitialize</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return></then></if>

  <if>if <condition>(<expr><call><name>pfnInitialize</name><argument_list>(<argument><expr>&amp;(<name><name>nsNPAPIPlugin</name>::<name>CALLBACKS</name></name>)</expr></argument>)</argument_list></call> != <name>NS_OK</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_OS2</name></cpp:ifdef>
  <comment type="line">// create the new plugin handler</comment>
  <expr_stmt><expr>*<name>aResult</name> = new <call><name>nsNPAPIPlugin</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aLibrary</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>*<name>aResult</name> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// we must init here because the plugin may call NPN functions</comment>
  <comment type="line">// when we call into the NP_Initialize entry point - NPN functions</comment>
  <comment type="line">// require that mBrowserManager be set up</comment>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name>(*<name>aResult</name>)-&gt;<name>Initialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr>*<name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>NP_PLUGININIT</name></type> <name>pfnInitialize</name> <init>=
    <expr>(<name>NP_PLUGININIT</name>)<call><name>PR_FindSymbol</name><argument_list>(<argument><expr><name>aLibrary</name></expr></argument>, <argument><expr>"NP_Initialize"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>pfnInitialize</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return></then></if>

  <comment type="line">// Fixes problem where the OS/2 native multimedia plugins weren't</comment>
  <comment type="line">// working on mozilla though did work on 4.x.  Problem is that they</comment>
  <comment type="line">// expect the current working directory to be the plugins dir.</comment>
  <comment type="line">// Since these plugins are no longer maintained and they represent</comment>
  <comment type="line">// the majority of the OS/2 plugin contingency, we'll have to make</comment>
  <comment type="line">// them work here.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_DISKNUM_TO_LETTER</name><parameter_list>(<param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>('A' + (n - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_LETTER_TO_DISKNUM</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(toupper(c)-'A'+1)</cpp:value></cpp:define>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>origDiskNum</name></decl>, <decl><type ref="prev"/><name>pluginDiskNum</name></decl>, <decl><type ref="prev"/><name>logicalDisk</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>pluginPath</name><index>[<expr><name>CCHMAXPATH</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>origPath</name><index>[<expr><name>CCHMAXPATH</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>pluginPath</name></expr></argument>, <argument><expr><name>aFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name>*</type> <name>slash</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>pluginPath</name></expr></argument>, <argument><expr>'\\'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr>*<name>slash</name> = '\0'</expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DosQueryCurrentDisk</name><argument_list>( <argument><expr>&amp;<name>origDiskNum</name></expr></argument>, <argument><expr>&amp;<name>logicalDisk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pluginDiskNum</name> = <call><name>MAP_LETTER_TO_DISKNUM</name><argument_list>(<argument><expr><name><name>pluginPath</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>origPath</name><index>[<expr>0</expr>]</index></name> = <call><name>MAP_DISKNUM_TO_LETTER</name><argument_list>(<argument><expr><name>origDiskNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>origPath</name><index>[<expr>1</expr>]</index></name> = ':'</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>origPath</name><index>[<expr>2</expr>]</index></name> = '\\'</expr>;</expr_stmt>

  <decl_stmt><decl><type><name>ULONG</name></type> <name>len</name> <init>= <expr><name>CCHMAXPATH</name>-3</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>APIRET</name></type> <name>rc</name> <init>= <expr><call><name>DosQueryCurrentDir</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>&amp;<name><name>origPath</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>NO_ERROR</name> == <name>rc</name></expr></argument>,<argument><expr>"DosQueryCurrentDir failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>BOOL</name></type> <name>bChangedDir</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BOOL</name></type> <name>bChangedDisk</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>pluginDiskNum</name> != <name>origDiskNum</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rc</name> = <call><name>DosSetDefaultDisk</name><argument_list>(<argument><expr><name>pluginDiskNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>NO_ERROR</name> == <name>rc</name></expr></argument>,<argument><expr>"DosSetDefaultDisk failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bChangedDisk</name> = <name>TRUE</name></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><call><name>stricmp</name><argument_list>(<argument><expr><name>origPath</name></expr></argument>, <argument><expr><name>pluginPath</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rc</name> = <call><name>DosSetCurrentDir</name><argument_list>(<argument><expr><name>pluginPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>NO_ERROR</name> == <name>rc</name></expr></argument>,<argument><expr>"DosSetCurrentDir failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bChangedDir</name> = <name>TRUE</name></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>pfnInitialize</name><argument_list>(<argument><expr>&amp;(<name><name>nsNPAPIPlugin</name>::<name>CALLBACKS</name></name>)</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>bChangedDisk</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rc</name>= <call><name>DosSetDefaultDisk</name><argument_list>(<argument><expr><name>origDiskNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>NO_ERROR</name> == <name>rc</name></expr></argument>,<argument><expr>"DosSetDefaultDisk failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr><name>bChangedDir</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rc</name> = <call><name>DosSetCurrentDir</name><argument_list>(<argument><expr><name>origPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>NO_ERROR</name> == <name>rc</name></expr></argument>,<argument><expr>"DosSetCurrentDir failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr>!<call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return>
  }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>short</name></type> <name>appRefNum</name> <init>= <expr><call><name>::<name>CurResFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>short</name></type> <name>pluginRefNum</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name></type> <name>pluginPath</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_NewNativeLocalFile</name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>aFullPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>,
                        <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>pluginPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>nsPluginFile</name></type> <name>pluginFile</name><parameter_list>(<param><decl><type><name>pluginPath</name></type></decl></param>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>pluginRefNum</name> = <call><name><name>pluginFile</name>.<name>OpenPluginResource</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsNPAPIPlugin</name>*</type> <name>plugin</name> <init>= <expr>new <call><name>nsNPAPIPlugin</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aLibrary</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>::<name>UseResFile</name></name><argument_list>(<argument><expr><name>appRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>plugin</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <expr_stmt><expr>*<name>aResult</name> = <name>plugin</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name>(*<name>aResult</name>)-&gt;<name>Initialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr>*<name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>plugin</name>-&gt;<name>SetPluginRefNum</name></name><argument_list>(<argument><expr><name>pluginRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_BEOS</name></cpp:ifdef>
  <comment type="line">// I just copied UNIX version.</comment>
  <comment type="line">// Makoto Hamanaka &lt;VYA04230@nifty.com&gt;</comment>

  <decl_stmt><decl><type><name>nsNPAPIPlugin</name> *</type><name>plptr</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>NPPluginFuncs</name></type> <name>callbacks</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>(<name>void</name>*) &amp;<name>callbacks</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks</name>.<name>size</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>NP_PLUGINSHUTDOWN</name></type> <name>pfnShutdown</name> <init>=
    <expr>(<name>NP_PLUGINSHUTDOWN</name>)<call><name>PR_FindSymbol</name><argument_list>(<argument><expr><name>aLibrary</name></expr></argument>, <argument><expr>"NP_Shutdown"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// create the new plugin handler</comment>
  <expr_stmt><expr>*<name>aResult</name> = <name>plptr</name> = new <call><name>nsNPAPIPlugin</name><argument_list>(<argument><expr>&amp;<name>callbacks</name></expr></argument>, <argument><expr><name>aLibrary</name></expr></argument>, <argument><expr><name>pfnShutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>*<name>aResult</name> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// we must init here because the plugin may call NPN functions</comment>
  <comment type="line">// when we call into the NP_Initialize entry point - NPN functions</comment>
  <comment type="line">// require that mBrowserManager be set up</comment>
  <expr_stmt><expr><call><name><name>plptr</name>-&gt;<name>Initialize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>NP_PLUGINUNIXINIT</name></type> <name>pfnInitialize</name> <init>=
    <expr>(<name>NP_PLUGINUNIXINIT</name>)<call><name>PR_FindSymbol</name><argument_list>(<argument><expr><name>aLibrary</name></expr></argument>, <argument><expr>"NP_Initialize"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>pfnInitialize</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <if>if <condition>(<expr><call><name>pfnInitialize</name><argument_list>(<argument><expr>&amp;(<name><name>nsNPAPIPlugin</name>::<name>CALLBACKS</name></name>)</expr></argument>,<argument><expr>&amp;<name>callbacks</name></expr></argument>)</argument_list></call> != <name>NS_OK</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <comment type="line">// now copy function table back to nsNPAPIPlugin instance</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>(<name>void</name>*) &amp;(<name><name>plptr</name>-&gt;<name>fCallbacks</name></name>)</expr></argument>, <argument><expr>(<name>void</name>*)&amp;<name>callbacks</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsNPAPIPlugin</name>::<name>CreateInstance</name></name><parameter_list>(<param><decl><type><name>nsISupports</name> *</type><name>aOuter</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsIID</name> &amp;</type><name>aIID</name></decl></param>,
                           <param><decl><type><name>void</name> **</type><name>aResult</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>aResult</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_NULL_POINTER</name></expr>;</return></then></if>

  <expr_stmt><expr>*<name>aResult</name> = <name>NULL</name></expr>;</expr_stmt>

  <comment type="line">// XXX This is suspicuous!</comment>
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsNPAPIPluginInstance</name></expr></argument>&gt;</argument_list></name></type> <name>inst</name> <init>=
    <expr>new <call><name>nsNPAPIPluginInstance</name><argument_list>(<argument><expr>&amp;<name>fCallbacks</name></expr></argument>, <argument><expr><name>fLibrary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>inst</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <return>return <expr><call><name><name>inst</name>-&gt;<name>QueryInterface</name></name><argument_list>(<argument><expr><name>aIID</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsNPAPIPlugin</name>::<name>LockFactory</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aLock</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Not implemented in simplest case.</comment>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_METHOD</name></type>
<name><name>nsNPAPIPlugin</name>::<name>CreatePluginInstance</name></name><parameter_list>(<param><decl><type><name>nsISupports</name> *</type><name>aOuter</name></decl></param>, <param><decl><type><name>REFNSIID</name></type> <name>aIID</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aPluginMIMEType</name></decl></param>, <param><decl><type><name>void</name> **</type><name>aResult</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>CreateInstance</name><argument_list>(<argument><expr><name>aOuter</name></expr></argument>, <argument><expr><name>aIID</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsNPAPIPlugin</name>::<name>Initialize</name></name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>fLibrary</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsNPAPIPlugin</name>::<name>Shutdown</name></name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NPP_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_BASIC</name></expr></argument>,
                 <argument><expr>("NPP Shutdown to be called: this=%p\n", <name>this</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>fShutdownEntry</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call>(*<name>fShutdownEntry</name>)<argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>fPluginRefNum</name> &gt; 0</expr>)</condition><then>
      <expr_stmt><expr><call><name>::<name>CloseResFile</name></name><argument_list>(<argument><expr><name>fPluginRefNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>NS_TRY_SAFE_CALL_VOID</name><argument_list>(<argument><expr><call><name>fShutdownEntry</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fLibrary</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>fShutdownEntry</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name>PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>,
             <argument><expr>("NPAPIPlugin Shutdown done, this=%p", <name>this</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsNPAPIPlugin</name>::<name>GetMIMEDescription</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>* *</type><name>resultingDesc</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>const <name>char</name>* <call>(*<name>npGetMIMEDescription</name>)<argument_list>()</argument_list></call> =
    (const <name>char</name>* <call>(*)<argument_list>()</argument_list></call>) <call><name>PR_FindFunctionSymbol</name><argument_list>(<argument><expr><name>fLibrary</name></expr></argument>, <argument><expr>"NP_GetMIMEDescription"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>resultingDesc</name> = <name>npGetMIMEDescription</name> ? <call><name>npGetMIMEDescription</name><argument_list>()</argument_list></call> : ""</expr>;</expr_stmt>

  <expr_stmt><expr><call><name>PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>,
             <argument><expr>("nsNPAPIPlugin::GetMIMEDescription called: this=%p, result=%s\n",
              <name>this</name>, *<name>resultingDesc</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsNPAPIPlugin</name>::<name>GetValue</name></name><parameter_list>(<param><decl><type><name>nsPluginVariable</name></type> <name>variable</name></decl></param>, <param><decl><type><name>void</name> *</type><name>value</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>,
  <argument><expr>("nsNPAPIPlugin::GetValue called: this=%p, variable=%d\n", <name>this</name>, <name>variable</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><call><name>NPError</name> <argument_list>(<argument><expr>*<name>npGetValue</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name>*</expr></argument>, <argument><expr><name>nsPluginVariable</name></expr></argument>, <argument><expr><name>void</name>*</expr></argument>)</argument_list></call> =
    (<call><call><name>NPError</name> <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name>*</expr></argument>, <argument><expr><name>nsPluginVariable</name></expr></argument>, <argument><expr><name>void</name>*</expr></argument>)</argument_list></call>) <call><name>PR_FindFunctionSymbol</name><argument_list>(<argument><expr><name>fLibrary</name></expr></argument>,
                                                                <argument><expr>"NP_GetValue"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>npGetValue</name> &amp;&amp; <name>NPERR_NO_ERROR</name> == <call><name>npGetValue</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>variable</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<comment type="line">// Create a new NPP GET or POST (given in the type argument) url</comment>
<comment type="line">// stream that may have a notify callback</comment>
<decl_stmt><decl><type><name>NPError</name></type>
<name>MakeNewNPAPIStreamInternal</name><argument_list>(<argument><expr><name>NPP</name> <name>npp</name></expr></argument>, <argument><expr>const <name>char</name> *<name>relativeURL</name></expr></argument>, <argument><expr>const <name>char</name> *<name>target</name></expr></argument>,
                          <argument><expr><name>eNPPStreamTypeInternal</name> <name>type</name></expr></argument>,
                          <argument><expr><name>PRBool</name> <name>bDoNotify</name> = <name>PR_FALSE</name></expr></argument>,
                          <argument><expr><name>void</name> *<name>notifyData</name> = <name>nsnull</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>len</name> = 0</expr></argument>,
                          <argument><expr>const <name>char</name> *<name>buf</name> = <name>nsnull</name></expr></argument>, <argument><expr><name>NPBool</name> <name>file</name> = <name>PR_FALSE</name></expr></argument>)</argument_list>
<argument_list>{
  if <argument><expr>(!<name>npp</name>)</expr></argument>
    <return>return <expr><name>NPERR_INVALID_INSTANCE_ERROR</name></expr>;</return></argument_list></decl></decl_stmt>

  <function_decl><type><name>PluginDestructionGuard</name></type> <name>guard</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>nsIPluginInstance</name> *</type><name>inst</name> <init>= <expr>(<name>nsIPluginInstance</name> *) <name><name>npp</name>-&gt;<name>ndata</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr>"null instance"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>inst</name></expr>)</condition><then>
    <return>return <expr><name>NPERR_INVALID_INSTANCE_ERROR</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPluginManager</name></expr></argument>&gt;</argument_list></name></type> <name>pm</name> <init>= <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>kPluginManagerCID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>pm</name></expr></argument>, <argument><expr>"failed to get plugin manager"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>pm</name></expr>)</condition><then> <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPluginStreamListener</name></expr></argument>&gt;</argument_list></name></type> <name>listener</name></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>target</name></expr>)</condition><then>
    <expr_stmt><expr>((<name>nsNPAPIPluginInstance</name>*)<name>inst</name>)-&gt;<call><name>NewNotifyStream</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr></argument>,
                                                    <argument><expr><name>notifyData</name></expr></argument>,
                                                    <argument><expr><name>bDoNotify</name></expr></argument>, <argument><expr><name>relativeURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
  <case>case <expr><name>eNPPStreamTypeInternal_Get</name></expr>:
    <block>{
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name><name>pm</name>-&gt;<name>GetURL</name></name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>relativeURL</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return></then></if>
      <break>break;</break>
    }</block>
  </case><case>case <expr><name>eNPPStreamTypeInternal_Post</name></expr>:
    <block>{
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name><name>pm</name>-&gt;<name>PostURL</name></name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>relativeURL</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
                                <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return></then></if>
      <break>break;</break>
    }</block>
  </case><default>default:
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"how'd I get here"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </default>}</block></switch>

  <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
}

<comment type="line">//</comment>
<comment type="line">// Static callbacks that get routed back through the new C++ API</comment>
<comment type="line">//</comment>

NPError <function><type><name>NP_CALLBACK</name></type>
<name>_geturl</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>relativeURL</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>target</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_geturl called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NPERR_INVALID_PARAM</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>,
  <argument><expr>("NPN_GetURL: npp=%p, target=%s, url=%s\n", (<name>void</name> *)<name>npp</name>, <name>target</name>,
   <name>relativeURL</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>PluginDestructionGuard</name></type> <name>guard</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// Block Adobe Acrobat from loading URLs that are not http:, https:,</comment>
  <comment type="line">// or ftp: URLs if the given target is null.</comment>
  <if>if <condition>(<expr>!<name>target</name> &amp;&amp; <name>relativeURL</name> &amp;&amp;
      (<call><name>strncmp</name><argument_list>(<argument><expr><name>relativeURL</name></expr></argument>, <argument><expr>"http:"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> != 0) &amp;&amp;
      (<call><name>strncmp</name><argument_list>(<argument><expr><name>relativeURL</name></expr></argument>, <argument><expr>"https:"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call> != 0) &amp;&amp;
      (<call><name>strncmp</name><argument_list>(<argument><expr><name>relativeURL</name></expr></argument>, <argument><expr>"ftp:"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> != 0)</expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsNPAPIPluginInstance</name> *</type><name>inst</name> <init>= <expr>(<name>nsNPAPIPluginInstance</name> *) <name><name>npp</name>-&gt;<name>ndata</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name><name>nsPluginHostImpl</name>::<name>GetPluginName</name></name><argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>name</name> &amp;&amp; <call><name>strstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"Adobe"</expr></argument>)</argument_list></call> &amp;&amp; <call><name>strstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"Acrobat"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><call><name>MakeNewNPAPIStreamInternal</name><argument_list>(<argument><expr><name>npp</name></expr></argument>, <argument><expr><name>relativeURL</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
                                    <argument><expr><name>eNPPStreamTypeInternal_Get</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NPError</name> <name>NP_CALLBACK</name></type>
<name>_geturlnotify</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>relativeURL</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>target</name></decl></param>,
              <param><decl><type><name>void</name>*</type> <name>notifyData</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_geturlnotify called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NPERR_INVALID_PARAM</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>,
    <argument><expr>("NPN_GetURLNotify: npp=%p, target=%s, notify=%p, url=%s\n", (<name>void</name>*)<name>npp</name>,
     <name>target</name>, <name>notifyData</name>, <name>relativeURL</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>PluginDestructionGuard</name></type> <name>guard</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <return>return <expr><call><name>MakeNewNPAPIStreamInternal</name><argument_list>(<argument><expr><name>npp</name></expr></argument>, <argument><expr><name>relativeURL</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
                                    <argument><expr><name>eNPPStreamTypeInternal_Get</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>,
                                    <argument><expr><name>notifyData</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NPError</name> <name>NP_CALLBACK</name></type>
<name>_posturlnotify</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>relativeURL</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
               <param><decl><type><name>uint32_t</name></type> <name>len</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>NPBool</name></type> <name>file</name></decl></param>, <param><decl><type><name>void</name> *</type><name>notifyData</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_posturlnotify called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NPERR_INVALID_PARAM</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>,
                 <argument><expr>("NPN_PostURLNotify: npp=%p, target=%s, len=%d, file=%d, "
                  "notify=%p, url=%s, buf=%s\n",
                  (<name>void</name>*)<name>npp</name>, <name>target</name>, <name>len</name>, <name>file</name>, <name>notifyData</name>, <name>relativeURL</name>,
                  <name>buf</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>PluginDestructionGuard</name></type> <name>guard</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <return>return <expr><call><name>MakeNewNPAPIStreamInternal</name><argument_list>(<argument><expr><name>npp</name></expr></argument>, <argument><expr><name>relativeURL</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
                                    <argument><expr><name>eNPPStreamTypeInternal_Post</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>,
                                    <argument><expr><name>notifyData</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NPError</name> <name>NP_CALLBACK</name></type>
<name>_posturl</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>relativeURL</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
         <param><decl><type><name>uint32_t</name></type> <name>len</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>NPBool</name></type> <name>file</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_posturl called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NPERR_INVALID_PARAM</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>,
                 <argument><expr>("NPN_PostURL: npp=%p, target=%s, file=%d, len=%d, url=%s, "
                  "buf=%s\n",
                  (<name>void</name>*)<name>npp</name>, <name>target</name>, <name>file</name>, <name>len</name>, <name>relativeURL</name>, <name>buf</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>PluginDestructionGuard</name></type> <name>guard</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <return>return <expr><call><name>MakeNewNPAPIStreamInternal</name><argument_list>(<argument><expr><name>npp</name></expr></argument>, <argument><expr><name>relativeURL</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
                                    <argument><expr><name>eNPPStreamTypeInternal_Post</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                                    <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">// A little helper class used to wrap up plugin manager streams (that is,</comment>
<comment type="line">// streams from the plugin to the browser).</comment>
<class>class <name>nsNPAPIStreamWrapper</name> <super>: <name>nsISupports</name></super>
<block>{<private type="default">
</private><public>public:
  <macro><name>NS_DECL_ISUPPORTS</name></macro>

</public><protected>protected:
  <decl_stmt><decl><type><name>nsIOutputStream</name> *</type><name>fStream</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>NPStream</name></type>        <name>fNPStream</name></decl>;</decl_stmt>

</protected><public>public:
  <constructor_decl><name>nsNPAPIStreamWrapper</name><parameter_list>(<param><decl><type><name>nsIOutputStream</name>*</type> <name>stream</name></decl></param>)</parameter_list>;</constructor_decl>
  <destructor_decl><name>~<name>nsNPAPIStreamWrapper</name></name><parameter_list>()</parameter_list>;</destructor_decl>

  <function_decl><type><name>void</name></type> <name>GetStream</name><parameter_list>(<param><decl><type><name>nsIOutputStream</name>* &amp;</type><name>result</name></decl></param>)</parameter_list>;</function_decl>
  <function><type><name>NPStream</name>*</type> <name>GetNPStream</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{ <return>return <expr>&amp;<name>fNPStream</name></expr>;</return> }</block></function>
</public>}</block>;</class>

<macro><name>NS_IMPL_ISUPPORTS1</name><argument_list>(<argument>nsNPAPIStreamWrapper</argument>, <argument>nsISupports</argument>)</argument_list></macro>

<constructor><name><name>nsNPAPIStreamWrapper</name>::<name>nsNPAPIStreamWrapper</name></name><parameter_list>(<param><decl><type><name>nsIOutputStream</name>*</type> <name>stream</name></decl></param>)</parameter_list>
<member_list>: <call><name>fStream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call>
</member_list><block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"bad stream"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>fStream</name> = <name>stream</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name>fStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>fNPStream</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fNPStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fNPStream</name>.<name>ndata</name></name> = (<name>void</name>*) <name>this</name></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>nsNPAPIStreamWrapper</name>::~<name>nsNPAPIStreamWrapper</name></name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>fStream</name>-&gt;<name>Close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_IF_RELEASE</name><argument_list>(<argument><expr><name>fStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<function><type><name>void</name></type>
<name><name>nsNPAPIStreamWrapper</name>::<name>GetStream</name></name><parameter_list>(<param><decl><type><name>nsIOutputStream</name>* &amp;</type><name>result</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>result</name> = <name>fStream</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr><name>fStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>NPError</name> <name>NP_CALLBACK</name></type>
<name>_newstream</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPMIMEType</name></type> <name>type</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>target</name></decl></param>, <param><decl><type><name>NPStream</name>* *</type><name>result</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_newstream called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NPERR_INVALID_PARAM</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>,
  <argument><expr>("NPN_NewStream: npp=%p, type=%s, target=%s\n", (<name>void</name>*)<name>npp</name>,
   (const <name>char</name> *)<name>type</name>, <name>target</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>NPError</name></type> <name>err</name> <init>= <expr><name>NPERR_INVALID_INSTANCE_ERROR</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>npp</name> &amp;&amp; <name><name>npp</name>-&gt;<name>ndata</name></name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsIPluginInstance</name> *</type><name>inst</name> <init>= <expr>(<name>nsIPluginInstance</name> *) <name><name>npp</name>-&gt;<name>ndata</name></name></expr></init></decl>;</decl_stmt>

    <function_decl><type><name>PluginDestructionGuard</name></type> <name>guard</name><parameter_list>(<param><decl><type><name>inst</name></type></decl></param>)</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIOutputStream</name></expr></argument>&gt;</argument_list></name></type> <name>stream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPluginInstancePeer</name></expr></argument>&gt;</argument_list></name></type> <name>peer</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>inst</name>-&gt;<name>GetPeer</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp;
      <name>peer</name> &amp;&amp;
      <call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>peer</name>-&gt;<name>NewStream</name></name><argument_list>(<argument><expr>(const <name>char</name>*) <name>type</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
                                   <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsNPAPIStreamWrapper</name>*</type> <name>wrapper</name> <init>= <expr>new <call><name>nsNPAPIStreamWrapper</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>wrapper</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>(*<name>result</name>) = <call><name><name>wrapper</name>-&gt;<name>GetNPStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> = <name>NPERR_NO_ERROR</name></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>err</name> = <name>NPERR_OUT_OF_MEMORY_ERROR</name></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>err</name> = <name>NPERR_GENERIC_ERROR</name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then></if>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>int32_t</name> <name>NP_CALLBACK</name></type>
<name>_write</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPStream</name> *</type><name>pstream</name></decl></param>, <param><decl><type><name>int32_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>void</name> *</type><name>buffer</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_write called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>,
                 <argument><expr>("NPN_Write: npp=%p, url=%s, len=%d, buffer=%s\n", (<name>void</name>*)<name>npp</name>,
                  <name><name>pstream</name>-&gt;<name>url</name></name>, <name>len</name>, (<name>char</name>*)<name>buffer</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// negative return indicates failure to the plugin</comment>
  <if>if <condition>(<expr>!<name>npp</name></expr>)</condition><then>
    <return>return <expr>-1</expr>;</return></then></if>

  <function_decl><type><name>PluginDestructionGuard</name></type> <name>guard</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>nsNPAPIStreamWrapper</name>*</type> <name>wrapper</name> <init>= <expr>(<name>nsNPAPIStreamWrapper</name>*) <name><name>pstream</name>-&gt;<name>ndata</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>wrapper</name></expr></argument>, <argument><expr>"null stream"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>wrapper</name></expr>)</condition><then>
    <return>return <expr>-1</expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsIOutputStream</name>*</type> <name>stream</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>wrapper</name>-&gt;<name>GetStream</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>stream</name>-&gt;<name>Write</name></name><argument_list>(<argument><expr>(<name>char</name> *)<name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>rv</name> != <name>NS_OK</name></expr>)</condition><then>
    <return>return <expr>-1</expr>;</return></then></if>

  <return>return <expr>(<name>int32_t</name>)<name>count</name></expr>;</return>
}</block></function>

<function><type><name>NPError</name> <name>NP_CALLBACK</name></type>
<name>_destroystream</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPStream</name> *</type><name>pstream</name></decl></param>, <param><decl><type><name>NPError</name></type> <name>reason</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_write called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NPERR_INVALID_PARAM</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>,
                 <argument><expr>("NPN_DestroyStream: npp=%p, url=%s, reason=%d\n", (<name>void</name>*)<name>npp</name>,
                  <name><name>pstream</name>-&gt;<name>url</name></name>, (<name>int</name>)<name>reason</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>npp</name></expr>)</condition><then>
    <return>return <expr><name>NPERR_INVALID_INSTANCE_ERROR</name></expr>;</return></then></if>

  <function_decl><type><name>PluginDestructionGuard</name></type> <name>guard</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPluginStreamListener</name></expr></argument>&gt;</argument_list></name></type> <name>listener</name> <init>=
    <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr>(<name>nsISupports</name> *)<name><name>pstream</name>-&gt;<name>ndata</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// DestroyStream can kill two kinds of streams: NPP derived and NPN derived.</comment>
  <comment type="line">// check to see if they're trying to kill a NPP stream</comment>
  <if>if <condition>(<expr><name>listener</name></expr>)</condition><then> <block>{
    <comment type="line">// Tell the stream listner that the stream is now gone.</comment>
    <expr_stmt><expr><call><name><name>listener</name>-&gt;<name>OnStopBinding</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>NS_BINDING_ABORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// FIXME: http://bugzilla.mozilla.org/show_bug.cgi?id=240131</comment>
    <comment type="line">//</comment>
    <comment type="line">// Is it ok to leave pstream-&gt;ndata set here, and who releases it</comment>
    <comment type="line">// (or is it even properly ref counted)? And who closes the stream</comment>
    <comment type="line">// etc?</comment>
  }</block></then> <else>else <block>{
    <decl_stmt><decl><type><name>nsNPAPIStreamWrapper</name>*</type> <name>wrapper</name> <init>= <expr>(<name>nsNPAPIStreamWrapper</name> *)<name><name>pstream</name>-&gt;<name>ndata</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>wrapper</name></expr></argument>, <argument><expr>"null wrapper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name>wrapper</name></expr>)</condition><then>
      <return>return <expr><name>NPERR_INVALID_PARAM</name></expr>;</return></then></if>

    <comment type="line">// This will release the wrapped nsIOutputStream.</comment>
    <expr_stmt><expr>delete <name>wrapper</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pstream</name>-&gt;<name>ndata</name></name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>void</name> <name>NP_CALLBACK</name></type>
<name>_status</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_status called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>, <argument><expr>("NPN_Status: npp=%p, message=%s\n",
                                     (<name>void</name>*)<name>npp</name>, <name>message</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>npp</name> || !<name><name>npp</name>-&gt;<name>ndata</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"_status: npp or npp-&gt;ndata == 0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsIPluginInstance</name> *</type><name>inst</name> <init>= <expr>(<name>nsIPluginInstance</name> *) <name><name>npp</name>-&gt;<name>ndata</name></name></expr></init></decl>;</decl_stmt>

  <function_decl><type><name>PluginDestructionGuard</name></type> <name>guard</name><parameter_list>(<param><decl><type><name>inst</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPluginInstancePeer</name></expr></argument>&gt;</argument_list></name></type> <name>peer</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>inst</name>-&gt;<name>GetPeer</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>peer</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>peer</name>-&gt;<name>ShowStatus</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name> <name>NP_CALLBACK</name></type>
<name>_memfree</name> <parameter_list>(<param><decl><type><name>void</name> *</type><name>ptr</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_memfree called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NOISY</name></expr></argument>, <argument><expr>("NPN_MemFree: ptr=%p\n", <name>ptr</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>ptr</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>nsMemory</name>::<name>Free</name></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name>uint32_t</name> <name>NP_CALLBACK</name></type>
<name>_memflush</name><parameter_list>(<param><decl><type><name>uint32_t</name></type> <name>size</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_memflush called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NOISY</name></expr></argument>, <argument><expr>("NPN_MemFlush: size=%d\n", <name>size</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>nsMemory</name>::<name>HeapMinimize</name></name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><name>void</name> <name>NP_CALLBACK</name></type>
<name>_reloadplugins</name><parameter_list>(<param><decl><type><name>NPBool</name></type> <name>reloadPages</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_reloadplugins called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>,
                 <argument><expr>("NPN_ReloadPlugins: reloadPages=%d\n", <name>reloadPages</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPluginManager</name></expr></argument>&gt;</argument_list></name></type> <name>pm</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>kPluginManagerCID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>pm</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <expr_stmt><expr><call><name><name>pm</name>-&gt;<name>ReloadPlugins</name></name><argument_list>(<argument><expr><name>reloadPages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name> <name>NP_CALLBACK</name></type>
<name>_invalidaterect</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPRect</name> *</type><name>invalidRect</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_invalidaterect called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>,
                 <argument><expr>("NPN_InvalidateRect: npp=%p, top=%d, left=%d, bottom=%d, "
                  "right=%d\n", (<name>void</name> *)<name>npp</name>, <name><name>invalidRect</name>-&gt;<name>top</name></name>,
                  <name><name>invalidRect</name>-&gt;<name>left</name></name>, <name><name>invalidRect</name>-&gt;<name>bottom</name></name>, <name><name>invalidRect</name>-&gt;<name>right</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>npp</name> || !<name><name>npp</name>-&gt;<name>ndata</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"_invalidaterect: npp or npp-&gt;ndata == 0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsIPluginInstance</name> *</type><name>inst</name> <init>= <expr>(<name>nsIPluginInstance</name> *) <name><name>npp</name>-&gt;<name>ndata</name></name></expr></init></decl>;</decl_stmt>

  <function_decl><type><name>PluginDestructionGuard</name></type> <name>guard</name><parameter_list>(<param><decl><type><name>inst</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPluginInstancePeer</name></expr></argument>&gt;</argument_list></name></type> <name>peer</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>inst</name>-&gt;<name>GetPeer</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>peer</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIWindowlessPluginInstancePeer</name></expr></argument>&gt;</argument_list></name></type> <name>wpeer</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>wpeer</name></expr>)</condition><then> <block>{
      <comment type="line">// XXX nsRect &amp; NPRect are structurally equivalent</comment>
      <expr_stmt><expr><call><name><name>wpeer</name>-&gt;<name>InvalidateRect</name></name><argument_list>(<argument><expr>(<name>nsPluginRect</name> *)<name>invalidRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
}</block></function>

<function><type><name>void</name> <name>NP_CALLBACK</name></type>
<name>_invalidateregion</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPRegion</name></type> <name>invalidRegion</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_invalidateregion called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>,
                 <argument><expr>("NPN_InvalidateRegion: npp=%p, region=%p\n", (<name>void</name>*)<name>npp</name>,
                  (<name>void</name>*)<name>invalidRegion</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>npp</name> || !<name><name>npp</name>-&gt;<name>ndata</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"_invalidateregion: npp or npp-&gt;ndata == 0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsIPluginInstance</name> *</type><name>inst</name> <init>= <expr>(<name>nsIPluginInstance</name> *)<name><name>npp</name>-&gt;<name>ndata</name></name></expr></init></decl>;</decl_stmt>

  <function_decl><type><name>PluginDestructionGuard</name></type> <name>guard</name><parameter_list>(<param><decl><type><name>inst</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPluginInstancePeer</name></expr></argument>&gt;</argument_list></name></type> <name>peer</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>inst</name>-&gt;<name>GetPeer</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>peer</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIWindowlessPluginInstancePeer</name></expr></argument>&gt;</argument_list></name></type> <name>wpeer</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>wpeer</name></expr>)</condition><then> <block>{
      <comment type="line">// nsPluginRegion &amp; NPRegion are typedef'd to the same thing</comment>
      <expr_stmt><expr><call><name><name>wpeer</name>-&gt;<name>InvalidateRegion</name></name><argument_list>(<argument><expr>(<name>nsPluginRegion</name>)<name>invalidRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
}</block></function>

<function><type><name>void</name> <name>NP_CALLBACK</name></type>
<name>_forceredraw</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_forceredraw called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>, <argument><expr>("NPN_ForceDraw: npp=%p\n", (<name>void</name>*)<name>npp</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>npp</name> || !<name><name>npp</name>-&gt;<name>ndata</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"_forceredraw: npp or npp-&gt;ndata == 0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsIPluginInstance</name> *</type><name>inst</name> <init>= <expr>(<name>nsIPluginInstance</name> *) <name><name>npp</name>-&gt;<name>ndata</name></name></expr></init></decl>;</decl_stmt>

  <function_decl><type><name>PluginDestructionGuard</name></type> <name>guard</name><parameter_list>(<param><decl><type><name>inst</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPluginInstancePeer</name></expr></argument>&gt;</argument_list></name></type> <name>peer</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>inst</name>-&gt;<name>GetPeer</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>peer</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIWindowlessPluginInstancePeer</name></expr></argument>&gt;</argument_list></name></type> <name>wpeer</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>wpeer</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>wpeer</name>-&gt;<name>ForceRedraw</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>nsIDocument</name> *</type>
<name>GetDocumentFromNPP</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>npp</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsNPAPIPluginInstance</name> *</type><name>inst</name> <init>= <expr>(<name>nsNPAPIPluginInstance</name> *)<name><name>npp</name>-&gt;<name>ndata</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>PluginDestructionGuard</name></type> <name>guard</name><parameter_list>(<param><decl><type><name>inst</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPluginInstancePeer</name></expr></argument>&gt;</argument_list></name></type> <name>pip</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>inst</name>-&gt;<name>GetPeer</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>pip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsPIPluginInstancePeer</name></expr></argument>&gt;</argument_list></name></type> <name>pp</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>pip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPluginInstanceOwner</name></expr></argument>&gt;</argument_list></name></type> <name>owner</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>pp</name>-&gt;<name>GetOwner</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>owner</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></type> <name>doc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>owner</name>-&gt;<name>GetDocument</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>doc</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSContext</name> *</type>
<name>GetJSContextFromDoc</name><parameter_list>(<param><decl><type><name>nsIDocument</name> *</type><name>doc</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIScriptGlobalObject</name> *</type><name>sgo</name> <init>= <expr><call><name><name>doc</name>-&gt;<name>GetScriptGlobalObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>sgo</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIScriptContext</name> *</type><name>scx</name> <init>= <expr><call><name><name>sgo</name>-&gt;<name>GetContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>scx</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr>(<name>JSContext</name> *)<call><name><name>scx</name>-&gt;<name>GetNativeContext</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSContext</name> *</type>
<name>GetJSContextFromNPP</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIDocument</name> *</type><name>doc</name> <init>= <expr><call><name>GetDocumentFromNPP</name><argument_list>(<argument><expr><name>npp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>GetJSContextFromDoc</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NPObject</name>* <name>NP_CALLBACK</name></type>
<name>_getwindowobject</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_getwindowobject called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name> <init>= <expr><call><name>GetJSContextFromNPP</name><argument_list>(<argument><expr><name>npp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Using ::JS_GetGlobalObject(cx) is ok here since the window we</comment>
  <comment type="line">// want to return here is the outer window, *not* the inner (since</comment>
  <comment type="line">// we don't know what the plugin will do with it).</comment>
  <return>return <expr><call><name><name>nsJSObjWrapper</name>::<name>GetNewOrUsed</name></name><argument_list>(<argument><expr><name>npp</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>::<name>JS_GetGlobalObject</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NPObject</name>* <name>NP_CALLBACK</name></type>
<name>_getpluginelement</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_getpluginelement called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name>nsIDOMElement</name> *</type><name>elementp</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>NPError</name></type> <name>nperr</name> <init>= <expr><call><name>_getvalue</name><argument_list>(<argument><expr><name>npp</name></expr></argument>, <argument><expr><name>NPNVDOMElement</name></expr></argument>, <argument><expr>&amp;<name>elementp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>nperr</name> != <name>NPERR_NO_ERROR</name></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// Pass ownership of elementp to element</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>element</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>element</name>.<name>swap</name></name><argument_list>(<argument><expr><name>elementp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name> <init>= <expr><call><name>GetJSContextFromNPP</name><argument_list>(<argument><expr><name>npp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXPConnect</name></expr></argument>&gt;</argument_list></name></type> <name>xpc</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><call><name><name>nsIXPConnect</name>::<name>GetCID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>xpc</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXPConnectJSObjectHolder</name></expr></argument>&gt;</argument_list></name></type> <name>holder</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>xpc</name>-&gt;<name>WrapNative</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>::<name>JS_GetGlobalObject</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>element</name></expr></argument>,
                  <argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsIDOMElement</name></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>holder</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>JSObject</name>*</type> <name>obj</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>holder</name>-&gt;<name>GetJSObject</name></name><argument_list>(<argument><expr>&amp;<name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>nsJSObjWrapper</name>::<name>GetNewOrUsed</name></name><argument_list>(<argument><expr><name>npp</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>NPIdentifier</name></type>
<name>doGetIdentifier</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>NPUTF8</name>*</type> <name>name</name></decl></param>)</parameter_list>
<block>{
  <function_decl><type><name>NS_ConvertUTF8toUTF16</name></type> <name>utf16name</name><parameter_list>(<param><decl><type><name>name</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name> <init>= <expr><call><name>::<name>JS_InternUCStringN</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>jschar</name> *)<call><name><name>utf16name</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
                                       <argument><expr><call><name><name>utf16name</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
    <return>return <expr><name>NULL</name></expr>;</return></then></if>

  <return>return <expr>(<name>NPIdentifier</name>)<call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NPIdentifier</name> <name>NP_CALLBACK</name></type>
<name>_getstringidentifier</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>NPUTF8</name>*</type> <name>name</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>name</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>, <argument><expr>("NPN_getstringidentifier: passed null name")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_getstringidentifier called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIThreadJSContextStack</name></expr></argument>&gt;</argument_list></name></type> <name>stack</name> <init>=
    <expr><call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/js/xpc/ContextStack;1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>stack</name></expr>)</condition><then>
    <return>return <expr><name>NULL</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>stack</name>-&gt;<name>GetSafeJSContext</name></name><argument_list>(<argument><expr>&amp;<name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>cx</name></expr>)</condition><then>
    <return>return <expr><name>NULL</name></expr>;</return></then></if>

  <function_decl><type><name>JSAutoRequest</name></type> <name>ar</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>)</parameter_list>;</function_decl>
  <return>return <expr><call><name>doGetIdentifier</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name> <name>NP_CALLBACK</name></type>
<name>_getstringidentifiers</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>NPUTF8</name>**</type> <name>names</name></decl></param>, <param><decl><type><name>int32_t</name></type> <name>nameCount</name></decl></param>,
                      <param><decl><type><name>NPIdentifier</name> *</type><name>identifiers</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_getstringidentifiers called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIThreadJSContextStack</name></expr></argument>&gt;</argument_list></name></type> <name>stack</name> <init>=
    <expr><call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/js/xpc/ContextStack;1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>stack</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>stack</name>-&gt;<name>GetSafeJSContext</name></name><argument_list>(<argument><expr>&amp;<name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>cx</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <function_decl><type><name>JSAutoRequest</name></type> <name>ar</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>)</parameter_list>;</function_decl>

  <for>for (<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>nameCount</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <if>if <condition>(<expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>identifiers</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>doGetIdentifier</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>, <argument><expr>("NPN_getstringidentifiers: passed null name")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>identifiers</name><index>[<expr><name>i</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></for>
}</block></function>

<function><type><name>NPIdentifier</name> <name>NP_CALLBACK</name></type>
<name>_getintidentifier</name><parameter_list>(<param><decl><type><name>int32_t</name></type> <name>intid</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_getstringidentifier called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr>(<name>NPIdentifier</name>)<call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name>intid</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NPUTF8</name>* <name>NP_CALLBACK</name></type>
<name>_utf8fromidentifier</name><parameter_list>(<param><decl><type><name>NPIdentifier</name></type> <name>identifier</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_utf8fromidentifier called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr>!<name>identifier</name></expr>)</condition><then>
    <return>return <expr><name>NULL</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>jsval</name></type> <name>v</name> <init>= <expr>(<name>jsval</name>)<name>identifier</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name> <init>= <expr><call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return
    <expr><call><name>ToNewUTF8String</name><argument_list>(<argument><expr><call><name>nsDependentString</name><argument_list>(<argument><expr>(<name>PRUnichar</name> *)<call><name>::<name>JS_GetStringChars</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><call><name>::<name>JS_GetStringLength</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int32_t</name> <name>NP_CALLBACK</name></type>
<name>_intfromidentifier</name><parameter_list>(<param><decl><type><name>NPIdentifier</name></type> <name>identifier</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_intfromidentifier called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <decl_stmt><decl><type><name>jsval</name></type> <name>v</name> <init>= <expr>(<name>jsval</name>)<name>identifier</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<call><name>JSVAL_IS_INT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_INT32_MIN</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>bool</name> <name>NP_CALLBACK</name></type>
<name>_identifierisstring</name><parameter_list>(<param><decl><type><name>NPIdentifier</name></type> <name>identifier</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_identifierisstring called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <decl_stmt><decl><type><name>jsval</name></type> <name>v</name> <init>= <expr>(<name>jsval</name>)<name>identifier</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NPObject</name>* <name>NP_CALLBACK</name></type>
<name>_createobject</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPClass</name>*</type> <name>aClass</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_createobject called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr>!<name>npp</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Null npp passed to _createobject()!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <function_decl><type><name>PluginDestructionGuard</name></type> <name>guard</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <if>if <condition>(<expr>!<name>aClass</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Null class passed to _createobject()!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <function_decl><type><name>NPPAutoPusher</name></type> <name>nppPusher</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>NPObject</name> *</type><name>npobj</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>aClass</name>-&gt;<name>allocate</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>npobj</name> = <call><name><name>aClass</name>-&gt;<name>allocate</name></name><argument_list>(<argument><expr><name>npp</name></expr></argument>, <argument><expr><name>aClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><name>npobj</name> = (<name>NPObject</name> *)<call><name>PR_Malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NPObject</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <if>if <condition>(<expr><name>npobj</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name><name>npobj</name>-&gt;<name>_class</name></name> = <name>aClass</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>npobj</name>-&gt;<name>referenceCount</name></name> = 1</expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NOISY</name></expr></argument>,
                 <argument><expr>("Created NPObject %p, NPClass %p\n", <name>npobj</name>, <name>aClass</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>npobj</name></expr>;</return>
}</block></function>

<function><type><name>NPObject</name>* <name>NP_CALLBACK</name></type>
<name>_retainobject</name><parameter_list>(<param><decl><type><name>NPObject</name>*</type> <name>npobj</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_retainobject called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr><name>npobj</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PR_AtomicIncrement</name><argument_list>(<argument><expr>(<name>PRInt32</name>*)&amp;<name><name>npobj</name>-&gt;<name>referenceCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>npobj</name></expr>;</return>
}</block></function>

<function><type><name>void</name> <name>NP_CALLBACK</name></type>
<name>_releaseobject</name><parameter_list>(<param><decl><type><name>NPObject</name>*</type> <name>npobj</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_releaseobject called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr>!<name>npobj</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>refCnt</name> <init>= <expr><call><name>PR_AtomicDecrement</name><argument_list>(<argument><expr>(<name>PRInt32</name>*)&amp;<name><name>npobj</name>-&gt;<name>referenceCount</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>refCnt</name> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>nsNPObjWrapper</name>::<name>OnDestroy</name></name><argument_list>(<argument><expr><name>npobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NOISY</name></expr></argument>,
                   <argument><expr>("Deleting NPObject %p, refcount hit 0\n", <name>npobj</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>npobj</name>-&gt;<name>_class</name></name> &amp;&amp; <name><name>npobj</name>-&gt;<name>_class</name>-&gt;<name>deallocate</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>npobj</name>-&gt;<name>_class</name>-&gt;<name>deallocate</name></name><argument_list>(<argument><expr><name>npobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>PR_Free</name><argument_list>(<argument><expr><name>npobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then></if>
}</block></function>

<function><type><name>bool</name> <name>NP_CALLBACK</name></type>
<name>_invoke</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPObject</name>*</type> <name>npobj</name></decl></param>, <param><decl><type><name>NPIdentifier</name></type> <name>method</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>NPVariant</name> *</type><name>args</name></decl></param>,
        <param><decl><type><name>uint32_t</name></type> <name>argCount</name></decl></param>, <param><decl><type><name>NPVariant</name> *</type><name>result</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_invoke called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>false</expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr>!<name>npp</name> || !<name>npobj</name> || !<name><name>npobj</name>-&gt;<name>_class</name></name> || !<name><name>npobj</name>-&gt;<name>_class</name>-&gt;<name>invoke</name></name></expr>)</condition><then>
    <return>return <expr>false</expr>;</return></then></if>

  <function_decl><type><name>PluginDestructionGuard</name></type> <name>guard</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>NPPExceptionAutoHolder</name></type> <name>nppExceptionHolder</name></decl>;</decl_stmt>
  <function_decl><type><name>NPPAutoPusher</name></type> <name>nppPusher</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NOISY</name></expr></argument>,
                 <argument><expr>("NPN_Invoke(npp %p, npobj %p, method %p, args %d\n", <name>npp</name>,
                  <name>npobj</name>, <name>method</name>, <name>argCount</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>npobj</name>-&gt;<name>_class</name>-&gt;<name>invoke</name></name><argument_list>(<argument><expr><name>npobj</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>argCount</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>bool</name> <name>NP_CALLBACK</name></type>
<name>_invokeDefault</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPObject</name>*</type> <name>npobj</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>NPVariant</name> *</type><name>args</name></decl></param>,
               <param><decl><type><name>uint32_t</name></type> <name>argCount</name></decl></param>, <param><decl><type><name>NPVariant</name> *</type><name>result</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_invokedefault called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>false</expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr>!<name>npp</name> || !<name>npobj</name> || !<name><name>npobj</name>-&gt;<name>_class</name></name> || !<name><name>npobj</name>-&gt;<name>_class</name>-&gt;<name>invokeDefault</name></name></expr>)</condition><then>
    <return>return <expr>false</expr>;</return></then></if>

  <decl_stmt><decl><type><name>NPPExceptionAutoHolder</name></type> <name>nppExceptionHolder</name></decl>;</decl_stmt>
  <function_decl><type><name>NPPAutoPusher</name></type> <name>nppPusher</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NOISY</name></expr></argument>,
                 <argument><expr>("NPN_InvokeDefault(npp %p, npobj %p, args %d\n", <name>npp</name>,
                  <name>npobj</name>, <name>argCount</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>npobj</name>-&gt;<name>_class</name>-&gt;<name>invokeDefault</name></name><argument_list>(<argument><expr><name>npobj</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>argCount</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>bool</name> <name>NP_CALLBACK</name></type>
<name>_evaluate</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPObject</name>*</type> <name>npobj</name></decl></param>, <param><decl><type><name>NPString</name> *</type><name>script</name></decl></param>, <param><decl><type><name>NPVariant</name> *</type><name>result</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_evaluate called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>false</expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr>!<name>npp</name></expr>)</condition><then>
    <return>return <expr>false</expr>;</return></then></if>

  <function_decl><type><name>NPPAutoPusher</name></type> <name>nppPusher</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>nsIDocument</name> *</type><name>doc</name> <init>= <expr><call><name>GetDocumentFromNPP</name><argument_list>(<argument><expr><name>npp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name> <init>= <expr><call><name>GetJSContextFromDoc</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name> <init>=
    <expr><call><name><name>nsNPObjWrapper</name>::<name>GetNewOrUsed</name></name><argument_list>(<argument><expr><name>npp</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>npobj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then> <block>{
    <return>return <expr>false</expr>;</return>
  }</block></then></if>

  <comment type="line">// Root obj and the rval (below).</comment>
  <decl_stmt><decl><type><name>jsval</name></type> <name><name>vec</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>, <expr><name>JSVAL_NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JSAutoTempValueRooter</name></type> <name>tvr</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>NS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vec</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jsval</name> *</type><name>rval</name> <init>= <expr>&amp;<name><name>vec</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>result</name></expr>)</condition><then> <block>{
    <comment type="line">// Initialize the out param to void</comment>
    <expr_stmt><expr><call><name>VOID_TO_NPVARIANT</name><argument_list>(<argument><expr>*<name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr>!<name>script</name> || !<name><name>script</name>-&gt;<name>UTF8Length</name></name> || !<name><name>script</name>-&gt;<name>UTF8Characters</name></name></expr>)</condition><then> <block>{
    <comment type="line">// Nothing to evaluate.</comment>

    <return>return <expr>true</expr>;</return>
  }</block></then></if>

  <function_decl><type><name>NS_ConvertUTF8toUTF16</name></type> <name>utf16script</name><parameter_list>(<param><decl><type><name><name>script</name>-&gt;<name>UTF8Characters</name></name></type></decl></param>,
                                    <param><decl><type><name><name>script</name>-&gt;<name>UTF8Length</name></name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScriptContext</name></expr></argument>&gt;</argument_list></name></type> <name>scx</name> <init>= <expr><call><name>GetScriptContextFromJSContext</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>scx</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIPrincipal</name> *</type><name>principal</name> <init>= <expr><call><name><name>doc</name>-&gt;<name>NodePrincipal</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>specStr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>spec</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>principal</name>-&gt;<name>GetURI</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>uri</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>uri</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>specStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>spec</name> = <call><name><name>specStr</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <comment type="line">// No URI in a principal means it's the system principal. If the</comment>
    <comment type="line">// document URI is a chrome:// URI, pass that in as the URI of the</comment>
    <comment type="line">// script, else pass in null for the filename as there's no way to</comment>
    <comment type="line">// know where this document really came from. Passing in null here</comment>
    <comment type="line">// also means that the script gets treated by XPConnect as if it</comment>
    <comment type="line">// needs additional protection, which is what we want for unknown</comment>
    <comment type="line">// chrome code anyways.</comment>

    <expr_stmt><expr><name>uri</name> = <call><name><name>doc</name>-&gt;<name>GetDocumentURI</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>isChrome</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>uri</name> &amp;&amp; <call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>uri</name>-&gt;<name>SchemeIs</name></name><argument_list>(<argument><expr>"chrome"</expr></argument>, <argument><expr>&amp;<name>isChrome</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>isChrome</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>uri</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>specStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>spec</name> = <call><name><name>specStr</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>spec</name> = <name>nsnull</name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></else></if>

  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NOISY</name></expr></argument>,
                 <argument><expr>("NPN_Evaluate(npp %p, npobj %p, script &lt;&lt;&lt;%s&gt;&gt;&gt;) called\n",
                  <name>npp</name>, <name>npobj</name>, <name><name>script</name>-&gt;<name>UTF8Characters</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>scx</name>-&gt;<name>EvaluateStringWithValue</name></name><argument_list>(<argument><expr><name>utf16script</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>principal</name></expr></argument>,
                                             <argument><expr><name>spec</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp;
         (!<name>result</name> || <call><name>JSValToNPVariant</name><argument_list>(<argument><expr><name>npp</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>rval</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>

<function><type><name>bool</name> <name>NP_CALLBACK</name></type>
<name>_getproperty</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPObject</name>*</type> <name>npobj</name></decl></param>, <param><decl><type><name>NPIdentifier</name></type> <name>property</name></decl></param>,
             <param><decl><type><name>NPVariant</name> *</type><name>result</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_getproperty called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>false</expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr>!<name>npp</name> || !<name>npobj</name> || !<name><name>npobj</name>-&gt;<name>_class</name></name> || !<name><name>npobj</name>-&gt;<name>_class</name>-&gt;<name>getProperty</name></name></expr>)</condition><then>
    <return>return <expr>false</expr>;</return></then></if>

  <decl_stmt><decl><type><name>NPPExceptionAutoHolder</name></type> <name>nppExceptionHolder</name></decl>;</decl_stmt>
  <function_decl><type><name>NPPAutoPusher</name></type> <name>nppPusher</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NOISY</name></expr></argument>,
                 <argument><expr>("NPN_GetProperty(npp %p, npobj %p, property %p) called\n",
                  <name>npp</name>, <name>npobj</name>, <name>property</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>npobj</name>-&gt;<name>_class</name>-&gt;<name>getProperty</name></name><argument_list>(<argument><expr><name>npobj</name></expr></argument>, <argument><expr><name>property</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>bool</name> <name>NP_CALLBACK</name></type>
<name>_setproperty</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPObject</name>*</type> <name>npobj</name></decl></param>, <param><decl><type><name>NPIdentifier</name></type> <name>property</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>NPVariant</name> *</type><name>value</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_setproperty called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>false</expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr>!<name>npp</name> || !<name>npobj</name> || !<name><name>npobj</name>-&gt;<name>_class</name></name> || !<name><name>npobj</name>-&gt;<name>_class</name>-&gt;<name>setProperty</name></name></expr>)</condition><then>
    <return>return <expr>false</expr>;</return></then></if>

  <decl_stmt><decl><type><name>NPPExceptionAutoHolder</name></type> <name>nppExceptionHolder</name></decl>;</decl_stmt>
  <function_decl><type><name>NPPAutoPusher</name></type> <name>nppPusher</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NOISY</name></expr></argument>,
                 <argument><expr>("NPN_SetProperty(npp %p, npobj %p, property %p) called\n",
                  <name>npp</name>, <name>npobj</name>, <name>property</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>npobj</name>-&gt;<name>_class</name>-&gt;<name>setProperty</name></name><argument_list>(<argument><expr><name>npobj</name></expr></argument>, <argument><expr><name>property</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>bool</name> <name>NP_CALLBACK</name></type>
<name>_removeproperty</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPObject</name>*</type> <name>npobj</name></decl></param>, <param><decl><type><name>NPIdentifier</name></type> <name>property</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_removeproperty called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>false</expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr>!<name>npp</name> || !<name>npobj</name> || !<name><name>npobj</name>-&gt;<name>_class</name></name> || !<name><name>npobj</name>-&gt;<name>_class</name>-&gt;<name>removeProperty</name></name></expr>)</condition><then>
    <return>return <expr>false</expr>;</return></then></if>

  <decl_stmt><decl><type><name>NPPExceptionAutoHolder</name></type> <name>nppExceptionHolder</name></decl>;</decl_stmt>
  <function_decl><type><name>NPPAutoPusher</name></type> <name>nppPusher</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NOISY</name></expr></argument>,
                 <argument><expr>("NPN_RemoveProperty(npp %p, npobj %p, property %p) called\n",
                  <name>npp</name>, <name>npobj</name>, <name>property</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>npobj</name>-&gt;<name>_class</name>-&gt;<name>removeProperty</name></name><argument_list>(<argument><expr><name>npobj</name></expr></argument>, <argument><expr><name>property</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>bool</name> <name>NP_CALLBACK</name></type>
<name>_hasproperty</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPObject</name>*</type> <name>npobj</name></decl></param>, <param><decl><type><name>NPIdentifier</name></type> <name>propertyName</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_hasproperty called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>false</expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr>!<name>npp</name> || !<name>npobj</name> || !<name><name>npobj</name>-&gt;<name>_class</name></name> || !<name><name>npobj</name>-&gt;<name>_class</name>-&gt;<name>hasProperty</name></name></expr>)</condition><then>
    <return>return <expr>false</expr>;</return></then></if>

  <decl_stmt><decl><type><name>NPPExceptionAutoHolder</name></type> <name>nppExceptionHolder</name></decl>;</decl_stmt>
  <function_decl><type><name>NPPAutoPusher</name></type> <name>nppPusher</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NOISY</name></expr></argument>,
                 <argument><expr>("NPN_HasProperty(npp %p, npobj %p, property %p) called\n",
                  <name>npp</name>, <name>npobj</name>, <name>propertyName</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>npobj</name>-&gt;<name>_class</name>-&gt;<name>hasProperty</name></name><argument_list>(<argument><expr><name>npobj</name></expr></argument>, <argument><expr><name>propertyName</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>bool</name> <name>NP_CALLBACK</name></type>
<name>_hasmethod</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPObject</name>*</type> <name>npobj</name></decl></param>, <param><decl><type><name>NPIdentifier</name></type> <name>methodName</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_hasmethod called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>false</expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr>!<name>npp</name> || !<name>npobj</name> || !<name><name>npobj</name>-&gt;<name>_class</name></name> || !<name><name>npobj</name>-&gt;<name>_class</name>-&gt;<name>hasMethod</name></name></expr>)</condition><then>
    <return>return <expr>false</expr>;</return></then></if>

  <decl_stmt><decl><type><name>NPPExceptionAutoHolder</name></type> <name>nppExceptionHolder</name></decl>;</decl_stmt>
  <function_decl><type><name>NPPAutoPusher</name></type> <name>nppPusher</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NOISY</name></expr></argument>,
                 <argument><expr>("NPN_HasMethod(npp %p, npobj %p, property %p) called\n",
                  <name>npp</name>, <name>npobj</name>, <name>methodName</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>npobj</name>-&gt;<name>_class</name>-&gt;<name>hasMethod</name></name><argument_list>(<argument><expr><name>npobj</name></expr></argument>, <argument><expr><name>methodName</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>bool</name> <name>NP_CALLBACK</name></type>
<name>_enumerate</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPObject</name> *</type><name>npobj</name></decl></param>, <param><decl><type><name>NPIdentifier</name> **</type><name>identifier</name></decl></param>,
           <param><decl><type><name>uint32_t</name> *</type><name>count</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_enumerate called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>false</expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr>!<name>npp</name> || !<name>npobj</name> || !<name><name>npobj</name>-&gt;<name>_class</name></name></expr>)</condition><then>
    <return>return <expr>false</expr>;</return></then></if>

  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NOISY</name></expr></argument>,
                 <argument><expr>("NPN_Enumerate(npp %p, npobj %p) called\n", <name>npp</name>, <name>npobj</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<call><name>NP_CLASS_STRUCT_VERSION_HAS_ENUM</name><argument_list>(<argument><expr><name><name>npobj</name>-&gt;<name>_class</name></name></expr></argument>)</argument_list></call> ||
      !<name><name>npobj</name>-&gt;<name>_class</name>-&gt;<name>enumerate</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>identifier</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr>*<name>count</name> = 0</expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>NPPExceptionAutoHolder</name></type> <name>nppExceptionHolder</name></decl>;</decl_stmt>
  <function_decl><type><name>NPPAutoPusher</name></type> <name>nppPusher</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <return>return <expr><call><name><name>npobj</name>-&gt;<name>_class</name>-&gt;<name>enumerate</name></name><argument_list>(<argument><expr><name>npobj</name></expr></argument>, <argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>bool</name> <name>NP_CALLBACK</name></type>
<name>_construct</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPObject</name>*</type> <name>npobj</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>NPVariant</name> *</type><name>args</name></decl></param>,
               <param><decl><type><name>uint32_t</name></type> <name>argCount</name></decl></param>, <param><decl><type><name>NPVariant</name> *</type><name>result</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_construct called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>false</expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr>!<name>npp</name> || !<name>npobj</name> || !<name><name>npobj</name>-&gt;<name>_class</name></name> ||
      !<call><name>NP_CLASS_STRUCT_VERSION_HAS_CTOR</name><argument_list>(<argument><expr><name><name>npobj</name>-&gt;<name>_class</name></name></expr></argument>)</argument_list></call> ||
      !<name><name>npobj</name>-&gt;<name>_class</name>-&gt;<name>construct</name></name></expr>)</condition><then> <block>{
    <return>return <expr>false</expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>NPPExceptionAutoHolder</name></type> <name>nppExceptionHolder</name></decl>;</decl_stmt>
  <function_decl><type><name>NPPAutoPusher</name></type> <name>nppPusher</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <return>return <expr><call><name><name>npobj</name>-&gt;<name>_class</name>-&gt;<name>construct</name></name><argument_list>(<argument><expr><name>npobj</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>argCount</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MOZ_MEMORY_WINDOWS</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>MOZ_MEMORY_WINCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <function_decl><type><name>size_t</name></type> <name>malloc_usable_size</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>ptr</name></decl></param>)</parameter_list>;</function_decl></extern>

<function><type><name>BOOL</name></type>
<name>InHeap</name><parameter_list>(<param><decl><type><name>HANDLE</name></type> <name>hHeap</name></decl></param>, <param><decl><type><name>LPVOID</name></type> <name>lpMem</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>BOOL</name></type> <name>success</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PROCESS_HEAP_ENTRY</name></type> <name>he</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>he</name>.<name>lpData</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>HeapWalk</name><argument_list>(<argument><expr><name>hHeap</name></expr></argument>, <argument><expr>&amp;<name>he</name></expr></argument>)</argument_list></call> != 0</expr>)</condition> <block>{
    <if>if <condition>(<expr><name><name>he</name>.<name>lpData</name></name> == <name>lpMem</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>success</name> = <name>TRUE</name></expr>;</expr_stmt>
      <break>break;</break>
    }</block></then></if>
  }</block></while>
  <expr_stmt><expr><call><name>HeapUnlock</name><argument_list>(<argument><expr><name>hHeap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>success</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name> <name>NP_CALLBACK</name></type>
<name>_releasevariantvalue</name><parameter_list>(<param><decl><type><name>NPVariant</name>*</type> <name>variant</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_releasevariantvalue called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <switch>switch <condition>(<expr><name><name>variant</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
  <case>case <expr><name>NPVariantType_Void</name></expr> :
  </case><case>case <expr><name>NPVariantType_Null</name></expr> :
  </case><case>case <expr><name>NPVariantType_Bool</name></expr> :
  </case><case>case <expr><name>NPVariantType_Int32</name></expr> :
  </case><case>case <expr><name>NPVariantType_Double</name></expr> :
    <break>break;</break>
  </case><case>case <expr><name>NPVariantType_String</name></expr> :
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>NPString</name> *</type><name>s</name> <init>= <expr>&amp;<call><name>NPVARIANT_TO_STRING</name><argument_list>(<argument><expr>*<name>variant</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name><name>s</name>-&gt;<name>UTF8Characters</name></name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MOZ_MEMORY_WINDOWS</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>MOZ_MEMORY_WINCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if>if <condition>(<expr><call><name>malloc_usable_size</name><argument_list>(<argument><expr>(<name>void</name> *)<name><name>s</name>-&gt;<name>UTF8Characters</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>PR_Free</name><argument_list>(<argument><expr>(<name>void</name> *)<name><name>s</name>-&gt;<name>UTF8Characters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <decl_stmt><decl><type><name>void</name> *</type><name>p</name> <init>= <expr>(<name>void</name> *)<name><name>s</name>-&gt;<name>UTF8Characters</name></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>DWORD</name></type> <name>nheaps</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>nsAutoTArray</name><argument_list>&lt;<argument><expr><name>HANDLE</name></expr></argument>, <argument><expr>50</expr></argument>&gt;</argument_list></name></type> <name>heaps</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>nheaps</name> = <call><name>GetProcessHeaps</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>heaps</name>.<name>Elements</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>heaps</name>.<name>AppendElements</name></name><argument_list>(<argument><expr><name>nheaps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>GetProcessHeaps</name><argument_list>(<argument><expr><name>nheaps</name></expr></argument>, <argument><expr><call><name><name>heaps</name>.<name>Elements</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for (<init><decl><type><name>DWORD</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>nheaps</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name>InHeap</name><argument_list>(<argument><expr><name><name>heaps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
              <expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><name><name>heaps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            }</block></then></if>
          }</block></for>
        }</block></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>PR_Free</name><argument_list>(<argument><expr>(<name>void</name> *)<name><name>s</name>-&gt;<name>UTF8Characters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      }</block></then></if>
      <break>break;</break>
    }</block>
  </case><case>case <expr><name>NPVariantType_Object</name></expr>:
    <block>{
      <decl_stmt><decl><type><name>NPObject</name> *</type><name>npobj</name> <init>= <expr><call><name>NPVARIANT_TO_OBJECT</name><argument_list>(<argument><expr>*<name>variant</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>npobj</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>_releaseobject</name><argument_list>(<argument><expr><name>npobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <break>break;</break>
    }</block>
  </case><default>default:
    <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Unknown NPVariant type!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </default>}</block></switch>

  <expr_stmt><expr><call><name>VOID_TO_NPVARIANT</name><argument_list>(<argument><expr>*<name>variant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>bool</name> <name>NP_CALLBACK</name></type>
<name>_tostring</name><parameter_list>(<param><decl><type><name>NPObject</name>*</type> <name>npobj</name></decl></param>, <param><decl><type><name>NPVariant</name> *</type><name>result</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Write me!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_tostring called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>false</expr>;</return>
  }</block></then></if>

  <return>return <expr>false</expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>gNPPException</name></decl>;</decl_stmt>

<function><type><name>void</name> <name>NP_CALLBACK</name></type>
<name>_setexception</name><parameter_list>(<param><decl><type><name>NPObject</name>*</type> <name>npobj</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>NPUTF8</name> *</type><name>message</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_setexception called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <if>if <condition>(<expr><name>gNPPException</name></expr>)</condition><then> <block>{
    <comment type="line">// If a plugin throws multiple exceptions, we'll only report the</comment>
    <comment type="line">// last one for now.</comment>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>gNPPException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><name>gNPPException</name> = <call><name>strdup</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>PeekException</name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr><name>gNPPException</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name>PopException</name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>gNPPException</name></expr></argument>, <argument><expr>"Uh, no NPP exception to pop!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>gNPPException</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>gNPPException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>gNPPException</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<constructor><name><name>NPPExceptionAutoHolder</name>::<name>NPPExceptionAutoHolder</name></name><parameter_list>()</parameter_list>
  <member_list>: <call><name>mOldException</name><argument_list>(<argument><expr><name>gNPPException</name></expr></argument>)</argument_list></call>
</member_list><block>{
  <expr_stmt><expr><name>gNPPException</name> = <name>nsnull</name></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>NPPExceptionAutoHolder</name>::~<name>NPPExceptionAutoHolder</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>gNPPException</name></expr></argument>, <argument><expr>"NPP exception not properly cleared!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>gNPPException</name> = <name>mOldException</name></expr>;</expr_stmt>
}</block></destructor>

<function><type><name>NPError</name> <name>NP_CALLBACK</name></type>
<name>_getvalue</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPNVariable</name></type> <name>variable</name></decl></param>, <param><decl><type><name>void</name> *</type><name>result</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_getvalue called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NPERR_INVALID_PARAM</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>, <argument><expr>("NPN_GetValue: npp=%p, var=%d\n",
                                     (<name>void</name>*)<name>npp</name>, (<name>int</name>)<name>variable</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>res</name></decl>;</decl_stmt>

  <function_decl><type><name>PluginDestructionGuard</name></type> <name>guard</name><parameter_list>(<param><decl><type><name>npp</name></type></decl></param>)</parameter_list>;</function_decl>

  <switch>switch<condition>(<expr><name>variable</name></expr>)</condition> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_UNIX</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>XP_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <case>case <expr><name>NPNVxDisplay</name></expr> : <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_WIDGET_GTK2</name></cpp:ifdef>
    <if>if <condition>(<expr><name>npp</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsNPAPIPluginInstance</name> *</type><name>inst</name> <init>= <expr>(<name>nsNPAPIPluginInstance</name> *) <name><name>npp</name>-&gt;<name>ndata</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>PRBool</name></type> <name>windowless</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>inst</name>-&gt;<name>GetValue</name></name><argument_list>(<argument><expr><name>nsPluginInstanceVariable_WindowlessBool</name></expr></argument>, <argument><expr>&amp;<name>windowless</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>NPBool</name></type> <name>needXEmbed</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>windowless</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>inst</name>-&gt;<name>GetValue</name></name><argument_list>(<argument><expr>(<name>nsPluginInstanceVariable</name>)<name>NPPVpluginNeedsXEmbed</name></expr></argument>, <argument><expr>&amp;<name>needXEmbed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><name>windowless</name> || <name>needXEmbed</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>(*(<name>Display</name> **)<name>result</name>) = <call><name>GDK_DISPLAY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
      }</block></then></if>
    }</block></then></if>
    <comment type="line">// adobe nppdf calls XtGetApplicationNameAndClass(display,</comment>
    <comment type="line">// &amp;instance, &amp;class) we have to init Xt toolkit before get</comment>
    <comment type="line">// XtDisplay just call gtk_xtbin_new(w,0) once</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name>GtkWidget</name> *</type><name>gtkXtBinHolder</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>gtkXtBinHolder</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>gtkXtBinHolder</name> = <call><name>gtk_xtbin_new</name><argument_list>(<argument><expr><call><name>gdk_get_default_root_window</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// it crashes on destroy, let it leak</comment>
      <comment type="line">// gtk_widget_destroy(gtkXtBinHolder);</comment>
    }</block></then></if>
    <expr_stmt><expr>(*(<name>Display</name> **)<name>result</name>) =  <call><name>GTK_XTBIN</name><argument_list>(<argument><expr><name>gtkXtBinHolder</name></expr></argument>)</argument_list></call>-&gt;<name>xtdisplay</name></expr>;</expr_stmt>
    <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return>
  }</block>

  </case><case>case <expr><name>NPNVxtAppContext</name></expr>:
    <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_WIN</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>XP_OS2</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>MOZ_WIDGET_GTK2</name></expr></argument>)</argument_list></call></expr></cpp:if>
  </case><case>case <expr><name>NPNVnetscapeWindow</name></expr>: <block>{
    <if>if <condition>(<expr>!<name>npp</name> || !<name><name>npp</name>-&gt;<name>ndata</name></name></expr>)</condition><then>
      <return>return <expr><name>NPERR_INVALID_INSTANCE_ERROR</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>nsNPAPIPluginInstance</name> *</type><name>inst</name> <init>= <expr>(<name>nsNPAPIPluginInstance</name> *) <name><name>npp</name>-&gt;<name>ndata</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPluginInstancePeer</name></expr></argument>&gt;</argument_list></name></type> <name>peer</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>inst</name>-&gt;<name>GetPeer</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp;
        <name>peer</name> &amp;&amp;
        <call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>peer</name>-&gt;<name>GetValue</name></name><argument_list>(<argument><expr><name>nsPluginInstancePeerVariable_NetscapeWindow</name></expr></argument>,
                                    <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return>
  }</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  </case><case>case <expr><name>NPNVjavascriptEnabledBool</name></expr>: <block>{
    <expr_stmt><expr>*(<name>NPBool</name>*)<name>result</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrefBranch</name></expr></argument>&gt;</argument_list></name></type> <name>prefs</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_PREFSERVICE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>prefs</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>PRBool</name></type> <name>js</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt><empty_stmt>;</empty_stmt>
      <expr_stmt><expr><name>res</name> = <call><name><name>prefs</name>-&gt;<name>GetBoolPref</name></name><argument_list>(<argument><expr>"javascript.enabled"</expr></argument>, <argument><expr>&amp;<name>js</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr>*(<name>NPBool</name>*)<name>result</name> = <name>js</name></expr>;</expr_stmt></then></if>
    }</block></then></if>
    <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
  }</block>

  </case><case>case <expr><name>NPNVasdEnabledBool</name></expr>:
    <expr_stmt><expr>*(<name>NPBool</name>*)<name>result</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>

  </case><case>case <expr><name>NPNVisOfflineBool</name></expr>: <block>{
    <decl_stmt><decl><type><name>PRBool</name></type> <name>offline</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIIOService</name></expr></argument>&gt;</argument_list></name></type> <name>ioservice</name> <init>=
      <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_IOSERVICE_CONTRACTID</name></expr></argument>, <argument><expr>&amp;<name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <expr_stmt><expr><name>res</name> = <call><name><name>ioservice</name>-&gt;<name>GetOffline</name></name><argument_list>(<argument><expr>&amp;<name>offline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return></then></if>

    <expr_stmt><expr>*(<name>NPBool</name>*)<name>result</name> = <name>offline</name></expr>;</expr_stmt>
    <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
  }</block>

  </case><case>case <expr><name>NPNVserviceManager</name></expr>: <block>{
    <decl_stmt><decl><type><name>nsIServiceManager</name> *</type> <name>sm</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> = <call><name>NS_GetServiceManager</name><argument_list>(<argument><expr>&amp;<name>sm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>*(<name>nsIServiceManager</name>**)<name>result</name> = <name>sm</name></expr>;</expr_stmt>
      <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return>
    }</block></else></if>
  }</block>

  </case><case>case <expr><name>NPNVDOMElement</name></expr>: <block>{
    <decl_stmt><decl><type><name>nsNPAPIPluginInstance</name> *</type><name>inst</name> <init>= <expr>(<name>nsNPAPIPluginInstance</name> *) <name><name>npp</name>-&gt;<name>ndata</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>NPERR_GENERIC_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPluginInstancePeer</name></expr></argument>&gt;</argument_list></name></type> <name>pip</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>inst</name>-&gt;<name>GetPeer</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>pip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPluginTagInfo2</name></expr></argument>&gt;</argument_list></name></type> <name>pti2</name> <argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>pip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>pti2</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>e</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>pti2</name>-&gt;<name>GetDOMElement</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>e</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*(<name>nsIDOMElement</name>**)<name>result</name> = <call><name><name>e</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
      }</block></then></if>
    }</block></then></if>
    <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return>
  }</block>

  </case><case>case <expr><name>NPNVDOMWindow</name></expr>: <block>{
    <decl_stmt><decl><type><name>nsNPAPIPluginInstance</name> *</type><name>inst</name> <init>= <expr>(<name>nsNPAPIPluginInstance</name> *)<name><name>npp</name>-&gt;<name>ndata</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>NPERR_GENERIC_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsIDOMWindow</name> *</type><name>domWindow</name> <init>= <expr><call><name><name>inst</name>-&gt;<name>GetDOMWindow</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>domWindow</name></expr>)</condition><then> <block>{
      <comment type="line">// Pass over ownership of domWindow to the caller.</comment>
      <expr_stmt><expr>(*(<name>nsIDOMWindow</name>**)<name>result</name>) = <name>domWindow</name></expr>;</expr_stmt>

      <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return>
  }</block>

  </case><case>case <expr><name>NPNVToolkit</name></expr>: <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_WIDGET_GTK2</name></cpp:ifdef>
    <expr_stmt><expr>*((<name>NPNToolkitType</name>*)<name>result</name>) = <name>NPNVGtk2</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr>*(<name>NPNToolkitType</name>*)<name>result</name></expr>)</condition><then>
        <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return></then></if>

    <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return>
  }</block>

  </case><case>case <expr><name>NPNVSupportsXEmbedBool</name></expr>: <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_WIDGET_GTK2</name></cpp:ifdef>
    <expr_stmt><expr>*(<name>NPBool</name>*)<name>result</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr>*(<name>NPBool</name>*)<name>result</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
  }</block>

  </case><case>case <expr><name>NPNVWindowNPObject</name></expr>: <block>{
    <expr_stmt><expr>*(<name>NPObject</name> **)<name>result</name> = <call><name>_getwindowobject</name><argument_list>(<argument><expr><name>npp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
  }</block>

  </case><case>case <expr><name>NPNVPluginElementNPObject</name></expr>: <block>{
    <expr_stmt><expr>*(<name>NPObject</name> **)<name>result</name> = <call><name>_getpluginelement</name><argument_list>(<argument><expr><name>npp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
  }</block>

  </case><case>case <expr><name>NPNVSupportsWindowless</name></expr>: <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_WIN</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>XP_MACOSX</name></expr></argument>)</argument_list></call> || (<call><name>defined</name><argument_list>(<argument><expr><name>MOZ_X11</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>MOZ_WIDGET_GTK2</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
    <expr_stmt><expr>*(<name>NPBool</name>*)<name>result</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr>*(<name>NPBool</name>*)<name>result</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
  }</block>

  </case><case>case <expr><name>NPNVprivateModeBool</name></expr>: <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrivateBrowsingService</name></expr></argument>&gt;</argument_list></name></type> <name>pbs</name> <init>= <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_PRIVATE_BROWSING_SERVICE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>pbs</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>PRBool</name></type> <name>enabled</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>pbs</name>-&gt;<name>GetPrivateBrowsingEnabled</name></name><argument_list>(<argument><expr>&amp;<name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>*(<name>NPBool</name>*)<name>result</name> = (<name>NPBool</name>)<name>enabled</name></expr>;</expr_stmt>
      <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return>
  }</block>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_MACOSX</name></cpp:ifdef>
  </case><case>case <expr><name>NPNVpluginDrawingModel</name></expr>: <block>{
    <if>if <condition>(<expr><name>npp</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsNPAPIPluginInstance</name> *</type><name>inst</name> <init>= <expr>(<name>nsNPAPIPluginInstance</name>*)<name><name>npp</name>-&gt;<name>ndata</name></name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>inst</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*(<name>NPDrawingModel</name>*)<name>result</name> = <call><name><name>inst</name>-&gt;<name>GetDrawingModel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
      }</block></then></if>
    }</block></then>
    <else>else <block>{
      <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return>
    }</block></else></if>
  }</block>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NP_NO_QUICKDRAW</name></cpp:ifndef>
  </case><case>case <expr><name>NPNVsupportsQuickDrawBool</name></expr>: <block>{
    <expr_stmt><expr>*(<name>NPBool</name>*)<name>result</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    
    <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
  }</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  </case><case>case <expr><name>NPNVsupportsCoreGraphicsBool</name></expr>: <block>{
    <expr_stmt><expr>*(<name>NPBool</name>*)<name>result</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    
    <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
  }</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  </case><default>default:
    <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return>
  </default>}</block></switch>
}</block></function>

<function><type><name>NPError</name> <name>NP_CALLBACK</name></type>
<name>_setvalue</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPPVariable</name></type> <name>variable</name></decl></param>, <param><decl><type><name>void</name> *</type><name>result</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_setvalue called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NPERR_INVALID_PARAM</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>, <argument><expr>("NPN_SetValue: npp=%p, var=%d\n",
                                     (<name>void</name>*)<name>npp</name>, (<name>int</name>)<name>variable</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>npp</name></expr>)</condition><then>
    <return>return <expr><name>NPERR_INVALID_INSTANCE_ERROR</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsNPAPIPluginInstance</name> *</type><name>inst</name> <init>= <expr>(<name>nsNPAPIPluginInstance</name> *) <name><name>npp</name>-&gt;<name>ndata</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr>"null instance"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>inst</name></expr>)</condition><then>
    <return>return <expr><name>NPERR_INVALID_INSTANCE_ERROR</name></expr>;</return></then></if>

  <function_decl><type><name>PluginDestructionGuard</name></type> <name>guard</name><parameter_list>(<param><decl><type><name>inst</name></type></decl></param>)</parameter_list>;</function_decl>

  <switch>switch <condition>(<expr><name>variable</name></expr>)</condition> <block>{

    <comment type="line">// we should keep backward compatibility with NPAPI where the</comment>
    <comment type="line">// actual pointer value is checked rather than its content</comment>
    <comment type="line">// when passing booleans</comment>
    <case>case <expr><name>NPPVpluginWindowBool</name></expr>: <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_MACOSX</name></cpp:ifdef>
      <comment type="line">// This setting doesn't apply to OS X (only to Windows and Unix/Linux).</comment>
      <comment type="line">// See https://developer.mozilla.org/En/NPN_SetValue#section_5.  Return</comment>
      <comment type="line">// NPERR_NO_ERROR here to conform to other browsers' behavior on OS X</comment>
      <comment type="line">// (e.g. Safari and Opera).</comment>
      <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <decl_stmt><decl><type><name>NPBool</name></type> <name>bWindowless</name> <init>= <expr>(<name>result</name> == <name>nsnull</name>)</expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>inst</name>-&gt;<name>SetWindowless</name></name><argument_list>(<argument><expr><name>bWindowless</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block>

    </case><case>case <expr><name>NPPVpluginTransparentBool</name></expr>: <block>{
      <decl_stmt><decl><type><name>NPBool</name></type> <name>bTransparent</name> <init>= <expr>(<name>result</name> != <name>nsnull</name>)</expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>inst</name>-&gt;<name>SetTransparent</name></name><argument_list>(<argument><expr><name>bTransparent</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>

    </case><case>case <expr><name>NPPVjavascriptPushCallerBool</name></expr>:
      <block>{
        <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIJSContextStack</name></expr></argument>&gt;</argument_list></name></type> <name>contextStack</name> <init>=
          <expr><call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/js/xpc/ContextStack;1"</expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>NPBool</name></type> <name>bPushCaller</name> <init>= <expr>(<name>result</name> != <name>nsnull</name>)</expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><name>bPushCaller</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPluginInstancePeer</name></expr></argument>&gt;</argument_list></name></type> <name>peer</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>inst</name>-&gt;<name>GetPeer</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>peer</name></expr>)</condition><then> <block>{
              <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPluginInstancePeer2</name></expr></argument>&gt;</argument_list></name></type> <name>peer2</name> <init>=
                <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <if>if <condition>(<expr><name>peer2</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>rv</name> = <call><name><name>peer2</name>-&gt;<name>GetJSContext</name></name><argument_list>(<argument><expr>&amp;<name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                  <expr_stmt><expr><name>rv</name> = <call><name><name>contextStack</name>-&gt;<name>Push</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
              }</block></then></if>
            }</block></then></if>
          }</block></then> <else>else <block>{
            <expr_stmt><expr><name>rv</name> = <call><name><name>contextStack</name>-&gt;<name>Pop</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></else></if>
        }</block></then></if>
        <return>return <expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> ? <name>NPERR_NO_ERROR</name> : <name>NPERR_GENERIC_ERROR</name></expr>;</return>
      }</block>

    </case><case>case <expr><name>NPPVpluginKeepLibraryInMemory</name></expr>: <block>{
      <decl_stmt><decl><type><name>NPBool</name></type> <name>bCached</name> <init>= <expr>(<name>result</name> != <name>nsnull</name>)</expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>inst</name>-&gt;<name>SetCached</name></name><argument_list>(<argument><expr><name>bCached</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>

    </case><case>case <expr><name>NPPVpluginWantsAllNetworkStreams</name></expr>: <block>{
      <decl_stmt><decl><type><name>PRBool</name></type> <name>bWantsAllNetworkStreams</name> <init>= <expr>(<name>result</name> != <name>nsnull</name>)</expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>inst</name>-&gt;<name>SetWantsAllNetworkStreams</name></name><argument_list>(<argument><expr><name>bWantsAllNetworkStreams</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_MACOSX</name></cpp:ifdef>
    </case><case>case <expr><name>NPPVpluginDrawingModel</name></expr>: <block>{
      <if>if <condition>(<expr><name>inst</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>dModelValue</name> <init>= <expr>(<name>int</name>)<name>result</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>inst</name>-&gt;<name>SetDrawingModel</name></name><argument_list>(<argument><expr>(<name>NPDrawingModel</name>)<name>dModelValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
      }</block></then>
      <else>else <block>{
        <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return>
      }</block></else></if>
    }</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    </case><default>default:
      <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return>
  </default>}</block></switch>
}</block></function>

<function><type><name>NPError</name> <name>NP_CALLBACK</name></type>
<name>_requestread</name><parameter_list>(<param><decl><type><name>NPStream</name> *</type><name>pstream</name></decl></param>, <param><decl><type><name>NPByteRange</name> *</type><name>rangeList</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_requestread called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NPERR_INVALID_PARAM</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>, <argument><expr>("NPN_RequestRead: stream=%p\n",
                                     (<name>void</name>*)<name>pstream</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PLUGIN_LOGGING</name></cpp:ifdef>
  <for>for(<init><decl><type><name>NPByteRange</name> *</type> <name>range</name> <init>= <expr><name>rangeList</name></expr></init></decl>;</init> <condition><expr><name>range</name> != <name>nsnull</name></expr>;</condition> <incr><expr><name>range</name> = <name><name>range</name>-&gt;<name>next</name></name></expr></incr>)
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name><name>nsPluginLogging</name>::<name>gNPNLog</name></name></expr></argument>,<argument><expr><name>PLUGIN_LOG_NOISY</name></expr></argument>,
    <argument><expr>("%i-%i", <name><name>range</name>-&gt;<name>offset</name></name>, <name><name>range</name>-&gt;<name>offset</name></name> + <name><name>range</name>-&gt;<name>length</name></name> - 1)</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

  <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name><name>nsPluginLogging</name>::<name>gNPNLog</name></name></expr></argument>,<argument><expr><name>PLUGIN_LOG_NOISY</name></expr></argument>, <argument><expr>("\n\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PR_LogFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if>if <condition>(<expr>!<name>pstream</name> || !<name>rangeList</name> || !<name><name>pstream</name>-&gt;<name>ndata</name></name></expr>)</condition><then>
    <return>return <expr><name>NPERR_INVALID_PARAM</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsNPAPIPluginStreamListener</name>*</type> <name>streamlistener</name> <init>= <expr>(<name>nsNPAPIPluginStreamListener</name>*)<name><name>pstream</name>-&gt;<name>ndata</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsPluginStreamType</name></type> <name>streamtype</name> <init>= <expr><name>nsPluginStreamType_Normal</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>streamlistener</name>-&gt;<name>GetStreamType</name></name><argument_list>(<argument><expr>&amp;<name>streamtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>streamtype</name> != <name>nsPluginStreamType_Seek</name></expr>)</condition><then>
    <return>return <expr><name>NPERR_STREAM_NOT_SEEKABLE</name></expr>;</return></then></if>

  <if>if <condition>(<expr><name><name>streamlistener</name>-&gt;<name>mStreamInfo</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>streamlistener</name>-&gt;<name>mStreamInfo</name>-&gt;<name>RequestRead</name></name><argument_list>(<argument><expr>(<name>nsByteRange</name> *)<name>rangeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// Deprecated, only stubbed out</comment>
<function><type><name>void</name>* <name>NP_CALLBACK</name></type> <comment type="block">/* OJI type: JRIEnv* */</comment>
<name>_getJavaEnv</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>, <argument><expr>("NPN_GetJavaEnv\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>const</specifier> <name>char</name> * <name>NP_CALLBACK</name></type>
<name>_useragent</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_useragent called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>, <argument><expr>("NPN_UserAgent: npp=%p\n", (<name>void</name>*)<name>npp</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPluginManager</name></expr></argument>&gt;</argument_list></name></type> <name>pm</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>kPluginManagerCID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>pm</name></expr>)</condition><then>
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>retstr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>pm</name>-&gt;<name>UserAgent</name></name><argument_list>(<argument><expr>&amp;<name>retstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>

  <return>return <expr><name>retstr</name></expr>;</return>
}</block></function>

<function><type><name>void</name> * <name>NP_CALLBACK</name></type>
<name>_memalloc</name> <parameter_list>(<param><decl><type><name>uint32_t</name></type> <name>size</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>,<argument><expr>("NPN_memalloc called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NOISY</name></expr></argument>, <argument><expr>("NPN_MemAlloc: size=%d\n", <name>size</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>nsMemory</name>::<name>Alloc</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">// Deprecated, only stubbed out</comment>
<function><type><name>void</name>* <name>NP_CALLBACK</name></type> <comment type="block">/* OJI type: jref */</comment>
<name>_getJavaPeer</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NORMAL</name></expr></argument>, <argument><expr>("NPN_GetJavaPeer: npp=%p\n", (<name>void</name>*)<name>npp</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><name>void</name> <name>NP_CALLBACK</name></type>
<name>_pushpopupsenabledstate</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>, <param><decl><type><name>NPBool</name></type> <name>enabled</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_pushpopupsenabledstate called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name>nsNPAPIPluginInstance</name> *</type><name>inst</name> <init>= <expr>(<name>nsNPAPIPluginInstance</name> *)<name><name>npp</name>-&gt;<name>ndata</name></name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>inst</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <expr_stmt><expr><call><name><name>inst</name>-&gt;<name>PushPopupsEnabledState</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name> <name>NP_CALLBACK</name></type>
<name>_poppopupsenabledstate</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>npp</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_ALWAYS</name></expr></argument>,<argument><expr>("NPN_poppopupsenabledstate called from the wrong thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name>nsNPAPIPluginInstance</name> *</type><name>inst</name> <init>= <expr>(<name>nsNPAPIPluginInstance</name> *)<name><name>npp</name>-&gt;<name>ndata</name></name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>inst</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <expr_stmt><expr><call><name><name>inst</name>-&gt;<name>PopPopupsEnabledState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<class>class <name>nsPluginThreadRunnable</name> <super>: <specifier>public</specifier> <name>nsRunnable</name>,
                               <specifier>public</specifier> <name>PRCList</name></super>
<block>{<private type="default">
</private><public>public:
  <constructor_decl><name>nsPluginThreadRunnable</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>, <param><decl><type><name>PluginThreadCallback</name></type> <name>func</name></decl></param>,
                         <param><decl><type><name>void</name> *</type><name>userData</name></decl></param>)</parameter_list>;</constructor_decl>
  <destructor_decl><specifier>virtual</specifier> <name>~<name>nsPluginThreadRunnable</name></name><parameter_list>()</parameter_list>;</destructor_decl>

  <function_decl><type><name>NS_IMETHOD</name></type> <name>Run</name><parameter_list>()</parameter_list>;</function_decl>

  <function><type><name>PRBool</name></type> <name>IsForInstance</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>)</parameter_list>
  <block>{
    <return>return <expr>(<name>mInstance</name> == <name>instance</name>)</expr>;</return>
  }</block></function>

  <function><type><name>void</name></type> <name>Invalidate</name><parameter_list>()</parameter_list>
  <block>{
    <expr_stmt><expr><name>mFunc</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>PRBool</name></type> <name>IsValid</name><parameter_list>()</parameter_list>
  <block>{
    <return>return <expr>(<name>mFunc</name> != <name>nsnull</name>)</expr>;</return>
  }</block></function>

</public><private>private:  
  <decl_stmt><decl><type><name>NPP</name></type> <name>mInstance</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PluginThreadCallback</name></type> <name>mFunc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>mUserData</name></decl>;</decl_stmt>
</private>}</block>;</class>

<constructor><name><name>nsPluginThreadRunnable</name>::<name>nsPluginThreadRunnable</name></name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>,
                                               <param><decl><type><name>PluginThreadCallback</name></type> <name>func</name></decl></param>,
                                               <param><decl><type><name>void</name> *</type><name>userData</name></decl></param>)</parameter_list>
  <member_list>: <call><name>mInstance</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call>, <call><name>mFunc</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call>, <call><name>mUserData</name><argument_list>(<argument><expr><name>userData</name></expr></argument>)</argument_list></call>
</member_list><block>{
  <if>if <condition>(<expr>!<name>sPluginThreadAsyncCallLock</name></expr>)</condition><then> <block>{
    <comment type="line">// Failed to create lock, not much we can do here then...</comment>
    <expr_stmt><expr><name>mFunc</name> = <name>nsnull</name></expr>;</expr_stmt>

    <return>return;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>PR_INIT_CLIST</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <block>{
    <function_decl><type><name>nsAutoLock</name></type> <name>lock</name><parameter_list>(<param><decl><type><name>sPluginThreadAsyncCallLock</name></type></decl></param>)</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name>nsNPAPIPluginInstance</name> *</type><name>inst</name> <init>= <expr>(<name>nsNPAPIPluginInstance</name> *)<name><name>instance</name>-&gt;<name>ndata</name></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>inst</name> || !<call><name><name>inst</name>-&gt;<name>IsStarted</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <comment type="line">// The plugin was stopped, ignore this async call.</comment>
      <expr_stmt><expr><name>mFunc</name> = <name>nsnull</name></expr>;</expr_stmt>

      <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>PR_APPEND_LINK</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>&amp;<name>sPendingAsyncCalls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
}</block></constructor>

<destructor><name><name>nsPluginThreadRunnable</name>::~<name>nsPluginThreadRunnable</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>sPluginThreadAsyncCallLock</name></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>

  <block>{
    <function_decl><type><name>nsAutoLock</name></type> <name>lock</name><parameter_list>(<param><decl><type><name>sPluginThreadAsyncCallLock</name></type></decl></param>)</parameter_list>;</function_decl>

    <expr_stmt><expr><call><name>PR_REMOVE_LINK</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
}</block></destructor>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsPluginThreadRunnable</name>::<name>Run</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mFunc</name></expr>)</condition><then> <block>{
    <function_decl><type><name>PluginDestructionGuard</name></type> <name>guard</name><parameter_list>(<param><decl><type><name>mInstance</name></type></decl></param>)</parameter_list>;</function_decl>

    <expr_stmt><expr><call><name>NS_TRY_SAFE_CALL_VOID</name><argument_list>(<argument><expr><call><name>mFunc</name><argument_list>(<argument><expr><name>mUserData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name> <name>NP_CALLBACK</name></type>
<name>_pluginthreadasynccall</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>, <param><decl><type><name>PluginThreadCallback</name></type> <name>func</name></decl></param>, <param><decl><type><name>void</name> *</type><name>userData</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name>NS_IsMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NOISY</name></expr></argument>,<argument><expr>("NPN_pluginthreadasynccall called from the main thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name>NPN_PLUGIN_LOG</name><argument_list>(<argument><expr><name>PLUGIN_LOG_NOISY</name></expr></argument>,<argument><expr>("NPN_pluginthreadasynccall called from a non main thread\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsPluginThreadRunnable</name></expr></argument>&gt;</argument_list></name></type> <name>evt</name> <init>=
    <expr>new <call><name>nsPluginThreadRunnable</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>userData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>evt</name> &amp;&amp; <call><name><name>evt</name>-&gt;<name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_DispatchToMainThread</name><argument_list>(<argument><expr><name>evt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>NPError</name> <name>NP_CALLBACK</name></type>
<name>_getvalueforurl</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>, <param><decl><type><name>NPNURLVariable</name></type> <name>variable</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                <param><decl><type><name>char</name> **</type><name>value</name></decl></param>, <param><decl><type><name>uint32_t</name> *</type><name>len</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>instance</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NPERR_INVALID_PARAM</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr>!<name>url</name> || !*<name>url</name> || !<name>len</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NPERR_INVALID_URL</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr>*<name>len</name> = 0</expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>variable</name></expr>)</condition> <block>{
  <case>case <expr><name>NPNURLVProxy</name></expr>:
    <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPluginManager2</name></expr></argument>&gt;</argument_list></name></type> <name>pm</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>kPluginManagerCID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>pm</name> &amp;&amp; <call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>pm</name>-&gt;<name>FindProxyForURL</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>len</name> = *<name>value</name> ? <call><name>PL_strlen</name><argument_list>(<argument><expr>*<name>value</name></expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
        <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
      }</block></then></if>
      <break>break;</break>
    }</block>
  </case><case>case <expr><name>NPNURLVCookie</name></expr>:
    <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsICookieService</name></expr></argument>&gt;</argument_list></name></type> <name>cookieService</name> <init>=
        <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_COOKIESERVICE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr>!<name>cookieService</name></expr>)</condition><then>
        <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return></then></if>

      <comment type="line">// Make an nsURI from the url argument</comment>
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name>NS_NewURI</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return>
      }</block></then></if>

      <decl_stmt><decl><type><name>nsXPIDLCString</name></type> <name>cookieStr</name></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name><name>cookieService</name>-&gt;<name>GetCookieString</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                                                   <argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>cookieStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> ||
          !<name>cookieStr</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return>
      }</block></then></if>

      <expr_stmt><expr>*<name>value</name> = <call><name>PL_strndup</name><argument_list>(<argument><expr><name>cookieStr</name></expr></argument>, <argument><expr><call><name><name>cookieStr</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>*<name>value</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>len</name> = <call><name><name>cookieStr</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
      }</block></then></if>
    }</block>

    <break>break;</break>
  </case><default>default:
    <comment type="line">// Fall through and return an error...</comment>
    <empty_stmt>;</empty_stmt>
  </default>}</block></switch>

  <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>NPError</name> <name>NP_CALLBACK</name></type>
<name>_setvalueforurl</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>, <param><decl><type><name>NPNURLVariable</name></type> <name>variable</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>, <param><decl><type><name>uint32_t</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>instance</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NPERR_INVALID_PARAM</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr>!<name>url</name> || !*<name>url</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NPERR_INVALID_URL</name></expr>;</return>
  }</block></then></if>

  <switch>switch <condition>(<expr><name>variable</name></expr>)</condition> <block>{
  <case>case <expr><name>NPNURLVCookie</name></expr>:
    <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsICookieStorage</name></expr></argument>&gt;</argument_list></name></type> <name>cs</name> <init>= <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>kPluginManagerCID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>cs</name> &amp;&amp; <call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>cs</name>-&gt;<name>SetCookie</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
      }</block></then></if>
    }</block>

    <break>break;</break>
  </case><case>case <expr><name>NPNURLVProxy</name></expr>:
    <comment type="line">// We don't support setting proxy values, fall through...</comment>
  </case><default>default:
    <comment type="line">// Fall through and return an error...</comment>
    <empty_stmt>;</empty_stmt>
  </default>}</block></switch>

  <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>NPError</name> <name>NP_CALLBACK</name></type>
<name>_getauthenticationinfo</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>protocol</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>host</name></decl></param>,
                       <param><decl><type><name>int32_t</name></type> <name>port</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scheme</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
                       <param><decl><type><name>char</name> **</type><name>username</name></decl></param>, <param><decl><type><name>uint32_t</name> *</type><name>ulen</name></decl></param>, <param><decl><type><name>char</name> **</type><name>password</name></decl></param>,
                       <param><decl><type><name>uint32_t</name> *</type><name>plen</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>instance</name> || !<name>protocol</name> || !<name>host</name> || !<name>scheme</name> || !<name>realm</name> || !<name>username</name> ||
      !<name>ulen</name> || !<name>password</name> || !<name>plen</name></expr>)</condition><then>
    <return>return <expr><name>NPERR_INVALID_PARAM</name></expr>;</return></then></if>

  <expr_stmt><expr>*<name>username</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>password</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>ulen</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr>*<name>plen</name> = 0</expr>;</expr_stmt>

  <function_decl><type><name>nsDependentCString</name></type> <name>proto</name><parameter_list>(<param><decl><type><name>protocol</name></type></decl></param>)</parameter_list>;</function_decl>

  <if>if <condition>(<expr>!<call><name><name>proto</name>.<name>LowerCaseEqualsLiteral</name></name><argument_list>(<argument><expr>"http"</expr></argument>)</argument_list></call> &amp;&amp;
      !<call><name><name>proto</name>.<name>LowerCaseEqualsLiteral</name></name><argument_list>(<argument><expr>"https"</expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIHttpAuthManager</name></expr></argument>&gt;</argument_list></name></type> <name>authManager</name> <init>=
    <expr><call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/network/http-auth-manager;1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>authManager</name></expr>)</condition><then>
    <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>unused</name></decl>, <decl><type ref="prev"/><name>uname16</name></decl>, <decl><type ref="prev"/><name>pwd16</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name><name>authManager</name>-&gt;<name>GetAuthIdentity</name></name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><name>port</name></expr></argument>, <argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>EmptyCString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>unused</name></expr></argument>, <argument><expr><name>uname16</name></expr></argument>,
                                             <argument><expr><name>pwd16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NPERR_GENERIC_ERROR</name></expr>;</return>
  }</block></then></if>

  <function_decl><type><name>NS_ConvertUTF16toUTF8</name></type> <name>uname8</name><parameter_list>(<param><decl><type><name>uname16</name></type></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>NS_ConvertUTF16toUTF8</name></type> <name>pwd8</name><parameter_list>(<param><decl><type><name>pwd16</name></type></decl></param>)</parameter_list>;</function_decl>

  <expr_stmt><expr>*<name>username</name> = <call><name>ToNewCString</name><argument_list>(<argument><expr><name>uname8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>ulen</name> = *<name>username</name> ? <call><name><name>uname8</name>.<name>Length</name></name><argument_list>()</argument_list></call> : 0</expr>;</expr_stmt>

  <expr_stmt><expr>*<name>password</name> = <call><name>ToNewCString</name><argument_list>(<argument><expr><name>pwd8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>plen</name> = *<name>password</name> ? <call><name><name>pwd8</name>.<name>Length</name></name><argument_list>()</argument_list></call> : 0</expr>;</expr_stmt>

  <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name>OnPluginDestroy</name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>sPluginThreadAsyncCallLock</name></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>

  <block>{
    <function_decl><type><name>nsAutoLock</name></type> <name>lock</name><parameter_list>(<param><decl><type><name>sPluginThreadAsyncCallLock</name></type></decl></param>)</parameter_list>;</function_decl>

    <if>if <condition>(<expr><call><name>PR_CLIST_IS_EMPTY</name><argument_list>(<argument><expr>&amp;<name>sPendingAsyncCalls</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>nsPluginThreadRunnable</name> *</type><name>r</name> <init>=
      <expr>(<name>nsPluginThreadRunnable</name> *)<call><name>PR_LIST_HEAD</name><argument_list>(<argument><expr>&amp;<name>sPendingAsyncCalls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <do>do <block>{
      <if>if <condition>(<expr><call><name><name>r</name>-&gt;<name>IsForInstance</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>r</name>-&gt;<name>Invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><name>r</name> = (<name>nsPluginThreadRunnable</name> *)<call><name>PR_NEXT_LINK</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> while <condition>(<expr><name>r</name> != &amp;<name>sPendingAsyncCalls</name></expr>)</condition>;</do>
  }</block>
}</block></function>

<function><type><name>void</name></type>
<name>OnShutdown</name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>PR_CLIST_IS_EMPTY</name><argument_list>(<argument><expr>&amp;<name>sPendingAsyncCalls</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr>"Pending async plugin call list not cleaned up!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>sPluginThreadAsyncCallLock</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>nsAutoLock</name>::<name>DestroyLock</name></name><argument_list>(<argument><expr><name>sPluginThreadAsyncCallLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>sPluginThreadAsyncCallLock</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name>EnterAsyncPluginThreadCallLock</name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>sPluginThreadAsyncCallLock</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PR_Lock</name><argument_list>(<argument><expr><name>sPluginThreadAsyncCallLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name>ExitAsyncPluginThreadCallLock</name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>sPluginThreadAsyncCallLock</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PR_Unlock</name><argument_list>(<argument><expr><name>sPluginThreadAsyncCallLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<decl_stmt><decl><type><name>NPP</name></type> <name><name>NPPStack</name>::<name>sCurrentNPP</name></name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

</unit>
