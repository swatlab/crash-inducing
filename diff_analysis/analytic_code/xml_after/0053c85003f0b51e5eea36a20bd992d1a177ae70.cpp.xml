<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0053c85003f0b51e5eea36a20bd992d1a177ae70.cpp"><comment type="block">/* -*- Mode: C++; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 8; -*- */</comment>
<comment type="block">/* vim: set sw=4 ts=8 et tw=80 : */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Content App.
 *
 * The Initial Developer of the Original Code is
 *   The Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsInProcessTabChildGlobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptSecurityManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIInterfaceRequestorUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsEventDispatcher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIComponentManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIServiceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIJSRuntimeService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsComponentManagerUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNetUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsScriptLoader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIJSContextStack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsFrameLoader.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>SendSyncMessageToParent</name><parameter_list>(<param><decl><type><name>void</name>*</type> <name>aCallbackData</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aMessage</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aJSON</name></decl></param>,
                             <param><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsString</name></expr></argument>&gt;</argument_list></name>*</type> <name>aJSONRetVal</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsInProcessTabChildGlobal</name>*</type> <name>tabChild</name> <init>=
    <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsInProcessTabChildGlobal</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aCallbackData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>owner</name> <init>= <expr><name><name>tabChild</name>-&gt;<name>mOwner</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIRunnable</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>asyncMessages</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>asyncMessages</name>.<name>SwapElements</name></name><argument_list>(<argument><expr><name><name>tabChild</name>-&gt;<name>mASyncMessages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>len</name> <init>= <expr><call><name><name>asyncMessages</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for (<init><decl><type><name>PRInt32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIRunnable</name></expr></argument>&gt;</argument_list></name></type> <name>async</name> <init>= <expr><name><name>asyncMessages</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>async</name>-&gt;<name>Run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <if>if <condition>(<expr><name><name>tabChild</name>-&gt;<name>mChromeMessageManager</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>tabChild</name>-&gt;<name>mChromeMessageManager</name>-&gt;<name>ReceiveMessage</name></name><argument_list>(<argument><expr><name>owner</name></expr></argument>, <argument><expr><name>aMessage</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>,
                                                    <argument><expr><name>aJSON</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aJSONRetVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr>true</expr>;</return>
}</block></function>

<class>class <name>nsAsyncMessageToParent</name> <super>: <specifier>public</specifier> <name>nsRunnable</name></super>
<block>{<private type="default">
</private><public>public:
  <constructor><name>nsAsyncMessageToParent</name><parameter_list>(<param><decl><type><name>nsInProcessTabChildGlobal</name>*</type> <name>aTabChild</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aMessage</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aJSON</name></decl></param>)</parameter_list>
    <member_list>: <call><name>mTabChild</name><argument_list>(<argument><expr><name>aTabChild</name></expr></argument>)</argument_list></call>, <call><name>mMessage</name><argument_list>(<argument><expr><name>aMessage</name></expr></argument>)</argument_list></call>, <call><name>mJSON</name><argument_list>(<argument><expr><name>aJSON</name></expr></argument>)</argument_list></call> </member_list><block>{}</block></constructor>

  <function><type><name>NS_IMETHOD</name></type> <name>Run</name><parameter_list>()</parameter_list>
  <block>{
    <expr_stmt><expr><call><name><name>mTabChild</name>-&gt;<name>mASyncMessages</name>.<name>RemoveElement</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>mTabChild</name>-&gt;<name>mChromeMessageManager</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mTabChild</name>-&gt;<name>mChromeMessageManager</name>-&gt;<name>ReceiveMessage</name></name><argument_list>(<argument><expr><name><name>mTabChild</name>-&gt;<name>mOwner</name></name></expr></argument>, <argument><expr><name>mMessage</name></expr></argument>,
                                                       <argument><expr><name>PR_FALSE</name></expr></argument>,
                                                       <argument><expr><name>mJSON</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></function>
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsInProcessTabChildGlobal</name></expr></argument>&gt;</argument_list></name></type> <name>mTabChild</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsString</name></type> <name>mMessage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsString</name></type> <name>mJSON</name></decl>;</decl_stmt>
</public>}</block>;</class>

<function><type><name>bool</name></type> <name>SendAsyncMessageToParent</name><parameter_list>(<param><decl><type><name>void</name>*</type> <name>aCallbackData</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aMessage</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aJSON</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsInProcessTabChildGlobal</name>*</type> <name>tabChild</name> <init>=
    <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsInProcessTabChildGlobal</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aCallbackData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIRunnable</name></expr></argument>&gt;</argument_list></name></type> <name>ev</name> <init>=
    <expr>new <call><name>nsAsyncMessageToParent</name><argument_list>(<argument><expr><name>tabChild</name></expr></argument>, <argument><expr><name>aMessage</name></expr></argument>, <argument><expr><name>aJSON</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>tabChild</name>-&gt;<name>mASyncMessages</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_DispatchToCurrentThread</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr>true</expr>;</return>
}</block></function>

<constructor><name><name>nsInProcessTabChildGlobal</name>::<name>nsInProcessTabChildGlobal</name></name><parameter_list>(<param><decl><type><name>nsIDocShell</name>*</type> <name>aShell</name></decl></param>,
                                                     <param><decl><type><name>nsIContent</name>*</type> <name>aOwner</name></decl></param>,
                                                     <param><decl><type><name>nsFrameMessageManager</name>*</type> <name>aChrome</name></decl></param>)</parameter_list>
<member_list>: <call><name>mCx</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>, <call><name>mDocShell</name><argument_list>(<argument><expr><name>aShell</name></expr></argument>)</argument_list></call>, <call><name>mInitialized</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>, <call><name>mLoadingScript</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>,
  <call><name>mDelayedDisconnect</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>, <call><name>mOwner</name><argument_list>(<argument><expr><name>aOwner</name></expr></argument>)</argument_list></call>, <call><name>mChromeMessageManager</name><argument_list>(<argument><expr><name>aChrome</name></expr></argument>)</argument_list></call>
</member_list><block>{
}</block></constructor>

<destructor><name><name>nsInProcessTabChildGlobal</name>::~<name>nsInProcessTabChildGlobal</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>Disconnect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>mCx</name></expr></argument>, <argument><expr>"Couldn't release JSContext?!?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<function><type><name>nsresult</name></type>
<name><name>nsInProcessTabChildGlobal</name>::<name>Init</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>InitTabChildGlobal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_WARN_IF_FALSE</name><argument_list>(<argument><expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr>"Couldn't initialize nsInProcessTabChildGlobal"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mMessageManager</name> = new <call><name>nsFrameMessageManager</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>,
                                              <argument><expr><name>SendSyncMessageToParent</name></expr></argument>,
                                              <argument><expr><name>SendAsyncMessageToParent</name></expr></argument>,
                                              <argument><expr><name>nsnull</name></expr></argument>,
                                              <argument><expr><name>this</name></expr></argument>,
                                              <argument><expr><name>nsnull</name></expr></argument>,
                                              <argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<macro><name>NS_IMPL_CYCLE_COLLECTION_CLASS</name><argument_list>(<argument>nsInProcessTabChildGlobal</argument>)</argument_list></macro>

<macro><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED</name><argument_list>(<argument>nsInProcessTabChildGlobal</argument>,
                                                <argument>nsDOMEventTargetHelper</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument>mMessageManager</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument>mGlobal</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_END</name></type>

<name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED</name><argument_list>(<argument><expr><name>nsInProcessTabChildGlobal</name></expr></argument>,
                                                  <argument><expr><name>nsDOMEventTargetHelper</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument><expr><name>mMessageManager</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument><expr><name>mGlobal</name></expr></argument>)</argument_list>
<name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END</name>

<name>NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION_INHERITED</name><argument_list>(<argument><expr><name>nsInProcessTabChildGlobal</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsIFrameMessageManager</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsIContentFrameMessageManager</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsIInProcessContentFrameMessageManager</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsIScriptContextPrincipal</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsIScriptObjectPrincipal</name></expr></argument>)</argument_list>
  <name>NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO</name><argument_list>(<argument><expr><name>ContentFrameMessageManager</name></expr></argument>)</argument_list>
<name>NS_INTERFACE_MAP_END_INHERITING</name><argument_list>(<argument><expr><name>nsDOMEventTargetHelper</name></expr></argument>)</argument_list>

<name>NS_IMPL_ADDREF_INHERITED</name><argument_list>(<argument><expr><name>nsInProcessTabChildGlobal</name></expr></argument>, <argument><expr><name>nsDOMEventTargetHelper</name></expr></argument>)</argument_list>
<name>NS_IMPL_RELEASE_INHERITED</name><argument_list>(<argument><expr><name>nsInProcessTabChildGlobal</name></expr></argument>, <argument><expr><name>nsDOMEventTargetHelper</name></expr></argument>)</argument_list>

<name>NS_IMETHODIMP</name>
<name><name>nsInProcessTabChildGlobal</name>::<name>GetContent</name></name><argument_list>(<argument><expr><name>nsIDOMWindow</name>** <name>aContent</name></expr></argument>)</argument_list>
<argument_list>{
  <argument><expr>*<name>aContent</name> = <name>nsnull</name></expr></argument>;
  <argument><expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMWindow</name></expr></argument>&gt;</argument_list></name> <name>window</name> = <call><name>do_GetInterface</name><argument_list>(<argument><expr><name>mDocShell</name></expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><call><name><name>window</name>.<name>swap</name></name><argument_list>(<argument><expr>*<name>aContent</name></expr></argument>)</argument_list></call></expr></argument>;
  return <argument><expr><name>NS_OK</name></expr></argument>;
}</argument_list>

<name>NS_IMETHODIMP</name>
<name><name>nsInProcessTabChildGlobal</name>::<name>GetDocShell</name></name><argument_list>(<argument><expr><name>nsIDocShell</name>** <name>aDocShell</name></expr></argument>)</argument_list>
<argument_list>{
  <argument><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aDocShell</name> = <name>mDocShell</name></expr></argument>)</argument_list></call></expr></argument>;
  return <argument><expr><name>NS_OK</name></expr></argument>;
}</argument_list>

<name>void</name>
<name><name>nsInProcessTabChildGlobal</name>::<name>Disconnect</name></name><argument_list>()</argument_list>
<argument_list>{
  <argument><expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMWindow</name></expr></argument>&gt;</argument_list></name> <name>win</name> = <call><name>do_GetInterface</name><argument_list>(<argument><expr><name>mDocShell</name></expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsPIDOMWindow</name></expr></argument>&gt;</argument_list></name> <name>pwin</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></argument>;
  if <argument><expr>(<name>pwin</name>) <block>{
    <expr><call><name><name>pwin</name>-&gt;<name>SetChromeEventHandler</name></name><argument_list>(<argument><expr><call><name><name>pwin</name>-&gt;<name>GetChromeEventHandler</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
  }</block>
  <name>mDocShell</name> = <name>nsnull</name></expr></argument>;
  <argument><expr><name>mOwner</name> = <name>nsnull</name></expr></argument>;
  <argument><expr><name>mChromeMessageManager</name> = <name>nsnull</name></expr></argument>;
  if <argument><expr>(<name>mMessageManager</name>) <block>{
    <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsFrameMessageManager</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>mMessageManager</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>-&gt;<call><name>Disconnect</name><argument_list>()</argument_list></call></expr>;
    <expr><name>mMessageManager</name> = <name>nsnull</name></expr>;
  }</block></expr></argument>
  <if>if <condition>(<expr>!<name>mLoadingScript</name></expr>)</condition><then> <expr_stmt><expr><block>{
    <if>if <condition>(<expr><name>mCx</name></expr>)</condition><then> <expr_stmt><expr><block>{
      <expr><call><name>JS_DestroyContext</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;
      <name>mCx</name> = <name>nsnull</name></block></expr>;</expr_stmt></then></if>
    }</block>
  }</expr></expr_stmt></then> <else>else <expr_stmt><expr><block>{
    <expr><name>mDelayedDisconnect</name> = <name>PR_TRUE</name></expr>;
  }</block>
}

<macro><name>NS_IMETHODIMP_</name><argument_list>(<argument>nsIContent *</argument>)</argument_list></macro>
<macro><name>nsInProcessTabChildGlobal</name></macro><name>::<name>GetOwnerContent</name></name>()
<block>{
  <return>return <expr><name>mOwner</name></expr>;</return>
}</block>

<name>nsresult</name>
<macro><name>nsInProcessTabChildGlobal</name></macro><name>::<name>PreHandleEvent</name></name>(<name>nsEventChainPreVisitor</name>&amp; <name>aVisitor</name>)
<block>{
  <expr><name><name>aVisitor</name>.<name>mCanHandle</name></name> = <name>PR_TRUE</name></expr>;
  <name><name>aVisitor</name>.<name>mParentTarget</name></name> = <name>mOwner</name></block></expr>;</expr_stmt></else></if></argument_list></decl></decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <if>if <condition>(<expr><name>mOwner</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFrameLoaderOwner</name></expr></argument>&gt;</argument_list></name></type> <name>owner</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mOwner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsFrameLoader</name></expr></argument>&gt;</argument_list></name></type> <name>fl</name> <init>= <expr><call><name><name>owner</name>-&gt;<name>GetFrameLoader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>fl</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>this</name> == <call><name><name>fl</name>-&gt;<name>GetTabChildGlobalAsEventTarget</name></name><argument_list>()</argument_list></call></expr></argument>,
                   <argument><expr>"Wrong event target!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name><name>fl</name>-&gt;<name>mMessageManager</name></name> == <name>mChromeMessageManager</name></expr></argument>,
                   <argument><expr>"Wrong message manager!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}

nsresult
<macro><name>nsInProcessTabChildGlobal</name></macro><expr_stmt><expr><name>::<name>InitTabChildGlobal</name></name>()
<block>{
  <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIJSRuntimeService</name></expr></argument>&gt;</argument_list></name> <name>runtimeSvc</name> = 
    <call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/js/xpc/RuntimeService;1"</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>runtimeSvc</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>JSRuntime</name>* <name>rt</name> = <name>nsnull</name></expr>;
  <expr><call><name><name>runtimeSvc</name>-&gt;<name>GetRuntime</name></name><argument_list>(<argument><expr>&amp;<name>rt</name></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>JSContext</name>* <name>cx</name> = <call><name>JS_NewContext</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr>8192</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>mCx</name> = <name>cx</name></expr>;

  <expr><call><name><name>nsContentUtils</name>::<name>XPConnect</name></name><argument_list>()</argument_list></call>-&gt;<call><name>SetSecurityManagerForJSContext</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name><name>nsContentUtils</name>::<name>GetSecurityManager</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;
  <expr><call><name><name>nsContentUtils</name>::<name>GetSecurityManager</name></name><argument_list>()</argument_list></call>-&gt;<call><name>GetSystemPrincipal</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mPrincipal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

  <expr><name>PRUint32</name> <name>stackDummy</name></expr>;
  <expr><name>jsuword</name> <name>stackLimit</name></expr>, <expr><name>currentStackAddr</name> = (<name>jsuword</name>)&amp;<name>stackDummy</name></expr>;

  <comment type="line">// 256k stack space.</comment>
  <expr>const <name>jsuword</name> <name>kStackSize</name> = 0x40000</expr>;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_STACK_GROWTH_DIRECTION</name> &lt; 0</expr></cpp:if>
  <expr><name>stackLimit</name> = (<name>currentStackAddr</name> &gt; <name>kStackSize</name>) ?
               <name>currentStackAddr</name> - <name>kStackSize</name> :
               0</expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr><name>stackLimit</name> = (<name>currentStackAddr</name> + <name>kStackSize</name> &gt; <name>currentStackAddr</name>) ?
               <name>currentStackAddr</name> + <name>kStackSize</name> :
               (<name>jsuword</name>) -1</expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr><call><name>JS_SetThreadStackLimit</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>stackLimit</name></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>JS_SetScriptStackQuota</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>100*1024*1024</expr></argument>)</argument_list></call></expr>;

  <expr><call><name>JS_SetOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JS_GetOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call> | <name>JSOPTION_JIT</name> | <name>JSOPTION_ANONFUNFIX</name> | <name>JSOPTION_PRIVATE_IS_NSISUPPORTS</name></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>JS_SetVersion</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSVERSION_LATEST</name></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>JS_SetGCParameterForThread</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSGC_MAX_CODE_CACHE_BYTES</name></expr></argument>, <argument><expr>1 * 1024 * 1024</expr></argument>)</argument_list></call></expr>;

  <expr><name>JSAutoRequest</name> <call><name>ar</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>nsIXPConnect</name>* <name>xpc</name> = <call><name><name>nsContentUtils</name>::<name>XPConnect</name></name><argument_list>()</argument_list></call></expr>;
  <expr>const <name>PRUint32</name> <name>flags</name> = <name><name>nsIXPConnect</name>::<name>INIT_JS_STANDARD_CLASSES</name></name> |
                         <comment type="block">/*nsIXPConnect::OMIT_COMPONENTS_OBJECT ?  |*/</comment>
                         <name><name>nsIXPConnect</name>::<name>FLAG_SYSTEM_GLOBAL_OBJECT</name></name></expr>;

  <expr><name>nsISupports</name>* <name>scopeSupports</name> =
    <call><name>NS_ISUPPORTS_CAST</name><argument_list>(<argument><expr><name>nsPIDOMEventTarget</name>*</expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>JS_SetContextPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>scopeSupports</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>nsresult</name> <name>rv</name> =
    <call><name><name>xpc</name>-&gt;<name>InitClassesWithNewWrappedGlobal</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>scopeSupports</name></expr></argument>,
                                         <argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsISupports</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
                                         <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mGlobal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;

  <expr><name>JSObject</name>* <name>global</name> = <name>nsnull</name></expr>;
  <expr><name>rv</name> = <call><name><name>mGlobal</name>-&gt;<name>GetJSObject</name></name><argument_list>(<argument><expr>&amp;<name>global</name></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;

  <expr><call><name>JS_SetGlobalObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>global</name></expr></argument>)</argument_list></call></expr>;

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type>
<name><name>nsInProcessTabChildGlobal</name>::<name>LoadFrameScript</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aURL</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mInitialized</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mInitialized</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr>!<name>mGlobal</name> || !<name>mCx</name></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsCString</name></type> <name>url</name> <init>= <expr><call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><name>aURL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_NewURI</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIChannel</name></expr></argument>&gt;</argument_list></name></type> <name>channel</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_NewChannel</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>channel</name></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIInputStream</name></expr></argument>&gt;</argument_list></name></type> <name>input</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>channel</name>-&gt;<name>Open</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>nsString</name></type> <name>dataString</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>input</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>PRUint32</name></type> <name>bufferSize</name> <init>= <expr>256</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>bufferSize</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsCString</name></type> <name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>avail</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>input</name>-&gt;<name>Available</name></name><argument_list>(<argument><expr>&amp;<name>avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>read</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>avail</name></expr>)</condition><then> <block>{
      <while>while <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>input</name>-&gt;<name>Read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr>&amp;<name>read</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>read</name></expr>)</condition> <block>{
        <expr_stmt><expr><call><name><name>data</name>.<name>Append</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>read</name> = 0</expr>;</expr_stmt>
      }</block></while>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>nsScriptLoader</name>::<name>ConvertToUTF16</name></name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr>(<name>PRUint8</name>*)<call><name><name>data</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>data</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></argument>,
                                   <argument><expr><call><name>EmptyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>dataString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr>!<call><name><name>dataString</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <function_decl><type><name>JSAutoRequest</name></type> <name>ar</name><parameter_list>(<param><decl><type><name>mCx</name></type></decl></param>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>jsval</name></type> <name>retval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name>*</type> <name>global</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mGlobal</name>-&gt;<name>GetJSObject</name></name><argument_list>(<argument><expr>&amp;<name>global</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>global</name></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>JSPrincipals</name>*</type> <name>jsprin</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mPrincipal</name>-&gt;<name>GetJSPrincipals</name></name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr>&amp;<name>jsprin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>XPConnect</name></name><argument_list>()</argument_list></call>-&gt;<call><name>FlagSystemFilenamePrefix</name><argument_list>(<argument><expr><call><name><name>url</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>ThreadJSContextStack</name></name><argument_list>()</argument_list></call>-&gt;<call><name>Push</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>tmp</name> <init>= <expr><name>mLoadingScript</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>mLoadingScript</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_EvaluateUCScriptForPrincipals</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>global</name></expr></argument>, <argument><expr><name>jsprin</name></expr></argument>,
                                     <argument><expr>(<name>jschar</name>*)<call><name><name>dataString</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
                                     <argument><expr><call><name><name>dataString</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></argument>,
                                     <argument><expr><call><name><name>url</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//XXX Argh, JSPrincipals are manually refcounted!</comment>
    <expr_stmt><expr><call><name>JSPRINCIPALS_DROP</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsprin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mLoadingScript</name> = <name>tmp</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSContext</name>*</type> <name>unused</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>ThreadJSContextStack</name></name><argument_list>()</argument_list></call>-&gt;<call><name>Pop</name><argument_list>(<argument><expr>&amp;<name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr>!<name>mLoadingScript</name> &amp;&amp; <name>mDelayedDisconnect</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mDelayedDisconnect</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Disconnect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>
</unit>
