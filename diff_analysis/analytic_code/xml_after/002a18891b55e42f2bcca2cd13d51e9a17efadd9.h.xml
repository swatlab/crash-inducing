<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="002a18891b55e42f2bcca2cd13d51e9a17efadd9.h"><comment type="block">/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: set ts=8 sw=4 et tw=78:
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code, released
 * March 31, 1998.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>jsxdrapi_h___</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jsxdrapi_h___</name></cpp:macro></cpp:define>

<comment type="block">/*
 * JS external data representation interface API.
 *
 * The XDR system is comprised of three major parts:
 *
 * - the state serialization/deserialization APIs, which allow consumers
 *   of the API to serialize JS runtime state (script bytecodes, atom maps,
 *   object graphs, etc.) for later restoration.  These portions
 *   are implemented in various appropriate files, such as jsscript.c
 *   for the script portions and jsobj.c for object state.
 * - the callback APIs through which the runtime requests an opaque
 *   representation of a native object, and through which the runtime
 *   constructs a live native object from an opaque representation. These
 *   portions are the responsibility of the native object implementor.
 * - utility functions for en/decoding of primitive types, such as
 *   JSStrings.  This portion is implemented in jsxdrapi.c.
 *
 * Spiritually guided by Sun's XDR, where appropriate.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jspubtd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsprvtd.h"</cpp:file></cpp:include>

<macro><name>JS_BEGIN_EXTERN_C</name></macro>

<comment type="block">/* We use little-endian byteorder for all encoded data */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>IS_LITTLE_ENDIAN</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSXDR_SWAB32</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSXDR_SWAB16</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>IS_BIG_ENDIAN</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSXDR_SWAB32</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((uint32)(x) &gt;&gt; 24) |                                \
                         (((uint32)(x) &gt;&gt; 8) &amp; 0xff00) |                      \
                         (((uint32)(x) &lt;&lt; 8) &amp; 0xff0000) |                    \
                         ((uint32)(x) &lt;&lt; 24))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSXDR_SWAB16</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((uint16)(x) &gt;&gt; 8) | ((uint16)(x) &lt;&lt; 8))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> "unknown byte order"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSXDR_ALIGN</name></cpp:macro>     <cpp:value>4</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>JSXDRMode</name> <block>{
    <decl><name>JSXDR_ENCODE</name></decl>,
    <decl><name>JSXDR_DECODE</name></decl>,
    <decl><name>JSXDR_FREE</name></decl>
}</block></enum></type> <name>JSXDRMode</name>;</typedef>

<typedef>typedef <type><enum>enum <name>JSXDRWhence</name> <block>{
    <decl><name>JSXDR_SEEK_SET</name></decl>,
    <decl><name>JSXDR_SEEK_CUR</name></decl>,
    <decl><name>JSXDR_SEEK_END</name></decl>
}</block></enum></type> <name>JSXDRWhence</name>;</typedef>

<typedef>typedef <type><struct>struct <name>JSXDROps</name> <block>{
    <function_decl><type><name>JSBool</name></type>      (*<name>get32</name>)<parameter_list>(<param><decl><type><name>JSXDRState</name> *</type></decl></param>, <param><decl><type><name>uint32</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>JSBool</name></type>      (*<name>set32</name>)<parameter_list>(<param><decl><type><name>JSXDRState</name> *</type></decl></param>, <param><decl><type><name>uint32</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>JSBool</name></type>      (*<name>getbytes</name>)<parameter_list>(<param><decl><type><name>JSXDRState</name> *</type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>uint32</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>JSBool</name></type>      (*<name>setbytes</name>)<parameter_list>(<param><decl><type><name>JSXDRState</name> *</type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>uint32</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name> *</type>      (*<name>raw</name>)<parameter_list>(<param><decl><type><name>JSXDRState</name> *</type></decl></param>, <param><decl><type><name>uint32</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>JSBool</name></type>      (*<name>seek</name>)<parameter_list>(<param><decl><type><name>JSXDRState</name> *</type></decl></param>, <param><decl><type><name>int32</name></type></decl></param>, <param><decl><type><name>JSXDRWhence</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>uint32</name></type>      (*<name>tell</name>)<parameter_list>(<param><decl><type><name>JSXDRState</name> *</type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type>        (*<name>finalize</name>)<parameter_list>(<param><decl><type><name>JSXDRState</name> *</type></decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>JSXDROps</name>;</typedef>

<struct>struct <name>JSXDRState</name> <block>{
    <decl_stmt><decl><type><name>JSXDRMode</name></type>   <name>mode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXDROps</name>    *</type><name>ops</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSContext</name>   *</type><name>cx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSClass</name>     **</type><name>registry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uintN</name></type>       <name>numclasses</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uintN</name></type>       <name>maxclasses</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>        *</type><name>reghash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>        *</type><name>userdata</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScript</name>    *</type><name>script</name></decl>;</decl_stmt>
}</block>;</struct>

<extern>extern JS_PUBLIC_API(void</extern>)
<macro><name>JS_XDRInitBase</name><argument_list>(<argument>JSXDRState *xdr</argument>, <argument>JSXDRMode mode</argument>, <argument>JSContext *cx</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<extern>extern JS_PUBLIC_API(JSXDRState *</extern>)
<macro><name>JS_XDRNewMem</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSXDRMode mode</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<extern>extern JS_PUBLIC_API(void *</extern>)
<expr_stmt><expr><call><name>JS_XDRMemGetData</name><argument_list>(<argument><expr><name>JSXDRState</name> *<name>xdr</name></expr></argument>, <argument><expr><name>uint32</name> *<name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<extern>extern JS_PUBLIC_API(void</extern>)
<macro><name>JS_XDRMemSetData</name><argument_list>(<argument>JSXDRState *xdr</argument>, <argument>void *data</argument>, <argument>uint32 len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<extern>extern JS_PUBLIC_API(uint32</extern>)
<expr_stmt><expr><call><name>JS_XDRMemDataLeft</name><argument_list>(<argument><expr><name>JSXDRState</name> *<name>xdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<extern>extern JS_PUBLIC_API(void</extern>)
<expr_stmt><expr><call><name>JS_XDRMemResetData</name><argument_list>(<argument><expr><name>JSXDRState</name> *<name>xdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<extern>extern JS_PUBLIC_API(void</extern>)
<expr_stmt><expr><call><name>JS_XDRDestroy</name><argument_list>(<argument><expr><name>JSXDRState</name> *<name>xdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<extern>extern JS_PUBLIC_API(JSBool</extern>)
<expr_stmt><expr><call><name>JS_XDRUint8</name><argument_list>(<argument><expr><name>JSXDRState</name> *<name>xdr</name></expr></argument>, <argument><expr><name>uint8</name> *<name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<extern>extern JS_PUBLIC_API(JSBool</extern>)
<expr_stmt><expr><call><name>JS_XDRUint16</name><argument_list>(<argument><expr><name>JSXDRState</name> *<name>xdr</name></expr></argument>, <argument><expr><name>uint16</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<extern>extern JS_PUBLIC_API(JSBool</extern>)
<expr_stmt><expr><call><name>JS_XDRUint32</name><argument_list>(<argument><expr><name>JSXDRState</name> *<name>xdr</name></expr></argument>, <argument><expr><name>uint32</name> *<name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<extern>extern JS_PUBLIC_API(JSBool</extern>)
<macro><name>JS_XDRBytes</name><argument_list>(<argument>JSXDRState *xdr</argument>, <argument>char *bytes</argument>, <argument>uint32 len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<extern>extern JS_PUBLIC_API(JSBool</extern>)
<expr_stmt><expr><call><name>JS_XDRCString</name><argument_list>(<argument><expr><name>JSXDRState</name> *<name>xdr</name></expr></argument>, <argument><expr><name>char</name> **<name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<extern>extern JS_PUBLIC_API(JSBool</extern>)
<expr_stmt><expr><call><name>JS_XDRCStringOrNull</name><argument_list>(<argument><expr><name>JSXDRState</name> *<name>xdr</name></expr></argument>, <argument><expr><name>char</name> **<name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<extern>extern JS_PUBLIC_API(JSBool</extern>)
<expr_stmt><expr><call><name>JS_XDRString</name><argument_list>(<argument><expr><name>JSXDRState</name> *<name>xdr</name></expr></argument>, <argument><expr><name>JSString</name> **<name>strp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<extern>extern JS_PUBLIC_API(JSBool</extern>)
<expr_stmt><expr><call><name>JS_XDRStringOrNull</name><argument_list>(<argument><expr><name>JSXDRState</name> *<name>xdr</name></expr></argument>, <argument><expr><name>JSString</name> **<name>strp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<extern>extern JS_PUBLIC_API(JSBool</extern>)
<expr_stmt><expr><call><name>JS_XDRDouble</name><argument_list>(<argument><expr><name>JSXDRState</name> *<name>xdr</name></expr></argument>, <argument><expr><name>jsdouble</name> *<name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<extern>extern JS_PUBLIC_API(JSBool</extern>)
<expr_stmt><expr><call><name>JS_XDRValue</name><argument_list>(<argument><expr><name>JSXDRState</name> *<name>xdr</name></expr></argument>, <argument><expr><name>jsval</name> *<name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<extern>extern JS_PUBLIC_API(JSBool</extern>)
<expr_stmt><expr><call><name>JS_XDRScript</name><argument_list>(<argument><expr><name>JSXDRState</name> *<name>xdr</name></expr></argument>, <argument><expr><name>JSScript</name> **<name>scriptp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<extern>extern JS_PUBLIC_API(JSBool</extern>)
<expr_stmt><expr><call><name>JS_XDRRegisterClass</name><argument_list>(<argument><expr><name>JSXDRState</name> *<name>xdr</name></expr></argument>, <argument><expr><name>JSClass</name> *<name>clasp</name></expr></argument>, <argument><expr><name>uint32</name> *<name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<extern>extern JS_PUBLIC_API(uint32</extern>)
<expr_stmt><expr><call><name>JS_XDRFindClassIdByName</name><argument_list>(<argument><expr><name>JSXDRState</name> *<name>xdr</name></expr></argument>, <argument><expr>const <name>char</name> *<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<extern>extern JS_PUBLIC_API(JSClass *</extern>)
<macro><name>JS_XDRFindClassById</name><argument_list>(<argument>JSXDRState *xdr</argument>, <argument>uint32 id</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<comment type="block">/*
 * Magic numbers.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSXDR_MAGIC_SCRIPT_1</name></cpp:macro>        <cpp:value>0xdead0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSXDR_MAGIC_SCRIPT_2</name></cpp:macro>        <cpp:value>0xdead0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSXDR_MAGIC_SCRIPT_3</name></cpp:macro>        <cpp:value>0xdead0003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSXDR_MAGIC_SCRIPT_4</name></cpp:macro>        <cpp:value>0xdead0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSXDR_MAGIC_SCRIPT_5</name></cpp:macro>        <cpp:value>0xdead0005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSXDR_MAGIC_SCRIPT_6</name></cpp:macro>        <cpp:value>0xdead0006</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSXDR_MAGIC_SCRIPT_7</name></cpp:macro>        <cpp:value>0xdead0007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSXDR_MAGIC_SCRIPT_8</name></cpp:macro>        <cpp:value>0xdead0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSXDR_MAGIC_SCRIPT_9</name></cpp:macro>        <cpp:value>0xdead0009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSXDR_MAGIC_SCRIPT_10</name></cpp:macro>       <cpp:value>0xdead000a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSXDR_MAGIC_SCRIPT_CURRENT</name></cpp:macro>  <cpp:value>JSXDR_MAGIC_SCRIPT_10</cpp:value></cpp:define>

<comment type="block">/*
 * Bytecode version number. Increment the subtrahend whenever JS bytecode
 * changes incompatibly.
 *
 * This version number should be XDR'ed once near the front of any file or
 * larger storage unit containing XDR'ed bytecode and other data, and checked
 * before deserialization of bytecode.  If the saved version does not match
 * the current version, abort deserialization and invalidate the file.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSXDR_BYTECODE_VERSION</name></cpp:macro>      <cpp:value>(0xb973c0de - 79)</cpp:value></cpp:define>

<comment type="block">/*
 * Library-private functions.
 */</comment>
<function_decl><type><specifier>extern</specifier> <name>JSBool</name></type>
<name>js_XDRAtom</name><parameter_list>(<param><decl><type><name>JSXDRState</name> *</type><name>xdr</name></decl></param>, <param><decl><type><name>JSAtom</name> **</type><name>atomp</name></decl></param>)</parameter_list>;</function_decl>

<macro><name>JS_END_EXTERN_C</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ! jsxdrapi_h___ */</comment>
</unit>
