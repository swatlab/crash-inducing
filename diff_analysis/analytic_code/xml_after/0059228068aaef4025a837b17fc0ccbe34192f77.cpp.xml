<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0059228068aaef4025a837b17fc0ccbe34192f77.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGenericElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGkAtoms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsUnicharUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsXMLProcessingInstruction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsParserUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentCreatorFunctions.h"</cpp:file></cpp:include>

<function><type><name>nsresult</name></type>
<name>NS_NewXMLProcessingInstruction</name><parameter_list>(<param><decl><type><name>nsIContent</name>**</type> <name>aInstancePtrResult</name></decl></param>,
                               <param><decl><type><name>nsNodeInfoManager</name> *</type><name>aNodeInfoManager</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aTarget</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aNodeInfoManager</name></expr></argument>, <argument><expr>"Missing nodeinfo manager"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name><name>aTarget</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"xml-stylesheet"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><call><name>NS_NewXMLStylesheetProcessingInstruction</name><argument_list>(<argument><expr><name>aInstancePtrResult</name></expr></argument>,
                                                    <argument><expr><name>aNodeInfoManager</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr>*<name>aInstancePtrResult</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name></type> <name>ni</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>ni</name> = <call><name><name>aNodeInfoManager</name>-&gt;<name>GetNodeInfo</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>processingInstructionTagName</name></name></expr></argument>,
                                     <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>kNameSpaceID_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>ni</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsXMLProcessingInstruction</name> *</type><name>instance</name> <init>=
    <expr>new <call><name>nsXMLProcessingInstruction</name><argument_list>(<argument><expr><call><name><name>ni</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>aTarget</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>instance</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aInstancePtrResult</name> = <name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<constructor><name><name>nsXMLProcessingInstruction</name>::<name>nsXMLProcessingInstruction</name></name><parameter_list>(<param><decl><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name></type> <name>aNodeInfo</name></decl></param>,
                                                       <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aTarget</name></decl></param>,
                                                       <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aData</name></decl></param>)</parameter_list>
  <member_list>: <call><name>nsGenericDOMDataNode</name><argument_list>(<argument><expr><name>aNodeInfo</name></expr></argument>)</argument_list></call>,
    <call><name>mTarget</name><argument_list>(<argument><expr><name>aTarget</name></expr></argument>)</argument_list></call>
</member_list><block>{
  <expr_stmt><expr><call><name>SetTextInternal</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>mText</name>.<name>GetLength</name></name><argument_list>()</argument_list></call></expr></argument>,
                  <argument><expr><call><name><name>aData</name>.<name>BeginReading</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>aData</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></argument>,
                  <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Don't notify (bug 420429).</comment>
}</block></constructor>

<destructor><name><name>nsXMLProcessingInstruction</name>::~<name>nsXMLProcessingInstruction</name></name><parameter_list>()</parameter_list>
<block>{
}</block></destructor>


<macro><name>DOMCI_NODE_DATA</name><argument_list>(<argument>ProcessingInstruction</argument>, <argument>nsXMLProcessingInstruction</argument>)</argument_list></macro>

<comment type="line">// QueryInterface implementation for nsXMLProcessingInstruction</comment>
<macro><name>NS_INTERFACE_TABLE_HEAD</name><argument_list>(<argument>nsXMLProcessingInstruction</argument>)</argument_list></macro>
  <macro><name>NS_NODE_OFFSET_AND_INTERFACE_TABLE_BEGIN</name><argument_list>(<argument>nsXMLProcessingInstruction</argument>)</argument_list></macro>
    <macro><name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument>nsXMLProcessingInstruction</argument>, <argument>nsIDOMNode</argument>)</argument_list></macro>
    <macro><name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument>nsXMLProcessingInstruction</argument>,
                             <argument>nsIDOMProcessingInstruction</argument>)</argument_list></macro>
  <decl_stmt><decl><type><name>NS_OFFSET_AND_INTERFACE_TABLE_END</name>
  <name>NS_OFFSET_AND_INTERFACE_TABLE_TO_MAP_SEGUE</name></type>
  <name>NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO</name><argument_list>(<argument><expr><name>ProcessingInstruction</name></expr></argument>)</argument_list>
<name>NS_INTERFACE_MAP_END_INHERITING</name><argument_list>(<argument><expr><name>nsGenericDOMDataNode</name></expr></argument>)</argument_list>


<name>NS_IMPL_ADDREF_INHERITED</name><argument_list>(<argument><expr><name>nsXMLProcessingInstruction</name></expr></argument>, <argument><expr><name>nsGenericDOMDataNode</name></expr></argument>)</argument_list>
<name>NS_IMPL_RELEASE_INHERITED</name><argument_list>(<argument><expr><name>nsXMLProcessingInstruction</name></expr></argument>, <argument><expr><name>nsGenericDOMDataNode</name></expr></argument>)</argument_list>


<name>NS_IMETHODIMP</name>
<name><name>nsXMLProcessingInstruction</name>::<name>GetTarget</name></name><argument_list>(<argument><expr><name>nsAString</name>&amp; <name>aTarget</name></expr></argument>)</argument_list>
<argument_list>{
  <argument><expr><call><name><name>aTarget</name>.<name>Assign</name></name><argument_list>(<argument><expr><name>mTarget</name></expr></argument>)</argument_list></call></expr></argument>;

  return <argument><expr><name>NS_OK</name></expr></argument>;
}</argument_list>

<name>NS_IMETHODIMP</name>
<name><name>nsXMLProcessingInstruction</name>::<name>SetData</name></name><argument_list>(<argument><expr>const <name>nsAString</name>&amp; <name>aData</name></expr></argument>)</argument_list>
<argument_list>{
  return <argument><expr><call><name>SetNodeValue</name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

<name>NS_IMETHODIMP</name>
<name><name>nsXMLProcessingInstruction</name>::<name>GetData</name></name><argument_list>(<argument><expr><name>nsAString</name>&amp; <name>aData</name></expr></argument>)</argument_list>
<argument_list>{
  return <argument><expr><call><name><name>nsGenericDOMDataNode</name>::<name>GetData</name></name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

<name>PRBool</name>
<name><name>nsXMLProcessingInstruction</name>::<name>GetAttrValue</name></name><argument_list>(<argument><expr><name>nsIAtom</name> *<name>aName</name></expr></argument>, <argument><expr><name>nsAString</name>&amp; <name>aValue</name></expr></argument>)</argument_list>
<argument_list>{
  <argument><expr><name>nsAutoString</name> <name>data</name></expr></argument>;

  <argument><expr><call><name>GetData</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>;
  return <argument><expr><call><name><name>nsParserUtils</name>::<name>GetQuotedAttributeValue</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>aName</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

<name>PRBool</name>
<name><name>nsXMLProcessingInstruction</name>::<name>IsNodeOfType</name></name><argument_list>(<argument><expr><name>PRUint32</name> <name>aFlags</name></expr></argument>)</argument_list> const
<argument_list>{
  return <argument><expr>!(<name>aFlags</name> &amp; ~(<name>eCONTENT</name> | <name>ePROCESSING_INSTRUCTION</name> | <name>eDATA_NODE</name>))</expr></argument>;
}</argument_list>

<name>NS_IMETHODIMP</name>
<name><name>nsXMLProcessingInstruction</name>::<name>GetNodeName</name></name><argument_list>(<argument><expr><name>nsAString</name>&amp; <name>aNodeName</name></expr></argument>)</argument_list>
<argument_list>{
  <argument><expr><call><name><name>aNodeName</name>.<name>Assign</name></name><argument_list>(<argument><expr><name>mTarget</name></expr></argument>)</argument_list></call></expr></argument>;
  return <argument><expr><name>NS_OK</name></expr></argument>;
}</argument_list>

<name>NS_IMETHODIMP</name>
<name><name>nsXMLProcessingInstruction</name>::<name>GetNodeValue</name></name><argument_list>(<argument><expr><name>nsAString</name>&amp; <name>aNodeValue</name></expr></argument>)</argument_list>
<argument_list>{
  return <argument><expr><call><name><name>nsGenericDOMDataNode</name>::<name>GetNodeValue</name></name><argument_list>(<argument><expr><name>aNodeValue</name></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

<name>NS_IMETHODIMP</name>
<name><name>nsXMLProcessingInstruction</name>::<name>SetNodeValue</name></name><argument_list>(<argument><expr>const <name>nsAString</name>&amp; <name>aNodeValue</name></expr></argument>)</argument_list>
<argument_list>{
  return <argument><expr><call><name><name>nsGenericDOMDataNode</name>::<name>SetNodeValue</name></name><argument_list>(<argument><expr><name>aNodeValue</name></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

<name>NS_IMETHODIMP</name>
<name><name>nsXMLProcessingInstruction</name>::<name>GetNodeType</name></name><argument_list>(<argument><expr><name>PRUint16</name>* <name>aNodeType</name></expr></argument>)</argument_list>
<argument_list>{
  <argument><expr>*<name>aNodeType</name> = (<name>PRUint16</name>)<name><name>nsIDOMNode</name>::<name>PROCESSING_INSTRUCTION_NODE</name></name></expr></argument>;
  return <argument><expr><name>NS_OK</name></expr></argument>;
}</argument_list>

<name>nsGenericDOMDataNode</name>*
<name><name>nsXMLProcessingInstruction</name>::<name>CloneDataNode</name></name><argument_list>(<argument><expr><name>nsINodeInfo</name> *<name>aNodeInfo</name></expr></argument>,
                                          <argument><expr><name>PRBool</name> <name>aCloneText</name></expr></argument>)</argument_list> const
<argument_list>{
  <argument><expr><name>nsAutoString</name> <name>data</name></expr></argument>;
  <argument><expr><call><name><name>nsGenericDOMDataNode</name>::<name>GetData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name> <name>ni</name> = <name>aNodeInfo</name></expr></argument>;
  return <argument><expr>new <call><name>nsXMLProcessingInstruction</name><argument_list>(<argument><expr><call><name><name>ni</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mTarget</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<name>void</name>
<name><name>nsXMLProcessingInstruction</name>::<name>List</name></name><argument_list>(<argument><expr><name>FILE</name>* <name>out</name></expr></argument>, <argument><expr><name>PRInt32</name> <name>aIndent</name></expr></argument>)</argument_list> const
<argument_list>{
  <argument><expr><name>PRInt32</name> <name>index</name></expr></argument>;
  for <argument><expr>(<name>index</name> = <name>aIndent</name>; --<name>index</name> &gt;= 0; ) <call><name>fputs</name><argument_list>(<argument><expr>"  "</expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>;

  <argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"Processing instruction refcount=%d&lt;"</expr></argument>, <argument><expr><call><name><name>mRefCnt</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

  <argument><expr><name>nsAutoString</name> <name>tmp</name></expr></argument>;
  <argument><expr><call><name>ToCString</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name><name>mText</name>.<name>GetLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><call><name><name>tmp</name>.<name>Insert</name></name><argument_list>(<argument><expr><call><name><name>mTarget</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>NS_LossyConvertUTF16toASCII</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>;

  <argument><expr><call><name>fputs</name><argument_list>(<argument><expr>"&gt;\n"</expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

<name>void</name>
<name><name>nsXMLProcessingInstruction</name>::<name>DumpContent</name></name><argument_list>(<argument><expr><name>FILE</name>* <name>out</name></expr></argument>, <argument><expr><name>PRInt32</name> <name>aIndent</name></expr></argument>,
                                        <argument><expr><name>PRBool</name> <name>aDumpAll</name></expr></argument>)</argument_list> const
<argument_list>{
}</argument_list></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
