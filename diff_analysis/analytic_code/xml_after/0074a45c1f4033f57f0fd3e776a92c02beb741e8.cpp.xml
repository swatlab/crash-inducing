<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0074a45c1f4033f57f0fd3e776a92c02beb741e8.cpp"><comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Netscape security libraries.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2000
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Ian McGreer &lt;mcgreer@netscape.com&gt;
 *   Javier Delgadillo &lt;javi@netscape.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNSSComponent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNSSCertificateDB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNSSCertificate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNSSHelper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNSSCertHelper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNSSCertCache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCRT.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsICertificateDialogs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNSSCertTrust.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsILocalFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPKCS12Blob.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPK11TokenDB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsOCSPResponder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsReadableUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIMutableArray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsArrayUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNSSShutDown.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefBranch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsComponentManagerUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrompt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIProxyObjectManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsProxiedService.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nspr.h"</cpp:file></cpp:include>
<extern>extern "C" <block>{
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pk11func.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"certdb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"secerr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nssb64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"secasn1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"secder.h"</cpp:file></cpp:include>
}</block></extern>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ocsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plbase64.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>extern</specifier> <name>PRLogModuleInfo</name>*</type> <name>gPIPNSSLog</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNSSCleaner.h"</cpp:file></cpp:include>
<macro><name>NSSCleanupAutoPtrClass</name><argument_list>(<argument>CERTCertificate</argument>, <argument>CERT_DestroyCertificate</argument>)</argument_list></macro>
<macro><name>NSSCleanupAutoPtrClass</name><argument_list>(<argument>CERTCertList</argument>, <argument>CERT_DestroyCertList</argument>)</argument_list></macro>
<macro><name>NSSCleanupAutoPtrClass</name><argument_list>(<argument>CERTCertificateList</argument>, <argument>CERT_DestroyCertificateList</argument>)</argument_list></macro>
<macro><name>NSSCleanupAutoPtrClass</name><argument_list>(<argument>PK11SlotInfo</argument>, <argument>PK11_FreeSlot</argument>)</argument_list></macro>

<expr_stmt><expr>static <call><name>NS_DEFINE_CID</name><argument_list>(<argument><expr><name>kNSSComponentCID</name></expr></argument>, <argument><expr><name>NS_NSSCOMPONENT_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>NS_IMPL_THREADSAFE_ISUPPORTS2</name><argument_list>(<argument>nsNSSCertificateDB</argument>, <argument>nsIX509CertDB</argument>, <argument>nsIX509CertDB2</argument>)</argument_list></macro>

<constructor><name><name>nsNSSCertificateDB</name>::<name>nsNSSCertificateDB</name></name><parameter_list>()</parameter_list>
<block>{
}</block></constructor>

<destructor><name><name>nsNSSCertificateDB</name>::~<name>nsNSSCertificateDB</name></name><parameter_list>()</parameter_list>
<block>{
}</block></destructor>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsNSSCertificateDB</name>::<name>FindCertByNickname</name></name><parameter_list>(<param><decl><type><name>nsISupports</name> *</type><name>aToken</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>nickname</name></decl></param>,
                                      <param><decl><type><name>nsIX509Cert</name> **</type><name>_rvCert</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsNSSShutDownPreventionLock</name></type> <name>locker</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTCertificate</name> *</type><name>cert</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>asciiname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>NS_ConvertUTF16toUTF8</name></type> <name>aUtf8Nickname</name><parameter_list>(<param><decl><type><name>nickname</name></type></decl></param>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>asciiname</name> = <call><name><name>const_cast</name><argument_list>&lt;<argument><expr><name>char</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>aUtf8Nickname</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gPIPNSSLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("Getting \"%s\"\n", <name>asciiname</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
  <comment type="line">// what it should be, but for now...</comment>
  if (aToken) {
    cert = PK11_FindCertFromNickname(asciiname, NULL);
  } else {
    cert = CERT_FindCertByNickname(CERT_GetDefaultCertDB(), asciiname);
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>cert</name> = <call><name>PK11_FindCertFromNickname</name><argument_list>(<argument><expr><name>asciiname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>cert</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>cert</name> = <call><name>CERT_FindCertByNickname</name><argument_list>(<argument><expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>asciiname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr><name>cert</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gPIPNSSLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("got it\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIX509Cert</name></expr></argument>&gt;</argument_list></name></type> <name>pCert</name> <init>= <expr>new <call><name>nsNSSCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rvCert</name> = <name>pCert</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>_rvCert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr>*<name>_rvCert</name> = <name>nsnull</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> 
<name><name>nsNSSCertificateDB</name>::<name>FindCertByDBKey</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aDBkey</name></decl></param>, <param><decl><type><name>nsISupports</name> *</type><name>aToken</name></decl></param>,
                                   <param><decl><type><name>nsIX509Cert</name> **</type><name>_cert</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsNSSShutDownPreventionLock</name></type> <name>locker</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SECItem</name></type> <name>keyItem</name> <init>= <expr><block>{<expr><name>siBuffer</name></expr>, <expr><name>nsnull</name></expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SECItem</name> *</type><name>dummy</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTIssuerAndSN</name></type> <name>issuerSN</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>moduleID</name></decl>,<decl><type ref="prev"/><name>slotID</name></decl>;</decl_stmt>
  <expr_stmt><expr>*<name>_cert</name> = <name>nsnull</name></expr>;</expr_stmt> 
  <if>if <condition>(<expr>!<name>aDBkey</name> || !*<name>aDBkey</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return></then></if>

  <expr_stmt><expr><name>dummy</name> = <call><name>NSSBase64_DecodeBuffer</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr>&amp;<name>keyItem</name></expr></argument>, <argument><expr><name>aDBkey</name></expr></argument>,
                                 <argument><expr>(<name>PRUint32</name>)<call><name>PL_strlen</name><argument_list>(<argument><expr><name>aDBkey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <if>if <condition>(<expr>!<name>dummy</name> || <name><name>keyItem</name>.<name>len</name></name> &lt; <name>NS_NSS_LONG</name>*4</expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PR_FREEIF</name><argument_list>(<argument><expr><name><name>keyItem</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>CERTCertificate</name> *</type><name>cert</name></decl>;</decl_stmt>
  <comment type="line">// someday maybe we can speed up the search using the moduleID and slotID</comment>
  <expr_stmt><expr><name>moduleID</name> = <call><name>NS_NSS_GET_LONG</name><argument_list>(<argument><expr><name><name>keyItem</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>slotID</name> = <call><name>NS_NSS_GET_LONG</name><argument_list>(<argument><expr>&amp;<name><name>keyItem</name>.<name>data</name><index>[<expr><name>NS_NSS_LONG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// build the issuer/SN structure</comment>
  <expr_stmt><expr><name><name>issuerSN</name>.<name>serialNumber</name>.<name>len</name></name> = <call><name>NS_NSS_GET_LONG</name><argument_list>(<argument><expr>&amp;<name><name>keyItem</name>.<name>data</name><index>[<expr><name>NS_NSS_LONG</name>*2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>issuerSN</name>.<name>derIssuer</name>.<name>len</name></name> = <call><name>NS_NSS_GET_LONG</name><argument_list>(<argument><expr>&amp;<name><name>keyItem</name>.<name>data</name><index>[<expr><name>NS_NSS_LONG</name>*3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>issuerSN</name>.<name>serialNumber</name>.<name>len</name></name> == 0 || <name><name>issuerSN</name>.<name>derIssuer</name>.<name>len</name></name> == 0
      || <name><name>issuerSN</name>.<name>serialNumber</name>.<name>len</name></name> + <name><name>issuerSN</name>.<name>derIssuer</name>.<name>len</name></name>
         != <name><name>keyItem</name>.<name>len</name></name> - <name>NS_NSS_LONG</name>*4</expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PR_FREEIF</name><argument_list>(<argument><expr><name><name>keyItem</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name><name>issuerSN</name>.<name>serialNumber</name>.<name>data</name></name>= &amp;<name><name>keyItem</name>.<name>data</name><index>[<expr><name>NS_NSS_LONG</name>*4</expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>issuerSN</name>.<name>derIssuer</name>.<name>data</name></name>= &amp;<name><name>keyItem</name>.<name>data</name><index>[<expr><name>NS_NSS_LONG</name>*4+
                                              <name><name>issuerSN</name>.<name>serialNumber</name>.<name>len</name></name></expr>]</index></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>cert</name> = <call><name>CERT_FindCertByIssuerAndSN</name><argument_list>(<argument><expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>issuerSN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PR_FREEIF</name><argument_list>(<argument><expr><name><name>keyItem</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>cert</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsNSSCertificate</name> *</type><name>nssCert</name> <init>= <expr>new <call><name>nsNSSCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>nssCert</name> == <name>nsnull</name></expr>)</condition><then>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name>nssCert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_cert</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIX509Cert</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nssCert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> 
<name><name>nsNSSCertificateDB</name>::<name>FindCertNicknames</name></name><parameter_list>(<param><decl><type><name>nsISupports</name> *</type><name>aToken</name></decl></param>, 
                                     <param><decl><type><name>PRUint32</name></type>      <name>aType</name></decl></param>,
                                     <param><decl><type><name>PRUint32</name>     *</type><name>_count</name></decl></param>,
                                     <param><decl><type><name>PRUnichar</name>  ***</type><name>_certNames</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsNSSShutDownPreventionLock</name></type> <name>locker</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_ERROR_FAILURE</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/*
   * obtain the cert list from NSS
   */</comment>
  <decl_stmt><decl><type><name>CERTCertList</name> *</type><name>certList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PK11CertListType</name></type> <name>pk11type</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
  <comment type="line">// this would seem right, but it didn't work...</comment>
  <comment type="line">// oh, I know why - bonks out on internal slot certs</comment>
  if (aType == nsIX509Cert::USER_CERT)
    pk11type = PK11CertListUser;
  else 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>pk11type</name> = <name>PK11CertListUnique</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>certList</name> = <call><name>PK11_ListCerts</name><argument_list>(<argument><expr><name>pk11type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>certList</name></expr>)</condition><then>
    <goto>goto <name>cleanup</name>;</goto></then></if>
  <comment type="block">/*
   * get list of cert names from list of certs
   * XXX also cull the list (NSS only distinguishes based on user/non-user
   */</comment>
  <expr_stmt><expr><call><name>getCertNames</name><argument_list>(<argument><expr><name>certList</name></expr></argument>, <argument><expr><name>aType</name></expr></argument>, <argument><expr><name>_count</name></expr></argument>, <argument><expr><name>_certNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rv</name> = <name>NS_OK</name></expr>;</expr_stmt>
  <comment type="block">/*
   * finish up
   */</comment>
<label><name>cleanup</name>:</label>
  <if>if <condition>(<expr><name>certList</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>CERT_DestroyCertList</name><argument_list>(<argument><expr><name>certList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>SECStatus</name> <name>PR_CALLBACK</name></type>
<name>collect_certs</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>, <param><decl><type><name>SECItem</name> **</type><name>certs</name></decl></param>, <param><decl><type><name>int</name></type> <name>numcerts</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>CERTDERCerts</name> *</type><name>collectArgs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SECItem</name> *</type><name>cert</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SECStatus</name></type> <name>rv</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>collectArgs</name> = (<name>CERTDERCerts</name> *)<name>arg</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>collectArgs</name>-&gt;<name>numcerts</name></name> = <name>numcerts</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>collectArgs</name>-&gt;<name>rawCerts</name></name> = (<name>SECItem</name> *) <call><name>PORT_ArenaZAlloc</name><argument_list>(<argument><expr><name><name>collectArgs</name>-&gt;<name>arena</name></name></expr></argument>,
                                           <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SECItem</name></expr></argument>)</argument_list></sizeof> * <name>numcerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>( <expr><name><name>collectArgs</name>-&gt;<name>rawCerts</name></name> == <name>NULL</name></expr> )</condition><then>
    <return>return<expr>(<name>SECFailure</name>)</expr>;</return></then></if>

  <expr_stmt><expr><name>cert</name> = <name><name>collectArgs</name>-&gt;<name>rawCerts</name></name></expr>;</expr_stmt>

  <while>while <condition>( <expr><name>numcerts</name>--</expr> )</condition> <block>{
    <expr_stmt><expr><name>rv</name> = <call><name>SECITEM_CopyItem</name><argument_list>(<argument><expr><name><name>collectArgs</name>-&gt;<name>arena</name></name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr>*<name>certs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>( <expr><name>rv</name> == <name>SECFailure</name></expr> )</condition><then>
      <return>return<expr>(<name>SECFailure</name>)</expr>;</return></then></if>
    <expr_stmt><expr><name>cert</name>++</expr>;</expr_stmt>
    <expr_stmt><expr><name>certs</name>++</expr>;</expr_stmt>
  }</block></while>

  <return>return <expr>(<name>SECSuccess</name>)</expr>;</return>
}</block></function>

<function><type><name>CERTDERCerts</name>*</type>
<name><name>nsNSSCertificateDB</name>::<name>getCertsFromPackage</name></name><parameter_list>(<param><decl><type><name>PRArenaPool</name> *</type><name>arena</name></decl></param>, <param><decl><type><name>PRUint8</name> *</type><name>data</name></decl></param>, 
                                        <param><decl><type><name>PRUint32</name></type> <name>length</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsNSSShutDownPreventionLock</name></type> <name>locker</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTDERCerts</name> *</type><name>collectArgs</name> <init>= 
               <expr>(<name>CERTDERCerts</name> *)<call><name>PORT_ArenaZAlloc</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CERTDERCerts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>( <expr><name>collectArgs</name> == <name>nsnull</name></expr> )</condition><then> 
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>

  <expr_stmt><expr><name><name>collectArgs</name>-&gt;<name>arena</name></name> = <name>arena</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SECStatus</name></type> <name>sec_rv</name> <init>= <expr><call><name>CERT_DecodeCertPackage</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>char</name> *</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, 
                                            <argument><expr><name>length</name></expr></argument>, <argument><expr><name>collect_certs</name></expr></argument>, 
                                            <argument><expr>(<name>void</name> *)<name>collectArgs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>sec_rv</name> != <name>SECSuccess</name></expr>)</condition><then>
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>

  <return>return <expr><name>collectArgs</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsNSSCertificateDB</name>::<name>handleCACertDownload</name></name><parameter_list>(<param><decl><type><name>nsIArray</name> *</type><name>x509Certs</name></decl></param>,
                                         <param><decl><type><name>nsIInterfaceRequestor</name> *</type><name>ctx</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// First thing we have to do is figure out which certificate we're </comment>
  <comment type="line">// gonna present to the user.  The CA may have sent down a list of </comment>
  <comment type="line">// certs which may or may not be a chained list of certs.  Until</comment>
  <comment type="line">// the day we can design some solid UI for the general case, we'll</comment>
  <comment type="line">// code to the &gt; 90% case.  That case is where a CA sends down a</comment>
  <comment type="line">// list that is a hierarchy whose root is either the first or </comment>
  <comment type="line">// the last cert.  What we're gonna do is compare the first </comment>
  <comment type="line">// 2 entries, if the second was signed by the first, we assume</comment>
  <comment type="line">// the root cert is the first cert and display it.  Otherwise,</comment>
  <comment type="line">// we compare the last 2 entries, if the second to last cert was</comment>
  <comment type="line">// signed by the last cert, then we assume the last cert is the</comment>
  <comment type="line">// root and display it.</comment>

  <decl_stmt><decl><type><name>nsNSSShutDownPreventionLock</name></type> <name>locker</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>numCerts</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>x509Certs</name>-&gt;<name>GetLength</name></name><argument_list>(<argument><expr>&amp;<name>numCerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>numCerts</name> &gt; 0</expr></argument>, <argument><expr>"Didn't get any certs to import."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>numCerts</name> == 0</expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if> <comment type="line">// Nothing to import, so nothing to do.</comment>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIX509Cert</name></expr></argument>&gt;</argument_list></name></type> <name>certToShow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>isupports</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>selCertIndex</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>numCerts</name> == 1</expr>)</condition><then> <block>{
    <comment type="line">// There's only one cert, so let's show it.</comment>
    <expr_stmt><expr><name>selCertIndex</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>certToShow</name> = <call><name>do_QueryElementAt</name><argument_list>(<argument><expr><name>x509Certs</name></expr></argument>, <argument><expr><name>selCertIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIX509Cert</name></expr></argument>&gt;</argument_list></name></type> <name>cert0</name></decl>;</decl_stmt>    <comment type="line">// first cert</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIX509Cert</name></expr></argument>&gt;</argument_list></name></type> <name>cert1</name></decl>;</decl_stmt>    <comment type="line">// second cert</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIX509Cert</name></expr></argument>&gt;</argument_list></name></type> <name>certn_2</name></decl>;</decl_stmt>  <comment type="line">// second to last cert</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIX509Cert</name></expr></argument>&gt;</argument_list></name></type> <name>certn_1</name></decl>;</decl_stmt>  <comment type="line">// last cert</comment>

    <expr_stmt><expr><name>cert0</name> = <call><name>do_QueryElementAt</name><argument_list>(<argument><expr><name>x509Certs</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cert1</name> = <call><name>do_QueryElementAt</name><argument_list>(<argument><expr><name>x509Certs</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>certn_2</name> = <call><name>do_QueryElementAt</name><argument_list>(<argument><expr><name>x509Certs</name></expr></argument>, <argument><expr><name>numCerts</name>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>certn_1</name> = <call><name>do_QueryElementAt</name><argument_list>(<argument><expr><name>x509Certs</name></expr></argument>, <argument><expr><name>numCerts</name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsXPIDLString</name></type> <name>cert0SubjectName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsXPIDLString</name></type> <name>cert1IssuerName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsXPIDLString</name></type> <name>certn_2IssuerName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsXPIDLString</name></type> <name>certn_1SubjectName</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>cert0</name>-&gt;<name>GetSubjectName</name></name><argument_list>(<argument><expr><name>cert0SubjectName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cert1</name>-&gt;<name>GetIssuerName</name></name><argument_list>(<argument><expr><name>cert1IssuerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>certn_2</name>-&gt;<name>GetIssuerName</name></name><argument_list>(<argument><expr><name>certn_2IssuerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>certn_1</name>-&gt;<name>GetSubjectName</name></name><argument_list>(<argument><expr><name>certn_1SubjectName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>cert1IssuerName</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>cert0SubjectName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <comment type="line">// In this case, the first cert in the list signed the second,</comment>
      <comment type="line">// so the first cert is the root.  Let's display it. </comment>
      <expr_stmt><expr><name>selCertIndex</name> = 0</expr>;</expr_stmt>
      <expr_stmt><expr><name>certToShow</name> = <name>cert0</name></expr>;</expr_stmt>
    }</block></then> <else>else 
    <if>if <condition>(<expr><call><name><name>certn_2IssuerName</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>certn_1SubjectName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{ 
      <comment type="line">// In this case the last cert has signed the second to last cert.</comment>
      <comment type="line">// The last cert is the root, so let's display it.</comment>
      <expr_stmt><expr><name>selCertIndex</name> = <name>numCerts</name>-1</expr>;</expr_stmt>
      <expr_stmt><expr><name>certToShow</name> = <name>certn_1</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <comment type="line">// It's not a chain, so let's just show the first one in the </comment>
      <comment type="line">// downloaded list.</comment>
      <expr_stmt><expr><name>selCertIndex</name> = 0</expr>;</expr_stmt>
      <expr_stmt><expr><name>certToShow</name> = <name>cert0</name></expr>;</expr_stmt>
    }</block></else></if></else></if>
  }</block></else></if>

  <if>if <condition>(<expr>!<name>certToShow</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsICertificateDialogs</name></expr></argument>&gt;</argument_list></name></type> <name>dialogs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>::<name>getNSSDialogs</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>dialogs</name></expr></argument>)</argument_list></call></expr></argument>, 
                                <argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsICertificateDialogs</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>NS_CERTIFICATEDIALOGS_CONTRACTID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                       
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>
 
  <decl_stmt><decl><type><name>SECItem</name></type> <name>der</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name>=<call><name><name>certToShow</name>-&gt;<name>GetRawDER</name></name><argument_list>(<argument><expr>&amp;<name><name>der</name>.<name>len</name></name></expr></argument>, <argument><expr>(<name>PRUint8</name> **)&amp;<name><name>der</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gPIPNSSLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("Creating temp cert\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>CERTCertificate</name> *</type><name>tmpCert</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTCertDBHandle</name> *</type><name>certdb</name> <init>= <expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tmpCert</name> = <call><name>CERT_FindCertByDERCert</name><argument_list>(<argument><expr><name>certdb</name></expr></argument>, <argument><expr>&amp;<name>der</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>tmpCert</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>tmpCert</name> = <call><name>CERT_NewTempCertificate</name><argument_list>(<argument><expr><name>certdb</name></expr></argument>, <argument><expr>&amp;<name>der</name></expr></argument>,
                                      <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name><name>nsMemory</name>::<name>Free</name></name><argument_list>(<argument><expr><name><name>der</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>der</name>.<name>data</name></name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>der</name>.<name>len</name></name> = 0</expr>;</expr_stmt>
  
  <if>if <condition>(<expr>!<name>tmpCert</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Couldn't create cert from DER blob"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <function_decl><type><name>CERTCertificateCleaner</name></type> <name>tmpCertCleaner</name><parameter_list>(<param><decl><type><name>tmpCert</name></type></decl></param>)</parameter_list>;</function_decl>

  <if>if <condition>(<expr>!<call><name>CERT_IsCACert</name><argument_list>(<argument><expr><name>tmpCert</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>DisplayCertificateAlert</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>"NotACACert"</expr></argument>, <argument><expr><name>certToShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><name><name>tmpCert</name>-&gt;<name>isperm</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>DisplayCertificateAlert</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>"CaCertExists"</expr></argument>, <argument><expr><name>certToShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>trustBits</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>allows</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>dialogs</name>-&gt;<name>ConfirmDownloadCACert</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>certToShow</name></expr></argument>, <argument><expr>&amp;<name>trustBits</name></expr></argument>, <argument><expr>&amp;<name>allows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <if>if <condition>(<expr>!<name>allows</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_NOT_AVAILABLE</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gPIPNSSLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("trust is %d\n", <name>trustBits</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>nsXPIDLCString</name></type> <name>nickname</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>nickname</name>.<name>Adopt</name></name><argument_list>(<argument><expr><call><name>CERT_MakeCANickname</name><argument_list>(<argument><expr><name>tmpCert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gPIPNSSLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("Created nick \"%s\"\n", <call><name><name>nickname</name>.<name>get</name></name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsNSSCertTrust</name></type> <name>trust</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>trust</name>.<name>SetValidCA</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>trust</name>.<name>AddCATrust</name></name><argument_list>(<argument><expr>!!(<name>trustBits</name> &amp; <name><name>nsIX509CertDB</name>::<name>TRUSTED_SSL</name></name>)</expr></argument>,
                   <argument><expr>!!(<name>trustBits</name> &amp; <name><name>nsIX509CertDB</name>::<name>TRUSTED_EMAIL</name></name>)</expr></argument>,
                   <argument><expr>!!(<name>trustBits</name> &amp; <name><name>nsIX509CertDB</name>::<name>TRUSTED_OBJSIGN</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SECStatus</name></type> <name>srv</name> <init>= <expr><call><name>CERT_AddTempCertToPerm</name><argument_list>(<argument><expr><name>tmpCert</name></expr></argument>, 
                                         <argument><expr><call><name><name>const_cast</name><argument_list>&lt;<argument><expr><name>char</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>nickname</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, 
                                         <argument><expr><call><name><name>trust</name>.<name>GetTrust</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

  <if>if <condition>(<expr><name>srv</name> != <name>SECSuccess</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <comment type="line">// Import additional delivered certificates that can be verified.</comment>

  <comment type="line">// build a CertList for filtering</comment>
  <decl_stmt><decl><type><name>CERTCertList</name> *</type><name>certList</name> <init>= <expr><call><name>CERT_NewCertList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>certList</name> == <name>NULL</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <function_decl><type><name>CERTCertListCleaner</name></type> <name>listCleaner</name><parameter_list>(<param><decl><type><name>certList</name></type></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// get all remaining certs into temp store</comment>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name><init>=<expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>numCerts</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
    <if>if <condition>(<expr><name>i</name> == <name>selCertIndex</name></expr>)</condition><then> <block>{
      <comment type="line">// we already processed that one</comment>
      <continue>continue;</continue>
    }</block></then></if>

    <expr_stmt><expr><name>certToShow</name> = <call><name>do_QueryElementAt</name><argument_list>(<argument><expr><name>x509Certs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>certToShow</name>-&gt;<name>GetRawDER</name></name><argument_list>(<argument><expr>&amp;<name><name>der</name>.<name>len</name></name></expr></argument>, <argument><expr>(<name>PRUint8</name> **)&amp;<name><name>der</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CERTCertificate</name> *</type><name>tmpCert2</name> <init>= 
      <expr><call><name>CERT_NewTempCertificate</name><argument_list>(<argument><expr><name>certdb</name></expr></argument>, <argument><expr>&amp;<name>der</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>nsMemory</name>::<name>Free</name></name><argument_list>(<argument><expr><name><name>der</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>der</name>.<name>data</name></name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>der</name>.<name>len</name></name> = 0</expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name>tmpCert2</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Couldn't create temp cert from DER blob"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>  <comment type="line">// Let's try to import the rest of 'em</comment>
    }</block></then></if>
    
    <expr_stmt><expr><call><name>CERT_AddCertToListTail</name><argument_list>(<argument><expr><name>certList</name></expr></argument>, <argument><expr><name>tmpCert2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <return>return <expr><call><name>ImportValidCACertsInList</name><argument_list>(<argument><expr><name>certList</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
 *  [noscript] void importCertificates(in charPtr data, in unsigned long length,
 *                                     in unsigned long type, 
 *                                     in nsIInterfaceRequestor ctx);
 */</comment>
<function><type><name>NS_IMETHODIMP</name></type> 
<name><name>nsNSSCertificateDB</name>::<name>ImportCertificates</name></name><parameter_list>(<param><decl><type><name>PRUint8</name> *</type> <name>data</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>length</name></decl></param>, 
                                       <param><decl><type><name>PRUint32</name></type> <name>type</name></decl></param>, 
                                       <param><decl><type><name>nsIInterfaceRequestor</name> *</type><name>ctx</name></decl></param>)</parameter_list>

<block>{
  <decl_stmt><decl><type><name>nsNSSShutDownPreventionLock</name></type> <name>locker</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>nsrv</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PRArenaPool</name> *</type><name>arena</name> <init>= <expr><call><name>PORT_NewArena</name><argument_list>(<argument><expr><name>DER_DEFAULT_CHUNKSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>arena</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>CERTDERCerts</name> *</type><name>certCollection</name> <init>= <expr><call><name>getCertsFromPackage</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>certCollection</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PORT_FreeArena</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIMutableArray</name></expr></argument>&gt;</argument_list></name></type> <name>array</name> <init>=
    <expr><call><name>do_CreateInstance</name><argument_list>(<argument><expr><name>NS_ARRAY_CONTRACTID</name></expr></argument>, <argument><expr>&amp;<name>nsrv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>nsrv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PORT_FreeArena</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>nsrv</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// Now let's create some certs to work with</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIX509Cert</name></expr></argument>&gt;</argument_list></name></type> <name>x509Cert</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsNSSCertificate</name> *</type><name>nssCert</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SECItem</name> *</type><name>currItem</name></decl>;</decl_stmt>
  <for>for (<init><decl><type><name>int</name></type> <name>i</name><init>=<expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>certCollection</name>-&gt;<name>numcerts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
     <expr_stmt><expr><name>currItem</name> = &amp;<name><name>certCollection</name>-&gt;<name>rawCerts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
     <expr_stmt><expr><name>nssCert</name> = <call><name><name>nsNSSCertificate</name>::<name>ConstructFromDER</name></name><argument_list>(<argument><expr>(<name>char</name>*)<name><name>currItem</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>currItem</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <if>if <condition>(<expr>!<name>nssCert</name></expr>)</condition><then>
       <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
     <expr_stmt><expr><name>x509Cert</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr>(<name>nsIX509Cert</name>*)<name>nssCert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>array</name>-&gt;<name>AppendElement</name></name><argument_list>(<argument><expr><name>x509Cert</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
  <case>case <expr><name><name>nsIX509Cert</name>::<name>CA_CERT</name></name></expr>:
    <expr_stmt><expr><name>nsrv</name> = <call><name>handleCACertDownload</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </case><default>default:
    <comment type="line">// We only deal with import CA certs in this method currently.</comment>
     <expr_stmt><expr><name>nsrv</name> = <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt>
     <break>break;</break>
  </default>}</block></switch>  
  <expr_stmt><expr><call><name>PORT_FreeArena</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>nsrv</name></expr>;</return>
}</block></function>


<comment type="block">/*
 *  [noscript] void importEmailCertificates(in charPtr data, in unsigned long length,
 *                                     in nsIInterfaceRequestor ctx);
 */</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsNSSCertificateDB</name>::<name>ImportEmailCertificate</name></name><parameter_list>(<param><decl><type><name>PRUint8</name> *</type> <name>data</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>length</name></decl></param>, 
                                       <param><decl><type><name>nsIInterfaceRequestor</name> *</type><name>ctx</name></decl></param>)</parameter_list>

<block>{
  <decl_stmt><decl><type><name>nsNSSShutDownPreventionLock</name></type> <name>locker</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SECStatus</name></type> <name>srv</name> <init>= <expr><name>SECFailure</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>nsrv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTCertDBHandle</name> *</type><name>certdb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTCertificate</name> **</type><name>certArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTCertList</name> *</type><name>certList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTCertListNode</name> *</type><name>node</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRTime</name></type> <name>now</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SECCertUsage</name></type> <name>certusage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SECItem</name> **</type><name>rawArray</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>numcerts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
 
  <decl_stmt><decl><type><name>PRArenaPool</name> *</type><name>arena</name> <init>= <expr><call><name>PORT_NewArena</name><argument_list>(<argument><expr><name>DER_DEFAULT_CHUNKSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>arena</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>CERTDERCerts</name> *</type><name>certCollection</name> <init>= <expr><call><name>getCertsFromPackage</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>certCollection</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PORT_FreeArena</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>certdb</name> = <call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>certusage</name> = <name>certUsageEmailRecipient</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>numcerts</name> = <name><name>certCollection</name>-&gt;<name>numcerts</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>rawArray</name> = (<name>SECItem</name> **) <call><name>PORT_Alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SECItem</name> *</expr></argument>)</argument_list></sizeof> * <name>numcerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>( <expr>!<name>rawArray</name></expr> )</condition><then> <block>{
    <expr_stmt><expr><name>nsrv</name> = <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt>
    <goto>goto <name>loser</name>;</goto>
  }</block></then></if>

  <for>for (<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; <name>numcerts</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
    <expr_stmt><expr><name><name>rawArray</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>certCollection</name>-&gt;<name>rawCerts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  }</block></for>

  <expr_stmt><expr><name>srv</name> = <call><name>CERT_ImportCerts</name><argument_list>(<argument><expr><name>certdb</name></expr></argument>, <argument><expr><name>certusage</name></expr></argument>, <argument><expr><name>numcerts</name></expr></argument>, <argument><expr><name>rawArray</name></expr></argument>, 
                         <argument><expr>&amp;<name>certArray</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>PORT_Free</name><argument_list>(<argument><expr><name>rawArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rawArray</name> = <name>NULL</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>srv</name> != <name>SECSuccess</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>nsrv</name> = <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt>
    <goto>goto <name>loser</name>;</goto>
  }</block></then></if>

  <comment type="line">// build a CertList for filtering</comment>
  <expr_stmt><expr><name>certList</name> = <call><name>CERT_NewCertList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>certList</name> == <name>NULL</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>nsrv</name> = <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt>
    <goto>goto <name>loser</name>;</goto>
  }</block></then></if>
  <for>for (<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; <name>numcerts</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
    <decl_stmt><decl><type><name>CERTCertificate</name> *</type><name>cert</name> <init>= <expr><name><name>certArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>cert</name></expr>)</condition><then>
      <expr_stmt><expr><name>cert</name> = <call><name>CERT_DupCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>cert</name></expr>)</condition><then>
      <expr_stmt><expr><call><name>CERT_AddCertToListTail</name><argument_list>(<argument><expr><name>certList</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  }</block></for>

  <comment type="block">/* go down the remaining list of certs and verify that they have
   * valid chains, then import them.
   */</comment>
  <expr_stmt><expr><name>now</name> = <call><name>PR_Now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>node</name> = <call><name>CERT_LIST_HEAD</name><argument_list>(<argument><expr><name>certList</name></expr></argument>)</argument_list></call></expr>;</init>
       <condition><expr>!<call><name>CERT_LIST_END</name><argument_list>(<argument><expr><name>node</name></expr></argument>,<argument><expr><name>certList</name></expr></argument>)</argument_list></call></expr>;</condition>
       <incr><expr><name>node</name> = <call><name>CERT_LIST_NEXT</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></incr>) <block>{

    <decl_stmt><decl><type><name>bool</name></type> <name>alert_and_skip</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name><name>node</name>-&gt;<name>cert</name></name></expr>)</condition><then> <block>{
      <continue>continue;</continue>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>CERT_VerifyCert</name><argument_list>(<argument><expr><name>certdb</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>cert</name></name></expr></argument>, 
        <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>certusage</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> != <name>SECSuccess</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>alert_and_skip</name> = true</expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>CERTCertificateList</name> *</type><name>certChain</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>CERTCertificateListCleaner</name></type> <name>chainCleaner</name><parameter_list>(<param><decl><type><name>certChain</name></type></decl></param>)</parameter_list>;</function_decl>

    <if>if <condition>(<expr>!<name>alert_and_skip</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>certChain</name> = <call><name>CERT_CertChainFromCert</name><argument_list>(<argument><expr><name><name>node</name>-&gt;<name>cert</name></name></expr></argument>, <argument><expr><name>certusage</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>!<name>certChain</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>alert_and_skip</name> = true</expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>alert_and_skip</name></expr>)</condition><then> <block>{    
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIX509Cert</name></expr></argument>&gt;</argument_list></name></type> <name>certToShow</name> <init>= <expr>new <call><name>nsNSSCertificate</name><argument_list>(<argument><expr><name><name>node</name>-&gt;<name>cert</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>DisplayCertificateAlert</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>"NotImportingUnverifiedCert"</expr></argument>, <argument><expr><name>certToShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    }</block></then></if>

    <comment type="block">/*
     * CertChain returns an array of SECItems, import expects an array of
     * SECItem pointers. Create the SECItem Pointers from the array of
     * SECItems.
     */</comment>
    <expr_stmt><expr><name>rawArray</name> = (<name>SECItem</name> **) <call><name>PORT_Alloc</name><argument_list>(<argument><expr><name><name>certChain</name>-&gt;<name>len</name></name> * <sizeof>sizeof<argument_list>(<argument><expr><name>SECItem</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>rawArray</name></expr>)</condition><then> <block>{
      <continue>continue;</continue>
    }</block></then></if>
    <for>for (<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>certChain</name>-&gt;<name>len</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
      <expr_stmt><expr><name><name>rawArray</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>certChain</name>-&gt;<name>certs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>CERT_ImportCerts</name><argument_list>(<argument><expr><name>certdb</name></expr></argument>, <argument><expr><name>certusage</name></expr></argument>, <argument><expr><name><name>certChain</name>-&gt;<name>len</name></name></expr></argument>, 
                            <argument><expr><name>rawArray</name></expr></argument>,  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CERT_SaveSMimeProfile</name><argument_list>(<argument><expr><name><name>node</name>-&gt;<name>cert</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PORT_Free</name><argument_list>(<argument><expr><name>rawArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

<label><name>loser</name>:</label>
  <if>if <condition>(<expr><name>certArray</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>CERT_DestroyCertArray</name><argument_list>(<argument><expr><name>certArray</name></expr></argument>, <argument><expr><name>numcerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr><name>certList</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>CERT_DestroyCertList</name><argument_list>(<argument><expr><name>certList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr><name>arena</name></expr>)</condition><then> 
    <expr_stmt><expr><call><name>PORT_FreeArena</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <return>return <expr><name>nsrv</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsNSSCertificateDB</name>::<name>ImportServerCertificate</name></name><parameter_list>(<param><decl><type><name>PRUint8</name> *</type> <name>data</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>length</name></decl></param>, 
                                            <param><decl><type><name>nsIInterfaceRequestor</name> *</type><name>ctx</name></decl></param>)</parameter_list>

<block>{
  <decl_stmt><decl><type><name>nsNSSShutDownPreventionLock</name></type> <name>locker</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SECStatus</name></type> <name>srv</name> <init>= <expr><name>SECFailure</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>nsrv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTCertificate</name> *</type> <name>cert</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SECItem</name> **</type><name>rawCerts</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>numcerts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsNSSCertTrust</name></type> <name>trust</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>serverNickname</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
 
  <decl_stmt><decl><type><name>PRArenaPool</name> *</type><name>arena</name> <init>= <expr><call><name>PORT_NewArena</name><argument_list>(<argument><expr><name>DER_DEFAULT_CHUNKSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>arena</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>CERTDERCerts</name> *</type><name>certCollection</name> <init>= <expr><call><name>getCertsFromPackage</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>certCollection</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PORT_FreeArena</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>cert</name> = <call><name>CERT_NewTempCertificate</name><argument_list>(<argument><expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>certCollection</name>-&gt;<name>rawCerts</name></name></expr></argument>,
                          <argument><expr>(<name>char</name> *)<name>NULL</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>cert</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>nsrv</name> = <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt>
    <goto>goto <name>loser</name>;</goto>
  }</block></then></if>
  <expr_stmt><expr><name>numcerts</name> = <name><name>certCollection</name>-&gt;<name>numcerts</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rawCerts</name> = (<name>SECItem</name> **) <call><name>PORT_Alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SECItem</name> *</expr></argument>)</argument_list></sizeof> * <name>numcerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>( <expr>!<name>rawCerts</name></expr> )</condition><then> <block>{
    <expr_stmt><expr><name>nsrv</name> = <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt>
    <goto>goto <name>loser</name>;</goto>
  }</block></then></if>

  <for>for ( <init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>numcerts</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> ) <block>{
    <expr_stmt><expr><name><name>rawCerts</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>certCollection</name>-&gt;<name>rawCerts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  }</block></for>

  <expr_stmt><expr><name>serverNickname</name> = <call><name><name>nsNSSCertificate</name>::<name>defaultServerNickname</name></name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>srv</name> = <call><name>CERT_ImportCerts</name><argument_list>(<argument><expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>certUsageSSLServer</name></expr></argument>,
             <argument><expr><name>numcerts</name></expr></argument>, <argument><expr><name>rawCerts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>,
             <argument><expr><name>serverNickname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PR_FREEIF</name><argument_list>(<argument><expr><name>serverNickname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>( <expr><name>srv</name> != <name>SECSuccess</name></expr> )</condition><then> <block>{
    <expr_stmt><expr><name>nsrv</name> = <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt>
    <goto>goto <name>loser</name>;</goto>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>trust</name>.<name>SetValidServerPeer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>srv</name> = <call><name>CERT_ChangeCertTrust</name><argument_list>(<argument><expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><call><name><name>trust</name>.<name>GetTrust</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>( <expr><name>srv</name> != <name>SECSuccess</name></expr> )</condition><then> <block>{
    <expr_stmt><expr><name>nsrv</name> = <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt>
    <goto>goto <name>loser</name>;</goto>
  }</block></then></if>
<label><name>loser</name>:</label>
  <expr_stmt><expr><call><name>PORT_Free</name><argument_list>(<argument><expr><name>rawCerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>cert</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>arena</name></expr>)</condition><then> 
    <expr_stmt><expr><call><name>PORT_FreeArena</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <return>return <expr><name>nsrv</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsNSSCertificateDB</name>::<name>ImportValidCACerts</name></name><parameter_list>(<param><decl><type><name>int</name></type> <name>numCACerts</name></decl></param>, <param><decl><type><name>SECItem</name> *</type><name>CACerts</name></decl></param>, <param><decl><type><name>nsIInterfaceRequestor</name> *</type><name>ctx</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>CERTCertList</name> *</type><name>certList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SECItem</name> **</type><name>rawArray</name></decl>;</decl_stmt>

  <comment type="line">// build a CertList for filtering</comment>
  <expr_stmt><expr><name>certList</name> = <call><name>CERT_NewCertList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>certList</name> == <name>NULL</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <function_decl><type><name>CERTCertListCleaner</name></type> <name>listCleaner</name><parameter_list>(<param><decl><type><name>certList</name></type></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// get all certs into temp store</comment>
  <decl_stmt><decl><type><name>SECStatus</name></type> <name>srv</name> <init>= <expr><name>SECFailure</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTCertificate</name> **</type><name>certArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rawArray</name> = (<name>SECItem</name> **) <call><name>PORT_Alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SECItem</name> *</expr></argument>)</argument_list></sizeof> * <name>numCACerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>( <expr>!<name>rawArray</name></expr> )</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <for>for (<init><decl><type><name>int</name></type> <name>i</name><init>=<expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>numCACerts</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
    <expr_stmt><expr><name><name>rawArray</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>CACerts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  }</block></for>

  <expr_stmt><expr><name>srv</name> = <call><name>CERT_ImportCerts</name><argument_list>(<argument><expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>certUsageAnyCA</name></expr></argument>, <argument><expr><name>numCACerts</name></expr></argument>, <argument><expr><name>rawArray</name></expr></argument>, 
                         <argument><expr>&amp;<name>certArray</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>PORT_Free</name><argument_list>(<argument><expr><name>rawArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rawArray</name> = <name>NULL</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>srv</name> != <name>SECSuccess</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <for>for (<init><decl><type><name>int</name></type> <name>i2</name><init>=<expr>0</expr></init></decl>;</init> <condition><expr><name>i2</name> &lt; <name>numCACerts</name></expr>;</condition> <incr><expr><name>i2</name>++</expr></incr>) <block>{
    <decl_stmt><decl><type><name>CERTCertificate</name> *</type><name>cacert</name> <init>= <expr><name><name>certArray</name><index>[<expr><name>i2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>cacert</name></expr>)</condition><then>
      <expr_stmt><expr><name>cacert</name> = <call><name>CERT_DupCertificate</name><argument_list>(<argument><expr><name>cacert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>cacert</name></expr>)</condition><then>
      <expr_stmt><expr><call><name>CERT_AddCertToListTail</name><argument_list>(<argument><expr><name>certList</name></expr></argument>, <argument><expr><name>cacert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  }</block></for>

  <expr_stmt><expr><call><name>CERT_DestroyCertArray</name><argument_list>(<argument><expr><name>certArray</name></expr></argument>, <argument><expr><name>numCACerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>ImportValidCACertsInList</name><argument_list>(<argument><expr><name>certList</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsNSSCertificateDB</name>::<name>ImportValidCACertsInList</name></name><parameter_list>(<param><decl><type><name>CERTCertList</name> *</type><name>certList</name></decl></param>, <param><decl><type><name>nsIInterfaceRequestor</name> *</type><name>ctx</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>SECItem</name> **</type><name>rawArray</name></decl>;</decl_stmt>

  <comment type="block">/* filter out the certs we don't want */</comment>
  <decl_stmt><decl><type><name>SECStatus</name></type> <name>srv</name> <init>= <expr><call><name>CERT_FilterCertListByUsage</name><argument_list>(<argument><expr><name>certList</name></expr></argument>, <argument><expr><name>certUsageAnyCA</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>srv</name> != <name>SECSuccess</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <comment type="block">/* go down the remaining list of certs and verify that they have
   * valid chains, if yes, then import.
   */</comment>
  <decl_stmt><decl><type><name>PRTime</name></type> <name>now</name> <init>= <expr><call><name>PR_Now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTCertListNode</name> *</type><name>node</name></decl>;</decl_stmt>
  <for>for (<init><expr><name>node</name> = <call><name>CERT_LIST_HEAD</name><argument_list>(<argument><expr><name>certList</name></expr></argument>)</argument_list></call></expr>;</init>
       <condition><expr>!<call><name>CERT_LIST_END</name><argument_list>(<argument><expr><name>node</name></expr></argument>,<argument><expr><name>certList</name></expr></argument>)</argument_list></call></expr>;</condition>
       <incr><expr><name>node</name> = <call><name>CERT_LIST_NEXT</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></incr>) <block>{

    <decl_stmt><decl><type><name>bool</name></type> <name>alert_and_skip</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>CERT_VerifyCert</name><argument_list>(<argument><expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>cert</name></name></expr></argument>, 
        <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>certUsageVerifyCA</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> != <name>SECSuccess</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>alert_and_skip</name> = true</expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>CERTCertificateList</name> *</type><name>certChain</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>CERTCertificateListCleaner</name></type> <name>chainCleaner</name><parameter_list>(<param><decl><type><name>certChain</name></type></decl></param>)</parameter_list>;</function_decl>

    <if>if <condition>(<expr>!<name>alert_and_skip</name></expr>)</condition><then> <block>{    
      <expr_stmt><expr><name>certChain</name> = <call><name>CERT_CertChainFromCert</name><argument_list>(<argument><expr><name><name>node</name>-&gt;<name>cert</name></name></expr></argument>, <argument><expr><name>certUsageAnyCA</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>!<name>certChain</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>alert_and_skip</name> = true</expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>alert_and_skip</name></expr>)</condition><then> <block>{    
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIX509Cert</name></expr></argument>&gt;</argument_list></name></type> <name>certToShow</name> <init>= <expr>new <call><name>nsNSSCertificate</name><argument_list>(<argument><expr><name><name>node</name>-&gt;<name>cert</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>DisplayCertificateAlert</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>"NotImportingUnverifiedCert"</expr></argument>, <argument><expr><name>certToShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    }</block></then></if>

    <comment type="block">/*
     * CertChain returns an array of SECItems, import expects an array of
     * SECItem pointers. Create the SECItem Pointers from the array of
     * SECItems.
     */</comment>
    <expr_stmt><expr><name>rawArray</name> = (<name>SECItem</name> **) <call><name>PORT_Alloc</name><argument_list>(<argument><expr><name><name>certChain</name>-&gt;<name>len</name></name> * <sizeof>sizeof<argument_list>(<argument><expr><name>SECItem</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>rawArray</name></expr>)</condition><then> <block>{
      <continue>continue;</continue>
    }</block></then></if>
    <for>for (<init><decl><type><name>int</name></type> <name>i</name><init>=<expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>certChain</name>-&gt;<name>len</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
      <expr_stmt><expr><name><name>rawArray</name><index>[<expr><name>i</name></expr>]</index></name> = &amp;<name><name>certChain</name>-&gt;<name>certs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>CERT_ImportCerts</name><argument_list>(<argument><expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>certUsageAnyCA</name></expr></argument>, <argument><expr><name><name>certChain</name>-&gt;<name>len</name></name></expr></argument>, 
                            <argument><expr><name>rawArray</name></expr></argument>,  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PORT_Free</name><argument_list>(<argument><expr><name>rawArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name><name>nsNSSCertificateDB</name>::<name>DisplayCertificateAlert</name></name><parameter_list>(<param><decl><type><name>nsIInterfaceRequestor</name> *</type><name>ctx</name></decl></param>, 
                                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>stringID</name></decl></param>, 
                                                 <param><decl><type><name>nsIX509Cert</name> *</type><name>certToShow</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsPSMUITracker</name></type> <name>tracker</name></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<call><name><name>tracker</name>.<name>isUIForbidden</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIInterfaceRequestor</name></expr></argument>&gt;</argument_list></name></type> <name>my_cxt</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>my_cxt</name></expr>)</condition><then>
      <expr_stmt><expr><name>my_cxt</name> = new <call><name>PipUIContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

    <comment type="line">// This shall be replaced by embedding ovverridable prompts</comment>
    <comment type="line">// as discussed in bug 310446, and should make use of certToShow.</comment>

    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINSSComponent</name></expr></argument>&gt;</argument_list></name></type> <name>nssComponent</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>kNSSComponentCID</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsAutoString</name></type> <name>tmpMessage</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>nssComponent</name>-&gt;<name>GetPIPNSSBundleString</name></name><argument_list>(<argument><expr><name>stringID</name></expr></argument>, <argument><expr><name>tmpMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// The interface requestor object may not be safe, so proxy the call to get</comment>
      <comment type="line">// the nsIPrompt.</comment>

      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIInterfaceRequestor</name></expr></argument>&gt;</argument_list></name></type> <name>proxiedCallbacks</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>NS_GetProxyForObject</name><argument_list>(<argument><expr><name>NS_PROXY_TO_MAIN_THREAD</name></expr></argument>,
                           <argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsIInterfaceRequestor</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><name>my_cxt</name></expr></argument>,
                           <argument><expr><name>NS_PROXY_SYNC</name></expr></argument>,
                           <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>proxiedCallbacks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrompt</name></expr></argument>&gt;</argument_list></name></type> <name>prompt</name> <argument_list>(<argument><expr><call><name>do_GetInterface</name><argument_list>(<argument><expr><name>proxiedCallbacks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>prompt</name></expr>)</condition><then>
        <return>return;</return></then></if>
    
      <comment type="line">// Finally, get a proxy for the nsIPrompt</comment>
    
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrompt</name></expr></argument>&gt;</argument_list></name></type> <name>proxyPrompt</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>NS_GetProxyForObject</name><argument_list>(<argument><expr><name>NS_PROXY_TO_MAIN_THREAD</name></expr></argument>,
                           <argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsIPrompt</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><name>prompt</name></expr></argument>,
                           <argument><expr><name>NS_PROXY_SYNC</name></expr></argument>,
                           <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>proxyPrompt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
      <expr_stmt><expr><call><name><name>proxyPrompt</name>-&gt;<name>Alert</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><call><name><name>tmpMessage</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type> 
<name><name>nsNSSCertificateDB</name>::<name>ImportUserCertificate</name></name><parameter_list>(<param><decl><type><name>PRUint8</name> *</type><name>data</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>length</name></decl></param>, <param><decl><type><name>nsIInterfaceRequestor</name> *</type><name>ctx</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsNSSShutDownPreventionLock</name></type> <name>locker</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PK11SlotInfo</name> *</type><name>slot</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>nickname</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_ERROR_FAILURE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>numCACerts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SECItem</name> *</type><name>CACerts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTDERCerts</name> *</type> <name>collectArgs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRArenaPool</name> *</type><name>arena</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTCertificate</name> *</type> <name>cert</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>arena</name> = <call><name>PORT_NewArena</name><argument_list>(<argument><expr><name>DER_DEFAULT_CHUNKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>( <expr><name>arena</name> == <name>NULL</name></expr> )</condition><then> <block>{
    <goto>goto <name>loser</name>;</goto>
  }</block></then></if>

  <expr_stmt><expr><name>collectArgs</name> = <call><name>getCertsFromPackage</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>collectArgs</name></expr>)</condition><then> <block>{
    <goto>goto <name>loser</name>;</goto>
  }</block></then></if>

  <expr_stmt><expr><name>cert</name> = <call><name>CERT_NewTempCertificate</name><argument_list>(<argument><expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>collectArgs</name>-&gt;<name>rawCerts</name></name></expr></argument>,
                	       <argument><expr>(<name>char</name> *)<name>NULL</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>cert</name></expr>)</condition><then> <block>{
    <goto>goto <name>loser</name>;</goto>
  }</block></then></if>

  <expr_stmt><expr><name>slot</name> = <call><name>PK11_KeyForCertExists</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>( <expr><name>slot</name> == <name>NULL</name></expr> )</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIX509Cert</name></expr></argument>&gt;</argument_list></name></type> <name>certToShow</name> <init>= <expr>new <call><name>nsNSSCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>DisplayCertificateAlert</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>"UserCertIgnoredNoPrivateKey"</expr></argument>, <argument><expr><name>certToShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>loser</name>;</goto>
  }</block></then></if>
  <expr_stmt><expr><call><name>PK11_FreeSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* pick a nickname for the cert */</comment>
  <if>if <condition>(<expr><name><name>cert</name>-&gt;<name>nickname</name></name></expr>)</condition><then> <block>{
	<comment type="block">/* sigh, we need a call to look up other certs with this subject and
	 * identify nicknames from them. We can no longer walk down internal
	 * database structures  rjr */</comment>
  	<expr_stmt><expr><name>nickname</name> = <name><name>cert</name>-&gt;<name>nickname</name></name></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <expr_stmt><expr><call><name>get_default_nickname</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>nickname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <comment type="block">/* user wants to import the cert */</comment>
  <block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>cast_const_away</name> <init>= <expr><call><name><name>const_cast</name><argument_list>&lt;<argument><expr><name>char</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>nickname</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>slot</name> = <call><name>PK11_ImportCertForKey</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>cast_const_away</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <if>if <condition>(<expr>!<name>slot</name></expr>)</condition><then> <block>{
    <goto>goto <name>loser</name>;</goto>
  }</block></then></if>
  <expr_stmt><expr><call><name>PK11_FreeSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIX509Cert</name></expr></argument>&gt;</argument_list></name></type> <name>certToShow</name> <init>= <expr>new <call><name>nsNSSCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>DisplayCertificateAlert</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>"UserCertImported"</expr></argument>, <argument><expr><name>certToShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><name>rv</name> = <name>NS_OK</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>numCACerts</name> = <name><name>collectArgs</name>-&gt;<name>numcerts</name></name> - 1</expr>;</expr_stmt>
  <if>if <condition>(<expr><name>numCACerts</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>CACerts</name> = <name><name>collectArgs</name>-&gt;<name>rawCerts</name></name>+1</expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>ImportValidCACerts</name><argument_list>(<argument><expr><name>numCACerts</name></expr></argument>, <argument><expr><name>CACerts</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  
<label><name>loser</name>:</label>
  <if>if <condition>(<expr><name>arena</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PORT_FreeArena</name><argument_list>(<argument><expr><name>arena</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>( <expr><name>cert</name></expr> )</condition><then> <block>{
    <expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * void deleteCertificate(in nsIX509Cert aCert);
 */</comment>
<function><type><name>NS_IMETHODIMP</name></type> 
<name><name>nsNSSCertificateDB</name>::<name>DeleteCertificate</name></name><parameter_list>(<param><decl><type><name>nsIX509Cert</name> *</type><name>aCert</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsNSSShutDownPreventionLock</name></type> <name>locker</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIX509Cert2</name></expr></argument>&gt;</argument_list></name></type> <name>nssCert</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aCert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTCertificate</name> *</type><name>cert</name> <init>= <expr><call><name><name>nssCert</name>-&gt;<name>GetCert</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>cert</name></expr>)</condition><then> <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
  <function_decl><type><name>CERTCertificateCleaner</name></type> <name>certCleaner</name><parameter_list>(<param><decl><type><name>cert</name></type></decl></param>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>SECStatus</name></type> <name>srv</name> <init>= <expr><name>SECSuccess</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>certType</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>nssCert</name>-&gt;<name>GetCertType</name></name><argument_list>(<argument><expr>&amp;<name>certType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name><name>nssCert</name>-&gt;<name>MarkForPermDeletion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
  <block>{
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><name><name>cert</name>-&gt;<name>slot</name></name> &amp;&amp; <name>certType</name> != <name><name>nsIX509Cert</name>::<name>USER_CERT</name></name></expr>)</condition><then> <block>{
    <comment type="line">// To delete a cert of a slot (builtin, most likely), mark it as</comment>
    <comment type="line">// completely untrusted.  This way we keep a copy cached in the</comment>
    <comment type="line">// local database, and next time we try to load it off of the </comment>
    <comment type="line">// external token/slot, we'll know not to trust it.  We don't </comment>
    <comment type="line">// want to do that with user certs, because a user may  re-store</comment>
    <comment type="line">// the cert onto the card again at which point we *will* want to </comment>
    <comment type="line">// trust that cert if it chains up properly.</comment>
    <decl_stmt><decl><type><name>nsNSSCertTrust</name></type> <name>trust</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>srv</name> = <call><name>CERT_ChangeCertTrust</name><argument_list>(<argument><expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></argument>, 
                               <argument><expr><name>cert</name></expr></argument>, <argument><expr><call><name><name>trust</name>.<name>GetTrust</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gPIPNSSLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("cert deleted: %d", <name>srv</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr>(<name>srv</name>) ? <name>NS_ERROR_FAILURE</name> : <name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * void setCertTrust(in nsIX509Cert cert,
 *                   in unsigned long type,
 *                   in unsigned long trust);
 */</comment>
<function><type><name>NS_IMETHODIMP</name></type> 
<name><name>nsNSSCertificateDB</name>::<name>SetCertTrust</name></name><parameter_list>(<param><decl><type><name>nsIX509Cert</name> *</type><name>cert</name></decl></param>, 
                                 <param><decl><type><name>PRUint32</name></type> <name>type</name></decl></param>,
                                 <param><decl><type><name>PRUint32</name></type> <name>trusted</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsNSSShutDownPreventionLock</name></type> <name>locker</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SECStatus</name></type> <name>srv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsNSSCertTrust</name></type> <name>trust</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIX509Cert2</name></expr></argument>&gt;</argument_list></name></type> <name>pipCert</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>pipCert</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
  <decl_stmt><decl><type><name>CERTCertificate</name> *</type><name>nsscert</name> <init>= <expr><call><name><name>pipCert</name>-&gt;<name>GetCert</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>CERTCertificateCleaner</name></type> <name>certCleaner</name><parameter_list>(<param><decl><type><name>nsscert</name></type></decl></param>)</parameter_list>;</function_decl>
  <if>if <condition>(<expr><name>type</name> == <name><name>nsIX509Cert</name>::<name>CA_CERT</name></name></expr>)</condition><then> <block>{
    <comment type="line">// always start with untrusted and move up</comment>
    <expr_stmt><expr><call><name><name>trust</name>.<name>SetValidCA</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>trust</name>.<name>AddCATrust</name></name><argument_list>(<argument><expr>!!(<name>trusted</name> &amp; <name><name>nsIX509CertDB</name>::<name>TRUSTED_SSL</name></name>)</expr></argument>,
                     <argument><expr>!!(<name>trusted</name> &amp; <name><name>nsIX509CertDB</name>::<name>TRUSTED_EMAIL</name></name>)</expr></argument>,
                     <argument><expr>!!(<name>trusted</name> &amp; <name><name>nsIX509CertDB</name>::<name>TRUSTED_OBJSIGN</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>srv</name> = <call><name>CERT_ChangeCertTrust</name><argument_list>(<argument><expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></argument>, 
                               <argument><expr><name>nsscert</name></expr></argument>,
                               <argument><expr><call><name><name>trust</name>.<name>GetTrust</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <if>if <condition>(<expr><name>type</name> == <name><name>nsIX509Cert</name>::<name>SERVER_CERT</name></name></expr>)</condition><then> <block>{
    <comment type="line">// always start with untrusted and move up</comment>
    <expr_stmt><expr><call><name><name>trust</name>.<name>SetValidPeer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>trust</name>.<name>AddPeerTrust</name></name><argument_list>(<argument><expr><name>trusted</name> &amp; <name><name>nsIX509CertDB</name>::<name>TRUSTED_SSL</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>srv</name> = <call><name>CERT_ChangeCertTrust</name><argument_list>(<argument><expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></argument>, 
                               <argument><expr><name>nsscert</name></expr></argument>,
                               <argument><expr><call><name><name>trust</name>.<name>GetTrust</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <if>if <condition>(<expr><name>type</name> == <name><name>nsIX509Cert</name>::<name>EMAIL_CERT</name></name></expr>)</condition><then> <block>{
    <comment type="line">// always start with untrusted and move up</comment>
    <expr_stmt><expr><call><name><name>trust</name>.<name>SetValidPeer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>trust</name>.<name>AddPeerTrust</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>!!(<name>trusted</name> &amp; <name><name>nsIX509CertDB</name>::<name>TRUSTED_EMAIL</name></name>)</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>srv</name> = <call><name>CERT_ChangeCertTrust</name><argument_list>(<argument><expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></argument>, 
                               <argument><expr><name>nsscert</name></expr></argument>,
                               <argument><expr><call><name><name>trust</name>.<name>GetTrust</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <comment type="line">// ignore user certs</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></else></if></else></if></else></if>
  <return>return <expr>(<name>srv</name>) ? <name>NS_ERROR_FAILURE</name> : <name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> 
<name><name>nsNSSCertificateDB</name>::<name>IsCertTrusted</name></name><parameter_list>(<param><decl><type><name>nsIX509Cert</name> *</type><name>cert</name></decl></param>, 
                                  <param><decl><type><name>PRUint32</name></type> <name>certType</name></decl></param>,
                                  <param><decl><type><name>PRUint32</name></type> <name>trustType</name></decl></param>,
                                  <param><decl><type><name>PRBool</name> *</type><name>_isTrusted</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>_isTrusted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>_isTrusted</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsNSSShutDownPreventionLock</name></type> <name>locker</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SECStatus</name></type> <name>srv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIX509Cert2</name></expr></argument>&gt;</argument_list></name></type> <name>pipCert</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTCertificate</name> *</type><name>nsscert</name> <init>= <expr><call><name><name>pipCert</name>-&gt;<name>GetCert</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTCertTrust</name></type> <name>nsstrust</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>srv</name> = <call><name>CERT_GetCertTrust</name><argument_list>(<argument><expr><name>nsscert</name></expr></argument>, <argument><expr>&amp;<name>nsstrust</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>srv</name> != <name>SECSuccess</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsNSSCertTrust</name></type> <name>trust</name><argument_list>(<argument><expr>&amp;<name>nsstrust</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>nsscert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>certType</name> == <name><name>nsIX509Cert</name>::<name>CA_CERT</name></name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>trustType</name> &amp; <name><name>nsIX509CertDB</name>::<name>TRUSTED_SSL</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>_isTrusted</name> = <call><name><name>trust</name>.<name>HasTrustedCA</name></name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>trustType</name> &amp; <name><name>nsIX509CertDB</name>::<name>TRUSTED_EMAIL</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>_isTrusted</name> = <call><name><name>trust</name>.<name>HasTrustedCA</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>trustType</name> &amp; <name><name>nsIX509CertDB</name>::<name>TRUSTED_OBJSIGN</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>_isTrusted</name> = <call><name><name>trust</name>.<name>HasTrustedCA</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></else></if></else></if></else></if>
  }</block></then> <else>else <if>if <condition>(<expr><name>certType</name> == <name><name>nsIX509Cert</name>::<name>SERVER_CERT</name></name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>trustType</name> &amp; <name><name>nsIX509CertDB</name>::<name>TRUSTED_SSL</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>_isTrusted</name> = <call><name><name>trust</name>.<name>HasTrustedPeer</name></name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>trustType</name> &amp; <name><name>nsIX509CertDB</name>::<name>TRUSTED_EMAIL</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>_isTrusted</name> = <call><name><name>trust</name>.<name>HasTrustedPeer</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>trustType</name> &amp; <name><name>nsIX509CertDB</name>::<name>TRUSTED_OBJSIGN</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>_isTrusted</name> = <call><name><name>trust</name>.<name>HasTrustedPeer</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></else></if></else></if></else></if>
  }</block></then> <else>else <if>if <condition>(<expr><name>certType</name> == <name><name>nsIX509Cert</name>::<name>EMAIL_CERT</name></name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>trustType</name> &amp; <name><name>nsIX509CertDB</name>::<name>TRUSTED_SSL</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>_isTrusted</name> = <call><name><name>trust</name>.<name>HasTrustedPeer</name></name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>trustType</name> &amp; <name><name>nsIX509CertDB</name>::<name>TRUSTED_EMAIL</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>_isTrusted</name> = <call><name><name>trust</name>.<name>HasTrustedPeer</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>trustType</name> &amp; <name><name>nsIX509CertDB</name>::<name>TRUSTED_OBJSIGN</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>_isTrusted</name> = <call><name><name>trust</name>.<name>HasTrustedPeer</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></else></if></else></if></else></if>
  }</block></then></if></else></if></else></if> <comment type="block">/* user: ignore */</comment>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type> 
<name><name>nsNSSCertificateDB</name>::<name>ImportCertsFromFile</name></name><parameter_list>(<param><decl><type><name>nsISupports</name> *</type><name>aToken</name></decl></param>, 
                                        <param><decl><type><name>nsILocalFile</name> *</type><name>aFile</name></decl></param>,
                                        <param><decl><type><name>PRUint32</name></type> <name>aType</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG</name><argument_list>(<argument><expr><name>aFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name>aType</name></expr>)</condition> <block>{
    <case>case <expr><name><name>nsIX509Cert</name>::<name>CA_CERT</name></name></expr>:
    </case><case>case <expr><name><name>nsIX509Cert</name>::<name>EMAIL_CERT</name></name></expr>:
    </case><case>case <expr><name><name>nsIX509Cert</name>::<name>SERVER_CERT</name></name></expr>:
      <comment type="line">// good</comment>
      <break>break;</break>
    
    </case><default>default:
      <comment type="line">// not supported (yet)</comment>
      <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  </default>}</block></switch>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRFileDesc</name> *</type><name>fd</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rv</name> = <call><name><name>aFile</name>-&gt;<name>OpenNSPRFileDesc</name></name><argument_list>(<argument><expr><name>PR_RDONLY</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <if>if <condition>(<expr>!<name>fd</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>PRFileInfo</name></type> <name>file_info</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>PR_SUCCESS</name> != <call><name>PR_GetOpenFileInfo</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr>&amp;<name>file_info</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
  
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>buf</name> <init>= <expr>new <name>unsigned</name> <name><name>char</name><index>[<expr><name><name>file_info</name>.<name>size</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>buf</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>
  
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>bytes_obtained</name> <init>= <expr><call><name>PR_Read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>file_info</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>PR_Close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if>if <condition>(<expr><name>bytes_obtained</name> != <name><name>file_info</name>.<name>size</name></name></expr>)</condition><then>
    <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt></then>
  <else>else <block>{
	  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIInterfaceRequestor</name></expr></argument>&gt;</argument_list></name></type> <name>cxt</name> <init>= <expr>new <call><name>PipUIContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>aType</name></expr>)</condition> <block>{
      <case>case <expr><name><name>nsIX509Cert</name>::<name>CA_CERT</name></name></expr>:
        <expr_stmt><expr><name>rv</name> = <call><name>ImportCertificates</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes_obtained</name></expr></argument>, <argument><expr><name>aType</name></expr></argument>, <argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
        
      </case><case>case <expr><name><name>nsIX509Cert</name>::<name>SERVER_CERT</name></name></expr>:
        <expr_stmt><expr><name>rv</name> = <call><name>ImportServerCertificate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes_obtained</name></expr></argument>, <argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      </case><case>case <expr><name><name>nsIX509Cert</name>::<name>EMAIL_CERT</name></name></expr>:
        <expr_stmt><expr><name>rv</name> = <call><name>ImportEmailCertificate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes_obtained</name></expr></argument>, <argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      
      </case><default>default:
        <break>break;</break>
    </default>}</block></switch>
  }</block></else></if>

  <expr_stmt><expr>delete <index>[]</index> <name>buf</name></expr>;</expr_stmt>
  <return>return <expr><name>rv</name></expr>;</return>  
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> 
<name><name>nsNSSCertificateDB</name>::<name>ImportPKCS12File</name></name><parameter_list>(<param><decl><type><name>nsISupports</name> *</type><name>aToken</name></decl></param>, 
                                     <param><decl><type><name>nsILocalFile</name> *</type><name>aFile</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG</name><argument_list>(<argument><expr><name>aFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>nsPKCS12Blob</name></type> <name>blob</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPK11Token</name></expr></argument>&gt;</argument_list></name></type> <name>token</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aToken</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>token</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>blob</name>.<name>SetToken</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><call><name><name>blob</name>.<name>ImportFromFile</name></name><argument_list>(<argument><expr><name>aFile</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> 
<name><name>nsNSSCertificateDB</name>::<name>ExportPKCS12File</name></name><parameter_list>(<param><decl><type><name>nsISupports</name>     *</type><name>aToken</name></decl></param>, 
                                     <param><decl><type><name>nsILocalFile</name>     *</type><name>aFile</name></decl></param>,
                                     <param><decl><type><name>PRUint32</name></type>          <name>count</name></decl></param>,
                                     <param><decl><type><name>nsIX509Cert</name>     **</type><name>certs</name></decl></param>)</parameter_list>
                                     <comment type="line">//const PRUnichar **aCertNames)</comment>
<block>{
  <decl_stmt><decl><type><name>nsNSSShutDownPreventionLock</name></type> <name>locker</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_ARG</name><argument_list>(<argument><expr><name>aFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>nsPKCS12Blob</name></type> <name>blob</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>count</name> == 0</expr>)</condition><then> <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPK11Token</name></expr></argument>&gt;</argument_list></name></type> <name>localRef</name></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>aToken</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PK11SlotInfo</name> *</type><name>keySlot</name> <init>= <expr><call><name>PK11_GetInternalKeySlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>keySlot</name></expr></argument>,<argument><expr>"Failed to get the internal key slot"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>localRef</name> = new <call><name>nsPK11Token</name><argument_list>(<argument><expr><name>keySlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PK11_FreeSlot</name><argument_list>(<argument><expr><name>keySlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <expr_stmt><expr><name>localRef</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
  <expr_stmt><expr><call><name><name>blob</name>.<name>SetToken</name></name><argument_list>(<argument><expr><name>localRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//blob.LoadCerts(aCertNames, count);</comment>
  <comment type="line">//return blob.ExportToFile(aFile);</comment>
  <return>return <expr><call><name><name>blob</name>.<name>ExportToFile</name></name><argument_list>(<argument><expr><name>aFile</name></expr></argument>, <argument><expr><name>certs</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>SECStatus</name> <name>PR_CALLBACK</name></type> 
<name>GetOCSPResponders</name> <parameter_list>(<param><decl><type><name>CERTCertificate</name> *</type><name>aCert</name></decl></param>,
                   <param><decl><type><name>SECItem</name>         *</type><name>aDBKey</name></decl></param>,
                   <param><decl><type><name>void</name>            *</type><name>aArg</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIMutableArray</name> *</type><name>array</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIMutableArray</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aArg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRUnichar</name>*</type> <name>nn</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRUnichar</name>*</type> <name>url</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>serviceURL</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>nickname</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

  <comment type="line">// Are we interested in this cert //</comment>
  <if>if <condition>(<expr>!<call><name><name>nsOCSPResponder</name>::<name>IncludeCert</name></name><argument_list>(<argument><expr><name>aCert</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>SECSuccess</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// Get the AIA and nickname //</comment>
  <expr_stmt><expr><name>serviceURL</name> = <call><name>CERT_GetOCSPAuthorityInfoAccessLocation</name><argument_list>(<argument><expr><name>aCert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>serviceURL</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>url</name> = <call><name>ToNewUnicode</name><argument_list>(<argument><expr><call><name>NS_ConvertUTF8toUTF16</name><argument_list>(<argument><expr><name>serviceURL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PORT_Free</name><argument_list>(<argument><expr><name>serviceURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><name>nickname</name> = <name><name>aCert</name>-&gt;<name>nickname</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nn</name> = <call><name>ToNewUnicode</name><argument_list>(<argument><expr><call><name>NS_ConvertUTF8toUTF16</name><argument_list>(<argument><expr><name>nickname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIOCSPResponder</name></expr></argument>&gt;</argument_list></name></type> <name>new_entry</name> <init>= <expr>new <call><name>nsOCSPResponder</name><argument_list>(<argument><expr><name>nn</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>nsMemory</name>::<name>Free</name></name><argument_list>(<argument><expr><name>nn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>nsMemory</name>::<name>Free</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Sort the items according to nickname //</comment>
  <expr_stmt><expr><name>rv</name> = <call><name><name>array</name>-&gt;<name>GetLength</name></name><argument_list>(<argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIOCSPResponder</name></expr></argument>&gt;</argument_list></name></type> <name>entry</name> <init>= <expr><call><name>do_QueryElementAt</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>nsOCSPResponder</name>::<name>CompareEntries</name></name><argument_list>(<argument><expr><name>new_entry</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>array</name>-&gt;<name>InsertElementAt</name></name><argument_list>(<argument><expr><name>new_entry</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    }</block></then></if>
  }</block></for>
  <if>if <condition>(<expr><name>i</name> == <name>count</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>array</name>-&gt;<name>AppendElement</name></name><argument_list>(<argument><expr><name>new_entry</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>SECSuccess</name></expr>;</return>
}</block></function>



<comment type="block">/*
 * getOCSPResponders
 *
 * Export a set of certs and keys from the database to a PKCS#12 file.
*/</comment>
<function><type><name>NS_IMETHODIMP</name></type> 
<name><name>nsNSSCertificateDB</name>::<name>GetOCSPResponders</name></name><parameter_list>(<param><decl><type><name>nsIArray</name> **</type> <name>aResponders</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsNSSShutDownPreventionLock</name></type> <name>locker</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SECStatus</name></type> <name>sec_rv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIMutableArray</name></expr></argument>&gt;</argument_list></name></type> <name>respondersArray</name> <init>=
    <expr><call><name>do_CreateInstance</name><argument_list>(<argument><expr><name>NS_ARRAY_CONTRACTID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>respondersArray</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>sec_rv</name> = <call><name>PK11_TraverseSlotCerts</name><argument_list>(<argument><expr><name>::<name>GetOCSPResponders</name></name></expr></argument>,
                                  <argument><expr><name>respondersArray</name></expr></argument>,
                                  <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>sec_rv</name> != <name>SECSuccess</name></expr>)</condition><then> <block>{
    <goto>goto <name>loser</name>;</goto>
  }</block></then></if>

  <expr_stmt><expr>*<name>aResponders</name> = <name>respondersArray</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aResponders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
<label><name>loser</name>:</label>
  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * NSS Helper Routines (private to nsNSSCertificateDB)
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELIM</name></cpp:macro> <cpp:value>'\001'</cpp:value></cpp:define>

<comment type="block">/*
 * GetSortedNameList
 *
 * Converts a CERTCertList to a list of certificate names
 */</comment>
<function><type><name>void</name></type>
<name><name>nsNSSCertificateDB</name>::<name>getCertNames</name></name><parameter_list>(<param><decl><type><name>CERTCertList</name> *</type><name>certList</name></decl></param>,
                                 <param><decl><type><name>PRUint32</name></type>      <name>type</name></decl></param>, 
                                 <param><decl><type><name>PRUint32</name>     *</type><name>_count</name></decl></param>,
                                 <param><decl><type><name>PRUnichar</name>  ***</type><name>_certNames</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsNSSShutDownPreventionLock</name></type> <name>locker</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTCertListNode</name> *</type><name>node</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>numcerts</name> <init>= <expr>0</expr></init>, <name>i</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRUnichar</name> **</type><name>tmpArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gPIPNSSLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("List of certs %d:\n", <name>type</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>node</name> = <call><name>CERT_LIST_HEAD</name><argument_list>(<argument><expr><name>certList</name></expr></argument>)</argument_list></call></expr>;</init>
       <condition><expr>!<call><name>CERT_LIST_END</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>certList</name></expr></argument>)</argument_list></call></expr>;</condition>
       <incr><expr><name>node</name> = <call><name>CERT_LIST_NEXT</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
    <if>if <condition>(<expr><call><name>getCertType</name><argument_list>(<argument><expr><name><name>node</name>-&gt;<name>cert</name></name></expr></argument>)</argument_list></call> == <name>type</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>numcerts</name>++</expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>
  <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gPIPNSSLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("num certs: %d\n", <name>numcerts</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nc</name> <init>= <expr>(<name>numcerts</name> == 0) ? 1 : <name>numcerts</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tmpArray</name> = (<name>PRUnichar</name> **)<call><name><name>nsMemory</name>::<name>Alloc</name></name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PRUnichar</name> *</expr></argument>)</argument_list></sizeof> * <name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>numcerts</name> == 0</expr>)</condition><then> <goto>goto <name>finish</name>;</goto></then></if>
  <for>for (<init><expr><name>node</name> = <call><name>CERT_LIST_HEAD</name><argument_list>(<argument><expr><name>certList</name></expr></argument>)</argument_list></call></expr>;</init>
       <condition><expr>!<call><name>CERT_LIST_END</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>certList</name></expr></argument>)</argument_list></call></expr>;</condition>
       <incr><expr><name>node</name> = <call><name>CERT_LIST_NEXT</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
    <if>if <condition>(<expr><call><name>getCertType</name><argument_list>(<argument><expr><name><name>node</name>-&gt;<name>cert</name></name></expr></argument>)</argument_list></call> == <name>type</name></expr>)</condition><then> <block>{
      <function_decl><type><name>nsNSSCertificate</name></type> <name>pipCert</name><parameter_list>(<param><decl><type><name><name>node</name>-&gt;<name>cert</name></name></type></decl></param>)</parameter_list>;</function_decl>
      <decl_stmt><decl><type><name>char</name> *</type><name>dbkey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> *</type><name>namestr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>nsAutoString</name></type> <name>certstr</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rv</name> = <call><name><name>pipCert</name>.<name>GetDbKey</name></name><argument_list>(<argument><expr>&amp;<name>dbkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>nsAutoString</name></type> <name>keystr</name> <init>= <expr><call><name>NS_ConvertASCIItoUTF16</name><argument_list>(<argument><expr><name>dbkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>PR_FREEIF</name><argument_list>(<argument><expr><name>dbkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>type</name> == <name><name>nsIX509Cert</name>::<name>EMAIL_CERT</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>namestr</name> = <name><name>node</name>-&gt;<name>cert</name>-&gt;<name>emailAddr</name></name></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>namestr</name> = <name><name>node</name>-&gt;<name>cert</name>-&gt;<name>nickname</name></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>namestr</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>char</name> *</type><name>sc</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>namestr</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>sc</name></expr>)</condition><then> <expr_stmt><expr>*<name>sc</name> = <name>DELIM</name></expr>;</expr_stmt></then></if>
        }</block></then></if>
      }</block></else></if>
      <decl_stmt><decl><type><name>nsAutoString</name></type> <name>certname</name> <init>= <expr><call><name>NS_ConvertASCIItoUTF16</name><argument_list>(<argument><expr><name>namestr</name> ? <name>namestr</name> : ""</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>certstr</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name>PRUnichar</name><argument_list>(<argument><expr><name>DELIM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>certstr</name> += <name>certname</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>certstr</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name>PRUnichar</name><argument_list>(<argument><expr><name>DELIM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>certstr</name> += <name>keystr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tmpArray</name><index>[<expr><name>i</name>++</expr>]</index></name> = <call><name>ToNewUnicode</name><argument_list>(<argument><expr><name>certstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>
<label><name>finish</name>:</label>
  <expr_stmt><expr>*<name>_count</name> = <name>numcerts</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>_certNames</name> = <name>tmpArray</name></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* somewhat follows logic of cert_list_include_cert from PSM 1.x */</comment>


<function><type><name>NS_IMETHODIMP</name></type> 
<name><name>nsNSSCertificateDB</name>::<name>GetIsOcspOn</name></name><parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>aOcspOn</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrefBranch</name></expr></argument>&gt;</argument_list></name></type> <name>pref</name> <init>= <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_PREFSERVICE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>ocspEnabled</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>pref</name>-&gt;<name>GetIntPref</name></name><argument_list>(<argument><expr>"security.OCSP.enabled"</expr></argument>, <argument><expr>&amp;<name>ocspEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aOcspOn</name> = ( <name>ocspEnabled</name> == 0 ) ? <name>PR_FALSE</name> : <name>PR_TRUE</name></expr>;</expr_stmt> 
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* nsIX509Cert getDefaultEmailEncryptionCert (); */</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsNSSCertificateDB</name>::<name>FindEmailEncryptionCert</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aNickname</name></decl></param>, <param><decl><type><name>nsIX509Cert</name> **</type><name>_retval</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>_retval</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <expr_stmt><expr>*<name>_retval</name> = 0</expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name><name>aNickname</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsNSSShutDownPreventionLock</name></type> <name>locker</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTCertificate</name> *</type><name>cert</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIInterfaceRequestor</name></expr></argument>&gt;</argument_list></name></type> <name>ctx</name> <init>= <expr>new <call><name>PipUIContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsNSSCertificate</name> *</type><name>nssCert</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>asciiname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>NS_ConvertUTF16toUTF8</name></type> <name>aUtf8Nickname</name><parameter_list>(<param><decl><type><name>aNickname</name></type></decl></param>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>asciiname</name> = <call><name><name>const_cast</name><argument_list>&lt;<argument><expr><name>char</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>aUtf8Nickname</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Find a good cert in the user's database */</comment>
  <expr_stmt><expr><name>cert</name> = <call><name>CERT_FindUserCertByUsage</name><argument_list>(<argument><expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>asciiname</name></expr></argument>, 
           <argument><expr><name>certUsageEmailRecipient</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>cert</name></expr>)</condition><then> <block>{ <goto>goto <name>loser</name>;</goto> }</block></then></if>  

  <expr_stmt><expr><name>nssCert</name> = new <call><name>nsNSSCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>nssCert</name> == <name>nsnull</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name>nssCert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>_retval</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIX509Cert</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nssCert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>loser</name>:</label>
  <if>if <condition>(<expr><name>cert</name></expr>)</condition><then> <expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<comment type="block">/* nsIX509Cert getDefaultEmailSigningCert (); */</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsNSSCertificateDB</name>::<name>FindEmailSigningCert</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aNickname</name></decl></param>, <param><decl><type><name>nsIX509Cert</name> **</type><name>_retval</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>_retval</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <expr_stmt><expr>*<name>_retval</name> = 0</expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name><name>aNickname</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsNSSShutDownPreventionLock</name></type> <name>locker</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTCertificate</name> *</type><name>cert</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIInterfaceRequestor</name></expr></argument>&gt;</argument_list></name></type> <name>ctx</name> <init>= <expr>new <call><name>PipUIContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsNSSCertificate</name> *</type><name>nssCert</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>asciiname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>NS_ConvertUTF16toUTF8</name></type> <name>aUtf8Nickname</name><parameter_list>(<param><decl><type><name>aNickname</name></type></decl></param>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>asciiname</name> = <call><name><name>const_cast</name><argument_list>&lt;<argument><expr><name>char</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>aUtf8Nickname</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Find a good cert in the user's database */</comment>
  <expr_stmt><expr><name>cert</name> = <call><name>CERT_FindUserCertByUsage</name><argument_list>(<argument><expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>asciiname</name></expr></argument>, 
           <argument><expr><name>certUsageEmailSigner</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>cert</name></expr>)</condition><then> <block>{ <goto>goto <name>loser</name>;</goto> }</block></then></if>  

  <expr_stmt><expr><name>nssCert</name> = new <call><name>nsNSSCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>nssCert</name> == <name>nsnull</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name>nssCert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>_retval</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIX509Cert</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nssCert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>loser</name>:</label>
  <if>if <condition>(<expr><name>cert</name></expr>)</condition><then> <expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsNSSCertificateDB</name>::<name>FindCertByEmailAddress</name></name><parameter_list>(<param><decl><type><name>nsISupports</name> *</type><name>aToken</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aEmailAddress</name></decl></param>, <param><decl><type><name>nsIX509Cert</name> **</type><name>_retval</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsNSSShutDownPreventionLock</name></type> <name>locker</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTCertificate</name> *</type><name>any_cert</name> <init>= <expr><call><name>CERT_FindCertByNicknameOrEmailAddr</name><argument_list>(<argument><expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>char</name>*)<name>aEmailAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>any_cert</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <function_decl><type><name>CERTCertificateCleaner</name></type> <name>certCleaner</name><parameter_list>(<param><decl><type><name>any_cert</name></type></decl></param>)</parameter_list>;</function_decl>
    
  <comment type="line">// any_cert now contains a cert with the right subject, but it might not have the correct usage</comment>
  <decl_stmt><decl><type><name>CERTCertList</name> *</type><name>certlist</name> <init>= <expr><call><name>CERT_CreateSubjectCertList</name><argument_list>(
    <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name><name>any_cert</name>-&gt;<name>derSubject</name></name></expr></argument>, <argument><expr><call><name>PR_Now</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>certlist</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>  

  <function_decl><type><name>CERTCertListCleaner</name></type> <name>listCleaner</name><parameter_list>(<param><decl><type><name>certlist</name></type></decl></param>)</parameter_list>;</function_decl>

  <if>if <condition>(<expr><name>SECSuccess</name> != <call><name>CERT_FilterCertListByUsage</name><argument_list>(<argument><expr><name>certlist</name></expr></argument>, <argument><expr><name>certUsageEmailRecipient</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
  
  <if>if <condition>(<expr><call><name>CERT_LIST_END</name><argument_list>(<argument><expr><call><name>CERT_LIST_HEAD</name><argument_list>(<argument><expr><name>certlist</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>certlist</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
  
  <decl_stmt><decl><type><name>nsNSSCertificate</name> *</type><name>nssCert</name> <init>= <expr>new <call><name>nsNSSCertificate</name><argument_list>(<argument><expr><call><name>CERT_LIST_HEAD</name><argument_list>(<argument><expr><name>certlist</name></expr></argument>)</argument_list></call>-&gt;<name>cert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>nssCert</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name>nssCert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>_retval</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIX509Cert</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nssCert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* nsIX509Cert constructX509FromBase64 (in string base64); */</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsNSSCertificateDB</name>::<name>ConstructX509FromBase64</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>base64</name></decl></param>, <param><decl><type><name>nsIX509Cert</name> **</type><name>_retval</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>_retval</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsNSSShutDownPreventionLock</name></type> <name>locker</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>len</name> <init>= <expr><call><name>PL_strlen</name><argument_list>(<argument><expr><name>base64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>adjust</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

  <comment type="block">/* Compute length adjustment */</comment>
  <if>if <condition>(<expr><name><name>base64</name><index>[<expr><name>len</name>-1</expr>]</index></name> == '='</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>adjust</name>++</expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>base64</name><index>[<expr><name>len</name>-2</expr>]</index></name> == '='</expr>)</condition><then> <expr_stmt><expr><name>adjust</name>++</expr>;</expr_stmt></then></if>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>certDER</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>lengthDER</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>certDER</name> = <call><name>PL_Base64Decode</name><argument_list>(<argument><expr><name>base64</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>certDER</name> || !*<name>certDER</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_ILLEGAL_VALUE</name></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <expr_stmt><expr><name>lengthDER</name> = (<name>len</name>*3)/4 - <name>adjust</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SECItem</name></type> <name>secitem_cert</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>secitem_cert</name>.<name>type</name></name> = <name>siDERCertBuffer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>secitem_cert</name>.<name>data</name></name> = (<name>unsigned</name> <name>char</name>*)<name>certDER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>secitem_cert</name>.<name>len</name></name> = <name>lengthDER</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CERTCertificate</name> *</type><name>cert</name> <init>= <expr><call><name>CERT_NewTempCertificate</name><argument_list>(<argument><expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>secitem_cert</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>cert</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
      <decl_stmt><decl><type><name>nsNSSCertificate</name> *</type><name>nsNSS</name> <init>= <expr>new <call><name>nsNSSCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>nsNSS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      }</block></then>
      <else>else <block>{
        <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsNSS</name>-&gt;<name>QueryInterface</name></name><argument_list>(<argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsIX509Cert</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>(<name>void</name>**)<name>_retval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>_retval</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>_retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name>nsNSS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
      <expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></else></if>
  
  <if>if <condition>(<expr><name>certDER</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>nsCRT</name>::<name>free</name></name><argument_list>(<argument><expr><name>certDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsNSSCertificateDB</name>::<name>get_default_nickname</name></name><parameter_list>(<param><decl><type><name>CERTCertificate</name> *</type><name>cert</name></decl></param>, 
                                         <param><decl><type><name>nsIInterfaceRequestor</name>*</type> <name>ctx</name></decl></param>,
                                         <param><decl><type><name>nsCString</name> &amp;</type><name>nickname</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>nickname</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsNSSShutDownPreventionLock</name></type> <name>locker</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CK_OBJECT_HANDLE</name></type> <name>keyHandle</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>CERTCertDBHandle</name> *</type><name>defaultcertdb</name> <init>= <expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINSSComponent</name></expr></argument>&gt;</argument_list></name></type> <name>nssComponent</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>kNSSComponentCID</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>username</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>temp_un</name> <init>= <expr><call><name>CERT_GetCommonName</name><argument_list>(<argument><expr>&amp;<name><name>cert</name>-&gt;<name>subject</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>temp_un</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>username</name> = <name>temp_un</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PORT_Free</name><argument_list>(<argument><expr><name>temp_un</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>temp_un</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>caname</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>temp_ca</name> <init>= <expr><call><name>CERT_GetOrgName</name><argument_list>(<argument><expr>&amp;<name><name>cert</name>-&gt;<name>issuer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>temp_ca</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>caname</name> = <name>temp_ca</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PORT_Free</name><argument_list>(<argument><expr><name>temp_ca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>temp_ca</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>tmpNickFmt</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>nssComponent</name>-&gt;<name>GetPIPNSSBundleString</name></name><argument_list>(<argument><expr>"nick_template"</expr></argument>, <argument><expr><name>tmpNickFmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>NS_ConvertUTF16toUTF8</name></type> <name>nickFmt</name><parameter_list>(<param><decl><type><name>tmpNickFmt</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>baseName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>temp_nn</name> <init>= <expr><call><name>PR_smprintf</name><argument_list>(<argument><expr><call><name><name>nickFmt</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>username</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>caname</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>temp_nn</name></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><name>baseName</name> = <name>temp_nn</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PR_smprintf_free</name><argument_list>(<argument><expr><name>temp_nn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>temp_nn</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></else></if>

  <expr_stmt><expr><name>nickname</name> = <name>baseName</name></expr>;</expr_stmt>

  <comment type="block">/*
   * We need to see if the private key exists on a token, if it does
   * then we need to check for nicknames that already exist on the smart
   * card.
   */</comment>
  <decl_stmt><decl><type><name>PK11SlotInfo</name> *</type><name>slot</name> <init>= <expr><call><name>PK11_KeyForCertExists</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr>&amp;<name>keyHandle</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>PK11SlotInfoCleaner</name></type> <name>slotCleaner</name><parameter_list>(<param><decl><type><name>slot</name></type></decl></param>)</parameter_list>;</function_decl>
  <if>if <condition>(<expr>!<name>slot</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <if>if <condition>(<expr>!<call><name>PK11_IsInternal</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>tmp</name> <init>= <expr><call><name>PR_smprintf</name><argument_list>(<argument><expr>"%s:%s"</expr></argument>, <argument><expr><call><name>PK11_GetTokenName</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>baseName</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>tmp</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>nickname</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><name>baseName</name> = <name>tmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PR_smprintf_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>nickname</name> = <name>baseName</name></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr>true</expr>)</condition> <block>{
    <if>if <condition>( <expr><name>count</name> &gt; 1</expr> )</condition><then> <block>{
      <decl_stmt><decl><type><name>char</name> *</type><name>tmp</name> <init>= <expr><call><name>PR_smprintf</name><argument_list>(<argument><expr>"%s #%d"</expr></argument>, <argument><expr><call><name><name>baseName</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>tmp</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>nickname</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      }</block></then></if>
      <expr_stmt><expr><name>nickname</name> = <name>tmp</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>PR_smprintf_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>CERTCertificate</name> *</type><name>dummycert</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>CERTCertificateCleaner</name></type> <name>dummycertCleaner</name><parameter_list>(<param><decl><type><name>dummycert</name></type></decl></param>)</parameter_list>;</function_decl>

    <if>if <condition>(<expr><call><name>PK11_IsInternal</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <comment type="block">/* look up the nickname to make sure it isn't in use already */</comment>
      <expr_stmt><expr><name>dummycert</name> = <call><name>CERT_FindCertByNickname</name><argument_list>(<argument><expr><name>defaultcertdb</name></expr></argument>, <argument><expr><call><name><name>nickname</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></then> <else>else <block>{
      <comment type="block">/*
       * Check the cert against others that already live on the smart 
       * card.
       */</comment>
      <expr_stmt><expr><name>dummycert</name> = <call><name>PK11_FindCertFromNickname</name><argument_list>(<argument><expr><call><name><name>nickname</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>dummycert</name> != <name>NULL</name></expr>)</condition><then> <block>{
	<comment type="block">/*
	 * Make sure the subject names are different.
	 */</comment> 
	<if>if <condition>(<expr><call><name>CERT_CompareName</name><argument_list>(<argument><expr>&amp;<name><name>cert</name>-&gt;<name>subject</name></name></expr></argument>, <argument><expr>&amp;<name><name>dummycert</name>-&gt;<name>subject</name></name></expr></argument>)</argument_list></call> == <name>SECEqual</name></expr>)</condition><then>
	<block>{
	  <comment type="block">/*
	   * There is another certificate with the same nickname and
	   * the same subject name on the smart card, so let's use this
	   * nickname.
	   */</comment>
	  <expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>dummycert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>dummycert</name> = <name>NULL</name></expr>;</expr_stmt>
	}</block></then></if>
      }</block></then></if>
    }</block></else></if>
    <if>if <condition>(<expr>!<name>dummycert</name></expr>)</condition><then> 
      <break>break;</break></then></if>
    
    <expr_stmt><expr><name>count</name>++</expr>;</expr_stmt>
  }</block></while>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsNSSCertificateDB</name>::<name>AddCertFromBase64</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aBase64</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aTrust</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aName</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aBase64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name> <argument_list>&lt;<argument><expr><name>nsIX509Cert</name></expr></argument>&gt;</argument_list></name></type> <name>newCert</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsNSSCertTrust</name></type> <name>trust</name></decl>;</decl_stmt>

  <comment type="line">// need to calculate the trust bits from the aTrust string.</comment>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>CERT_DecodeTrustString</name><argument_list>(<argument><expr><call><name><name>trust</name>.<name>GetTrust</name></name><argument_list>()</argument_list></call></expr></argument>, <comment type="block">/* this is const, but not declared that way */</comment><argument><expr>(<name>char</name> *) <name>aTrust</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// if bad trust passed in, return error.</comment>


  <expr_stmt><expr><name>rv</name> = <call><name>ConstructX509FromBase64</name><argument_list>(<argument><expr><name>aBase64</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>newCert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SECItem</name></type> <name>der</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>newCert</name>-&gt;<name>GetRawDER</name></name><argument_list>(<argument><expr>&amp;<name><name>der</name>.<name>len</name></name></expr></argument>, <argument><expr>(<name>PRUint8</name> **)&amp;<name><name>der</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gPIPNSSLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("Creating temp cert\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>CERTCertificate</name> *</type><name>tmpCert</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CERTCertDBHandle</name> *</type><name>certdb</name> <init>= <expr><call><name>CERT_GetDefaultCertDB</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tmpCert</name> = <call><name>CERT_FindCertByDERCert</name><argument_list>(<argument><expr><name>certdb</name></expr></argument>, <argument><expr>&amp;<name>der</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>tmpCert</name></expr>)</condition><then> 
    <expr_stmt><expr><name>tmpCert</name> = <call><name>CERT_NewTempCertificate</name><argument_list>(<argument><expr><name>certdb</name></expr></argument>, <argument><expr>&amp;<name>der</name></expr></argument>,
                                      <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <expr_stmt><expr><call><name><name>nsMemory</name>::<name>Free</name></name><argument_list>(<argument><expr><name><name>der</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>der</name>.<name>data</name></name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>der</name>.<name>len</name></name> = 0</expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>tmpCert</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Couldn't create cert from DER blob"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><name><name>tmpCert</name>-&gt;<name>isperm</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>CERT_DestroyCertificate</name><argument_list>(<argument><expr><name>tmpCert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <function_decl><type><name>CERTCertificateCleaner</name></type> <name>tmpCertCleaner</name><parameter_list>(<param><decl><type><name>tmpCert</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>nsXPIDLCString</name></type> <name>nickname</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>nickname</name>.<name>Adopt</name></name><argument_list>(<argument><expr><call><name>CERT_MakeCANickname</name><argument_list>(<argument><expr><name>tmpCert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gPIPNSSLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("Created nick \"%s\"\n", <call><name><name>nickname</name>.<name>get</name></name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SECStatus</name></type> <name>srv</name> <init>= <expr><call><name>CERT_AddTempCertToPerm</name><argument_list>(<argument><expr><name>tmpCert</name></expr></argument>, 
                                         <argument><expr><call><name><name>const_cast</name><argument_list>&lt;<argument><expr><name>char</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>nickname</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, 
                                         <argument><expr><call><name><name>trust</name>.<name>GetTrust</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 


  <return>return <expr>(<name>srv</name> == <name>SECSuccess</name>) ? <name>NS_OK</name> : <name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> 
<name><name>nsNSSCertificateDB</name>::<name>GetCerts</name></name><parameter_list>(<param><decl><type><name>nsIX509CertList</name> **</type><name>_retval</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>CERTCertList</name> *</type><name>certList</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIInterfaceRequestor</name></expr></argument>&gt;</argument_list></name></type> <name>ctx</name> <init>= <expr>new <call><name>PipUIContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIX509CertList</name></expr></argument>&gt;</argument_list></name></type> <name>nssCertList</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>certList</name> = <call><name>PK11_ListCerts</name><argument_list>(<argument><expr><name>PK11CertListUnique</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// nsNSSCertList 1) adopts certList, and 2) handles the NULL case fine.</comment>
  <comment type="line">// (returns an empty list) </comment>
  <expr_stmt><expr><name>nssCertList</name> = new <call><name>nsNSSCertList</name><argument_list>(<argument><expr><name>certList</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>nssCertList</name></expr>)</condition><then> <block>{ <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return> }</block></then></if>

  <expr_stmt><expr>*<name>_retval</name> = <name>nssCertList</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>_retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
</unit>
