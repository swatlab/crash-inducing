<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="002d7fa13ecf6b0c72f0857e3baeb2871050203b.h"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<comment type="block">/* DOM object representing values in DOM computed style */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>nsROCSSPrimitiveValue_h___</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nsROCSSPrimitiveValue_h___</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMCSSPrimitiveValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCoord.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCSSKeywords.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>nsIURI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>nsDOMCSSRGBColor</name></decl>;</decl_stmt>

<expr_stmt><expr><name>class</name> <name>nsROCSSPrimitiveValue</name> : <name>public</name> <name>nsIDOMCSSPrimitiveValue</name>
<block>{
<expr><name>public</name>:
  <name>NS_DECL_ISUPPORTS</name>

  <comment type="line">// nsIDOMCSSPrimitiveValue</comment>
  <name>NS_DECL_NSIDOMCSSPRIMITIVEVALUE</name>

  <comment type="line">// nsIDOMCSSValue</comment>
  <name>NS_DECL_NSIDOMCSSVALUE</name>

  <comment type="line">// nsROCSSPrimitiveValue</comment>
  <call><name>nsROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr>;
  <expr><name>virtual</name> ~<call><name>nsROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr>;

  <expr><name>void</name> <macro><name>SetNumber</name><argument_list>(<argument>float aValue</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>SetNumber</name><argument_list>(<argument>PRInt32 aValue</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>SetNumber</name><argument_list>(<argument>PRUint32 aValue</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>SetPercent</name><argument_list>(<argument>float aValue</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>SetAppUnits</name><argument_list>(<argument>nscoord aValue</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>SetAppUnits</name><argument_list>(<argument>float aValue</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>SetIdent</name><argument_list>(<argument>nsCSSKeyword aKeyword</argument>)</argument_list></macro></expr>;
  <comment type="line">// FIXME: CSS_STRING should imply a string with "" and a need for escaping.</comment>
  <expr><name>void</name> <macro><name>SetString</name><argument_list>(<argument>const nsACString&amp; aString</argument>, <argument>PRUint16 aType = CSS_STRING</argument>)</argument_list></macro></expr>;
  <comment type="line">// FIXME: CSS_STRING should imply a string with "" and a need for escaping.</comment>
  <expr><name>void</name> <macro><name>SetString</name><argument_list>(<argument>const nsAString&amp; aString</argument>, <argument>PRUint16 aType = CSS_STRING</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>SetURI</name><argument_list>(<argument><expr><name>nsIURI</name> *<name>aURI</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>SetColor</name><argument_list>(<argument><expr><name>nsDOMCSSRGBColor</name>* <name>aColor</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>SetRect</name><argument_list>(<argument><expr><name>nsIDOMRect</name>* <name>aRect</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>SetTime</name><argument_list>(<argument>float aValue</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>Reset</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name>:
  <name>PRUint16</name> <name>mType</name></expr>;

  <expr>union <block>{
    <expr><name>nscoord</name>         <name>mAppUnits</name></expr>;
    <expr><name>float</name>           <name>mFloat</name></expr>;
    <expr><name>nsDOMCSSRGBColor</name>* <name>mColor</name></expr>;
    <expr><name>nsIDOMRect</name>*     <name>mRect</name></expr>;
    <expr><name>PRUnichar</name>*      <name>mString</name></expr>;
    <expr><name>nsIURI</name>*         <name>mURI</name></expr>;
    <expr><name>nsCSSKeyword</name>    <name>mKeyword</name></expr>;
  }</block> <name>mValue</name></expr>;
}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* nsROCSSPrimitiveValue_h___ */</comment>

</unit>
