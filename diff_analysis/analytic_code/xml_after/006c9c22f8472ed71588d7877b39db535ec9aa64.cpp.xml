<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="006c9c22f8472ed71588d7877b39db535ec9aa64.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Japan code.
 *
 * The Initial Developer of the Original Code is Mozilla Japan.
 * Portions created by the Initial Developer are Copyright (C) 2007
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Masayuki Nakano &lt;masayuki@d-toybox.com&gt;
 *   Vladimir Vukicevic &lt;vladimir@pobox.com&gt;
 *   Karl Tomlinson &lt;karlt+@karlt.net&gt;, Mozilla Corporation
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gfxFontconfigUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gfxFont.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fontconfig/fontconfig.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefBranch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsServiceManagerUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsILanguageAtomService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsTArray.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIAtom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCRT.h"</cpp:file></cpp:include>

<comment type="block">/* static */</comment> <decl_stmt><decl><type><name>gfxFontconfigUtils</name>*</type> <name><name>gfxFontconfigUtils</name>::<name>sUtils</name></name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>nsILanguageAtomService</name>*</type> <name>gLangService</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* static */</comment> <function><type><name>void</name></type>
<name><name>gfxFontconfigUtils</name>::<name>Shutdown</name></name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>sUtils</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>delete <name>sUtils</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sUtils</name> = <name>nsnull</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>NS_IF_RELEASE</name><argument_list>(<argument><expr><name>gLangService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* static */</comment> <function><type><name>PRUint8</name></type>
<name><name>gfxFontconfigUtils</name>::<name>FcSlantToThebesStyle</name></name><parameter_list>(<param><decl><type><name>int</name></type> <name>aFcSlant</name></decl></param>)</parameter_list>
<block>{
    <switch>switch <condition>(<expr><name>aFcSlant</name></expr>)</condition> <block>{
        <case>case <expr><name>FC_SLANT_ITALIC</name></expr>:
            <return>return <expr><name>FONT_STYLE_ITALIC</name></expr>;</return>
        </case><case>case <expr><name>FC_SLANT_OBLIQUE</name></expr>:
            <return>return <expr><name>FONT_STYLE_OBLIQUE</name></expr>;</return>
        </case><default>default:
            <return>return <expr><name>FONT_STYLE_NORMAL</name></expr>;</return>
    </default>}</block></switch>
}</block></function>

<comment type="block">/* static */</comment> <function><type><name>PRUint8</name></type>
<name><name>gfxFontconfigUtils</name>::<name>GetThebesStyle</name></name><parameter_list>(<param><decl><type><name>FcPattern</name> *</type><name>aPattern</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>slant</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>FcPatternGetInteger</name><argument_list>(<argument><expr><name>aPattern</name></expr></argument>, <argument><expr><name>FC_SLANT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>slant</name></expr></argument>)</argument_list></call> != <name>FcResultMatch</name></expr>)</condition><then> <block>{
        <return>return <expr><name>FONT_STYLE_NORMAL</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><call><name>FcSlantToThebesStyle</name><argument_list>(<argument><expr><name>slant</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* static */</comment> <function><type><name>int</name></type>
<name><name>gfxFontconfigUtils</name>::<name>GetFcSlant</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>gfxFontStyle</name>&amp;</type> <name>aFontStyle</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name><name>aFontStyle</name>.<name>style</name></name> == <name>FONT_STYLE_ITALIC</name></expr>)</condition><then>
        <return>return <expr><name>FC_SLANT_ITALIC</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name><name>aFontStyle</name>.<name>style</name></name> == <name>FONT_STYLE_OBLIQUE</name></expr>)</condition><then>
        <return>return <expr><name>FC_SLANT_OBLIQUE</name></expr>;</return></then></if>

    <return>return <expr><name>FC_SLANT_ROMAN</name></expr>;</return>
}</block></function>

<comment type="line">// OS/2 weight classes were introduced in fontconfig-2.1.93 (2003).</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FC_WEIGHT_THIN</name></cpp:ifndef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FC_WEIGHT_THIN</name></cpp:macro>              <cpp:value>0</cpp:value></cpp:define> <comment type="line">// 2.1.93</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FC_WEIGHT_EXTRALIGHT</name></cpp:macro>        <cpp:value>40</cpp:value></cpp:define> <comment type="line">// 2.1.93</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FC_WEIGHT_REGULAR</name></cpp:macro>           <cpp:value>80</cpp:value></cpp:define> <comment type="line">// 2.1.93</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FC_WEIGHT_EXTRABOLD</name></cpp:macro>         <cpp:value>205</cpp:value></cpp:define> <comment type="line">// 2.1.93</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="line">// book was introduced in fontconfig-2.2.90 (and so fontconfig-2.3.0 in 2005)</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FC_WEIGHT_BOOK</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FC_WEIGHT_BOOK</name></cpp:macro>              <cpp:value>75</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="line">// extra black was introduced in fontconfig-2.4.91 (2007)</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FC_WEIGHT_EXTRABLACK</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FC_WEIGHT_EXTRABLACK</name></cpp:macro>        <cpp:value>215</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* static */</comment> <function><type><name>PRUint16</name></type>
<name><name>gfxFontconfigUtils</name>::<name>GetThebesWeight</name></name><parameter_list>(<param><decl><type><name>FcPattern</name> *</type><name>aPattern</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>weight</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>FcPatternGetInteger</name><argument_list>(<argument><expr><name>aPattern</name></expr></argument>, <argument><expr><name>FC_WEIGHT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>weight</name></expr></argument>)</argument_list></call> != <name>FcResultMatch</name></expr>)</condition><then>
        <return>return <expr><name>FONT_WEIGHT_NORMAL</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>weight</name> &lt;= (<name>FC_WEIGHT_THIN</name> + <name>FC_WEIGHT_EXTRALIGHT</name>) / 2</expr>)</condition><then>
        <return>return <expr>100</expr>;</return></then></if>
    <if>if <condition>(<expr><name>weight</name> &lt;= (<name>FC_WEIGHT_EXTRALIGHT</name> + <name>FC_WEIGHT_LIGHT</name>) / 2</expr>)</condition><then>
        <return>return <expr>200</expr>;</return></then></if>
    <if>if <condition>(<expr><name>weight</name> &lt;= (<name>FC_WEIGHT_LIGHT</name> + <name>FC_WEIGHT_BOOK</name>) / 2</expr>)</condition><then>
        <return>return <expr>300</expr>;</return></then></if>
    <if>if <condition>(<expr><name>weight</name> &lt;= (<name>FC_WEIGHT_REGULAR</name> + <name>FC_WEIGHT_MEDIUM</name>) / 2</expr>)</condition><then>
        <comment type="line">// This includes FC_WEIGHT_BOOK</comment>
        <return>return <expr>400</expr>;</return></then></if>
    <if>if <condition>(<expr><name>weight</name> &lt;= (<name>FC_WEIGHT_MEDIUM</name> + <name>FC_WEIGHT_DEMIBOLD</name>) / 2</expr>)</condition><then>
        <return>return <expr>500</expr>;</return></then></if>
    <if>if <condition>(<expr><name>weight</name> &lt;= (<name>FC_WEIGHT_DEMIBOLD</name> + <name>FC_WEIGHT_BOLD</name>) / 2</expr>)</condition><then>
        <return>return <expr>600</expr>;</return></then></if>
    <if>if <condition>(<expr><name>weight</name> &lt;= (<name>FC_WEIGHT_BOLD</name> + <name>FC_WEIGHT_EXTRABOLD</name>) / 2</expr>)</condition><then>
        <return>return <expr>700</expr>;</return></then></if>
    <if>if <condition>(<expr><name>weight</name> &lt;= (<name>FC_WEIGHT_EXTRABOLD</name> + <name>FC_WEIGHT_BLACK</name>) / 2</expr>)</condition><then>
        <return>return <expr>800</expr>;</return></then></if>
    <if>if <condition>(<expr><name>weight</name> &lt;= <name>FC_WEIGHT_BLACK</name></expr>)</condition><then>
        <return>return <expr>900</expr>;</return></then></if>

    <comment type="line">// including FC_WEIGHT_EXTRABLACK</comment>
    <return>return <expr>901</expr>;</return>
}</block></function>

<comment type="block">/* static */</comment> <function><type><name>int</name></type>
<name><name>gfxFontconfigUtils</name>::<name>FcWeightForBaseWeight</name></name><parameter_list>(<param><decl><type><name>PRInt8</name></type> <name>aBaseWeight</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aBaseWeight</name> &gt;= 0 &amp;&amp; <name>aBaseWeight</name> &lt;= 10</expr></argument>,
                    <argument><expr>"base weight out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>aBaseWeight</name></expr>)</condition> <block>{
        <case>case <expr>2</expr>:
            <return>return <expr><name>FC_WEIGHT_EXTRALIGHT</name></expr>;</return>
        </case><case>case <expr>3</expr>:
            <return>return <expr><name>FC_WEIGHT_LIGHT</name></expr>;</return>
        </case><case>case <expr>4</expr>:
            <return>return <expr><name>FC_WEIGHT_REGULAR</name></expr>;</return>
        </case><case>case <expr>5</expr>:
            <return>return <expr><name>FC_WEIGHT_MEDIUM</name></expr>;</return>
        </case><case>case <expr>6</expr>:
            <return>return <expr><name>FC_WEIGHT_DEMIBOLD</name></expr>;</return>
        </case><case>case <expr>7</expr>:
            <return>return <expr><name>FC_WEIGHT_BOLD</name></expr>;</return>
        </case><case>case <expr>8</expr>:
            <return>return <expr><name>FC_WEIGHT_EXTRABOLD</name></expr>;</return>
        </case><case>case <expr>9</expr>:
            <return>return <expr><name>FC_WEIGHT_BLACK</name></expr>;</return>
    </case>}</block></switch>

    <comment type="line">// extremes</comment>
    <return>return <expr><name>aBaseWeight</name> &lt; 2 ? <name>FC_WEIGHT_THIN</name> : <name>FC_WEIGHT_EXTRABLACK</name></expr>;</return>
}</block></function>

<comment type="line">// This makes a guess at an FC_WEIGHT corresponding to a base weight and</comment>
<comment type="line">// offset (without any knowledge of which weights are available).</comment>

<comment type="block">/* static */</comment> <function><type><name>int</name></type>
<name>GuessFcWeight</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>gfxFontStyle</name>&amp;</type> <name>aFontStyle</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * weights come in two parts crammed into one
     * integer -- the "base" weight is weight / 100,
     * the rest of the value is the "offset" from that
     * weight -- the number of steps to move to adjust
     * the weight in the list of supported font weights,
     * this value can be negative or positive.
     */</comment>
    <decl_stmt><decl><type><name>PRInt8</name></type> <name>weight</name> <init>= <expr><call><name><name>aFontStyle</name>.<name>ComputeWeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// ComputeWeight trimmed the range of weights for us</comment>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>weight</name> &gt;= 0 &amp;&amp; <name>weight</name> &lt;= 10</expr></argument>,
                 <argument><expr>"base weight out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>gfxFontconfigUtils</name>::<name>FcWeightForBaseWeight</name></name><argument_list>(<argument><expr><name>weight</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>AddString</name><parameter_list>(<param><decl><type><name>FcPattern</name> *</type><name>aPattern</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>object</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aString</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>FcPatternAddString</name><argument_list>(<argument><expr><name>aPattern</name></expr></argument>, <argument><expr><name>object</name></expr></argument>,
                       <argument><expr><call><name><name>gfxFontconfigUtils</name>::<name>ToFcChar8</name></name><argument_list>(<argument><expr><name>aString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>AddLangGroup</name><parameter_list>(<param><decl><type><name>FcPattern</name> *</type><name>aPattern</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aLangGroup</name></decl></param>)</parameter_list>
<block>{
    <comment type="line">// Translate from mozilla's internal mapping into fontconfig's</comment>
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>lang</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>gfxFontconfigUtils</name>::<name>GetSampleLangForGroup</name></name><argument_list>(<argument><expr><name>aLangGroup</name></expr></argument>, <argument><expr>&amp;<name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name><name>lang</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>AddString</name><argument_list>(<argument><expr><name>aPattern</name></expr></argument>, <argument><expr><name>FC_LANG</name></expr></argument>, <argument><expr><call><name><name>lang</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>


<function><type><name><name>nsReturnRef</name><argument_list>&lt;<argument><expr><name>FcPattern</name></expr></argument>&gt;</argument_list></name></type>
<name><name>gfxFontconfigUtils</name>::<name>NewPattern</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsString</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aFamilies</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>gfxFontStyle</name>&amp;</type> <name>aFontStyle</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aLang</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>nsAutoRef</name><argument_list>&lt;<argument><expr><name>FcPattern</name></expr></argument>&gt;</argument_list></name></type> <name>pattern</name><argument_list>(<argument><expr><call><name>FcPatternCreate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>pattern</name></expr>)</condition><then>
        <return>return <expr><call><name><name>nsReturnRef</name><argument_list>&lt;<argument><expr><name>FcPattern</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return></then></if>

    <expr_stmt><expr><call><name>FcPatternAddDouble</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>FC_PIXEL_SIZE</name></expr></argument>, <argument><expr><name><name>aFontStyle</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FcPatternAddInteger</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>FC_SLANT</name></expr></argument>, <argument><expr><call><name>GetFcSlant</name><argument_list>(<argument><expr><name>aFontStyle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FcPatternAddInteger</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>FC_WEIGHT</name></expr></argument>, <argument><expr><call><name>GuessFcWeight</name><argument_list>(<argument><expr><name>aFontStyle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>aLang</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>AddString</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>FC_LANG</name></expr></argument>, <argument><expr><name>aLang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>aFamilies</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <function_decl><type><name>NS_ConvertUTF16toUTF8</name></type> <name>family</name><parameter_list>(<param><decl><type><name><name>aFamilies</name><index>[<expr><name>i</name></expr>]</index></name></type></decl></param>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name>AddString</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>FC_FAMILY</name></expr></argument>, <argument><expr><call><name><name>family</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><call><name><name>pattern</name>.<name>out</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<constructor><name><name>gfxFontconfigUtils</name>::<name>gfxFontconfigUtils</name></name><parameter_list>()</parameter_list>
    <member_list>: <call><name>mLastConfig</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
</member_list><block>{
    <expr_stmt><expr><call><name><name>mFontsByFamily</name>.<name>Init</name></name><argument_list>(<argument><expr>50</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mFontsByFullname</name>.<name>Init</name></name><argument_list>(<argument><expr>50</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mLangSupportTable</name>.<name>Init</name></name><argument_list>(<argument><expr>20</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UpdateFontListInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<function><type><name>nsresult</name></type>
<name><name>gfxFontconfigUtils</name>::<name>GetFontList</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name> *</type><name>aLangGroup</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aGenericFamily</name></decl></param>,
                                <param><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsString</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aListOfFonts</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>aListOfFonts</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsCString</name></expr></argument>&gt;</argument_list></name></type> <name>fonts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>langGroupStr</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>aLangGroup</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>aLangGroup</name>-&gt;<name>ToUTF8String</name></name><argument_list>(<argument><expr><name>langGroupStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetFontListInternal</name><argument_list>(<argument><expr><name>fonts</name></expr></argument>, <argument><expr><name>langGroupStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>

    <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>fonts</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <expr_stmt><expr><call><name><name>aListOfFonts</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><call><name>NS_ConvertUTF8toUTF16</name><argument_list>(<argument><expr><name><name>fonts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name><name>aListOfFonts</name>.<name>Sort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PRInt32</name></type> <name>serif</name> <init>= <expr>0</expr></init>, <name>sansSerif</name> <init>= <expr>0</expr></init>, <name>monospace</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="line">// Fontconfig supports 3 generic fonts, "serif", "sans-serif", and</comment>
    <comment type="line">// "monospace", slightly different from CSS's 5.</comment>
    <if>if <condition>(<expr><call><name><name>aGenericFamily</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>serif</name> = <name>sansSerif</name> = <name>monospace</name> = 1</expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name><name>aGenericFamily</name>.<name>LowerCaseEqualsLiteral</name></name><argument_list>(<argument><expr>"serif"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>serif</name> = 1</expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name><name>aGenericFamily</name>.<name>LowerCaseEqualsLiteral</name></name><argument_list>(<argument><expr>"sans-serif"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>sansSerif</name> = 1</expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name><name>aGenericFamily</name>.<name>LowerCaseEqualsLiteral</name></name><argument_list>(<argument><expr>"monospace"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>monospace</name> = 1</expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name><name>aGenericFamily</name>.<name>LowerCaseEqualsLiteral</name></name><argument_list>(<argument><expr>"cursive"</expr></argument>)</argument_list></call> ||
             <call><name><name>aGenericFamily</name>.<name>LowerCaseEqualsLiteral</name></name><argument_list>(<argument><expr>"fantasy"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>serif</name> = <name>sansSerif</name> = 1</expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><call><name>NS_NOTREACHED</name><argument_list>(<argument><expr>"unexpected CSS generic font family"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if></else></if></else></if>

    <comment type="line">// The first in the list becomes the default in</comment>
    <comment type="line">// gFontsDialog.readFontSelection() if the preference-selected font is not</comment>
    <comment type="line">// available, so put system configured defaults first.</comment>
    <if>if <condition>(<expr><name>monospace</name></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>aListOfFonts</name>.<name>InsertElementAt</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"monospace"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>sansSerif</name></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>aListOfFonts</name>.<name>InsertElementAt</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"sans-serif"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>serif</name></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>aListOfFonts</name>.<name>InsertElementAt</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"serif"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<struct>struct <name>MozLangGroupData</name> <block>{<public type="default">
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mozLangGroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>defaultLang</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name>MozLangGroupData</name></type> <name><name>MozLangGroups</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr>"x-western"</expr>,      <expr>"en"</expr> }</block></expr>,
    <expr><block>{ <expr>"x-central-euro"</expr>, <expr>"pl"</expr> }</block></expr>,
    <expr><block>{ <expr>"x-cyrillic"</expr>,     <expr>"ru"</expr> }</block></expr>,
    <expr><block>{ <expr>"x-baltic"</expr>,       <expr>"lv"</expr> }</block></expr>,
    <expr><block>{ <expr>"x-devanagari"</expr>,   <expr>"hi"</expr> }</block></expr>,
    <expr><block>{ <expr>"x-tamil"</expr>,        <expr>"ta"</expr> }</block></expr>,
    <expr><block>{ <expr>"x-armn"</expr>,         <expr>"hy"</expr> }</block></expr>,
    <expr><block>{ <expr>"x-beng"</expr>,         <expr>"bn"</expr> }</block></expr>,
    <expr><block>{ <expr>"x-cans"</expr>,         <expr>"iu"</expr> }</block></expr>,
    <expr><block>{ <expr>"x-ethi"</expr>,         <expr>"am"</expr> }</block></expr>,
    <expr><block>{ <expr>"x-geor"</expr>,         <expr>"ka"</expr> }</block></expr>,
    <expr><block>{ <expr>"x-gujr"</expr>,         <expr>"gu"</expr> }</block></expr>,
    <expr><block>{ <expr>"x-guru"</expr>,         <expr>"pa"</expr> }</block></expr>,
    <expr><block>{ <expr>"x-khmr"</expr>,         <expr>"km"</expr> }</block></expr>,
    <expr><block>{ <expr>"x-knda"</expr>,         <expr>"kn"</expr> }</block></expr>,
    <expr><block>{ <expr>"x-mlym"</expr>,         <expr>"ml"</expr> }</block></expr>,
    <expr><block>{ <expr>"x-orya"</expr>,         <expr>"or"</expr> }</block></expr>,
    <expr><block>{ <expr>"x-sinh"</expr>,         <expr>"si"</expr> }</block></expr>,
    <expr><block>{ <expr>"x-telu"</expr>,         <expr>"te"</expr> }</block></expr>,
    <expr><block>{ <expr>"x-tibt"</expr>,         <expr>"bo"</expr> }</block></expr>,
    <expr><block>{ <expr>"x-unicode"</expr>,      <expr>0</expr>    }</block></expr>,
    <expr><block>{ <expr>"x-user-def"</expr>,     <expr>0</expr>    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>TryLangForGroup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aOSLang</name></decl></param>, <param><decl><type><name>nsIAtom</name> *</type><name>aLangGroup</name></decl></param>,
                <param><decl><type><name>nsACString</name> *</type><name>aFcLang</name></decl></param>)</parameter_list>
<block>{
    <comment type="line">// Truncate at '.' or '@' from aOSLang, and convert '_' to '-'.</comment>
    <comment type="line">// aOSLang is in the form "language[_territory][.codeset][@modifier]".</comment>
    <comment type="line">// fontconfig takes languages in the form "language-territory".</comment>
    <comment type="line">// nsILanguageAtomService takes languages in the form language-subtag,</comment>
    <comment type="line">// where subtag may be a territory.  fontconfig and nsILanguageAtomService</comment>
    <comment type="line">// handle case-conversion for us.</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pos</name></decl>, *<decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>aOSLang</name>.<name>BeginReading</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aOSLang</name>.<name>EndReading</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aFcLang</name>-&gt;<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>pos</name> &lt; <name>end</name></expr>)</condition> <block>{
        <switch>switch <condition>(<expr>*<name>pos</name></expr>)</condition> <block>{
            <case>case <expr>'.'</expr>:
            </case><case>case <expr>'@'</expr>:
                <expr_stmt><expr><name>end</name> = <name>pos</name></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'_'</expr>:
                <expr_stmt><expr><call><name><name>aFcLang</name>-&gt;<name>Append</name></name><argument_list>(<argument><expr>'-'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><default>default:
                <expr_stmt><expr><call><name><name>aFcLang</name>-&gt;<name>Append</name></name><argument_list>(<argument><expr>*<name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </default>}</block></switch>
        <expr_stmt><expr>++<name>pos</name></expr>;</expr_stmt>
    }</block></while>

    <decl_stmt><decl><type><name>nsIAtom</name> *</type><name>atom</name> <init>=
        <expr><call><name><name>gLangService</name>-&gt;<name>LookupLanguage</name></name><argument_list>(<argument><expr><call><name>NS_ConvertUTF8toUTF16</name><argument_list>(<argument><expr>*<name>aFcLang</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><name>atom</name> == <name>aLangGroup</name></expr>;</return>
}</block></function>

<comment type="block">/* static */</comment> <function><type><name>void</name></type>
<name><name>gfxFontconfigUtils</name>::<name>GetSampleLangForGroup</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aLangGroup</name></decl></param>,
                                          <param><decl><type><name>nsACString</name> *</type><name>aFcLang</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aFcLang</name> != <name>nsnull</name></expr></argument>, <argument><expr>"aFcLang must not be NULL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>MozLangGroupData</name> *</type><name>langGroup</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

    <for>for (<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name>NS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>MozLangGroups</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <if>if <condition>(<expr><call><name><name>aLangGroup</name>.<name>Equals</name></name><argument_list>(<argument><expr><name><name>MozLangGroups</name><index>[<expr><name>i</name></expr>]</index></name>.<name>mozLangGroup</name></expr></argument>,
                              <argument><expr><call><name>nsCaseInsensitiveCStringComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>langGroup</name> = &amp;<name><name>MozLangGroups</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block></for>

    <if>if <condition>(<expr>!<name>langGroup</name></expr>)</condition><then> <block>{
        <comment type="line">// Not a special mozilla language group.</comment>
        <comment type="line">// Use aLangGroup as a language code.</comment>
        <expr_stmt><expr><call><name><name>aFcLang</name>-&gt;<name>Assign</name></name><argument_list>(<argument><expr><name>aLangGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>

    <comment type="line">// Check the environment for the users preferred language that corresponds</comment>
    <comment type="line">// to this langGroup.</comment>
    <if>if <condition>(<expr>!<name>gLangService</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>CallGetService</name><argument_list>(<argument><expr><name>NS_LANGUAGEATOMSERVICE_CONTRACTID</name></expr></argument>, <argument><expr>&amp;<name>gLangService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>gLangService</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsIAtom</name></expr></argument>&gt;</argument_list></name></type> <name>langGroupAtom</name> <init>= <expr><call><name>do_GetAtom</name><argument_list>(<argument><expr><name><name>langGroup</name>-&gt;<name>mozLangGroup</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>languages</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr>"LANGUAGE"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>languages</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>separator</name> <init>= <expr>':'</expr></init></decl>;</decl_stmt>

            <for>for (<init><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pos</name> <init>= <expr><name>languages</name></expr></init></decl>;</init> <condition><expr><name>PR_TRUE</name></expr>;</condition> <incr><expr>++<name>pos</name></expr></incr>) <block>{
                <if>if <condition>(<expr>*<name>pos</name> == '\0' || *<name>pos</name> == <name>separator</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>languages</name> &lt; <name>pos</name> &amp;&amp;
                        <call><name>TryLangForGroup</name><argument_list>(<argument><expr><call><name>Substring</name><argument_list>(<argument><expr><name>languages</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><name>langGroupAtom</name></expr></argument>, <argument><expr><name>aFcLang</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <return>return;</return></then></if>

                    <if>if <condition>(<expr>*<name>pos</name> == '\0'</expr>)</condition><then>
                        <break>break;</break></then></if>

                    <expr_stmt><expr><name>languages</name> = <name>pos</name> + 1</expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ctype</name> <init>= <expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ctype</name> &amp;&amp;
            <call><name>TryLangForGroup</name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>langGroupAtom</name></expr></argument>, <argument><expr><name>aFcLang</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>langGroup</name>-&gt;<name>defaultLang</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>aFcLang</name>-&gt;<name>Assign</name></name><argument_list>(<argument><expr><name><name>langGroup</name>-&gt;<name>defaultLang</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>aFcLang</name>-&gt;<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>gfxFontconfigUtils</name>::<name>GetFontListInternal</name></name><parameter_list>(<param><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsCString</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aListOfFonts</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aLangGroup</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>FcPattern</name> *</type><name>pat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FcObjectSet</name> *</type><name>os</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FcFontSet</name> *</type><name>fs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_ERROR_FAILURE</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>aListOfFonts</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pat</name> = <call><name>FcPatternCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>pat</name></expr>)</condition><then>
        <goto>goto <name>end</name>;</goto></then></if>

    <expr_stmt><expr><name>os</name> = <call><name>FcObjectSetBuild</name><argument_list>(<argument><expr><name>FC_FAMILY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>os</name></expr>)</condition><then>
        <goto>goto <name>end</name>;</goto></then></if>

    <comment type="line">// take the pattern and add the lang group to it</comment>
    <if>if <condition>(<expr>!<call><name><name>aLangGroup</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>AddLangGroup</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>aLangGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>fs</name> = <call><name>FcFontList</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>fs</name></expr>)</condition><then>
        <goto>goto <name>end</name>;</goto></then></if>

    <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>fs</name>-&gt;<name>nfont</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>char</name> *</type><name>family</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>FcPatternGetString</name><argument_list>(<argument><expr><name><name>fs</name>-&gt;<name>fonts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>FC_FAMILY</name></expr></argument>, <argument><expr>0</expr></argument>,
                               <argument><expr>(<name>FcChar8</name> **) &amp;<name>family</name></expr></argument>)</argument_list></call> != <name>FcResultMatch</name></expr>)</condition><then>
        <block>{
            <continue>continue;</continue>
        }</block></then></if>

        <comment type="line">// Remove duplicates...</comment>
        <function_decl><type><name>nsCAutoString</name></type> <name>strFamily</name><parameter_list>(<param><decl><type><name>family</name></type></decl></param>)</parameter_list>;</function_decl>
        <if>if <condition>(<expr><call><name><name>aListOfFonts</name>.<name>Contains</name></name><argument_list>(<argument><expr><name>strFamily</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <continue>continue;</continue></then></if>

        <expr_stmt><expr><call><name><name>aListOfFonts</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>strFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name>rv</name> = <name>NS_OK</name></expr>;</expr_stmt>

  <label><name>end</name>:</label>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>aListOfFonts</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

    <if>if <condition>(<expr><name>pat</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>FcPatternDestroy</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>os</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>FcObjectSetDestroy</name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>fs</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>FcFontSetDestroy</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>gfxFontconfigUtils</name>::<name>UpdateFontList</name></name><parameter_list>()</parameter_list>
<block>{
    <return>return <expr><call><name>UpdateFontListInternal</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>gfxFontconfigUtils</name>::<name>UpdateFontListInternal</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aForce</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>aForce</name></expr>)</condition><then> <block>{
        <comment type="line">// This checks periodically according to fontconfig's configured</comment>
        <comment type="line">// &lt;rescan&gt; interval.</comment>
        <expr_stmt><expr><call><name>FcInitBringUptoDate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr>!<call><name>FcConfigUptoDate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{ <comment type="line">// check now with aForce</comment>
        <expr_stmt><expr><name>mLastConfig</name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FcInitReinitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

    <comment type="line">// FcInitReinitialize() (used by FcInitBringUptoDate) creates a new config</comment>
    <comment type="line">// before destroying the old config, so the only way that we'd miss an</comment>
    <comment type="line">// update is if fontconfig did more than one update and the memory for the</comment>
    <comment type="line">// most recent config happened to be at the same location as the original</comment>
    <comment type="line">// config.</comment>
    <decl_stmt><decl><type><name>FcConfig</name> *</type><name>currentConfig</name> <init>= <expr><call><name>FcConfigGetCurrent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>currentConfig</name> == <name>mLastConfig</name></expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

    <comment type="line">// This FcFontSet is owned by fontconfig</comment>
    <decl_stmt><decl><type><name>FcFontSet</name> *</type><name>fontSet</name> <init>= <expr><call><name>FcConfigGetFonts</name><argument_list>(<argument><expr><name>currentConfig</name></expr></argument>, <argument><expr><name>FcSetSystem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>mFontsByFamily</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mFontsByFullname</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mLangSupportTable</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mAliasForMultiFonts</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Record the existing font families</comment>
    <for>for (<init><decl><type><name>int</name></type> <name>f</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>f</name> &lt; <name><name>fontSet</name>-&gt;<name>nfont</name></name></expr>;</condition> <incr><expr>++<name>f</name></expr></incr>) <block>{
        <decl_stmt><decl><type><name>FcPattern</name> *</type><name>font</name> <init>= <expr><name><name>fontSet</name>-&gt;<name>fonts</name><index>[<expr><name>f</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>FcChar8</name> *</type><name>family</name></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>v</name> <init>= <expr>0</expr></init></decl>;</init>
             <condition><expr><call><name>FcPatternGetString</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>FC_FAMILY</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr>&amp;<name>family</name></expr></argument>)</argument_list></call> == <name>FcResultMatch</name></expr>;</condition>
             <incr><expr>++<name>v</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>FontsByFcStrEntry</name> *</type><name>entry</name> <init>= <expr><call><name><name>mFontsByFamily</name>.<name>PutEntry</name></name><argument_list>(<argument><expr><name>family</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entry</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>PRBool</name></type> <name>added</name> <init>= <expr><call><name><name>entry</name>-&gt;<name>AddFont</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr>!<name><name>entry</name>-&gt;<name>mKey</name></name></expr>)</condition><then> <block>{
                    <comment type="line">// The reference to the font pattern keeps the pointer to</comment>
                    <comment type="line">// string for the key valid.  If adding the font failed</comment>
                    <comment type="line">// then the entry must be removed.</comment>
                    <if>if <condition>(<expr><name>added</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>entry</name>-&gt;<name>mKey</name></name> = <name>family</name></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>mFontsByFamily</name>.<name>RawRemoveEntry</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
    }</block></for>

    <comment type="line">// XXX we don't support all alias names.</comment>
    <comment type="line">// Because if we don't check whether the given font name is alias name,</comment>
    <comment type="line">// fontconfig converts the non existing font to sans-serif.</comment>
    <comment type="line">// This is not good if the web page specifies font-family</comment>
    <comment type="line">// that has Windows font name in the first.</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrefService</name></expr></argument>&gt;</argument_list></name></type> <name>prefs</name> <init>= <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_PREFSERVICE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>prefs</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrefBranch</name></expr></argument>&gt;</argument_list></name></type> <name>prefBranch</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>prefs</name>-&gt;<name>GetBranch</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>prefBranch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>prefBranch</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>nsXPIDLCString</name></type> <name>list</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>prefBranch</name>-&gt;<name>GetCharPref</name></name><argument_list>(<argument><expr>"font.alias-list"</expr></argument>, <argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name><name>list</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>kComma</name> <init>= <expr>','</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl>, *<decl><type ref="prev"/><name>p_end</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>list</name>.<name>BeginReading</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>list</name>.<name>EndReading</name></name><argument_list>(<argument><expr><name>p_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>p</name> &lt; <name>p_end</name></expr>)</condition> <block>{
            <while>while <condition>(<expr><call><name><name>nsCRT</name>::<name>IsAsciiSpace</name></name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
                <if>if <condition>(<expr>++<name>p</name> == <name>p_end</name></expr>)</condition><then>
                    <break>break;</break></then></if>
            }</block></while>
            <if>if <condition>(<expr><name>p</name> == <name>p_end</name></expr>)</condition><then>
                <break>break;</break></then></if>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr>++<name>p</name> != <name>p_end</name> &amp;&amp; *<name>p</name> != <name>kComma</name></expr>)</condition>
                <comment type="block">/* nothing */</comment> <empty_stmt>;</empty_stmt></while>
            <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>name</name><argument_list>(<argument><expr><call><name>Substring</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>name</name>.<name>CompressWhitespace</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mAliasForMultiFonts</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name>++</expr>;</expr_stmt>
        }</block></while>
    }</block></then></if>

    <expr_stmt><expr><name>mLastConfig</name> = <name>currentConfig</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>gfxFontconfigUtils</name>::<name>GetStandardFamilyName</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aFontName</name></decl></param>, <param><decl><type><name>nsAString</name>&amp;</type> <name>aFamilyName</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>aFamilyName</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// The fontconfig has generic family names in the font list.</comment>
    <if>if <condition>(<expr><call><name><name>aFontName</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"serif"</expr></argument>)</argument_list></call> ||
        <call><name><name>aFontName</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"sans-serif"</expr></argument>)</argument_list></call> ||
        <call><name><name>aFontName</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"monospace"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>aFamilyName</name>.<name>Assign</name></name><argument_list>(<argument><expr><name>aFontName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>UpdateFontListInternal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>

    <function_decl><type><name>NS_ConvertUTF16toUTF8</name></type> <name>fontname</name><parameter_list>(<param><decl><type><name>aFontName</name></type></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// return empty string if no such family exists</comment>
    <if>if <condition>(<expr>!<call><name>IsExistingFamily</name><argument_list>(<argument><expr><name>fontname</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>FcPattern</name> *</type><name>pat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FcObjectSet</name> *</type><name>os</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FcFontSet</name> *</type><name>givenFS</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsCString</name></expr></argument>&gt;</argument_list></name></type> <name>candidates</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FcFontSet</name> *</type><name>candidateFS</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>pat</name> = <call><name>FcPatternCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>pat</name></expr>)</condition><then>
        <goto>goto <name>end</name>;</goto></then></if>

    <expr_stmt><expr><call><name>FcPatternAddString</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>FC_FAMILY</name></expr></argument>, <argument><expr>(<name>FcChar8</name> *)<call><name><name>fontname</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>os</name> = <call><name>FcObjectSetBuild</name><argument_list>(<argument><expr><name>FC_FAMILY</name></expr></argument>, <argument><expr><name>FC_FILE</name></expr></argument>, <argument><expr><name>FC_INDEX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>os</name></expr>)</condition><then>
        <goto>goto <name>end</name>;</goto></then></if>

    <expr_stmt><expr><name>givenFS</name> = <call><name>FcFontList</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>givenFS</name></expr>)</condition><then>
        <goto>goto <name>end</name>;</goto></then></if>

    <comment type="line">// The first value associated with a FC_FAMILY property is the family</comment>
    <comment type="line">// returned by GetFontList(), so use this value if appropriate.</comment>

    <comment type="line">// See if there is a font face with first family equal to the given family.</comment>
    <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>givenFS</name>-&gt;<name>nfont</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <decl_stmt><decl><type><name>char</name> *</type><name>firstFamily</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>FcPatternGetString</name><argument_list>(<argument><expr><name><name>givenFS</name>-&gt;<name>fonts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>FC_FAMILY</name></expr></argument>, <argument><expr>0</expr></argument>,
                               <argument><expr>(<name>FcChar8</name> **) &amp;<name>firstFamily</name></expr></argument>)</argument_list></call> != <name>FcResultMatch</name></expr>)</condition><then>
            <continue>continue;</continue></then></if>

        <function_decl><type><name>nsDependentCString</name></type> <name>first</name><parameter_list>(<param><decl><type><name>firstFamily</name></type></decl></param>)</parameter_list>;</function_decl>
        <if>if <condition>(<expr>!<call><name><name>candidates</name>.<name>Contains</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>candidates</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name><name>fontname</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>aFamilyName</name>.<name>Assign</name></name><argument_list>(<argument><expr><name>aFontName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rv</name> = <name>NS_OK</name></expr>;</expr_stmt>
                <goto>goto <name>end</name>;</goto>
            }</block></then></if>
        }</block></then></if>
    }</block></for>

    <comment type="line">// See if any of the first family names represent the same set of font</comment>
    <comment type="line">// faces as the given family.</comment>
    <for>for (<init><decl><type><name>PRUint32</name></type> <name>j</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <call><name><name>candidates</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
        <expr_stmt><expr><call><name>FcPatternDel</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>FC_FAMILY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FcPatternAddString</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>FC_FAMILY</name></expr></argument>, <argument><expr>(<name>FcChar8</name> *)<name><name>candidates</name><index>[<expr><name>j</name></expr>]</index></name>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>candidateFS</name> = <call><name>FcFontList</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>candidateFS</name></expr>)</condition><then>
            <goto>goto <name>end</name>;</goto></then></if>

        <if>if <condition>(<expr><name><name>candidateFS</name>-&gt;<name>nfont</name></name> != <name><name>givenFS</name>-&gt;<name>nfont</name></name></expr>)</condition><then>
            <continue>continue;</continue></then></if>

        <decl_stmt><decl><type><name>PRBool</name></type> <name>equal</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>givenFS</name>-&gt;<name>nfont</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <if>if <condition>(<expr>!<call><name>FcPatternEqual</name><argument_list>(<argument><expr><name><name>candidateFS</name>-&gt;<name>fonts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>givenFS</name>-&gt;<name>fonts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>equal</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <if>if <condition>(<expr><name>equal</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>AppendUTF8toUTF16</name><argument_list>(<argument><expr><name><name>candidates</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>aFamilyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rv</name> = <name>NS_OK</name></expr>;</expr_stmt>
            <goto>goto <name>end</name>;</goto>
        }</block></then></if>
    }</block></for>

    <comment type="line">// No match found; return empty string.</comment>
    <expr_stmt><expr><name>rv</name> = <name>NS_OK</name></expr>;</expr_stmt>

  <label><name>end</name>:</label>
    <if>if <condition>(<expr><name>pat</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>FcPatternDestroy</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>os</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>FcObjectSetDestroy</name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>givenFS</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>FcFontSetDestroy</name><argument_list>(<argument><expr><name>givenFS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>candidateFS</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>FcFontSetDestroy</name><argument_list>(<argument><expr><name>candidateFS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>gfxFontconfigUtils</name>::<name>ResolveFontName</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aFontName</name></decl></param>,
                                    <param><decl><type><name><name>gfxPlatform</name>::<name>FontResolverCallback</name></name></type> <name>aCallback</name></decl></param>,
                                    <param><decl><type><name>void</name> *</type><name>aClosure</name></decl></param>,
                                    <param><decl><type><name>PRBool</name>&amp;</type> <name>aAborted</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>aAborted</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>UpdateFontListInternal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>

    <function_decl><type><name>NS_ConvertUTF16toUTF8</name></type> <name>fontname</name><parameter_list>(<param><decl><type><name>aFontName</name></type></decl></param>)</parameter_list>;</function_decl>
    <comment type="line">// Sometimes, the font has two or more names (e.g., "Sazanami Gothic" has</comment>
    <comment type="line">// Japanese localized name).  We should not resolve to a single name</comment>
    <comment type="line">// because different names sometimes have different behavior. e.g., with</comment>
    <comment type="line">// the default settings of "Sazanami" on Fedora Core 5, the non-localized</comment>
    <comment type="line">// name uses anti-alias, but the localized name uses it.  So, we should</comment>
    <comment type="line">// check just whether the font is existing, without resolving to regular</comment>
    <comment type="line">// name.</comment>
    <comment type="line">//</comment>
    <comment type="line">// The family names in mAliasForMultiFonts are names understood by</comment>
    <comment type="line">// fontconfig.  The actual font to which they resolve depends on the</comment>
    <comment type="line">// entire match pattern.  That info is not available here, but there</comment>
    <comment type="line">// will be a font so leave the resolving to the gfxFontGroup.</comment>
    <if>if <condition>(<expr><call><name>IsExistingFamily</name><argument_list>(<argument><expr><name>fontname</name></expr></argument>)</argument_list></call> ||
        <call><name><name>mAliasForMultiFonts</name>.<name>Contains</name></name><argument_list>(<argument><expr><name>fontname</name></expr></argument>, <argument><expr><call><name>gfxIgnoreCaseCStringComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>aAborted</name> = !<call>(*<name>aCallback</name>)<argument_list>(<argument><expr><name>aFontName</name></expr></argument>, <argument><expr><name>aClosure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>gfxFontconfigUtils</name>::<name>IsExistingFamily</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsCString</name>&amp;</type> <name>aFamilyName</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name><name>mFontsByFamily</name>.<name>GetEntry</name></name><argument_list>(<argument><expr><call><name>ToFcChar8</name><argument_list>(<argument><expr><name>aFamilyName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != <name>nsnull</name></expr>;</return>
}</block></function>

<function><type><specifier>const</specifier> <name><name>nsTArray</name><argument_list>&lt; <argument><expr><name><name>nsCountedRef</name><argument_list>&lt;<argument><expr><name>FcPattern</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>&amp;</type>
<name><name>gfxFontconfigUtils</name>::<name>GetFontsForFamily</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>FcChar8</name> *</type><name>aFamilyName</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>FontsByFcStrEntry</name> *</type><name>entry</name> <init>= <expr><call><name><name>mFontsByFamily</name>.<name>GetEntry</name></name><argument_list>(<argument><expr><name>aFamilyName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then>
        <return>return <expr><name>mEmptyPatternArray</name></expr>;</return></then></if>

    <return>return <expr><call><name><name>entry</name>-&gt;<name>GetFonts</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">// Fontconfig only provides a fullname property for fonts in formats with SFNT</comment>
<comment type="line">// wrappers.  For other font formats (including PCF and PS Type 1), a fullname</comment>
<comment type="line">// must be generated from the family and style properties.  Only the first</comment>
<comment type="line">// family and style is checked, but that should be OK, as I don't expect</comment>
<comment type="line">// non-SFNT fonts to have multiple families or styles.</comment>
<function><type><name>PRBool</name></type>
<name><name>gfxFontconfigUtils</name>::<name>GetFullnameFromFamilyAndStyle</name></name><parameter_list>(<param><decl><type><name>FcPattern</name> *</type><name>aFont</name></decl></param>,
                                                  <param><decl><type><name>nsACString</name> *</type><name>aFullname</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>FcChar8</name> *</type><name>family</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>FcPatternGetString</name><argument_list>(<argument><expr><name>aFont</name></expr></argument>, <argument><expr><name>FC_FAMILY</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>family</name></expr></argument>)</argument_list></call> != <name>FcResultMatch</name></expr>)</condition><then>
        <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name><name>aFullname</name>-&gt;<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aFullname</name>-&gt;<name>Append</name></name><argument_list>(<argument><expr><call><name>ToCString</name><argument_list>(<argument><expr><name>family</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>FcChar8</name> *</type><name>style</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>FcPatternGetString</name><argument_list>(<argument><expr><name>aFont</name></expr></argument>, <argument><expr><name>FC_STYLE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>style</name></expr></argument>)</argument_list></call> == <name>FcResultMatch</name> &amp;&amp;
        <call><name>strcmp</name><argument_list>(<argument><expr><call><name>ToCString</name><argument_list>(<argument><expr><name>style</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"Regular"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>aFullname</name>-&gt;<name>Append</name></name><argument_list>(<argument><expr>' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>aFullname</name>-&gt;<name>Append</name></name><argument_list>(<argument><expr><call><name>ToCString</name><argument_list>(<argument><expr><name>style</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>gfxFontconfigUtils</name>::<name>FontsByFullnameEntry</name>::<name>KeyEquals</name></name><parameter_list>(<param><decl><type><name>KeyTypePointer</name></type> <name>aKey</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>FcChar8</name> *</type><name>key</name> <init>= <expr><name>mKey</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// If mKey is NULL, key comes from the style and family of the first font.</comment>
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>fullname</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>key</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>mFonts</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"No font in FontsByFullnameEntry!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GetFullnameFromFamilyAndStyle</name><argument_list>(<argument><expr><name><name>mFonts</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>key</name> = <call><name>ToFcChar8</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><call><name>FcStrCmpIgnoreCase</name><argument_list>(<argument><expr><name>aKey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> == 0</expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>gfxFontconfigUtils</name>::<name>AddFullnameEntries</name></name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">// This FcFontSet is owned by fontconfig</comment>
    <decl_stmt><decl><type><name>FcFontSet</name> *</type><name>fontSet</name> <init>= <expr><call><name>FcConfigGetFonts</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FcSetSystem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Record the existing font families</comment>
    <for>for (<init><decl><type><name>int</name></type> <name>f</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>f</name> &lt; <name><name>fontSet</name>-&gt;<name>nfont</name></name></expr>;</condition> <incr><expr>++<name>f</name></expr></incr>) <block>{
        <decl_stmt><decl><type><name>FcPattern</name> *</type><name>font</name> <init>= <expr><name><name>fontSet</name>-&gt;<name>fonts</name><index>[<expr><name>f</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FcChar8</name> *</type><name>fullname</name></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name>FcPatternGetString</name><argument_list>(<argument><expr><name>font</name></expr></argument>,
                                  <argument><expr><name>FC_FULLNAME</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr>&amp;<name>fullname</name></expr></argument>)</argument_list></call> == <name>FcResultMatch</name></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>FontsByFullnameEntry</name> *</type><name>entry</name> <init>= <expr><call><name><name>mFontsByFullname</name>.<name>PutEntry</name></name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entry</name></expr>)</condition><then> <block>{
                <comment type="line">// entry always has space for one font, so the first AddFont</comment>
                <comment type="line">// will always succeed, and so the entry will always have a</comment>
                <comment type="line">// font from which to obtain the key.</comment>
                <decl_stmt><decl><type><name>PRBool</name></type> <name>added</name> <init>= <expr><call><name><name>entry</name>-&gt;<name>AddFont</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// The key may be NULL either if this is the first font, or if</comment>
                <comment type="line">// the first font does not have a fullname property, and so</comment>
                <comment type="line">// the key is obtained from the font.  Set the key in both</comment>
                <comment type="line">// cases.  The check that AddFont succeeded is required for</comment>
                <comment type="line">// the second case.</comment>
                <if>if <condition>(<expr>!<name><name>entry</name>-&gt;<name>mKey</name></name> &amp;&amp; <name>added</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>entry</name>-&gt;<name>mKey</name></name> = <name>fullname</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <expr_stmt><expr>++<name>v</name></expr>;</expr_stmt>
        }</block></while>

        <comment type="line">// Fontconfig does not provide a fullname property for all fonts.</comment>
        <if>if <condition>(<expr><name>v</name> == 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>name</name></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name>GetFullnameFromFamilyAndStyle</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <continue>continue;</continue></then></if>

            <decl_stmt><decl><type><name>FontsByFullnameEntry</name> *</type><name>entry</name> <init>=
                <expr><call><name><name>mFontsByFullname</name>.<name>PutEntry</name></name><argument_list>(<argument><expr><call><name>ToFcChar8</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entry</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>entry</name>-&gt;<name>AddFont</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// Either entry-&gt;mKey has been set for a previous font or it</comment>
                <comment type="line">// remains NULL to indicate that the key is obtained from the</comment>
                <comment type="line">// first font.</comment>
            }</block></then></if>
        }</block></then></if>
    }</block></for>
}</block></function>

<function><type><specifier>const</specifier> <name><name>nsTArray</name><argument_list>&lt; <argument><expr><name><name>nsCountedRef</name><argument_list>&lt;<argument><expr><name>FcPattern</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>&amp;</type>
<name><name>gfxFontconfigUtils</name>::<name>GetFontsForFullname</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>FcChar8</name> *</type><name>aFullname</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><call><name><name>mFontsByFullname</name>.<name>Count</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>AddFullnameEntries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>FontsByFullnameEntry</name> *</type><name>entry</name> <init>= <expr><call><name><name>mFontsByFullname</name>.<name>GetEntry</name></name><argument_list>(<argument><expr><name>aFullname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then>
        <return>return <expr><name>mEmptyPatternArray</name></expr>;</return></then></if>

    <return>return <expr><call><name><name>entry</name>-&gt;<name>GetFonts</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>FcLangResult</name></type>
<name>CompareLangString</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>FcChar8</name> *</type><name>aLangA</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>FcChar8</name> *</type><name>aLangB</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>FcLangResult</name></type> <name>result</name> <init>= <expr><name>FcLangDifferentLang</name></expr></init></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <decl_stmt><decl><type><name>FcChar8</name></type> <name>a</name> <init>= <expr><call><name>FcToLower</name><argument_list>(<argument><expr><name><name>aLangA</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FcChar8</name></type> <name>b</name> <init>= <expr><call><name>FcToLower</name><argument_list>(<argument><expr><name><name>aLangB</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>a</name> != <name>b</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>(<name>a</name> == '\0' &amp;&amp; <name>b</name> == '-') || (<name>a</name> == '-' &amp;&amp; <name>b</name> == '\0')</expr>)</condition><then>
                <return>return <expr><name>FcLangDifferentCountry</name></expr>;</return></then></if>

            <return>return <expr><name>result</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>a</name> == '\0'</expr>)</condition><then>
            <return>return <expr><name>FcLangEqual</name></expr>;</return></then></if>

        <if>if <condition>(<expr><name>a</name> == '-'</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name>FcLangDifferentCountry</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
}</block></function>

<comment type="block">/* static */</comment>
<function><type><name>FcLangResult</name></type>
<name><name>gfxFontconfigUtils</name>::<name>GetLangSupport</name></name><parameter_list>(<param><decl><type><name>FcPattern</name> *</type><name>aFont</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>FcChar8</name> *</type><name>aLang</name></decl></param>)</parameter_list>
<block>{
    <comment type="line">// When fontconfig builds a pattern for a system font, it will set a</comment>
    <comment type="line">// single LangSet property value for the font.  That value may be removed</comment>
    <comment type="line">// and additional string values may be added through FcConfigSubsitute</comment>
    <comment type="line">// with FcMatchScan.  Values that are neither LangSet nor string are</comment>
    <comment type="line">// considered errors in fontconfig sort and match functions.</comment>
    <comment type="line">//</comment>
    <comment type="line">// If no string nor LangSet value is found, then either the font is a</comment>
    <comment type="line">// system font and the LangSet has been removed through FcConfigSubsitute,</comment>
    <comment type="line">// or the font is a web font and its language support is unknown.</comment>
    <comment type="line">// Returning FcLangDifferentLang for these fonts ensures that this font</comment>
    <comment type="line">// will not be assumed to satisfy the language, and so language will be</comment>
    <comment type="line">// prioritized in sorting fallback fonts.</comment>
    <decl_stmt><decl><type><name>FcValue</name></type> <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FcLangResult</name></type> <name>best</name> <init>= <expr><name>FcLangDifferentLang</name></expr></init></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>int</name></type> <name>v</name> <init>= <expr>0</expr></init></decl>;</init>
         <condition><expr><call><name>FcPatternGet</name><argument_list>(<argument><expr><name>aFont</name></expr></argument>, <argument><expr><name>FC_LANG</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call> == <name>FcResultMatch</name></expr>;</condition>
         <incr><expr>++<name>v</name></expr></incr>) <block>{

        <decl_stmt><decl><type><name>FcLangResult</name></type> <name>support</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name><name>value</name>.<name>type</name></name></expr>)</condition> <block>{
            <case>case <expr><name>FcTypeLangSet</name></expr>:
                <expr_stmt><expr><name>support</name> = <call><name>FcLangSetHasLang</name><argument_list>(<argument><expr><name><name>value</name>.<name>u</name>.<name>l</name></name></expr></argument>, <argument><expr><name>aLang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>FcTypeString</name></expr>:
                <expr_stmt><expr><name>support</name> = <call><name>CompareLangString</name><argument_list>(<argument><expr><name><name>value</name>.<name>u</name>.<name>s</name></name></expr></argument>, <argument><expr><name>aLang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><default>default:
                <comment type="line">// error. continue to see if there is a useful value.</comment>
                <continue>continue;</continue>
        </default>}</block></switch>

        <if>if <condition>(<expr><name>support</name> &lt; <name>best</name></expr>)</condition><then> <block>{ <comment type="line">// lower is better</comment>
            <if>if <condition>(<expr><name>support</name> == <name>FcLangEqual</name></expr>)</condition><then>
                <return>return <expr><name>support</name></expr>;</return></then></if>
            <expr_stmt><expr><name>best</name> = <name>support</name></expr>;</expr_stmt>
        }</block></then></if>        
    }</block></for>

    <return>return <expr><name>best</name></expr>;</return>
}</block></function>

<function><type><name><name>gfxFontconfigUtils</name>::<name>LangSupportEntry</name></name> *</type>
<name><name>gfxFontconfigUtils</name>::<name>GetLangSupportEntry</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>FcChar8</name> *</type><name>aLang</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aWithFonts</name></decl></param>)</parameter_list>
<block>{
    <comment type="line">// Currently any unrecognized languages from documents will be converted</comment>
    <comment type="line">// to x-unicode by nsILanguageAtomService, so there is a limit on the</comment>
    <comment type="line">// langugages that will be added here.  Reconsider when/if document</comment>
    <comment type="line">// languages are passed to this routine.</comment>

    <decl_stmt><decl><type><name>LangSupportEntry</name> *</type><name>entry</name> <init>= <expr><call><name><name>mLangSupportTable</name>.<name>PutEntry</name></name><argument_list>(<argument><expr><name>aLang</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then>
        <return>return <expr><name>nsnull</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>FcLangResult</name></type> <name>best</name> <init>= <expr><name>FcLangDifferentLang</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name><name>entry</name>-&gt;<name>IsKeyInitialized</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>entry</name>-&gt;<name>InitKey</name></name><argument_list>(<argument><expr><name>aLang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <comment type="line">// mSupport is already initialized.</comment>
        <if>if <condition>(<expr>!<name>aWithFonts</name></expr>)</condition><then>
            <return>return <expr><name>entry</name></expr>;</return></then></if>

        <expr_stmt><expr><name>best</name> = <name><name>entry</name>-&gt;<name>mSupport</name></name></expr>;</expr_stmt>
        <comment type="line">// If there is support for this language, an empty font list indicates</comment>
        <comment type="line">// that the list hasn't been initialized yet.</comment>
        <if>if <condition>(<expr><name>best</name> == <name>FcLangDifferentLang</name> || <call><name><name>entry</name>-&gt;<name>mFonts</name>.<name>Length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then>
            <return>return <expr><name>entry</name></expr>;</return></then></if>
    }</block></else></if>

    <comment type="line">// This FcFontSet is owned by fontconfig</comment>
    <decl_stmt><decl><type><name>FcFontSet</name> *</type><name>fontSet</name> <init>= <expr><call><name>FcConfigGetFonts</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FcSetSystem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>nsAutoTArray</name><argument_list>&lt;<argument><expr><name>FcPattern</name>*</expr></argument>,<argument><expr>100</expr></argument>&gt;</argument_list></name></type> <name>fonts</name></decl>;</decl_stmt>

    <for>for (<init><decl><type><name>int</name></type> <name>f</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>f</name> &lt; <name><name>fontSet</name>-&gt;<name>nfont</name></name></expr>;</condition> <incr><expr>++<name>f</name></expr></incr>) <block>{
        <decl_stmt><decl><type><name>FcPattern</name> *</type><name>font</name> <init>= <expr><name><name>fontSet</name>-&gt;<name>fonts</name><index>[<expr><name>f</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>FcLangResult</name></type> <name>support</name> <init>= <expr><call><name>GetLangSupport</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>aLang</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>support</name> &lt; <name>best</name></expr>)</condition><then> <block>{ <comment type="line">// lower is better</comment>
            <expr_stmt><expr><name>best</name> = <name>support</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>aWithFonts</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>fonts</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>best</name> == <name>FcLangEqual</name></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if></else></if>
        }</block></then></if>

        <comment type="line">// The font list in the LangSupportEntry is expected to be used only</comment>
        <comment type="line">// when no default fonts support the language.  There would be a large</comment>
        <comment type="line">// number of fonts in entries for languages using Latin script but</comment>
        <comment type="line">// these do not need to be created because default fonts already</comment>
        <comment type="line">// support these languages.</comment>
        <if>if <condition>(<expr><name>aWithFonts</name> &amp;&amp; <name>support</name> != <name>FcLangDifferentLang</name> &amp;&amp; <name>support</name> == <name>best</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>fonts</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

    <expr_stmt><expr><name><name>entry</name>-&gt;<name>mSupport</name></name> = <name>best</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>aWithFonts</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name><name>fonts</name>.<name>Length</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>entry</name>-&gt;<name>mFonts</name>.<name>AppendElements</name></name><argument_list>(<argument><expr><call><name><name>fonts</name>.<name>Elements</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>fonts</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>best</name> != <name>FcLangDifferentLang</name></expr>)</condition><then> <block>{
            <comment type="line">// Previously there was a font that supported this language at the</comment>
            <comment type="line">// level of entry-&gt;mSupport, but it has now disappeared.  At least</comment>
            <comment type="line">// entry-&gt;mSupport needs to be recalculated, but this is an</comment>
            <comment type="line">// indication that the set of installed fonts has changed, so</comment>
            <comment type="line">// update all caches.</comment>
            <expr_stmt><expr><name>mLastConfig</name> = <name>NULL</name></expr>;</expr_stmt> <comment type="line">// invalidates caches</comment>
            <expr_stmt><expr><call><name>UpdateFontListInternal</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>GetLangSupportEntry</name><argument_list>(<argument><expr><name>aLang</name></expr></argument>, <argument><expr><name>aWithFonts</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></else></if>
    }</block></then></if>

    <return>return <expr><name>entry</name></expr>;</return>
}</block></function>

<function><type><name>FcLangResult</name></type>
<name><name>gfxFontconfigUtils</name>::<name>GetBestLangSupport</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>FcChar8</name> *</type><name>aLang</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateFontListInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>LangSupportEntry</name> *</type><name>entry</name> <init>= <expr><call><name>GetLangSupportEntry</name><argument_list>(<argument><expr><name>aLang</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then>
        <return>return <expr><name>FcLangEqual</name></expr>;</return></then></if>

    <return>return <expr><name><name>entry</name>-&gt;<name>mSupport</name></name></expr>;</return>
}</block></function>

<function><type><specifier>const</specifier> <name><name>nsTArray</name><argument_list>&lt; <argument><expr><name><name>nsCountedRef</name><argument_list>&lt;<argument><expr><name>FcPattern</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>&amp;</type>
<name><name>gfxFontconfigUtils</name>::<name>GetFontsForLang</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>FcChar8</name> *</type><name>aLang</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>LangSupportEntry</name> *</type><name>entry</name> <init>= <expr><call><name>GetLangSupportEntry</name><argument_list>(<argument><expr><name>aLang</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then>
        <return>return <expr><name>mEmptyPatternArray</name></expr>;</return></then></if>

    <return>return <expr><name><name>entry</name>-&gt;<name>mFonts</name></name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>gfxFontNameList</name>::<name>Exists</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aName</name></decl></param>)</parameter_list> <block>{
    <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name>Length</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr><call><name><name>aName</name>.<name>Equals</name></name><argument_list>(<argument><expr><call><name>ElementAt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>PR_TRUE</name></expr>;</return></then></if>
    }</block></for>
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>
</unit>
