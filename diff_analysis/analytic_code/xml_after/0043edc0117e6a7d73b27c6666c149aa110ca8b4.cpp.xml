<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0043edc0117e6a7d73b27c6666c149aa110ca8b4.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Hubbie Shaw
 *   Doug Turner &lt;dougt@netscape.com&gt;
 *   Brian Ryner &lt;bryner@brianryner.com&gt;
 *   Kai Engert &lt;kengert@redhat.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozilla/ModuleUtils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNSSComponent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsSSLSocketProvider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsTLSSocketProvider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsKeygenHandler.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsSDR.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPK11TokenDB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPKCS11Slot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNSSCertificate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNSSCertificateDB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNSSCertCache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCMS.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_XUL</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCertTree.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCrypto.h"</cpp:file></cpp:include>
<comment type="line">//For the NS_CRYPTO_CONTRACTID define</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMCID.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCMSSecureMessage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCertPicker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCURILoader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsICategoryManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCRLManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCipherInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNTLMAuthModule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStreamCipher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsKeyModule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDataSignatureVerifier.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCertOverrideService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsRandomGenerator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsRecentBadCerts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsSSLStatus.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNSSIOLayer.h"</cpp:file></cpp:include>

<comment type="line">// These two macros are ripped off from nsIGenericFactory.h and slightly</comment>
<comment type="line">// modified.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><parameter_list>(<param><type><name>triggeredByNSSComponent</name></type></param>,           \
                                                      <param><type><name>_InstanceClass</name></type></param>)</parameter_list></cpp:macro>         \
<cpp:value>static nsresult                                                               \
_InstanceClass##Constructor(nsISupports *aOuter, REFNSIID aIID,               \
                            void **aResult)                                   \
{                                                                             \
    nsresult rv;                                                              \
    _InstanceClass * inst;                                                    \
                                                                              \
    *aResult = NULL;                                                          \
    if (NULL != aOuter) {                                                     \
        rv = NS_ERROR_NO_AGGREGATION;                                         \
        return rv;                                                            \
    }                                                                         \
                                                                              \
    if (triggeredByNSSComponent)                                              \
    {                                                                         \
        if (!EnsureNSSInitialized(nssLoading))                                \
            return NS_ERROR_FAILURE;                                          \
    }                                                                         \
    else                                                                      \
    {                                                                         \
        if (!EnsureNSSInitialized(nssEnsure))                                 \
            return NS_ERROR_FAILURE;                                          \
    }                                                                         \
                                                                              \
    NS_NEWXPCOM(inst, _InstanceClass);                                        \
    if (NULL == inst) {                                                       \
        if (triggeredByNSSComponent)                                          \
            EnsureNSSInitialized(nssInitFailed);                              \
        rv = NS_ERROR_OUT_OF_MEMORY;                                          \
        return rv;                                                            \
    }                                                                         \
    NS_ADDREF(inst);                                                          \
    rv = inst-&gt;QueryInterface(aIID, aResult);                                 \
    NS_RELEASE(inst);                                                         \
                                                                              \
    if (triggeredByNSSComponent)                                              \
    {                                                                         \
        if (NS_SUCCEEDED(rv))                                                 \
            EnsureNSSInitialized(nssInitSucceeded);                           \
        else                                                                  \
            EnsureNSSInitialized(nssInitFailed);                              \
    }                                                                         \
                                                                              \
    return rv;                                                                \
}</cpp:value></cpp:define>                                                                             \

 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR_INIT</name><parameter_list>(<param><type><name>triggeredByNSSComponent</name></type></param>,      \
                                                <param><type><name>_InstanceClass</name></type></param>, <param><type><name>_InitMethod</name></type></param>)</parameter_list></cpp:macro>  \
<cpp:value>static nsresult                                                               \
_InstanceClass##Constructor(nsISupports *aOuter, REFNSIID aIID,               \
                            void **aResult)                                   \
{                                                                             \
    nsresult rv;                                                              \
    _InstanceClass * inst;                                                    \
                                                                              \
    *aResult = NULL;                                                          \
    if (NULL != aOuter) {                                                     \
        rv = NS_ERROR_NO_AGGREGATION;                                         \
        return rv;                                                            \
    }                                                                         \
                                                                              \
    if (triggeredByNSSComponent)                                              \
    {                                                                         \
        if (!EnsureNSSInitialized(nssLoading))                                \
            return NS_ERROR_FAILURE;                                          \
    }                                                                         \
    else                                                                      \
    {                                                                         \
        if (!EnsureNSSInitialized(nssEnsure))                                 \
            return NS_ERROR_FAILURE;                                          \
    }                                                                         \
                                                                              \
    NS_NEWXPCOM(inst, _InstanceClass);                                        \
    if (NULL == inst) {                                                       \
        if (triggeredByNSSComponent)                                          \
            EnsureNSSInitialized(nssInitFailed);                              \
        rv = NS_ERROR_OUT_OF_MEMORY;                                          \
        return rv;                                                            \
    }                                                                         \
    NS_ADDREF(inst);                                                          \
    rv = inst-&gt;_InitMethod();                                                 \
    if(NS_SUCCEEDED(rv)) {                                                    \
        rv = inst-&gt;QueryInterface(aIID, aResult);                             \
    }                                                                         \
    NS_RELEASE(inst);                                                         \
                                                                              \
    if (triggeredByNSSComponent)                                              \
    {                                                                         \
        if (NS_SUCCEEDED(rv))                                                 \
            EnsureNSSInitialized(nssInitSucceeded);                           \
        else                                                                  \
            EnsureNSSInitialized(nssInitFailed);                              \
    }                                                                         \
                                                                              \
    return rv;                                                                \
}                                                                             \

NS_NSS_GENERIC_FACTORY_CONSTRUCTOR_INIT(PR_TRUE, nsNSSComponent, Init)</cpp:value></cpp:define>

<comment type="line">// Use the special factory constructor for everything this module implements,</comment>
<comment type="line">// because all code could potentially require the NSS library.</comment>
<comment type="line">// Our factory constructor takes an additional boolean parameter.</comment>
<comment type="line">// Only for the nsNSSComponent, set this to PR_TRUE.</comment>
<comment type="line">// All other classes must have this set to PR_FALSE.</comment>

<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsSSLSocketProvider</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsTLSSocketProvider</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsSecretDecoderRing</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsPK11TokenDB</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsPKCS11ModuleDB</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR_INIT</name><argument_list>(<argument>PR_FALSE</argument>, <argument>PSMContentListener</argument>, <argument>init</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsNSSCertificate</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsNSSCertificateDB</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsNSSCertCache</argument>)</argument_list></macro>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_XUL</name></cpp:ifdef>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsCertTree</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsCrypto</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsPkcs11</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsCMSSecureMessage</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsCMSDecoder</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsCMSEncoder</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsCMSMessage</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsCertPicker</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsCRLManager</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsCipherInfoService</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR_INIT</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsNTLMAuthModule</argument>, <argument>InitTest</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsCryptoHash</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsCryptoHMAC</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsStreamCipher</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsKeyObject</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsKeyObjectFactory</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsDataSignatureVerifier</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR_INIT</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsCertOverrideService</argument>, <argument>Init</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsRandomGenerator</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR_INIT</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsRecentBadCertsService</argument>, <argument>Init</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsSSLStatus</argument>)</argument_list></macro>
<macro><name>NS_NSS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>PR_FALSE</argument>, <argument>nsNSSSocketInfo</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_NSSCOMPONENT_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_SSLSOCKETPROVIDER_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_STARTTLSSOCKETPROVIDER_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_SDR_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_PK11TOKENDB_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_PKCS11MODULEDB_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_PSMCONTENTLISTEN_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_X509CERT_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_X509CERTDB_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_NSSCERTCACHE_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_FORMPROCESSOR_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_XUL</name></cpp:ifdef>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_CERTTREE_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_PKCS11_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_CRYPTO_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_CMSSECUREMESSAGE_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_CMSDECODER_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_CMSENCODER_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_CMSMESSAGE_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_CRYPTO_HASH_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_CRYPTO_HMAC_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_CERT_PICKER_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_CRLMANAGER_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_CIPHERINFOSERVICE_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_NTLMAUTHMODULE_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_STREAMCIPHER_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_KEYMODULEOBJECT_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_KEYMODULEOBJECTFACTORY_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_DATASIGNATUREVERIFIER_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_CERTOVERRIDE_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_RANDOMGENERATOR_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_RECENTBADCERTS_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_SSLSTATUS_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>NS_NSSSOCKETINFO_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>mozilla</name>::<name>Module</name>::<name>CIDEntry</name></name></type> <name><name>kNSSCIDs</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr>&amp;<name>kNS_NSSCOMPONENT_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsNSSComponentConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_SSLSOCKETPROVIDER_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsSSLSocketProviderConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_STARTTLSSOCKETPROVIDER_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsTLSSocketProviderConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_SDR_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsSecretDecoderRingConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_PK11TOKENDB_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsPK11TokenDBConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_PKCS11MODULEDB_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsPKCS11ModuleDBConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_PSMCONTENTLISTEN_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>PSMContentListenerConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_X509CERT_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsNSSCertificateConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_X509CERTDB_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsNSSCertificateDBConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_NSSCERTCACHE_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsNSSCertCacheConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_FORMPROCESSOR_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name><name>nsKeygenFormProcessor</name>::<name>Create</name></name></expr> }</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_XUL</name></cpp:ifdef>
  <expr><block>{ <expr>&amp;<name>kNS_CERTTREE_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsCertTreeConstructor</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><block>{ <expr>&amp;<name>kNS_PKCS11_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsPkcs11Constructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_CRYPTO_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsCryptoConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_CMSSECUREMESSAGE_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsCMSSecureMessageConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_CMSDECODER_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsCMSDecoderConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_CMSENCODER_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsCMSEncoderConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_CMSMESSAGE_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsCMSMessageConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_CRYPTO_HASH_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsCryptoHashConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_CRYPTO_HMAC_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsCryptoHMACConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_CERT_PICKER_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsCertPickerConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_CRLMANAGER_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsCRLManagerConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_CIPHERINFOSERVICE_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsCipherInfoServiceConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_NTLMAUTHMODULE_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsNTLMAuthModuleConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_STREAMCIPHER_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsStreamCipherConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_KEYMODULEOBJECT_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsKeyObjectConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_KEYMODULEOBJECTFACTORY_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsKeyObjectFactoryConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_DATASIGNATUREVERIFIER_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsDataSignatureVerifierConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_CERTOVERRIDE_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsCertOverrideServiceConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_RANDOMGENERATOR_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsRandomGeneratorConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_RECENTBADCERTS_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsRecentBadCertsServiceConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_SSLSTATUS_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsSSLStatusConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name>kNS_NSSSOCKETINFO_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>nsNSSSocketInfoConstructor</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>mozilla</name>::<name>Module</name>::<name>ContractIDEntry</name></name></type> <name><name>kNSSContracts</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr><name>PSM_COMPONENT_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_NSSCOMPONENT_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_NSS_ERRORS_SERVICE_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_NSSCOMPONENT_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_SSLSOCKETPROVIDER_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_SSLSOCKETPROVIDER_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_STARTTLSSOCKETPROVIDER_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_STARTTLSSOCKETPROVIDER_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_SDR_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_SDR_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_PK11TOKENDB_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_PK11TOKENDB_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_PKCS11MODULEDB_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_PKCS11MODULEDB_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_PSMCONTENTLISTEN_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_PSMCONTENTLISTEN_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_X509CERTDB_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_X509CERTDB_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_NSSCERTCACHE_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_NSSCERTCACHE_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_FORMPROCESSOR_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_FORMPROCESSOR_CID</name></expr> }</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_XUL</name></cpp:ifdef>
  <expr><block>{ <expr><name>NS_CERTTREE_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_CERTTREE_CID</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><block>{ <expr><name>NS_PKCS11_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_PKCS11_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_CRYPTO_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_CRYPTO_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_CMSSECUREMESSAGE_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_CMSSECUREMESSAGE_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_CMSDECODER_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_CMSDECODER_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_CMSENCODER_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_CMSENCODER_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_CMSMESSAGE_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_CMSMESSAGE_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_CRYPTO_HASH_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_CRYPTO_HASH_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_CRYPTO_HMAC_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_CRYPTO_HMAC_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_CERT_PICKER_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_CERT_PICKER_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr>"@mozilla.org/uriloader/psm-external-content-listener;1"</expr>, <expr>&amp;<name>kNS_PSMCONTENTLISTEN_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_CRLMANAGER_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_CRLMANAGER_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_CIPHERINFOSERVICE_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_CIPHERINFOSERVICE_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_CRYPTO_FIPSINFO_SERVICE_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_PKCS11MODULEDB_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_NTLMAUTHMODULE_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_NTLMAUTHMODULE_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_STREAMCIPHER_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_STREAMCIPHER_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_KEYMODULEOBJECT_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_KEYMODULEOBJECT_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_KEYMODULEOBJECTFACTORY_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_KEYMODULEOBJECTFACTORY_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_DATASIGNATUREVERIFIER_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_DATASIGNATUREVERIFIER_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_CERTOVERRIDE_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_CERTOVERRIDE_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_RANDOMGENERATOR_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_RANDOMGENERATOR_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_RECENTBADCERTS_CONTRACTID</name></expr>, <expr>&amp;<name>kNS_RECENTBADCERTS_CID</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>mozilla</name>::<name>Module</name>::<name>CategoryEntry</name></name></type> <name><name>kNSSCategories</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr><name>NS_CONTENT_LISTENER_CATEGORYMANAGER_ENTRY</name></expr>, <expr>"application/x-x509-ca-cert"</expr>, <expr>"@mozilla.org/uriloader/psm-external-content-listener;1"</expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_CONTENT_LISTENER_CATEGORYMANAGER_ENTRY</name></expr>, <expr>"application/x-x509-server-cert"</expr>, <expr>"@mozilla.org/uriloader/psm-external-content-listener;1"</expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_CONTENT_LISTENER_CATEGORYMANAGER_ENTRY</name></expr>, <expr>"application/x-x509-user-cert"</expr>, <expr>"@mozilla.org/uriloader/psm-external-content-listener;1"</expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_CONTENT_LISTENER_CATEGORYMANAGER_ENTRY</name></expr>, <expr>"application/x-x509-email-cert"</expr>, <expr>"@mozilla.org/uriloader/psm-external-content-listener;1"</expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_CONTENT_LISTENER_CATEGORYMANAGER_ENTRY</name></expr>, <expr>"application/x-pkcs7-crl"</expr>, <expr>"@mozilla.org/uriloader/psm-external-content-listener;1"</expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_CONTENT_LISTENER_CATEGORYMANAGER_ENTRY</name></expr>, <expr>"application/x-x509-crl"</expr>, <expr>"@mozilla.org/uriloader/psm-external-content-listener;1"</expr> }</block></expr>,
  <expr><block>{ <expr><name>NS_CONTENT_LISTENER_CATEGORYMANAGER_ENTRY</name></expr>, <expr>"application/pkix-crl"</expr>, <expr>"@mozilla.org/uriloader/psm-external-content-listener;1"</expr> }</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>mozilla</name>::<name>Module</name></name></type> <name>kNSSModule</name> <init>= <expr><block>{
  <expr><name><name>mozilla</name>::<name>Module</name>::<name>kVersion</name></name></expr>,
  <expr><name>kNSSCIDs</name></expr>,
  <expr><name>kNSSContracts</name></expr>,
  <expr><name>kNSSCategories</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>NSMODULE_DEFN</name><argument_list>(<argument><expr><name>NSS</name></expr></argument>)</argument_list></call> = &amp;<name>kNSSModule</name></expr>;</expr_stmt>
</unit>
