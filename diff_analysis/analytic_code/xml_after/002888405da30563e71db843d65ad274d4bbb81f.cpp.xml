<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="002888405da30563e71db843d65ad274d4bbb81f.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2007
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Alexander Surkov &lt;surkov.alexander@gmail.com&gt; (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsTextUtils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAccessNode.h"</cpp:file></cpp:include>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// nsLangTextAttr</comment>

<function><type><name>PRBool</name></type>
<name><name>nsLangTextAttr</name>::<name>Equal</name></name><parameter_list>(<param><decl><type><name>nsIDOMElement</name> *</type><name>aElm</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aElm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>content</name></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>lang</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>nsCoreUtils</name>::<name>GetLanguageFor</name></name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>mRootContent</name></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>lang</name> == <name>mLang</name></expr>;</return>
}</block></function>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// nsCSSTextAttr</comment>

<comment type="block" format="doxygen">/**
 * Item of the gCSSTextAttrsMap map.
 */</comment>
<struct>struct <name>nsCSSTextAttrMapItem</name>
<block>{<public type="default">
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>mCSSName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>mCSSValue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>mAttrName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>mAttrValue</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<comment type="block" format="doxygen">/**
 * The map of CSS properties to text attributes.
 */</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>* <specifier>const</specifier></type> <name>kAnyValue</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>* <specifier>const</specifier></type> <name>kCopyName</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>* <specifier>const</specifier></type> <name>kCopyValue</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>nsCSSTextAttrMapItem</name></type> <name><name>gCSSTextAttrsMap</name><index>[]</index></name> <init>= <expr><block>{
  <comment type="line">// CSS name            CSS value        Attribute name              Attribute name</comment>
  <expr><block>{ <expr>"color"</expr>,             <expr><name>kAnyValue</name></expr>,       <expr><name>kCopyName</name></expr>,                  <expr><name>kCopyValue</name></expr> }</block></expr>,
  <expr><block>{ <expr>"font-family"</expr>,       <expr><name>kAnyValue</name></expr>,       <expr><name>kCopyName</name></expr>,                  <expr><name>kCopyValue</name></expr> }</block></expr>,
  <expr><block>{ <expr>"font-size"</expr>,         <expr><name>kAnyValue</name></expr>,       <expr><name>kCopyName</name></expr>,                  <expr><name>kCopyValue</name></expr> }</block></expr>,
  <expr><block>{ <expr>"font-style"</expr>,        <expr><name>kAnyValue</name></expr>,       <expr><name>kCopyName</name></expr>,                  <expr><name>kCopyValue</name></expr> }</block></expr>,
  <expr><block>{ <expr>"font-weight"</expr>,       <expr><name>kAnyValue</name></expr>,       <expr><name>kCopyName</name></expr>,                  <expr><name>kCopyValue</name></expr> }</block></expr>,
  <expr><block>{ <expr>"text-decoration"</expr>,   <expr>"line-through"</expr>,  <expr>"text-line-through-style"</expr>,  <expr>"solid"</expr> }</block></expr>,
  <expr><block>{ <expr>"text-decoration"</expr>,   <expr>"underline"</expr>,     <expr>"text-underline-style"</expr>,     <expr>"solid"</expr> }</block></expr>,
  <expr><block>{ <expr>"vertical-align"</expr>,    <expr><name>kAnyValue</name></expr>,       <expr>"text-position"</expr>,            <expr><name>kCopyValue</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<constructor><name><name>nsCSSTextAttr</name>::<name>nsCSSTextAttr</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aIncludeDefAttrValue</name></decl></param>, <param><decl><type><name>nsIDOMElement</name> *</type><name>aElm</name></decl></param>,
                             <param><decl><type><name>nsIDOMElement</name> *</type><name>aRootElm</name></decl></param>)</parameter_list> <member_list>:
  <call><name>mIndex</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call>, <call><name>mIncludeDefAttrValue</name><argument_list>(<argument><expr><name>aIncludeDefAttrValue</name></expr></argument>)</argument_list></call>
</member_list><block>{
  <expr_stmt><expr><call><name><name>nsCoreUtils</name>::<name>GetComputedStyleDeclaration</name></name><argument_list>(<argument><expr><call><name>EmptyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>aElm</name></expr></argument>,
                                           <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mStyleDecl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>mIncludeDefAttrValue</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>nsCoreUtils</name>::<name>GetComputedStyleDeclaration</name></name><argument_list>(<argument><expr><call><name>EmptyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>aRootElm</name></expr></argument>,
                                             <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mDefStyleDecl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></constructor>

<function><type><name>PRBool</name></type>
<name><name>nsCSSTextAttr</name>::<name>Equal</name></name><parameter_list>(<param><decl><type><name>nsIDOMElement</name> *</type><name>aElm</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>aElm</name> || !<name>mStyleDecl</name></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMCSSStyleDeclaration</name></expr></argument>&gt;</argument_list></name></type> <name>currStyleDecl</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>nsCoreUtils</name>::<name>GetComputedStyleDeclaration</name></name><argument_list>(<argument><expr><call><name>EmptyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>aElm</name></expr></argument>,
                                           <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>currStyleDecl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>currStyleDecl</name></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>NS_ConvertASCIItoUTF16</name></type> <name>cssName</name><argument_list>(<argument><expr><name><name>gCSSTextAttrsMap</name><index>[<expr><name>mIndex</name></expr>]</index></name>.<name>mCSSName</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>currValue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>currStyleDecl</name>-&gt;<name>GetPropertyValue</name></name><argument_list>(<argument><expr><name>cssName</name></expr></argument>, <argument><expr><name>currValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>value</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>mStyleDecl</name>-&gt;<name>GetPropertyValue</name></name><argument_list>(<argument><expr><name>cssName</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; <name>value</name> == <name>currValue</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsCSSTextAttr</name>::<name>Iterate</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr>++<name>mIndex</name> &lt; <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PRInt32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>NS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>gCSSTextAttrsMap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsCSSTextAttr</name>::<name>Get</name></name><parameter_list>(<param><decl><type><name>nsACString</name>&amp;</type> <name>aName</name></decl></param>, <param><decl><type><name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mStyleDecl</name></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>NS_ConvertASCIItoUTF16</name></type> <name>cssName</name><argument_list>(<argument><expr><name><name>gCSSTextAttrsMap</name><index>[<expr><name>mIndex</name></expr>]</index></name>.<name>mCSSName</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>mStyleDecl</name>-&gt;<name>GetPropertyValue</name></name><argument_list>(<argument><expr><name>cssName</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <comment type="line">// Don't expose text attribute if corresponding CSS value on the element</comment>
  <comment type="line">// equals to CSS value on the root element and we don't want to include</comment>
  <comment type="line">// default values.</comment>
  <if>if <condition>(<expr>!<name>mIncludeDefAttrValue</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr>!<name>mDefStyleDecl</name></expr>)</condition><then>
      <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>defValue</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mDefStyleDecl</name>-&gt;<name>GetPropertyValue</name></name><argument_list>(<argument><expr><name>cssName</name></expr></argument>, <argument><expr><name>defValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>defValue</name> == <name>aValue</name></expr>)</condition><then>
      <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>
  }</block></then></if>

  <comment type="line">// Don't expose text attribute if its required specific CSS value isn't</comment>
  <comment type="line">// matched with the CSS value we got.</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cssValue</name> <init>= <expr><name><name>gCSSTextAttrsMap</name><index>[<expr><name>mIndex</name></expr>]</index></name>.<name>mCSSValue</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>cssValue</name> != <name>kAnyValue</name> &amp;&amp; !<call><name><name>aValue</name>.<name>EqualsASCII</name></name><argument_list>(<argument><expr><name>cssValue</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <comment type="line">// Get the name of text attribute.</comment>
  <if>if <condition>(<expr><name><name>gCSSTextAttrsMap</name><index>[<expr><name>mIndex</name></expr>]</index></name>.<name>mAttrName</name> != <name>kCopyName</name></expr>)</condition><then>
    <expr_stmt><expr><name>aName</name> = <name><name>gCSSTextAttrsMap</name><index>[<expr><name>mIndex</name></expr>]</index></name>.<name>mAttrName</name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>aName</name> = <name><name>gCSSTextAttrsMap</name><index>[<expr><name>mIndex</name></expr>]</index></name>.<name>mCSSName</name></expr>;</expr_stmt></else></if>

  <comment type="line">// Get the value of text attribute.</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>attrValue</name> <init>= <expr><name><name>gCSSTextAttrsMap</name><index>[<expr><name>mIndex</name></expr>]</index></name>.<name>mAttrValue</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>attrValue</name> != <name>kCopyValue</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>AppendASCIItoUTF16</name><argument_list>(<argument><expr><name>attrValue</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// nsBackgroundTextAttr</comment>

<constructor><name><name>nsBackgroundTextAttr</name>::<name>nsBackgroundTextAttr</name></name><parameter_list>(<param><decl><type><name>nsIFrame</name> *</type><name>aFrame</name></decl></param>,
                                           <param><decl><type><name>nsIFrame</name> *</type><name>aRootFrame</name></decl></param>)</parameter_list> <member_list>:
  <call><name>mFrame</name><argument_list>(<argument><expr><name>aFrame</name></expr></argument>)</argument_list></call>, <call><name>mRootFrame</name><argument_list>(<argument><expr><name>aRootFrame</name></expr></argument>)</argument_list></call>
</member_list><block>{
}</block></constructor>

<function><type><name>PRBool</name></type>
<name><name>nsBackgroundTextAttr</name>::<name>Equal</name></name><parameter_list>(<param><decl><type><name>nsIDOMElement</name> *</type><name>aElm</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIFrame</name> *</type><name>frame</name> <init>= <expr><call><name><name>nsCoreUtils</name>::<name>GetFrameFor</name></name><argument_list>(<argument><expr><name>aElm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>frame</name></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <return>return <expr><call><name>GetColor</name><argument_list>(<argument><expr><name>mFrame</name></expr></argument>)</argument_list></call> == <call><name>GetColor</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>    
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsBackgroundTextAttr</name>::<name>Get</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Do not expose "background-color" text attribute if its value is matched</comment>
  <comment type="line">// with the default value.</comment>
  <decl_stmt><decl><type><name>nscolor</name></type> <name>color</name> <init>= <expr><call><name>GetColor</name><argument_list>(<argument><expr><name>mFrame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>mRootFrame</name> &amp;&amp; <name>color</name> == <call><name>GetColor</name><argument_list>(<argument><expr><name>mRootFrame</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <comment type="line">// Combine the string like rgb(R, G, B) from nscolor.</comment>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>value</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>value</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>"rgb("</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>value</name>.<name>AppendInt</name></name><argument_list>(<argument><expr><call><name>NS_GET_R</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>value</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>value</name>.<name>AppendInt</name></name><argument_list>(<argument><expr><call><name>NS_GET_G</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>value</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>value</name>.<name>AppendInt</name></name><argument_list>(<argument><expr><call><name>NS_GET_B</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>value</name>.<name>Append</name></name><argument_list>(<argument><expr>')'</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>aValue</name> = <name>value</name></expr>;</expr_stmt>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>nscolor</name></type>
<name><name>nsBackgroundTextAttr</name>::<name>GetColor</name></name><parameter_list>(<param><decl><type><name>nsIFrame</name> *</type><name>aFrame</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleBackground</name> *</type><name>styleBackground</name> <init>= <expr><call><name><name>aFrame</name>-&gt;<name>GetStyleBackground</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<call><name><name>styleBackground</name>-&gt;<name>IsTransparent</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name><name>styleBackground</name>-&gt;<name>mBackgroundColor</name></name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsIFrame</name> *</type><name>parentFrame</name> <init>= <expr><call><name><name>aFrame</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>parentFrame</name></expr>)</condition><then>
    <return>return <expr><name><name>styleBackground</name>-&gt;<name>mBackgroundColor</name></name></expr>;</return></then></if>

  <comment type="line">// Each frame of parents chain for the initially passed 'aFrame' has</comment>
  <comment type="line">// transparent background color. So background color isn't changed from</comment>
  <comment type="line">// 'mRootFrame' to initially passed 'aFrame'.</comment>
  <if>if <condition>(<expr><name>parentFrame</name> == <name>mRootFrame</name></expr>)</condition><then>
    <return>return <expr><call><name>GetColor</name><argument_list>(<argument><expr><name>mRootFrame</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><call><name>GetColor</name><argument_list>(<argument><expr><name>parentFrame</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
