<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0085dd307b8ba9833b16fa086ca7d67715277245.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* vim:expandtab:shiftwidth=2:tabstop=2:
 */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Mozilla Foundation
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Alexander Surkov &lt;surkov.alexander@gmail.com&gt; (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsTextEquivUtils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAccessibilityService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAccessible.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAccUtils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMXULLabeledControlEl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsArrayUtils.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_OK_NO_NAME_CLAUSE_HANDLED</name></cpp:macro> \
<cpp:value>NS_ERROR_GENERATE_SUCCESS(NS_ERROR_MODULE_GENERAL, 0x24)</cpp:value></cpp:define>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// nsTextEquivUtils. Public.</comment>

<function><type><name>nsresult</name></type>
<name><name>nsTextEquivUtils</name>::<name>GetNameFromSubtree</name></name><parameter_list>(<param><decl><type><name>nsIAccessible</name> *</type><name>aAccessible</name></decl></param>,
                                     <param><decl><type><name>nsAString</name>&amp;</type> <name>aName</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aName</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>gInitiatorAcc</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <expr_stmt><expr><name>gInitiatorAcc</name> = <name>aAccessible</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>role</name> <init>= <expr><call><name><name>nsAccUtils</name>::<name>Role</name></name><argument_list>(<argument><expr><name>aAccessible</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>nameRule</name> <init>= <expr><name><name>gRoleToNameRulesMap</name><index>[<expr><name>role</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>nameRule</name> == <name>eFromSubtree</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessNode</name></expr></argument>&gt;</argument_list></name></type> <name>accessNode</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aAccessible</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>DOMNode</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>accessNode</name>-&gt;<name>GetDOMNode</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>DOMNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>DOMNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>content</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsAutoString</name></type> <name>name</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>AppendFromAccessibleChildren</name><argument_list>(<argument><expr><name>aAccessible</name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>name</name>.<name>CompressWhitespace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>!<call><name>IsWhitespaceString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>aName</name> = <name>name</name></expr>;</expr_stmt></then></if>
    }</block></then></if>
  }</block></then></if>

  <expr_stmt><expr><name>gInitiatorAcc</name> = <name>nsnull</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsTextEquivUtils</name>::<name>GetTextEquivFromIDRefs</name></name><parameter_list>(<param><decl><type><name>nsIAccessible</name> *</type><name>aAccessible</name></decl></param>,
                                         <param><decl><type><name>nsIAtom</name> *</type><name>aIDRefsAttr</name></decl></param>,
                                         <param><decl><type><name>nsAString</name>&amp;</type> <name>aTextEquiv</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aTextEquiv</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessNode</name></expr></argument>&gt;</argument_list></name></type> <name>accessNode</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aAccessible</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>DOMNode</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>accessNode</name>-&gt;<name>GetDOMNode</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>DOMNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name> <init>= <expr><call><name><name>nsCoreUtils</name>::<name>GetRoleContent</name></name><argument_list>(<argument><expr><name>DOMNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>content</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIArray</name></expr></argument>&gt;</argument_list></name></type> <name>refElms</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>nsCoreUtils</name>::<name>GetElementsByIDRefsAttr</name></name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>aIDRefsAttr</name></expr></argument>,
                                       <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>refElms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>refElms</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>refElms</name>-&gt;<name>GetLength</name></name><argument_list>(<argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>refContent</name></decl>;</decl_stmt>
  <for>for (<init><decl><type><name>PRUint32</name></type> <name>idx</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>idx</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>idx</name>++</expr></incr>) <block>{
    <expr_stmt><expr><name>refContent</name> = <call><name>do_QueryElementAt</name><argument_list>(<argument><expr><name>refElms</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name><name>aTextEquiv</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
      <expr_stmt><expr><name>aTextEquiv</name> += ' '</expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name>rv</name> = <call><name>AppendTextEquivFromContent</name><argument_list>(<argument><expr><name>aAccessible</name></expr></argument>, <argument><expr><name>refContent</name></expr></argument>, <argument><expr>&amp;<name>aTextEquiv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsTextEquivUtils</name>::<name>AppendTextEquivFromContent</name></name><parameter_list>(<param><decl><type><name>nsIAccessible</name> *</type><name>aInitiatorAcc</name></decl></param>,
                                             <param><decl><type><name>nsIContent</name> *</type><name>aContent</name></decl></param>,
                                             <param><decl><type><name>nsAString</name> *</type><name>aString</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Prevent recursion which can cause infinite loops.</comment>
  <if>if <condition>(<expr><name>gInitiatorAcc</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <expr_stmt><expr><name>gInitiatorAcc</name> = <name>aInitiatorAcc</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>DOMNode</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>shell</name> <init>= <expr><call><name><name>nsCoreUtils</name>::<name>GetPresShellFor</name></name><argument_list>(<argument><expr><name>DOMNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>shell</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr>"There is no presshell!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gInitiatorAcc</name> = <name>nsnull</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// If the given content is not visible or isn't accessible then go down</comment>
  <comment type="line">// through the DOM subtree otherwise go down through accessible subtree and</comment>
  <comment type="line">// calculate the flat string.</comment>
  <decl_stmt><decl><type><name>nsIFrame</name> *</type><name>frame</name> <init>= <expr><call><name><name>aContent</name>-&gt;<name>GetPrimaryFrame</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>isVisible</name> <init>= <expr><name>frame</name> &amp;&amp; <call><name><name>frame</name>-&gt;<name>GetStyleVisibility</name></name><argument_list>()</argument_list></call>-&gt;<call><name>IsVisible</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_ERROR_FAILURE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>goThroughDOMSubtree</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>isVisible</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessible</name></expr></argument>&gt;</argument_list></name></type> <name>accessible</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetAccService</name><argument_list>()</argument_list></call>-&gt;<call><name>GetAccessibleInShell</name><argument_list>(<argument><expr><name>DOMNode</name></expr></argument>, <argument><expr><name>shell</name></expr></argument>,
                                               <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>accessible</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>accessible</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>rv</name> = <call><name>AppendFromAccessible</name><argument_list>(<argument><expr><name>accessible</name></expr></argument>, <argument><expr><name>aString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>goThroughDOMSubtree</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <if>if <condition>(<expr><name>goThroughDOMSubtree</name></expr>)</condition><then>
    <expr_stmt><expr><name>rv</name> = <call><name>AppendFromDOMNode</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>, <argument><expr><name>aString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><name>gInitiatorAcc</name> = <name>nsnull</name></expr>;</expr_stmt>
  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsTextEquivUtils</name>::<name>AppendTextEquivFromTextContent</name></name><parameter_list>(<param><decl><type><name>nsIContent</name> *</type><name>aContent</name></decl></param>,
                                                 <param><decl><type><name>nsAString</name> *</type><name>aString</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name><name>aContent</name>-&gt;<name>IsNodeOfType</name></name><argument_list>(<argument><expr><name><name>nsINode</name>::<name>eTEXT</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>DOMNode</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>PRBool</name></type> <name>isHTMLBlock</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>nsIContent</name> *</type><name>parentContent</name> <init>= <expr><call><name><name>aContent</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>parentContent</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsIFrame</name> *</type><name>frame</name> <init>= <expr><call><name><name>parentContent</name>-&gt;<name>GetPrimaryFrame</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>frame</name></expr>)</condition><then> <block>{
        <comment type="line">// If this text is inside a block level frame (as opposed to span</comment>
        <comment type="line">// level), we need to add spaces around that block's text, so we don't</comment>
        <comment type="line">// get words jammed together in final name.</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleDisplay</name>*</type> <name>display</name> <init>= <expr><call><name><name>frame</name>-&gt;<name>GetStyleDisplay</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>display</name>-&gt;<name>IsBlockOutside</name></name><argument_list>()</argument_list></call> ||
            <name><name>display</name>-&gt;<name>mDisplay</name></name> == <name>NS_STYLE_DISPLAY_TABLE_CELL</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>isHTMLBlock</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
          <if>if <condition>(<expr>!<call><name><name>aString</name>-&gt;<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>aString</name>-&gt;<name>Append</name></name><argument_list>(<argument><expr><call><name>PRUnichar</name><argument_list>(<argument><expr>' '</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then></if>
      }</block></then></if>
    }</block></then></if>
    
    <if>if <condition>(<expr><call><name><name>aContent</name>-&gt;<name>TextLength</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsIFrame</name> *</type><name>frame</name> <init>= <expr><call><name><name>aContent</name>-&gt;<name>GetPrimaryFrame</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>frame</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>frame</name>-&gt;<name>GetRenderedText</name></name><argument_list>(<argument><expr><name>aString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <comment type="line">// If aContent is an object that is display: none, we have no a frame.</comment>
        <expr_stmt><expr><call><name><name>aContent</name>-&gt;<name>AppendTextTo</name></name><argument_list>(<argument><expr>*<name>aString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
      <if>if <condition>(<expr><name>isHTMLBlock</name> &amp;&amp; !<call><name><name>aString</name>-&gt;<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>aString</name>-&gt;<name>Append</name></name><argument_list>(<argument><expr><call><name>PRUnichar</name><argument_list>(<argument><expr>' '</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>
  
  <if>if <condition>(<expr><call><name><name>aContent</name>-&gt;<name>IsHTML</name></name><argument_list>()</argument_list></call> &amp;&amp;
      <call><name><name>aContent</name>-&gt;<name>NodeInfo</name></name><argument_list>()</argument_list></call>-&gt;<call><name>Equals</name><argument_list>(<argument><expr><name><name>nsAccessibilityAtoms</name>::<name>br</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>aString</name>-&gt;<name>AppendLiteral</name></name><argument_list>(<argument><expr>"\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>
  
  <return>return <expr><name>NS_OK_NO_NAME_CLAUSE_HANDLED</name></expr>;</return>
}</block></function>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// nsTextEquivUtils. Private.</comment>

<decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessible</name></expr></argument>&gt;</argument_list></name></type> <name><name>nsTextEquivUtils</name>::<name>gInitiatorAcc</name></name></decl>;</decl_stmt>

<function><type><name>nsresult</name></type>
<name><name>nsTextEquivUtils</name>::<name>AppendFromAccessibleChildren</name></name><parameter_list>(<param><decl><type><name>nsIAccessible</name> *</type><name>aAccessible</name></decl></param>,
                                               <param><decl><type><name>nsAString</name> *</type><name>aString</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessible</name></expr></argument>&gt;</argument_list></name></type> <name>accChild</name></decl>, <decl><type ref="prev"/><name>accNextChild</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aAccessible</name>-&gt;<name>GetFirstChild</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>accChild</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK_NO_NAME_CLAUSE_HANDLED</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>accChild</name></expr>)</condition> <block>{
    <expr_stmt><expr><name>rv</name> = <call><name>AppendFromAccessible</name><argument_list>(<argument><expr><name>accChild</name></expr></argument>, <argument><expr><name>aString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>accChild</name>-&gt;<name>GetNextSibling</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>accNextChild</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>accChild</name>.<name>swap</name></name><argument_list>(<argument><expr><name>accNextChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsTextEquivUtils</name>::<name>AppendFromAccessible</name></name><parameter_list>(<param><decl><type><name>nsIAccessible</name> *</type><name>aAccessible</name></decl></param>,
                                       <param><decl><type><name>nsAString</name> *</type><name>aString</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessNode</name></expr></argument>&gt;</argument_list></name></type> <name>accessNode</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aAccessible</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>DOMNode</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>accessNode</name>-&gt;<name>GetDOMNode</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>DOMNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>DOMNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr>"There is no content!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>content</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>AppendTextEquivFromTextContent</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>aString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>rv</name> != <name>NS_OK_NO_NAME_CLAUSE_HANDLED</name></expr>)</condition><then>
      <return>return <expr><name>rv</name></expr>;</return></then></if>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>text</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>aAccessible</name>-&gt;<name>GetName</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>isEmptyTextEquiv</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// If the name is from tooltip then append it to result string in the end</comment>
  <comment type="line">// (see h. step of name computation guide).</comment>
  <if>if <condition>(<expr><name>rv</name> != <name>NS_OK_NAME_FROM_TOOLTIP</name></expr>)</condition><then>
    <expr_stmt><expr><name>isEmptyTextEquiv</name> = !<call><name>AppendString</name><argument_list>(<argument><expr><name>aString</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="line">// Implementation of f. step.</comment>
  <expr_stmt><expr><name>rv</name> = <call><name>AppendFromValue</name><argument_list>(<argument><expr><name>aAccessible</name></expr></argument>, <argument><expr><name>aString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>rv</name> != <name>NS_OK_NO_NAME_CLAUSE_HANDLED</name></expr>)</condition><then>
    <expr_stmt><expr><name>isEmptyTextEquiv</name> = <name>PR_FALSE</name></expr>;</expr_stmt></then></if>

  <comment type="line">// Implementation of g) step of text equivalent computation guide. Go down</comment>
  <comment type="line">// into subtree if accessible allows "text equivalent from subtree rule" or</comment>
  <comment type="line">// it's not root and not control.</comment>
  <if>if <condition>(<expr><name>isEmptyTextEquiv</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>role</name> <init>= <expr><call><name><name>nsAccUtils</name>::<name>Role</name></name><argument_list>(<argument><expr><name>aAccessible</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>nameRule</name> <init>= <expr><name><name>gRoleToNameRulesMap</name><index>[<expr><name>role</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>nameRule</name> &amp; <name>eFromSubtreeIfRec</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>rv</name> = <call><name>AppendFromAccessibleChildren</name><argument_list>(<argument><expr><name>aAccessible</name></expr></argument>, <argument><expr><name>aString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>rv</name> != <name>NS_OK_NO_NAME_CLAUSE_HANDLED</name></expr>)</condition><then>
        <expr_stmt><expr><name>isEmptyTextEquiv</name> = <name>PR_FALSE</name></expr>;</expr_stmt></then></if>
    }</block></then></if>
  }</block></then></if>

  <comment type="line">// Implementation of h. step</comment>
  <if>if <condition>(<expr><name>isEmptyTextEquiv</name> &amp;&amp; !<call><name><name>text</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>AppendString</name><argument_list>(<argument><expr><name>aString</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsTextEquivUtils</name>::<name>AppendFromValue</name></name><parameter_list>(<param><decl><type><name>nsIAccessible</name> *</type><name>aAccessible</name></decl></param>,
                                  <param><decl><type><name>nsAString</name> *</type><name>aString</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>role</name> <init>= <expr><call><name><name>nsAccUtils</name>::<name>Role</name></name><argument_list>(<argument><expr><name>aAccessible</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>nameRule</name> <init>= <expr><name><name>gRoleToNameRulesMap</name><index>[<expr><name>role</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>nameRule</name> != <name>eFromValue</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK_NO_NAME_CLAUSE_HANDLED</name></expr>;</return></then></if>

  <comment type="line">// Implementation of step f. of text equivalent computation. If the given</comment>
  <comment type="line">// accessible is not root accessible (the accessible the text equivalent is</comment>
  <comment type="line">// computed for in the end) then append accessible value. Otherwise append</comment>
  <comment type="line">// value if and only if the given accessible is in the middle of its parent.</comment>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>text</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>aAccessible</name> != <name>gInitiatorAcc</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>aAccessible</name>-&gt;<name>GetValue</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>AppendString</name><argument_list>(<argument><expr><name>aString</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call> ?
      <name>NS_OK</name> : <name>NS_OK_NO_NAME_CLAUSE_HANDLED</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsAccessible</name></expr></argument>&gt;</argument_list></name></type> <name>acc</name> <init>= <expr><call><name>do_QueryObject</name><argument_list>(<argument><expr><name>aAccessible</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>node</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>acc</name>-&gt;<name>GetDOMNode</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>parent</name> <init>= <expr><call><name><name>content</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>indexOf</name> <init>= <expr><call><name><name>parent</name>-&gt;<name>IndexOf</name></name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for (<init><decl><type><name>PRInt32</name></type> <name>i</name> <init>= <expr><name>indexOf</name> - 1</expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
    <comment type="line">// check for preceding text...</comment>
    <if>if <condition>(<expr>!<call><name><name>parent</name>-&gt;<name>GetChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>-&gt;<call><name>TextIsOnlyWhitespace</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>PRUint32</name></type> <name>childCount</name> <init>= <expr><call><name><name>parent</name>-&gt;<name>GetChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for (<init><decl><type><name>PRUint32</name></type> <name>j</name> <init>= <expr><name>indexOf</name> + 1</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name>childCount</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
        <comment type="line">// .. and subsequent text</comment>
        <if>if <condition>(<expr>!<call><name><name>parent</name>-&gt;<name>GetChildAt</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call>-&gt;<call><name>TextIsOnlyWhitespace</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>aAccessible</name>-&gt;<name>GetValue</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><call><name>AppendString</name><argument_list>(<argument><expr><name>aString</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call> ?
            <name>NS_OK</name> : <name>NS_OK_NO_NAME_CLAUSE_HANDLED</name></expr>;</return>
          <break>break;</break>
        }</block></then></if>
      }</block></for>
      <break>break;</break>
    }</block></then></if>
  }</block></for>

  <return>return <expr><name>NS_OK_NO_NAME_CLAUSE_HANDLED</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsTextEquivUtils</name>::<name>AppendFromDOMChildren</name></name><parameter_list>(<param><decl><type><name>nsIContent</name> *</type><name>aContent</name></decl></param>,
                                        <param><decl><type><name>nsAString</name> *</type><name>aString</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>childCount</name> <init>= <expr><call><name><name>aContent</name>-&gt;<name>GetChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for (<init><decl><type><name>PRUint32</name></type> <name>childIdx</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>childIdx</name> &lt; <name>childCount</name></expr>;</condition> <incr><expr><name>childIdx</name>++</expr></incr>) <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>childContent</name> <init>= <expr><call><name><name>aContent</name>-&gt;<name>GetChildAt</name></name><argument_list>(<argument><expr><name>childIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>AppendFromDOMNode</name><argument_list>(<argument><expr><name>childContent</name></expr></argument>, <argument><expr><name>aString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsTextEquivUtils</name>::<name>AppendFromDOMNode</name></name><parameter_list>(<param><decl><type><name>nsIContent</name> *</type><name>aContent</name></decl></param>, <param><decl><type><name>nsAString</name> *</type><name>aString</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>AppendTextEquivFromTextContent</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>, <argument><expr><name>aString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>rv</name> != <name>NS_OK_NO_NAME_CLAUSE_HANDLED</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <if>if <condition>(<expr><call><name><name>aContent</name>-&gt;<name>IsXUL</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>textEquivalent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMXULLabeledControlElement</name></expr></argument>&gt;</argument_list></name></type> <name>labeledEl</name> <init>=
      <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>labeledEl</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>labeledEl</name>-&gt;<name>GetLabel</name></name><argument_list>(<argument><expr><name>textEquivalent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <if>if <condition>(<expr><call><name><name>aContent</name>-&gt;<name>NodeInfo</name></name><argument_list>()</argument_list></call>-&gt;<call><name>Equals</name><argument_list>(<argument><expr><name><name>nsAccessibilityAtoms</name>::<name>label</name></name></expr></argument>,
                                       <argument><expr><name>kNameSpaceID_XUL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>aContent</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsAccessibilityAtoms</name>::<name>value</name></name></expr></argument>,
                          <argument><expr><name>textEquivalent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><call><name><name>textEquivalent</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>aContent</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>,
                          <argument><expr><name><name>nsAccessibilityAtoms</name>::<name>tooltiptext</name></name></expr></argument>, <argument><expr><name>textEquivalent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></else></if>

    <expr_stmt><expr><call><name>AppendString</name><argument_list>(<argument><expr><name>aString</name></expr></argument>, <argument><expr><name>textEquivalent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><call><name>AppendFromDOMChildren</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>, <argument><expr><name>aString</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsTextEquivUtils</name>::<name>AppendString</name></name><parameter_list>(<param><decl><type><name>nsAString</name> *</type><name>aString</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aTextEquivalent</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Insert spaces to insure that words from controls aren't jammed together.</comment>
  <if>if <condition>(<expr><call><name><name>aTextEquivalent</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <if>if <condition>(<expr>!<call><name><name>aString</name>-&gt;<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>aString</name>-&gt;<name>Append</name></name><argument_list>(<argument><expr><call><name>PRUnichar</name><argument_list>(<argument><expr>' '</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><call><name><name>aString</name>-&gt;<name>Append</name></name><argument_list>(<argument><expr><name>aTextEquivalent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsTextEquivUtils</name>::<name>IsWhitespaceString</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsSubstring</name>&amp;</type> <name>aString</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsSubstring</name>::<name>const_char_iterator</name></name></type> <name>iterBegin</name></decl>, <decl><type ref="prev"/><name>iterEnd</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>aString</name>.<name>BeginReading</name></name><argument_list>(<argument><expr><name>iterBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>aString</name>.<name>EndReading</name></name><argument_list>(<argument><expr><name>iterEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>iterBegin</name> != <name>iterEnd</name> &amp;&amp; <call><name>IsWhitespace</name><argument_list>(<argument><expr>*<name>iterBegin</name></expr></argument>)</argument_list></call></expr>)</condition>
    <expr_stmt><expr>++<name>iterBegin</name></expr>;</expr_stmt></while>

  <return>return <expr><name>iterBegin</name> == <name>iterEnd</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsTextEquivUtils</name>::<name>IsWhitespace</name></name><parameter_list>(<param><decl><type><name>PRUnichar</name></type> <name>aChar</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>aChar</name> == ' ' || <name>aChar</name> == '\n' ||
    <name>aChar</name> == '\r' || <name>aChar</name> == '\t' || <name>aChar</name> == 0xa0</expr>;</return>
}</block></function>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Name rules to role map.</comment>

<decl_stmt><decl><type><name>PRUint32</name></type> <name><name>nsTextEquivUtils</name>::<name>gRoleToNameRulesMap</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_NOTHING</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_TITLEBAR</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_MENUBAR</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_SCROLLBAR</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_GRIP</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_SOUND</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_CURSOR</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_CARET</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_ALERT</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_WINDOW</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_INTERNAL_FRAME</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_MENUPOPUP</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_MENUITEM</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_TOOLTIP</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_APPLICATION</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_DOCUMENT</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_PANE</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_CHART</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_DIALOG</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_BORDER</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_GROUPING</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_SEPARATOR</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_TOOLBAR</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_STATUSBAR</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_TABLE</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_COLUMNHEADER</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_ROWHEADER</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_COLUMN</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_ROW</comment>
  <expr><name>eFromSubtreeIfRec</name></expr>, <comment type="line">// ROLE_CELL</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_LINK</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_HELPBALLOON</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_CHARACTER</comment>
  <expr><name>eFromSubtreeIfRec</name></expr>, <comment type="line">// ROLE_LIST</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_LISTITEM</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_OUTLINE</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_OUTLINEITEM</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_PAGETAB</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_PROPERTYPAGE</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_INDICATOR</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_GRAPHIC</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_STATICTEXT</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_TEXT_LEAF</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_PUSHBUTTON</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_CHECKBUTTON</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_RADIOBUTTON</comment>
  <expr><name>eFromValue</name></expr>,        <comment type="line">// ROLE_COMBOBOX</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_DROPLIST</comment>
  <expr><name>eFromValue</name></expr>,        <comment type="line">// ROLE_PROGRESSBAR</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_DIAL</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_HOTKEYFIELD</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_SLIDER</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_SPINBUTTON</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_DIAGRAM</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_ANIMATION</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_EQUATION</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_BUTTONDROPDOWN</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_BUTTONMENU</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_BUTTONDROPDOWNGRID</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_WHITESPACE</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_PAGETABLIST</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_CLOCK</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_SPLITBUTTON</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_IPADDRESS</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_ACCEL_LABEL</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_ARROW</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_CANVAS</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_CHECK_MENU_ITEM</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_COLOR_CHOOSER</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_DATE_EDITOR</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_DESKTOP_ICON</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_DESKTOP_FRAME</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_DIRECTORY_PANE</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_FILE_CHOOSER</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_FONT_CHOOSER</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_CHROME_WINDOW</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_GLASS_PANE</comment>
  <expr><name>eFromSubtreeIfRec</name></expr>, <comment type="line">// ROLE_HTML_CONTAINER</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_ICON</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_LABEL</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_LAYERED_PANE</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_OPTION_PANE</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_PASSWORD_TEXT</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_POPUP_MENU</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_RADIO_MENU_ITEM</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_ROOT_PANE</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_SCROLL_PANE</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_SPLIT_PANE</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_TABLE_COLUMN_HEADER</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_TABLE_ROW_HEADER</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_TEAR_OFF_MENU_ITEM</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_TERMINAL</comment>
  <expr><name>eFromSubtreeIfRec</name></expr>, <comment type="line">// ROLE_TEXT_CONTAINER</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_TOGGLE_BUTTON</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_TREE_TABLE</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_VIEWPORT</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_HEADER</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_FOOTER</comment>
  <expr><name>eFromSubtreeIfRec</name></expr>, <comment type="line">// ROLE_PARAGRAPH</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_RULER</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_AUTOCOMPLETE</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_EDITBAR</comment>
  <expr><name>eFromValue</name></expr>,        <comment type="line">// ROLE_ENTRY</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_CAPTION</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_DOCUMENT_FRAME</comment>
  <expr><name>eFromSubtreeIfRec</name></expr>, <comment type="line">// ROLE_HEADING</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_PAGE</comment>
  <expr><name>eFromSubtreeIfRec</name></expr>, <comment type="line">// ROLE_SECTION</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_REDUNDANT_OBJECT</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_FORM</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_IME</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_APP_ROOT</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_PARENT_MENUITEM</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_CALENDAR</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_COMBOBOX_LIST</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_COMBOBOX_OPTION</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_IMAGE_MAP</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_OPTION</comment>
  <expr><name>eFromSubtree</name></expr>,      <comment type="line">// ROLE_RICH_OPTION</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_LISTBOX</comment>
  <expr><name>eNoRule</name></expr>,           <comment type="line">// ROLE_FLAT_EQUATION</comment>
  <expr><name>eFromSubtree</name></expr>       <comment type="line">// ROLE_GRID_CELL</comment>
}</block></expr></init></decl>;</decl_stmt>
</unit>
