<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="0014eb1a11507ca8fb5ca2e77e712caac022c0d4.h"><comment type="block">/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Aaron Leventhal &lt;aaronl@netscape.com&gt; (original author)
 *   Kyle Yuan &lt;kyle.yuan@sun.com&gt;
 *   Alexander Surkov &lt;surkov.alexander@gmail.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__nsXULListboxAccessible_h__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__nsXULListboxAccessible_h__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIAccessibleTable.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsXULMenuAccessible.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsBaseWidgetAccessible.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>nsIWeakReference</name></decl>;</decl_stmt>

<comment type="block">/**
 * nsXULColumnsAccessible are accessible for list and tree columns elements
 * (xul:treecols and xul:listcols).
 */</comment>
<expr_stmt><expr><name>class</name> <name>nsXULColumnsAccessible</name> : <name>public</name> <name>nsAccessibleWrap</name>
<block>{
<expr><name>public</name>:
  <call><name>nsXULColumnsAccessible</name><argument_list>(<argument><expr><name>nsIDOMNode</name>* <name>aDOMNode</name></expr></argument>, <argument><expr><name>nsIWeakReference</name>* <name>aShell</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// nsAccessible</comment>
  <expr><name>virtual</name> <name>nsresult</name> <call><name>GetRoleInternal</name><argument_list>(<argument><expr><name>PRUint32</name> *<name>aRole</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>virtual</name> <name>nsresult</name> <call><name>GetStateInternal</name><argument_list>(<argument><expr><name>PRUint32</name> *<name>aState</name></expr></argument>, <argument><expr><name>PRUint32</name> *<name>aExtraState</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<comment type="block">/**
 * nsXULColumnAccessible are accessibles for list and tree column elements
 * (xul:listcol and xul:treecol).
 */</comment>
<expr_stmt><expr><name>class</name> <name>nsXULColumnItemAccessible</name> : <name>public</name> <name>nsLeafAccessible</name>
<block>{
<expr><name>public</name>:
  <call><name>nsXULColumnItemAccessible</name><argument_list>(<argument><expr><name>nsIDOMNode</name>* <name>aDOMNode</name></expr></argument>, <argument><expr><name>nsIWeakReference</name>* <name>aShell</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// nsIAccessible</comment>
  <expr><name>NS_IMETHOD</name> <call><name>GetNumActions</name><argument_list>(<argument><expr><name>PRUint8</name> *<name>aNumActions</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>NS_IMETHOD</name> <macro><name>GetActionName</name><argument_list>(<argument>PRUint8 aIndex</argument>, <argument>nsAString&amp; aName</argument>)</argument_list></macro></expr>;
  <expr><name>NS_IMETHOD</name> <macro><name>DoAction</name><argument_list>(<argument>PRUint8 aIndex</argument>)</argument_list></macro></expr>;

  <comment type="line">// nsAccessible</comment>
  <expr><name>virtual</name> <name>nsresult</name> <call><name>GetRoleInternal</name><argument_list>(<argument><expr><name>PRUint32</name> *<name>aRole</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>virtual</name> <name>nsresult</name> <call><name>GetStateInternal</name><argument_list>(<argument><expr><name>PRUint32</name> *<name>aState</name></expr></argument>, <argument><expr><name>PRUint32</name> *<name>aExtraState</name></expr></argument>)</argument_list></call></expr>;

  enum <expr><block>{ <expr><name>eAction_Click</name> = 0</expr> }</block></expr>;
}</block></expr>;</expr_stmt>

<comment type="block">/*
 * A class the represents the XUL Listbox widget.
 */</comment>
<expr_stmt><expr><name>class</name> <name>nsXULListboxAccessible</name> : <name>public</name> <name>nsXULSelectableAccessible</name></expr>,
                               <expr><name>public</name> <name>nsIAccessibleTable</name>
<block>{
<expr><name>public</name>:
  <call><name>nsXULListboxAccessible</name><argument_list>(<argument><expr><name>nsIDOMNode</name>* <name>aDOMNode</name></expr></argument>, <argument><expr><name>nsIWeakReference</name>* <name>aShell</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>virtual</name> ~<macro><name>nsXULListboxAccessible</name><argument_list>()</argument_list></macro> <block>{}</block>

  <name>NS_DECL_ISUPPORTS_INHERITED</name>
  <name>NS_DECL_NSIACCESSIBLETABLE</name>

  <comment type="line">// nsIAccessible</comment>
  <name>NS_IMETHOD</name> <call><name>GetValue</name><argument_list>(<argument><expr><name>nsAString</name>&amp; <name>aValue</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// nsAccessible</comment>
  <expr><name>virtual</name> <name>nsresult</name> <call><name>GetRoleInternal</name><argument_list>(<argument><expr><name>PRUint32</name> *<name>aRole</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>virtual</name> <name>nsresult</name> <call><name>GetStateInternal</name><argument_list>(<argument><expr><name>PRUint32</name> *<name>aState</name></expr></argument>, <argument><expr><name>PRUint32</name> *<name>aExtraState</name></expr></argument>)</argument_list></call></expr>;

<expr><name>protected</name>:
  <name>PRBool</name> <call><name>IsMulticolumn</name><argument_list>()</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<comment type="block">/**
  * Listitems -- used in listboxes 
  */</comment>
<expr_stmt><expr><name>class</name> <name>nsXULListitemAccessible</name> : <name>public</name> <name>nsXULMenuitemAccessible</name>
<block>{
<expr><name>public</name>:
  enum <block>{ <expr><name>eAction_Click</name> = 0</expr> }</block></expr>;

  <expr><name>NS_DECL_ISUPPORTS_INHERITED</name>
  
  <call><name>nsXULListitemAccessible</name><argument_list>(<argument><expr><name>nsIDOMNode</name>* <name>aDOMNode</name></expr></argument>, <argument><expr><name>nsIWeakReference</name>* <name>aShell</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>virtual</name> ~<macro><name>nsXULListitemAccessible</name><argument_list>()</argument_list></macro> <block>{}</block>

  <comment type="line">// nsIAccessible</comment>
  <name>NS_IMETHOD</name> <macro><name>GetActionName</name><argument_list>(<argument>PRUint8 index</argument>, <argument>nsAString&amp; aName</argument>)</argument_list></macro></expr>;
  <comment type="line">// Don't use XUL menuitems's description attribute</comment>
  <expr><name>NS_IMETHOD</name> <macro><name>GetDescription</name><argument_list>(<argument>nsAString&amp; aDesc</argument>)</argument_list></macro> <block>{ <return>return <expr><name>nsAccessibleWrap</name>::<call><name>GetDescription</name><argument_list>(<argument><expr><name>aDesc</name></expr></argument>)</argument_list></call></expr>;</return></block></expr> }</block>

  <comment type="line">// nsAccessible</comment>
  <name>virtual</name> <name>nsresult</name> <call><name>GetNameInternal</name><argument_list>(<argument><expr><name>nsAString</name>&amp; <name>aName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>GetRoleInternal</name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>aRole</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>GetStateInternal</name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>aState</name></decl></param>, <param><decl><type><name>PRUint32</name> *</type><name>aExtraState</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>GetPositionAndSizeInternal</name><parameter_list>(<param><decl><type><name>PRInt32</name> *</type><name>aPosInSet</name></decl></param>,
                                          <param><decl><type><name>PRInt32</name> *</type><name>aSetSize</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>PRBool</name></type> <name>GetAllowsAnonChildAccessibles</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
  <expr_stmt><expr><name>already_AddRefed</name>&lt;<name>nsIAccessible</name>&gt; <call><name>GetListAccessible</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>mIsCheckbox</name></decl>;</decl_stmt>
};

<comment type="block">/**
 * Class represents xul:listcell.
 */</comment>
<expr_stmt><expr><name>class</name> <name>nsXULListCellAccessible</name> : <name>public</name> <name>nsHyperTextAccessibleWrap</name></expr>,
                                <expr><name>public</name> <name>nsIAccessibleTableCell</name>
<block>{
<expr><name>public</name>:
  <call><name>nsXULListCellAccessible</name><argument_list>(<argument><expr><name>nsIDOMNode</name>* <name>aDOMNode</name></expr></argument>, <argument><expr><name>nsIWeakReference</name>* <name>aShell</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// nsISupports</comment>
  <expr><name>NS_DECL_ISUPPORTS_INHERITED</name>

  <comment type="line">// nsIAccessibleTableCell</comment>
  <name>NS_DECL_NSIACCESSIBLETABLECELL</name>

  <comment type="line">// nsAccessible</comment>
  <name>virtual</name> <name>nsresult</name> <call><name>GetAttributesInternal</name><argument_list>(<argument><expr><name>nsIPersistentProperties</name> *<name>aAttributes</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>virtual</name> <name>nsresult</name> <call><name>GetRoleInternal</name><argument_list>(<argument><expr><name>PRUint32</name> *<name>aRole</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
