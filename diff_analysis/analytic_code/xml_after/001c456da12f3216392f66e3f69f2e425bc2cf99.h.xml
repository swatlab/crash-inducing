<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="001c456da12f3216392f66e3f69f2e425bc2cf99.h"><comment type="block">/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: set ts=4 sw=4 et tw=80:
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla browser.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications, Inc.
 * Portions created by the Initial Developer are Copyright (C) 1999
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Travis Bogard &lt;travis@netscape.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>nsDocShell_h__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nsDocShell_h__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMNode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMNodeList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIContentViewer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefBranch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsInterfaceHashtable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsITimer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShellTreeItem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShellTreeNode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIBaseWindow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScrollable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsITextScroll.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShellTreeOwner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIContentViewerContainer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDeviceContext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDocLoader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIURILoader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIEditorDocShell.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsWeakReference.h"</cpp:file></cpp:include>

<comment type="line">// Local Includes</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDSURIContentListener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDocShellEditorData.h"</cpp:file></cpp:include>

<comment type="line">// Helper Classes</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPoint.h"</cpp:file></cpp:include> <comment type="line">// mCurrent/mDefaultScrollbarPreferences</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAutoPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsThreadUtils.h"</cpp:file></cpp:include>

<comment type="line">// Threshold value in ms for META refresh based redirects</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REFRESH_REDIRECT_TIMER</name></cpp:macro> <cpp:value>15000</cpp:value></cpp:define>

<comment type="line">// Interfaces Needed</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocumentCharsetInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocCharset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIGlobalHistory2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIInterfaceRequestor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIInterfaceRequestorUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrompt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIRefreshURI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptGlobalObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptGlobalObjectOwner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISHistory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsILayoutHistoryState.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIStringBundle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISupportsArray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIWebNavigation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIWebPageDescriptor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIWebProgressListener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISHContainer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShellLoadInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShellHistory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIURIFixup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIWebBrowserFind.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIHttpChannel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDocShellTransferableHooks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIAuthPromptProvider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISecureBrowserUI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIObserver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDocShellLoadTypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPIDOMEventTarget.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsILoadContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIWidget.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIWebShellServices.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsILinkHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIClipboardCommands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsICommandManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCRT.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>nsDocShell</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>nsIController</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>OnLinkClickEvent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>nsIScrollableFrame</name></decl>;</decl_stmt>

<comment type="block">/* load commands were moved to nsIDocShell.h */</comment>
<comment type="block">/* load types were moved to nsDocShellLoadTypes.h */</comment>

<comment type="block">/* internally used ViewMode types */</comment>
<enum>enum <name>ViewMode</name> <block>{
    <decl><name>viewNormal</name> <init>= <expr>0x0</expr></init></decl>,
    <decl><name>viewSource</name> <init>= <expr>0x1</expr></init></decl>
}</block>;</enum>

<comment type="line">//*****************************************************************************</comment>
<comment type="line">//***    nsRefreshTimer</comment>
<comment type="line">//*****************************************************************************</comment>

<expr_stmt><expr><name>class</name> <name>nsRefreshTimer</name> : <name>public</name> <name>nsITimerCallback</name>
<block>{
<expr><name>public</name>:
    <call><name>nsRefreshTimer</name><argument_list>()</argument_list></call></expr>;

    <expr><name>NS_DECL_ISUPPORTS</name>
    <name>NS_DECL_NSITIMERCALLBACK</name>

    <name>PRInt32</name> <macro><name>GetDelay</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>mDelay</name></expr> ;</return></block></expr>}</block>

    <name>nsRefPtr</name>&lt;<name>nsDocShell</name>&gt;  <name>mDocShell</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIURI</name>&gt;      <name>mURI</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PRInt32</name></type>               <name>mDelay</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>          <name>mRepeat</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>          <name>mMetaRefresh</name></decl>;</decl_stmt>
    
<label><name>protected</name>:</label>
    <expr_stmt><expr><name>virtual</name> ~<call><name>nsRefreshTimer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
};

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_DOCSHELL_REQUEST_REJECTED</name></cpp:macro>  <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_GENERAL,1001)</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{
    <decl><name>eCharsetReloadInit</name></decl>,
    <decl><name>eCharsetReloadRequested</name></decl>,
    <decl><name>eCharsetReloadStopOrigional</name></decl>
}</block></enum></type> <name>eCharsetReloadState</name>;</typedef>

<comment type="line">//*****************************************************************************</comment>
<comment type="line">//***    nsDocShell</comment>
<comment type="line">//*****************************************************************************</comment>

<expr_stmt><expr><name>class</name> <name>nsDocShell</name> : <name>public</name> <name>nsDocLoader</name></expr>,
                   <expr><name>public</name> <name>nsIDocShell</name></expr>,
                   <expr><name>public</name> <name>nsIDocShellTreeItem</name></expr>, 
                   <expr><name>public</name> <name>nsIDocShellHistory</name></expr>,
                   <expr><name>public</name> <name>nsIWebNavigation</name></expr>,
                   <expr><name>public</name> <name>nsIBaseWindow</name></expr>, 
                   <expr><name>public</name> <name>nsIScrollable</name></expr>, 
                   <expr><name>public</name> <name>nsITextScroll</name></expr>, 
                   <expr><name>public</name> <name>nsIDocCharset</name></expr>, 
                   <expr><name>public</name> <name>nsIContentViewerContainer</name></expr>,
                   <expr><name>public</name> <name>nsIScriptGlobalObjectOwner</name></expr>,
                   <expr><name>public</name> <name>nsIRefreshURI</name></expr>,
                   <expr><name>public</name> <name>nsIWebProgressListener</name></expr>,
                   <expr><name>public</name> <name>nsIEditorDocShell</name></expr>,
                   <expr><name>public</name> <name>nsIWebPageDescriptor</name></expr>,
                   <expr><name>public</name> <name>nsIAuthPromptProvider</name></expr>,
                   <expr><name>public</name> <name>nsIObserver</name></expr>,
                   <expr><name>public</name> <name>nsILoadContext</name></expr>,
                   <expr><name>public</name> <name>nsIWebShellServices</name></expr>,
                   <expr><name>public</name> <name>nsILinkHandler</name></expr>,
                   <expr><name>public</name> <name>nsIClipboardCommands</name>
<block>{
    <expr><name>friend</name> <name>class</name> <name>nsDSURIContentListener</name></expr>;

<expr><name>public</name>:
    <comment type="line">// Object Management</comment>
    <call><name>nsDocShell</name><argument_list>()</argument_list></call></expr>;

    <expr><name>NS_DECL_AND_IMPL_ZEROING_OPERATOR_NEW</name>

    <name>virtual</name> <name>nsresult</name> <call><name>Init</name><argument_list>()</argument_list></call></expr>;

    <expr><name>NS_DECL_ISUPPORTS_INHERITED</name>

    <name>NS_DECL_NSIDOCSHELL</name>
    <name>NS_DECL_NSIDOCSHELLTREEITEM</name>
    <name>NS_DECL_NSIDOCSHELLTREENODE</name>
    <name>NS_DECL_NSIDOCSHELLHISTORY</name>
    <name>NS_DECL_NSIWEBNAVIGATION</name>
    <name>NS_DECL_NSIBASEWINDOW</name>
    <name>NS_DECL_NSISCROLLABLE</name>
    <name>NS_DECL_NSITEXTSCROLL</name>
    <name>NS_DECL_NSIDOCCHARSET</name>
    <name>NS_DECL_NSIINTERFACEREQUESTOR</name>
    <name>NS_DECL_NSIWEBPROGRESSLISTENER</name>
    <name>NS_DECL_NSIREFRESHURI</name>
    <name>NS_DECL_NSICONTENTVIEWERCONTAINER</name>
    <name>NS_DECL_NSIEDITORDOCSHELL</name>
    <name>NS_DECL_NSIWEBPAGEDESCRIPTOR</name>
    <name>NS_DECL_NSIAUTHPROMPTPROVIDER</name>
    <name>NS_DECL_NSIOBSERVER</name>
    <name>NS_DECL_NSILOADCONTEXT</name>
    <name>NS_DECL_NSICLIPBOARDCOMMANDS</name>
    <name>NS_DECL_NSIWEBSHELLSERVICES</name>

    <name>NS_IMETHOD</name> <macro><name>Stop</name><argument_list>()</argument_list></macro> <block>{
        <comment type="line">// Need this here because otherwise nsIWebNavigation::Stop</comment>
        <comment type="line">// overrides the docloader's Stop()</comment>
        <return>return <expr><name>nsDocLoader</name>::<call><name>Stop</name><argument_list>()</argument_list></call></expr>;</return></block></expr>
    }</block>

    <comment type="line">// Need to implement (and forward) nsISecurityEventSink, because</comment>
    <comment type="line">// nsIWebProgressListener has methods with identical names...</comment>
    <macro><name>NS_FORWARD_NSISECURITYEVENTSINK</name><argument_list>(<argument>nsDocLoader::</argument>)</argument_list></macro>

    <comment type="line">// nsILinkHandler</comment>
    <name>NS_IMETHOD</name> <call><name>OnLinkClick</name><argument_list>(<argument><expr><name>nsIContent</name>* <name>aContent</name></expr></argument>,
        <argument><expr><name>nsIURI</name>* <name>aURI</name></expr></argument>,
        <argument><expr>const <name>PRUnichar</name>* <name>aTargetSpec</name></expr></argument>,
        <argument><expr><name>nsIInputStream</name>* <name>aPostDataStream</name> = 0</expr></argument>,
        <argument><expr><name>nsIInputStream</name>* <name>aHeadersDataStream</name> = 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>NS_IMETHOD</name></type> <name>OnLinkClickSync</name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type> <name>aContent</name></decl></param>,
        <param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>,
        <param><decl><type><specifier>const</specifier> <name>PRUnichar</name>*</type> <name>aTargetSpec</name></decl></param>,
        <param><decl><type><name>nsIInputStream</name>*</type> <name>aPostDataStream</name> <init>= <expr>0</expr></init></decl></param>,
        <name>nsIInputStream</name>* <name>aHeadersDataStream</name> = 0,
        <name>nsIDocShell</name>** <name>aDocShell</name> = 0,
        <name>nsIRequest</name>** <name>aRequest</name> = 0)</parameter_list>;</function_decl>
    <function_decl><type><name>NS_IMETHOD</name></type> <name>OnOverLink</name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type> <name>aContent</name></decl></param>,
        <param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>,
        <param><decl><type><specifier>const</specifier> <name>PRUnichar</name>*</type> <name>aTargetSpec</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>NS_IMETHOD</name></type> <name>OnLeaveLink</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>nsDocShellInfoLoadType</name></type> <name>ConvertLoadTypeToDocShellLoadInfo</name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aLoadType</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>PRUint32</name></type> <name>ConvertDocShellLoadInfoToLoadType</name><parameter_list>(<param><decl><type><name>nsDocShellInfoLoadType</name></type> <name>aDocShellLoadType</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// nsIScriptGlobalObjectOwner methods</comment>
    <function_decl><type><name>virtual</name> <name>nsIScriptGlobalObject</name>*</type> <name>GetScriptGlobalObject</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// Restores a cached presentation from history (mLSHE).</comment>
    <comment type="line">// This method swaps out the content viewer and simulates loads for</comment>
    <comment type="line">// subframes.  It then simulates the completion of the toplevel load.</comment>
    <function_decl><type><name>nsresult</name></type> <name>RestoreFromHistory</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// Perform a URI load from a refresh timer.  This is just like the</comment>
    <comment type="line">// ForceRefreshURI method on nsIRefreshURI, but makes sure to take</comment>
    <comment type="line">// the timer involved out of mRefreshURIList if it's there.</comment>
    <comment type="line">// aTimer must not be null.</comment>
    <function_decl><type><name>nsresult</name></type> <name>ForceRefreshURIFromTimer</name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type> <name>aURI</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aDelay</name></decl></param>,
                                      <param><decl><type><name>PRBool</name></type> <name>aMetaRefresh</name></decl></param>, <param><decl><type><name>nsITimer</name>*</type> <name>aTimer</name></decl></param>)</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>OnLinkClickEvent</name></decl>;</decl_stmt>

<label><name>protected</name>:</label>
    <comment type="line">// Object Management</comment>
    <expr_stmt><expr><name>virtual</name> ~<call><name>nsDocShell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>DestroyChildren</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// Content Viewer Management</comment>
    <function_decl><type><name>NS_IMETHOD</name></type> <name>EnsureContentViewer</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="line">// aPrincipal can be passed in if the caller wants.  If null is</comment>
    <comment type="line">// passed in, the about:blank principal will end up being used.</comment>
    <function_decl><type><name>nsresult</name></type> <name>CreateAboutBlankContentViewer</name><parameter_list>(<param><decl><type><name>nsIPrincipal</name>*</type> <name>aPrincipal</name></decl></param>,
                                           <param><decl><type><name>nsIURI</name>*</type> <name>aBaseURI</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>NS_IMETHOD</name></type> <name>CreateContentViewer</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>aContentType</name></decl></param>, 
        <param><decl><type><name>nsIRequest</name> *</type> <name>request</name></decl></param>, <param><decl><type><name>nsIStreamListener</name> **</type> <name>aContentHandler</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>NS_IMETHOD</name></type> <name>NewContentViewerObj</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>aContentType</name></decl></param>, 
        <param><decl><type><name>nsIRequest</name> *</type> <name>request</name></decl></param>, <param><decl><type><name>nsILoadGroup</name> *</type> <name>aLoadGroup</name></decl></param>, 
        <param><decl><type><name>nsIStreamListener</name> **</type> <name>aContentHandler</name></decl></param>, <param><decl><type><name>nsIContentViewer</name> **</type> <name>aViewer</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>NS_IMETHOD</name></type> <name>SetupNewViewer</name><parameter_list>(<param><decl><type><name>nsIContentViewer</name> *</type> <name>aNewViewer</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>SetupReferrerFromChannel</name><parameter_list>(<param><decl><type><name>nsIChannel</name> *</type> <name>aChannel</name></decl></param>)</parameter_list>;</function_decl>
    
    <function_decl><type><name>NS_IMETHOD</name></type> <name>GetEldestPresContext</name><parameter_list>(<param><decl><type><name>nsPresContext</name>**</type> <name>aPresContext</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Get the principal that we'll set on the channel if we're inheriting.  If</comment>
    <comment type="line">// aConsiderCurrentDocument is true, we try to use the current document if</comment>
    <comment type="line">// at all possible.  If that fails, we fall back on the parent document.</comment>
    <comment type="line">// If that fails too, we force creation of a content viewer and use the</comment>
    <comment type="line">// resulting principal.  If aConsiderCurrentDocument is false, we just look</comment>
    <comment type="line">// at the parent.</comment>
    <function_decl><type><name>nsIPrincipal</name>*</type> <name>GetInheritedPrincipal</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aConsiderCurrentDocument</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// True if when loading aURI into this docshell, the channel should look</comment>
    <comment type="line">// for an appropriate application cache.</comment>
    <function_decl><type><name>PRBool</name></type> <name>ShouldCheckAppCache</name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type> <name>aURI</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Actually open a channel and perform a URI load.  Note: whatever owner is</comment>
    <comment type="line">// passed to this function will be set on the channel.  Callers who wish to</comment>
    <comment type="line">// not have an owner on the channel should just pass null.</comment>
    <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>DoURILoad</name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type> <name>aURI</name></decl></param>,
                               <param><decl><type><name>nsIURI</name> *</type> <name>aReferrer</name></decl></param>,
                               <param><decl><type><name>PRBool</name></type> <name>aSendReferrer</name></decl></param>,
                               <param><decl><type><name>nsISupports</name> *</type> <name>aOwner</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>aTypeHint</name></decl></param>,
                               <param><decl><type><name>nsIInputStream</name> *</type> <name>aPostData</name></decl></param>,
                               <param><decl><type><name>nsIInputStream</name> *</type> <name>aHeadersData</name></decl></param>,
                               <param><decl><type><name>PRBool</name></type> <name>firstParty</name></decl></param>,
                               <param><decl><type><name>nsIDocShell</name> **</type> <name>aDocShell</name></decl></param>,
                               <param><decl><type><name>nsIRequest</name> **</type> <name>aRequest</name></decl></param>,
                               <param><decl><type><name>PRBool</name></type> <name>aIsNewWindowTarget</name></decl></param>,
                               <param><decl><type><name>PRBool</name></type> <name>aBypassClassifier</name></decl></param>,
                               <param><decl><type><name>PRBool</name></type> <name>aForceAllowCookies</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>NS_IMETHOD</name></type> <name>AddHeadersToChannel</name><parameter_list>(<param><decl><type><name>nsIInputStream</name> *</type> <name>aHeadersData</name></decl></param>, 
                                  <param><decl><type><name>nsIChannel</name> *</type> <name>aChannel</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>DoChannelLoad</name><parameter_list>(<param><decl><type><name>nsIChannel</name> *</type> <name>aChannel</name></decl></param>,
                                   <param><decl><type><name>nsIURILoader</name> *</type> <name>aURILoader</name></decl></param>,
                                   <param><decl><type><name>PRBool</name></type> <name>aBypassClassifier</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>nsresult</name></type> <name>ScrollIfAnchor</name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type> <name>aURI</name></decl></param>, <param><decl><type><name>PRBool</name> *</type> <name>aWasAnchor</name></decl></param>,
                            <param><decl><type><name>PRUint32</name></type> <name>aLoadType</name></decl></param>, <param><decl><type><name>nscoord</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>nscoord</name> *</type><name>cy</name></decl></param>,
                            <param><decl><type><name>PRBool</name> *</type> <name>aDoHashchange</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Tries to stringify a given variant by converting it to JSON.  This only</comment>
    <comment type="line">// works if the variant is backed by a JSVal.</comment>
    <function_decl><type><name>nsresult</name></type> <name>StringifyJSValVariant</name><parameter_list>(<param><decl><type><name>nsIVariant</name> *</type><name>aData</name></decl></param>, <param><decl><type><name>nsAString</name> &amp;</type><name>aResult</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Returns PR_TRUE if would have called FireOnLocationChange,</comment>
    <comment type="line">// but did not because aFireOnLocationChange was false on entry.</comment>
    <comment type="line">// In this case it is the caller's responsibility to ensure</comment>
    <comment type="line">// FireOnLocationChange is called.</comment>
    <comment type="line">// In all other cases PR_FALSE is returned.</comment>
    <function_decl><type><name>PRBool</name></type> <name>OnLoadingSite</name><parameter_list>(<param><decl><type><name>nsIChannel</name> *</type> <name>aChannel</name></decl></param>,
                         <param><decl><type><name>PRBool</name></type> <name>aFireOnLocationChange</name></decl></param>,
                         <param><decl><type><name>PRBool</name></type> <name>aAddToGlobalHistory</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Returns PR_TRUE if would have called FireOnLocationChange,</comment>
    <comment type="line">// but did not because aFireOnLocationChange was false on entry.</comment>
    <comment type="line">// In this case it is the caller's responsibility to ensure</comment>
    <comment type="line">// FireOnLocationChange is called.</comment>
    <comment type="line">// In all other cases PR_FALSE is returned.</comment>
    <comment type="line">// Either aChannel or aOwner must be null.  If aChannel is</comment>
    <comment type="line">// present, the owner should be gotten from it.</comment>
    <function_decl><type><name>PRBool</name></type> <name>OnNewURI</name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type> <name>aURI</name></decl></param>, <param><decl><type><name>nsIChannel</name> *</type> <name>aChannel</name></decl></param>, <param><decl><type><name>nsISupports</name>*</type> <name>aOwner</name></decl></param>,
                    <param><decl><type><name>PRUint32</name></type> <name>aLoadType</name></decl></param>,
                    <param><decl><type><name>PRBool</name></type> <name>aFireOnLocationChange</name></decl></param>,
                    <param><decl><type><name>PRBool</name></type> <name>aAddToGlobalHistory</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetReferrerURI</name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type> <name>aURI</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Session History</comment>
    <function_decl><type><name>virtual</name> <name>PRBool</name></type> <name>ShouldAddToSessionHistory</name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type> <name>aURI</name></decl></param>)</parameter_list>;</function_decl>
    <comment type="line">// Either aChannel or aOwner must be null.  If aChannel is</comment>
    <comment type="line">// present, the owner should be gotten from it.</comment>
    <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>AddToSessionHistory</name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type> <name>aURI</name></decl></param>, <param><decl><type><name>nsIChannel</name> *</type> <name>aChannel</name></decl></param>,
                                         <param><decl><type><name>nsISupports</name>*</type> <name>aOwner</name></decl></param>,
                                         <param><decl><type><name>nsISHEntry</name> **</type> <name>aNewEntry</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>nsresult</name></type> <name>DoAddChildSHEntry</name><parameter_list>(<param><decl><type><name>nsISHEntry</name>*</type> <name>aNewEntry</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aChildOffset</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>NS_IMETHOD</name></type> <name>LoadHistoryEntry</name><parameter_list>(<param><decl><type><name>nsISHEntry</name> *</type> <name>aEntry</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLoadType</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>NS_IMETHOD</name></type> <name>PersistLayoutHistoryState</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// Clone a session history tree for subframe navigation.</comment>
    <comment type="line">// The tree rooted at |aSrcEntry| will be cloned into |aDestEntry|, except</comment>
    <comment type="line">// for the entry with id |aCloneID|, which will be replaced with</comment>
    <comment type="line">// |aReplaceEntry|.  |aSrcShell| is a (possibly null) docshell which</comment>
    <comment type="line">// corresponds to |aSrcEntry| via its mLSHE or mOHE pointers, and will</comment>
    <comment type="line">// have that pointer updated to point to the cloned history entry.</comment>
    <function_decl><type><specifier>static</specifier> <name>nsresult</name></type> <name>CloneAndReplace</name><parameter_list>(<param><decl><type><name>nsISHEntry</name> *</type><name>aSrcEntry</name></decl></param>,
                                    <param><decl><type><name>nsDocShell</name> *</type><name>aSrcShell</name></decl></param>,
                                    <param><decl><type><name>PRUint32</name></type> <name>aCloneID</name></decl></param>,
                                    <param><decl><type><name>nsISHEntry</name> *</type><name>aReplaceEntry</name></decl></param>,
                                    <param><decl><type><name>nsISHEntry</name> **</type><name>aDestEntry</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Child-walking callback for CloneAndReplace</comment>
    <function_decl><type><specifier>static</specifier> <name>nsresult</name></type> <name>CloneAndReplaceChild</name><parameter_list>(<param><decl><type><name>nsISHEntry</name> *</type><name>aEntry</name></decl></param>,
                                         <param><decl><type><name>nsDocShell</name> *</type><name>aShell</name></decl></param>,
                                         <param><decl><type><name>PRInt32</name></type> <name>aChildIndex</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aData</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>nsresult</name></type> <name>GetRootSessionHistory</name><parameter_list>(<param><decl><type><name>nsISHistory</name> **</type> <name>aReturn</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>nsresult</name></type> <name>GetHttpChannel</name><parameter_list>(<param><decl><type><name>nsIChannel</name> *</type> <name>aChannel</name></decl></param>, <param><decl><type><name>nsIHttpChannel</name> **</type> <name>aReturn</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>PRBool</name></type> <name>ShouldDiscardLayoutState</name><parameter_list>(<param><decl><type><name>nsIHttpChannel</name> *</type> <name>aChannel</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Determine whether this docshell corresponds to the given history entry,</comment>
    <comment type="line">// via having a pointer to it in mOSHE or mLSHE.</comment>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>HasHistoryEntry</name><argument_list>(<argument><expr><name>nsISHEntry</name> *<name>aEntry</name></expr></argument>)</argument_list> const
    <block>{
        <return>return <expr><name>aEntry</name> &amp;&amp; (<name>aEntry</name> == <name>mOSHE</name> || <name>aEntry</name> == <name>mLSHE</name>)</expr>;</return>
    }</block></decl></decl_stmt>

    <comment type="line">// Update any pointers (mOSHE or mLSHE) to aOldEntry to point to aNewEntry</comment>
    <function_decl><type><name>void</name></type> <name>SwapHistoryEntries</name><parameter_list>(<param><decl><type><name>nsISHEntry</name> *</type><name>aOldEntry</name></decl></param>, <param><decl><type><name>nsISHEntry</name> *</type><name>aNewEntry</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Call this method to swap in a new history entry to m[OL]SHE, rather than</comment>
    <comment type="line">// setting it directly.  This completes the navigation in all docshells</comment>
    <comment type="line">// in the case of a subframe navigation.</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>SetHistoryEntry</name><argument_list>(<argument><expr><name>nsCOMPtr</name>&lt;<name>nsISHEntry</name>&gt; *<name>aPtr</name></expr></argument>, <argument><expr><name>nsISHEntry</name> *<name>aEntry</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// Child-walking callback for SetHistoryEntry</comment>
    <function_decl><type><specifier>static</specifier> <name>nsresult</name></type> <name>SetChildHistoryEntry</name><parameter_list>(<param><decl><type><name>nsISHEntry</name> *</type><name>aEntry</name></decl></param>,
                                         <param><decl><type><name>nsDocShell</name> *</type><name>aShell</name></decl></param>,
                                         <param><decl><type><name>PRInt32</name></type> <name>aEntryIndex</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aData</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Callback prototype for WalkHistoryEntries.</comment>
    <comment type="line">// aEntry is the child history entry, aShell is its corresponding docshell,</comment>
    <comment type="line">// aChildIndex is the child's index in its parent entry, and aData is</comment>
    <comment type="line">// the opaque pointer passed to WalkHistoryEntries.</comment>
    <typedef>typedef <function_decl><type><name>nsresult</name></type> (*<name>WalkHistoryEntriesFunc</name>)<parameter_list>(<param><decl><type><name>nsISHEntry</name> *</type><name>aEntry</name></decl></param>,
                                               <param><decl><type><name>nsDocShell</name> *</type><name>aShell</name></decl></param>,
                                               <param><decl><type><name>PRInt32</name></type> <name>aChildIndex</name></decl></param>,
                                               <param><decl><type><name>void</name> *</type><name>aData</name></decl></param>)</parameter_list>;</function_decl></typedef>

    <comment type="line">// For each child of aRootEntry, find the corresponding docshell which is</comment>
    <comment type="line">// a child of aRootShell, and call aCallback.  The opaque pointer aData</comment>
    <comment type="line">// is passed to the callback.</comment>
    <function_decl><type><specifier>static</specifier> <name>nsresult</name></type> <name>WalkHistoryEntries</name><parameter_list>(<param><decl><type><name>nsISHEntry</name> *</type><name>aRootEntry</name></decl></param>,
                                       <param><decl><type><name>nsDocShell</name> *</type><name>aRootShell</name></decl></param>,
                                       <param><decl><type><name>WalkHistoryEntriesFunc</name></type> <name>aCallback</name></decl></param>,
                                       <param><decl><type><name>void</name> *</type><name>aData</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// overridden from nsDocLoader, this provides more information than the</comment>
    <comment type="line">// normal OnStateChange with flags STATE_REDIRECTING</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>OnRedirectStateChange</name><parameter_list>(<param><decl><type><name>nsIChannel</name>*</type> <name>aOldChannel</name></decl></param>,
                                       <param><decl><type><name>nsIChannel</name>*</type> <name>aNewChannel</name></decl></param>,
                                       <param><decl><type><name>PRUint32</name></type> <name>aRedirectFlags</name></decl></param>,
                                       <param><decl><type><name>PRUint32</name></type> <name>aStateFlags</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Global History</comment>

    <function_decl><type><name>nsresult</name></type> <name>AddToGlobalHistory</name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type> <name>aURI</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aRedirect</name></decl></param>,
                                <param><decl><type><name>nsIChannel</name> *</type> <name>aChannel</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>nsresult</name></type> <name>AddToGlobalHistory</name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type> <name>aURI</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aRedirect</name></decl></param>,
                                <param><decl><type><name>nsIURI</name> *</type> <name>aReferrer</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Helper Routines</comment>
    <function_decl><type><name>nsresult</name></type>   <name>ConfirmRepost</name><parameter_list>(<param><decl><type><name>PRBool</name> *</type> <name>aRepost</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>NS_IMETHOD</name></type> <name>GetPromptAndStringBundle</name><parameter_list>(<param><decl><type><name>nsIPrompt</name> **</type> <name>aPrompt</name></decl></param>,
        <param><decl><type><name>nsIStringBundle</name> **</type> <name>aStringBundle</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>NS_IMETHOD</name></type> <name>GetChildOffset</name><parameter_list>(<param><decl><type><name>nsIDOMNode</name> *</type> <name>aChild</name></decl></param>, <param><decl><type><name>nsIDOMNode</name> *</type> <name>aParent</name></decl></param>,
        <param><decl><type><name>PRInt32</name> *</type> <name>aOffset</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>nsIScrollableFrame</name>*</type> <name>GetRootScrollFrame</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>NS_IMETHOD</name></type> <name>EnsureScriptEnvironment</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>NS_IMETHOD</name></type> <name>EnsureEditorData</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>nsresult</name></type>   <name>EnsureTransferableHookData</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>NS_IMETHOD</name></type> <name>EnsureFind</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>nsresult</name></type>   <name>RefreshURIFromQueue</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>NS_IMETHOD</name></type> <name>DisplayLoadError</name><parameter_list>(<param><decl><type><name>nsresult</name></type> <name>aError</name></decl></param>, <param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>aURL</name></decl></param>,
                                <param><decl><type><name>nsIChannel</name>*</type> <name>aFailedChannel</name> <init>= <expr><name>nsnull</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>NS_IMETHOD</name></type> <name>LoadErrorPage</name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>aURL</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aErrorPage</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>aErrorType</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>aDescription</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aCSSClass</name></decl></param>,
                             <param><decl><type><name>nsIChannel</name>*</type> <name>aFailedChannel</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>PRBool</name></type> <name>IsNavigationAllowed</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aDisplayPrintErrorDialog</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>PRBool</name></type> <name>IsPrintingOrPP</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aDisplayErrorDialog</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>nsresult</name></type> <name>SetBaseUrlForWyciwyg</name><parameter_list>(<param><decl><type><name>nsIContentViewer</name> *</type> <name>aContentViewer</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><specifier>static</specifier>  <specifier>inline</specifier>  <name>PRUint32</name></type>
    <name>PRTimeToSeconds</name><parameter_list>(<param><decl><type><name>PRTime</name></type> <name>t_usec</name></decl></param>)</parameter_list>
    <block>{
      <decl_stmt><decl><type><name>PRTime</name></type> <name>usec_per_sec</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>PRUint32</name></type> <name>t_sec</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>LL_I2L</name><argument_list>(<argument><expr><name>usec_per_sec</name></expr></argument>, <argument><expr><name>PR_USEC_PER_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>LL_DIV</name><argument_list>(<argument><expr><name>t_usec</name></expr></argument>, <argument><expr><name>t_usec</name></expr></argument>, <argument><expr><name>usec_per_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>LL_L2I</name><argument_list>(<argument><expr><name>t_sec</name></expr></argument>, <argument><expr><name>t_usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>t_sec</name></expr>;</return>
    }</block></function>

    <function_decl><type><name>PRBool</name></type> <name>IsFrame</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">//</comment>
    <comment type="line">// Helper method that is called when a new document (including any</comment>
    <comment type="line">// sub-documents - ie. frames) has been completely loaded.</comment>
    <comment type="line">//</comment>
    <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>EndPageLoad</name><parameter_list>(<param><decl><type><name>nsIWebProgress</name> *</type> <name>aProgress</name></decl></param>,
                                 <param><decl><type><name>nsIChannel</name> *</type> <name>aChannel</name></decl></param>,
                                 <param><decl><type><name>nsresult</name></type> <name>aResult</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Sets the current document's pending state object to the given SHEntry's</comment>
    <comment type="line">// state object.  The pending state object is eventually given to the page</comment>
    <comment type="line">// in the PopState event.</comment>
    <function_decl><type><name>nsresult</name></type> <name>SetDocPendingStateObj</name><parameter_list>(<param><decl><type><name>nsISHEntry</name> *</type><name>shEntry</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>nsresult</name></type> <name>CheckLoadingPermissions</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// Security checks to prevent frameset spoofing.  See comments at</comment>
    <comment type="line">// implementation sites.</comment>
    <function_decl><type><specifier>static</specifier> <name>PRBool</name></type> <name>CanAccessItem</name><parameter_list>(<param><decl><type><name>nsIDocShellTreeItem</name>*</type> <name>aTargetItem</name></decl></param>,
                                <param><decl><type><name>nsIDocShellTreeItem</name>*</type> <name>aAccessingItem</name></decl></param>,
                                <param><decl><type><name>PRBool</name></type> <name>aConsiderOpener</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>static</specifier> <name>PRBool</name></type> <name>ValidateOrigin</name><parameter_list>(<param><decl><type><name>nsIDocShellTreeItem</name>*</type> <name>aOriginTreeItem</name></decl></param>,
                                 <param><decl><type><name>nsIDocShellTreeItem</name>*</type> <name>aTargetTreeItem</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Returns PR_TRUE if would have called FireOnLocationChange,</comment>
    <comment type="line">// but did not because aFireOnLocationChange was false on entry.</comment>
    <comment type="line">// In this case it is the caller's responsibility to ensure</comment>
    <comment type="line">// FireOnLocationChange is called.</comment>
    <comment type="line">// In all other cases PR_FALSE is returned.</comment>
    <function_decl><type><name>PRBool</name></type> <name>SetCurrentURI</name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>, <param><decl><type><name>nsIRequest</name> *</type><name>aRequest</name></decl></param>,
                         <param><decl><type><name>PRBool</name></type> <name>aFireOnLocationChange</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// The following methods deal with saving and restoring content viewers</comment>
    <comment type="line">// in session history.</comment>

    <comment type="line">// mContentViewer points to the current content viewer associated with</comment>
    <comment type="line">// this docshell.  When loading a new document, the content viewer is</comment>
    <comment type="line">// either destroyed or stored into a session history entry.  To make sure</comment>
    <comment type="line">// that destruction happens in a controlled fashion, a given content viewer</comment>
    <comment type="line">// is always owned in exactly one of these ways:</comment>
    <comment type="line">//   1) The content viewer is active and owned by a docshell's</comment>
    <comment type="line">//      mContentViewer.</comment>
    <comment type="line">//   2) The content viewer is still being displayed while we begin loading</comment>
    <comment type="line">//      a new document.  The content viewer is owned by the _new_</comment>
    <comment type="line">//      content viewer's mPreviousViewer, and has a pointer to the</comment>
    <comment type="line">//      nsISHEntry where it will eventually be stored.  The content viewer</comment>
    <comment type="line">//      has been close()d by the docshell, which detaches the document from</comment>
    <comment type="line">//      the window object.</comment>
    <comment type="line">//   3) The content viewer is cached in session history.  The nsISHEntry</comment>
    <comment type="line">//      has the only owning reference to the content viewer.  The viewer</comment>
    <comment type="line">//      has released its nsISHEntry pointer to prevent circular ownership.</comment>
    <comment type="line">//</comment>
    <comment type="line">// When restoring a content viewer from session history, open() is called</comment>
    <comment type="line">// to reattach the document to the window object.  The content viewer is</comment>
    <comment type="line">// then placed into mContentViewer and removed from the history entry.</comment>
    <comment type="line">// (mContentViewer is put into session history as described above, if</comment>
    <comment type="line">// applicable).</comment>

    <comment type="line">// Determines whether we can safely cache the current mContentViewer in</comment>
    <comment type="line">// session history.  This checks a number of factors such as cache policy,</comment>
    <comment type="line">// pending requests, and unload handlers.</comment>
    <comment type="line">// |aLoadType| should be the load type that will replace the current</comment>
    <comment type="line">// presentation.  |aNewRequest| should be the request for the document to</comment>
    <comment type="line">// be loaded in place of the current document, or null if such a request</comment>
    <comment type="line">// has not been created yet. |aNewDocument| should be the document that will</comment>
    <comment type="line">// replace the current document.</comment>
    <function_decl><type><name>PRBool</name></type> <name>CanSavePresentation</name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aLoadType</name></decl></param>,
                               <param><decl><type><name>nsIRequest</name> *</type><name>aNewRequest</name></decl></param>,
                               <param><decl><type><name>nsIDocument</name> *</type><name>aNewDocument</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Captures the state of the supporting elements of the presentation</comment>
    <comment type="line">// (the "window" object, docshell tree, meta-refresh loads, and security</comment>
    <comment type="line">// state) and stores them on |mOSHE|.</comment>
    <function_decl><type><name>nsresult</name></type> <name>CaptureState</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// Begin the toplevel restore process for |aSHEntry|.</comment>
    <comment type="line">// This simulates a channel open, and defers the real work until</comment>
    <comment type="line">// RestoreFromHistory is called from a PLEvent.</comment>
    <function_decl><type><name>nsresult</name></type> <name>RestorePresentation</name><parameter_list>(<param><decl><type><name>nsISHEntry</name> *</type><name>aSHEntry</name></decl></param>, <param><decl><type><name>PRBool</name> *</type><name>aRestoring</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Call BeginRestore(nsnull, PR_FALSE) for each child of this shell.</comment>
    <function_decl><type><name>nsresult</name></type> <name>BeginRestoreChildren</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// Method to get our current position and size without flushing</comment>
    <function_decl><type><name>void</name></type> <name>DoGetPositionAndSize</name><parameter_list>(<param><decl><type><name>PRInt32</name> *</type> <name>x</name></decl></param>, <param><decl><type><name>PRInt32</name> *</type> <name>y</name></decl></param>, <param><decl><type><name>PRInt32</name> *</type> <name>cx</name></decl></param>,
                              <param><decl><type><name>PRInt32</name> *</type> <name>cy</name></decl></param>)</parameter_list>;</function_decl>
    
    <comment type="line">// Check whether aURI should inherit our security context</comment>
    <function_decl><type><specifier>static</specifier> <name>nsresult</name></type> <name>URIInheritsSecurityContext</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>, <param><decl><type><name>PRBool</name>*</type> <name>aResult</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Check whether aURI is a URI_IS_LOCAL_FILE or not</comment>
    <function_decl><type><specifier>static</specifier> <name>PRBool</name></type> <name>URIIsLocalFile</name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Check whether aURI is about:blank</comment>
    <function_decl><type><specifier>static</specifier> <name>PRBool</name></type> <name>IsAboutBlank</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Call this when a URI load is handed to us (via OnLinkClick or</comment>
    <comment type="line">// InternalLoad).  This makes sure that we're not inside unload, or that if</comment>
    <comment type="line">// we are it's still OK to load this URI.</comment>
    <function_decl><type><name>PRBool</name></type> <name>IsOKToLoadURI</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>)</parameter_list>;</function_decl>
    
    <function_decl><type><name>void</name></type> <name>ReattachEditorToWindow</name><parameter_list>(<param><decl><type><name>nsISHEntry</name> *</type><name>aSHEntry</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>nsresult</name></type> <name>GetSessionStorageForURI</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>nsSubstring</name>&amp;</type> <name>aDocumentURI</name></decl></param>,
                                     <param><decl><type><name>PRBool</name></type> <name>create</name></decl></param>,
                                     <param><decl><type><name>nsIDOMStorage</name>**</type> <name>aStorage</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// helpers for executing commands</comment>
    <function_decl><type><name>nsresult</name></type> <name>GetControllerForCommand</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>inCommand</name></decl></param>,
                                     <param><decl><type><name>nsIController</name>**</type> <name>outController</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>nsresult</name></type> <name>IsCommandEnabled</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>inCommand</name></decl></param>, <param><decl><type><name>PRBool</name>*</type> <name>outEnabled</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>nsresult</name></type> <name>DoCommand</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>inCommand</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>nsresult</name></type> <name>EnsureCommandHandler</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>nsIChannel</name>*</type> <name>GetCurrentDocChannel</name><parameter_list>()</parameter_list>;</function_decl>
<label><name>protected</name>:</label>
    <comment type="line">// Override the parent setter from nsDocLoader</comment>
    <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>SetDocLoaderParent</name><parameter_list>(<param><decl><type><name>nsDocLoader</name> *</type> <name>aLoader</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Event type dispatched by RestorePresentation</comment>
    <expr_stmt><expr><name>class</name> <name>RestorePresentationEvent</name> : <name>public</name> <name>nsRunnable</name> <block>{
    <expr><name>public</name>:
        <name>NS_DECL_NSIRUNNABLE</name>
        <call><name>RestorePresentationEvent</name><argument_list>(<argument><expr><name>nsDocShell</name> *<name>ds</name></expr></argument>)</argument_list></call> : <macro><name>mDocShell</name><argument_list>(<argument>ds</argument>)</argument_list></macro> <block>{}</block>
        <name>void</name> <macro><name>Revoke</name><argument_list>()</argument_list></macro> <block>{ <expr><name>mDocShell</name> = <name>nsnull</name></expr>; }</block>
    <name>private</name>:
        <name>nsRefPtr</name>&lt;<name>nsDocShell</name>&gt; <name>mDocShell</name></expr>;
    }</block></expr>;</expr_stmt>

    <comment type="line">// hash of session storages, keyed by domain</comment>
    <expr_stmt><expr><name>nsInterfaceHashtable</name>&lt;<name>nsCStringHashKey</name></expr>, <expr><name>nsIDOMStorage</name>&gt; <name>mStorages</name></expr>;</expr_stmt>

    <comment type="line">// Dimensions of the docshell</comment>
    <decl_stmt><decl><type><name>nsIntRect</name></type>                  <name>mBounds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsString</name></type>                   <name>mName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsString</name></type>                   <name>mTitle</name></decl>;</decl_stmt>

    <comment type="block">/**
     * Content-Type Hint of the most-recently initiated load. Used for
     * session history entries.
     */</comment>
    <decl_stmt><decl><type><name>nsCString</name></type>                  <name>mContentTypeHint</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsIntPoint</name></type>                 <name>mDefaultScrollbarPref</name></decl>;</decl_stmt> <comment type="line">// persistent across doc loads</comment>

    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsISupportsArray</name>&gt; <name>mRefreshURIList</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsISupportsArray</name>&gt; <name>mSavedRefreshURIList</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nsRefPtr</name>&lt;<name>nsDSURIContentListener</name>&gt; <name>mContentListener</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIContentViewer</name>&gt; <name>mContentViewer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIDocumentCharsetInfo</name>&gt; <name>mDocumentCharsetInfo</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIWidget</name>&gt;        <name>mParentWidget</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIPrefBranch</name>&gt;    <name>mPrefs</name></expr>;</expr_stmt>

    <comment type="line">// mCurrentURI should be marked immutable on set if possible.</comment>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIURI</name>&gt;           <name>mCurrentURI</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIURI</name>&gt;           <name>mReferrerURI</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIScriptGlobalObject</name>&gt; <name>mScriptGlobal</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsISHistory</name>&gt;      <name>mSessionHistory</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIGlobalHistory2</name>&gt; <name>mGlobalHistory</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIWebBrowserFind</name>&gt; <name>mFind</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsICommandManager</name>&gt; <name>mCommandManager</name></expr>;</expr_stmt>
    <comment type="line">// Reference to the SHEntry for this docshell until the page is destroyed.</comment>
    <comment type="line">// Somebody give me better name</comment>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsISHEntry</name>&gt;       <name>mOSHE</name></expr>;</expr_stmt>
    <comment type="line">// Reference to the SHEntry for this docshell until the page is loaded</comment>
    <comment type="line">// Somebody give me better name</comment>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsISHEntry</name>&gt;       <name>mLSHE</name></expr>;</expr_stmt>

    <comment type="line">// Holds a weak pointer to a RestorePresentationEvent object if any that</comment>
    <comment type="line">// holds a weak pointer back to us.  We use this pointer to possibly revoke</comment>
    <comment type="line">// the event whenever necessary.</comment>
    <expr_stmt><expr><name>nsRevocableEventPtr</name>&lt;<name>RestorePresentationEvent</name>&gt; <name>mRestorePresentationEvent</name></expr>;</expr_stmt>

    <comment type="line">// Editor data, if this document is designMode or contentEditable.</comment>
    <expr_stmt><expr><name>nsAutoPtr</name>&lt;<name>nsDocShellEditorData</name>&gt; <name>mEditorData</name></expr>;</expr_stmt>

    <comment type="line">// Transferable hooks/callbacks</comment>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIClipboardDragDropHookList</name>&gt; <name>mTransferableHookData</name></expr>;</expr_stmt>

    <comment type="line">// Secure browser UI object</comment>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsISecureBrowserUI</name>&gt; <name>mSecurityUI</name></expr>;</expr_stmt>

    <comment type="line">// The URI we're currently loading.  This is only relevant during the</comment>
    <comment type="line">// firing of a pagehide/unload.  The caller of FirePageHideNotification()</comment>
    <comment type="line">// is responsible for setting it and unsetting it.  It may be null if the</comment>
    <comment type="line">// pagehide/unload is happening for some reason other than just loading a</comment>
    <comment type="line">// new URI.</comment>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIURI</name>&gt;           <name>mLoadingURI</name></expr>;</expr_stmt>

    <comment type="line">// Set in LoadErrorPage from the method argument and used later</comment>
    <comment type="line">// in CreateContentViewer. We have to delay an shistory entry creation</comment>
    <comment type="line">// for which these objects are needed.</comment>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIURI</name>&gt;           <name>mFailedURI</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIChannel</name>&gt;       <name>mFailedChannel</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type>                   <name>mFailedLoadType</name></decl>;</decl_stmt>

    <comment type="line">// WEAK REFERENCES BELOW HERE.</comment>
    <comment type="line">// Note these are intentionally not addrefd.  Doing so will create a cycle.</comment>
    <comment type="line">// For that reasons don't use nsCOMPtr.</comment>

    <decl_stmt><decl><type><name>nsIDocShellTreeOwner</name> *</type>     <name>mTreeOwner</name></decl>;</decl_stmt> <comment type="line">// Weak Reference</comment>
    <decl_stmt><decl><type><name>nsPIDOMEventTarget</name> *</type>       <name>mChromeEventHandler</name></decl>;</decl_stmt> <comment type="line">//Weak Reference</comment>

    <decl_stmt><decl><type><name>eCharsetReloadState</name></type>        <name>mCharsetReloadState</name></decl>;</decl_stmt>

    <comment type="line">// Offset in the parent's child list.</comment>
    <comment type="line">// XXXmats the line above is bogus, it's the offset in the parent's</comment>
    <comment type="line">// child list at the time this docshell was added to it,</comment>
    <comment type="line">// see nsDocShell::AddChild().  It isn't updated after that so if children</comment>
    <comment type="line">// with lower indices are removed this offset is no longer valid to be used</comment>
    <comment type="line">// as an index into the parent's child list (see bug 162283).  It MUST not</comment>
    <comment type="line">// be used for that purpose.  It's used as an index to get/add history</comment>
    <comment type="line">// entries into nsIDocShellHistory, although I very much doubt that it</comment>
    <comment type="line">// can be correct for that purpose as well...</comment>
    <comment type="line">// Try not to use it, we should get rid of it.</comment>
    <decl_stmt><decl><type><name>PRUint32</name></type>                   <name>mChildOffset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type>                   <name>mBusyFlags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type>                   <name>mAppType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type>                   <name>mLoadType</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PRInt32</name></type>                    <name>mMarginWidth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRInt32</name></type>                    <name>mMarginHeight</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRInt32</name></type>                    <name>mItemType</name></decl>;</decl_stmt>

    <comment type="line">// Index into the SHTransaction list, indicating the previous and current</comment>
    <comment type="line">// transaction at the time that this DocShell begins to load</comment>
    <decl_stmt><decl><type><name>PRInt32</name></type>                    <name>mPreviousTransIndex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRInt32</name></type>                    <name>mLoadedTransIndex</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PRPackedBool</name></type>               <name>mAllowSubframes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>               <name>mAllowPlugins</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>               <name>mAllowJavascript</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>               <name>mAllowMetaRedirects</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>               <name>mAllowImages</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>               <name>mAllowDNSPrefetch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>               <name>mCreatingDocument</name></decl>;</decl_stmt> <comment type="line">// (should be) debugging only</comment>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>               <name>mUseErrorPages</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>               <name>mObserveErrorPages</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>               <name>mAllowAuth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>               <name>mAllowKeywordFixup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>               <name>mIsOffScreenBrowser</name></decl>;</decl_stmt>

    <comment type="line">// This boolean is set to true right before we fire pagehide and generally</comment>
    <comment type="line">// unset when we embed a new content viewer.  While it's true no navigation</comment>
    <comment type="line">// is allowed in this docshell.</comment>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>               <name>mFiredUnloadEvent</name></decl>;</decl_stmt>

    <comment type="line">// this flag is for bug #21358. a docshell may load many urls</comment>
    <comment type="line">// which don't result in new documents being created (i.e. a new</comment>
    <comment type="line">// content viewer) we want to make sure we don't call a on load</comment>
    <comment type="line">// event more than once for a given content viewer.</comment>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>               <name>mEODForCurrentDocument</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>               <name>mURIResultedInDocument</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PRPackedBool</name></type>               <name>mIsBeingDestroyed</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PRPackedBool</name></type>               <name>mIsExecutingOnLoadHandler</name></decl>;</decl_stmt>

    <comment type="line">// Indicates that a DocShell in this "docshell tree" is printing</comment>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>               <name>mIsPrintingOrPP</name></decl>;</decl_stmt>

    <comment type="line">// Indicates to CreateContentViewer() that it is safe to cache the old</comment>
    <comment type="line">// presentation of the page, and to SetupNewViewer() that the old viewer</comment>
    <comment type="line">// should be passed a SHEntry to save itself into.</comment>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>               <name>mSavingOldViewer</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <decl_stmt><decl><type><name>PRPackedBool</name></type>               <name>mInEnsureScriptEnv</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><specifier>static</specifier> <name>nsIURIFixup</name> *</type><name>sURIFixup</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<label><name>private</name>:</label>
    <comment type="line">// We're counting the number of |nsDocShells| to help find leaks</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>gNumberOfDocShells</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DEBUG */</comment>

<label><name>public</name>:</label>
    <expr_stmt><expr><name>class</name> <name>InterfaceRequestorProxy</name> : <name>public</name> <name>nsIInterfaceRequestor</name> <block>{
    <expr><name>public</name>:
        <call><name>InterfaceRequestorProxy</name><argument_list>(<argument><expr><name>nsIInterfaceRequestor</name>* <name>p</name></expr></argument>)</argument_list></call></expr>;
        <expr><name>virtual</name> ~<call><name>InterfaceRequestorProxy</name><argument_list>()</argument_list></call></expr>;
        <expr><name>NS_DECL_ISUPPORTS</name>
        <name>NS_DECL_NSIINTERFACEREQUESTOR</name>
 
    <name>protected</name>:
        <macro><name>InterfaceRequestorProxy</name><argument_list>()</argument_list></macro> <block>{}</block>
        <name>nsWeakPtr</name> <name>mWeakPtr</name></expr>;
    }</block></expr>;</expr_stmt>
};

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* nsDocShell_h__ */</comment>
</unit>
