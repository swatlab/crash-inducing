<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0016761b31f6cc43738b300a3a3d739cc75990a5.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* vim:set ts=2 sw=2 sts=2 et cindent: */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Google Inc.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *  Darin Fisher &lt;darin@meer.net&gt;
 *  Ben Turner &lt;mozilla@songbirdnest.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsUpdateDriver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsXULAppAPI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAppRunner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsILocalFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISimpleEnumerator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDirectoryEnumerator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMArray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPrintfCString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prproces.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prlog.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_MACOSX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsILocalFileMac.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCommandLineServiceMac.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;direct.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>getcwd</name><parameter_list>(<param><type><name>path</name></type></param>, <param><type><name>size</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_getcwd(path, size)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>getpid</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>GetCurrentProcessId()</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_OS2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>INCL_DOSFILEMGR</name></cpp:macro></cpp:define>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;os2.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_UNIX</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>XP_BEOS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//</comment>
<comment type="line">// We use execv to spawn the updater process on all UNIX systems except Mac OSX</comment>
<comment type="line">// since it is known to cause problems on the Mac.  Windows has execv, but it</comment>
<comment type="line">// is a faked implementation that doesn't really replace the current process.</comment>
<comment type="line">// Instead it spawns a new process, so we gain nothing from using execv on</comment>
<comment type="line">// Windows.</comment>
<comment type="line">//</comment>
<comment type="line">// On platforms where we are not calling execv, we may need to make the</comment>
<comment type="line">// udpaterfail executable wait for the calling process to exit.  Otherwise, the</comment>
<comment type="line">// updater may have trouble modifying our executable image (because it might</comment>
<comment type="line">// still be in use).  This is accomplished by passing our PID to the updater so</comment>
<comment type="line">// that it can wait for us to exit.  This is not perfect as there is a race</comment>
<comment type="line">// condition that could bite us.  It's possible that the calling process could</comment>
<comment type="line">// exit before the updater waits on the specified PID, and in the meantime a</comment>
<comment type="line">// new process with the same PID could be created.  This situation is unlikely,</comment>
<comment type="line">// however, given the way most operating systems recycle PIDs.  We'll take our</comment>
<comment type="line">// chances ;-)</comment>
<comment type="line">//</comment>
<comment type="line">// A similar #define lives in updater.cpp and should be kept in sync with this.</comment>
<comment type="line">//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_UNIX</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>XP_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_EXECV</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PRLogModuleInfo</name> *</type><name>sUpdateLog</name> <init>= <expr><call><name>PR_NewLogModule</name><argument_list>(<argument><expr>"updatedriver"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PR_LOG(sUpdateLog, PR_LOG_DEBUG, args)</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_WIN</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>kUpdaterBin</name><index>[]</index></name> <init>= <expr>"updater.exe"</expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>kUpdaterBin</name><index>[]</index></name> <init>= <expr>"updater"</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>kUpdaterINI</name><index>[]</index></name> <init>= <expr>"updater.ini"</expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_MACOSX</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>kUpdaterApp</name><index>[]</index></name> <init>= <expr>"updater.app"</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>nsresult</name></type>
<name>GetCurrentWorkingDir</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>size</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Cannot use NS_GetSpecialDirectory because XPCOM is not yet initialized.</comment>
  <comment type="line">// This code is duplicated from xpcom/io/SpecialSystemDirectory.cpp:</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_OS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if>if <condition>(<expr><call><name>DosQueryPathInfo</name><argument_list>( <argument><expr>"."</expr></argument>, <argument><expr><name>FIL_QUERYFULLNAME</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_WIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name>wchar_t</name> *</type><name>wpath</name> <init>= <expr><call><name>_wgetcwd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>wpath</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
  <function_decl><type><name>NS_ConvertUTF16toUTF8</name></type> <name>path</name><parameter_list>(<param><decl><type><name>wpath</name></type></decl></param>)</parameter_list>;</function_decl>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name><name>path</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if>if<condition>(<expr>!<call><name>getcwd</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="line">// This is a copy of OS X's XRE_GetBinaryPath from nsAppRunner.cpp with the</comment>
<comment type="line">// gBinaryPath check removed so that the updater can reload the stub executable</comment>
<comment type="line">// instead of xulrunner-bin. See bug 349737.</comment>
<function><type><specifier>static</specifier> <name>nsresult</name></type>
<name>GetXULRunnerStubPath</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>argv0</name></decl></param>, <param><decl><type><name>nsILocalFile</name>* *</type><name>aResult</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name></type> <name>lf</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>NS_NewNativeLocalFile</name><argument_list>(<argument><expr><call><name>EmptyCString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>lf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFileMac</name></expr></argument>&gt;</argument_list></name></type> <name>lfm</name> <argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>lf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>lfm</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <comment type="line">// Works even if we're not bundled.</comment>
  <decl_stmt><decl><type><name>CFBundleRef</name></type> <name>appBundle</name> <init>= <expr><call><name>CFBundleGetMainBundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>appBundle</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>CFURLRef</name></type> <name>bundleURL</name> <init>= <expr><call><name>CFBundleCopyExecutableURL</name><argument_list>(<argument><expr><name>appBundle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>bundleURL</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>FSRef</name></type> <name>fileRef</name></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<call><name>CFURLGetFSRef</name><argument_list>(<argument><expr><name>bundleURL</name></expr></argument>, <argument><expr>&amp;<name>fileRef</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>bundleURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>rv</name> = <call><name><name>lfm</name>-&gt;<name>InitWithFSRef</name></name><argument_list>(<argument><expr>&amp;<name>fileRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>bundleURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aResult</name> = <name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* XP_MACOSX */</comment>

<macro><name>PR_STATIC_CALLBACK</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>ScanDirComparator</name><argument_list>(<argument>nsIFile *a</argument>, <argument>nsIFile *b</argument>, <argument>void *unused</argument>)</argument_list></macro>
<block>{
  <comment type="line">// lexically compare the leaf names of these two files</comment>
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>a_name</name></decl>, <decl><type ref="prev"/><name>b_name</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>a</name>-&gt;<name>GetNativeLeafName</name></name><argument_list>(<argument><expr><name>a_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>b</name>-&gt;<name>GetNativeLeafName</name></name><argument_list>(<argument><expr><name>b_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>Compare</name><argument_list>(<argument><expr><name>a_name</name></expr></argument>, <argument><expr><name>b_name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<function><type><specifier>static</specifier> <name>nsresult</name></type>
<name>ScanDir</name><parameter_list>(<param><decl><type><name>nsIFile</name> *</type><name>dir</name></decl></param>, <param><decl><type><name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name> *</type><name>result</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISimpleEnumerator</name></expr></argument>&gt;</argument_list></name></type> <name>simpEnum</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>dir</name>-&gt;<name>GetDirectoryEntries</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>simpEnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDirectoryEnumerator</name></expr></argument>&gt;</argument_list></name></type> <name>dirEnum</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>simpEnum</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name></type> <name>file</name></decl>;</decl_stmt>
  <for>for (<init>;</init><condition>;</condition><incr/>) <block>{
    <expr_stmt><expr><name>rv</name> = <call><name><name>dirEnum</name>-&gt;<name>GetNextFile</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <return>return <expr><name>rv</name></expr>;</return></then></if>

    <comment type="line">// enumeration complete when null file is returned</comment>
    <if>if <condition>(<expr>!<name>file</name></expr>)</condition><then>
      <break>break;</break></then></if>

    <if>if <condition>(<expr>!<call><name><name>result</name>-&gt;<name>AppendObject</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>
  }</block></for>

  <expr_stmt><expr><call><name><name>result</name>-&gt;<name>Sort</name></name><argument_list>(<argument><expr><name>ScanDirComparator</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>GetFile</name><parameter_list>(<param><decl><type><name>nsIFile</name> *</type><name>dir</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsCSubstring</name> &amp;</type><name>name</name></decl></param>, <param><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name> &amp;</type><name>result</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name></type> <name>statusFile</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>dir</name>-&gt;<name>Clone</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>statusFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rv</name> = <call><name><name>statusFile</name>-&gt;<name>AppendNative</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <expr_stmt><expr><name>result</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>statusFile</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>GetStatusFile</name><parameter_list>(<param><decl><type><name>nsIFile</name> *</type><name>dir</name></decl></param>, <param><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name> &amp;</type><name>result</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"update.status"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>IsPending</name><parameter_list>(<param><decl><type><name>nsILocalFile</name> *</type><name>statusFile</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>FILE</name> *</type><name>fp</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>statusFile</name>-&gt;<name>OpenANSIFileDesc</name></name><argument_list>(<argument><expr>"r"</expr></argument>, <argument><expr>&amp;<name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>32</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>result</name> <init>= <expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>
  
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>kPending</name><index>[]</index></name> <init>= <expr>"pending"</expr></init></decl>;</decl_stmt>
  <return>return <expr>(<call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>kPending</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kPending</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call> == 0)</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>SetStatus</name><parameter_list>(<param><decl><type><name>nsILocalFile</name> *</type><name>statusFile</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>status</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>FILE</name> *</type><name>fp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>statusFile</name>-&gt;<name>OpenANSIFileDesc</name></name><argument_list>(<argument><expr>"w"</expr></argument>, <argument><expr>&amp;<name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>CopyFileIntoUpdateDir</name><parameter_list>(<param><decl><type><name>nsIFile</name> *</type><name>parentDir</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>leafName</name></decl></param>, <param><decl><type><name>nsIFile</name> *</type><name>updateDir</name></decl></param>)</parameter_list>
<block>{
  <function_decl><type><name>nsDependentCString</name></type> <name>leaf</name><parameter_list>(<param><decl><type><name>leafName</name></type></decl></param>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name></type> <name>file</name></decl>;</decl_stmt>

  <comment type="line">// Make sure there is not an existing file in the target location.</comment>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>updateDir</name>-&gt;<name>Clone</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rv</name> = <call><name><name>file</name>-&gt;<name>AppendNative</name></name><argument_list>(<argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name><name>file</name>-&gt;<name>Remove</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Now, copy into the target location.</comment>
  <expr_stmt><expr><name>rv</name> = <call><name><name>parentDir</name>-&gt;<name>Clone</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rv</name> = <call><name><name>file</name>-&gt;<name>AppendNative</name></name><argument_list>(<argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rv</name> = <call><name><name>file</name>-&gt;<name>CopyToNative</name></name><argument_list>(<argument><expr><name>updateDir</name></expr></argument>, <argument><expr><call><name>EmptyCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>CopyUpdaterIntoUpdateDir</name><parameter_list>(<param><decl><type><name>nsIFile</name> *</type><name>greDir</name></decl></param>, <param><decl><type><name>nsIFile</name> *</type><name>appDir</name></decl></param>, <param><decl><type><name>nsIFile</name> *</type><name>updateDir</name></decl></param>,
                         <param><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name> &amp;</type><name>updater</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Copy the updater application from the GRE and the updater ini from the app</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if>if <condition>(<expr>!<call><name>CopyFileIntoUpdateDir</name><argument_list>(<argument><expr><name>greDir</name></expr></argument>, <argument><expr><name>kUpdaterApp</name></expr></argument>, <argument><expr><name>updateDir</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if>if <condition>(<expr>!<call><name>CopyFileIntoUpdateDir</name><argument_list>(<argument><expr><name>greDir</name></expr></argument>, <argument><expr><name>kUpdaterBin</name></expr></argument>, <argument><expr><name>updateDir</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>CopyFileIntoUpdateDir</name><argument_list>(<argument><expr><name>appDir</name></expr></argument>, <argument><expr><name>kUpdaterINI</name></expr></argument>, <argument><expr><name>updateDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Finally, return the location of the updater binary.</comment>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>updateDir</name>-&gt;<name>Clone</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>updater</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>rv</name>  = <call><name><name>updater</name>-&gt;<name>AppendNative</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr><name>kUpdaterApp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rv</name> |= <call><name><name>updater</name>-&gt;<name>AppendNative</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"Contents"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rv</name> |= <call><name><name>updater</name>-&gt;<name>AppendNative</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"MacOS"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>rv</name> = <call><name><name>updater</name>-&gt;<name>AppendNative</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr><name>kUpdaterBin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</return> 
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ApplyUpdate</name><parameter_list>(<param><decl><type><name>nsIFile</name> *</type><name>greDir</name></decl></param>, <param><decl><type><name>nsIFile</name> *</type><name>updateDir</name></decl></param>, <param><decl><type><name>nsILocalFile</name> *</type><name>statusFile</name></decl></param>,
            <param><decl><type><name>nsIFile</name> *</type><name>appDir</name></decl></param>, <param><decl><type><name>int</name></type> <name>appArgc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>appArgv</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

  <comment type="line">// Steps:</comment>
  <comment type="line">//  - mark update as 'applying'</comment>
  <comment type="line">//  - copy updater into update dir</comment>
  <comment type="line">//  - run updater w/ appDir as the current working dir</comment>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name></type> <name>updater</name></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<call><name>CopyUpdaterIntoUpdateDir</name><argument_list>(<argument><expr><name>greDir</name></expr></argument>, <argument><expr><name>appDir</name></expr></argument>, <argument><expr><name>updateDir</name></expr></argument>, <argument><expr><name>updater</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr>("failed copying updater\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <comment type="line">// We need to use the value returned from XRE_GetBinaryPath when attempting</comment>
  <comment type="line">// to restart the running application.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name></type> <name>appFile</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// On OS X we need to pass the location of the xulrunner-stub executable</comment>
  <comment type="line">// rather than xulrunner-bin. See bug 349737.</comment>
  <expr_stmt><expr><call><name>GetXULRunnerStubPath</name><argument_list>(<argument><expr><name><name>appArgv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>appFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>XRE_GetBinaryPath</name><argument_list>(<argument><expr><name><name>appArgv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>appFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if>if <condition>(<expr>!<name>appFile</name></expr>)</condition><then>
    <return>return;</return></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_WIN</name></cpp:ifdef>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>appFilePathW</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>appFile</name>-&gt;<name>GetPath</name></name><argument_list>(<argument><expr><name>appFilePathW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>
  <function_decl><type><name>NS_ConvertUTF16toUTF8</name></type> <name>appFilePath</name><parameter_list>(<param><decl><type><name>appFilePathW</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>updaterPathW</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>updater</name>-&gt;<name>GetPath</name></name><argument_list>(<argument><expr><name>updaterPathW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>

  <function_decl><type><name>NS_ConvertUTF16toUTF8</name></type> <name>updaterPath</name><parameter_list>(<param><decl><type><name>updaterPathW</name></type></decl></param>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>appFilePath</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>appFile</name>-&gt;<name>GetNativePath</name></name><argument_list>(<argument><expr><name>appFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>
  
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>updaterPath</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>updater</name>-&gt;<name>GetNativePath</name></name><argument_list>(<argument><expr><name>updaterPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// Get the directory to which the update will be applied. On Mac OSX we need</comment>
  <comment type="line">// to apply the update to the Foo.app directory which is the parent of the</comment>
  <comment type="line">// parent of the appDir. On other platforms we will just apply to the appDir.</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>applyToDir</name></decl>;</decl_stmt>
  <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name></type> <name>parentDir1</name></decl>, <decl><type ref="prev"/><name>parentDir2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>appDir</name>-&gt;<name>GetParent</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>parentDir1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <return>return;</return></then></if>
    <expr_stmt><expr><name>rv</name> = <call><name><name>parentDir1</name>-&gt;<name>GetParent</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>parentDir2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <return>return;</return></then></if>
    <expr_stmt><expr><name>rv</name> = <call><name><name>parentDir2</name>-&gt;<name>GetNativePath</name></name><argument_list>(<argument><expr><name>applyToDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_WIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>applyToDir</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>appDir</name>-&gt;<name>GetPath</name></name><argument_list>(<argument><expr><name>applyToDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>applyToDir</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>appDir</name>-&gt;<name>GetNativePath</name></name><argument_list>(<argument><expr><name>applyToDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>updateDirPathW</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>updateDir</name>-&gt;<name>GetPath</name></name><argument_list>(<argument><expr><name>updateDirPathW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>NS_ConvertUTF16toUTF8</name></type> <name>updateDirPath</name><parameter_list>(<param><decl><type><name>updateDirPathW</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>updateDirPath</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>updateDir</name>-&gt;<name>GetNativePath</name></name><argument_list>(<argument><expr><name>updateDirPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>

  <comment type="line">// Get the current working directory.</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>workingDirPath</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name>GetCurrentWorkingDir</name><argument_list>(<argument><expr><name>workingDirPath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>workingDirPath</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>

  <if>if <condition>(<expr>!<call><name>SetStatus</name><argument_list>(<argument><expr><name>statusFile</name></expr></argument>, <argument><expr>"applying"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr>("failed setting status to 'applying'\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <comment type="line">// Construct the PID argument for this process.  If we are using execv, then</comment>
  <comment type="line">// we pass "0" which is then ignored by the updater.</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_EXECV</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>NS_NAMED_LITERAL_CSTRING</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>pid</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>pid</name>.<name>AppendInt</name></name><argument_list>(<argument><expr>(<name>PRInt32</name>) <call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><name>appArgc</name> + 4</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> **</type><name>argv</name> <init>= <expr>new <name>char</name>*<index>[<expr><name>argc</name> + 1</expr>]</index></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>argv</name></expr>)</condition><then>
    <return>return;</return></then></if>
  <expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = (<name>char</name>*) <call><name><name>updaterPath</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name> = (<name>char</name>*) <call><name><name>updateDirPath</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name> = (<name>char</name>*) <call><name><name>pid</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>appArgc</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name><name>argv</name><index>[<expr>3</expr>]</index></name> = <name>workingDirPath</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>argv</name><index>[<expr>4</expr>]</index></name> = (<name>char</name>*) <call><name><name>appFilePath</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>appArgc</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
      <expr_stmt><expr><name><name>argv</name><index>[<expr>4 + <name>i</name></expr>]</index></name> = <name><name>appArgv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></for>
    <expr_stmt><expr><name><name>argv</name><index>[<expr>4 + <name>appArgc</name></expr>]</index></name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><name><name>argv</name><index>[<expr>3</expr>]</index></name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>argc</name> = 3</expr>;</expr_stmt>
  }</block></else></if>

  <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr>("spawning updater process [%s]\n", <call><name><name>updaterPath</name>.<name>get</name></name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_EXECV</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>chdir</name><argument_list>(<argument><expr><call><name><name>applyToDir</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>execv</name><argument_list>(<argument><expr><call><name><name>updaterPath</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_WIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><call><name>_wchdir</name><argument_list>(<argument><expr><call><name><name>applyToDir</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<call><name>WinLaunchChild</name><argument_list>(<argument><expr><call><name><name>updaterPathW</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>appArgc</name> + 4</expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>
  <expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>PRStatus</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRProcessAttr</name> *</type><name>attr</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><name>attr</name> = <call><name>PR_NewProcessAttr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>attr</name></expr>)</condition><then>
    <goto>goto <name>end</name>;</goto></then></if>

  <expr_stmt><expr><name>status</name> = <call><name>PR_ProcessAttrSetCurrentDirectory</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><call><name><name>applyToDir</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>status</name> != <name>PR_SUCCESS</name></expr>)</condition><then>
    <goto>goto <name>end</name>;</goto></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_MACOSX</name></cpp:ifdef>
  <expr_stmt><expr><call><name>SetupMacCommandLine</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>PR_CreateProcessDetached</name><argument_list>(<argument><expr><call><name><name>updaterPath</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>PR_DestroyProcessAttr</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <expr_stmt><expr>delete<index>[]</index> <name>argv</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name>nsresult</name></type>
<name>ProcessUpdates</name><parameter_list>(<param><decl><type><name>nsIFile</name> *</type><name>greDir</name></decl></param>, <param><decl><type><name>nsIFile</name> *</type><name>appDir</name></decl></param>, <param><decl><type><name>nsIFile</name> *</type><name>updRootDir</name></decl></param>,
               <param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name></type> <name>updatesDir</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>updRootDir</name>-&gt;<name>Clone</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>updatesDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rv</name> = <call><name><name>updatesDir</name>-&gt;<name>AppendNative</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"updates"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>exists</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>updatesDir</name>-&gt;<name>Exists</name></name><argument_list>(<argument><expr>&amp;<name>exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> || !<name>exists</name></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name></type> <name>dirEntries</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name>ScanDir</name><argument_list>(<argument><expr><name>updatesDir</name></expr></argument>, <argument><expr>&amp;<name>dirEntries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>
  <if>if <condition>(<expr><call><name><name>dirEntries</name>.<name>Count</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <comment type="line">// look for the first update subdirectory with a status of pending</comment>
  <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>dirEntries</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name></type> <name>statusFile</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>GetStatusFile</name><argument_list>(<argument><expr><name><name>dirEntries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>statusFile</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>IsPending</name><argument_list>(<argument><expr><name>statusFile</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>ApplyUpdate</name><argument_list>(<argument><expr><name>greDir</name></expr></argument>, <argument><expr><name><name>dirEntries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>statusFile</name></expr></argument>, <argument><expr><name>appDir</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    }</block></then></if>
  }</block></for>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
</unit>
