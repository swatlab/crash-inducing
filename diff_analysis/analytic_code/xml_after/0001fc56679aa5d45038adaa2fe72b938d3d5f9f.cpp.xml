<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0001fc56679aa5d45038adaa2fe72b938d3d5f9f.cpp"><comment type="block">/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsBig5Prober.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>  <name><name>nsBig5Prober</name>::<name>Reset</name></name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>mCodingSM</name>-&gt;<name>Reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
  <expr_stmt><expr><name>mState</name> = <name>eDetecting</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mDistributionAnalyser</name>.<name>Reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>nsProbingState</name></type> <name><name>nsBig5Prober</name>::<name>HandleData</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>aBuf</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLen</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsSMState</name></type> <name>codingState</name></decl>;</decl_stmt>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>aLen</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
  <block>{
    <expr_stmt><expr><name>codingState</name> = <call><name><name>mCodingSM</name>-&gt;<name>NextState</name></name><argument_list>(<argument><expr><name><name>aBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>codingState</name> == <name>eItsMe</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>mState</name> = <name>eFoundIt</name></expr>;</expr_stmt>
      <break>break;</break>
    }</block></then></if>
    <if>if <condition>(<expr><name>codingState</name> == <name>eStart</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>PRUint32</name></type> <name>charLen</name> <init>= <expr><call><name><name>mCodingSM</name>-&gt;<name>GetCurrentCharLen</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>i</name> == 0</expr>)</condition><then>
      <block>{
        <expr_stmt><expr><name><name>mLastChar</name><index>[<expr>1</expr>]</index></name> = <name><name>aBuf</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mDistributionAnalyser</name>.<name>HandleOneChar</name></name><argument_list>(<argument><expr><name>mLastChar</name></expr></argument>, <argument><expr><name>charLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then>
      <else>else
        <expr_stmt><expr><call><name><name>mDistributionAnalyser</name>.<name>HandleOneChar</name></name><argument_list>(<argument><expr><name>aBuf</name>+<name>i</name>-1</expr></argument>, <argument><expr><name>charLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then></if>
  }</block></for>

  <expr_stmt><expr><name><name>mLastChar</name><index>[<expr>0</expr>]</index></name> = <name><name>aBuf</name><index>[<expr><name>aLen</name>-1</expr>]</index></name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>mState</name> == <name>eDetecting</name></expr>)</condition><then>
    <if>if <condition>(<expr><call><name><name>mDistributionAnalyser</name>.<name>GotEnoughData</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name>GetConfidence</name><argument_list>()</argument_list></call> &gt; <name>SHORTCUT_THRESHOLD</name></expr>)</condition><then>
      <expr_stmt><expr><name>mState</name> = <name>eFoundIt</name></expr>;</expr_stmt></then></if></then></if>

  <return>return <expr><name>mState</name></expr>;</return>
}</block></function>

<function><type><name>float</name></type> <name><name>nsBig5Prober</name>::<name>GetConfidence</name></name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>float</name></type> <name>distribCf</name> <init>= <expr><call><name><name>mDistributionAnalyser</name>.<name>GetConfidence</name></name><argument_list>(<argument><expr><name>mIsPreferredLanguage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr>(<name>float</name>)<name>distribCf</name></expr>;</return>
}</block></function>

</unit>
