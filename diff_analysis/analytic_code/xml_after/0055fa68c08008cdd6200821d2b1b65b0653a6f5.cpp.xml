<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0055fa68c08008cdd6200821d2b1b65b0653a6f5.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<comment type="block">/*
 * Implementation of DOM Core's nsIDOMAttr node.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMAttribute.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGenericElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIContent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentCreatorFunctions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsINameSpaceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsUnicharUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOM3Attr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMUserDataHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsEventDispatcher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGkAtoms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMArray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNodeUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIEventListenerManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsTextNode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozAutoDocUpdate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsMutationEvent.h"</cpp:file></cpp:include>

<comment type="line">//----------------------------------------------------------------------</comment>
<decl_stmt><decl><type><name>PRBool</name></type> <name><name>nsDOMAttribute</name>::<name>sInitialized</name></name></decl>;</decl_stmt>

<constructor><name><name>nsDOMAttribute</name>::<name>nsDOMAttribute</name></name><parameter_list>(<param><decl><type><name>nsDOMAttributeMap</name> *</type><name>aAttrMap</name></decl></param>,
                               <param><decl><type><name>nsINodeInfo</name>       *</type><name>aNodeInfo</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>nsAString</name>   &amp;</type><name>aValue</name></decl></param>)</parameter_list>
  <member_list>: <call><name>nsIAttribute</name><argument_list>(<argument><expr><name>aAttrMap</name></expr></argument>, <argument><expr><name>aNodeInfo</name></expr></argument>)</argument_list></call>, <call><name>mValue</name><argument_list>(<argument><expr><name>aValue</name></expr></argument>)</argument_list></call>, <call><name>mChild</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>
</member_list><block>{
  <expr_stmt><expr><call><name>NS_ABORT_IF_FALSE</name><argument_list>(<argument><expr><name>mNodeInfo</name></expr></argument>, <argument><expr>"We must get a nodeinfo here!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="line">// We don't add a reference to our content. It will tell us</comment>
  <comment type="line">// to drop our reference when it goes away.</comment>
}</block></constructor>

<destructor><name><name>nsDOMAttribute</name>::~<name>nsDOMAttribute</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mChild</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsTextNode</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mChild</name></expr></argument>)</argument_list></call>-&gt;<call><name>UnbindFromAttribute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name>mChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></destructor>

<macro><name>NS_IMPL_CYCLE_COLLECTION_CLASS</name><argument_list>(<argument>nsDOMAttribute</argument>)</argument_list></macro>

<macro><name>NS_IMPL_CYCLE_COLLECTION_ROOT_BEGIN</name><argument_list>(<argument>nsDOMAttribute</argument>)</argument_list></macro>
  <decl_stmt><decl><type><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER</name>
<name>NS_IMPL_CYCLE_COLLECTION_ROOT_END</name></type>

<name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN</name><argument_list>(<argument><expr><name>nsDOMAttribute</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_SCRIPT_OBJECTS</name>
  <name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument><expr><name>mNodeInfo</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_RAWPTR</name><argument_list>(<argument><expr><name>mChild</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_LISTENERMANAGER</name>
  <name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_USERDATA</name>
<name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END</name>

<name>NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN</name><argument_list>(<argument><expr><name>nsDOMAttribute</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_TRACE_PRESERVED_WRAPPER</name>
<name>NS_IMPL_CYCLE_COLLECTION_TRACE_END</name>

<name>NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN</name><argument_list>(<argument><expr><name>nsDOMAttribute</name></expr></argument>)</argument_list>
  if <argument_list>(<argument><expr><name><name>tmp</name>-&gt;<name>mChild</name></name></expr></argument>)</argument_list> <argument_list>{
    <argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsTextNode</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>tmp</name>-&gt;<name>mChild</name></name></expr></argument>)</argument_list></call>-&gt;<call><name>UnbindFromAttribute</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name><name>tmp</name>-&gt;<name>mChild</name></name></expr></argument>)</argument_list></call></expr></argument>;
  }</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_LISTENERMANAGER</name>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_USERDATA</name>
<name>NS_IMPL_CYCLE_COLLECTION_UNLINK_END</name>

<name>DOMCI_DATA</name><argument_list>(<argument><expr><name>Attr</name></expr></argument>, <argument><expr><name>nsDOMAttribute</name></expr></argument>)</argument_list>

<comment type="line">// QueryInterface implementation for nsDOMAttribute</comment>
<name>NS_INTERFACE_TABLE_HEAD</name><argument_list>(<argument><expr><name>nsDOMAttribute</name></expr></argument>)</argument_list>
  <name>NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY</name>
  <name>NS_NODE_INTERFACE_TABLE8</name><argument_list>(<argument><expr><name>nsDOMAttribute</name></expr></argument>, <argument><expr><name>nsIDOMAttr</name></expr></argument>, <argument><expr><name>nsIAttribute</name></expr></argument>, <argument><expr><name>nsINode</name></expr></argument>,
                           <argument><expr><name>nsIDOMNode</name></expr></argument>, <argument><expr><name>nsIDOM3Node</name></expr></argument>, <argument><expr><name>nsIDOM3Attr</name></expr></argument>,
                           <argument><expr><name>nsPIDOMEventTarget</name></expr></argument>, <argument><expr><name>nsIDOMXPathNSResolver</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRIES_CYCLE_COLLECTION</name><argument_list>(<argument><expr><name>nsDOMAttribute</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY_TEAROFF</name><argument_list>(<argument><expr><name>nsISupportsWeakReference</name></expr></argument>,
                                 <argument><expr>new <call><name>nsNodeSupportsWeakRefTearoff</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY_TEAROFF</name><argument_list>(<argument><expr><name>nsIDOMEventTarget</name></expr></argument>,
                                 <argument><expr><call><name><name>nsDOMEventRTTearoff</name>::<name>Create</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY_TEAROFF</name><argument_list>(<argument><expr><name>nsIDOM3EventTarget</name></expr></argument>,
                                 <argument><expr><call><name><name>nsDOMEventRTTearoff</name>::<name>Create</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY_TEAROFF</name><argument_list>(<argument><expr><name>nsIDOMNSEventTarget</name></expr></argument>,
                                 <argument><expr><call><name><name>nsDOMEventRTTearoff</name>::<name>Create</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
  <name>NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO</name><argument_list>(<argument><expr><name>Attr</name></expr></argument>)</argument_list>
<name>NS_INTERFACE_MAP_END</name>

<name>NS_IMPL_CYCLE_COLLECTING_ADDREF_AMBIGUOUS</name><argument_list>(<argument><expr><name>nsDOMAttribute</name></expr></argument>, <argument><expr><name>nsIDOMAttr</name></expr></argument>)</argument_list>
<name>NS_IMPL_CYCLE_COLLECTING_RELEASE_FULL</name><argument_list>(<argument><expr><name>nsDOMAttribute</name></expr></argument>, <argument><expr><name>nsIDOMAttr</name></expr></argument>,
                                      <argument><expr><call><name><name>nsNodeUtils</name>::<name>LastRelease</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>

<name>void</name>
<name><name>nsDOMAttribute</name>::<name>SetMap</name></name><argument_list>(<argument><expr><name>nsDOMAttributeMap</name> *<name>aMap</name></expr></argument>)</argument_list>
<argument_list>{
  if <argument><expr>(<name>mAttrMap</name> &amp;&amp; !<name>aMap</name> &amp;&amp; <name>sInitialized</name>) <block>{
    <comment type="line">// We're breaking a relationship with content and not getting a new one,</comment>
    <comment type="line">// need to locally cache value. GetValue() does that.</comment>
    <expr><call><name>GetValue</name><argument_list>(<argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr>;
  }</block>
  
  <name>mAttrMap</name> = <name>aMap</name></expr></argument>;
}</argument_list>

<name>nsIContent</name>*
<name><name>nsDOMAttribute</name>::<name>GetContent</name></name><argument_list>()</argument_list> const
<argument_list>{
  return <argument><expr><call><name>GetContentInternal</name><argument_list>()</argument_list></call></expr></argument>;
}</argument_list>

<name>nsresult</name>
<name><name>nsDOMAttribute</name>::<name>SetOwnerDocument</name></name><argument_list>(<argument><expr><name>nsIDocument</name>* <name>aDocument</name></expr></argument>)</argument_list>
<argument_list>{
  <argument><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>, <argument><expr>"Missing document"</expr></argument>)</argument_list></call></expr></argument>;

  <argument><expr><name>nsIDocument</name> *<name>doc</name> = <call><name>GetOwnerDoc</name><argument_list>()</argument_list></call></expr></argument>;
  <argument><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>doc</name> != <name>aDocument</name></expr></argument>, <argument><expr>"bad call to nsDOMAttribute::SetOwnerDocument"</expr></argument>)</argument_list></call></expr></argument>;
  if <argument><expr>(<name>doc</name>) <block>{
    <expr><call><name><name>doc</name>-&gt;<name>DeleteAllPropertiesFor</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;
  }</block>

  <name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name> <name>newNodeInfo</name></expr></argument>;
  <argument><expr><name>newNodeInfo</name> = <call><name><name>aDocument</name>-&gt;<name>NodeInfoManager</name></name><argument_list>()</argument_list></call>-&gt;
    <call><name>GetNodeInfo</name><argument_list>(<argument><expr><call><name><name>mNodeInfo</name>-&gt;<name>NameAtom</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mNodeInfo</name>-&gt;<name>GetPrefixAtom</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>mNodeInfo</name>-&gt;<name>NamespaceID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>newNodeInfo</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>newNodeInfo</name></expr></argument>, <argument><expr>"GetNodeInfo lies"</expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><call><name><name>mNodeInfo</name>.<name>swap</name></name><argument_list>(<argument><expr><name>newNodeInfo</name></expr></argument>)</argument_list></call></expr></argument>;

  return <argument><expr><name>NS_OK</name></expr></argument>;
}</argument_list>

<name>NS_IMETHODIMP</name>
<name><name>nsDOMAttribute</name>::<name>GetName</name></name><argument_list>(<argument><expr><name>nsAString</name>&amp; <name>aName</name></expr></argument>)</argument_list>
<argument_list>{
  <argument><expr><call><name><name>mNodeInfo</name>-&gt;<name>GetQualifiedName</name></name><argument_list>(<argument><expr><name>aName</name></expr></argument>)</argument_list></call></expr></argument>;
  return <argument><expr><name>NS_OK</name></expr></argument>;
}</argument_list>

<name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsIAtom</name></expr></argument>&gt;</argument_list></name>
<name><name>nsDOMAttribute</name>::<name>GetNameAtom</name></name><argument_list>(<argument><expr><name>nsIContent</name>* <name>aContent</name></expr></argument>)</argument_list>
<argument_list>{
  <argument><expr><name>nsIAtom</name>* <name>result</name> = <name>nsnull</name></expr></argument>;
  if <argument><expr>(<call><name><name>mNodeInfo</name>-&gt;<name>NamespaceID</name></name><argument_list>()</argument_list></call> == <name>kNameSpaceID_None</name> &amp;&amp;
      <call><name><name>aContent</name>-&gt;<name>IsInHTMLDocument</name></name><argument_list>()</argument_list></call> &amp;&amp;
      <call><name><name>aContent</name>-&gt;<name>IsHTML</name></name><argument_list>()</argument_list></call>) <block>{
    <expr><name>nsAutoString</name> <name>name</name></expr>;
    <expr><call><name><name>mNodeInfo</name>-&gt;<name>NameAtom</name></name><argument_list>()</argument_list></call>-&gt;<call><name>ToString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>nsAutoString</name> <name>lower</name></expr>;
    <expr><call><name>ToLowerCase</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAtom</name></expr></argument>&gt;</argument_list></name> <name>nameAtom</name> = <call><name>do_GetAtom</name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>nameAtom</name>.<name>swap</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;
  }</block></expr></argument> <else>else <expr_stmt><expr><block>{
    <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAtom</name></expr></argument>&gt;</argument_list></name> <name>nameAtom</name> = <call><name><name>mNodeInfo</name>-&gt;<name>NameAtom</name></name><argument_list>()</argument_list></call></expr>;
    <expr><call><name><name>nameAtom</name>.<name>swap</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;
  }</block></expr></expr_stmt></else>
  <return>return <expr><name>result</name></expr>;</return></argument_list></decl></decl_stmt>
}

NS_IMETHODIMP
<macro><name>nsDOMAttribute</name></macro><expr_stmt><expr><name>::<name>GetValue</name></name>(<name>nsAString</name>&amp; <name>aValue</name>)
<block>{
  <expr><name>nsIContent</name>* <name>content</name> = <call><name>GetContentInternal</name><argument_list>()</argument_list></call></expr>;
  <if>if <condition>(<expr><name>content</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAtom</name></expr></argument>&gt;</argument_list></name></type> <name>nameAtom</name> <init>= <expr><call><name>GetNameAtom</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>content</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><call><name><name>mNodeInfo</name>-&gt;<name>NamespaceID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nameAtom</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt/></block></then></if>}</block></expr></expr_stmt>
  <else>else <block>{
    <expr_stmt><expr><name>aValue</name> = <name>mValue</name></expr>;</expr_stmt>
  }</block></else>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsDOMAttribute</name></macro><expr_stmt><expr><name>::<name>SetValue</name></name>(const <name>nsAString</name>&amp; <name>aValue</name>)
<block>{
  <expr><name>nsresult</name> <name>rv</name> = <name>NS_OK</name></expr>;
  <expr><name>nsIContent</name>* <name>content</name> = <call><name>GetContentInternal</name><argument_list>()</argument_list></call></expr>;
  <if>if <condition>(<expr><name>content</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAtom</name></expr></argument>&gt;</argument_list></name></type> <name>nameAtom</name> <init>= <expr><call><name>GetNameAtom</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>content</name>-&gt;<name>SetAttr</name></name><argument_list>(<argument><expr><call><name><name>mNodeInfo</name>-&gt;<name>NamespaceID</name></name><argument_list>()</argument_list></call></expr></argument>,
                          <argument><expr><name>nameAtom</name></expr></argument>,
                          <argument><expr><call><name><name>mNodeInfo</name>-&gt;<name>GetPrefixAtom</name></name><argument_list>()</argument_list></call></expr></argument>,
                          <argument><expr><name>aValue</name></expr></argument>,
                          <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt/></block></then></if>}</block></expr></expr_stmt>
  <else>else <block>{
    <expr_stmt><expr><name>mValue</name> = <name>aValue</name></expr>;</expr_stmt>
  }</block></else>

  <return>return <expr><name>rv</name></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsDOMAttribute</name></macro><expr_stmt><expr><name>::<name>GetSpecified</name></name>(<name>PRBool</name>* <name>aSpecified</name>)
<block>{
  <expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aSpecified</name></expr></argument>)</argument_list></call></expr>;
  <expr>*<name>aSpecified</name> = <name>PR_TRUE</name></expr>;
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetOwnerElement</name></name><parameter_list>(<param><decl><type><name>nsIDOMElement</name>**</type> <name>aOwnerElement</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aOwnerElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIContent</name>*</type> <name>content</name> <init>= <expr><call><name>GetContentInternal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>content</name></expr>)</condition><then> <block>{
    <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>aOwnerElement</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr>*<name>aOwnerElement</name> = <name>nsnull</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetNodeName</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aNodeName</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetName</name><argument_list>(<argument><expr><name>aNodeName</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetNodeValue</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aNodeValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetValue</name><argument_list>(<argument><expr><name>aNodeValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>SetNodeValue</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aNodeValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>SetValue</name><argument_list>(<argument><expr><name>aNodeValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetNodeType</name></name><parameter_list>(<param><decl><type><name>PRUint16</name>*</type> <name>aNodeType</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aNodeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aNodeType</name> = (<name>PRUint16</name>)<name><name>nsIDOMNode</name>::<name>ATTRIBUTE_NODE</name></name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetParentNode</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>**</type> <name>aParentNode</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aParentNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aParentNode</name> = <name>nsnull</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetChildNodes</name></name><parameter_list>(<param><decl><type><name>nsIDOMNodeList</name>**</type> <name>aChildNodes</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsINode</name>::<name>GetChildNodes</name></name><argument_list>(<argument><expr><name>aChildNodes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>HasChildNodes</name></name><parameter_list>(<param><decl><type><name>PRBool</name>*</type> <name>aHasChildNodes</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRBool</name></type> <name>hasChild</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>EnsureChildState</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>hasChild</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aHasChildNodes</name> = <name>hasChild</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>HasAttributes</name></name><parameter_list>(<param><decl><type><name>PRBool</name>*</type> <name>aHasAttributes</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aHasAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aHasAttributes</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetFirstChild</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>**</type> <name>aFirstChild</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aFirstChild</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>hasChild</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>EnsureChildState</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>hasChild</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>mChild</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>mChild</name></expr></argument>, <argument><expr><name>aFirstChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetLastChild</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>**</type> <name>aLastChild</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetFirstChild</name><argument_list>(<argument><expr><name>aLastChild</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetPreviousSibling</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>**</type> <name>aPreviousSibling</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aPreviousSibling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aPreviousSibling</name> = <name>nsnull</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetNextSibling</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>**</type> <name>aNextSibling</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aNextSibling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aNextSibling</name> = <name>nsnull</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetAttributes</name></name><parameter_list>(<param><decl><type><name>nsIDOMNamedNodeMap</name>**</type> <name>aAttributes</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aAttributes</name> = <name>nsnull</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>InsertBefore</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>*</type> <name>aNewChild</name></decl></param>, <param><decl><type><name>nsIDOMNode</name>*</type> <name>aRefChild</name></decl></param>, <param><decl><type><name>nsIDOMNode</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>ReplaceOrInsertBefore</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>aNewChild</name></expr></argument>, <argument><expr><name>aRefChild</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>ReplaceChild</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>*</type> <name>aNewChild</name></decl></param>, <param><decl><type><name>nsIDOMNode</name>*</type> <name>aOldChild</name></decl></param>, <param><decl><type><name>nsIDOMNode</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>ReplaceOrInsertBefore</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>aNewChild</name></expr></argument>, <argument><expr><name>aOldChild</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>RemoveChild</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>*</type> <name>aOldChild</name></decl></param>, <param><decl><type><name>nsIDOMNode</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsINode</name>::<name>RemoveChild</name></name><argument_list>(<argument><expr><name>aOldChild</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>AppendChild</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>*</type> <name>aNewChild</name></decl></param>, <param><decl><type><name>nsIDOMNode</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>InsertBefore</name><argument_list>(<argument><expr><name>aNewChild</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDOMAttribute</name>::<name>Clone</name></name><parameter_list>(<param><decl><type><name>nsINodeInfo</name> *</type><name>aNodeInfo</name></decl></param>, <param><decl><type><name>nsINode</name> **</type><name>aResult</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>value</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>const_cast</name><argument_list>&lt;<argument><expr><name>nsDOMAttribute</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>-&gt;<call><name>GetValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aResult</name> = new <call><name>nsDOMAttribute</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aNodeInfo</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!*<name>aResult</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>CloneNode</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aDeep</name></decl></param>, <param><decl><type><name>nsIDOMNode</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsNodeUtils</name>::<name>CloneNodeImpl</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aDeep</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetOwnerDocument</name></name><parameter_list>(<param><decl><type><name>nsIDOMDocument</name>**</type> <name>aOwnerDocument</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsINode</name>::<name>GetOwnerDocument</name></name><argument_list>(<argument><expr><name>aOwnerDocument</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetNamespaceURI</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aNamespaceURI</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>mNodeInfo</name>-&gt;<name>GetNamespaceURI</name></name><argument_list>(<argument><expr><name>aNamespaceURI</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetPrefix</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aPrefix</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>mNodeInfo</name>-&gt;<name>GetPrefix</name></name><argument_list>(<argument><expr><name>aPrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>SetPrefix</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aPrefix</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// XXX: Validate the prefix string!</comment>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name></type> <name>newNodeInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAtom</name></expr></argument>&gt;</argument_list></name></type> <name>prefix</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<call><name><name>aPrefix</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>prefix</name> = <call><name>do_GetAtom</name><argument_list>(<argument><expr><name>aPrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>prefix</name></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <if>if <condition>(<expr>!<call><name><name>nsContentUtils</name>::<name>IsValidNodeName</name></name><argument_list>(<argument><expr><call><name><name>mNodeInfo</name>-&gt;<name>NameAtom</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>prefix</name></expr></argument>,
                                       <argument><expr><call><name><name>mNodeInfo</name>-&gt;<name>NamespaceID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_DOM_NAMESPACE_ERR</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>PrefixChanged</name></name><argument_list>(<argument><expr><name>mNodeInfo</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>,
                                              <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>newNodeInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIContent</name>*</type> <name>content</name> <init>= <expr><call><name>GetContentInternal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>content</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAtom</name></expr></argument>&gt;</argument_list></name></type> <name>name</name> <init>= <expr><call><name>GetNameAtom</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>nameSpaceID</name> <init>= <expr><call><name><name>mNodeInfo</name>-&gt;<name>NamespaceID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>tmpValue</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>content</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name>nameSpaceID</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>tmpValue</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>content</name>-&gt;<name>UnsetAttr</name></name><argument_list>(<argument><expr><name>nameSpaceID</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>content</name>-&gt;<name>SetAttr</name></name><argument_list>(<argument><expr><call><name><name>newNodeInfo</name>-&gt;<name>NamespaceID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                       <argument><expr><call><name><name>newNodeInfo</name>-&gt;<name>GetPrefixAtom</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tmpValue</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>newNodeInfo</name>.<name>swap</name></name><argument_list>(<argument><expr><name>mNodeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetLocalName</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aLocalName</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>mNodeInfo</name>-&gt;<name>GetLocalName</name></name><argument_list>(<argument><expr><name>aLocalName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>Normalize</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// Nothing to do here</comment>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>IsSupported</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aFeature</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aVersion</name></decl></param>,
                            <param><decl><type><name>PRBool</name>*</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsGenericElement</name>::<name>InternalIsSupported</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIDOMAttr</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, 
                                               <argument><expr><name>aFeature</name></expr></argument>, <argument><expr><name>aVersion</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type>
<name><name>nsDOMAttribute</name>::<name>GetBaseURI</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <decl_stmt><decl><type><name>nsINode</name> *</type><name>parent</name> <init>= <expr><call><name>GetContentInternal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr><name>parent</name> ? <call><name><name>parent</name>-&gt;<name>GetBaseURI</name></name><argument_list>()</argument_list></call> : <name>nsnull</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetBaseURI</name></name><parameter_list>(<param><decl><type><name>nsAString</name> &amp;</type><name>aURI</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>nsINode</name>::<name>GetBaseURI</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>CompareDocumentPosition</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>*</type> <name>aOther</name></decl></param>,
                                        <param><decl><type><name>PRUint16</name>*</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINode</name></expr></argument>&gt;</argument_list></name></type> <name>other</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aOther</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>NS_ERROR_DOM_NOT_SUPPORTED_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>nsINode</name>::<name>CompareDocumentPosition</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>IsSameNode</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>*</type> <name>aOther</name></decl></param>,
                           <param><decl><type><name>PRBool</name>*</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINode</name></expr></argument>&gt;</argument_list></name></type> <name>other</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aOther</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>NS_ERROR_DOM_NOT_SUPPORTED_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr>*<name>aReturn</name> = <call><name><name>nsINode</name>::<name>IsSameNode</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>IsEqualNode</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>*</type> <name>aOther</name></decl></param>,
                            <param><decl><type><name>PRBool</name>*</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINode</name></expr></argument>&gt;</argument_list></name></type> <name>other</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aOther</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>aReturn</name> = <name>other</name> &amp;&amp; <call><name>IsEqualNode</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsDOMAttribute</name>::<name>IsEqualNode</name></name><parameter_list>(<param><decl><type><name>nsINode</name>*</type> <name>aOther</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>aOther</name> || !<call><name><name>aOther</name>-&gt;<name>IsNodeOfType</name></name><argument_list>(<argument><expr><name>eATTRIBUTE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsDOMAttribute</name> *</type><name>other</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsDOMAttribute</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aOther</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// Prefix, namespace URI, local name, node name check.</comment>
  <if>if <condition>(<expr>!<call><name><name>mNodeInfo</name>-&gt;<name>Equals</name></name><argument_list>(<argument><expr><call><name><name>other</name>-&gt;<name>NodeInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// Value check</comment>
  <comment type="line">// Checks not needed:  Child nodes, attributes.</comment>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>ourValue</name></decl>, <decl><type ref="prev"/><name>otherValue</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetValue</name><argument_list>(<argument><expr><name>ourValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>other</name>-&gt;<name>GetValue</name></name><argument_list>(<argument><expr><name>otherValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>ourValue</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>otherValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>IsDefaultNamespace</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aNamespaceURI</name></decl></param>,
                                   <param><decl><type><name>PRBool</name>*</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aReturn</name> = <call><name><name>nsINode</name>::<name>IsDefaultNamespace</name></name><argument_list>(<argument><expr><name>aNamespaceURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDOMAttribute</name>::<name>GetTextContent</name></name><parameter_list>(<param><decl><type><name>nsAString</name> &amp;</type><name>aTextContent</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>GetNodeValue</name><argument_list>(<argument><expr><name>aTextContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetTextContent</name></name><parameter_list>(<param><decl><type><name>nsAString</name> &amp;</type><name>aTextContent</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>nsINode</name>::<name>GetTextContent</name></name><argument_list>(<argument><expr><name>aTextContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDOMAttribute</name>::<name>SetTextContent</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aTextContent</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>SetNodeValue</name><argument_list>(<argument><expr><name>aTextContent</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>SetTextContent</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aTextContent</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsINode</name>::<name>SetTextContent</name></name><argument_list>(<argument><expr><name>aTextContent</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetFeature</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aFeature</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aVersion</name></decl></param>,
                           <param><decl><type><name>nsISupports</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsINode</name>::<name>GetFeature</name></name><argument_list>(<argument><expr><name>aFeature</name></expr></argument>, <argument><expr><name>aVersion</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>SetUserData</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aKey</name></decl></param>, <param><decl><type><name>nsIVariant</name>*</type> <name>aData</name></decl></param>,
                            <param><decl><type><name>nsIDOMUserDataHandler</name>*</type> <name>aHandler</name></decl></param>,
                            <param><decl><type><name>nsIVariant</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsINode</name>::<name>SetUserData</name></name><argument_list>(<argument><expr><name>aKey</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>, <argument><expr><name>aHandler</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetUserData</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aKey</name></decl></param>, <param><decl><type><name>nsIVariant</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aResult</name> = <call><name><name>nsINode</name>::<name>GetUserData</name></name><argument_list>(<argument><expr><name>aKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetIsId</name></name><parameter_list>(<param><decl><type><name>PRBool</name>*</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIContent</name>*</type> <name>content</name> <init>= <expr><call><name>GetContentInternal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>content</name></expr>)</condition><then>
  <block>{
    <expr_stmt><expr>*<name>aReturn</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsIAtom</name>*</type> <name>idAtom</name> <init>= <expr><call><name><name>content</name>-&gt;<name>GetIDAttributeName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>idAtom</name></expr>)</condition><then>
  <block>{
    <expr_stmt><expr>*<name>aReturn</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr>*<name>aReturn</name> = <call><name><name>mNodeInfo</name>-&gt;<name>Equals</name></name><argument_list>(<argument><expr><name>idAtom</name></expr></argument>, <argument><expr><name>kNameSpaceID_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>GetSchemaTypeInfo</name></name><parameter_list>(<param><decl><type><name>nsIDOM3TypeInfo</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>LookupPrefix</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aNamespaceURI</name></decl></param>,
                             <param><decl><type><name>nsAString</name>&amp;</type> <name>aPrefix</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>nsINode</name>::<name>LookupPrefix</name></name><argument_list>(<argument><expr><name>aNamespaceURI</name></expr></argument>, <argument><expr><name>aPrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMAttribute</name>::<name>LookupNamespaceURI</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aNamespacePrefix</name></decl></param>,
                                   <param><decl><type><name>nsAString</name>&amp;</type> <name>aNamespaceURI</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>nsINode</name>::<name>LookupNamespaceURI</name></name><argument_list>(<argument><expr><name>aNamespacePrefix</name></expr></argument>, <argument><expr><name>aNamespaceURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsDOMAttribute</name>::<name>IsNodeOfType</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aFlags</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
    <return>return <expr>!(<name>aFlags</name> &amp; ~<name>eATTRIBUTE</name>)</expr>;</return>
}</block></function>

<function><type><name>PRUint32</name></type>
<name><name>nsDOMAttribute</name>::<name>GetChildCount</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><call><name>GetChildCount</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsIContent</name> *</type>
<name><name>nsDOMAttribute</name>::<name>GetChildAt</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aIndex</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <comment type="line">// Don't need to check result of EnsureChildState since mChild will be null.</comment>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>hasChild</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>EnsureChildState</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>hasChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>aIndex</name> == 0 &amp;&amp; <name>hasChild</name> ? <name>mChild</name> : <name>nsnull</name></expr>;</return>
}</block></function>

<function><type><name>nsIContent</name> * <specifier>const</specifier> *</type>
<name><name>nsDOMAttribute</name>::<name>GetChildArray</name></name><parameter_list>(<param><decl><type><name>PRUint32</name>*</type> <name>aChildCount</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <expr_stmt><expr>*<name>aChildCount</name> = <call><name>GetChildCount</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr>&amp;<name>mChild</name></expr>;</return>
}</block></function>

<function><type><name>PRInt32</name></type>
<name><name>nsDOMAttribute</name>::<name>IndexOf</name></name><parameter_list>(<param><decl><type><name>nsINode</name>*</type> <name>aPossibleChild</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <comment type="line">// No need to call EnsureChildState here. If we don't already have a child</comment>
  <comment type="line">// then aPossibleChild can't possibly be our child.</comment>
  <if>if <condition>(<expr>!<name>aPossibleChild</name> || <name>aPossibleChild</name> != <name>mChild</name></expr>)</condition><then> <block>{
    <return>return <expr>-1</expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>hasChild</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>EnsureChildState</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>hasChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>hasChild</name> ? 0 : -1</expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDOMAttribute</name>::<name>InsertChildAt</name></name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type> <name>aKid</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aIndex</name></decl></param>,
                              <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDOMAttribute</name>::<name>AppendChildTo</name></name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type> <name>aKid</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDOMAttribute</name>::<name>RemoveChildAt</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aIndex</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aMutationEvent</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aMutationEvent</name></expr></argument>, <argument><expr>"Someone tried to inhibit mutations on attribute child removal."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>aIndex</name> != 0 || !<name>mChild</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>child</name> <init>= <expr><name>mChild</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>nsMutationGuard</name>::<name>DidMutate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>mozAutoDocUpdate</name></type> <name>updateBatch</name><argument_list>(<argument><expr><call><name>GetOwnerDoc</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>UPDATE_CONTENT_MODEL</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsMutationGuard</name></type> <name>guard</name></decl>;</decl_stmt>

  <function_decl><type><name>mozAutoSubtreeModified</name></type> <name>subtree</name><parameter_list>(<param><decl><type><name>nsnull</name></type></decl></param>, <param><decl><type><name>nsnull</name></type></decl></param>)</parameter_list>;</function_decl>
  <if>if <condition>(<expr><name>aNotify</name> &amp;&amp;
      <call><name><name>nsContentUtils</name>::<name>HasMutationListeners</name></name><argument_list>(<argument><expr><name>mChild</name></expr></argument>,
                                           <argument><expr><name>NS_EVENT_BITS_MUTATION_NODEREMOVED</name></expr></argument>,
                                           <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>mozAutoRemovableBlockerRemover</name></type> <name>blockerRemover</name><argument_list>(<argument><expr><call><name>GetOwnerDoc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <function_decl><type><name>nsMutationEvent</name></type> <name>mutation</name><parameter_list>(<param><decl><type><name>PR_TRUE</name></type></decl></param>, <param><decl><type><name>NS_MUTATION_NODEREMOVED</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name><name>mutation</name>.<name>mRelatedNode</name></name> =
      <call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIAttribute</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>subtree</name>.<name>UpdateTarget</name></name><argument_list>(<argument><expr><call><name>GetOwnerDoc</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>nsEventDispatcher</name>::<name>Dispatch</name></name><argument_list>(<argument><expr><name>mChild</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr>&amp;<name>mutation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr><call><name><name>guard</name>.<name>Mutated</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call> &amp;&amp; <name>mChild</name> != <name>child</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name>mChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsTextNode</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>child</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>-&gt;<call><name>UnbindFromAttribute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsString</name></type> <name>nullString</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SetDOMStringToNull</name><argument_list>(<argument><expr><name>nullString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SetValue</name><argument_list>(<argument><expr><name>nullString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDOMAttribute</name>::<name>PreHandleEvent</name></name><parameter_list>(<param><decl><type><name>nsEventChainPreVisitor</name>&amp;</type> <name>aVisitor</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name><name>aVisitor</name>.<name>mCanHandle</name></name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDOMAttribute</name>::<name>PostHandleEvent</name></name><parameter_list>(<param><decl><type><name>nsEventChainPostVisitor</name>&amp;</type> <name>aVisitor</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDOMAttribute</name>::<name>DispatchDOMEvent</name></name><parameter_list>(<param><decl><type><name>nsEvent</name>*</type> <name>aEvent</name></decl></param>, <param><decl><type><name>nsIDOMEvent</name>*</type> <name>aDOMEvent</name></decl></param>,
                                 <param><decl><type><name>nsPresContext</name>*</type> <name>aPresContext</name></decl></param>,
                                 <param><decl><type><name>nsEventStatus</name>*</type> <name>aEventStatus</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsEventDispatcher</name>::<name>DispatchDOMEvent</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsINode</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><name>aEvent</name></expr></argument>, <argument><expr><name>aDOMEvent</name></expr></argument>,
                                             <argument><expr><name>aPresContext</name></expr></argument>, <argument><expr><name>aEventStatus</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsIEventListenerManager</name>*</type>
<name><name>nsDOMAttribute</name>::<name>GetListenerManager</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aCreateIfNotFound</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsContentUtils</name>::<name>GetListenerManager</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aCreateIfNotFound</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDOMAttribute</name>::<name>AddEventListenerByIID</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventListener</name> *</type><name>aListener</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>nsIID</name>&amp;</type> <name>aIID</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIEventListenerManager</name>*</type> <name>elm</name> <init>= <expr><call><name>GetListenerManager</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>elm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>elm</name>-&gt;<name>AddEventListenerByIID</name></name><argument_list>(<argument><expr><name>aListener</name></expr></argument>, <argument><expr><name>aIID</name></expr></argument>, <argument><expr><name>NS_EVENT_FLAG_BUBBLE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDOMAttribute</name>::<name>RemoveEventListenerByIID</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventListener</name> *</type><name>aListener</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>nsIID</name>&amp;</type> <name>aIID</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIEventListenerManager</name>*</type> <name>elm</name> <init>= <expr><call><name>GetListenerManager</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>elm</name> ? 
    <call><name><name>elm</name>-&gt;<name>RemoveEventListenerByIID</name></name><argument_list>(<argument><expr><name>aListener</name></expr></argument>, <argument><expr><name>aIID</name></expr></argument>, <argument><expr><name>NS_EVENT_FLAG_BUBBLE</name></expr></argument>)</argument_list></call> :
    <name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDOMAttribute</name>::<name>GetSystemEventGroup</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventGroup</name>**</type> <name>aGroup</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIEventListenerManager</name>*</type> <name>elm</name> <init>= <expr><call><name>GetListenerManager</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>elm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>elm</name>-&gt;<name>GetSystemEventGroupLM</name></name><argument_list>(<argument><expr><name>aGroup</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDOMAttribute</name>::<name>EnsureChildState</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aSetText</name></decl></param>, <param><decl><type><name>PRBool</name> &amp;</type><name>aHasChild</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <expr_stmt><expr><name>aHasChild</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsDOMAttribute</name>*</type> <name>mutableThis</name> <init>= <expr><call><name><name>const_cast</name><argument_list>&lt;<argument><expr><name>nsDOMAttribute</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>value</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mutableThis</name>-&gt;<name>GetValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>mChild</name> &amp;&amp; !<call><name><name>value</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_NewTextNode</name><argument_list>(<argument><expr>&amp;<name><name>mutableThis</name>-&gt;<name>mChild</name></name></expr></argument>,
                                 <argument><expr><call><name><name>mNodeInfo</name>-&gt;<name>NodeInfoManager</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsTextNode</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mChild</name></expr></argument>)</argument_list></call>-&gt;<call><name>BindToAttribute</name><argument_list>(<argument><expr><name>mutableThis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><name>aHasChild</name> = !<call><name><name>value</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>aSetText</name> &amp;&amp; <name>aHasChild</name></expr>)</condition><then> <block>{
    <comment type="line">// aNotify should probably be PR_TRUE sometimes, but it's unlikely that</comment>
    <comment type="line">// anyone cares. And we aren't updating the node when the attribute changes</comment>
    <comment type="line">// anyway so any notifications are way late.</comment>
    <expr_stmt><expr><call><name><name>mChild</name>-&gt;<name>SetText</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDOMAttribute</name>::<name>Initialize</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><name>sInitialized</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDOMAttribute</name>::<name>Shutdown</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><name>sInitialized</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
}</block></function>
</unit>
