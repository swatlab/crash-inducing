<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="005a6c6ffa310c8c457283f75ed98011c1b07dbd.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Author: Kyle Yuan (kyle.yuan@sun.com)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIBoxObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMXULElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMXULMultSelectCntrlEl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMXULTreeElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsITreeSelection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsXULTreeAccessibleWrap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIMutableArray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsComponentManagerUtils.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_ACCESSIBILITY_ATK</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIAccessibleTable.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* static */</comment>
<function><type><name>PRBool</name></type> <name><name>nsXULTreeAccessible</name>::<name>IsColumnHidden</name></name><parameter_list>(<param><decl><type><name>nsITreeColumn</name> *</type><name>aColumn</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>element</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aColumn</name>-&gt;<name>GetElement</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>content</name>-&gt;<name>AttrValueIs</name></name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsAccessibilityAtoms</name>::<name>hidden</name></name></expr></argument>,
                              <argument><expr><name><name>nsAccessibilityAtoms</name>::<name>_true</name></name></expr></argument>, <argument><expr><name>eCaseMatters</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* static */</comment>
<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsITreeColumn</name></expr></argument>&gt;</argument_list></name></type> <name><name>nsXULTreeAccessible</name>::<name>GetNextVisibleColumn</name></name><parameter_list>(<param><decl><type><name>nsITreeColumn</name> *</type><name>aColumn</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Skip hidden columns.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumn</name></expr></argument>&gt;</argument_list></name></type> <name>nextColumn</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aColumn</name>-&gt;<name>GetNext</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>nextColumn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>nextColumn</name> &amp;&amp; <call><name>IsColumnHidden</name><argument_list>(<argument><expr><name>nextColumn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumn</name></expr></argument>&gt;</argument_list></name></type> <name>tempColumn</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>nextColumn</name>-&gt;<name>GetNext</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>tempColumn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>nextColumn</name>.<name>swap</name></name><argument_list>(<argument><expr><name>tempColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>

  <decl_stmt><decl><type><name>nsITreeColumn</name> *</type><name>retCol</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>nextColumn</name>.<name>swap</name></name><argument_list>(<argument><expr><name>retCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>retCol</name></expr>;</return>
}</block></function>

<comment type="block">/* static */</comment>
<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsITreeColumn</name></expr></argument>&gt;</argument_list></name></type> <name><name>nsXULTreeAccessible</name>::<name>GetFirstVisibleColumn</name></name><parameter_list>(<param><decl><type><name>nsITreeBoxObject</name> *</type><name>aTree</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumns</name></expr></argument>&gt;</argument_list></name></type> <name>cols</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumn</name></expr></argument>&gt;</argument_list></name></type> <name>column</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aTree</name>-&gt;<name>GetColumns</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>cols</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>cols</name>-&gt;<name>GetFirstColumn</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><name>column</name> &amp;&amp; <call><name>IsColumnHidden</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>column</name> = <call><name>GetNextVisibleColumn</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsITreeColumn</name> *</type><name>retCol</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>column</name>.<name>swap</name></name><argument_list>(<argument><expr><name>retCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>retCol</name></expr>;</return>
}</block></function>

<comment type="block">/* static */</comment>
<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsITreeColumn</name></expr></argument>&gt;</argument_list></name></type> <name><name>nsXULTreeAccessible</name>::<name>GetLastVisibleColumn</name></name><parameter_list>(<param><decl><type><name>nsITreeBoxObject</name> *</type><name>aTree</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumns</name></expr></argument>&gt;</argument_list></name></type> <name>cols</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumn</name></expr></argument>&gt;</argument_list></name></type> <name>column</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aTree</name>-&gt;<name>GetColumns</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>cols</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>cols</name>-&gt;<name>GetLastColumn</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// Skip hidden columns.</comment>
  <while>while <condition>(<expr><name>column</name> &amp;&amp; <call><name>IsColumnHidden</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumn</name></expr></argument>&gt;</argument_list></name></type> <name>tempColumn</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>column</name>-&gt;<name>GetPrevious</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>tempColumn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>column</name>.<name>swap</name></name><argument_list>(<argument><expr><name>tempColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsITreeColumn</name> *</type><name>retCol</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>column</name>.<name>swap</name></name><argument_list>(<argument><expr><name>retCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>retCol</name></expr>;</return>
}</block></function>

<comment type="line">// ---------- nsXULTreeAccessible ----------</comment>

<constructor><name><name>nsXULTreeAccessible</name>::<name>nsXULTreeAccessible</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name> *</type><name>aDOMNode</name></decl></param>, <param><decl><type><name>nsIWeakReference</name> *</type><name>aShell</name></decl></param>)</parameter_list><member_list>:
<call><name>nsXULSelectableAccessible</name><argument_list>(<argument><expr><name>aDOMNode</name></expr></argument>, <argument><expr><name>aShell</name></expr></argument>)</argument_list></call>,
<call><name>mAccessNodeCache</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>

</member_list><block>{
  <expr_stmt><expr><call><name>GetTreeBoxObject</name><argument_list>(<argument><expr><name>aDOMNode</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mTree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>mTree</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>mTree</name>-&gt;<name>GetView</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mTreeView</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>mTree</name> &amp;&amp; <name>mTreeView</name></expr></argument>, <argument><expr>"Can't get mTree or mTreeView!\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mAccessNodeCache</name> = new <name>nsAccessNodeHashtable</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mAccessNodeCache</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>kDefaultTreeCacheSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<macro><name>NS_IMPL_ISUPPORTS_INHERITED1</name><argument_list>(<argument>nsXULTreeAccessible</argument>, <argument>nsXULSelectableAccessible</argument>, <argument>nsIAccessibleTreeCache</argument>)</argument_list></macro>
                                                                                                       


<comment type="line">// Get the nsITreeBoxObject interface from any levels DOMNode under the &lt;tree&gt;</comment>
<function><type><name>void</name></type> <name><name>nsXULTreeAccessible</name>::<name>GetTreeBoxObject</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name> *</type><name>aDOMNode</name></decl></param>, <param><decl><type><name>nsITreeBoxObject</name> **</type><name>aBoxObject</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>parentNode</name></decl>, <decl><type ref="prev"/><name>currentNode</name></decl>;</decl_stmt>

  <comment type="line">// Find DOMNode's parents recursively until reach the &lt;tree&gt; tag</comment>
  <expr_stmt><expr><name>currentNode</name> = <name>aDOMNode</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>currentNode</name></expr>)</condition> <block>{
    <expr_stmt><expr><call><name><name>currentNode</name>-&gt;<name>GetLocalName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name><name>name</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"tree"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <comment type="line">// We will get the nsITreeBoxObject from the tree node</comment>
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMXULElement</name></expr></argument>&gt;</argument_list></name></type> <name>xulElement</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>currentNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>xulElement</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIBoxObject</name></expr></argument>&gt;</argument_list></name></type> <name>box</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>xulElement</name>-&gt;<name>GetBoxObject</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeBoxObject</name></expr></argument>&gt;</argument_list></name></type> <name>treeBox</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>treeBox</name></expr>)</condition><then> <block>{
          <expr_stmt><expr>*<name>aBoxObject</name> = <name>treeBox</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aBoxObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        }</block></then></if>
      }</block></then></if>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>currentNode</name>-&gt;<name>GetParentNode</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>parentNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>currentNode</name> = <name>parentNode</name></expr>;</expr_stmt>
  }</block></while>

  <expr_stmt><expr>*<name>aBoxObject</name> = <name>nsnull</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsXULTreeAccessible</name>::<name>GetState</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>aState</name></decl></param>, <param><decl><type><name>PRUint32</name> *</type><name>aExtraState</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Get focus status from base class</comment>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsAccessible</name>::<name>GetState</name></name><argument_list>(<argument><expr><name>aState</name></expr></argument>, <argument><expr><name>aExtraState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>mDOMNode</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
  
  <comment type="line">// see if we are multiple select if so set ourselves as such</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>element</name> <argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>element</name></expr>)</condition><then> <block>{
    <comment type="line">// the default selection type is multiple</comment>
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>selType</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>element</name>-&gt;<name>GetAttribute</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"seltype"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>selType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name><name>selType</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call> || !<call><name><name>selType</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"single"</expr></argument>)</argument_list></call></expr>)</condition><then>
      <expr_stmt><expr>*<name>aState</name> |= <name><name>nsIAccessibleStates</name>::<name>STATE_MULTISELECTABLE</name></name></expr>;</expr_stmt></then></if>
  }</block></then></if>

  <expr_stmt><expr>*<name>aState</name> |= <name><name>nsIAccessibleStates</name>::<name>STATE_READONLY</name></name> |
             <name><name>nsIAccessibleStates</name>::<name>STATE_FOCUSABLE</name></name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// The value is the first selected child</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeAccessible</name>::<name>GetValue</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>_retval</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>_retval</name>.<name>Truncate</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mTree</name> &amp;&amp; <name>mTreeView</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeSelection</name></expr></argument>&gt;</argument_list></name></type> <name>selection</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>GetSelection</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>selection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>! <name>selection</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>currentIndex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>selectItem</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>selection</name>-&gt;<name>GetCurrentIndex</name></name><argument_list>(<argument><expr>&amp;<name>currentIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>currentIndex</name> &gt;= 0</expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumn</name></expr></argument>&gt;</argument_list></name></type> <name>keyCol</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumns</name></expr></argument>&gt;</argument_list></name></type> <name>cols</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mTree</name>-&gt;<name>GetColumns</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>cols</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>cols</name>-&gt;<name>GetKeyColumn</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>keyCol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <return>return <expr><call><name><name>mTreeView</name>-&gt;<name>GetCellText</name></name><argument_list>(<argument><expr><name>currentIndex</name></expr></argument>, <argument><expr><name>keyCol</name></expr></argument>, <argument><expr><name>_retval</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeAccessible</name>::<name>Shutdown</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><name>mTree</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mTreeView</name> = <name>nsnull</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>nsXULSelectableAccessible</name>::<name>Shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>mAccessNodeCache</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>ClearCache</name><argument_list>(<argument><expr>*<name>mAccessNodeCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>delete <name>mAccessNodeCache</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mAccessNodeCache</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeAccessible</name>::<name>GetRole</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>aRole</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>mTree</name></expr></argument>, <argument><expr>"No tree view"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>colCount</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name>GetColumnCount</name><argument_list>(<argument><expr><name>mTree</name></expr></argument>, <argument><expr>&amp;<name>colCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; (<name>colCount</name> &gt; 1)</expr>)</condition><then>
    <expr_stmt><expr>*<name>aRole</name> = <name><name>nsIAccessibleRole</name>::<name>ROLE_TREE_TABLE</name></name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr>*<name>aRole</name> = <name><name>nsIAccessibleRole</name>::<name>ROLE_OUTLINE</name></name></expr>;</expr_stmt></else></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeAccessible</name>::<name>GetFirstChild</name></name><parameter_list>(<param><decl><type><name>nsIAccessible</name> **</type><name>aFirstChild</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>nsAccessible</name>::<name>GetFirstChild</name></name><argument_list>(<argument><expr><name>aFirstChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// in normal case, tree's first child should be treecols, if it is not here, </comment>
  <comment type="line">//   use the first row as tree's first child</comment>
  <if>if <condition>(<expr>*<name>aFirstChild</name> == <name>nsnull</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mTree</name> &amp;&amp; <name>mTreeView</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PRInt32</name></type> <name>rowCount</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>GetRowCount</name></name><argument_list>(<argument><expr>&amp;<name>rowCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rowCount</name> &gt; 0</expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumn</name></expr></argument>&gt;</argument_list></name></type> <name>column</name> <init>= <expr><call><name>GetFirstVisibleColumn</name><argument_list>(<argument><expr><name>mTree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name>GetCachedTreeitemAccessible</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>aFirstChild</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeAccessible</name>::<name>GetLastChild</name></name><parameter_list>(<param><decl><type><name>nsIAccessible</name> **</type><name>aLastChild</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mTree</name> &amp;&amp; <name>mTreeView</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>rowCount</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>GetRowCount</name></name><argument_list>(<argument><expr>&amp;<name>rowCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>rowCount</name> &gt; 0</expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumn</name></expr></argument>&gt;</argument_list></name></type> <name>column</name> <init>= <expr><call><name>GetLastVisibleColumn</name><argument_list>(<argument><expr><name>mTree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>GetCachedTreeitemAccessible</name><argument_list>(<argument><expr><name>rowCount</name> - 1</expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>aLastChild</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then>
  <else>else <comment type="line">// if there is not any rows, use treecols as tree's last child</comment>
    <expr_stmt><expr><call><name><name>nsAccessible</name>::<name>GetLastChild</name></name><argument_list>(<argument><expr><name>aLastChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// tree's children count is row count + treecols count</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeAccessible</name>::<name>GetChildCount</name></name><parameter_list>(<param><decl><type><name>PRInt32</name> *</type><name>aAccChildCount</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mTree</name> &amp;&amp; <name>mTreeView</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>nsAccessible</name>::<name>GetChildCount</name></name><argument_list>(<argument><expr><name>aAccChildCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>*<name>aAccChildCount</name> != <name>eChildCountUninitialized</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>rowCount</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>GetRowCount</name></name><argument_list>(<argument><expr>&amp;<name>rowCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>aAccChildCount</name> += <name>rowCount</name></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeAccessible</name>::<name>GetFocusedChild</name></name><parameter_list>(<param><decl><type><name>nsIAccessible</name> **</type><name>aFocusedChild</name></decl></param>)</parameter_list> 
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMXULMultiSelectControlElement</name></expr></argument>&gt;</argument_list></name></type> <name>multiSelect</name> <init>=
    <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>multiSelect</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>row</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>multiSelect</name>-&gt;<name>GetCurrentIndex</name></name><argument_list>(<argument><expr>&amp;<name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>row</name> &gt;= 0</expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>GetCachedTreeitemAccessible</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aFocusedChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>*<name>aFocusedChild</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NS_OK</name></expr>;</return>  <comment type="line">// Already addref'd by getter</comment>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>
  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aFocusedChild</name> = <name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// nsIAccessible::getChildAtPoint(in long x, in long y)</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsXULTreeAccessible</name>::<name>GetChildAtPoint</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aX</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aY</name></decl></param>,
                                     <param><decl><type><name>nsIAccessible</name> **</type><name>aAccessible</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIFrame</name> *</type><name>frame</name> <init>= <expr><call><name>GetFrame</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>frame</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsPresContext</name> *</type><name>presContext</name> <init>= <expr><call><name><name>frame</name>-&gt;<name>PresContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>presShell</name> <init>= <expr><call><name><name>presContext</name>-&gt;<name>PresShell</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsIFrame</name> *</type><name>rootFrame</name> <init>= <expr><call><name><name>presShell</name>-&gt;<name>GetRootFrame</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>rootFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIntRect</name></type> <name>rootRect</name> <init>= <expr><call><name><name>rootFrame</name>-&gt;<name>GetScreenRectExternal</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>clientX</name> <init>= <expr><call><name><name>presContext</name>-&gt;<name>AppUnitsToIntCSSPixels</name></name><argument_list>(
    <argument><expr><call><name><name>presContext</name>-&gt;<name>DevPixelsToAppUnits</name></name><argument_list>(<argument><expr><name>aX</name> - <name><name>rootRect</name>.<name>x</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>clientY</name> <init>= <expr><call><name><name>presContext</name>-&gt;<name>AppUnitsToIntCSSPixels</name></name><argument_list>(
    <argument><expr><call><name><name>presContext</name>-&gt;<name>DevPixelsToAppUnits</name></name><argument_list>(<argument><expr><name>aY</name> - <name><name>rootRect</name>.<name>y</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>row</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumn</name></expr></argument>&gt;</argument_list></name></type> <name>column</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>childEltUnused</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mTree</name>-&gt;<name>GetCellAt</name></name><argument_list>(<argument><expr><name>clientX</name></expr></argument>, <argument><expr><name>clientY</name></expr></argument>, <argument><expr>&amp;<name>row</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><name>childEltUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// If we failed to find tree cell for the given point then it might be</comment>
  <comment type="line">// tree columns.</comment>
  <if>if <condition>(<expr><name>row</name> == -1 || !<name>column</name></expr>)</condition><then>
    <return>return <expr><call><name><name>nsXULSelectableAccessible</name>::<name>GetChildAtPoint</name></name><argument_list>(<argument><expr><name>aX</name></expr></argument>, <argument><expr><name>aY</name></expr></argument>, <argument><expr><name>aAccessible</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><call><name>GetCachedTreeitemAccessible</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>aAccessible</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">// Ask treeselection to get all selected children</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeAccessible</name>::<name>GetSelectedChildren</name></name><parameter_list>(<param><decl><type><name>nsIArray</name> **</type><name>_retval</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>_retval</name> = <name>nsnull</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mTree</name> &amp;&amp; <name>mTreeView</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeSelection</name></expr></argument>&gt;</argument_list></name></type> <name>selection</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>GetSelection</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>selection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>selection</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIMutableArray</name></expr></argument>&gt;</argument_list></name></type> <name>selectedAccessibles</name> <init>=
    <expr><call><name>do_CreateInstance</name><argument_list>(<argument><expr><name>NS_ARRAY_CONTRACTID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>selectedAccessibles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>rowIndex</name></decl>, <decl><type ref="prev"/><name>rowCount</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>isSelected</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>GetRowCount</name></name><argument_list>(<argument><expr>&amp;<name>rowCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>rowIndex</name> = 0</expr>;</init> <condition><expr><name>rowIndex</name> &lt; <name>rowCount</name></expr>;</condition> <incr><expr><name>rowIndex</name>++</expr></incr>) <block>{
    <expr_stmt><expr><call><name><name>selection</name>-&gt;<name>IsSelected</name></name><argument_list>(<argument><expr><name>rowIndex</name></expr></argument>, <argument><expr>&amp;<name>isSelected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>isSelected</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessible</name></expr></argument>&gt;</argument_list></name></type> <name>tempAccess</name></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name>GetCachedTreeitemAccessible</name><argument_list>(<argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>tempAccess</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> || !<name>tempAccess</name></expr>)</condition><then>

        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>
      <expr_stmt><expr><call><name><name>selectedAccessibles</name>-&gt;<name>AppendElement</name></name><argument_list>(<argument><expr><name>tempAccess</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>length</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>selectedAccessibles</name>-&gt;<name>GetLength</name></name><argument_list>(<argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>length</name> != 0</expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>_retval</name> = <name>selectedAccessibles</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>_retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeAccessible</name>::<name>GetSelectionCount</name></name><parameter_list>(<param><decl><type><name>PRInt32</name> *</type><name>aSelectionCount</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aSelectionCount</name> = 0</expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mTree</name> &amp;&amp; <name>mTreeView</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeSelection</name></expr></argument>&gt;</argument_list></name></type> <name>selection</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>GetSelection</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>selection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>selection</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>selection</name>-&gt;<name>GetCount</name></name><argument_list>(<argument><expr><name>aSelectionCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeAccessible</name>::<name>ChangeSelection</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aIndex</name></decl></param>, <param><decl><type><name>PRUint8</name></type> <name>aMethod</name></decl></param>, <param><decl><type><name>PRBool</name> *</type><name>aSelState</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mTree</name> &amp;&amp; <name>mTreeView</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeSelection</name></expr></argument>&gt;</argument_list></name></type> <name>selection</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>GetSelection</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>selection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>selection</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>selection</name>-&gt;<name>IsSelected</name></name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>, <argument><expr><name>aSelState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>(!(*<name>aSelState</name>) &amp;&amp; <name>eSelection_Add</name> == <name>aMethod</name>) || 
        ((*<name>aSelState</name>) &amp;&amp; <name>eSelection_Remove</name> == <name>aMethod</name>)</expr>)</condition><then>
      <return>return <expr><call><name><name>selection</name>-&gt;<name>ToggleSelect</name></name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeAccessible</name>::<name>AddChildToSelection</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aIndex</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRBool</name></type> <name>isSelected</name></decl>;</decl_stmt>
  <return>return <expr><call><name>ChangeSelection</name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>, <argument><expr><name>eSelection_Add</name></expr></argument>, <argument><expr>&amp;<name>isSelected</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeAccessible</name>::<name>RemoveChildFromSelection</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aIndex</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRBool</name></type> <name>isSelected</name></decl>;</decl_stmt>
  <return>return <expr><call><name>ChangeSelection</name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>, <argument><expr><name>eSelection_Remove</name></expr></argument>, <argument><expr>&amp;<name>isSelected</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeAccessible</name>::<name>IsChildSelected</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aIndex</name></decl></param>, <param><decl><type><name>PRBool</name> *</type><name>_retval</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>ChangeSelection</name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>, <argument><expr><name>eSelection_GetState</name></expr></argument>, <argument><expr><name>_retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeAccessible</name>::<name>ClearSelection</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mTree</name> &amp;&amp; <name>mTreeView</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeSelection</name></expr></argument>&gt;</argument_list></name></type> <name>selection</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>GetSelection</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>selection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>selection</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>selection</name>-&gt;<name>ClearSelection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeAccessible</name>::<name>RefSelection</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aIndex</name></decl></param>, <param><decl><type><name>nsIAccessible</name> **</type><name>_retval</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>_retval</name> = <name>nsnull</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mTree</name> &amp;&amp; <name>mTreeView</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeSelection</name></expr></argument>&gt;</argument_list></name></type> <name>selection</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>GetSelection</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>selection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>selection</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>rowIndex</name></decl>, <decl><type ref="prev"/><name>rowCount</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>selCount</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>isSelected</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>GetRowCount</name></name><argument_list>(<argument><expr>&amp;<name>rowCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>rowIndex</name> = 0</expr>;</init> <condition><expr><name>rowIndex</name> &lt; <name>rowCount</name></expr>;</condition> <incr><expr><name>rowIndex</name>++</expr></incr>) <block>{
    <expr_stmt><expr><call><name><name>selection</name>-&gt;<name>IsSelected</name></name><argument_list>(<argument><expr><name>rowIndex</name></expr></argument>, <argument><expr>&amp;<name>isSelected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>isSelected</name></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>selCount</name> == <name>aIndex</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>GetCachedTreeitemAccessible</name><argument_list>(<argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>_retval</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then></if>
      <expr_stmt><expr><name>selCount</name>++</expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeAccessible</name>::<name>SelectAllSelection</name></name><parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>_retval</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>_retval</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mTree</name> &amp;&amp; <name>mTreeView</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// see if we are multiple select if so set ourselves as such</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>element</name> <argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>element</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>selType</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>element</name>-&gt;<name>GetAttribute</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"seltype"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>selType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name><name>selType</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call> || !<call><name><name>selType</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"single"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>_retval</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeSelection</name></expr></argument>&gt;</argument_list></name></type> <name>selection</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>GetSelection</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>selection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>selection</name></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>selection</name>-&gt;<name>SelectAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// nsIAccessible nsIAccessibleTreeCache::</comment>
<comment type="line">//   GetCachedTreeitemAccessible(in long aRow, nsITreeColumn* aColumn)</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsXULTreeAccessible</name>::<name>GetCachedTreeitemAccessible</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aRow</name></decl></param>,
                                                 <param><decl><type><name>nsITreeColumn</name>*</type> <name>aColumn</name></decl></param>,
                                                 <param><decl><type><name>nsIAccessible</name>**</type> <name>aAccessible</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aAccessible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aAccessible</name> = <name>nsnull</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>mAccessNodeCache</name></expr></argument>, <argument><expr>"No accessibility cache for tree"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>mTree</name> &amp;&amp; <name>mTreeView</name></expr></argument>, <argument><expr>"Can't get mTree or mTreeView!\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumn</name></expr></argument>&gt;</argument_list></name></type> <name>col</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_ACCESSIBILITY_ATK</name></cpp:ifdef>
  <expr_stmt><expr><name>col</name> = <name>aColumn</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>columnIndex</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>col</name> &amp;&amp; <name>mTree</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumns</name></expr></argument>&gt;</argument_list></name></type> <name>cols</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mTree</name>-&gt;<name>GetColumns</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>cols</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>cols</name>-&gt;<name>GetKeyColumn</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  }</block></then></if>

  <comment type="line">// Do not create accessible for treeitem if there is no column in the tree</comment>
  <comment type="line">// because it doesn't render treeitems properly.</comment>
  <if>if <condition>(<expr>!<name>col</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name><name>col</name>-&gt;<name>GetIndex</name></name><argument_list>(<argument><expr>&amp;<name>columnIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessNode</name></expr></argument>&gt;</argument_list></name></type> <name>accessNode</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetCacheEntry</name><argument_list>(<argument><expr>*<name>mAccessNodeCache</name></expr></argument>, <argument><expr>(<name>void</name>*)(<name>aRow</name> * <name>kMaxTreeColumns</name> + <name>columnIndex</name>)</expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>accessNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>accessNode</name></expr>)</condition><then>
  <block>{
    <expr_stmt><expr><name>accessNode</name> = new <call><name>nsXULTreeitemAccessibleWrap</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>mDOMNode</name></expr></argument>, <argument><expr><name>mWeakShell</name></expr></argument>, <argument><expr><name>aRow</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsPIAccessNode</name></expr></argument>&gt;</argument_list></name></type> <name>privateAccessNode</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>accessNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>privateAccessNode</name></expr>)</condition><then>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>privateAccessNode</name>-&gt;<name>Init</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PutCacheEntry</name><argument_list>(<argument><expr>*<name>mAccessNodeCache</name></expr></argument>, <argument><expr>(<name>void</name>*)(<name>aRow</name> * <name>kMaxTreeColumns</name> + <name>columnIndex</name>)</expr></argument>, <argument><expr><name>accessNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessible</name></expr></argument>&gt;</argument_list></name></type> <name>accessible</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>accessNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aAccessible</name> = <name>accessible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// void nsIAccessibleTreeCache::</comment>
<comment type="line">//   invalidateCache(in PRInt32 aRow, in PRInt32 aCount)</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsXULTreeAccessible</name>::<name>InvalidateCache</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aRow</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aCount</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Do not invalidate the cache if rows have been inserted.</comment>
  <if>if <condition>(<expr><name>aCount</name> &gt; 0</expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mTree</name> &amp;&amp; <name>mTreeView</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumns</name></expr></argument>&gt;</argument_list></name></type> <name>cols</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>mTree</name>-&gt;<name>GetColumns</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_ACCESSIBILITY_ATK</name></cpp:ifdef>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>colsCount</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>cols</name>-&gt;<name>GetCount</name></name><argument_list>(<argument><expr>&amp;<name>colsCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumn</name></expr></argument>&gt;</argument_list></name></type> <name>col</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>cols</name>-&gt;<name>GetKeyColumn</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>colIdx</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>col</name>-&gt;<name>GetIndex</name></name><argument_list>(<argument><expr>&amp;<name>colIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <for>for (<init><decl><type><name>PRInt32</name></type> <name>rowIdx</name> <init>= <expr><name>aRow</name></expr></init></decl>;</init> <condition><expr><name>rowIdx</name> &lt; <name>aRow</name> - <name>aCount</name></expr>;</condition> <incr><expr><name>rowIdx</name>++</expr></incr>) <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_ACCESSIBILITY_ATK</name></cpp:ifdef>
    <for>for (<init><decl><type><name>PRInt32</name></type> <name>colIdx</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>colIdx</name> &lt; <name>colsCount</name></expr>;</condition> <incr><expr>++<name>colIdx</name></expr></incr>) <block>{
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <decl_stmt><decl><type><name>void</name> *</type><name>key</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>void</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>rowIdx</name> * <name>kMaxTreeColumns</name> + <name>colIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessNode</name></expr></argument>&gt;</argument_list></name></type> <name>accessNode</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>GetCacheEntry</name><argument_list>(<argument><expr>*<name>mAccessNodeCache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>accessNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>accessNode</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessible</name></expr></argument>&gt;</argument_list></name></type> <name>accessible</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>accessNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessibleEvent</name></expr></argument>&gt;</argument_list></name></type> <name>event</name> <init>=
          <expr>new <call><name>nsAccEvent</name><argument_list>(<argument><expr><name><name>nsIAccessibleEvent</name>::<name>EVENT_DOM_DESTROY</name></name></expr></argument>,
                         <argument><expr><name>accessible</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>FireAccessibleEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mAccessNodeCache</name>-&gt;<name>Remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block>
  }</block></for>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>newRowCount</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>mTreeView</name>-&gt;<name>GetRowCount</name></name><argument_list>(<argument><expr>&amp;<name>newRowCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>oldRowCount</name> <init>= <expr><name>newRowCount</name> - <name>aCount</name></expr></init></decl>;</decl_stmt>

  <for>for (<init><decl><type><name>PRInt32</name></type> <name>rowIdx</name> <init>= <expr><name>newRowCount</name></expr></init></decl>;</init> <condition><expr><name>rowIdx</name> &lt; <name>oldRowCount</name></expr>;</condition> <incr><expr>++<name>rowIdx</name></expr></incr>) <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_ACCESSIBILITY_ATK</name></cpp:ifdef>
    <for>for (<init><decl><type><name>PRInt32</name></type> <name>colIdx</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>colIdx</name> &lt; <name>colsCount</name></expr>;</condition> <incr><expr>++<name>colIdx</name></expr></incr>) <block>{
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <decl_stmt><decl><type><name>void</name> *</type><name>key</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>void</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>rowIdx</name> * <name>kMaxTreeColumns</name> + <name>colIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>mAccessNodeCache</name>-&gt;<name>Remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
  }</block></for>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></for>

<comment type="line">// void nsIAccessibleTreeCache::</comment>
<comment type="line">//   treeViewInvalidated(in long aStartRow, in long aEndRow,</comment>
<comment type="line">//                       in long aStartCol, in long aEndCol);</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsXULTreeAccessible</name>::<name>TreeViewInvalidated</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aStartRow</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aEndRow</name></decl></param>,
                                         <param><decl><type><name>PRInt32</name></type> <name>aStartCol</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aEndCol</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mTree</name> &amp;&amp; <name>mTreeView</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>endRow</name> <init>= <expr><name>aEndRow</name></expr></init>, <name>endCol</name> <init>= <expr><name>aEndCol</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>endRow</name> == -1</expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>rowCount</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>mTreeView</name>-&gt;<name>GetRowCount</name></name><argument_list>(<argument><expr>&amp;<name>rowCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>endRow</name> = <name>rowCount</name> - 1</expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumns</name></expr></argument>&gt;</argument_list></name></type> <name>treeColumns</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mTree</name>-&gt;<name>GetColumns</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>treeColumns</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>treeColumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_ACCESSIBILITY_ATK</name></cpp:ifdef>
  <if>if <condition>(<expr><name>endCol</name> == -1</expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>colCount</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>treeColumns</name>-&gt;<name>GetCount</name></name><argument_list>(<argument><expr>&amp;<name>colCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>endCol</name> = <name>colCount</name> - 1</expr>;</expr_stmt>
  }</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumn</name></expr></argument>&gt;</argument_list></name></type> <name>col</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>treeColumns</name>-&gt;<name>GetKeyColumn</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>colIdx</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>col</name>-&gt;<name>GetIndex</name></name><argument_list>(<argument><expr>&amp;<name>colIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <for>for (<init><decl><type><name>PRInt32</name></type> <name>rowIdx</name> <init>= <expr><name>aStartRow</name></expr></init></decl>;</init> <condition><expr><name>rowIdx</name> &lt;= <name>endRow</name></expr>;</condition> <incr><expr>++<name>rowIdx</name></expr></incr>) <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_ACCESSIBILITY_ATK</name></cpp:ifdef>
    <for>for (<init><decl><type><name>PRInt32</name></type> <name>colIdx</name> <init>= <expr><name>aStartCol</name></expr></init></decl>;</init> <condition><expr><name>colIdx</name> &lt;= <name>endCol</name></expr>;</condition> <incr><expr>++<name>colIdx</name></expr></incr>)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{
      <decl_stmt><decl><type><name>void</name> *</type><name>key</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>void</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>rowIdx</name> * <name>kMaxTreeColumns</name> + <name>colIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessNode</name></expr></argument>&gt;</argument_list></name></type> <name>accessNode</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>GetCacheEntry</name><argument_list>(<argument><expr>*<name>mAccessNodeCache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>accessNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>accessNode</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessible</name></expr></argument>&gt;</argument_list></name></type> <name>acc</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>accessNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsPIAccessibleTreeItem</name></expr></argument>&gt;</argument_list></name></type> <name>treeItemAcc</name><argument_list>(
          <argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>accessNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>treeItemAcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>nsAutoString</name></type> <name>name</name></decl>, <decl><type ref="prev"/><name>cachedName</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name><name>acc</name>-&gt;<name>GetName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>rv</name> = <call><name><name>treeItemAcc</name>-&gt;<name>GetCachedName</name></name><argument_list>(<argument><expr><name>cachedName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>name</name> != <name>cachedName</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>nsAccUtils</name>::<name>FireAccEvent</name></name><argument_list>(<argument><expr><name><name>nsIAccessibleEvent</name>::<name>EVENT_NAME_CHANGE</name></name></expr></argument>, <argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>treeItemAcc</name>-&gt;<name>SetCachedName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
    }</block></for>
  }</block></for>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type> <name><name>nsXULTreeAccessible</name>::<name>GetColumnCount</name></name><parameter_list>(<param><decl><type><name>nsITreeBoxObject</name>*</type> <name>aBoxObject</name></decl></param>, <param><decl><type><name>PRInt32</name>*</type> <name>aCount</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>aBoxObject</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumns</name></expr></argument>&gt;</argument_list></name></type> <name>treeColumns</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aBoxObject</name>-&gt;<name>GetColumns</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>treeColumns</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>treeColumns</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>treeColumns</name>-&gt;<name>GetCount</name></name><argument_list>(<argument><expr><name>aCount</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">// ---------- nsXULTreeitemAccessible ---------- </comment>

<constructor><name><name>nsXULTreeitemAccessible</name>::<name>nsXULTreeitemAccessible</name></name><parameter_list>(<param><decl><type><name>nsIAccessible</name> *</type><name>aParent</name></decl></param>, <param><decl><type><name>nsIDOMNode</name> *</type><name>aDOMNode</name></decl></param>, <param><decl><type><name>nsIWeakReference</name> *</type><name>aShell</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aRow</name></decl></param>, <param><decl><type><name>nsITreeColumn</name>*</type> <name>aColumn</name></decl></param>)</parameter_list>
  <member_list>: <call><name>nsLeafAccessible</name><argument_list>(<argument><expr><name>aDOMNode</name></expr></argument>, <argument><expr><name>aShell</name></expr></argument>)</argument_list></call>
</member_list><block>{
  <expr_stmt><expr><name>mParent</name> = <name>aParent</name></expr>;</expr_stmt>  <comment type="line">// xxx todo: do we need this? We already have mParent on nsAccessible</comment>

  <expr_stmt><expr><call><name><name>nsXULTreeAccessible</name>::<name>GetTreeBoxObject</name></name><argument_list>(<argument><expr><name>aDOMNode</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mTree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>mTree</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>mTree</name>-&gt;<name>GetView</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mTreeView</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>mTree</name> &amp;&amp; <name>mTreeView</name></expr></argument>, <argument><expr>"Can't get mTree or mTreeView!\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Since the real tree item does not correspond to any DOMNode, use the row index to distinguish each item</comment>
  <expr_stmt><expr><name>mRow</name> = <name>aRow</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mColumn</name> = <name>aColumn</name></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>mColumn</name> &amp;&amp; <name>mTree</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumns</name></expr></argument>&gt;</argument_list></name></type> <name>cols</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mTree</name>-&gt;<name>GetColumns</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>cols</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>cols</name>-&gt;<name>GetKeyColumn</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mColumn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  }</block></then></if>
}</block></constructor>

<expr_stmt><expr><call><name>NS_IMPL_ISUPPORTS_INHERITED1</name><argument_list>(<argument><expr><name>nsXULTreeitemAccessible</name></expr></argument>, <argument><expr><name>nsLeafAccessible</name></expr></argument>,
                             <argument><expr><name>nsPIAccessibleTreeItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeitemAccessible</name>::<name>Shutdown</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><name>mTree</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mTreeView</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mColumn</name> = <name>nsnull</name></expr>;</expr_stmt>
  <return>return <expr><call><name><name>nsLeafAccessible</name>::<name>Shutdown</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeitemAccessible</name>::<name>GetName</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aName</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name>IsDefunct</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>GetCellText</name></name><argument_list>(<argument><expr><name>mRow</name></expr></argument>, <argument><expr><name>mColumn</name></expr></argument>, <argument><expr><name>aName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="line">// If there is still no name try the cell value:</comment>
  <comment type="line">// This is for graphical cells. We need tree/table view implementors to implement</comment>
  <comment type="line">// FooView::GetCellValue to return a meaningful string for cases where there is</comment>
  <comment type="line">// something shown in the cell (non-text) such as a star icon; in which case</comment>
  <comment type="line">// GetCellValue for that cell would return "starred" or "flagged" for example.</comment>
  <if>if <condition>(<expr><call><name><name>aName</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>GetCellValue</name></name><argument_list>(<argument><expr><name>mRow</name></expr></argument>, <argument><expr><name>mColumn</name></expr></argument>, <argument><expr><name>aName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeitemAccessible</name>::<name>GetUniqueID</name></name><parameter_list>(<param><decl><type><name>void</name> **</type><name>aUniqueID</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Since mDOMNode is same for all tree item, use |this| pointer as the unique Id</comment>
  <expr_stmt><expr>*<name>aUniqueID</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>void</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// nsPIAccessNode::init()</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsXULTreeitemAccessible</name>::<name>Init</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsLeafAccessible</name>::<name>Init</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>GetName</name><argument_list>(<argument><expr><name>mCachedName</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeitemAccessible</name>::<name>GetRole</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>aRole</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>colCount</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>nsXULTreeAccessible</name>::<name>GetColumnCount</name></name><argument_list>(<argument><expr><name>mTree</name></expr></argument>, <argument><expr>&amp;<name>colCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>colCount</name> &gt; 1</expr>)</condition><then>
    <expr_stmt><expr>*<name>aRole</name> = <name><name>nsIAccessibleRole</name>::<name>ROLE_CELL</name></name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr>*<name>aRole</name> = <name><name>nsIAccessibleRole</name>::<name>ROLE_OUTLINEITEM</name></name></expr>;</expr_stmt></else></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// Possible states: focused, focusable, selected, checkable, checked, </comment>
<comment type="line">// expanded/collapsed, invisible</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsXULTreeitemAccessible</name>::<name>GetState</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>aState</name></decl></param>, <param><decl><type><name>PRUint32</name> *</type><name>aExtraState</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aState</name> = 0</expr>;</expr_stmt>
  <if>if <condition>(<expr><name>aExtraState</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>aExtraState</name> = 0</expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><call><name>IsDefunct</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>aExtraState</name></expr>)</condition><then>
      <expr_stmt><expr>*<name>aExtraState</name> = <name><name>nsIAccessibleStates</name>::<name>EXT_STATE_DEFUNCT</name></name></expr>;</expr_stmt></then></if>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr>*<name>aState</name> = <name><name>nsIAccessibleStates</name>::<name>STATE_FOCUSABLE</name></name> |
            <name><name>nsIAccessibleStates</name>::<name>STATE_SELECTABLE</name></name></expr>;</expr_stmt>

  <comment type="line">// get expanded/collapsed state</comment>
  <if>if <condition>(<expr><call><name>IsExpandable</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRBool</name></type> <name>isContainerOpen</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>IsContainerOpen</name></name><argument_list>(<argument><expr><name>mRow</name></expr></argument>, <argument><expr>&amp;<name>isContainerOpen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>aState</name> |= <name>isContainerOpen</name>? <call><name>PRUint32</name><argument_list>(<argument><expr><name><name>nsIAccessibleStates</name>::<name>STATE_EXPANDED</name></name></expr></argument>)</argument_list></call>:
                                <call><name>PRUint32</name><argument_list>(<argument><expr><name><name>nsIAccessibleStates</name>::<name>STATE_COLLAPSED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// get selected state</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeSelection</name></expr></argument>&gt;</argument_list></name></type> <name>selection</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>GetSelection</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>selection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>selection</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRBool</name></type> <name>isSelected</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>selection</name>-&gt;<name>IsSelected</name></name><argument_list>(<argument><expr><name>mRow</name></expr></argument>, <argument><expr>&amp;<name>isSelected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>isSelected</name></expr>)</condition><then>
      <expr_stmt><expr>*<name>aState</name> |= <name><name>nsIAccessibleStates</name>::<name>STATE_SELECTED</name></name></expr>;</expr_stmt></then></if>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMXULMultiSelectControlElement</name></expr></argument>&gt;</argument_list></name></type> <name>multiSelect</name> <init>=
    <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>multiSelect</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>currentIndex</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>multiSelect</name>-&gt;<name>GetCurrentIndex</name></name><argument_list>(<argument><expr>&amp;<name>currentIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>currentIndex</name> == <name>mRow</name></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>aState</name> |= <name><name>nsIAccessibleStates</name>::<name>STATE_FOCUSED</name></name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>firstVisibleRow</name></decl>, <decl><type ref="prev"/><name>lastVisibleRow</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mTree</name>-&gt;<name>GetFirstVisibleRow</name></name><argument_list>(<argument><expr>&amp;<name>firstVisibleRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mTree</name>-&gt;<name>GetLastVisibleRow</name></name><argument_list>(<argument><expr>&amp;<name>lastVisibleRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>mRow</name> <argument_list>&lt; <argument><expr><name>firstVisibleRow</name> || <name>mRow</name></expr></argument> &gt;</argument_list></name> <name>lastVisibleRow</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>aState</name> |= <name><name>nsIAccessibleStates</name>::<name>STATE_INVISIBLE</name></name></expr>;</expr_stmt></then></if>


  <decl_stmt><decl><type><name>PRInt16</name></type> <name>type</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mColumn</name>-&gt;<name>GetType</name></name><argument_list>(<argument><expr>&amp;<name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>type</name> == <name><name>nsITreeColumn</name>::<name>TYPE_CHECKBOX</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aState</name> |= <name><name>nsIAccessibleStates</name>::<name>STATE_CHECKABLE</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>checked</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>GetCellValue</name></name><argument_list>(<argument><expr><name>mRow</name></expr></argument>, <argument><expr><name>mColumn</name></expr></argument>, <argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name><name>checked</name>.<name>EqualsIgnoreCase</name></name><argument_list>(<argument><expr>"true"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>aState</name> |= <name><name>nsIAccessibleStates</name>::<name>STATE_CHECKED</name></name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsXULTreeitemAccessible</name>::<name>IsDefunct</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mTree</name> || !<name>mTreeView</name> || !<name>mColumn</name> || <name>mRow</name> &lt; 0</expr>)</condition><then>
    <return>return <expr><name>PR_TRUE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>rowCount</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>mTreeView</name>-&gt;<name>GetRowCount</name></name><argument_list>(<argument><expr>&amp;<name>rowCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> || <name>mRow</name> &gt;= <name>rowCount</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type> <name><name>nsXULTreeitemAccessible</name>::<name>IsExpandable</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name>IsDefunct</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>isContainer</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>IsContainer</name></name><argument_list>(<argument><expr><name>mRow</name></expr></argument>, <argument><expr>&amp;<name>isContainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>isContainer</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRBool</name></type> <name>isEmpty</name></decl>;</decl_stmt> 
    <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>IsContainerEmpty</name></name><argument_list>(<argument><expr><name>mRow</name></expr></argument>, <argument><expr>&amp;<name>isEmpty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>isEmpty</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>PRBool</name></type> <name>isPrimary</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>mColumn</name>-&gt;<name>GetPrimary</name></name><argument_list>(<argument><expr>&amp;<name>isPrimary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>isPrimary</name></expr>)</condition><then> <block>{
        <return>return <expr><name>PR_TRUE</name></expr>;</return>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>
  <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<comment type="line">// "activate" (xor "cycle") action is available for all treeitems</comment>
<comment type="line">// "expand/collapse" action is avaible for treeitem which is container</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeitemAccessible</name>::<name>GetNumActions</name></name><parameter_list>(<param><decl><type><name>PRUint8</name> *</type><name>aNumActions</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aNumActions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aNumActions</name> = 0</expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>IsDefunct</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <expr_stmt><expr>*<name>aNumActions</name> = <call><name>IsExpandable</name><argument_list>()</argument_list></call> ? 2 : 1</expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// Return the name of our actions</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeitemAccessible</name>::<name>GetActionName</name></name><parameter_list>(<param><decl><type><name>PRUint8</name></type> <name>aIndex</name></decl></param>, <param><decl><type><name>nsAString</name>&amp;</type> <name>aName</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name>IsDefunct</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <if>if <condition>(<expr><name>aIndex</name> == <name>eAction_Click</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRBool</name></type> <name>isCycler</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mColumn</name>-&gt;<name>GetCycler</name></name><argument_list>(<argument><expr>&amp;<name>isCycler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>isCycler</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>aName</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"cycle"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
      <expr_stmt><expr><call><name><name>aName</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"activate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then>
  <else>else <if>if <condition>(<expr><name>aIndex</name> == <name>eAction_Expand</name> &amp;&amp; <call><name>IsExpandable</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRBool</name></type> <name>isContainerOpen</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>IsContainerOpen</name></name><argument_list>(<argument><expr><name>mRow</name></expr></argument>, <argument><expr>&amp;<name>isContainerOpen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>isContainerOpen</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>aName</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"collapse"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
      <expr_stmt><expr><call><name><name>aName</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"expand"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if></else></if>

  <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsXULTreeitemAccessible</name>::<name>GetAttributesInternal</name></name><parameter_list>(<param><decl><type><name>nsIPersistentProperties</name> *</type><name>aAttributes</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>IsDefunct</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsLeafAccessible</name>::<name>GetAttributesInternal</name></name><argument_list>(<argument><expr><name>aAttributes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMXULTreeElement</name></expr></argument>&gt;</argument_list></name></type> <name>tree</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>NS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeView</name></expr></argument>&gt;</argument_list></name></type> <name>view</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>tree</name>-&gt;<name>GetView</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>NS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>level</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>view</name>-&gt;<name>GetLevel</name></name><argument_list>(<argument><expr><name>mRow</name></expr></argument>, <argument><expr>&amp;<name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>topCount</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
  <for>for (<init><decl><type><name>PRInt32</name></type> <name>index</name> <init>= <expr><name>mRow</name> - 1</expr></init></decl>;</init> <condition><expr><name>index</name> &gt;= 0</expr>;</condition> <incr><expr><name>index</name>--</expr></incr>) <block>{
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>lvl</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>view</name>-&gt;<name>GetLevel</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr>&amp;<name>lvl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>lvl</name> &lt; <name>level</name></expr>)</condition><then>
        <break>break;</break></then></if>

      <if>if <condition>(<expr><name>lvl</name> == <name>level</name></expr>)</condition><then>
        <expr_stmt><expr><name>topCount</name>++</expr>;</expr_stmt></then></if>
    }</block></then></if>
  }</block></for>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>rowCount</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>view</name>-&gt;<name>GetRowCount</name></name><argument_list>(<argument><expr>&amp;<name>rowCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>bottomCount</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <for>for (<init><decl><type><name>PRInt32</name></type> <name>index</name> <init>= <expr><name>mRow</name> + 1</expr></init></decl>;</init> <condition><expr><name>index</name> &lt; <name>rowCount</name></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>lvl</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>view</name>-&gt;<name>GetLevel</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr>&amp;<name>lvl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>lvl</name> &lt; <name>level</name></expr>)</condition><then>
        <break>break;</break></then></if>

      <if>if <condition>(<expr><name>lvl</name> == <name>level</name></expr>)</condition><then>
        <expr_stmt><expr><name>bottomCount</name>++</expr>;</expr_stmt></then></if>
    }</block></then></if>
  }</block></for>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>setSize</name> <init>= <expr><name>topCount</name> + <name>bottomCount</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>posInSet</name> <init>= <expr><name>topCount</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// set the group attributes</comment>
  <expr_stmt><expr><call><name><name>nsAccUtils</name>::<name>SetAccGroupAttrs</name></name><argument_list>(<argument><expr><name>aAttributes</name></expr></argument>, <argument><expr><name>level</name> + 1</expr></argument>, <argument><expr><name>posInSet</name></expr></argument>, <argument><expr><name>setSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// set the "cycles" attribute</comment>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>isCycler</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mColumn</name>-&gt;<name>GetCycler</name></name><argument_list>(<argument><expr>&amp;<name>isCycler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>isCycler</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>nsAccUtils</name>::<name>SetAccAttr</name></name><argument_list>(<argument><expr><name>aAttributes</name></expr></argument>, <argument><expr><name><name>nsAccessibilityAtoms</name>::<name>cycles</name></name></expr></argument>,
                           <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"true"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeitemAccessible</name>::<name>GetParent</name></name><parameter_list>(<param><decl><type><name>nsIAccessible</name> **</type><name>aParent</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aParent</name> = <name>nsnull</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>IsDefunct</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <if>if <condition>(<expr><name>mParent</name></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aParent</name> = <name>mParent</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// Return the next row of tree if mColumn (if any),</comment>
<comment type="line">// otherwise return the next cell.</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeitemAccessible</name>::<name>GetNextSibling</name></name><parameter_list>(<param><decl><type><name>nsIAccessible</name> **</type><name>aNextSibling</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aNextSibling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aNextSibling</name> = <name>nsnull</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>IsDefunct</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessibleTreeCache</name></expr></argument>&gt;</argument_list></name></type> <name>treeCache</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mParent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>treeCache</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>rowCount</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>GetRowCount</name></name><argument_list>(<argument><expr>&amp;<name>rowCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>mColumn</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>mRow</name> &lt; <name>rowCount</name> - 1</expr>)</condition><then>
      <return>return <expr><call><name><name>treeCache</name>-&gt;<name>GetCachedTreeitemAccessible</name></name><argument_list>(<argument><expr><name>mRow</name> + 1</expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aNextSibling</name></expr></argument>)</argument_list></call></expr>;</return></then>
    <else>else
      <return>return <expr><name>NS_OK</name></expr>;</return></else></if>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>row</name> <init>= <expr><name>mRow</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumn</name></expr></argument>&gt;</argument_list></name></type> <name>column</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_ACCESSIBILITY_ATK</name></cpp:ifdef>
  <expr_stmt><expr><name>column</name> = <call><name><name>nsXULTreeAccessible</name>::<name>GetNextVisibleColumn</name></name><argument_list>(<argument><expr><name>mColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>column</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>mRow</name> &lt; <name>rowCount</name> -1</expr>)</condition><then> <block>{
      <expr_stmt><expr><name>row</name>++</expr>;</expr_stmt>
      <expr_stmt><expr><name>column</name> = <call><name><name>nsXULTreeAccessible</name>::<name>GetFirstVisibleColumn</name></name><argument_list>(<argument><expr><name>mTree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <comment type="line">// the next sibling of the last treeitem is null</comment>
      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></else></if>
  }</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if>if <condition>(<expr>++<name>row</name> &gt;= <name>rowCount</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//MOZ_ACCESSIBILITY_ATK</comment>

  <expr_stmt><expr><name>rv</name> = <call><name><name>treeCache</name>-&gt;<name>GetCachedTreeitemAccessible</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>aNextSibling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<comment type="line">// Return the previous row of tree if mColumn (if any),</comment>
<comment type="line">// otherwise return the previous cell.</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeitemAccessible</name>::<name>GetPreviousSibling</name></name><parameter_list>(<param><decl><type><name>nsIAccessible</name> **</type><name>aPreviousSibling</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aPreviousSibling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aPreviousSibling</name> = <name>nsnull</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>IsDefunct</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessibleTreeCache</name></expr></argument>&gt;</argument_list></name></type> <name>treeCache</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mParent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>treeCache</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>mColumn</name> &amp;&amp; <name>mRow</name> &gt; 0</expr>)</condition><then>
    <return>return <expr><call><name><name>treeCache</name>-&gt;<name>GetCachedTreeitemAccessible</name></name><argument_list>(<argument><expr><name>mRow</name> - 1</expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aPreviousSibling</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
  
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>


  <decl_stmt><decl><type><name>PRInt32</name></type> <name>row</name> <init>= <expr><name>mRow</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumn</name></expr></argument>&gt;</argument_list></name></type> <name>column</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_ACCESSIBILITY_ATK</name></cpp:ifdef>
  <expr_stmt><expr><name>rv</name> = <call><name><name>mColumn</name>-&gt;<name>GetPrevious</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if>if <condition>(<expr>!<name>column</name> &amp;&amp; <name>mRow</name> &gt; 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>row</name>--</expr>;</expr_stmt>
    <expr_stmt><expr><name>column</name> = <call><name><name>nsXULTreeAccessible</name>::<name>GetLastVisibleColumn</name></name><argument_list>(<argument><expr><name>mTree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if>if <condition>(<expr>--<name>row</name> &lt; 0</expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>rv</name> = <call><name><name>treeCache</name>-&gt;<name>GetCachedTreeitemAccessible</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>aPreviousSibling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeitemAccessible</name>::<name>DoAction</name></name><parameter_list>(<param><decl><type><name>PRUint8</name></type> <name>index</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name>IsDefunct</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <if>if <condition>(<expr><name>index</name> == <name>eAction_Click</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>isCycler</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mColumn</name>-&gt;<name>GetCycler</name></name><argument_list>(<argument><expr>&amp;<name>isCycler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>isCycler</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>rv</name> = <call><name><name>mTreeView</name>-&gt;<name>CycleCell</name></name><argument_list>(<argument><expr><name>mRow</name></expr></argument>, <argument><expr><name>mColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> 
    <else>else <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeSelection</name></expr></argument>&gt;</argument_list></name></type> <name>selection</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>GetSelection</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>selection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>selection</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>rv</name> = <call><name><name>selection</name>-&gt;<name>Select</name></name><argument_list>(<argument><expr><name>mRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mTree</name>-&gt;<name>EnsureRowIsVisible</name></name><argument_list>(<argument><expr><name>mRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></else></if>
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then>
  <else>else <if>if <condition>(<expr><name>index</name> == <name>eAction_Expand</name> &amp;&amp; <call><name>IsExpandable</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><call><name><name>mTreeView</name>-&gt;<name>ToggleOpenState</name></name><argument_list>(<argument><expr><name>mRow</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if></else></if>

  <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeitemAccessible</name>::<name>GetBounds</name></name><parameter_list>(<param><decl><type><name>PRInt32</name> *</type><name>x</name></decl></param>, <param><decl><type><name>PRInt32</name> *</type><name>y</name></decl></param>, <param><decl><type><name>PRInt32</name> *</type><name>width</name></decl></param>, <param><decl><type><name>PRInt32</name> *</type><name>height</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>x</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>y</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>width</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>height</name> = 0</expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>IsDefunct</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <comment type="line">// This Bounds are based on Tree's coord</comment>
  <expr_stmt><expr><call><name><name>mTree</name>-&gt;<name>GetCoordsForCellItem</name></name><argument_list>(<argument><expr><name>mRow</name></expr></argument>, <argument><expr><name>mColumn</name></expr></argument>, <argument><expr><call><name>EmptyCString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Get treechildren's BoxObject to adjust the Bounds' upper left corner</comment>
  <comment type="line">// XXXvarga consider using mTree-&gt;GetTreeBody()</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIBoxObject</name></expr></argument>&gt;</argument_list></name></type> <name>boxObject</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mTree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>boxObject</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>boxElement</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>boxObject</name>-&gt;<name>GetElement</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>boxElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>boxNode</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>boxElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>boxNode</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNodeList</name></expr></argument>&gt;</argument_list></name></type> <name>childNodes</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>boxNode</name>-&gt;<name>GetChildNodes</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>childNodes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>childNodes</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>nsAutoString</name></type> <name>name</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>childNode</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PRUint32</name></type> <name>childCount</name></decl>, <decl><type ref="prev"/><name>childIndex</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>childNodes</name>-&gt;<name>GetLength</name></name><argument_list>(<argument><expr>&amp;<name>childCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><expr><name>childIndex</name> = 0</expr>;</init> <condition><expr><name>childIndex</name> &lt; <name>childCount</name></expr>;</condition> <incr><expr><name>childIndex</name>++</expr></incr>) <block>{
          <expr_stmt><expr><call><name><name>childNodes</name>-&gt;<name>Item</name></name><argument_list>(<argument><expr><name>childIndex</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>childNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>childNode</name>-&gt;<name>GetLocalName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><call><name><name>name</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"treechildren"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMXULElement</name></expr></argument>&gt;</argument_list></name></type> <name>xulElement</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>childNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>xulElement</name></expr>)</condition><then> <block>{
              <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIBoxObject</name></expr></argument>&gt;</argument_list></name></type> <name>box</name></decl>;</decl_stmt>
              <expr_stmt><expr><call><name><name>xulElement</name>-&gt;<name>GetBoxObject</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>box</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>PRInt32</name></type> <name>myX</name></decl>, <decl><type ref="prev"/><name>myY</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>box</name>-&gt;<name>GetScreenX</name></name><argument_list>(<argument><expr>&amp;<name>myX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>box</name>-&gt;<name>GetScreenY</name></name><argument_list>(<argument><expr>&amp;<name>myY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr>*<name>x</name> += <name>myX</name></expr>;</expr_stmt>
                <expr_stmt><expr>*<name>y</name> += <name>myY</name></expr>;</expr_stmt>
              }</block></then></if>
            }</block></then></if>
            <break>break;</break>
          }</block></then></if>
        }</block></for>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeitemAccessible</name>::<name>SetSelected</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aSelect</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name>IsDefunct</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeSelection</name></expr></argument>&gt;</argument_list></name></type> <name>selection</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>GetSelection</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>selection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>selection</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRBool</name></type> <name>isSelected</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>selection</name>-&gt;<name>IsSelected</name></name><argument_list>(<argument><expr><name>mRow</name></expr></argument>, <argument><expr>&amp;<name>isSelected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>isSelected</name> != <name>aSelect</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>selection</name>-&gt;<name>ToggleSelect</name></name><argument_list>(<argument><expr><name>mRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeitemAccessible</name>::<name>TakeFocus</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name>IsDefunct</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeSelection</name></expr></argument>&gt;</argument_list></name></type> <name>selection</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mTreeView</name>-&gt;<name>GetSelection</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>selection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>selection</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>selection</name>-&gt;<name>SetCurrentIndex</name></name><argument_list>(<argument><expr><name>mRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="line">// focus event will be fired here</comment>
  <return>return <expr><call><name><name>nsAccessible</name>::<name>TakeFocus</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsXULTreeitemAccessible</name>::<name>GetAccessibleRelated</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aRelationType</name></decl></param>, <param><decl><type><name>nsIAccessible</name> **</type><name>aRelated</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name>IsDefunct</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <comment type="line">//currentlly only for ATK. and in the future, we'll sync MSAA and ATK same. </comment>
  <comment type="line">//that's why ATK specific code shows here</comment>
  <expr_stmt><expr>*<name>aRelated</name> = <name>nsnull</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_ACCESSIBILITY_ATK</name></cpp:ifdef>
  <if>if <condition>(<expr><name>aRelationType</name> == <name><name>nsIAccessibleRelation</name>::<name>RELATION_NODE_CHILD_OF</name></name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>columnIndex</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>mColumn</name>-&gt;<name>GetIndex</name></name><argument_list>(<argument><expr>&amp;<name>columnIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>columnIndex</name> == 0</expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>PRInt32</name></type> <name>parentIndex</name></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>mTreeView</name>-&gt;<name>GetParentIndex</name></name><argument_list>(<argument><expr><name>mRow</name></expr></argument>, <argument><expr>&amp;<name>parentIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>parentIndex</name> == -1</expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aRelated</name> = <name>mParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NS_OK</name></expr>;</return>
        }</block></then> <else>else <block>{
          <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessibleTreeCache</name></expr></argument>&gt;</argument_list></name></type> <name>cache</name> <init>=
            <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mParent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <return>return <expr><call><name><name>cache</name>-&gt;<name>GetCachedTreeitemAccessible</name></name><argument_list>(<argument><expr><name>parentIndex</name></expr></argument>, <argument><expr><name>mColumn</name></expr></argument>, <argument><expr><name>aRelated</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
      }</block></then></if>
    }</block></then></if>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then> <else>else <block>{ 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><call><name><name>nsAccessible</name>::<name>GetAccessibleRelated</name></name><argument_list>(<argument><expr><name>aRelationType</name></expr></argument>, <argument><expr><name>aRelated</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_ACCESSIBILITY_ATK</name></cpp:ifdef>
  }</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<comment type="line">// attribute AString nsIAccessibleTreeItem::cachedName</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsXULTreeitemAccessible</name>::<name>GetCachedName</name></name><parameter_list>(<param><decl><type><name>nsAString</name> &amp;</type><name>aName</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>aName</name> = <name>mCachedName</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// attribute AString nsIAccessibleTreeItem::cachedName</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsXULTreeitemAccessible</name>::<name>SetCachedName</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aName</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mCachedName</name> = <name>aName</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">//  nsXULTreeColumnsAccessible</comment>
<constructor><name><name>nsXULTreeColumnsAccessible</name>::
  <name>nsXULTreeColumnsAccessible</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>*</type> <name>aDOMNode</name></decl></param>, <param><decl><type><name>nsIWeakReference</name>*</type> <name>aShell</name></decl></param>)</parameter_list><member_list>:
  <call><name>nsXULColumnsAccessible</name><argument_list>(<argument><expr><name>aDOMNode</name></expr></argument>, <argument><expr><name>aShell</name></expr></argument>)</argument_list></call>
</member_list><block>{
}</block></constructor>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsXULTreeColumnsAccessible</name>::<name>GetNextSibling</name></name><parameter_list>(<param><decl><type><name>nsIAccessible</name> **</type><name>aNextSibling</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>ret</name> <init>= <expr><call><name><name>nsXULColumnsAccessible</name>::<name>GetNextSibling</name></name><argument_list>(<argument><expr><name>aNextSibling</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>*<name>aNextSibling</name> == <name>nsnull</name></expr>)</condition><then> <block>{ <comment type="line">// if there is not other sibling, use the first row as its sibling</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeBoxObject</name></expr></argument>&gt;</argument_list></name></type> <name>tree</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeView</name></expr></argument>&gt;</argument_list></name></type> <name>treeView</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>nsXULTreeAccessible</name>::<name>GetTreeBoxObject</name></name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>tree</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>tree</name>-&gt;<name>GetView</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>treeView</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>treeView</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PRInt32</name></type> <name>rowCount</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>treeView</name>-&gt;<name>GetRowCount</name></name><argument_list>(<argument><expr>&amp;<name>rowCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rowCount</name> &gt; 0</expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeColumn</name></expr></argument>&gt;</argument_list></name></type> <name>column</name> <init>= <expr><call><name><name>nsXULTreeAccessible</name>::<name>GetFirstVisibleColumn</name></name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessibleTreeCache</name></expr></argument>&gt;</argument_list></name></type> <name>treeCache</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mParent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>treeCache</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>ret</name> = <call><name><name>treeCache</name>-&gt;<name>GetCachedTreeitemAccessible</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>aNextSibling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><name>ret</name></expr>;</return>
}</block></function></block></for></block></function>

</unit>
