<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="001303c207467a16520c30deb25d56aba400b667.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLTableColElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMEventTarget.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsMappedAttributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGenericHTMLElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGkAtoms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStyleConsts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsRuleData.h"</cpp:file></cpp:include>

<comment type="line">// use the same protection as ancient code did </comment>
<comment type="line">// http://lxr.mozilla.org/classic/source/lib/layout/laytable.c#46</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_COLSPAN</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<class>class <name>nsHTMLTableColElement</name> <super>: <specifier>public</specifier> <name>nsGenericHTMLElement</name>,
                              <specifier>public</specifier> <name>nsIDOMHTMLTableColElement</name></super>
<block>{<private type="default">
</private><public>public:
  <constructor_decl><name>nsHTMLTableColElement</name><parameter_list>(<param><decl><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name></type> <name>aNodeInfo</name></decl></param>)</parameter_list>;</constructor_decl>
  <destructor_decl><specifier>virtual</specifier> <name>~<name>nsHTMLTableColElement</name></name><parameter_list>()</parameter_list>;</destructor_decl>

  <comment type="line">// nsISupports</comment>
  <decl_stmt><decl><type><name>NS_DECL_ISUPPORTS_INHERITED</name></type>

  <comment type="line">// nsIDOMNode</comment>
  <name>NS_FORWARD_NSIDOMNODE</name><argument_list>(<argument><expr><name><name>nsGenericHTMLElement</name>::</name></expr></argument>)</argument_list>

  <comment type="line">// nsIDOMElement</comment>
  <name>NS_FORWARD_NSIDOMELEMENT</name><argument_list>(<argument><expr><name><name>nsGenericHTMLElement</name>::</name></expr></argument>)</argument_list>

  <comment type="line">// nsIDOMHTMLElement</comment>
  <name>NS_FORWARD_NSIDOMHTMLELEMENT</name><argument_list>(<argument><expr><name><name>nsGenericHTMLElement</name>::</name></expr></argument>)</argument_list>

  <comment type="line">// nsIDOMHTMLTableColElement</comment>
  <name>NS_DECL_NSIDOMHTMLTABLECOLELEMENT</name>

  virtual <name>PRBool</name> <name>ParseAttribute</name><argument_list>(<argument><expr><name>PRInt32</name> <name>aNamespaceID</name></expr></argument>,
                                <argument><expr><name>nsIAtom</name>* <name>aAttribute</name></expr></argument>,
                                <argument><expr>const <name>nsAString</name>&amp; <name>aValue</name></expr></argument>,
                                <argument><expr><name>nsAttrValue</name>&amp; <name>aResult</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>nsMapRuleToAttributesFunc</name></type> <name>GetAttributeMappingFunction</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
  <macro><name>NS_IMETHOD_</name><argument_list>(<argument>PRBool</argument>)</argument_list></macro> <constructor_decl><name>IsAttributeMapped</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsIAtom</name>*</type> <name>aAttribute</name></decl></param>)</parameter_list> <specifier>const</specifier>;</constructor_decl>

  <function_decl><type><specifier>virtual</specifier> <name>nsresult</name></type> <name>Clone</name><parameter_list>(<param><decl><type><name>nsINodeInfo</name> *</type><name>aNodeInfo</name></decl></param>, <param><decl><type><name>nsINode</name> **</type><name>aResult</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

  <function_decl><type><specifier>virtual</specifier> <name>nsXPCClassInfo</name>*</type> <name>GetClassInfo</name><parameter_list>()</parameter_list>;</function_decl>
</public>}</block>;</class>


<macro><name>NS_IMPL_NS_NEW_HTML_ELEMENT</name><argument_list>(<argument>TableCol</argument>)</argument_list></macro>


<constructor><name><name>nsHTMLTableColElement</name>::<name>nsHTMLTableColElement</name></name><parameter_list>(<param><decl><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name></type> <name>aNodeInfo</name></decl></param>)</parameter_list>
  <member_list>: <call><name>nsGenericHTMLElement</name><argument_list>(<argument><expr><name>aNodeInfo</name></expr></argument>)</argument_list></call>
</member_list><block>{
}</block></constructor>

<destructor><name><name>nsHTMLTableColElement</name>::~<name>nsHTMLTableColElement</name></name><parameter_list>()</parameter_list>
<block>{
}</block></destructor>


<macro><name>NS_IMPL_ADDREF_INHERITED</name><argument_list>(<argument>nsHTMLTableColElement</argument>, <argument>nsGenericElement</argument>)</argument_list></macro> 
<macro><name>NS_IMPL_RELEASE_INHERITED</name><argument_list>(<argument>nsHTMLTableColElement</argument>, <argument>nsGenericElement</argument>)</argument_list></macro> 


<macro><name>DOMCI_NODE_DATA</name><argument_list>(<argument>HTMLTableColElement</argument>, <argument>nsHTMLTableColElement</argument>)</argument_list></macro>

<comment type="line">// QueryInterface implementation for nsHTMLTableColElement</comment>
<macro><name>NS_INTERFACE_TABLE_HEAD</name><argument_list>(<argument>nsHTMLTableColElement</argument>)</argument_list></macro>
  <macro><name>NS_HTML_CONTENT_INTERFACE_TABLE1</name><argument_list>(<argument>nsHTMLTableColElement</argument>,
                                   <argument>nsIDOMHTMLTableColElement</argument>)</argument_list></macro>
  <macro><name>NS_HTML_CONTENT_INTERFACE_TABLE_TO_MAP_SEGUE</name><argument_list>(<argument>nsHTMLTableColElement</argument>,
                                               <argument>nsGenericHTMLElement</argument>)</argument_list></macro>
<macro><name>NS_HTML_CONTENT_INTERFACE_TABLE_TAIL_CLASSINFO</name><argument_list>(<argument>HTMLTableColElement</argument>)</argument_list></macro>

<macro><name>NS_IMPL_ELEMENT_CLONE</name><argument_list>(<argument>nsHTMLTableColElement</argument>)</argument_list></macro>


<macro><name>NS_IMPL_STRING_ATTR_DEFAULT_VALUE</name><argument_list>(<argument>nsHTMLTableColElement</argument>, <argument>Align</argument>, <argument>align</argument>, <argument>"left"</argument>)</argument_list></macro>
<macro><name>NS_IMPL_STRING_ATTR_DEFAULT_VALUE</name><argument_list>(<argument>nsHTMLTableColElement</argument>, <argument>Ch</argument>, <argument>_char</argument>, <argument>"."</argument>)</argument_list></macro>
<macro><name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument>nsHTMLTableColElement</argument>, <argument>ChOff</argument>, <argument>charoff</argument>)</argument_list></macro>
<macro><name>NS_IMPL_INT_ATTR_DEFAULT_VALUE</name><argument_list>(<argument>nsHTMLTableColElement</argument>, <argument>Span</argument>, <argument>span</argument>, <argument>1</argument>)</argument_list></macro>
<macro><name>NS_IMPL_STRING_ATTR_DEFAULT_VALUE</name><argument_list>(<argument>nsHTMLTableColElement</argument>, <argument>VAlign</argument>, <argument>valign</argument>, <argument>"middle"</argument>)</argument_list></macro>
<macro><name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument>nsHTMLTableColElement</argument>, <argument>Width</argument>, <argument>width</argument>)</argument_list></macro>


<function><type><name>PRBool</name></type>
<name><name>nsHTMLTableColElement</name>::<name>ParseAttribute</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aNamespaceID</name></decl></param>,
                                      <param><decl><type><name>nsIAtom</name>*</type> <name>aAttribute</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>,
                                      <param><decl><type><name>nsAttrValue</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aNamespaceID</name> == <name>kNameSpaceID_None</name></expr>)</condition><then> <block>{
    <comment type="block">/* ignore these attributes, stored simply as strings ch */</comment>
    <if>if <condition>(<expr><name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>charoff</name></name></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>aResult</name>.<name>ParseSpecialIntValue</name></name><argument_list>(<argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>span</name></name></expr>)</condition><then> <block>{
      <comment type="block">/* protection from unrealistic large colspan values */</comment>
      <return>return <expr><call><name><name>aResult</name>.<name>ParseIntWithBounds</name></name><argument_list>(<argument><expr><name>aValue</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>MAX_COLSPAN</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>width</name></name></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>aResult</name>.<name>ParseSpecialIntValue</name></name><argument_list>(<argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>align</name></name></expr>)</condition><then> <block>{
      <return>return <expr><call><name>ParseTableCellHAlignValue</name><argument_list>(<argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>valign</name></name></expr>)</condition><then> <block>{
      <return>return <expr><call><name>ParseTableVAlignValue</name><argument_list>(<argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><call><name><name>nsGenericHTMLElement</name>::<name>ParseAttribute</name></name><argument_list>(<argument><expr><name>aNamespaceID</name></expr></argument>, <argument><expr><name>aAttribute</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>,
                                              <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> 
<name>void</name></type> <name>MapAttributesIntoRule</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsMappedAttributes</name>*</type> <name>aAttributes</name></decl></param>, <param><decl><type><name>nsRuleData</name>*</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>aData</name>-&gt;<name>mSIDs</name></name> &amp; <call><name>NS_STYLE_INHERIT_BIT</name><argument_list>(<argument><expr><name>Table</name></expr></argument>)</argument_list></call> &amp;&amp; 
      <call><name><name>aData</name>-&gt;<name>mTableData</name>-&gt;<name>mSpan</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then> <block>{
    <comment type="line">// span: int</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>value</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>span</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>value</name> &amp;&amp; <call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eInteger</name></name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>PRInt32</name></type> <name>val</name> <init>= <expr><call><name><name>value</name>-&gt;<name>GetIntegerValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// Note: Do NOT use this code for table cells!  The value "0"</comment>
      <comment type="line">// means something special for colspan and rowspan, but for &lt;col</comment>
      <comment type="line">// span&gt; and &lt;colgroup span&gt; it's just disallowed.</comment>
      <if>if <condition>(<expr><name>val</name> &gt; 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mTableData</name>-&gt;<name>mSpan</name>.<name>SetIntValue</name></name><argument_list>(<argument><expr><call><name><name>value</name>-&gt;<name>GetIntegerValue</name></name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><name>eCSSUnit_Integer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>
  <if>if <condition>(<expr>(<name><name>aData</name>-&gt;<name>mSIDs</name></name> &amp; <call><name>NS_STYLE_INHERIT_BIT</name><argument_list>(<argument><expr><name>Position</name></expr></argument>)</argument_list></call>) &amp;&amp;
      <call><name><name>aData</name>-&gt;<name>mPositionData</name>-&gt;<name>mWidth</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then> <block>{
    <comment type="line">// width</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>value</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>width</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>value</name></expr>)</condition><then> <block>{
      <switch>switch <condition>(<expr><call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
      <case>case <expr><name><name>nsAttrValue</name>::<name>ePercent</name></name></expr>: <block>{
        <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mPositionData</name>-&gt;<name>mWidth</name>.<name>SetPercentValue</name></name><argument_list>(<argument><expr><call><name><name>value</name>-&gt;<name>GetPercentValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      }</block>
      </case><case>case <expr><name><name>nsAttrValue</name>::<name>eInteger</name></name></expr>: <block>{
        <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mPositionData</name>-&gt;<name>mWidth</name>.<name>SetFloatValue</name></name><argument_list>(<argument><expr>(<name>float</name>)<call><name><name>value</name>-&gt;<name>GetIntegerValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>eCSSUnit_Pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      }</block>
      </case><default>default:
        <break>break;</break>
      </default>}</block></switch>
    }</block></then></if>
  }</block></then></if>
  <if>if <condition>(<expr><name><name>aData</name>-&gt;<name>mSIDs</name></name> &amp; <call><name>NS_STYLE_INHERIT_BIT</name><argument_list>(<argument><expr><name>Text</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><call><name><name>aData</name>-&gt;<name>mTextData</name>-&gt;<name>mTextAlign</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then> <block>{
      <comment type="line">// align: enum</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>value</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>align</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>value</name> &amp;&amp; <call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eEnum</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mTextData</name>-&gt;<name>mTextAlign</name>.<name>SetIntValue</name></name><argument_list>(<argument><expr><call><name><name>value</name>-&gt;<name>GetEnumValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>eCSSUnit_Enumerated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>
  }</block></then></if>
  <if>if <condition>(<expr><name><name>aData</name>-&gt;<name>mSIDs</name></name> &amp; <call><name>NS_STYLE_INHERIT_BIT</name><argument_list>(<argument><expr><name>TextReset</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><call><name><name>aData</name>-&gt;<name>mTextData</name>-&gt;<name>mVerticalAlign</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then> <block>{
      <comment type="line">// valign: enum</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>value</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>valign</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>value</name> &amp;&amp; <call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eEnum</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mTextData</name>-&gt;<name>mVerticalAlign</name>.<name>SetIntValue</name></name><argument_list>(<argument><expr><call><name><name>value</name>-&gt;<name>GetEnumValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>eCSSUnit_Enumerated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>nsGenericHTMLElement</name>::<name>MapCommonAttributesInto</name></name><argument_list>(<argument><expr><name>aAttributes</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<macro><name>NS_IMETHODIMP_</name><argument_list>(<argument>PRBool</argument>)</argument_list></macro>
<macro><name>nsHTMLTableColElement</name></macro><expr_stmt><expr><name>::<name>IsAttributeMapped</name></name>(const <name>nsIAtom</name>* <name>aAttribute</name>) const
<block>{
  <expr>static const <name>MappedAttributeEntry</name> <name><name>attributes</name><index>[]</index></name> = <block>{
    <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>width</name></name></expr> }</block></expr>,
    <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>align</name></name></expr> }</block></expr>,
    <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>valign</name></name></expr> }</block></expr>,
    <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>span</name></name></expr> }</block></expr>,
    <expr><block>{ <expr><name>nsnull</name></expr> }</block></expr>
  }</block></expr>;

  <expr>static const <name>MappedAttributeEntry</name>* const <name><name>map</name><index>[]</index></name> = <block>{
    <expr><name>attributes</name></expr>,
    <expr><name>sCommonAttributeMap</name></expr>,
  }</block></expr>;

  <return>return <expr><call><name>FindAttributeDependence</name><argument_list>(<argument><expr><name>aAttribute</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><call><name>NS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>nsMapRuleToAttributesFunc</name></type>
<name><name>nsHTMLTableColElement</name>::<name>GetAttributeMappingFunction</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr>&amp;<name>MapAttributesIntoRule</name></expr>;</return>
}</block></function>
</unit>
