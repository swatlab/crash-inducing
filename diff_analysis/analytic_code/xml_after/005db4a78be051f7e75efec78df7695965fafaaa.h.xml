<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="005db4a78be051f7e75efec78df7695965fafaaa.h"><comment type="block">/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code, released
 * March 31, 1998.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>jslock_h__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jslock_h__</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jstypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pratom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prcvar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prthread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsprvtd.h"</cpp:file></cpp:include>    <comment type="block">/* for JSScope, etc. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jspubtd.h"</cpp:file></cpp:include>    <comment type="block">/* for JSRuntime, etc. */</comment>

<macro><name>JS_BEGIN_EXTERN_C</name></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Thin_GetWait</name><parameter_list>(<param><type><name>W</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((jsword)(W) &amp; 0x1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Thin_SetWait</name><parameter_list>(<param><type><name>W</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((jsword)(W) | 0x1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Thin_RemoveWait</name><parameter_list>(<param><type><name>W</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((jsword)(W) &amp; ~0x1)</cpp:value></cpp:define>

<typedef>typedef <type>struct <name>JSFatLock</name></type> <name>JSFatLock</name>;</typedef>

<struct>struct <name>JSFatLock</name> <block>{
    <decl_stmt><decl><type><name>int</name></type>         <name>susp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRLock</name>      *</type><name>slock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRCondVar</name>   *</type><name>svar</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSFatLock</name>   *</type><name>next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSFatLock</name>   **</type><name>prevp</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>JSThinLock</name> <block>{
    <decl_stmt><decl><type><name>jsword</name></type>      <name>owner</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSFatLock</name>   *</type><name>fat</name></decl>;</decl_stmt>
}</block></struct></type> <name>JSThinLock</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CX_THINLOCK_ID</name><parameter_list>(<param><type><name>cx</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>((jsword)(cx)-&gt;thread)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURRENT_THREAD_IS_ME</name><parameter_list>(<param><type><name>me</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((JSThread *)me)-&gt;id == js_CurrentThreadId())</cpp:value></cpp:define>

<typedef>typedef <type><name>PRLock</name></type> <name>JSLock</name>;</typedef>

<typedef>typedef <type><struct>struct <name>JSFatLockTable</name> <block>{
    <decl_stmt><decl><type><name>JSFatLock</name>   *</type><name>free</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSFatLock</name>   *</type><name>taken</name></decl>;</decl_stmt>
}</block></struct></type> <name>JSFatLockTable</name>;</typedef>

<comment type="block">/*
 * Atomic increment and decrement for a reference counter, given jsrefcount *p.
 * NB: jsrefcount is int32, aka PRInt32, so that pratom.h functions work.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_ATOMIC_INCREMENT</name><parameter_list>(<param><type><name>p</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>PR_AtomicIncrement((PRInt32 *)(p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_ATOMIC_DECREMENT</name><parameter_list>(<param><type><name>p</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>PR_AtomicDecrement((PRInt32 *)(p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_ATOMIC_ADD</name><parameter_list>(<param><type><name>p</name></type></param>,<param><type><name>v</name></type></param>)</parameter_list></cpp:macro>          <cpp:value>PR_AtomicAdd((PRInt32 *)(p), (PRInt32)(v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>js_CurrentThreadId</name><parameter_list>()</parameter_list></cpp:macro>        <cpp:value>(jsword)PR_GetCurrentThread()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_NEW_LOCK</name><parameter_list>()</parameter_list></cpp:macro>               <cpp:value>PR_NewLock()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_DESTROY_LOCK</name><parameter_list>(<param><type><name>l</name></type></param>)</parameter_list></cpp:macro>          <cpp:value>PR_DestroyLock(l)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_ACQUIRE_LOCK</name><parameter_list>(<param><type><name>l</name></type></param>)</parameter_list></cpp:macro>          <cpp:value>PR_Lock(l)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_RELEASE_LOCK</name><parameter_list>(<param><type><name>l</name></type></param>)</parameter_list></cpp:macro>          <cpp:value>PR_Unlock(l)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_LOCK0</name><parameter_list>(<param><type><name>P</name></type></param>,<param><type><name>M</name></type></param>)</parameter_list></cpp:macro>               <cpp:value>js_Lock(P,M)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_UNLOCK0</name><parameter_list>(<param><type><name>P</name></type></param>,<param><type><name>M</name></type></param>)</parameter_list></cpp:macro>             <cpp:value>js_Unlock(P,M)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_NEW_CONDVAR</name><parameter_list>(<param><type><name>l</name></type></param>)</parameter_list></cpp:macro>           <cpp:value>PR_NewCondVar(l)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_DESTROY_CONDVAR</name><parameter_list>(<param><type><name>cv</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>PR_DestroyCondVar(cv)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_WAIT_CONDVAR</name><parameter_list>(<param><type><name>cv</name></type></param>,<param><type><name>to</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>PR_WaitCondVar(cv,to)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_NO_TIMEOUT</name></cpp:macro>               <cpp:value>PR_INTERVAL_NO_TIMEOUT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_NOTIFY_CONDVAR</name><parameter_list>(<param><type><name>cv</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>PR_NotifyCondVar(cv)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_NOTIFY_ALL_CONDVAR</name><parameter_list>(<param><type><name>cv</name></type></param>)</parameter_list></cpp:macro>   <cpp:value>PR_NotifyAllCondVar(cv)</cpp:value></cpp:define>

<comment type="block">/*
 * Include jsscope.h so JS_LOCK_OBJ macro callers don't have to include it.
 * Since there is a JSThinLock member in JSScope, we can't nest this include
 * much earlier (see JSThinLock's typedef, above).  Yes, that means there is
 * an #include cycle between jslock.h and jsscope.h: moderate-sized XXX here,
 * to be fixed by moving JS_LOCK_SCOPE to jsscope.h, JS_LOCK_OBJ to jsobj.h,
 * and so on.
 */</comment>
<function_decl><type><name>JS_END_EXTERN_C</name>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsscope.h"</cpp:file></cpp:include>
<name>JS_BEGIN_EXTERN_C</name>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_LOCK_RUNTIME</name><parameter_list>(<param><type><name>rt</name></type></param>)</parameter_list></cpp:macro>         <cpp:value>js_LockRuntime(rt)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_UNLOCK_RUNTIME</name><parameter_list>(<param><type><name>rt</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>js_UnlockRuntime(rt)</cpp:value></cpp:define>

<comment type="block">/*
 * NB: The JS_LOCK_OBJ and JS_UNLOCK_OBJ macros work *only* on native objects
 * (objects for which OBJ_IS_NATIVE returns true).  All uses of these macros in
 * the engine are predicated on OBJ_IS_NATIVE or equivalent checks.  These uses
 * are for optimizations above the JSObjectOps layer, under which object locks
 * normally hide.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_LOCK_OBJ</name><parameter_list>(<param><type><name>cx</name></type></param>,<param><type><name>obj</name></type></param>)</parameter_list></cpp:macro>         <cpp:value>((OBJ_SCOPE(obj)-&gt;ownercx == (cx))        \
                                     ? (void)0                                \
                                     : (js_LockObj(cx, obj)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_UNLOCK_OBJ</name><parameter_list>(<param><type><name>cx</name></type></param>,<param><type><name>obj</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>((OBJ_SCOPE(obj)-&gt;ownercx == (cx))        \
                                     ? (void)0 : js_UnlockObj(cx, obj))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_LOCK_SCOPE</name><parameter_list>(<param><type><name>cx</name></type></param>,<param><type><name>scope</name></type></param>)</parameter_list></cpp:macro>     <cpp:value>((scope)-&gt;ownercx == (cx) ? (void)0       \
                                     : js_LockScope(cx, scope))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_UNLOCK_SCOPE</name><parameter_list>(<param><type><name>cx</name></type></param>,<param><type><name>scope</name></type></param>)</parameter_list></cpp:macro>   <cpp:value>((scope)-&gt;ownercx == (cx) ? (void)0       \
                                     : js_UnlockScope(cx, scope))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_TRANSFER_SCOPE_LOCK</name><parameter_list>(<param><type><name>cx</name></type></param>, <param><type><name>scope</name></type></param>, <param><type><name>newscope</name></type></param>)</parameter_list></cpp:macro>                           \
                                    <cpp:value>js_TransferScopeLock(cx, scope, newscope)</cpp:value></cpp:define>

<specifier>extern</specifier> <name>void</name></type> <name>js_LockRuntime</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>js_UnlockRuntime</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>js_LockObj</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>js_UnlockObj</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>js_LockScope</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSScope</name> *</type><name>scope</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>js_UnlockScope</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSScope</name> *</type><name>scope</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>js_SetupLocks</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>,<param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>js_CleanupLocks</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>js_TransferScopeLock</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type></decl></param>, <param><decl><type><name>JSScope</name> *</type></decl></param>, <param><decl><type><name>JSScope</name> *</type></decl></param>)</parameter_list>;</function_decl>
<extern>extern JS_FRIEND_API(jsval</extern>)
<expr_stmt><expr><call><name>js_GetSlotThreadSafe</name><argument_list>(<argument><expr><name>JSContext</name> *</expr></argument>, <argument><expr><name>JSObject</name> *</expr></argument>, <argument><expr><name>uint32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>js_SetSlotThreadSafe</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type></decl></param>, <param><decl><type><name>JSObject</name> *</type></decl></param>, <param><decl><type><name>uint32</name></type></decl></param>, <param><decl><type><name>jsval</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>js_InitLock</name><parameter_list>(<param><decl><type><name>JSThinLock</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>js_FinishLock</name><parameter_list>(<param><decl><type><name>JSThinLock</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>js_FinishSharingScope</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSScope</name> *</type><name>scope</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_IS_RUNTIME_LOCKED</name><parameter_list>(<param><type><name>rt</name></type></param>)</parameter_list></cpp:macro>        <cpp:value>js_IsRuntimeLocked(rt)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_IS_OBJ_LOCKED</name><parameter_list>(<param><type><name>cx</name></type></param>,<param><type><name>obj</name></type></param>)</parameter_list></cpp:macro>        <cpp:value>js_IsObjLocked(cx,obj)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_IS_SCOPE_LOCKED</name><parameter_list>(<param><type><name>cx</name></type></param>,<param><type><name>scope</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>js_IsScopeLocked(cx,scope)</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>JSBool</name></type> <name>js_IsRuntimeLocked</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>JSBool</name></type> <name>js_IsObjLocked</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>JSBool</name></type> <name>js_IsScopeLocked</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSScope</name> *</type><name>scope</name></decl></param>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_IS_RUNTIME_LOCKED</name><parameter_list>(<param><type><name>rt</name></type></param>)</parameter_list></cpp:macro>        <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_IS_OBJ_LOCKED</name><parameter_list>(<param><type><name>cx</name></type></param>,<param><type><name>obj</name></type></param>)</parameter_list></cpp:macro>        <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_IS_SCOPE_LOCKED</name><parameter_list>(<param><type><name>cx</name></type></param>,<param><type><name>scope</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DEBUG */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_LOCK_OBJ_VOID</name><parameter_list>(<param><type><name>cx</name></type></param>, <param><type><name>obj</name></type></param>, <param><type><name>e</name></type></param>)</parameter_list></cpp:macro>                                          \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        JS_LOCK_OBJ(cx, obj);                                                 \
        e;                                                                    \
        JS_UNLOCK_OBJ(cx, obj);                                               \
    JS_END_MACRO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_LOCK_VOID</name><parameter_list>(<param><type><name>cx</name></type></param>, <param><type><name>e</name></type></param>)</parameter_list></cpp:macro>                                                   \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        JSRuntime *_rt = (cx)-&gt;runtime;                                       \
        JS_LOCK_RUNTIME_VOID(_rt, e);                                         \
    JS_END_MACRO</cpp:value></cpp:define>

<comment type="block">/* FIXME: bug 353962 hackaround */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_USE_ONLY_NSPR_LOCKS</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JS_USE_ONLY_NSPR_LOCKS</name></expr></argument>)</argument_list></call> ||                                        \
    !( (<call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call>) ||                               \
       (<call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call>) ||                            \
       ((<call><name>defined</name><argument_list>(<argument><expr><name>__USLC__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>_SCO_DS</name></expr></argument>)</argument_list></call>) &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>i386</name></expr></argument>)</argument_list></call>) ||          \
       (<call><name>defined</name><argument_list>(<argument><expr><name>SOLARIS</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>sparc</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>ULTRA_SPARC</name></expr></argument>)</argument_list></call>) ||        \
       <call><name>defined</name><argument_list>(<argument><expr><name>AIX</name></expr></argument>)</argument_list></call> )</expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSPR_LOCK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>JS_LOCK0</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>JS_UNLOCK0</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_LOCK0</name><parameter_list>(<param><type><name>P</name></type></param>,<param><type><name>M</name></type></param>)</parameter_list></cpp:macro>   <cpp:value>(JS_ACQUIRE_LOCK(((JSLock*)(P)-&gt;fat)), (P)-&gt;owner = (M))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_UNLOCK0</name><parameter_list>(<param><type><name>P</name></type></param>,<param><type><name>M</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((P)-&gt;owner = 0, JS_RELEASE_LOCK(((JSLock*)(P)-&gt;fat)))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  <comment type="block">/* arch-tests */</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NSPR_LOCK</name></cpp:undef>

<function_decl><type><specifier>extern</specifier> <name>JS_INLINE</name> <name>void</name></type> <name>js_Lock</name><parameter_list>(<param><decl><type><name>JSThinLock</name> *</type><name>tl</name></decl></param>, <param><decl><type><name>jsword</name></type> <name>me</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>JS_INLINE</name> <name>void</name></type> <name>js_Unlock</name><parameter_list>(<param><decl><type><name>JSThinLock</name> *</type><name>tl</name></decl></param>, <param><decl><type><name>jsword</name></type> <name>me</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* arch-tests */</comment>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  <comment type="block">/* !JS_THREADSAFE */</comment>

<expr_stmt><expr><name>JS_BEGIN_EXTERN_C</name>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_ATOMIC_INCREMENT</name><parameter_list>(<param><type><name>p</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>(++*(p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_ATOMIC_DECREMENT</name><parameter_list>(<param><type><name>p</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>(--*(p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_ATOMIC_ADD</name><parameter_list>(<param><type><name>p</name></type></param>,<param><type><name>v</name></type></param>)</parameter_list></cpp:macro>          <cpp:value>(*(p) += (v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_CurrentThreadId</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_NEW_LOCK</name><parameter_list>()</parameter_list></cpp:macro>               <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_DESTROY_LOCK</name><parameter_list>(<param><type><name>l</name></type></param>)</parameter_list></cpp:macro>          <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_ACQUIRE_LOCK</name><parameter_list>(<param><type><name>l</name></type></param>)</parameter_list></cpp:macro>          <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_RELEASE_LOCK</name><parameter_list>(<param><type><name>l</name></type></param>)</parameter_list></cpp:macro>          <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_LOCK0</name><parameter_list>(<param><type><name>P</name></type></param>,<param><type><name>M</name></type></param>)</parameter_list></cpp:macro>               <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_UNLOCK0</name><parameter_list>(<param><type><name>P</name></type></param>,<param><type><name>M</name></type></param>)</parameter_list></cpp:macro>             <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_NEW_CONDVAR</name><parameter_list>(<param><type><name>l</name></type></param>)</parameter_list></cpp:macro>           <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_DESTROY_CONDVAR</name><parameter_list>(<param><type><name>cv</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_WAIT_CONDVAR</name><parameter_list>(<param><type><name>cv</name></type></param>,<param><type><name>to</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_NOTIFY_CONDVAR</name><parameter_list>(<param><type><name>cv</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_NOTIFY_ALL_CONDVAR</name><parameter_list>(<param><type><name>cv</name></type></param>)</parameter_list></cpp:macro>   <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_LOCK_RUNTIME</name><parameter_list>(<param><type><name>rt</name></type></param>)</parameter_list></cpp:macro>         <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_UNLOCK_RUNTIME</name><parameter_list>(<param><type><name>rt</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_LOCK_OBJ</name><parameter_list>(<param><type><name>cx</name></type></param>,<param><type><name>obj</name></type></param>)</parameter_list></cpp:macro>         <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_UNLOCK_OBJ</name><parameter_list>(<param><type><name>cx</name></type></param>,<param><type><name>obj</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_LOCK_OBJ_VOID</name><parameter_list>(<param><type><name>cx</name></type></param>,<param><type><name>obj</name></type></param>,<param><type><name>e</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>(e)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_LOCK_SCOPE</name><parameter_list>(<param><type><name>cx</name></type></param>,<param><type><name>scope</name></type></param>)</parameter_list></cpp:macro>     <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_UNLOCK_SCOPE</name><parameter_list>(<param><type><name>cx</name></type></param>,<param><type><name>scope</name></type></param>)</parameter_list></cpp:macro>   <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_TRANSFER_SCOPE_LOCK</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>o</name></type></param>,<param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_IS_RUNTIME_LOCKED</name><parameter_list>(<param><type><name>rt</name></type></param>)</parameter_list></cpp:macro>        <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_IS_OBJ_LOCKED</name><parameter_list>(<param><type><name>cx</name></type></param>,<param><type><name>obj</name></type></param>)</parameter_list></cpp:macro>        <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_IS_SCOPE_LOCKED</name><parameter_list>(<param><type><name>cx</name></type></param>,<param><type><name>scope</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_LOCK_VOID</name><parameter_list>(<param><type><name>cx</name></type></param>, <param><type><name>e</name></type></param>)</parameter_list></cpp:macro>             <cpp:value>JS_LOCK_RUNTIME_VOID((cx)-&gt;runtime, e)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !JS_THREADSAFE */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_LOCK_RUNTIME_VOID</name><parameter_list>(<param><type><name>rt</name></type></param>,<param><type><name>e</name></type></param>)</parameter_list></cpp:macro>                                            \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        JS_LOCK_RUNTIME(rt);                                                  \
        e;                                                                    \
        JS_UNLOCK_RUNTIME(rt);                                                \
    JS_END_MACRO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_LOCK_GC</name><parameter_list>(<param><type><name>rt</name></type></param>)</parameter_list></cpp:macro>              <cpp:value>JS_ACQUIRE_LOCK((rt)-&gt;gcLock)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_UNLOCK_GC</name><parameter_list>(<param><type><name>rt</name></type></param>)</parameter_list></cpp:macro>            <cpp:value>JS_RELEASE_LOCK((rt)-&gt;gcLock)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_LOCK_GC_VOID</name><parameter_list>(<param><type><name>rt</name></type></param>,<param><type><name>e</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>(JS_LOCK_GC(rt), (e), JS_UNLOCK_GC(rt))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_AWAIT_GC_DONE</name><parameter_list>(<param><type><name>rt</name></type></param>)</parameter_list></cpp:macro>        <cpp:value>JS_WAIT_CONDVAR((rt)-&gt;gcDone, JS_NO_TIMEOUT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_NOTIFY_GC_DONE</name><parameter_list>(<param><type><name>rt</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>JS_NOTIFY_ALL_CONDVAR((rt)-&gt;gcDone)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_AWAIT_REQUEST_DONE</name><parameter_list>(<param><type><name>rt</name></type></param>)</parameter_list></cpp:macro>   <cpp:value>JS_WAIT_CONDVAR((rt)-&gt;requestDone,        \
                                                    JS_NO_TIMEOUT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_NOTIFY_REQUEST_DONE</name><parameter_list>(<param><type><name>rt</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>JS_NOTIFY_CONDVAR((rt)-&gt;requestDone)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_LOCK</name><parameter_list>(<param><type><name>P</name></type></param>,<param><type><name>CX</name></type></param>)</parameter_list></cpp:macro>               <cpp:value>JS_LOCK0(P, CX_THINLOCK_ID(CX))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_UNLOCK</name><parameter_list>(<param><type><name>P</name></type></param>,<param><type><name>CX</name></type></param>)</parameter_list></cpp:macro>             <cpp:value>JS_UNLOCK0(P, CX_THINLOCK_ID(CX))</cpp:value></cpp:define>

<macro><name>JS_END_EXTERN_C</name></macro></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* jslock_h___ */</comment>
</unit>
