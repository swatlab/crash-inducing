<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="004b810e2684a831cac6e0a847f12bf608bf9334.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2010
 * the Initial Developer. All Rights Reserved.
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GfxInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsUnicharUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPrintfCString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozilla/FunctionTimer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prenv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prprf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"EGLUtils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"AndroidBridge.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MOZ_CRASHREPORTER</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>MOZ_ENABLE_LIBXUL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsExceptionHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsICrashReporter.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_CRASHREPORTER_CONTRACTID</name></cpp:macro> <cpp:value>"@mozilla.org/toolkit/crash-reporter;1"</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefService.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<using>using namespace <name><name>mozilla</name>::<name>widget</name></name>;</using>


<macro><name>NS_IMPL_ISUPPORTS1</name><argument_list>(<argument>GfxInfo</argument>, <argument>nsIGfxInfo</argument>)</argument_list></macro>

<comment type="block">/* GetD2DEnabled and GetDwriteEnabled shouldn't be called until after gfxPlatform initialization
 * has occurred because they depend on it for information. (See bug 591561) */</comment>
<function><type><name>nsresult</name></type>
<name><name>GfxInfo</name>::<name>GetD2DEnabled</name></name><parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>aEnabled</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>GfxInfo</name>::<name>GetDWriteEnabled</name></name><parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>aEnabled</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<comment type="block">/* readonly attribute DOMString DWriteVersion; */</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>GfxInfo</name>::<name>GetDWriteVersion</name></name><parameter_list>(<param><decl><type><name>nsAString</name> &amp;</type> <name>aDwriteVersion</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>GfxInfo</name>::<name>Init</name></name><parameter_list>()</parameter_list>
<block>{
}</block></function>


<comment type="block">/* readonly attribute DOMString adapterDescription; */</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>GfxInfo</name>::<name>GetAdapterDescription</name></name><parameter_list>(<param><decl><type><name>nsAString</name> &amp;</type> <name>aAdapterDescription</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aAdapterDescription</name>.<name>AssignASCII</name></name><argument_list>(<argument><expr><call><name><name>mozilla</name>::<name>gl</name>::<name>GetVendor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name><name>mozilla</name>::<name>AndroidBridge</name>::<name>Bridge</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsAutoString</name></type> <name>str</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>aAdapterDescription</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name><name>mozilla</name>::<name>AndroidBridge</name>::<name>Bridge</name></name><argument_list>()</argument_list></call>-&gt;<call><name>GetStaticStringField</name><argument_list>(<argument><expr>"android/os/Build"</expr></argument>, <argument><expr>"MODEL"</expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>aAdapterDescription</name>.<name>Append</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name><name>aAdapterDescription</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name><name>mozilla</name>::<name>AndroidBridge</name>::<name>Bridge</name></name><argument_list>()</argument_list></call>-&gt;<call><name>GetStaticStringField</name><argument_list>(<argument><expr>"android/os/Build"</expr></argument>, <argument><expr>"MANUFACTURER"</expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>aAdapterDescription</name>.<name>Append</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name><name>aAdapterDescription</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name><name>mozilla</name>::<name>AndroidBridge</name>::<name>Bridge</name></name><argument_list>()</argument_list></call>-&gt;<call><name>GetStaticStringField</name><argument_list>(<argument><expr>"android/os/Build"</expr></argument>, <argument><expr>"HARDWARE"</expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>aAdapterDescription</name>.<name>Append</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* readonly attribute DOMString adapterRAM; */</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>GfxInfo</name>::<name>GetAdapterRAM</name></name><parameter_list>(<param><decl><type><name>nsAString</name> &amp;</type> <name>aAdapterRAM</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aAdapterRAM</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* readonly attribute DOMString adapterDriver; */</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>GfxInfo</name>::<name>GetAdapterDriver</name></name><parameter_list>(<param><decl><type><name>nsAString</name> &amp;</type> <name>aAdapterDriver</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aAdapterDriver</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* readonly attribute DOMString adapterDriverVersion; */</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>GfxInfo</name>::<name>GetAdapterDriverVersion</name></name><parameter_list>(<param><decl><type><name>nsAString</name> &amp;</type> <name>aAdapterDriverVersion</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aAdapterDriverVersion</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* readonly attribute DOMString adapterDriverDate; */</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>GfxInfo</name>::<name>GetAdapterDriverDate</name></name><parameter_list>(<param><decl><type><name>nsAString</name> &amp;</type> <name>aAdapterDriverDate</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aAdapterDriverDate</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* readonly attribute unsigned long adapterVendorID; */</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>GfxInfo</name>::<name>GetAdapterVendorID</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>aAdapterVendorID</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aAdapterVendorID</name> = 0</expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* readonly attribute unsigned long adapterDeviceID; */</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>GfxInfo</name>::<name>GetAdapterDeviceID</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>aAdapterDeviceID</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aAdapterDeviceID</name> = 0</expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>GfxInfo</name>::<name>AddCrashReportAnnotations</name></name><parameter_list>()</parameter_list>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MOZ_CRASHREPORTER</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>MOZ_ENABLE_LIBXUL</name></expr></argument>)</argument_list></call></expr></cpp:if>
  nsCAutoString deviceIDString, vendorIDString;
  PRUint32 deviceID, vendorID;

  GetAdapterDeviceID(&amp;deviceID);
  GetAdapterVendorID(&amp;vendorID);

  deviceIDString.AppendPrintf("%04x", deviceID);
  vendorIDString.AppendPrintf("%04x", vendorID);

  CrashReporter::AnnotateCrashReport(NS_LITERAL_CSTRING("AdapterVendorID"),
      vendorIDString);
  CrashReporter::AnnotateCrashReport(NS_LITERAL_CSTRING("AdapterDeviceID"),
      deviceIDString);

  <comment type="block">/* Add an App Note for now so that we get the data immediately. These
   * can go away after we store the above in the socorro db */</comment>
  nsCAutoString note;
  <comment type="block">/* AppendPrintf only supports 32 character strings, mrghh. */</comment>
  note.AppendPrintf("AdapterVendorID: %04x, ", vendorID);
  note.AppendPrintf("AdapterDeviceID: %04x", deviceID);

  if (vendorID == 0) {
      <comment type="block">/* if we didn't find a valid vendorID lets append the mDeviceID string to try to find out why */</comment>
      note.Append(", ");
      note.AppendWithConversion(mDeviceID);
      note.Append(", ");
      note.AppendWithConversion(mDeviceKeyDebug);
  }
  note.Append("\n");

  CrashReporter::AppendAppNotesToCrashReport(note);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>GfxInfo</name>::<name>GetFeatureStatusImpl</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aFeature</name></decl></param>, <param><decl><type><name>PRInt32</name> *</type><name>aStatus</name></decl></param>, <param><decl><type><name>nsAString</name> &amp;</type> <name>aSuggestedDriverVersion</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>status</name> <init>= <expr><name><name>nsIGfxInfo</name>::<name>FEATURE_NO_INFO</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>aSuggestedDriverVersion</name>.<name>SetIsVoid</name></name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>aFeature</name> == <name>FEATURE_OPENGL_LAYERS</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsAutoString</name></type> <name>str</name></decl>;</decl_stmt>
      <comment type="block">/* Whitelist Galaxy S phones */</comment>
      <if>if <condition>(<expr><call><name><name>mozilla</name>::<name>AndroidBridge</name>::<name>Bridge</name></name><argument_list>()</argument_list></call>-&gt;<call><name>GetStaticStringField</name><argument_list>(<argument><expr>"android/os/Build"</expr></argument>, <argument><expr>"HARDWARE"</expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>str</name> != <call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"smdkc110"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>status</name> = <name>FEATURE_BLOCKED_DEVICE</name></expr>;</expr_stmt>
          }</block></then></if>
      }</block></then></if>
  }</block></then></if>

  <expr_stmt><expr>*<name>aStatus</name> = <name>status</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
</unit>
