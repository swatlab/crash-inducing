<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="0082115bfbda28bd4f733af15adc3f634aa8b29d.h"><comment type="block">/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: set ts=4 sw=4 et tw=99 ft=cpp:
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla SpiderMonkey JavaScript 1.9 code, released
 * June 30, 2010
 *
 * The Initial Developer of the Original Code is
 *   the Mozilla Corporation.
 *
 * Contributor(s):
 *   Luke Wagner &lt;lw@mozilla.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>jsvalimpl_h__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jsvalimpl_h__</name></cpp:macro></cpp:define>
<comment type="block">/*
 * JS value implementation details for operations on jsval and jsid.
 * Embeddings should not rely on any of the definitions in this file. For a
 * description of the value representation and the engine-internal C++ value
 * interface, js::Value, see jsvalue.h.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsutil.h"</cpp:file></cpp:include>

<function><type><name>JS_BEGIN_EXTERN_C</name></type>

<comment type="block">/*
 * Try to get jsvals 64-bit aligned. We could almost assert that all values are
 * aligned, but MSVC and GCC occasionally break alignment.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__GNUC__</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_ALIGNMENT</name></cpp:macro>        <cpp:value>__attribute__((aligned (8)))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <comment type="block">/*
   * Structs can be aligned with MSVC, but not if they are used as parameters,
   * so we just don't try to align.
   */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_ALIGNMENT</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_C</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_CC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_ALIGNMENT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_BITS_PER_WORD</name> == 64</expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TAG_SHIFT</name></cpp:macro> <cpp:value>47</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * We try to use enums so that printing a jsval_layout in the debugger shows
 * nice symbolic type tags, however we can only do this when we can force the
 * underlying type of the enum to be the desired size.
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_CC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>JS_ENUM_HEADER</name><parameter_list>(<param><type><name>id</name></type></param>, <param><type><name>type</name></type></param>)</parameter_list></cpp:macro>              <cpp:value>enum id : type</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>JS_ENUM_MEMBER</name><parameter_list>(<param><type><name>id</name></type></param>, <param><type><name>type</name></type></param>, <param><type><name>value</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>id = (type)value,</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>JS_LAST_ENUM_MEMBER</name><parameter_list>(<param><type><name>id</name></type></param>, <param><type><name>type</name></type></param>, <param><type><name>value</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>id = (type)value</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>JS_ENUM_FOOTER</name><parameter_list>(<param><type><name>id</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>JS_ENUM_HEADER</name><parameter_list>(<param><type><name>id</name></type></param>, <param><type><name>type</name></type></param>)</parameter_list></cpp:macro>              <cpp:value>enum id</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>JS_ENUM_MEMBER</name><parameter_list>(<param><type><name>id</name></type></param>, <param><type><name>type</name></type></param>, <param><type><name>value</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>id = (type)value,</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>JS_LAST_ENUM_MEMBER</name><parameter_list>(<param><type><name>id</name></type></param>, <param><type><name>type</name></type></param>, <param><type><name>value</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>id = (type)value</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>JS_ENUM_FOOTER</name><parameter_list>(<param><type><name>id</name></type></param>)</parameter_list></cpp:macro>                    <cpp:value>__attribute__((packed))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Remember to propagate changes to the C defines below. */</comment>
<name>JS_ENUM_HEADER</name><parameter_list>(<param><decl><type><name>JSValueType</name></type></decl></param>, <param><decl><type><name>uint8</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>JSVAL_TYPE_DOUBLE</name>              = 0x00</expr>,
    <expr><name>JSVAL_TYPE_INT32</name>               = 0x01</expr>,
    <expr><name>JSVAL_TYPE_UNDEFINED</name>           = 0x02</expr>,
    <expr><name>JSVAL_TYPE_BOOLEAN</name>             = 0x03</expr>,
    <expr><name>JSVAL_TYPE_MAGIC</name>               = 0x04</expr>,
    <expr><name>JSVAL_TYPE_STRING</name>              = 0x05</expr>,
    <expr><name>JSVAL_TYPE_NULL</name>                = 0x06</expr>,
    <expr><name>JSVAL_TYPE_OBJECT</name>              = 0x07</expr>,

    <comment type="block">/* The below types never appear in a jsval; they are only used in tracing. */</comment>

    <expr><name>JSVAL_TYPE_NONFUNOBJ</name>           = 0x57</expr>,
    <expr><name>JSVAL_TYPE_FUNOBJ</name>              = 0x67</expr>,

    <expr><name>JSVAL_TYPE_STRORNULL</name>           = 0x97</expr>,
    <expr><name>JSVAL_TYPE_OBJORNULL</name>           = 0x98</expr>,

    <expr><name>JSVAL_TYPE_BOXED</name>               = 0x99</expr>,
    <expr><name>JSVAL_TYPE_UNINITIALIZED</name>       = 0xcd</expr></expr_stmt>
}</block></function> <expr_stmt><expr><call><name>JS_ENUM_FOOTER</name><argument_list>(<argument><expr><name>JSValueType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JS_STATIC_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JSValueType</name></expr></argument>)</argument_list></sizeof> == 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_BITS_PER_WORD</name> == 32</expr></cpp:if>

<comment type="block">/* Remember to propagate changes to the C defines below. */</comment>
<macro><name>JS_ENUM_HEADER</name><argument_list>(<argument>JSValueTag</argument>, <argument>uint32</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name>JSVAL_TAG_CLEAR</name>                = 0xFFFF0000</expr>,
    <expr><name>JSVAL_TAG_INT32</name>                = <name>JSVAL_TAG_CLEAR</name> | <name>JSVAL_TYPE_INT32</name></expr>,
    <expr><name>JSVAL_TAG_UNDEFINED</name>            = <name>JSVAL_TAG_CLEAR</name> | <name>JSVAL_TYPE_UNDEFINED</name></expr>,
    <expr><name>JSVAL_TAG_STRING</name>               = <name>JSVAL_TAG_CLEAR</name> | <name>JSVAL_TYPE_STRING</name></expr>,
    <expr><name>JSVAL_TAG_BOOLEAN</name>              = <name>JSVAL_TAG_CLEAR</name> | <name>JSVAL_TYPE_BOOLEAN</name></expr>,
    <expr><name>JSVAL_TAG_MAGIC</name>                = <name>JSVAL_TAG_CLEAR</name> | <name>JSVAL_TYPE_MAGIC</name></expr>,
    <expr><name>JSVAL_TAG_NULL</name>                 = <name>JSVAL_TAG_CLEAR</name> | <name>JSVAL_TYPE_NULL</name></expr>,
    <expr><name>JSVAL_TAG_OBJECT</name>               = <name>JSVAL_TAG_CLEAR</name> | <name>JSVAL_TYPE_OBJECT</name></expr></expr_stmt>
}</block> <expr_stmt><expr><call><name>JS_ENUM_FOOTER</name><argument_list>(<argument><expr><name>JSValueTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JS_STATIC_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JSValueTag</name></expr></argument>)</argument_list></sizeof> == 4</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>JS_BITS_PER_WORD</name> == 64</expr></cpp:elif>

<comment type="block">/* Remember to propagate changes to the C defines below. */</comment>
<macro><name>JS_ENUM_HEADER</name><argument_list>(<argument>JSValueTag</argument>, <argument>uint32</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name>JSVAL_TAG_MAX_DOUBLE</name>           = 0x1FFF0</expr>,
    <expr><name>JSVAL_TAG_INT32</name>                = <name>JSVAL_TAG_MAX_DOUBLE</name> | <name>JSVAL_TYPE_INT32</name></expr>,
    <expr><name>JSVAL_TAG_UNDEFINED</name>            = <name>JSVAL_TAG_MAX_DOUBLE</name> | <name>JSVAL_TYPE_UNDEFINED</name></expr>,
    <expr><name>JSVAL_TAG_STRING</name>               = <name>JSVAL_TAG_MAX_DOUBLE</name> | <name>JSVAL_TYPE_STRING</name></expr>,
    <expr><name>JSVAL_TAG_BOOLEAN</name>              = <name>JSVAL_TAG_MAX_DOUBLE</name> | <name>JSVAL_TYPE_BOOLEAN</name></expr>,
    <expr><name>JSVAL_TAG_MAGIC</name>                = <name>JSVAL_TAG_MAX_DOUBLE</name> | <name>JSVAL_TYPE_MAGIC</name></expr>,
    <expr><name>JSVAL_TAG_NULL</name>                 = <name>JSVAL_TAG_MAX_DOUBLE</name> | <name>JSVAL_TYPE_NULL</name></expr>,
    <expr><name>JSVAL_TAG_OBJECT</name>               = <name>JSVAL_TAG_MAX_DOUBLE</name> | <name>JSVAL_TYPE_OBJECT</name></expr></expr_stmt>
}</block> <expr_stmt><expr><call><name>JS_ENUM_FOOTER</name><argument_list>(<argument><expr><name>JSValueTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JS_STATIC_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JSValueTag</name></expr></argument>)</argument_list></sizeof> == <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>JS_ENUM_HEADER</name><argument_list>(<argument>JSValueShiftedTag</argument>, <argument>uint64</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name>JSVAL_SHIFTED_TAG_MAX_DOUBLE</name>   = ((((<name>uint64</name>)<name>JSVAL_TAG_MAX_DOUBLE</name>) &lt;&lt; <name>JSVAL_TAG_SHIFT</name>) | 0xFFFFFFFF)</expr>,
    <expr><name>JSVAL_SHIFTED_TAG_INT32</name>        = (((<name>uint64</name>)<name>JSVAL_TAG_INT32</name>)      &lt;&lt; <name>JSVAL_TAG_SHIFT</name>)</expr>,
    <expr><name>JSVAL_SHIFTED_TAG_UNDEFINED</name>    = (((<name>uint64</name>)<name>JSVAL_TAG_UNDEFINED</name>)  &lt;&lt; <name>JSVAL_TAG_SHIFT</name>)</expr>,
    <expr><name>JSVAL_SHIFTED_TAG_STRING</name>       = (((<name>uint64</name>)<name>JSVAL_TAG_STRING</name>)     &lt;&lt; <name>JSVAL_TAG_SHIFT</name>)</expr>,
    <expr><name>JSVAL_SHIFTED_TAG_BOOLEAN</name>      = (((<name>uint64</name>)<name>JSVAL_TAG_BOOLEAN</name>)    &lt;&lt; <name>JSVAL_TAG_SHIFT</name>)</expr>,
    <expr><name>JSVAL_SHIFTED_TAG_MAGIC</name>        = (((<name>uint64</name>)<name>JSVAL_TAG_MAGIC</name>)      &lt;&lt; <name>JSVAL_TAG_SHIFT</name>)</expr>,
    <expr><name>JSVAL_SHIFTED_TAG_NULL</name>         = (((<name>uint64</name>)<name>JSVAL_TAG_NULL</name>)       &lt;&lt; <name>JSVAL_TAG_SHIFT</name>)</expr>,
    <expr><name>JSVAL_SHIFTED_TAG_OBJECT</name>       = (((<name>uint64</name>)<name>JSVAL_TAG_OBJECT</name>)     &lt;&lt; <name>JSVAL_TAG_SHIFT</name>)</expr></expr_stmt>
}</block> <expr_stmt><expr><call><name>JS_ENUM_FOOTER</name><argument_list>(<argument><expr><name>JSValueShiftedTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JS_STATIC_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JSValueShiftedTag</name></expr></argument>)</argument_list></sizeof> == <sizeof>sizeof<argument_list>(<argument><expr><name>uint64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  <comment type="block">/* defined(__cplusplus) */</comment>

<typedef>typedef <type><name>uint8</name></type> <name>JSValueType</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TYPE_DOUBLE</name></cpp:macro>            <cpp:value>((uint8)0x00)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TYPE_INT32</name></cpp:macro>             <cpp:value>((uint8)0x01)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TYPE_UNDEFINED</name></cpp:macro>         <cpp:value>((uint8)0x02)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TYPE_BOOLEAN</name></cpp:macro>           <cpp:value>((uint8)0x03)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TYPE_MAGIC</name></cpp:macro>             <cpp:value>((uint8)0x04)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TYPE_STRING</name></cpp:macro>            <cpp:value>((uint8)0x05)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TYPE_NULL</name></cpp:macro>              <cpp:value>((uint8)0x06)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TYPE_OBJECT</name></cpp:macro>            <cpp:value>((uint8)0x07)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TYPE_NONFUNOBJ</name></cpp:macro>         <cpp:value>((uint8)0x57)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TYPE_FUNOBJ</name></cpp:macro>            <cpp:value>((uint8)0x67)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TYPE_STRORNULL</name></cpp:macro>         <cpp:value>((uint8)0x97)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TYPE_OBJORNULL</name></cpp:macro>         <cpp:value>((uint8)0x98)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TYPE_BOXED</name></cpp:macro>             <cpp:value>((uint8)0x99)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TYPE_UNINITIALIZED</name></cpp:macro>     <cpp:value>((uint8)0xcd)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_BITS_PER_WORD</name> == 32</expr></cpp:if>

<typedef>typedef <type><name>uint32</name></type> <name>JSValueTag</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TAG_CLEAR</name></cpp:macro>              <cpp:value>((uint32)(0xFFFF0000))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TAG_INT32</name></cpp:macro>              <cpp:value>((uint32)(JSVAL_TAG_CLEAR | JSVAL_TYPE_INT32))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TAG_UNDEFINED</name></cpp:macro>          <cpp:value>((uint32)(JSVAL_TAG_CLEAR | JSVAL_TYPE_UNDEFINED))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TAG_STRING</name></cpp:macro>             <cpp:value>((uint32)(JSVAL_TAG_CLEAR | JSVAL_TYPE_STRING))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TAG_BOOLEAN</name></cpp:macro>            <cpp:value>((uint32)(JSVAL_TAG_CLEAR | JSVAL_TYPE_BOOLEAN))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TAG_MAGIC</name></cpp:macro>              <cpp:value>((uint32)(JSVAL_TAG_CLEAR | JSVAL_TYPE_MAGIC))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TAG_NULL</name></cpp:macro>               <cpp:value>((uint32)(JSVAL_TAG_CLEAR | JSVAL_TYPE_NULL))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TAG_OBJECT</name></cpp:macro>             <cpp:value>((uint32)(JSVAL_TAG_CLEAR | JSVAL_TYPE_OBJECT))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>JS_BITS_PER_WORD</name> == 64</expr></cpp:elif>

<typedef>typedef <type><name>uint32</name></type> <name>JSValueTag</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TAG_MAX_DOUBLE</name></cpp:macro>         <cpp:value>((uint32)(0x1FFF0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TAG_INT32</name></cpp:macro>              <cpp:value>(uint32)(JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_INT32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TAG_UNDEFINED</name></cpp:macro>          <cpp:value>(uint32)(JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_UNDEFINED)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TAG_STRING</name></cpp:macro>             <cpp:value>(uint32)(JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_STRING)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TAG_BOOLEAN</name></cpp:macro>            <cpp:value>(uint32)(JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_BOOLEAN)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TAG_MAGIC</name></cpp:macro>              <cpp:value>(uint32)(JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_MAGIC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TAG_NULL</name></cpp:macro>               <cpp:value>(uint32)(JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TAG_OBJECT</name></cpp:macro>             <cpp:value>(uint32)(JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_OBJECT)</cpp:value></cpp:define>

<typedef>typedef <type><name>uint64</name></type> <name>JSValueShiftedTag</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_SHIFTED_TAG_MAX_DOUBLE</name></cpp:macro> <cpp:value>((((uint64)JSVAL_TAG_MAX_DOUBLE) &lt;&lt; JSVAL_TAG_SHIFT) | 0xFFFFFFFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_SHIFTED_TAG_INT32</name></cpp:macro>      <cpp:value>(((uint64)JSVAL_TAG_INT32)      &lt;&lt; JSVAL_TAG_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_SHIFTED_TAG_UNDEFINED</name></cpp:macro>  <cpp:value>(((uint64)JSVAL_TAG_UNDEFINED)  &lt;&lt; JSVAL_TAG_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_SHIFTED_TAG_STRING</name></cpp:macro>     <cpp:value>(((uint64)JSVAL_TAG_STRING)     &lt;&lt; JSVAL_TAG_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_SHIFTED_TAG_BOOLEAN</name></cpp:macro>    <cpp:value>(((uint64)JSVAL_TAG_BOOLEAN)    &lt;&lt; JSVAL_TAG_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_SHIFTED_TAG_MAGIC</name></cpp:macro>      <cpp:value>(((uint64)JSVAL_TAG_MAGIC)      &lt;&lt; JSVAL_TAG_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_SHIFTED_TAG_NULL</name></cpp:macro>       <cpp:value>(((uint64)JSVAL_TAG_NULL)       &lt;&lt; JSVAL_TAG_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_SHIFTED_TAG_OBJECT</name></cpp:macro>     <cpp:value>(((uint64)JSVAL_TAG_OBJECT)     &lt;&lt; JSVAL_TAG_SHIFT)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* JS_BITS_PER_WORD */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* defined(__cplusplus) &amp;&amp; !defined(__SUNPRO_CC) */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_LOWER_INCL_TYPE_OF_OBJ_OR_NULL_SET</name></cpp:macro>        <cpp:value>JSVAL_TYPE_NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_UPPER_EXCL_TYPE_OF_PRIMITIVE_SET</name></cpp:macro>          <cpp:value>JSVAL_TYPE_OBJECT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_UPPER_INCL_TYPE_OF_NUMBER_SET</name></cpp:macro>             <cpp:value>JSVAL_TYPE_INT32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_LOWER_INCL_TYPE_OF_PTR_PAYLOAD_SET</name></cpp:macro>        <cpp:value>JSVAL_TYPE_MAGIC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_UPPER_INCL_TYPE_OF_VALUE_SET</name></cpp:macro>              <cpp:value>JSVAL_TYPE_OBJECT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_UPPER_INCL_TYPE_OF_BOXABLE_SET</name></cpp:macro>            <cpp:value>JSVAL_TYPE_FUNOBJ</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_BITS_PER_WORD</name> == 32</expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TYPE_TO_TAG</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>((JSValueTag)(JSVAL_TAG_CLEAR | (type)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_LOWER_INCL_TAG_OF_OBJ_OR_NULL_SET</name></cpp:macro>         <cpp:value>JSVAL_TAG_NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_UPPER_EXCL_TAG_OF_PRIMITIVE_SET</name></cpp:macro>           <cpp:value>JSVAL_TAG_OBJECT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_UPPER_INCL_TAG_OF_NUMBER_SET</name></cpp:macro>              <cpp:value>JSVAL_TAG_INT32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_LOWER_INCL_TAG_OF_GCTHING_SET</name></cpp:macro>             <cpp:value>JSVAL_TAG_STRING</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>JS_BITS_PER_WORD</name> == 64</expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_PAYLOAD_MASK</name></cpp:macro>           <cpp:value>0x00007FFFFFFFFFFFLL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TAG_MASK</name></cpp:macro>               <cpp:value>0xFFFF800000000000LL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TYPE_TO_TAG</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>((JSValueTag)(JSVAL_TAG_MAX_DOUBLE | (type)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_TYPE_TO_SHIFTED_TAG</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((uint64)JSVAL_TYPE_TO_TAG(type)) &lt;&lt; JSVAL_TAG_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_LOWER_INCL_SHIFTED_TAG_OF_OBJ_OR_NULL_SET</name></cpp:macro>  <cpp:value>JSVAL_SHIFTED_TAG_NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_UPPER_EXCL_SHIFTED_TAG_OF_PRIMITIVE_SET</name></cpp:macro>    <cpp:value>JSVAL_SHIFTED_TAG_OBJECT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_UPPER_EXCL_SHIFTED_TAG_OF_NUMBER_SET</name></cpp:macro>       <cpp:value>JSVAL_SHIFTED_TAG_UNDEFINED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_LOWER_INCL_SHIFTED_TAG_OF_PTR_PAYLOAD_SET</name></cpp:macro>  <cpp:value>JSVAL_SHIFTED_TAG_MAGIC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_LOWER_INCL_SHIFTED_TAG_OF_GCTHING_SET</name></cpp:macro>      <cpp:value>JSVAL_SHIFTED_TAG_STRING</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JS_BITS_PER_WORD */</comment>

<typedef>typedef <type><enum>enum <name>JSWhyMagic</name>
<block>{
    <decl><name>JS_ARRAY_HOLE</name></decl>,               <comment type="block">/* a hole in a dense array */</comment>
    <decl><name>JS_ARGS_HOLE</name></decl>,                <comment type="block">/* a hole in the args object's array */</comment>
    <decl><name>JS_NATIVE_ENUMERATE</name></decl>,         <comment type="block">/* indicates that a custom enumerate hook forwarded
                                  * to js_Enumerate, which really means the object can be
                                  * enumerated like a native object. */</comment>
    <decl><name>JS_NO_ITER_VALUE</name></decl>,            <comment type="block">/* there is not a pending iterator value */</comment>
    <decl><name>JS_GENERATOR_CLOSING</name></decl>,        <comment type="block">/* exception value thrown when closing a generator */</comment>
    <decl><name>JS_NO_CONSTANT</name></decl>,              <comment type="block">/* compiler sentinel value */</comment>
    <decl><name>JS_THIS_POISON</name></decl>,              <comment type="block">/* used in debug builds to catch tracing errors */</comment>
    <decl><name>JS_SERIALIZE_NO_NODE</name></decl>,        <comment type="block">/* an empty subnode in the AST serializer */</comment>
    <decl><name>JS_GENERIC_MAGIC</name></decl>             <comment type="block">/* for local use */</comment>
}</block></enum></type> <name>JSWhyMagic</name>;</typedef>

<typedef>typedef <type>struct <name>JSString</name></type> <name>JSString</name>;</typedef>
<typedef>typedef <type>struct <name>JSObject</name></type> <name>JSObject</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IS_LITTLE_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>JS_BITS_PER_WORD</name> == 32</expr></cpp:if>
<typedef>typedef <type><union>union <name>jsval_layout</name>
<block>{
    <decl_stmt><decl><type><name>uint64</name></type> <name>asBits</name></decl>;</decl_stmt>
    <struct>struct <block>{
        <union>union <block>{
            <decl_stmt><decl><type><name>int32</name></type>          <name>i32</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uint32</name></type>         <name>u32</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JSBool</name></type>         <name>boo</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JSString</name>       *</type><name>str</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JSObject</name>       *</type><name>obj</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>void</name>           *</type><name>ptr</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JSWhyMagic</name></type>     <name>why</name></decl>;</decl_stmt>
        }</block> <decl><name>payload</name></decl>;</union>
        <decl_stmt><decl><type><name>JSValueTag</name></type> <name>tag</name></decl>;</decl_stmt>
    }</block> <decl><name>s</name></decl>;</struct>
    <decl_stmt><decl><type><name>double</name></type> <name>asDouble</name></decl>;</decl_stmt>
}</block></union></type> <name>jsval_layout</name>;</typedef>
<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><name>JS_BITS_PER_WORD</name> == 64</expr></cpp:elif>
<typedef>typedef <type><union>union <name>jsval_layout</name>
<block>{
    <decl_stmt><decl><type><name>uint64</name></type> <name>asBits</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN64</name></cpp:ifndef>
    <comment type="block">/* MSVC does not pack these correctly :-( */</comment>
    <struct>struct <block>{
        <expr_stmt><expr><name>uint64</name>             <name>payload47</name> : 47</expr>;</expr_stmt>
        <expr_stmt><expr><name>JSValueTag</name>         <name>tag</name> : 17</expr>;</expr_stmt>
    }</block> <decl><name>debugView</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <struct>struct <block>{
        <union>union <block>{
            <decl_stmt><decl><type><name>int32</name></type>          <name>i32</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uint32</name></type>         <name>u32</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JSWhyMagic</name></type>     <name>why</name></decl>;</decl_stmt>
        }</block> <decl><name>payload</name></decl>;</union>
    }</block> <decl><name>s</name></decl>;</struct>
    <decl_stmt><decl><type><name>double</name></type> <name>asDouble</name></decl>;</decl_stmt>
}</block></union></type> <name>jsval_layout</name>;</typedef>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* JS_BITS_PER_WORD */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>   <comment type="block">/* defined(IS_LITTLE_ENDIAN) */</comment>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>JS_BITS_PER_WORD</name> == 32</expr></cpp:if>
<typedef>typedef <type><union>union <name>jsval_layout</name>
<block>{
    <decl_stmt><decl><type><name>uint64</name></type> <name>asBits</name></decl>;</decl_stmt>
    <struct>struct <block>{
        <decl_stmt><decl><type><name>JSValueTag</name></type> <name>tag</name></decl>;</decl_stmt>
        <union>union <block>{
            <decl_stmt><decl><type><name>int32</name></type>          <name>i32</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uint32</name></type>         <name>u32</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JSBool</name></type>         <name>boo</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JSString</name>       *</type><name>str</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JSObject</name>       *</type><name>obj</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>void</name>           *</type><name>ptr</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JSWhyMagic</name></type>     <name>why</name></decl>;</decl_stmt>
        }</block> <decl><name>payload</name></decl>;</union>
    }</block> <decl><name>s</name></decl>;</struct>
    <decl_stmt><decl><type><name>double</name></type> <name>asDouble</name></decl>;</decl_stmt>
}</block></union></type> <name>jsval_layout</name>;</typedef>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JS_BITS_PER_WORD */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* defined(IS_LITTLE_ENDIAN) */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_BITS_PER_WORD</name> == 32</expr></cpp:if>

<comment type="block">/*
 * N.B. GCC, in some but not all cases, chooses to emit signed comparison of
 * JSValueTag even though its underlying type has been forced to be uint32.
 * Thus, all comparisons should explicitly cast operands to uint32.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILD_JSVAL</name><parameter_list>(<param><type><name>tag</name></type></param>, <param><type><name>payload</name></type></param>)</parameter_list></cpp:macro> \
    <cpp:value>((((uint64)(uint32)(tag)) &lt;&lt; 32) | (uint32)(payload))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_DOUBLE_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr>(<name>uint32</name>)<name><name>l</name>.<name>s</name>.<name>tag</name></name> &lt; (<name>uint32</name>)<name>JSVAL_TAG_CLEAR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>jsval_layout</name></type>
<name>DOUBLE_TO_JSVAL_IMPL</name><parameter_list>(<param><decl><type><name>double</name></type> <name>d</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval_layout</name></type> <name>l</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>l</name>.<name>asDouble</name></name> = <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_DOUBLE_IMPL</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>l</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_INT32_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>l</name>.<name>s</name>.<name>tag</name></name> == <name>JSVAL_TAG_INT32</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>int32</name></type>
<name>JSVAL_TO_INT32_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>l</name>.<name>s</name>.<name>payload</name>.<name>i32</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>jsval_layout</name></type>
<name>INT32_TO_JSVAL_IMPL</name><parameter_list>(<param><decl><type><name>int32</name></type> <name>i</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval_layout</name></type> <name>l</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>l</name>.<name>s</name>.<name>tag</name></name> = <name>JSVAL_TAG_INT32</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name>.<name>s</name>.<name>payload</name>.<name>i32</name></name> = <name>i</name></expr>;</expr_stmt>
    <return>return <expr><name>l</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_NUMBER_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSValueTag</name></type> <name>tag</name> <init>= <expr><name><name>l</name>.<name>s</name>.<name>tag</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>tag</name> != <name>JSVAL_TAG_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>(<name>uint32</name>)<name>tag</name> &lt;= (<name>uint32</name>)<name>JSVAL_UPPER_INCL_TAG_OF_NUMBER_SET</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_UNDEFINED_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>l</name>.<name>s</name>.<name>tag</name></name> == <name>JSVAL_TAG_UNDEFINED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_STRING_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>l</name>.<name>s</name>.<name>tag</name></name> == <name>JSVAL_TAG_STRING</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>jsval_layout</name></type>
<name>STRING_TO_JSVAL_IMPL</name><parameter_list>(<param><decl><type><name>JSString</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval_layout</name></type> <name>l</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>l</name>.<name>s</name>.<name>tag</name></name> = <name>JSVAL_TAG_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name>.<name>s</name>.<name>payload</name>.<name>str</name></name> = <name>str</name></expr>;</expr_stmt>
    <return>return <expr><name>l</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSString</name> *</type>
<name>JSVAL_TO_STRING_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>l</name>.<name>s</name>.<name>payload</name>.<name>str</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_BOOLEAN_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>l</name>.<name>s</name>.<name>tag</name></name> == <name>JSVAL_TAG_BOOLEAN</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_TO_BOOLEAN_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>l</name>.<name>s</name>.<name>payload</name>.<name>boo</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>jsval_layout</name></type>
<name>BOOLEAN_TO_JSVAL_IMPL</name><parameter_list>(<param><decl><type><name>JSBool</name></type> <name>b</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval_layout</name></type> <name>l</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>l</name>.<name>s</name>.<name>tag</name></name> = <name>JSVAL_TAG_BOOLEAN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name>.<name>s</name>.<name>payload</name>.<name>boo</name></name> = <name>b</name></expr>;</expr_stmt>
    <return>return <expr><name>l</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_MAGIC_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>l</name>.<name>s</name>.<name>tag</name></name> == <name>JSVAL_TAG_MAGIC</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSObject</name> *</type>
<name>MAGIC_JSVAL_TO_OBJECT_OR_NULL_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_MAGIC_IMPL</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>l</name>.<name>s</name>.<name>payload</name>.<name>obj</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_OBJECT_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>l</name>.<name>s</name>.<name>tag</name></name> == <name>JSVAL_TAG_OBJECT</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_PRIMITIVE_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr>(<name>uint32</name>)<name><name>l</name>.<name>s</name>.<name>tag</name></name> &lt; (<name>uint32</name>)<name>JSVAL_UPPER_EXCL_TAG_OF_PRIMITIVE_SET</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_OBJECT_OR_NULL_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>(<name>uint32</name>)<name><name>l</name>.<name>s</name>.<name>tag</name></name> &lt;= (<name>uint32</name>)<name>JSVAL_TAG_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>(<name>uint32</name>)<name><name>l</name>.<name>s</name>.<name>tag</name></name> &gt;= (<name>uint32</name>)<name>JSVAL_LOWER_INCL_TAG_OF_OBJ_OR_NULL_SET</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSObject</name> *</type>
<name>JSVAL_TO_OBJECT_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>l</name>.<name>s</name>.<name>payload</name>.<name>obj</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>jsval_layout</name></type>
<name>OBJECT_TO_JSVAL_IMPL</name><parameter_list>(<param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval_layout</name></type> <name>l</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name>.<name>s</name>.<name>tag</name></name> = <name>JSVAL_TAG_OBJECT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name>.<name>s</name>.<name>payload</name>.<name>obj</name></name> = <name>obj</name></expr>;</expr_stmt>
    <return>return <expr><name>l</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_NULL_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>l</name>.<name>s</name>.<name>tag</name></name> == <name>JSVAL_TAG_NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>jsval_layout</name></type>
<name>PRIVATE_PTR_TO_JSVAL_IMPL</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ptr</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval_layout</name></type> <name>l</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>((<name>uint32</name>)<name>ptr</name> &amp; 1) == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name>.<name>s</name>.<name>tag</name></name> = (<name>JSValueTag</name>)0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name>.<name>s</name>.<name>payload</name>.<name>ptr</name></name> = <name>ptr</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_DOUBLE_IMPL</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>l</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>void</name> *</type>
<name>JSVAL_TO_PRIVATE_PTR_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>l</name>.<name>s</name>.<name>payload</name>.<name>ptr</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_GCTHING_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* gcc sometimes generates signed &lt; without explicit casts. */</comment>
    <return>return <expr>(<name>uint32</name>)<name><name>l</name>.<name>s</name>.<name>tag</name></name> &gt;= (<name>uint32</name>)<name>JSVAL_LOWER_INCL_TAG_OF_GCTHING_SET</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>void</name> *</type>
<name>JSVAL_TO_GCTHING_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>l</name>.<name>s</name>.<name>payload</name>.<name>ptr</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_TRACEABLE_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>l</name>.<name>s</name>.<name>tag</name></name> == <name>JSVAL_TAG_STRING</name> || <name><name>l</name>.<name>s</name>.<name>tag</name></name> == <name>JSVAL_TAG_OBJECT</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>uint32</name></type>
<name>JSVAL_TRACE_KIND_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr>(<name>uint32</name>)(<name>JSBool</name>)<call><name>JSVAL_IS_STRING_IMPL</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>JS_BITS_PER_WORD</name> == 64</expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILD_JSVAL</name><parameter_list>(<param><type><name>tag</name></type></param>, <param><type><name>payload</name></type></param>)</parameter_list></cpp:macro> \
    <cpp:value>((((uint64)(uint32)(tag)) &lt;&lt; JSVAL_TAG_SHIFT) | (payload))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_DOUBLE_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>l</name>.<name>asBits</name></name> &lt;= <name>JSVAL_SHIFTED_TAG_MAX_DOUBLE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>jsval_layout</name></type>
<name>DOUBLE_TO_JSVAL_IMPL</name><parameter_list>(<param><decl><type><name>double</name></type> <name>d</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval_layout</name></type> <name>l</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>l</name>.<name>asDouble</name></name> = <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>l</name>.<name>asBits</name></name> &lt;= <name>JSVAL_SHIFTED_TAG_MAX_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>l</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_INT32_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call>(<name>uint32</name>)<argument_list>(<argument><expr><name><name>l</name>.<name>asBits</name></name> &gt;&gt; <name>JSVAL_TAG_SHIFT</name></expr></argument>)</argument_list></call> == <name>JSVAL_TAG_INT32</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>int32</name></type>
<name>JSVAL_TO_INT32_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr>(<name>int32</name>)<name><name>l</name>.<name>asBits</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>jsval_layout</name></type>
<name>INT32_TO_JSVAL_IMPL</name><parameter_list>(<param><decl><type><name>int32</name></type> <name>i32</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval_layout</name></type> <name>l</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>l</name>.<name>asBits</name></name> = ((<name>uint64</name>)(<name>uint32</name>)<name>i32</name>) | <name>JSVAL_SHIFTED_TAG_INT32</name></expr>;</expr_stmt>
    <return>return <expr><name>l</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_NUMBER_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>l</name>.<name>asBits</name></name> &lt; <name>JSVAL_UPPER_EXCL_SHIFTED_TAG_OF_NUMBER_SET</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_UNDEFINED_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>l</name>.<name>asBits</name></name> == <name>JSVAL_SHIFTED_TAG_UNDEFINED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_STRING_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call>(<name>uint32</name>)<argument_list>(<argument><expr><name><name>l</name>.<name>asBits</name></name> &gt;&gt; <name>JSVAL_TAG_SHIFT</name></expr></argument>)</argument_list></call> == <name>JSVAL_TAG_STRING</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>jsval_layout</name></type>
<name>STRING_TO_JSVAL_IMPL</name><parameter_list>(<param><decl><type><name>JSString</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval_layout</name></type> <name>l</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64</name></type> <name>strBits</name> <init>= <expr>(<name>uint64</name>)<name>str</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>(<name>strBits</name> &gt;&gt; <name>JSVAL_TAG_SHIFT</name>) == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name>.<name>asBits</name></name> = <name>strBits</name> | <name>JSVAL_SHIFTED_TAG_STRING</name></expr>;</expr_stmt>
    <return>return <expr><name>l</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSString</name> *</type>
<name>JSVAL_TO_STRING_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call>(<name>JSString</name> *)<argument_list>(<argument><expr><name><name>l</name>.<name>asBits</name></name> &amp; <name>JSVAL_PAYLOAD_MASK</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_BOOLEAN_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call>(<name>uint32</name>)<argument_list>(<argument><expr><name><name>l</name>.<name>asBits</name></name> &gt;&gt; <name>JSVAL_TAG_SHIFT</name></expr></argument>)</argument_list></call> == <name>JSVAL_TAG_BOOLEAN</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_TO_BOOLEAN_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr>(<name>JSBool</name>)<name><name>l</name>.<name>asBits</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>jsval_layout</name></type>
<name>BOOLEAN_TO_JSVAL_IMPL</name><parameter_list>(<param><decl><type><name>JSBool</name></type> <name>b</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval_layout</name></type> <name>l</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>l</name>.<name>asBits</name></name> = ((<name>uint64</name>)(<name>uint32</name>)<name>b</name>) | <name>JSVAL_SHIFTED_TAG_BOOLEAN</name></expr>;</expr_stmt>
    <return>return <expr><name>l</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_MAGIC_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr>(<name><name>l</name>.<name>asBits</name></name> &gt;&gt; <name>JSVAL_TAG_SHIFT</name>) == <name>JSVAL_TAG_MAGIC</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSObject</name> *</type>
<name>MAGIC_JSVAL_TO_OBJECT_OR_NULL_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_MAGIC_IMPL</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint64</name></type> <name>ptrBits</name> <init>= <expr><name><name>l</name>.<name>asBits</name></name> &amp; <name>JSVAL_PAYLOAD_MASK</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>(<name>ptrBits</name> &gt;&gt; <name>JSVAL_TAG_SHIFT</name>) == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>(<name>JSObject</name> *)<name>ptrBits</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_PRIMITIVE_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>l</name>.<name>asBits</name></name> &lt; <name>JSVAL_UPPER_EXCL_SHIFTED_TAG_OF_PRIMITIVE_SET</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_OBJECT_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>(<name><name>l</name>.<name>asBits</name></name> &gt;&gt; <name>JSVAL_TAG_SHIFT</name>) &lt;= <name>JSVAL_SHIFTED_TAG_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>l</name>.<name>asBits</name></name> &gt;= <name>JSVAL_SHIFTED_TAG_OBJECT</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_OBJECT_OR_NULL_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>(<name><name>l</name>.<name>asBits</name></name> &gt;&gt; <name>JSVAL_TAG_SHIFT</name>) &lt;= <name>JSVAL_TAG_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>l</name>.<name>asBits</name></name> &gt;= <name>JSVAL_LOWER_INCL_SHIFTED_TAG_OF_OBJ_OR_NULL_SET</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSObject</name> *</type>
<name>JSVAL_TO_OBJECT_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uint64</name></type> <name>ptrBits</name> <init>= <expr><name><name>l</name>.<name>asBits</name></name> &amp; <name>JSVAL_PAYLOAD_MASK</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>(<name>ptrBits</name> &amp; 0x7) == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>(<name>JSObject</name> *)<name>ptrBits</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>jsval_layout</name></type>
<name>OBJECT_TO_JSVAL_IMPL</name><parameter_list>(<param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval_layout</name></type> <name>l</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint64</name></type> <name>objBits</name> <init>= <expr>(<name>uint64</name>)<name>obj</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>(<name>objBits</name> &gt;&gt; <name>JSVAL_TAG_SHIFT</name>) == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name>.<name>asBits</name></name> = <name>objBits</name> | <name>JSVAL_SHIFTED_TAG_OBJECT</name></expr>;</expr_stmt>
    <return>return <expr><name>l</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_NULL_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>l</name>.<name>asBits</name></name> == <name>JSVAL_SHIFTED_TAG_NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_GCTHING_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name><name>l</name>.<name>asBits</name></name> &gt;= <name>JSVAL_LOWER_INCL_SHIFTED_TAG_OF_GCTHING_SET</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>void</name> *</type>
<name>JSVAL_TO_GCTHING_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uint64</name></type> <name>ptrBits</name> <init>= <expr><name><name>l</name>.<name>asBits</name></name> &amp; <name>JSVAL_PAYLOAD_MASK</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>(<name>ptrBits</name> &amp; 0x7) == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>(<name>void</name> *)<name>ptrBits</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>JSBool</name></type>
<name>JSVAL_IS_TRACEABLE_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>JSVAL_IS_GCTHING_IMPL</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>JSVAL_IS_NULL_IMPL</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>uint32</name></type>
<name>JSVAL_TRACE_KIND_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call>(<name>uint32</name>)<argument_list>(<argument><expr><name>JSBool</name></expr></argument>)</argument_list></call>!(<call><name>JSVAL_IS_OBJECT_IMPL</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>jsval_layout</name></type>
<name>PRIVATE_PTR_TO_JSVAL_IMPL</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ptr</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval_layout</name></type> <name>l</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64</name></type> <name>ptrBits</name> <init>= <expr>(<name>uint64</name>)<name>ptr</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>(<name>ptrBits</name> &amp; 1) == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name>.<name>asBits</name></name> = <name>ptrBits</name> &gt;&gt; 1</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_DOUBLE_IMPL</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>l</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>void</name> *</type>
<name>JSVAL_TO_PRIVATE_PTR_IMPL</name><parameter_list>(<param><decl><type><name>jsval_layout</name></type> <name>l</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>(<name><name>l</name>.<name>asBits</name></name> &amp; 0x8000000000000000LL) == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call>(<name>void</name> *)<argument_list>(<argument><expr><name><name>l</name>.<name>asBits</name></name> &lt;&lt; 1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>JS_ALWAYS_INLINE</name> <name>double</name></type>
<name>JS_CANONICALIZE_NAN</name><parameter_list>(<param><decl><type><name>double</name></type> <name>d</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><call><name>JS_UNLIKELY</name><argument_list>(<argument><expr><name>d</name> != <name>d</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>jsval_layout</name></type> <name>l</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>l</name>.<name>asBits</name></name> = 0x7FF8000000000000LL</expr>;</expr_stmt>
        <return>return <expr><name><name>l</name>.<name>asDouble</name></name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>d</name></expr>;</return>
}</block></function>

<comment type="block">/* See JS_USE_JSVAL_JSID_STRUCT_TYPES comment in jsapi.h. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>JS_NO_JSVAL_JSID_STRUCT_TYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>JS_USE_JSVAL_JSID_STRUCT_TYPES</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_USE_JSVAL_JSID_STRUCT_TYPES</name></cpp:ifdef>

<typedef>typedef <type><name>JSVAL_ALIGNMENT</name> <name>jsval_layout</name></type>   <name>jsval</name>;</typedef>
<typedef>typedef <type><struct>struct <name>jsid</name> <block>{ <decl_stmt><decl><type><name>size_t</name></type> <name>asBits</name></decl>;</decl_stmt> }</block></struct></type> <name>jsid</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C++"
<block>{
    <expr_stmt><expr>static <name>JS_ALWAYS_INLINE</name> <name>bool</name>
    <name>operator</name>==(<name>jsid</name> <name>lhs</name>, <name>jsid</name> <name>rhs</name>)
    <block>{
        <return>return <expr><name><name>lhs</name>.<name>asBits</name></name> == <name><name>rhs</name>.<name>asBits</name></name></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr>static <name>JS_ALWAYS_INLINE</name> <name>bool</name>
    <name>operator</name>!=(<name>jsid</name> <name>lhs</name>, <name>jsid</name> <name>rhs</name>)
    <block>{
        <return>return <expr><name><name>lhs</name>.<name>asBits</name></name> != <name><name>rhs</name>.<name>asBits</name></name></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr>static <name>JS_ALWAYS_INLINE</name> <name>bool</name>
    <name>operator</name>==(<name>jsval</name> <name>lhs</name>, <name>jsval</name> <name>rhs</name>)
    <block>{
        <return>return <expr><name><name>lhs</name>.<name>asBits</name></name> == <name><name>rhs</name>.<name>asBits</name></name></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr>static <name>JS_ALWAYS_INLINE</name> <name>bool</name>
    <name>operator</name>!=(<name>jsval</name> <name>lhs</name>, <name>jsval</name> <name>rhs</name>)
    <block>{
        <return>return <expr><name><name>lhs</name>.<name>asBits</name></name> != <name><name>rhs</name>.<name>asBits</name></name></expr>;</return>
    }</block></expr></expr_stmt>
}</block></extern>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(__cplusplus) */</comment>

<comment type="block">/* Internal helper macros */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_BITS</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>(v.asBits)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_FROM_LAYOUT</name><parameter_list>(<param><type><name>l</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(l)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPL_TO_JSVAL</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSID_BITS</name><parameter_list>(<param><type><name>id</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>(id.asBits)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* defined(JS_USE_JSVAL_JSID_STRUCT_TYPES) */</comment>

<comment type="block">/* Use different primitive types so overloading works. */</comment>
<typedef>typedef <type><name>JSVAL_ALIGNMENT</name> <name>uint64</name></type> <name>jsval</name>;</typedef>
<typedef>typedef <type><name>ptrdiff_t</name></type>              <name>jsid</name>;</typedef>

<comment type="block">/* Internal helper macros */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_BITS</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>(v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_FROM_LAYOUT</name><parameter_list>(<param><type><name>l</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((l).asBits)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPL_TO_JSVAL</name><parameter_list>(<param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((v).asBits)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSID_BITS</name><parameter_list>(<param><type><name>id</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>(id)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(JS_USE_JSVAL_JSID_STRUCT_TYPES) */</comment>

<macro><name>JS_END_EXTERN_C</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* jsvalimpl_h__ */</comment>
</unit>
