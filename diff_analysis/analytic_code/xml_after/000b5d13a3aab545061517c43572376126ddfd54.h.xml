<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="000b5d13a3aab545061517c43572376126ddfd54.h"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Author: Kyle Yuan (kyle.yuan@sun.com)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__nsXULTreeAccessible_h__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__nsXULTreeAccessible_h__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsITreeBoxObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsITreeView.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsITreeColumns.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsXULSelectAccessible.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIAccessibleTreeCache.h"</cpp:file></cpp:include>

<comment type="block">/*
 * A class the represents the XUL Tree widget.
 */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>PRUint32</name></type> <name>kMaxTreeColumns</name> <init>= <expr>100</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>PRUint32</name></type> <name>kDefaultTreeCacheSize</name> <init>= <expr>256</expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>class</name> <name>nsXULTreeAccessible</name> : <name>public</name> <name>nsXULSelectableAccessible</name></expr>,
                            <expr><name>public</name> <name>nsIAccessibleTreeCache</name>
<block>{
<expr><name>public</name>:
  <name>NS_DECL_ISUPPORTS_INHERITED</name>
  <name>NS_DECL_NSIACCESSIBLESELECTABLE</name>
  <name>NS_DECL_NSIACCESSIBLETREECACHE</name>

  <call><name>nsXULTreeAccessible</name><argument_list>(<argument><expr><name>nsIDOMNode</name>* <name>aDOMNode</name></expr></argument>, <argument><expr><name>nsIWeakReference</name>* <name>aShell</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>virtual</name> ~<macro><name>nsXULTreeAccessible</name><argument_list>()</argument_list></macro> <block>{}</block>

  <comment type="block">/* ----- nsIAccessible ----- */</comment>
  <name>NS_IMETHOD</name> <call><name>Shutdown</name><argument_list>()</argument_list></call></expr>;
  <expr><name>NS_IMETHOD</name> <call><name>GetRole</name><argument_list>(<argument><expr><name>PRUint32</name> *<name>_retval</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>NS_IMETHOD</name> <call><name>GetState</name><argument_list>(<argument><expr><name>PRUint32</name> *<name>aState</name></expr></argument>, <argument><expr><name>PRUint32</name> *<name>aExtraState</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>NS_IMETHOD</name> <call><name>GetValue</name><argument_list>(<argument><expr><name>nsAString</name>&amp; <name>_retval</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>NS_IMETHOD</name> <call><name>GetFirstChild</name><argument_list>(<argument><expr><name>nsIAccessible</name> **<name>_retval</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>NS_IMETHOD</name> <call><name>GetLastChild</name><argument_list>(<argument><expr><name>nsIAccessible</name> **<name>_retval</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>NS_IMETHOD</name> <call><name>GetChildCount</name><argument_list>(<argument><expr><name>PRInt32</name> *<name>_retval</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>NS_IMETHOD</name> <call><name>GetFocusedChild</name><argument_list>(<argument><expr><name>nsIAccessible</name> **<name>aFocusedChild</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>NS_IMETHOD</name> <macro><name>GetChildAtPoint</name><argument_list>(<argument>PRInt32 aX</argument>, <argument>PRInt32 aY</argument>,
                             <argument>nsIAccessible **aAccessible</argument>)</argument_list></macro></expr>;
  <expr><name>NS_IMETHOD</name> <macro><name>GetDeepestChildAtPoint</name><argument_list>(<argument>PRInt32 aX</argument>, <argument>PRInt32 aY</argument>,
                                    <argument>nsIAccessible **aAccessible</argument>)</argument_list></macro></expr>;

  <expr>static <name>void</name> <call><name>GetTreeBoxObject</name><argument_list>(<argument><expr><name>nsIDOMNode</name>* <name>aDOMNode</name></expr></argument>, <argument><expr><name>nsITreeBoxObject</name>** <name>aBoxObject</name></expr></argument>)</argument_list></call></expr>;
  <expr>static <name>nsresult</name> <call><name>GetColumnCount</name><argument_list>(<argument><expr><name>nsITreeBoxObject</name>* <name>aBoxObject</name></expr></argument>, <argument><expr><name>PRInt32</name> *<name>aCount</name></expr></argument>)</argument_list></call></expr>;

  <expr>static <name>PRBool</name> <call><name>IsColumnHidden</name><argument_list>(<argument><expr><name>nsITreeColumn</name> *<name>aColumn</name></expr></argument>)</argument_list></call></expr>;
  <expr>static <name>already_AddRefed</name>&lt;<name>nsITreeColumn</name>&gt; <call><name>GetNextVisibleColumn</name><argument_list>(<argument><expr><name>nsITreeColumn</name> *<name>aColumn</name></expr></argument>)</argument_list></call></expr>;
  <expr>static <name>already_AddRefed</name>&lt;<name>nsITreeColumn</name>&gt; <call><name>GetFirstVisibleColumn</name><argument_list>(<argument><expr><name>nsITreeBoxObject</name> *<name>aTree</name></expr></argument>)</argument_list></call></expr>;
  <expr>static <name>already_AddRefed</name>&lt;<name>nsITreeColumn</name>&gt; <call><name>GetLastVisibleColumn</name><argument_list>(<argument><expr><name>nsITreeBoxObject</name> *<name>aTree</name></expr></argument>)</argument_list></call></expr>;

<expr><name>protected</name>:
  <name>nsCOMPtr</name>&lt;<name>nsITreeBoxObject</name>&gt; <name>mTree</name></expr>;
  <expr><name>nsCOMPtr</name>&lt;<name>nsITreeView</name>&gt; <name>mTreeView</name></expr>;
  <expr><name>nsAccessNodeHashtable</name> *<name>mAccessNodeCache</name></expr>;

  <expr><name>NS_IMETHOD</name> <macro><name>ChangeSelection</name><argument_list>(<argument>PRInt32 aIndex</argument>, <argument>PRUint8 aMethod</argument>, <argument>PRBool *aSelState</argument>)</argument_list></macro></expr>;
}</block></expr>;</expr_stmt>

<comment type="block">/**
  * Treeitems -- used in Trees
  */</comment>
<expr_stmt><expr><name>class</name> <name>nsXULTreeitemAccessible</name> : <name>public</name> <name>nsLeafAccessible</name></expr>,
                                <expr><name>public</name> <name>nsPIAccessibleTreeItem</name>
<block>{
<expr><name>public</name>:
  enum <block>{ <expr><name>eAction_Click</name> = 0</expr>, <expr><name>eAction_Expand</name> = 1</expr> }</block></expr>;

  <expr><name>NS_DECL_ISUPPORTS_INHERITED</name>
  <name>NS_DECL_NSPIACCESSIBLETREEITEM</name>

  <macro><name>nsXULTreeitemAccessible</name><argument_list>(<argument>nsIAccessible *aParent</argument>, <argument>nsIDOMNode *aDOMNode</argument>, <argument>nsIWeakReference *aShell</argument>, <argument>PRInt32 aRow</argument>, <argument>nsITreeColumn* aColumn = nsnull</argument>)</argument_list></macro></expr>;
  <expr><name>virtual</name> ~<macro><name>nsXULTreeitemAccessible</name><argument_list>()</argument_list></macro> <block>{}</block>

  <name>NS_IMETHOD</name> <call><name>Shutdown</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// nsIAccessible</comment>
  <expr><name>NS_IMETHOD</name> <call><name>GetName</name><argument_list>(<argument><expr><name>nsAString</name>&amp; <name>_retval</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>NS_IMETHOD</name> <call><name>GetRole</name><argument_list>(<argument><expr><name>PRUint32</name> *<name>_retval</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>NS_IMETHOD</name> <call><name>GetState</name><argument_list>(<argument><expr><name>PRUint32</name> *<name>aState</name></expr></argument>, <argument><expr><name>PRUint32</name> *<name>aExtraState</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>NS_IMETHOD</name> <call><name>GetNumActions</name><argument_list>(<argument><expr><name>PRUint8</name> *<name>_retval</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>NS_IMETHOD</name> <macro><name>GetActionName</name><argument_list>(<argument>PRUint8 aIndex</argument>, <argument>nsAString&amp; aName</argument>)</argument_list></macro></expr>;
  <expr><name>virtual</name> <name>nsresult</name> <call><name>GetAttributesInternal</name><argument_list>(<argument><expr><name>nsIPersistentProperties</name> *<name>aAttributes</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>NS_IMETHOD</name> <call><name>GetParent</name><argument_list>(<argument><expr><name>nsIAccessible</name> **<name>_retval</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>NS_IMETHOD</name> <call><name>GetNextSibling</name><argument_list>(<argument><expr><name>nsIAccessible</name> **<name>_retval</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>NS_IMETHOD</name> <call><name>GetPreviousSibling</name><argument_list>(<argument><expr><name>nsIAccessible</name> **<name>_retval</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>NS_IMETHOD</name> <macro><name>DoAction</name><argument_list>(<argument>PRUint8 index</argument>)</argument_list></macro></expr>;
  <expr><name>NS_IMETHOD</name> <call><name>GetBounds</name><argument_list>(<argument><expr><name>PRInt32</name> *<name>x</name></expr></argument>, <argument><expr><name>PRInt32</name> *<name>y</name></expr></argument>, <argument><expr><name>PRInt32</name> *<name>width</name></expr></argument>, <argument><expr><name>PRInt32</name> *<name>height</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>NS_IMETHOD</name> <macro><name>SetSelected</name><argument_list>(<argument>PRBool aSelect</argument>)</argument_list></macro></expr>; 
  <expr><name>NS_IMETHOD</name> <call><name>TakeFocus</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>; 

  <expr><name>NS_IMETHOD</name> <macro><name>GetAccessibleRelated</name><argument_list>(<argument>PRUint32 aRelationType</argument>, <argument>nsIAccessible **aRelated</argument>)</argument_list></macro></expr>;

  <comment type="line">// nsIAccessNode</comment>
  <expr><name>NS_IMETHOD</name> <call><name>GetUniqueID</name><argument_list>(<argument><expr><name>void</name> **<name>aUniqueID</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// nsPIAccessNode</comment>
  <expr><name>NS_IMETHOD</name> <call><name>Init</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// nsAccessNode</comment>
  <expr><name>virtual</name> <name>PRBool</name> <call><name>IsDefunct</name><argument_list>()</argument_list></call></expr>;

<expr><name>protected</name>:
  <name>PRBool</name> <call><name>IsExpandable</name><argument_list>()</argument_list></call></expr>;
  <expr><name>nsCOMPtr</name>&lt;<name>nsITreeBoxObject</name>&gt; <name>mTree</name></expr>;
  <expr><name>nsCOMPtr</name>&lt;<name>nsITreeView</name>&gt; <name>mTreeView</name></expr>;
  <expr><name>PRInt32</name> <name>mRow</name></expr>;
  <expr><name>nsCOMPtr</name>&lt;<name>nsITreeColumn</name>&gt; <name>mColumn</name></expr>;
  <expr><name>nsString</name> <name>mCachedName</name></expr>;
}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>class</name> <name>nsXULTreeColumnsAccessible</name> : <name>public</name> <name>nsXULColumnsAccessible</name>
<block>{
<expr><name>public</name>:
  <call><name>nsXULTreeColumnsAccessible</name><argument_list>(<argument><expr><name>nsIDOMNode</name>* <name>aDOMNode</name></expr></argument>, <argument><expr><name>nsIWeakReference</name>* <name>aShell</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// nsIAccessible</comment>
  <expr><name>NS_IMETHOD</name> <call><name>GetNextSibling</name><argument_list>(<argument><expr><name>nsIAccessible</name> **<name>aNextSibling</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
