<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="001b7148f639438a01739bed221fe2f9c82b570f.h"><comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2002
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Darin Fisher &lt;darin@netscape.com&gt; (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>nsNetError_h__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nsNetError_h__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsError.h"</cpp:file></cpp:include>


<comment type="block">/* NETWORKING ERROR CODES */</comment>


<comment type="block">/******************************************************************************
 * General async request error codes:
 * 
 * These error codes are commonly passed through callback methods to indicate
 * the status of some requested async request.
 *
 * For example, see nsIRequestObserver::onStopRequest.
 */</comment>

<comment type="block">/**
 * The async request completed successfully.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_BINDING_SUCCEEDED</name></cpp:macro> \
    <cpp:value>NS_OK</cpp:value></cpp:define>

<comment type="block">/**
 * The async request failed for some unknown reason.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_BINDING_FAILED</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 1)</cpp:value></cpp:define>

<comment type="block">/**
 * The async request failed because it was aborted by some user action.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_BINDING_ABORTED</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 2)</cpp:value></cpp:define>

<comment type="block">/**
 * The async request has been "redirected" to a different async request.
 * (e.g., an HTTP redirect occurred).
 *
 * This error code is used with load groups to notify the load group observer
 * when a request in the load group is redirected to another request.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_BINDING_REDIRECTED</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 3)</cpp:value></cpp:define>

<comment type="block">/**
 * The async request has been "retargeted" to a different "handler."
 *
 * This error code is used with load groups to notify the load group observer
 * when a request in the load group is removed from the load group and added
 * to a different load group.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_BINDING_RETARGETED</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 4)</cpp:value></cpp:define>


<comment type="block">/******************************************************************************
 * Miscellaneous error codes:
 *
 * These errors are not typically passed via onStopRequest.
 */</comment>

<comment type="block">/**
 * The URI is malformed.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_MALFORMED_URI</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 10)</cpp:value></cpp:define>

<comment type="block">/**
 * The URI scheme corresponds to an unknown protocol handler.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_UNKNOWN_PROTOCOL</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 18)</cpp:value></cpp:define>

<comment type="block">/**
 * Returned from nsIChannel::asyncOpen to indicate that OnDataAvailable will
 * not be called because there is no content available.
 *
 * This is used by helper app style protocols (e.g., mailto).
 *
 * XXX perhaps this should be a success code.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_NO_CONTENT</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 17)</cpp:value></cpp:define>

<comment type="block">/**
 * The requested action could not be completed while the object is busy.
 *
 * Implementations of nsIChannel::asyncOpen will commonly return this error
 * if the channel has already been opened (and has not yet been closed).
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_IN_PROGRESS</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 15)</cpp:value></cpp:define>

<comment type="block">/**
 * Returned from nsIChannel::asyncOpen when trying to open the channel again
 * (reopening is not supported).
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_ALREADY_OPENED</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 73)</cpp:value></cpp:define>

<comment type="block">/**
 * The content encoding of the source document was incorrect, for example
 * returning a plain HTML document advertised as Content-Encoding: gzip
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_INVALID_CONTENT_ENCODING</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 27)</cpp:value></cpp:define>

<comment type="block">/******************************************************************************
 * Connectivity error codes:
 */</comment>

<comment type="block">/**
 * The connection is already established.
 * XXX currently unused - consider removing.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_ALREADY_CONNECTED</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 11)</cpp:value></cpp:define>

<comment type="block">/**
 * The connection does not exist.
 * XXX currently unused - consider removing.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_NOT_CONNECTED</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 12)</cpp:value></cpp:define>

<comment type="block">/**
 * The connection attempt failed, for example, because no server was listening
 * at specified host:port.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_CONNECTION_REFUSED</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 13)</cpp:value></cpp:define>

<comment type="block">/**
 * The connection attempt to a proxy failed.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_PROXY_CONNECTION_REFUSED</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 72)</cpp:value></cpp:define>

<comment type="block">/**
 * The connection was lost due to a timeout error.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_NET_TIMEOUT</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 14)</cpp:value></cpp:define>

<comment type="block">/**
 * The requested action could not be completed while the networking library
 * is in the offline state.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_OFFLINE</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 16)</cpp:value></cpp:define>

<comment type="block">/**
 * The requested action was prohibited because it would have caused the
 * networking library to establish a connection to an unsafe or otherwise
 * banned port.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_PORT_ACCESS_NOT_ALLOWED</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 19)</cpp:value></cpp:define>

<comment type="block">/**
 * The connection was established, but no data was ever received.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_NET_RESET</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 20)</cpp:value></cpp:define>

<comment type="block">/**
 * The connection was established, but the data transfer was interrupted.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_NET_INTERRUPT</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 71)</cpp:value></cpp:define>

<comment type="line">// XXX really need to better rationalize these error codes.  are consumers of</comment>
<comment type="line">//     necko really expected to know how to discern the meaning of these??</comment>


<comment type="block">/**
 * This request is not resumable, but it was tried to resume it, or to
 * request resume-specific data.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_NOT_RESUMABLE</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 25)</cpp:value></cpp:define>

<comment type="block">/**
 * It was attempted to resume the request, but the entity has changed in the
 * meantime.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_ENTITY_CHANGED</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 32)</cpp:value></cpp:define>

<comment type="block">/**
 * The request failed as a result of a detected redirection loop.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_REDIRECT_LOOP</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 31)</cpp:value></cpp:define>

<comment type="block">/**
 * The request failed because the content type returned by the server was
 * not a type expected by the channel (for nested channels such as the JAR
 * channel).
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_UNSAFE_CONTENT_TYPE</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 74)</cpp:value></cpp:define>

<comment type="block">/******************************************************************************
 * FTP specific error codes:
 *
 * XXX document me
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_FTP_LOGIN</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 21)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_FTP_CWD</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 22)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_FTP_PASV</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 23)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_FTP_PWD</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 24)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_FTP_LIST</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 28)</cpp:value></cpp:define>

<comment type="block">/******************************************************************************
 * DNS specific error codes:
 */</comment>

<comment type="block">/**
 * The lookup of a hostname failed.  This generally refers to the hostname
 * from the URL being loaded.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_UNKNOWN_HOST</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 30)</cpp:value></cpp:define>

<comment type="block">/**
 * A low or medium priority DNS lookup failed because the pending
 * queue was already full. High priorty (the default) always
 * makes room
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_DNS_LOOKUP_QUEUE_FULL</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 33)</cpp:value></cpp:define>

<comment type="block">/**
 * The lookup of a proxy hostname failed.
 *
 * If a channel is configured to speak to a proxy server, then it will
 * generate this error if the proxy hostname cannot be resolved.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_UNKNOWN_PROXY_HOST</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 42)</cpp:value></cpp:define>


<comment type="block">/******************************************************************************
 * Socket specific error codes:
 */</comment>

<comment type="block">/**
 * The specified socket type does not exist.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_UNKNOWN_SOCKET_TYPE</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 51)</cpp:value></cpp:define>

<comment type="block">/**
 * The specified socket type could not be created.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_SOCKET_CREATE_FAILED</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 52)</cpp:value></cpp:define>


<comment type="block">/******************************************************************************
 * Cache specific error codes:
 *
 * XXX document me
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_CACHE_KEY_NOT_FOUND</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 61)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_CACHE_DATA_IS_STREAM</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 62)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_CACHE_DATA_IS_NOT_STREAM</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 63)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_CACHE_WAIT_FOR_VALIDATION</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 64)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_CACHE_ENTRY_DOOMED</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 65)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_CACHE_READ_ACCESS_DENIED</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 66)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_CACHE_WRITE_ACCESS_DENIED</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 67)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_CACHE_IN_USE</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 68)</cpp:value></cpp:define>

<comment type="block">/**
 * Error passed through onStopRequest if the document could not be fetched
 * from the cache.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_DOCUMENT_NOT_CACHED</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 70)</cpp:value></cpp:define>


<comment type="block">/******************************************************************************
 * Effective TLD Service specific error codes:
 */</comment>

<comment type="block">/**
 * The requested number of domain levels exceeds those present in the host string.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_INSUFFICIENT_DOMAIN_LEVELS</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 80)</cpp:value></cpp:define>

<comment type="block">/**
 * The host string is an IP address.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ERROR_HOST_IS_IP_ADDRESS</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 81)</cpp:value></cpp:define>


<comment type="block">/******************************************************************************
 * StreamLoader specific result codes:
 */</comment>

<comment type="block">/**
 * Result code returned by nsIStreamLoaderObserver to indicate that
 * the observer is taking over responsibility for the data buffer,
 * and the loader should NOT free it.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_SUCCESS_ADOPTED_DATA</name></cpp:macro> \
    <cpp:value>NS_ERROR_GENERATE_SUCCESS(NS_ERROR_MODULE_NETWORK, 90)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// !nsNetError_h__</comment>
</unit>
