<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="000bd9bcd14b7519055b1c774d110811513a7345.h"><comment type="block">/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code, released
 * March 31, 1998.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>jsgc_h___</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jsgc_h___</name></cpp:macro></cpp:define>
<comment type="block">/*
 * JS Garbage Collector.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsprvtd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jspubtd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsdhash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsbit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsutil.h"</cpp:file></cpp:include>

<function_decl><type><name>JS_BEGIN_EXTERN_C</name>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSTRACE_XML</name></cpp:macro>         <cpp:value>3</cpp:value></cpp:define>

<comment type="block">/*
 * One past the maximum trace kind.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSTRACE_LIMIT</name></cpp:macro>       <cpp:value>4</cpp:value></cpp:define>

<comment type="block">/*
 * We use the trace kinds as the types for all GC things except external
 * strings.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCX_OBJECT</name></cpp:macro>              <cpp:value>JSTRACE_OBJECT</cpp:value></cpp:define>      <comment type="block">/* JSObject */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCX_DOUBLE</name></cpp:macro>              <cpp:value>JSTRACE_DOUBLE</cpp:value></cpp:define>      <comment type="block">/* jsdouble */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCX_STRING</name></cpp:macro>              <cpp:value>JSTRACE_STRING</cpp:value></cpp:define>      <comment type="block">/* JSString */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCX_XML</name></cpp:macro>                 <cpp:value>JSTRACE_XML</cpp:value></cpp:define>         <comment type="block">/* JSXML */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCX_EXTERNAL_STRING</name></cpp:macro>     <cpp:value>JSTRACE_LIMIT</cpp:value></cpp:define>       <comment type="block">/* JSString with external
                                                       chars */</comment>
<comment type="block">/*
 * The number of defined GC types and the maximum limit for the number of
 * possible GC types.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCX_NTYPES</name></cpp:macro>              <cpp:value>(GCX_EXTERNAL_STRING + 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCX_LIMIT_LOG2</name></cpp:macro>         <cpp:value>4</cpp:value></cpp:define>           <comment type="block">/* type index bits */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCX_LIMIT</name></cpp:macro>              <cpp:value>JS_BIT(GCX_LIMIT_LOG2)</cpp:value></cpp:define>

<comment type="block">/* GC flag definitions, must fit in 8 bits (type index goes in the low bits). */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCF_TYPEMASK</name></cpp:macro>    <cpp:value>JS_BITMASK(GCX_LIMIT_LOG2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCF_MARK</name></cpp:macro>        <cpp:value>JS_BIT(GCX_LIMIT_LOG2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCF_FINAL</name></cpp:macro>       <cpp:value>JS_BIT(GCX_LIMIT_LOG2 + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCF_LOCKSHIFT</name></cpp:macro>   <cpp:value>(GCX_LIMIT_LOG2 + 2)</cpp:value></cpp:define>   <comment type="block">/* lock bit shift */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCF_LOCK</name></cpp:macro>        <cpp:value>JS_BIT(GCF_LOCKSHIFT)</cpp:value></cpp:define>   <comment type="block">/* lock request bit in API */</comment>

<comment type="block">/*
 * Get the type of the external string or -1 if the string was not created
 * with JS_NewExternalString.
 */</comment>
<specifier>extern</specifier> <name>intN</name></type>
<name>js_GetExternalStringGCType</name><parameter_list>(<param><decl><type><name>JSString</name> *</type><name>str</name></decl></param>)</parameter_list>;</function_decl>

<extern>extern JS_FRIEND_API(uint32</extern>)
<expr_stmt><expr><call><name>js_GetGCThingTraceKind</name><argument_list>(<argument><expr><name>void</name> *<name>thing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * The sole purpose of the function is to preserve public API compatibility
 * in JS_GetStringBytes which takes only single JSString* argument.
 */</comment>
<function_decl><type><name>JSRuntime</name>*</type>
<name>js_GetGCStringRuntime</name><parameter_list>(<param><decl><type><name>JSString</name> *</type><name>str</name></decl></param>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>1</expr></cpp:if>
<comment type="block">/*
 * Since we're forcing a GC from JS_GC anyway, don't bother wasting cycles
 * loading oldval.  XXX remove implied force, fix jsinterp.c's "second arg
 * ignored", etc.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GC_POKE</name><parameter_list>(<param><type><name>cx</name></type></param>, <param><type><name>oldval</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((cx)-&gt;runtime-&gt;gcPoke = JS_TRUE)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GC_POKE</name><parameter_list>(<param><type><name>cx</name></type></param>, <param><type><name>oldval</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((cx)-&gt;runtime-&gt;gcPoke = JSVAL_IS_GCTHING(oldval))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>JSBool</name></type>
<name>js_InitGC</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>maxbytes</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>js_FinishGC</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>intN</name></type>
<name>js_ChangeExternalStringFinalizer</name><parameter_list>(<param><decl><type><name>JSStringFinalizeOp</name></type> <name>oldop</name></decl></param>,
                                 <param><decl><type><name>JSStringFinalizeOp</name></type> <name>newop</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>JSBool</name></type>
<name>js_AddRoot</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>void</name> *</type><name>rp</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>JSBool</name></type>
<name>js_AddRootRT</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>, <param><decl><type><name>void</name> *</type><name>rp</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>JSBool</name></type>
<name>js_RemoveRoot</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>, <param><decl><type><name>void</name> *</type><name>rp</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>js_DumpNamedRoots</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>,
                  <param><function_decl><type><name>void</name></type> (*<name>dump</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>void</name> *</type><name>rp</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list></function_decl></param>,
                  <param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>uint32</name></type>
<name>js_MapGCRoots</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>, <param><decl><type><name>JSGCRootMapFun</name></type> <name>map</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Table of pointers with count valid members. */</comment>
<typedef>typedef <type><struct>struct <name>JSPtrTable</name> <block>{
    <decl_stmt><decl><type><name>size_t</name></type>      <name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>        **</type><name>array</name></decl>;</decl_stmt>
}</block></struct></type> <name>JSPtrTable</name>;</typedef>

<function_decl><type><specifier>extern</specifier> <name>JSBool</name></type>
<name>js_RegisterCloseableIterator</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * The private JSGCThing struct, which describes a gcFreeList element.
 */</comment>
<struct>struct <name>JSGCThing</name> <block>{
    <decl_stmt><decl><type><name>JSGCThing</name>   *</type><name>next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8</name>       *</type><name>flagp</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GC_NBYTES_MAX</name></cpp:macro>           <cpp:value>(10 * sizeof(JSGCThing))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GC_NUM_FREELISTS</name></cpp:macro>        <cpp:value>(GC_NBYTES_MAX / sizeof(JSGCThing))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GC_FREELIST_NBYTES</name><parameter_list>(<param><type><name>i</name></type></param>)</parameter_list></cpp:macro>   <cpp:value>(((i) + 1) * sizeof(JSGCThing))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GC_FREELIST_INDEX</name><parameter_list>(<param><type><name>n</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>(((n) / sizeof(JSGCThing)) - 1)</cpp:value></cpp:define>

<comment type="block">/*
 * Allocates a new GC thing of the given size. After a successful allocation
 * the caller must fully initialize the thing before calling any function that
 * can potentially trigger GC. This will ensure that GC tracing never sees junk
 * values stored in the partially initialized thing.
 */</comment>
<function_decl><type><specifier>extern</specifier> <name>void</name> *</type>
<name>js_NewGCThing</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>flags</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>nbytes</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Allocate a new double jsval and store the result in *vp. vp must be a root.
 * The function does not copy the result into any weak root.
 */</comment>
<function_decl><type><specifier>extern</specifier> <name>JSBool</name></type>
<name>js_NewDoubleInRootedValue</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsdouble</name></type> <name>d</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Return a pointer to a new GC-allocated and weakly-rooted jsdouble number,
 * or null when the allocation fails.
 */</comment>
<function_decl><type><specifier>extern</specifier> <name>jsdouble</name> *</type>
<name>js_NewWeaklyRootedDouble</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsdouble</name></type> <name>d</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_TRACER</name></cpp:ifdef>
<function_decl><type><specifier>extern</specifier> <name>JSBool</name></type>
<name>js_ReserveObjects</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>nobjects</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>JSBool</name></type>
<name>js_LockGCThingRT</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>, <param><decl><type><name>void</name> *</type><name>thing</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>JSBool</name></type>
<name>js_UnlockGCThingRT</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>, <param><decl><type><name>void</name> *</type><name>thing</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>JSBool</name></type>
<name>js_IsAboutToBeFinalized</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>void</name> *</type><name>thing</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Macro to test if a traversal is the marking phase of GC to avoid exposing
 * ScriptFilenameEntry to traversal implementations.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_GC_MARKING_TRACER</name><parameter_list>(<param><type><name>trc</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((trc)-&gt;callback == NULL)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_XML_SUPPORT</name></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>JS_IS_VALID_TRACE_KIND</name><parameter_list>(<param><type><name>kind</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((uint32)(kind) &lt; JSTRACE_LIMIT)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>JS_IS_VALID_TRACE_KIND</name><parameter_list>(<param><type><name>kind</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((uint32)(kind) &lt;= JSTRACE_STRING)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Trace jsval when JSVAL_IS_OBJECT(v) can be an arbitrary GC thing casted as
 * JSVAL_OBJECT and js_GetGCThingTraceKind has to be used to find the real
 * type behind v.
 */</comment>
<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>js_CallValueTracerIfGCThing</name><parameter_list>(<param><decl><type><name>JSTracer</name> *</type><name>trc</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>js_TraceStackFrame</name><parameter_list>(<param><decl><type><name>JSTracer</name> *</type><name>trc</name></decl></param>, <param><decl><type><name>JSStackFrame</name> *</type><name>fp</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>JS_REQUIRES_STACK</name> <name>void</name></type>
<name>js_TraceRuntime</name><parameter_list>(<param><decl><type><name>JSTracer</name> *</type><name>trc</name></decl></param>, <param><decl><type><name>JSBool</name></type> <name>allAtoms</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>JS_REQUIRES_STACK</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
js_TraceContext<parameter_list>(<param><decl><type><name>JSTracer</name> *</type><name>trc</name></decl></param>, <param><decl><type><name>JSContext</name> *</type><name>acx</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Schedule the GC call at a later safe point.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>js_TriggerGC</name><parameter_list>(<param><type><name>cx</name></type></param>, <param><type><name>gcLocked</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>js_TriggerGC (cx)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>js_TriggerGC</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSBool</name></type> <name>gcLocked</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Kinds of js_GC invocation.
 */</comment>
<typedef>typedef <type><enum>enum <name>JSGCInvocationKind</name> <block>{
    <comment type="block">/* Normal invocation. */</comment>
    <decl><name>GC_NORMAL</name>           <init>= <expr>0</expr></init></decl>,

    <comment type="block">/*
     * Called from js_DestroyContext for last JSContext in a JSRuntime, when
     * it is imperative that rt-&gt;gcPoke gets cleared early in js_GC.
     */</comment>
    <decl><name>GC_LAST_CONTEXT</name>     <init>= <expr>1</expr></init></decl>,

    <comment type="block">/*
     * Flag bit telling js_GC that the caller has already acquired rt-&gt;gcLock.
     * Currently, this flag is set for the invocation kinds that also preserve
     * atoms and weak roots, so we don't need another bit for GC_KEEP_ATOMS.
     */</comment>
    <decl><name>GC_LOCK_HELD</name>        <init>= <expr>0x10</expr></init></decl>,
    <decl><name>GC_KEEP_ATOMS</name>       <init>= <expr><name>GC_LOCK_HELD</name></expr></init></decl>,

    <comment type="block">/*
     * Called from js_SetProtoOrParent with a request to set an object's proto
     * or parent slot inserted on rt-&gt;setSlotRequests.
     */</comment>
    <decl><name>GC_SET_SLOT_REQUEST</name> <init>= <expr><name>GC_LOCK_HELD</name> | 1</expr></init></decl>,

    <comment type="block">/*
     * Called from js_NewGCThing as a last-ditch GC attempt. See comments in
     * jsgc.c just before js_GC's definition for details.
     */</comment>
    <decl><name>GC_LAST_DITCH</name>       <init>= <expr><name>GC_LOCK_HELD</name> | 2</expr></init></decl>
}</block></enum></type> <name>JSGCInvocationKind</name>;</typedef>

<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>js_GC</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSGCInvocationKind</name></type> <name>gckind</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Call this after succesful malloc of memory for GC-related things. */</comment>
<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>js_UpdateMallocCounter</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>nbytes</name></decl></param>)</parameter_list>;</function_decl>

<typedef>typedef <type>struct <name>JSGCArenaInfo</name></type> <name>JSGCArenaInfo</name>;</typedef>
<typedef>typedef <type>struct <name>JSGCArenaList</name></type> <name>JSGCArenaList</name>;</typedef>
<typedef>typedef <type>struct <name>JSGCChunkInfo</name></type> <name>JSGCChunkInfo</name>;</typedef>

<struct>struct <name>JSGCArenaList</name> <block>{
    <decl_stmt><decl><type><name>JSGCArenaInfo</name>   *</type><name>last</name></decl>;</decl_stmt>          <comment type="block">/* last allocated GC arena */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>          <name>lastCount</name></decl>;</decl_stmt>      <comment type="block">/* number of allocated things in the last
                                       arena */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>          <name>thingSize</name></decl>;</decl_stmt>      <comment type="block">/* size of things to allocate on this list
                                     */</comment>
    <decl_stmt><decl><type><name>JSGCThing</name>       *</type><name>freeList</name></decl>;</decl_stmt>      <comment type="block">/* list of free GC things */</comment>
}</block>;</struct>

<typedef>typedef <type>union <name>JSGCDoubleCell</name></type> <name>JSGCDoubleCell</name>;</typedef>

<union>union <name>JSGCDoubleCell</name> <block>{
    <decl_stmt><decl><type><name>double</name></type>          <name>number</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSGCDoubleCell</name>  *</type><name>link</name></decl>;</decl_stmt>
}</block>;</union>

<typedef>typedef <type><struct>struct <name>JSGCDoubleArenaList</name> <block>{
    <decl_stmt><decl><type><name>JSGCArenaInfo</name>   *</type><name>first</name></decl>;</decl_stmt>             <comment type="block">/* first allocated GC arena */</comment>
    <decl_stmt><decl><type><name>jsbitmap</name>        *</type><name>nextDoubleFlags</name></decl>;</decl_stmt>   <comment type="block">/* bitmask with flags to check for free
                                           things */</comment>
}</block></struct></type> <name>JSGCDoubleArenaList</name>;</typedef>

<typedef>typedef <type>struct <name>JSGCFreeListSet</name></type> <name>JSGCFreeListSet</name>;</typedef>

<struct>struct <name>JSGCFreeListSet</name> <block>{
    <decl_stmt><decl><type><name>JSGCThing</name>           *</type><name><name>array</name><index>[<expr><name>GC_NUM_FREELISTS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSGCFreeListSet</name>     *</type><name>link</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>JSGCFreeListSet</name></type> <name>js_GCEmptyFreeListSet</name></decl>;</decl_stmt>

<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>js_RevokeGCLocalFreeLists</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>js_DestroyScriptsToGC</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSThreadData</name> *</type><name>data</name></decl></param>)</parameter_list>;</function_decl>

<struct>struct <name>JSWeakRoots</name> <block>{
    <comment type="block">/* Most recently created things by type, members of the GC's root set. */</comment>
    <decl_stmt><decl><type><name>void</name>            *</type><name><name>newborn</name><index>[<expr><name>GCX_NTYPES</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* Atom root for the last-looked-up atom on this context. */</comment>
    <decl_stmt><decl><type><name>jsval</name></type>           <name>lastAtom</name></decl>;</decl_stmt>

    <comment type="block">/* Root for the result of the most recent js_InternalInvoke call. */</comment>
    <decl_stmt><decl><type><name>jsval</name></type>           <name>lastInternalResult</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_CLEAR_WEAK_ROOTS</name><parameter_list>(<param><type><name>wr</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(memset((wr), 0, sizeof(JSWeakRoots)))</cpp:value></cpp:define>

<comment type="block">/*
 * Increase runtime-&gt;gcBytes by sz bytes to account for an allocation outside
 * the GC that will be freed only after the GC is run. The function may run
 * the last ditch GC to ensure that gcBytes does not exceed gcMaxBytes. It will
 * fail if the latter is not possible.
 *
 * This function requires that runtime-&gt;gcLock is held on entry. On successful
 * return the lock is still held and on failure it will be released with
 * the error reported.
 */</comment>
<function_decl><type><specifier>extern</specifier> <name>JSBool</name></type>
<name>js_AddAsGCBytes</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>sz</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type>
<name>js_RemoveAsGCBytes</name><parameter_list>(<param><decl><type><name>JSRuntime</name>*</type> <name>rt</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>sz</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_notme</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JS_GCMETER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_GCMETER</name></cpp:ifdef>

<typedef>typedef <type><struct>struct <name>JSGCArenaStats</name> <block>{
    <decl_stmt><decl><type><name>uint32</name></type>  <name>alloc</name></decl>;</decl_stmt>          <comment type="block">/* allocation attempts */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>localalloc</name></decl>;</decl_stmt>     <comment type="block">/* allocations from local lists */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>retry</name></decl>;</decl_stmt>          <comment type="block">/* allocation retries after running the GC */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>fail</name></decl>;</decl_stmt>           <comment type="block">/* allocation failures */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>nthings</name></decl>;</decl_stmt>        <comment type="block">/* live GC things */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>maxthings</name></decl>;</decl_stmt>      <comment type="block">/* maximum of live GC cells */</comment>
    <decl_stmt><decl><type><name>double</name></type>  <name>totalthings</name></decl>;</decl_stmt>    <comment type="block">/* live GC things the GC scanned so far */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>narenas</name></decl>;</decl_stmt>        <comment type="block">/* number of arena in list before the GC */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>newarenas</name></decl>;</decl_stmt>      <comment type="block">/* new arenas allocated before the last GC */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>livearenas</name></decl>;</decl_stmt>     <comment type="block">/* number of live arenas after the last GC */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>maxarenas</name></decl>;</decl_stmt>      <comment type="block">/* maximum of allocated arenas */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>totalarenas</name></decl>;</decl_stmt>    <comment type="block">/* total number of arenas with live things that
                               GC scanned so far */</comment>
}</block></struct></type> <name>JSGCArenaStats</name>;</typedef>

<typedef>typedef <type><struct>struct <name>JSGCStats</name> <block>{
    <decl_stmt><decl><type><name>uint32</name></type>  <name>finalfail</name></decl>;</decl_stmt>  <comment type="block">/* finalizer calls allocator failures */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>lockborn</name></decl>;</decl_stmt>   <comment type="block">/* things born locked */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>lock</name></decl>;</decl_stmt>       <comment type="block">/* valid lock calls */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>unlock</name></decl>;</decl_stmt>     <comment type="block">/* valid unlock calls */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>depth</name></decl>;</decl_stmt>      <comment type="block">/* mark tail recursion depth */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>maxdepth</name></decl>;</decl_stmt>   <comment type="block">/* maximum mark tail recursion depth */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>cdepth</name></decl>;</decl_stmt>     <comment type="block">/* mark recursion depth of C functions */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>maxcdepth</name></decl>;</decl_stmt>  <comment type="block">/* maximum mark recursion depth of C functions */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>untraced</name></decl>;</decl_stmt>   <comment type="block">/* number of times tracing of GC thing's children were
                           delayed due to a low C stack */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>maxuntraced</name></decl>;</decl_stmt><comment type="block">/* maximum number of things with children to trace
                           later */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>maxlevel</name></decl>;</decl_stmt>   <comment type="block">/* maximum GC nesting (indirect recursion) level */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>poke</name></decl>;</decl_stmt>       <comment type="block">/* number of potentially useful GC calls */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>afree</name></decl>;</decl_stmt>      <comment type="block">/* thing arenas freed so far */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>stackseg</name></decl>;</decl_stmt>   <comment type="block">/* total extraordinary stack segments scanned */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>segslots</name></decl>;</decl_stmt>   <comment type="block">/* total stack segment jsval slots scanned */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>nclose</name></decl>;</decl_stmt>     <comment type="block">/* number of objects with close hooks */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>maxnclose</name></decl>;</decl_stmt>  <comment type="block">/* max number of objects with close hooks */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>closelater</name></decl>;</decl_stmt> <comment type="block">/* number of close hooks scheduled to run */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>  <name>maxcloselater</name></decl>;</decl_stmt> <comment type="block">/* max number of close hooks scheduled to run */</comment>

    <decl_stmt><decl><type><name>JSGCArenaStats</name></type>  <name><name>arenaStats</name><index>[<expr><name>GC_NUM_FREELISTS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSGCArenaStats</name></type>  <name>doubleArenaStats</name></decl>;</decl_stmt>
}</block></struct></type> <name>JSGCStats</name>;</typedef>

<extern>extern JS_FRIEND_API(void</extern>)
<expr_stmt><expr><call><name>js_DumpGCStats</name><argument_list>(<argument><expr><name>JSRuntime</name> *<name>rt</name></expr></argument>, <argument><expr><name>FILE</name> *<name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JS_GCMETER */</comment>

<macro><name>JS_END_EXTERN_C</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* jsgc_h___ */</comment>
</unit>
