<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="00416ef7dccd3d263ee95a3bc812599e4b34fc37.h"><comment type="block">/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code, released
 * March 31, 1998.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>jsstr_inlines_h___</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jsstr_inlines_h___</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsstr.h"</cpp:file></cpp:include>

<expr_stmt><expr>inline <name>JSString</name> *
<name>JSString</name>::<macro><name>unitString</name><argument_list>(<argument>jschar c</argument>)</argument_list></macro>
<block>{
    <expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>c</name> &lt; <name>UNIT_STRING_LIMIT</name></expr></argument>)</argument_list></call></expr>;
    <return>return <expr>&amp;<name><name>unitStringTable</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr>inline <name>JSString</name> *
<name>JSString</name>::<macro><name>getUnitString</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSString *str</argument>, <argument>size_t index</argument>)</argument_list></macro>
<block>{
    <expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>index</name> &lt; <call><name><name>str</name>-&gt;<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>jschar</name> <name>c</name> = <call><name><name>str</name>-&gt;<name>chars</name></name><argument_list>()</argument_list></call><index>[<expr><name>index</name></expr>]</index></expr>;
    <if>if <condition>(<expr><name>c</name> &lt; <name>UNIT_STRING_LIMIT</name></expr>)</condition><then>
        <return>return <expr><call><name>unitString</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></then></if></block></expr></expr_stmt>
    <return>return <expr><call><name>js_NewDependentString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}

inline <expr_stmt><expr><name>JSString</name> *
<name>JSString</name>::<macro><name>intString</name><argument_list>(<argument>jsint i</argument>)</argument_list></macro>
<block>{
    <expr><name>jsuint</name> <name>u</name> = <call><name>jsuint</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;

    <expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>u</name> &lt; <name>INT_STRING_LIMIT</name></expr></argument>)</argument_list></call></expr>;
    <if>if <condition>(<expr><name>u</name> &lt; 10</expr>)</condition><then> <block>{
        <comment type="block">/* To avoid two ATOMIZED JSString copies of 0-9. */</comment>
        <return>return <expr>&amp;<name>JSString</name>::<name><name>unitStringTable</name><index>[<expr>'0' + <name>u</name></expr>]</index></name></expr>;</return>
    <expr_stmt/></block></then></if>}</block></expr></expr_stmt>
    <return>return <expr>&amp;<name>JSString</name>::<name><name>intStringTable</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</return>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* jsstr_inlines_h___ */</comment>
</unit>
