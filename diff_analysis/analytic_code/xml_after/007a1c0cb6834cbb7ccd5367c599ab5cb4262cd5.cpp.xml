<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="007a1c0cb6834cbb7ccd5367c599ab5cb4262cd5.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="line">// vim:set et sw=2 sts=2 cin:</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGenericHTMLElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsObjectLoadingContent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGkAtoms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMDocument.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SVG</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMSVGDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMGetSVGDocument.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLObjectElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsFormSubmission.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIObjectFrame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPluginInstance.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIConstraintValidation.h"</cpp:file></cpp:include>


<class>class <name>nsHTMLObjectElement</name> <super>: <specifier>public</specifier> <name>nsGenericHTMLFormElement</name>,
                            <specifier>public</specifier> <name>nsObjectLoadingContent</name>,
                            <specifier>public</specifier> <name>nsIDOMHTMLObjectElement</name>,
                            <specifier>public</specifier> <name>nsIConstraintValidation</name>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SVG</name></cpp:ifdef>
                            , <specifier>public</specifier> <name>nsIDOMGetSVGDocument</name></super>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<private type="default">
</private><public>public:
  <using>using <name><name>nsIConstraintValidation</name>::<name>GetValidationMessage</name></name>;</using>

  <constructor_decl><name>nsHTMLObjectElement</name><parameter_list>(<param><decl><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name></type> <name>aNodeInfo</name></decl></param>,
                      <param><decl><type><name>PRUint32</name></type> <name>aFromParser</name> <init>= <expr>0</expr></init></decl></param>)</parameter_list>;</constructor_decl>
  <destructor_decl><specifier>virtual</specifier> <name>~<name>nsHTMLObjectElement</name></name><parameter_list>()</parameter_list>;</destructor_decl>

  <comment type="line">// nsISupports</comment>
  <decl_stmt><decl><type><name>NS_DECL_ISUPPORTS_INHERITED</name></type>

  <comment type="line">// nsIDOMNode</comment>
  <name>NS_FORWARD_NSIDOMNODE</name><argument_list>(<argument><expr><name><name>nsGenericHTMLFormElement</name>::</name></expr></argument>)</argument_list>

  <comment type="line">// nsIDOMElement</comment>
  <name>NS_FORWARD_NSIDOMELEMENT</name><argument_list>(<argument><expr><name><name>nsGenericHTMLFormElement</name>::</name></expr></argument>)</argument_list>

  <comment type="line">// nsIDOMHTMLElement</comment>
  <name>NS_FORWARD_NSIDOMHTMLELEMENT</name><argument_list>(<argument><expr><name><name>nsGenericHTMLFormElement</name>::</name></expr></argument>)</argument_list>

  <comment type="line">// nsIDOMHTMLObjectElement</comment>
  <name>NS_DECL_NSIDOMHTMLOBJECTELEMENT</name>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SVG</name></cpp:ifdef>
  <comment type="line">// nsIDOMGetSVGDocument</comment>
  <name>NS_DECL_NSIDOMGETSVGDOCUMENT</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  virtual <name>nsresult</name> <name>BindToTree</name><argument_list>(<argument><expr><name>nsIDocument</name> *<name>aDocument</name></expr></argument>, <argument><expr><name>nsIContent</name> *<name>aParent</name></expr></argument>,
                              <argument><expr><name>nsIContent</name> *<name>aBindingParent</name></expr></argument>,
                              <argument><expr><name>PRBool</name> <name>aCompileEventHandlers</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>UnbindFromTree</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aDeep</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl></param>,
                              <name>PRBool</name> <name>aNullParent</name> = <name>PR_TRUE</name>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>nsresult</name></type> <name>SetAttr</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aNameSpaceID</name></decl></param>, <param><decl><type><name>nsIAtom</name> *</type><name>aName</name></decl></param>,
                           <param><decl><type><name>nsIAtom</name> *</type><name>aPrefix</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aValue</name></decl></param>,
                           <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>nsresult</name></type> <name>UnsetAttr</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aNameSpaceID</name></decl></param>, <param><decl><type><name>nsIAtom</name>*</type> <name>aAttribute</name></decl></param>,
                             <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>virtual</specifier> <name>PRBool</name></type> <name>IsHTMLFocusable</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aWithMouse</name></decl></param>, <param><decl><type><name>PRBool</name> *</type><name>aIsFocusable</name></decl></param>, <param><decl><type><name>PRInt32</name> *</type><name>aTabIndex</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>PRUint32</name></type> <name>GetDesiredIMEState</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Overriden nsIFormControl methods</comment>
  <macro><name>NS_IMETHOD_</name><argument_list>(<argument>PRUint32</argument>)</argument_list></macro> <constructor><name>GetType</name><parameter_list>()</parameter_list> <specifier>const</specifier>
  <block>{
    <return>return <expr><name>NS_FORM_OBJECT</name></expr>;</return>
  }</block></constructor>

  <function_decl><type><name>NS_IMETHOD</name></type> <name>Reset</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>SubmitNamesValues</name><parameter_list>(<param><decl><type><name>nsFormSubmission</name> *</type><name>aFormSubmission</name></decl></param>)</parameter_list>;</function_decl>

  <function><type><specifier>virtual</specifier> <name>bool</name></type> <name>IsDisabled</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>PR_FALSE</name></expr>;</return> }</block></function>

  <function_decl><type><specifier>virtual</specifier> <name>nsresult</name></type> <name>DoneAddingChildren</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aHaveNotified</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>PRBool</name></type> <name>IsDoneAddingChildren</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>virtual</specifier> <name>PRBool</name></type> <name>ParseAttribute</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aNamespaceID</name></decl></param>,
                                <param><decl><type><name>nsIAtom</name> *</type><name>aAttribute</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aValue</name></decl></param>,
                                <param><decl><type><name>nsAttrValue</name> &amp;</type><name>aResult</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>nsMapRuleToAttributesFunc</name></type> <name>GetAttributeMappingFunction</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
  <macro><name>NS_IMETHOD_</name><argument_list>(<argument>PRBool</argument>)</argument_list></macro> <constructor_decl><name>IsAttributeMapped</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsIAtom</name> *</type><name>aAttribute</name></decl></param>)</parameter_list> <specifier>const</specifier>;</constructor_decl>
  <function_decl><type><specifier>virtual</specifier> <name>PRInt32</name></type> <name>IntrinsicState</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>DestroyContent</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// nsObjectLoadingContent</comment>
  <function_decl><type><specifier>virtual</specifier> <name>PRUint32</name></type> <name>GetCapabilities</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

  <function_decl><type><specifier>virtual</specifier> <name>nsresult</name></type> <name>Clone</name><parameter_list>(<param><decl><type><name>nsINodeInfo</name> *</type><name>aNodeInfo</name></decl></param>, <param><decl><type><name>nsINode</name> **</type><name>aResult</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

  <function_decl><type><name>nsresult</name></type> <name>CopyInnerTo</name><parameter_list>(<param><decl><type><name>nsGenericElement</name>*</type> <name>aDest</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

  <function><type><name>void</name></type> <name>StartObjectLoad</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name>StartObjectLoad</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>

  <macro><name>NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED_NO_UNLINK</name><argument_list>(<argument>nsHTMLObjectElement</argument>,
                                                     <argument>nsGenericHTMLFormElement</argument>)</argument_list></macro>

  <function_decl><type><specifier>virtual</specifier> <name>nsXPCClassInfo</name>*</type> <name>GetClassInfo</name><parameter_list>()</parameter_list>;</function_decl>
</public><private>private:
  <comment type="block" format="doxygen">/**
   * Calls LoadObject with the correct arguments to start the plugin load.
   */</comment>
  <macro><name>NS_HIDDEN_</name><argument_list>(<argument>void</argument>)</argument_list></macro> <constructor_decl><name>StartObjectLoad</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>;</constructor_decl>

  <comment type="block" format="doxygen">/**
   * Returns if the element is currently focusable regardless of it's tabindex
   * value. This is used to know the default tabindex value.
   */</comment>
  <function_decl><type><name>bool</name></type> <name>IsFocusableForTabIndex</name><parameter_list>()</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>PRPackedBool</name></type> <name>mIsDoneAddingChildren</name></decl>;</decl_stmt>
</private>}</block>;</class>


<macro><name>NS_IMPL_NS_NEW_HTML_ELEMENT_CHECK_PARSER</name><argument_list>(<argument>Object</argument>)</argument_list></macro>


<constructor><name><name>nsHTMLObjectElement</name>::<name>nsHTMLObjectElement</name></name><parameter_list>(<param><decl><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name></type> <name>aNodeInfo</name></decl></param>,
                                         <param><decl><type><name>PRUint32</name></type> <name>aFromParser</name></decl></param>)</parameter_list>
  <member_list>: <call><name>nsGenericHTMLFormElement</name><argument_list>(<argument><expr><name>aNodeInfo</name></expr></argument>)</argument_list></call>,
    <call><name>mIsDoneAddingChildren</name><argument_list>(<argument><expr>!<name>aFromParser</name></expr></argument>)</argument_list></call>
</member_list><block>{
  <expr_stmt><expr><call><name>RegisterFreezableElement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SetIsNetworkCreated</name><argument_list>(<argument><expr><name>aFromParser</name> == <name>NS_FROM_PARSER_NETWORK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// &lt;object&gt; is always barred from constraint validation.</comment>
  <expr_stmt><expr><call><name>SetBarredFromConstraintValidation</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>nsHTMLObjectElement</name>::~<name>nsHTMLObjectElement</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>UnregisterFreezableElement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DestroyImageLoadingContent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<function><type><name>PRBool</name></type>
<name><name>nsHTMLObjectElement</name>::<name>IsDoneAddingChildren</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr><name>mIsDoneAddingChildren</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsHTMLObjectElement</name>::<name>DoneAddingChildren</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aHaveNotified</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mIsDoneAddingChildren</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

  <comment type="line">// If we're already in a document, we need to trigger the load</comment>
  <comment type="line">// Otherwise, BindToTree takes care of that.</comment>
  <if>if <condition>(<expr><call><name>IsInDoc</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>StartObjectLoad</name><argument_list>(<argument><expr><name>aHaveNotified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<macro><name>NS_IMPL_CYCLE_COLLECTION_CLASS</name><argument_list>(<argument>nsHTMLObjectElement</argument>)</argument_list></macro>
<macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED</name><argument_list>(<argument>nsHTMLObjectElement</argument>,
                                                  <argument>nsGenericHTMLFormElement</argument>)</argument_list></macro>
  <expr_stmt><expr><call><name><name>tmp</name>-&gt;<name>Traverse</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END</name></type>

<name>NS_IMPL_ADDREF_INHERITED</name><argument_list>(<argument><expr><name>nsHTMLObjectElement</name></expr></argument>, <argument><expr><name>nsGenericElement</name></expr></argument>)</argument_list> 
<name>NS_IMPL_RELEASE_INHERITED</name><argument_list>(<argument><expr><name>nsHTMLObjectElement</name></expr></argument>, <argument><expr><name>nsGenericElement</name></expr></argument>)</argument_list> 

<name>DOMCI_NODE_DATA</name><argument_list>(<argument><expr><name>HTMLObjectElement</name></expr></argument>, <argument><expr><name>nsHTMLObjectElement</name></expr></argument>)</argument_list>

<name>NS_INTERFACE_TABLE_HEAD_CYCLE_COLLECTION_INHERITED</name><argument_list>(<argument><expr><name>nsHTMLObjectElement</name></expr></argument>)</argument_list>
  <name>NS_HTML_CONTENT_INTERFACE_TABLE_BEGIN</name><argument_list>(<argument><expr><name>nsHTMLObjectElement</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsHTMLObjectElement</name></expr></argument>, <argument><expr><name>nsIDOMHTMLObjectElement</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsHTMLObjectElement</name></expr></argument>, <argument><expr><name>imgIDecoderObserver</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsHTMLObjectElement</name></expr></argument>, <argument><expr><name>nsIRequestObserver</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsHTMLObjectElement</name></expr></argument>, <argument><expr><name>nsIStreamListener</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsHTMLObjectElement</name></expr></argument>, <argument><expr><name>nsIFrameLoaderOwner</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsHTMLObjectElement</name></expr></argument>, <argument><expr><name>nsIObjectLoadingContent</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsHTMLObjectElement</name></expr></argument>, <argument><expr><name>nsIImageLoadingContent</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsHTMLObjectElement</name></expr></argument>, <argument><expr><name>imgIContainerObserver</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsHTMLObjectElement</name></expr></argument>, <argument><expr><name>nsIInterfaceRequestor</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsHTMLObjectElement</name></expr></argument>, <argument><expr><name>nsIChannelEventSink</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsHTMLObjectElement</name></expr></argument>, <argument><expr><name>nsIConstraintValidation</name></expr></argument>)</argument_list>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SVG</name></cpp:ifdef>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsHTMLObjectElement</name></expr></argument>, <argument><expr><name>nsIDOMGetSVGDocument</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <name>NS_OFFSET_AND_INTERFACE_TABLE_END</name>
  <name>NS_HTML_CONTENT_INTERFACE_TABLE_TO_MAP_SEGUE</name><argument_list>(<argument><expr><name>nsHTMLObjectElement</name></expr></argument>,
                                               <argument><expr><name>nsGenericHTMLFormElement</name></expr></argument>)</argument_list>
<name>NS_HTML_CONTENT_INTERFACE_TABLE_TAIL_CLASSINFO</name><argument_list>(<argument><expr><name>HTMLObjectElement</name></expr></argument>)</argument_list>

<name>NS_IMPL_ELEMENT_CLONE</name><argument_list>(<argument><expr><name>nsHTMLObjectElement</name></expr></argument>)</argument_list>

<comment type="line">// nsIConstraintValidation</comment>
<name>NS_IMPL_NSICONSTRAINTVALIDATION</name><argument_list>(<argument><expr><name>nsHTMLObjectElement</name></expr></argument>)</argument_list>

<name>NS_IMETHODIMP</name>
<name><name>nsHTMLObjectElement</name>::<name>GetForm</name></name><argument_list>(<argument><expr><name>nsIDOMHTMLFormElement</name> **<name>aForm</name></expr></argument>)</argument_list>
<argument_list>{
  return <argument><expr><call><name><name>nsGenericHTMLFormElement</name>::<name>GetForm</name></name><argument_list>(<argument><expr><name>aForm</name></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

<name>nsresult</name>
<name><name>nsHTMLObjectElement</name>::<name>BindToTree</name></name><argument_list>(<argument><expr><name>nsIDocument</name> *<name>aDocument</name></expr></argument>,
                                <argument><expr><name>nsIContent</name> *<name>aParent</name></expr></argument>,
                                <argument><expr><name>nsIContent</name> *<name>aBindingParent</name></expr></argument>,
                                <argument><expr><name>PRBool</name> <name>aCompileEventHandlers</name></expr></argument>)</argument_list>
<argument_list>{
  <argument><expr><name>nsresult</name> <name>rv</name> = <call><name><name>nsGenericHTMLFormElement</name>::<name>BindToTree</name></name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>, <argument><expr><name>aParent</name></expr></argument>,
                                                     <argument><expr><name>aBindingParent</name></expr></argument>,
                                                     <argument><expr><name>aCompileEventHandlers</name></expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>;

  <comment type="line">// If we already have all the children, start the load.</comment>
  if <argument><expr>(<name>mIsDoneAddingChildren</name>) <block>{
    <expr><call><call><name>void</name> <argument_list>(<argument><expr><name><name>nsHTMLObjectElement</name>::*<name>start</name></name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call> = &amp;<name><name>nsHTMLObjectElement</name>::<name>StartObjectLoad</name></name></expr>;
    <expr><call><name><name>nsContentUtils</name>::<name>AddScriptRunner</name></name><argument_list>(<argument><expr><call><name>NS_NewRunnableMethod</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
  }</block></expr></argument>

  <return>return <expr><name>NS_OK</name></expr>;</return></argument_list></decl></decl_stmt>
}

void
<macro><name>nsHTMLObjectElement</name></macro><expr_stmt><expr><name>::<name>UnbindFromTree</name></name>(<name>PRBool</name> <name>aDeep</name>,
                                    <name>PRBool</name> <name>aNullParent</name>)
<block>{
  <expr><call><name>RemovedFromDocument</name><argument_list>()</argument_list></call></expr>;
  <expr><call><name><name>nsGenericHTMLFormElement</name>::<name>UnbindFromTree</name></name><argument_list>(<argument><expr><name>aDeep</name></expr></argument>, <argument><expr><name>aNullParent</name></expr></argument>)</argument_list></call></expr>;
}</block>



<name>nsresult</name>
<macro><name>nsHTMLObjectElement</name></macro><name>::<name>SetAttr</name></name>(<name>PRInt32</name> <name>aNameSpaceID</name>, <name>nsIAtom</name> *<name>aName</name>,
                             <name>nsIAtom</name> *<name>aPrefix</name>, const <name>nsAString</name> &amp;<name>aValue</name>,
                             <name>PRBool</name> <name>aNotify</name>)
<block>{
  <comment type="line">// If we plan to call LoadObject, we want to do it first so that the</comment>
  <comment type="line">// object load kicks off _before_ the reflow triggered by the SetAttr.  But if</comment>
  <comment type="line">// aNotify is false, we are coming from the parser or some such place; we'll</comment>
  <comment type="line">// get bound after all the attributes have been set, so we'll do the</comment>
  <comment type="line">// object load from BindToTree/DoneAddingChildren.</comment>
  <comment type="line">// Skip the LoadObject call in that case.</comment>
  <comment type="line">// We also don't want to start loading the object when we're not yet in</comment>
  <comment type="line">// a document, just in case that the caller wants to set additional</comment>
  <comment type="line">// attributes before inserting the node into the document.</comment>
  <if>if <condition>(<expr><name>aNotify</name> &amp;&amp; <call><name>IsInDoc</name><argument_list>()</argument_list></call> &amp;&amp; <name>mIsDoneAddingChildren</name> &amp;&amp;
      <name>aNameSpaceID</name> == <name>kNameSpaceID_None</name> &amp;&amp; <name>aName</name> == <name><name>nsGkAtoms</name>::<name>data</name></name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>type</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>type</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LoadObject</name><argument_list>(<argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>, <argument><expr><call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt/></block></then></if>}</block></expr></expr_stmt>

  <return>return <expr><call><name><name>nsGenericHTMLFormElement</name>::<name>SetAttr</name></name><argument_list>(<argument><expr><name>aNameSpaceID</name></expr></argument>, <argument><expr><name>aName</name></expr></argument>, <argument><expr><name>aPrefix</name></expr></argument>,
                                           <argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>)</argument_list></call></expr>;</return>
}

nsresult
<macro><name>nsHTMLObjectElement</name></macro><expr_stmt><expr><name>::<name>UnsetAttr</name></name>(<name>PRInt32</name> <name>aNameSpaceID</name>, <name>nsIAtom</name>* <name>aAttribute</name>,
                               <name>PRBool</name> <name>aNotify</name>)
<block>{
  <if>if <condition>(<expr><name>aNameSpaceID</name> == <name>kNameSpaceID_None</name> &amp;&amp; <name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>data</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>Fallback</name><argument_list>(<argument><expr><name>aNotify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt/></block></then></if>}</block></expr></expr_stmt>

  <return>return <expr><call><name><name>nsGenericHTMLFormElement</name>::<name>UnsetAttr</name></name><argument_list>(<argument><expr><name>aNameSpaceID</name></expr></argument>, <argument><expr><name>aAttribute</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>)</argument_list></call></expr>;</return>
}

bool
<macro><name>nsHTMLObjectElement</name></macro><expr_stmt><expr><name>::<name>IsFocusableForTabIndex</name></name>()
<block>{
  <expr><name>nsIDocument</name>* <name>doc</name> = <call><name>GetCurrentDoc</name><argument_list>()</argument_list></call></expr>;
  <if>if <condition>(<expr>!<name>doc</name> || <call><name><name>doc</name>-&gt;<name>HasFlag</name></name><argument_list>(<argument><expr><name>NODE_IS_EDITABLE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr>false</expr>;</return>
  <expr_stmt/></block></then></if>}</block></expr></expr_stmt>

  <return>return <expr><call><name>Type</name><argument_list>()</argument_list></call> == <name>eType_Plugin</name> || <call><name>IsEditableRoot</name><argument_list>()</argument_list></call> ||
         (<call><name>Type</name><argument_list>()</argument_list></call> == <name>eType_Document</name> &amp;&amp; <call><name><name>nsContentUtils</name>::<name>IsSubDocumentTabbable</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>)</expr>;</return>
}

PRBool
<macro><name>nsHTMLObjectElement</name></macro><expr_stmt><expr><name>::<name>IsHTMLFocusable</name></name>(<name>PRBool</name> <name>aWithMouse</name>,
                                     <name>PRBool</name> *<name>aIsFocusable</name>, <name>PRInt32</name> *<name>aTabIndex</name>)
<block>{
  <comment type="line">// TODO: this should probably be managed directly by IsHTMLFocusable.</comment>
  <comment type="line">// See bug 597242.</comment>
  <expr><name>nsIDocument</name> *<name>doc</name> = <call><name>GetCurrentDoc</name><argument_list>()</argument_list></call></expr>;
  <if>if <condition>(<expr>!<name>doc</name> || <call><name><name>doc</name>-&gt;<name>HasFlag</name></name><argument_list>(<argument><expr><name>NODE_IS_EDITABLE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>aTabIndex</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>GetIntAttr</name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>tabindex</name></name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>aTabIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block></then></if></block></then></if>}</block>

    *<name>aIsFocusable</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }

  <comment type="line">// This method doesn't call nsGenericHTMLFormElement intentionally.</comment>
  <comment type="line">// TODO: It should probably be changed when bug 597242 will be fixed.</comment>
  if <expr_stmt><expr>(<call><name>Type</name><argument_list>()</argument_list></call> == <name>eType_Plugin</name> || <call><name>IsEditableRoot</name><argument_list>()</argument_list></call> ||
      (<call><name>Type</name><argument_list>()</argument_list></call> == <name>eType_Document</name> &amp;&amp; <call><name><name>nsContentUtils</name>::<name>IsSubDocumentTabbable</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>)) <block>{
    <comment type="line">// Has plugin content: let the plugin decide what to do in terms of</comment>
    <comment type="line">// internal focus from mouse clicks</comment>
    <if>if <condition>(<expr><name>aTabIndex</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>GetIntAttr</name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>tabindex</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>aTabIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block></then></if>}</block>

    *<name>aIsFocusable</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }

  <comment type="line">// TODO: this should probably be managed directly by IsHTMLFocusable.</comment>
  <comment type="line">// See bug 597242.</comment>
  const <decl_stmt><decl><type><name>nsAttrValue</name>*</type> <name>attrVal</name> <init>= <expr><call><name><name>mAttrsAndChildren</name>.<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>tabindex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>aIsFocusable</name> = <name>attrVal</name> &amp;&amp; <call><name><name>attrVal</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eInteger</name></name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>aTabIndex</name> &amp;&amp; *<name>aIsFocusable</name></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aTabIndex</name> = <call><name><name>attrVal</name>-&gt;<name>GetIntegerValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>PR_FALSE</name></expr>;</return>
}

PRUint32
<macro><name>nsHTMLObjectElement</name></macro><expr_stmt><expr><name>::<name>GetDesiredIMEState</name></name>()
<block>{
  <if>if <condition>(<expr><call><name>Type</name><argument_list>()</argument_list></call> == <name>eType_Plugin</name></expr>)</condition><then> <block>{
    <return>return <expr><name><name>nsIContent</name>::<name>IME_STATUS_PLUGIN</name></name></expr>;</return>
  <expr_stmt/></block></then></if>}</block></expr></expr_stmt>
   
  <return>return <expr><call><name><name>nsGenericHTMLFormElement</name>::<name>GetDesiredIMEState</name></name><argument_list>()</argument_list></call></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsHTMLObjectElement</name></macro><expr_stmt><expr><name>::<name>Reset</name></name>()
<block>{
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLObjectElement</name>::<name>SubmitNamesValues</name></name><parameter_list>(<param><decl><type><name>nsFormSubmission</name> *</type><name>aFormSubmission</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>name</name></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// No name, don't submit.</comment>

    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>frame</name> <init>= <expr><call><name>GetPrimaryFrame</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsIObjectFrame</name> *</type><name>objFrame</name> <init>= <expr><call><name>do_QueryFrame</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>objFrame</name></expr>)</condition><then> <block>{
    <comment type="line">// No frame, nothing to submit.</comment>

    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPluginInstance</name></expr></argument>&gt;</argument_list></name></type> <name>pi</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>objFrame</name>-&gt;<name>GetPluginInstance</name></name><argument_list>(<argument><expr>*<call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>pi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>pi</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>pi</name>-&gt;<name>GetFormValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>aFormSubmission</name>-&gt;<name>AddNameValuePair</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<macro><name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument>nsHTMLObjectElement</argument>, <argument>Align</argument>, <argument>align</argument>)</argument_list></macro>
<macro><name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument>nsHTMLObjectElement</argument>, <argument>Archive</argument>, <argument>archive</argument>)</argument_list></macro>
<macro><name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument>nsHTMLObjectElement</argument>, <argument>Border</argument>, <argument>border</argument>)</argument_list></macro>
<macro><name>NS_IMPL_URI_ATTR_WITH_BASE</name><argument_list>(<argument>nsHTMLObjectElement</argument>, <argument>Code</argument>, <argument>code</argument>, <argument>codebase</argument>)</argument_list></macro>
<macro><name>NS_IMPL_URI_ATTR</name><argument_list>(<argument>nsHTMLObjectElement</argument>, <argument>CodeBase</argument>, <argument>codebase</argument>)</argument_list></macro>
<macro><name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument>nsHTMLObjectElement</argument>, <argument>CodeType</argument>, <argument>codetype</argument>)</argument_list></macro>
<macro><name>NS_IMPL_URI_ATTR_WITH_BASE</name><argument_list>(<argument>nsHTMLObjectElement</argument>, <argument>Data</argument>, <argument>data</argument>, <argument>codebase</argument>)</argument_list></macro>
<macro><name>NS_IMPL_BOOL_ATTR</name><argument_list>(<argument>nsHTMLObjectElement</argument>, <argument>Declare</argument>, <argument>declare</argument>)</argument_list></macro>
<macro><name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument>nsHTMLObjectElement</argument>, <argument>Height</argument>, <argument>height</argument>)</argument_list></macro>
<macro><name>NS_IMPL_INT_ATTR</name><argument_list>(<argument>nsHTMLObjectElement</argument>, <argument>Hspace</argument>, <argument>hspace</argument>)</argument_list></macro>
<macro><name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument>nsHTMLObjectElement</argument>, <argument>Name</argument>, <argument>name</argument>)</argument_list></macro>
<macro><name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument>nsHTMLObjectElement</argument>, <argument>Standby</argument>, <argument>standby</argument>)</argument_list></macro>
<macro><name>NS_IMPL_INT_ATTR_DEFAULT_VALUE</name><argument_list>(<argument>nsHTMLObjectElement</argument>, <argument>TabIndex</argument>, <argument>tabindex</argument>,
                               <argument>IsFocusableForTabIndex() ? 0 : -1</argument>)</argument_list></macro>
<macro><name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument>nsHTMLObjectElement</argument>, <argument>Type</argument>, <argument>type</argument>)</argument_list></macro>
<macro><name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument>nsHTMLObjectElement</argument>, <argument>UseMap</argument>, <argument>usemap</argument>)</argument_list></macro>
<macro><name>NS_IMPL_INT_ATTR</name><argument_list>(<argument>nsHTMLObjectElement</argument>, <argument>Vspace</argument>, <argument>vspace</argument>)</argument_list></macro>
<macro><name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument>nsHTMLObjectElement</argument>, <argument>Width</argument>, <argument>width</argument>)</argument_list></macro>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLObjectElement</name>::<name>GetContentDocument</name></name><parameter_list>(<param><decl><type><name>nsIDOMDocument</name> **</type><name>aContentDocument</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aContentDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aContentDocument</name> = <name>nsnull</name></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<call><name>IsInDoc</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// XXXbz should this use GetCurrentDoc()?  sXBL/XBL2 issue!</comment>
  <decl_stmt><decl><type><name>nsIDocument</name> *</type><name>sub_doc</name> <init>= <expr><call><name>GetOwnerDoc</name><argument_list>()</argument_list></call>-&gt;<call><name>GetSubDocumentFor</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>sub_doc</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>sub_doc</name></expr></argument>, <argument><expr><name>aContentDocument</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SVG</name></cpp:ifdef>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLObjectElement</name>::<name>GetSVGDocument</name></name><parameter_list>(<param><decl><type><name>nsIDOMDocument</name> **</type><name>aResult</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetContentDocument</name><argument_list>(<argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>PRBool</name></type>
<name><name>nsHTMLObjectElement</name>::<name>ParseAttribute</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aNamespaceID</name></decl></param>,
                                    <param><decl><type><name>nsIAtom</name> *</type><name>aAttribute</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aValue</name></decl></param>,
                                    <param><decl><type><name>nsAttrValue</name> &amp;</type><name>aResult</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aNamespaceID</name> == <name>kNameSpaceID_None</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>align</name></name></expr>)</condition><then> <block>{
      <return>return <expr><call><name>ParseAlignValue</name><argument_list>(<argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><call><name>ParseImageAttribute</name><argument_list>(<argument><expr><name>aAttribute</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>PR_TRUE</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><call><name><name>nsGenericHTMLFormElement</name>::<name>ParseAttribute</name></name><argument_list>(<argument><expr><name>aNamespaceID</name></expr></argument>, <argument><expr><name>aAttribute</name></expr></argument>,
                                                  <argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>MapAttributesIntoRule</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsMappedAttributes</name> *</type><name>aAttributes</name></decl></param>,
                      <param><decl><type><name>nsRuleData</name> *</type><name>aData</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>nsGenericHTMLFormElement</name>::<name>MapImageAlignAttributeInto</name></name><argument_list>(<argument><expr><name>aAttributes</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>nsGenericHTMLFormElement</name>::<name>MapImageBorderAttributeInto</name></name><argument_list>(<argument><expr><name>aAttributes</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>nsGenericHTMLFormElement</name>::<name>MapImageMarginAttributeInto</name></name><argument_list>(<argument><expr><name>aAttributes</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>nsGenericHTMLFormElement</name>::<name>MapImageSizeAttributesInto</name></name><argument_list>(<argument><expr><name>aAttributes</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>nsGenericHTMLFormElement</name>::<name>MapCommonAttributesInto</name></name><argument_list>(<argument><expr><name>aAttributes</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<macro><name>NS_IMETHODIMP_</name><argument_list>(<argument>PRBool</argument>)</argument_list></macro>
<macro><name>nsHTMLObjectElement</name></macro><expr_stmt><expr><name>::<name>IsAttributeMapped</name></name>(const <name>nsIAtom</name> *<name>aAttribute</name>) const
<block>{
  <expr>static const <name>MappedAttributeEntry</name>* const <name><name>map</name><index>[]</index></name> = <block>{
    <expr><name>sCommonAttributeMap</name></expr>,
    <expr><name>sImageMarginSizeAttributeMap</name></expr>,
    <expr><name>sImageBorderAttributeMap</name></expr>,
    <expr><name>sImageAlignAttributeMap</name></expr>,
  }</block></expr>;

  <return>return <expr><call><name>FindAttributeDependence</name><argument_list>(<argument><expr><name>aAttribute</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><call><name>NS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>nsMapRuleToAttributesFunc</name></type>
<name><name>nsHTMLObjectElement</name>::<name>GetAttributeMappingFunction</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr>&amp;<name>MapAttributesIntoRule</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsHTMLObjectElement</name>::<name>StartObjectLoad</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>type</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>type</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>NS_ConvertUTF16toUTF8</name></type> <name>ctype</name><parameter_list>(<param><decl><type><name>type</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>uri</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>data</name></name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>LoadObject</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <comment type="line">// Be sure to call the nsIURI version if we have no attribute</comment>
    <comment type="line">// That handles the case where no URI is specified. An empty string would</comment>
    <comment type="line">// get interpreted as the page itself, instead of absence of URI.</comment>
    <expr_stmt><expr><call><name>LoadObject</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
  <expr_stmt><expr><call><name>SetIsNetworkCreated</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>PRInt32</name></type>
<name><name>nsHTMLObjectElement</name>::<name>IntrinsicState</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><call><name><name>nsGenericHTMLFormElement</name>::<name>IntrinsicState</name></name><argument_list>()</argument_list></call> | <call><name>ObjectState</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PRUint32</name></type>
<name><name>nsHTMLObjectElement</name>::<name>GetCapabilities</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><call><name><name>nsObjectLoadingContent</name>::<name>GetCapabilities</name></name><argument_list>()</argument_list></call> | <name>eSupportClassID</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsHTMLObjectElement</name>::<name>DestroyContent</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>RemovedFromDocument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>nsGenericHTMLFormElement</name>::<name>DestroyContent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsHTMLObjectElement</name>::<name>CopyInnerTo</name></name><parameter_list>(<param><decl><type><name>nsGenericElement</name>*</type> <name>aDest</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsGenericHTMLFormElement</name>::<name>CopyInnerTo</name></name><argument_list>(<argument><expr><name>aDest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name><name>aDest</name>-&gt;<name>GetOwnerDoc</name></name><argument_list>()</argument_list></call>-&gt;<call><name>IsStaticDocument</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>CreateStaticClone</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsHTMLObjectElement</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aDest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>
</unit>
