<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="007df7b9d50220bf31269ecb84035f09c780f0bb.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* vim: set ts=2 sw=2 et tw=78: */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Johnny Stenback &lt;jst@netscape.com&gt;
 *   L. David Baron  &lt;dbaron@dbaron.org&gt;
 *   Pierre Phaneuf  &lt;pp@ludusdesign.com&gt;
 *   Pete Collins    &lt;petejc@collab.net&gt;
 *   James Ross      &lt;silver@warwickcompsoc.co.uk&gt;
 *   Ryan Jones      &lt;sciguyryan@gmail.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<comment type="block">/*
 * Base class for all our document implementations.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_LOGGING</name></cpp:ifdef>
<comment type="line">// so we can get logging even in release builds</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORCE_PR_LOG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plstr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prprf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIInterfaceRequestor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIInterfaceRequestorUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsUnicharUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrivateDOMEvent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIEventStateManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIObserver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIBaseWindow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozilla/css/Loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShellTreeItem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptRuntime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMArray.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGUIEvent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPLDOMEvent.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMStyleSheet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMAttribute.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMDOMStringList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMDOMImplementation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMDocumentView.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMAbstractView.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMDocumentXBL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozilla/FunctionTimer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGenericElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGenericHTMLElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMEventGroup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMCDATASection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMProcessingInstruction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNodeUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsLayoutUtils.h"</cpp:file></cpp:include> <comment type="line">// for GetFrameForPoint</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFrame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsITabChild.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsRange.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMText.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMComment.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMDocumentType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNodeIterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsTreeWalker.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIServiceManager.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentCID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPresShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPresContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsThreadUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNodeInfoManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIXBLService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIXPointer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFileChannel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIMultiPartChannel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIRefreshURI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIWebNavigation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptError.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNetUtil.h"</cpp:file></cpp:include>     <comment type="line">// for NS_MakeAbsoluteURI</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptSecurityManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrincipal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMWindowInternal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPIDOMWindow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsFocusManager.h"</cpp:file></cpp:include>

<comment type="line">// for radio group stuff</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLInputElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIRadioVisitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFormControl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsXMLEventsManager.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsBidiUtils.h"</cpp:file></cpp:include>

<expr_stmt><expr>static <call><name>NS_DEFINE_CID</name><argument_list>(<argument><expr><name>kDOMEventGroupCID</name></expr></argument>, <argument><expr><name>NS_DOMEVENTGROUP_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMUserDataHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsScriptEventManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMXPathEvaluator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIXPathEvaluatorInternal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIParserService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentCreatorFunctions.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsBindingManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLFormElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIRequest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsILink.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsFileDataProtocolHandler.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsICharsetAlias.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIParser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIContentSink.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDateTimeFormatCID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDateTimeFormat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsEventDispatcher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsMutationEvent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMXPathEvaluator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMCID.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIJSContextStack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIXPConnect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCycleCollector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCCUncollectableMarker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIContentPolicy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentPolicyUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsICategoryManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocumentLoaderFactory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIContentViewer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIXMLContentSink.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentErrors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIXULDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrompt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPropertyBag2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMPageTransitionEvent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsFrameLoader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsEscape.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_MEDIA</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsHTMLMediaElement.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// MOZ_MEDIA</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozAutoDocUpdate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGlobalWindow.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SMIL</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsSMILAnimationController.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"imgIContainer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsSVGUtils.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// MOZ_SMIL</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsRefreshDriver.h"</cpp:file></cpp:include>

<comment type="line">// FOR CSP (autogenerated by xpidl)</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIContentSecurityPolicy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCSPService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsHTMLStyleSheet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsHTMLCSSStyleSheet.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozilla/dom/Link.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIHTMLDocument.h"</cpp:file></cpp:include>

<using>using namespace <name><name>mozilla</name>::<name>dom</name></name>;</using>

<typedef>typedef <type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>Link</name>*</expr></argument>&gt;</argument_list></name></type> <name>LinkArray</name>;</typedef>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PRLogModuleInfo</name>*</type> <name>gDocumentLeakPRLog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PRLogModuleInfo</name>*</type> <name>gCspPRLog</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_NOT_VALID</name></cpp:macro> <cpp:value>((nsBaseContentList*)1)</cpp:value></cpp:define>

<destructor><name><name>nsIdentifierMapEntry</name>::~<name>nsIdentifierMapEntry</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mNameContentList</name> &amp;&amp; <name>mNameContentList</name> != <name>NAME_NOT_VALID</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name>mNameContentList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></destructor>

<function><type><name>void</name></type>
<name><name>nsIdentifierMapEntry</name>::<name>Traverse</name></name><parameter_list>(<param><decl><type><name>nsCycleCollectionTraversalCallback</name>*</type> <name>aCallback</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mNameContentList</name> != <name>NAME_NOT_VALID</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_CYCLE_COLLECTION_NOTE_EDGE_NAME</name><argument_list>(<argument><expr>*<name>aCallback</name></expr></argument>,
                                       <argument><expr>"mIdentifierMap mNameContentList"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aCallback</name>-&gt;<name>NoteXPCOMChild</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIDOMNodeList</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mNameContentList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name>NS_CYCLE_COLLECTION_NOTE_EDGE_NAME</name><argument_list>(<argument><expr>*<name>aCallback</name></expr></argument>, <argument><expr>"mIdentifierMap mDocAllList"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>aCallback</name>-&gt;<name>NoteXPCOMChild</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIDOMNodeList</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mDocAllList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>mImageElement</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_CYCLE_COLLECTION_NOTE_EDGE_NAME</name><argument_list>(<argument><expr>*<name>aCallback</name></expr></argument>,
                                       <argument><expr>"mIdentifierMap mImageElement element"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nsIContent</name>*</type> <name>imageElement</name> <init>= <expr><name>mImageElement</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>aCallback</name>-&gt;<name>NoteXPCOMChild</name></name><argument_list>(<argument><expr><name>imageElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIdentifierMapEntry</name>::<name>SetInvalidName</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><name>mNameContentList</name> = <name>NAME_NOT_VALID</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsIdentifierMapEntry</name>::<name>IsInvalidName</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr><name>mNameContentList</name> == <name>NAME_NOT_VALID</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsIdentifierMapEntry</name>::<name>IsEmpty</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr><call><name><name>mIdContentList</name>.<name>Count</name></name><argument_list>()</argument_list></call> == 0 &amp;&amp; !<name>mNameContentList</name> &amp;&amp;
         !<name>mChangeCallbacks</name> &amp;&amp; !<name>mImageElement</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsIdentifierMapEntry</name>::<name>CreateNameContentList</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><name>mNameContentList</name> = new <call><name>nsBaseContentList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mNameContentList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name>mNameContentList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>Element</name>*</type>
<name><name>nsIdentifierMapEntry</name>::<name>GetIdElement</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>Element</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>mIdContentList</name>.<name>SafeElementAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>Element</name>*</type>
<name><name>nsIdentifierMapEntry</name>::<name>GetImageIdElement</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr><name>mImageElement</name> ? <call><name><name>mImageElement</name>.<name>get</name></name><argument_list>()</argument_list></call> : <call><name>GetIdElement</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIdentifierMapEntry</name>::<name>AppendAllIdContent</name></name><parameter_list>(<param><decl><type><name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name>*</type> <name>aElements</name></decl></param>)</parameter_list>
<block>{
  <for>for (<init><decl><type><name>PRInt32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>mIdContentList</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <expr_stmt><expr><call><name><name>aElements</name>-&gt;<name>AppendObject</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>Element</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>mIdContentList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIdentifierMapEntry</name>::<name>AddContentChangeCallback</name></name><parameter_list>(<param><decl><type><name><name>nsIDocument</name>::<name>IDTargetObserver</name></name></type> <name>aCallback</name></decl></param>,
                                               <param><decl><type><name>void</name>*</type> <name>aData</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aForImage</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mChangeCallbacks</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mChangeCallbacks</name> = new <name><name>nsTHashtable</name><argument_list>&lt;<argument><expr><name>ChangeCallbackEntry</name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>mChangeCallbacks</name></expr>)</condition><then>
      <return>return;</return></then></if>
    <expr_stmt><expr><call><name><name>mChangeCallbacks</name>-&gt;<name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>ChangeCallback</name></type> <name>cc</name> <init>= <expr><block>{ <expr><name>aCallback</name></expr>, <expr><name>aData</name></expr>, <expr><name>aForImage</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mChangeCallbacks</name>-&gt;<name>PutEntry</name></name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIdentifierMapEntry</name>::<name>RemoveContentChangeCallback</name></name><parameter_list>(<param><decl><type><name><name>nsIDocument</name>::<name>IDTargetObserver</name></name></type> <name>aCallback</name></decl></param>,
                                                  <param><decl><type><name>void</name>*</type> <name>aData</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aForImage</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mChangeCallbacks</name></expr>)</condition><then>
    <return>return;</return></then></if>
  <decl_stmt><decl><type><name>ChangeCallback</name></type> <name>cc</name> <init>= <expr><block>{ <expr><name>aCallback</name></expr>, <expr><name>aData</name></expr>, <expr><name>aForImage</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mChangeCallbacks</name>-&gt;<name>RemoveEntry</name></name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name><name>mChangeCallbacks</name>-&gt;<name>Count</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mChangeCallbacks</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<struct>struct <name>FireChangeArgs</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>Element</name>*</type> <name>mFrom</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Element</name>*</type> <name>mTo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>mImageOnly</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>mHaveImageOverride</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>FireChangeEnumerator</name><parameter_list>(<param><decl><type><name><name>nsIdentifierMapEntry</name>::<name>ChangeCallbackEntry</name></name> *</type><name>aEntry</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aArg</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>FireChangeArgs</name>*</type> <name>args</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>FireChangeArgs</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aArg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// Don't fire image changes for non-image observers, and don't fire element</comment>
  <comment type="line">// changes for image observers when an image override is active.</comment>
  <if>if <condition>(<expr><name><name>aEntry</name>-&gt;<name>mKey</name>.<name>mForImage</name></name> ? (<name><name>args</name>-&gt;<name>mHaveImageOverride</name></name> &amp;&amp; !<name><name>args</name>-&gt;<name>mImageOnly</name></name>) :
                               <name><name>args</name>-&gt;<name>mImageOnly</name></name></expr>)</condition><then>
    <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return></then></if>
  <return>return <expr><call><name><name>aEntry</name>-&gt;<name>mKey</name>.<name>mCallback</name></name><argument_list>(<argument><expr><name><name>args</name>-&gt;<name>mFrom</name></name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>mTo</name></name></expr></argument>, <argument><expr><name><name>aEntry</name>-&gt;<name>mKey</name>.<name>mData</name></name></expr></argument>)</argument_list></call>
      ? <name>PL_DHASH_NEXT</name> : <name>PL_DHASH_REMOVE</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIdentifierMapEntry</name>::<name>FireChangeCallbacks</name></name><parameter_list>(<param><decl><type><name>Element</name>*</type> <name>aOldElement</name></decl></param>,
                                          <param><decl><type><name>Element</name>*</type> <name>aNewElement</name></decl></param>,
                                          <param><decl><type><name>PRBool</name></type> <name>aImageOnly</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mChangeCallbacks</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <decl_stmt><decl><type><name>FireChangeArgs</name></type> <name>args</name> <init>= <expr><block>{ <expr><name>aOldElement</name></expr>, <expr><name>aNewElement</name></expr>, <expr><name>aImageOnly</name></expr>, <expr>!!<name>mImageElement</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mChangeCallbacks</name>-&gt;<name>EnumerateEntries</name></name><argument_list>(<argument><expr><name>FireChangeEnumerator</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsIdentifierMapEntry</name>::<name>AddIdElement</name></name><parameter_list>(<param><decl><type><name>Element</name>*</type> <name>aElement</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aElement</name></expr></argument>, <argument><expr>"Must have element"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><call><name><name>mIdContentList</name>.<name>IndexOf</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call> &lt; 0</expr></argument>,
                  <argument><expr>"Why is null in our list?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <decl_stmt><decl><type><name>Element</name>*</type> <name>currentElement</name> <init>=
    <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>Element</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>mIdContentList</name>.<name>SafeElementAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// Common case</comment>
  <if>if <condition>(<expr><call><name><name>mIdContentList</name>.<name>Count</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
    <if>if <condition>(<expr>!<call><name><name>mIdContentList</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>currentElement</name> == <name>nsnull</name></expr></argument>, <argument><expr>"How did that happen?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FireChangeCallbacks</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>PR_TRUE</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// We seem to have multiple content nodes for the same id, or XUL is messing</comment>
  <comment type="line">// with us.  Search for the right place to insert the content.</comment>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>start</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>end</name> <init>= <expr><call><name><name>mIdContentList</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <do>do <block>{
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>start</name> &lt; <name>end</name></expr></argument>, <argument><expr>"Bogus start/end"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>cur</name> <init>= <expr>(<name>start</name> + <name>end</name>) / 2</expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>cur</name> &gt;= <name>start</name> &amp;&amp; <name>cur</name> &lt; <name>end</name></expr></argument>, <argument><expr>"What happened here?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Element</name>*</type> <name>curElement</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>Element</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>mIdContentList</name><index>[<expr><name>cur</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>curElement</name> == <name>aElement</name></expr>)</condition><then> <block>{
      <comment type="line">// Already in the list, so already in the right spot.  Get out of here.</comment>
      <comment type="line">// XXXbz this only happens because XUL does all sorts of random</comment>
      <comment type="line">// UpdateIdTableEntry calls.  Hate, hate, hate!</comment>
      <return>return <expr><name>PR_TRUE</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>nsContentUtils</name>::<name>PositionIsBefore</name></name><argument_list>(<argument><expr><name>aElement</name></expr></argument>, <argument><expr><name>curElement</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>end</name> = <name>cur</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>start</name> = <name>cur</name> + 1</expr>;</expr_stmt>
    }</block></else></if>
  }</block> while <condition>(<expr><name>start</name> != <name>end</name></expr>)</condition>;</do>

  <if>if <condition>(<expr>!<call><name><name>mIdContentList</name>.<name>InsertElementAt</name></name><argument_list>(<argument><expr><name>aElement</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <if>if <condition>(<expr><name>start</name> == 0</expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>Element</name>*</type> <name>oldElement</name> <init>=
      <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>Element</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>mIdContentList</name>.<name>SafeElementAt</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>currentElement</name> == <name>oldElement</name></expr></argument>, <argument><expr>"How did that happen?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FireChangeCallbacks</name><argument_list>(<argument><expr><name>oldElement</name></expr></argument>, <argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIdentifierMapEntry</name>::<name>RemoveIdElement</name></name><parameter_list>(<param><decl><type><name>Element</name>*</type> <name>aElement</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aElement</name></expr></argument>, <argument><expr>"Missing element"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// This should only be called while the document is in an update.</comment>
  <comment type="line">// Assertions near the call to this method guarantee this.</comment>

  <comment type="line">// This could fire in OOM situations</comment>
  <comment type="line">// Only assert this in HTML documents for now as XUL does all sorts of weird</comment>
  <comment type="line">// crap.</comment>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<call><name><name>aElement</name>-&gt;<name>GetOwnerDoc</name></name><argument_list>()</argument_list></call> ||
               !<call><name><name>aElement</name>-&gt;<name>GetOwnerDoc</name></name><argument_list>()</argument_list></call>-&gt;<call><name>IsHTML</name><argument_list>()</argument_list></call> ||
               <call><name><name>mIdContentList</name>.<name>IndexOf</name></name><argument_list>(<argument><expr><name>aElement</name></expr></argument>)</argument_list></call> &gt;= 0</expr></argument>,
               <argument><expr>"Removing id entry that doesn't exist"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// XXXbz should this ever Compact() I guess when all the content is gone</comment>
  <comment type="line">// we'll just get cleaned up in the natural order of things...</comment>
  <decl_stmt><decl><type><name>Element</name>*</type> <name>currentElement</name> <init>=
    <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>Element</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>mIdContentList</name>.<name>SafeElementAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mIdContentList</name>.<name>RemoveElement</name></name><argument_list>(<argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>currentElement</name> == <name>aElement</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>FireChangeCallbacks</name><argument_list>(<argument><expr><name>currentElement</name></expr></argument>,
                        <argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>Element</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>mIdContentList</name>.<name>SafeElementAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIdentifierMapEntry</name>::<name>SetImageElement</name></name><parameter_list>(<param><decl><type><name>Element</name>*</type> <name>aElement</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>Element</name>*</type> <name>oldElement</name> <init>= <expr><call><name>GetImageIdElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>mImageElement</name> = <name>aElement</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>Element</name>*</type> <name>newElement</name> <init>= <expr><call><name>GetImageIdElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>oldElement</name> != <name>newElement</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>FireChangeCallbacks</name><argument_list>(<argument><expr><name>oldElement</name></expr></argument>, <argument><expr><name>newElement</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIdentifierMapEntry</name>::<name>AddNameElement</name></name><parameter_list>(<param><decl><type><name>Element</name>*</type> <name>aElement</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mNameContentList</name> || <name>mNameContentList</name> == <name>NAME_NOT_VALID</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <comment type="line">// NOTE: this indexof is absolutely needed, since we don't flush</comment>
  <comment type="line">// content notifications when we do document.foo resolution.  So</comment>
  <comment type="line">// aContent may be in our list already and just now getting notified</comment>
  <comment type="line">// for!</comment>
  <comment type="line">// XXXbz with the HTML5 parser we can stop doing this!</comment>
  <if>if <condition>(<expr><call><name><name>mNameContentList</name>-&gt;<name>IndexOf</name></name><argument_list>(<argument><expr><name>aElement</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mNameContentList</name>-&gt;<name>AppendElement</name></name><argument_list>(<argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIdentifierMapEntry</name>::<name>RemoveNameElement</name></name><parameter_list>(<param><decl><type><name>Element</name>*</type> <name>aElement</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mNameContentList</name> &amp;&amp; <name>mNameContentList</name> != <name>NAME_NOT_VALID</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mNameContentList</name>-&gt;<name>RemoveElement</name></name><argument_list>(<argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<comment type="line">// Helper structs for the content-&gt;subdoc map</comment>

<class>class <name>SubDocMapEntry</name> <super>: <specifier>public</specifier> <name>PLDHashEntryHdr</name></super>
<block>{<private type="default">
</private><public>public:
  <comment type="line">// Both of these are strong references</comment>
  <decl_stmt><decl><type><name>nsIContent</name> *</type><name>mKey</name></decl>;</decl_stmt> <comment type="line">// must be first, to look like PLDHashEntryStub</comment>
  <decl_stmt><decl><type><name>nsIDocument</name> *</type><name>mSubDocument</name></decl>;</decl_stmt>
</public>}</block>;</class>

<struct>struct <name>FindContentData</name>
<block>{<public type="default">
  <constructor><name>FindContentData</name><parameter_list>(<param><decl><type><name>nsIDocument</name> *</type><name>aSubDoc</name></decl></param>)</parameter_list>
    <member_list>: <call><name>mSubDocument</name><argument_list>(<argument><expr><name>aSubDoc</name></expr></argument>)</argument_list></call>, <call><name>mResult</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>
  </member_list><block>{
  }</block></constructor>

  <decl_stmt><decl><type><name>nsISupports</name> *</type><name>mSubDocument</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsIContent</name> *</type><name>mResult</name></decl>;</decl_stmt>
</public>}</block>;</struct>


<comment type="block" format="doxygen">/**
 * A struct that holds all the information about a radio group.
 */</comment>
<struct>struct <name>nsRadioGroupStruct</name>
<block>{<public type="default">
  <comment type="block" format="doxygen">/**
   * A strong pointer to the currently selected radio button.
   */</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLInputElement</name></expr></argument>&gt;</argument_list></name></type> <name>mSelectedRadioButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsIFormControl</name></expr></argument>&gt;</argument_list></name></type> <name>mRadioButtons</name></decl>;</decl_stmt>
</public>}</block>;</struct>


<constructor><name><name>nsDOMStyleSheetList</name>::<name>nsDOMStyleSheetList</name></name><parameter_list>(<param><decl><type><name>nsIDocument</name> *</type><name>aDocument</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mLength</name> = -1</expr>;</expr_stmt>
  <comment type="line">// Not reference counted to avoid circular references.</comment>
  <comment type="line">// The document will tell us when its going away.</comment>
  <expr_stmt><expr><name>mDocument</name> = <name>aDocument</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mDocument</name>-&gt;<name>AddObserver</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>nsDOMStyleSheetList</name>::~<name>nsDOMStyleSheetList</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mDocument</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mDocument</name>-&gt;<name>RemoveObserver</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></destructor>

<macro><name>DOMCI_DATA</name><argument_list>(<argument>StyleSheetList</argument>, <argument>nsDOMStyleSheetList</argument>)</argument_list></macro>

<comment type="line">// XXX couldn't we use the GetIIDs method from CSSStyleSheetList here?</comment>
<comment type="line">// QueryInterface implementation for nsDOMStyleSheetList</comment>
<macro><name>NS_INTERFACE_TABLE_HEAD</name><argument_list>(<argument>nsDOMStyleSheetList</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_TABLE3</name><argument_list>(<argument>nsDOMStyleSheetList</argument>,
                      <argument>nsIDOMStyleSheetList</argument>,
                      <argument>nsIDocumentObserver</argument>,
                      <argument>nsIMutationObserver</argument>)</argument_list></macro>
  <decl_stmt><decl><type><name>NS_INTERFACE_TABLE_TO_MAP_SEGUE</name></type>
  <name>NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO</name><argument_list>(<argument><expr><name>StyleSheetList</name></expr></argument>)</argument_list>
<name>NS_INTERFACE_MAP_END</name>


<name>NS_IMPL_ADDREF</name><argument_list>(<argument><expr><name>nsDOMStyleSheetList</name></expr></argument>)</argument_list>
<name>NS_IMPL_RELEASE</name><argument_list>(<argument><expr><name>nsDOMStyleSheetList</name></expr></argument>)</argument_list>


<name>NS_IMETHODIMP</name>
<name><name>nsDOMStyleSheetList</name>::<name>GetLength</name></name><argument_list>(<argument><expr><name>PRUint32</name>* <name>aLength</name></expr></argument>)</argument_list>
<argument_list>{
  if <argument><expr>(<name>mDocument</name>) <block>{
    <comment type="line">// XXX Find the number and then cache it. We'll use the</comment>
    <comment type="line">// observer notification to figure out if new ones have</comment>
    <comment type="line">// been added or removed.</comment>
    <if>if <condition>(<expr>-1 == <name>mLength</name></expr>)</condition><then> <expr_stmt><expr><block>{
      <expr><name>mLength</name> = <call><name><name>mDocument</name>-&gt;<name>GetNumberOfStyleSheets</name></name><argument_list>()</argument_list></call></expr>;

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
      <name>PRInt32</name> <name>i</name></block></expr>;</expr_stmt></then></if></block></expr></argument>
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>mLength</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <expr_stmt><expr><block>{
        <expr><name>nsIStyleSheet</name> *<name>sheet</name> = <call><name><name>mDocument</name>-&gt;<name>GetStyleSheetAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMStyleSheet</name></expr></argument>&gt;</argument_list></name> <call><name>domss</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>sheet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>domss</name></expr></argument>, <argument><expr>"All \"normal\" sheets implement nsIDOMStyleSheet"</expr></argument>)</argument_list></call></expr>;
      }</block></expr></expr_stmt></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</argument_list>
    *<name>aLength</name> <init>= <expr><name>mLength</name></expr></init></decl>;</decl_stmt>
  }
  else <block>{
    <expr_stmt><expr>*<name>aLength</name> = 0</expr>;</expr_stmt>
  }</block>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}

nsIStyleSheet<expr_stmt><expr>*
<macro><name>nsDOMStyleSheetList</name></macro><name>::<name>GetItemAt</name></name>(<name>PRUint32</name> <name>aIndex</name>)
<block>{
  <if>if <condition>(<expr>!<name>mDocument</name> || <name>aIndex</name> &gt;= (<name>PRUint32</name>)<call><name><name>mDocument</name>-&gt;<name>GetNumberOfStyleSheets</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  <expr_stmt/></block></then></if>}</block>

  <name>nsIStyleSheet</name> *<name>sheet</name> = <call><name><name>mDocument</name>-&gt;<name>GetStyleSheetAt</name></name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>sheet</name></expr></argument>, <argument><expr>"Must have a sheet"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>sheet</name></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsDOMStyleSheetList</name></macro><expr_stmt><expr><name>::<name>Item</name></name>(<name>PRUint32</name> <name>aIndex</name>, <name>nsIDOMStyleSheet</name>** <name>aReturn</name>)
<block>{
  <expr><name>nsIStyleSheet</name> *<name>sheet</name> = <call><name>GetItemAt</name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr>;
  <if>if <condition>(<expr>!<name>sheet</name></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>aReturn</name> = <name>nsnull</name></expr>;</expr_stmt>

      <return>return <expr><name>NS_OK</name></expr>;</return>
  <expr_stmt/></block></then></if>}</block></expr></expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>sheet</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}

void
<macro><name>nsDOMStyleSheetList</name></macro><expr_stmt><expr><name>::<name>NodeWillBeDestroyed</name></name>(const <name>nsINode</name> *<name>aNode</name>)
<block>{
  <expr><name>mDocument</name> = <name>nsnull</name></expr>;
}</block>

<name>void</name>
<macro><name>nsDOMStyleSheetList</name></macro><name>::<name>StyleSheetAdded</name></name>(<name>nsIDocument</name> *<name>aDocument</name>,
                                     <name>nsIStyleSheet</name>* <name>aStyleSheet</name>,
                                     <name>PRBool</name> <name>aDocumentSheet</name>)
<block>{
  <if>if <condition>(<expr><name>aDocumentSheet</name> &amp;&amp; -1 != <name>mLength</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMStyleSheet</name></expr></argument>&gt;</argument_list></name></type> <name>domss</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aStyleSheet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>domss</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>mLength</name>++</expr>;</expr_stmt>
    <expr_stmt/></block></then></if></block></then></if>}</block></expr></expr_stmt>
  }
}

<function><type><name>void</name></type>
<name><name>nsDOMStyleSheetList</name>::<name>StyleSheetRemoved</name></name><parameter_list>(<param><decl><type><name>nsIDocument</name> *</type><name>aDocument</name></decl></param>,
                                       <param><decl><type><name>nsIStyleSheet</name>*</type> <name>aStyleSheet</name></decl></param>,
                                       <param><decl><type><name>PRBool</name></type> <name>aDocumentSheet</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aDocumentSheet</name> &amp;&amp; -1 != <name>mLength</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMStyleSheet</name></expr></argument>&gt;</argument_list></name></type> <name>domss</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aStyleSheet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>domss</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>mLength</name>--</expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
}</block></function>

<comment type="line">// nsOnloadBlocker implementation</comment>
<macro><name>NS_IMPL_ISUPPORTS1</name><argument_list>(<argument>nsOnloadBlocker</argument>, <argument>nsIRequest</argument>)</argument_list></macro>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsOnloadBlocker</name>::<name>GetName</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>aResult</name></decl></param>)</parameter_list>
<block>{ 
  <expr_stmt><expr><call><name><name>aResult</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"about:document-onload-blocker"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsOnloadBlocker</name>::<name>IsPending</name></name><parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>_retval</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>_retval</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsOnloadBlocker</name>::<name>GetStatus</name></name><parameter_list>(<param><decl><type><name>nsresult</name> *</type><name>status</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>status</name> = <name>NS_OK</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function> 

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsOnloadBlocker</name>::<name>Cancel</name></name><parameter_list>(<param><decl><type><name>nsresult</name></type> <name>status</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsOnloadBlocker</name>::<name>Suspend</name></name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsOnloadBlocker</name>::<name>Resume</name></name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsOnloadBlocker</name>::<name>GetLoadGroup</name></name><parameter_list>(<param><decl><type><name>nsILoadGroup</name> * *</type><name>aLoadGroup</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aLoadGroup</name> = <name>nsnull</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsOnloadBlocker</name>::<name>SetLoadGroup</name></name><parameter_list>(<param><decl><type><name>nsILoadGroup</name> *</type> <name>aLoadGroup</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsOnloadBlocker</name>::<name>GetLoadFlags</name></name><parameter_list>(<param><decl><type><name>nsLoadFlags</name> *</type><name>aLoadFlags</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aLoadFlags</name> = <name><name>nsIRequest</name>::<name>LOAD_NORMAL</name></name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsOnloadBlocker</name>::<name>SetLoadFlags</name></name><parameter_list>(<param><decl><type><name>nsLoadFlags</name></type> <name>aLoadFlags</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// ==================================================================</comment>

<constructor><name><name>nsExternalResourceMap</name>::<name>nsExternalResourceMap</name></name><parameter_list>()</parameter_list>
  <member_list>: <call><name>mHaveShutDown</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>
</member_list><block>{
  <expr_stmt><expr><call><name><name>mMap</name>.<name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mPendingLoads</name>.<name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<function><type><name>nsIDocument</name>*</type>
<name><name>nsExternalResourceMap</name>::<name>RequestResource</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>,
                                       <param><decl><type><name>nsINode</name>*</type> <name>aRequestingNode</name></decl></param>,
                                       <param><decl><type><name>nsDocument</name>*</type> <name>aDisplayDocument</name></decl></param>,
                                       <param><decl><type><name>ExternalResourceLoad</name>**</type> <name>aPendingLoad</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// If we ever start allowing non-same-origin loads here, we might need to do</comment>
  <comment type="line">// something interesting with aRequestingPrincipal even for the hashtable</comment>
  <comment type="line">// gets.</comment>
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr>"Must have a URI"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aRequestingNode</name></expr></argument>, <argument><expr>"Must have a node"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aPendingLoad</name> = <name>nsnull</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>mHaveShutDown</name></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>
  
  <comment type="line">// First, make sure we strip the ref from aURI.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>clone</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aURI</name>-&gt;<name>Clone</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>clone</name></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURL</name></expr></argument>&gt;</argument_list></name></type> <name>url</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>url</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>url</name>-&gt;<name>SetRef</name></name><argument_list>(<argument><expr><call><name>EmptyCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  
  <decl_stmt><decl><type><name>ExternalResource</name>*</type> <name>resource</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mMap</name>.<name>Get</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>, <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>resource</name></expr>)</condition><then> <block>{
    <return>return <expr><name><name>resource</name>-&gt;<name>mDocument</name></name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>PendingLoad</name></expr></argument>&gt;</argument_list></name></type> <name>load</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mPendingLoads</name>.<name>Get</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>load</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aPendingLoad</name> = <name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>load</name> = new <call><name>PendingLoad</name><argument_list>(<argument><expr><name>aDisplayDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>load</name></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr>!<call><name><name>mPendingLoads</name>.<name>Put</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>, <argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name><name>load</name>-&gt;<name>StartLoad</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>, <argument><expr><name>aRequestingNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// Make sure we don't thrash things by trying this load again, since</comment>
    <comment type="line">// chances are it failed for good reasons (security check, etc).</comment>
    <expr_stmt><expr><call><name>AddExternalResource</name><argument_list>(<argument><expr><name>clone</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aDisplayDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aPendingLoad</name> = <name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><name>nsnull</name></expr>;</return>
}</block></function>

<struct>struct
<name>nsExternalResourceEnumArgs</name>
<block>{<public type="default">
  <decl_stmt><decl><type><name><name>nsIDocument</name>::<name>nsSubDocEnumFunc</name></name></type> <name>callback</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>data</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>ExternalResourceEnumerator</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aKey</name></decl></param>,
                           <param><decl><type><name><name>nsExternalResourceMap</name>::<name>ExternalResource</name></name>*</type> <name>aData</name></decl></param>,
                           <param><decl><type><name>void</name>*</type> <name>aClosure</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsExternalResourceEnumArgs</name>*</type> <name>args</name> <init>=
    <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsExternalResourceEnumArgs</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aClosure</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>next</name> <init>=
    <expr><name><name>aData</name>-&gt;<name>mDocument</name></name> ? <call><name><name>args</name>-&gt;<name>callback</name></name><argument_list>(<argument><expr><name><name>aData</name>-&gt;<name>mDocument</name></name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call> : <name>PR_TRUE</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>next</name> ? <name>PL_DHASH_NEXT</name> : <name>PL_DHASH_STOP</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsExternalResourceMap</name>::<name>EnumerateResources</name></name><parameter_list>(<param><decl><type><name><name>nsIDocument</name>::<name>nsSubDocEnumFunc</name></name></type> <name>aCallback</name></decl></param>,
                                          <param><decl><type><name>void</name>*</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsExternalResourceEnumArgs</name></type> <name>args</name> <init>= <expr><block>{ <expr><name>aCallback</name></expr>, <expr><name>aData</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mMap</name>.<name>EnumerateRead</name></name><argument_list>(<argument><expr><name>ExternalResourceEnumerator</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>ExternalResourceTraverser</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aKey</name></decl></param>,
                          <param><decl><type><name><name>nsExternalResourceMap</name>::<name>ExternalResource</name></name>*</type> <name>aData</name></decl></param>,
                          <param><decl><type><name>void</name>*</type> <name>aClosure</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsCycleCollectionTraversalCallback</name> *</type><name>cb</name> <init>= 
    <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsCycleCollectionTraversalCallback</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aClosure</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>NS_CYCLE_COLLECTION_NOTE_EDGE_NAME</name><argument_list>(<argument><expr>*<name>cb</name></expr></argument>,
                                     <argument><expr>"mExternalResourceMap.mMap entry"
                                     "-&gt;mDocument"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cb</name>-&gt;<name>NoteXPCOMChild</name></name><argument_list>(<argument><expr><name><name>aData</name>-&gt;<name>mDocument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_CYCLE_COLLECTION_NOTE_EDGE_NAME</name><argument_list>(<argument><expr>*<name>cb</name></expr></argument>,
                                     <argument><expr>"mExternalResourceMap.mMap entry"
                                     "-&gt;mViewer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cb</name>-&gt;<name>NoteXPCOMChild</name></name><argument_list>(<argument><expr><name><name>aData</name>-&gt;<name>mViewer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_CYCLE_COLLECTION_NOTE_EDGE_NAME</name><argument_list>(<argument><expr>*<name>cb</name></expr></argument>,
                                     <argument><expr>"mExternalResourceMap.mMap entry"
                                     "-&gt;mLoadGroup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cb</name>-&gt;<name>NoteXPCOMChild</name></name><argument_list>(<argument><expr><name><name>aData</name>-&gt;<name>mLoadGroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsExternalResourceMap</name>::<name>Traverse</name></name><parameter_list>(<param><decl><type><name>nsCycleCollectionTraversalCallback</name>*</type> <name>aCallback</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <comment type="line">// mPendingLoads will get cleared out as the requests complete, so</comment>
  <comment type="line">// no need to worry about those here.</comment>
  <expr_stmt><expr><call><name><name>mMap</name>.<name>EnumerateRead</name></name><argument_list>(<argument><expr><name>ExternalResourceTraverser</name></expr></argument>, <argument><expr><name>aCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>ExternalResourceHider</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aKey</name></decl></param>,
                      <param><decl><type><name><name>nsExternalResourceMap</name>::<name>ExternalResource</name></name>*</type> <name>aData</name></decl></param>,
                      <param><decl><type><name>void</name>*</type> <name>aClosure</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>aData</name>-&gt;<name>mViewer</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mViewer</name>-&gt;<name>Hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsExternalResourceMap</name>::<name>HideViewers</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>mMap</name>.<name>EnumerateRead</name></name><argument_list>(<argument><expr><name>ExternalResourceHider</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>ExternalResourceShower</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aKey</name></decl></param>,
                       <param><decl><type><name><name>nsExternalResourceMap</name>::<name>ExternalResource</name></name>*</type> <name>aData</name></decl></param>,
                       <param><decl><type><name>void</name>*</type> <name>aClosure</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>aData</name>-&gt;<name>mViewer</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mViewer</name>-&gt;<name>Show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsExternalResourceMap</name>::<name>ShowViewers</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>mMap</name>.<name>EnumerateRead</name></name><argument_list>(<argument><expr><name>ExternalResourceShower</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsExternalResourceMap</name>::<name>AddExternalResource</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>,
                                           <param><decl><type><name>nsIDocumentViewer</name>*</type> <name>aViewer</name></decl></param>,
                                           <param><decl><type><name>nsILoadGroup</name>*</type> <name>aLoadGroup</name></decl></param>,
                                           <param><decl><type><name>nsIDocument</name>*</type> <name>aDisplayDocument</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr>"Unexpected call"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr>(<name>aViewer</name> &amp;&amp; <name>aLoadGroup</name>) || (!<name>aViewer</name> &amp;&amp; !<name>aLoadGroup</name>)</expr></argument>,
                  <argument><expr>"Must have both or neither"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>PendingLoad</name></expr></argument>&gt;</argument_list></name></type> <name>load</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mPendingLoads</name>.<name>Get</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mPendingLoads</name>.<name>Remove</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></type> <name>doc</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>aViewer</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>doc</name> = <call><name><name>aViewer</name>-&gt;<name>GetDocument</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr>"Must have a document"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXULDocument</name></expr></argument>&gt;</argument_list></name></type> <name>xulDoc</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>xulDoc</name></expr>)</condition><then> <block>{
      <comment type="line">// We don't handle XUL stuff here yet.</comment>
      <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_NOT_AVAILABLE</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>doc</name>-&gt;<name>SetDisplayDocument</name></name><argument_list>(<argument><expr><name>aDisplayDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Make sure that hiding our viewer will tear down its presentation.</comment>
      <expr_stmt><expr><call><name><name>aViewer</name>-&gt;<name>SetSticky</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>rv</name> = <call><name><name>aViewer</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><call><name>nsIntRect</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>rv</name> = <call><name><name>aViewer</name>-&gt;<name>Open</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></else></if>
    
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>doc</name> = <name>nsnull</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>aViewer</name> = <name>nsnull</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>aLoadGroup</name> = <name>nsnull</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <decl_stmt><decl><type><name>ExternalResource</name>*</type> <name>newResource</name> <init>= <expr>new <call><name>ExternalResource</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>newResource</name> &amp;&amp; !<call><name><name>mMap</name>.<name>Put</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><name>newResource</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <name>newResource</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>newResource</name> = <name>nsnull</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <if>if <condition>(<expr><name>newResource</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name><name>newResource</name>-&gt;<name>mDocument</name></name> = <name>doc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newResource</name>-&gt;<name>mViewer</name></name> = <name>aViewer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newResource</name>-&gt;<name>mLoadGroup</name></name> = <name>aLoadGroup</name></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><specifier>const</specifier> <name><name>nsTArray</name><argument_list>&lt; <argument><expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIObserver</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> &amp;</type> <name>obs</name> <init>= <expr><call><name><name>load</name>-&gt;<name>Observers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>obs</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <expr_stmt><expr><name><name>obs</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<call><name>Observe</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr>"external-resource-document-created"</expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<macro><name>NS_IMPL_ISUPPORTS2</name><argument_list>(<argument>nsExternalResourceMap::PendingLoad</argument>,
                   <argument>nsIStreamListener</argument>,
                   <argument>nsIRequestObserver</argument>)</argument_list></macro>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsExternalResourceMap</name>::<name>PendingLoad</name>::<name>OnStartRequest</name></name><parameter_list>(<param><decl><type><name>nsIRequest</name> *</type><name>aRequest</name></decl></param>,
                                                   <param><decl><type><name>nsISupports</name> *</type><name>aContext</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsExternalResourceMap</name>&amp;</type> <name>map</name> <init>= <expr><call><name><name>mDisplayDocument</name>-&gt;<name>ExternalResourceMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name><name>map</name>.<name>HaveShutDown</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_BINDING_ABORTED</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocumentViewer</name></expr></argument>&gt;</argument_list></name></type> <name>viewer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILoadGroup</name></expr></argument>&gt;</argument_list></name></type> <name>loadGroup</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>SetupViewer</name><argument_list>(<argument><expr><name>aRequest</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>viewer</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>loadGroup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// Make sure to do this no matter what</comment>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv2</name> <init>= <expr><call><name><name>map</name>.<name>AddExternalResource</name></name><argument_list>(<argument><expr><name>mURI</name></expr></argument>, <argument><expr><name>viewer</name></expr></argument>, <argument><expr><name>loadGroup</name></expr></argument>,
                                         <argument><expr><name>mDisplayDocument</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mTargetListener</name> = <name>nsnull</name></expr>;</expr_stmt>
    <return>return <expr><name>rv2</name></expr>;</return>
  }</block></then></if>
  
  <return>return <expr><call><name><name>mTargetListener</name>-&gt;<name>OnStartRequest</name></name><argument_list>(<argument><expr><name>aRequest</name></expr></argument>, <argument><expr><name>aContext</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsExternalResourceMap</name>::<name>PendingLoad</name>::<name>SetupViewer</name></name><parameter_list>(<param><decl><type><name>nsIRequest</name>*</type> <name>aRequest</name></decl></param>,
                                                <param><decl><type><name>nsIDocumentViewer</name>**</type> <name>aViewer</name></decl></param>,
                                                <param><decl><type><name>nsILoadGroup</name>**</type> <name>aLoadGroup</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr>!<name>mTargetListener</name></expr></argument>, <argument><expr>"Unexpected call to OnStartRequest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aViewer</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aLoadGroup</name> = <name>nsnull</name></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIChannel</name></expr></argument>&gt;</argument_list></name></type> <name>chan</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aRequest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>chan</name></expr></argument>, <argument><expr><name>NS_ERROR_UNEXPECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIHttpChannel</name></expr></argument>&gt;</argument_list></name></type> <name>httpChannel</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aRequest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>httpChannel</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRBool</name></type> <name>requestSucceeded</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name><name>httpChannel</name>-&gt;<name>GetRequestSucceeded</name></name><argument_list>(<argument><expr>&amp;<name>requestSucceeded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> ||
        !<name>requestSucceeded</name></expr>)</condition><then> <block>{
      <comment type="line">// Bail out on this load, since it looks like we have an HTTP error page</comment>
      <return>return <expr><name>NS_BINDING_ABORTED</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>
 
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>type</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>chan</name>-&gt;<name>GetContentType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILoadGroup</name></expr></argument>&gt;</argument_list></name></type> <name>loadGroup</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>chan</name>-&gt;<name>GetLoadGroup</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>loadGroup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Give this document its own loadgroup</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILoadGroup</name></expr></argument>&gt;</argument_list></name></type> <name>newLoadGroup</name> <init>=
        <expr><call><name>do_CreateInstance</name><argument_list>(<argument><expr><name>NS_LOADGROUP_CONTRACTID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>newLoadGroup</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>newLoadGroup</name>-&gt;<name>SetLoadGroup</name></name><argument_list>(<argument><expr><name>loadGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIInterfaceRequestor</name></expr></argument>&gt;</argument_list></name></type> <name>callbacks</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>loadGroup</name>-&gt;<name>GetNotificationCallbacks</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIInterfaceRequestor</name></expr></argument>&gt;</argument_list></name></type> <name>newCallbacks</name> <init>=
    <expr>new <call><name>LoadgroupCallbacks</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>newLoadGroup</name>-&gt;<name>SetNotificationCallbacks</name></name><argument_list>(<argument><expr><name>newCallbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// This is some serious hackery cribbed from docshell</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsICategoryManager</name></expr></argument>&gt;</argument_list></name></type> <name>catMan</name> <init>=
    <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_CATEGORYMANAGER_CONTRACTID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>catMan</name></expr></argument>, <argument><expr><name>NS_ERROR_NOT_AVAILABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>nsXPIDLCString</name></type> <name>contractId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>catMan</name>-&gt;<name>GetCategoryEntry</name></name><argument_list>(<argument><expr>"Gecko-Content-Viewers"</expr></argument>, <argument><expr><call><name><name>type</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
                                         <argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>contractId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocumentLoaderFactory</name></expr></argument>&gt;</argument_list></name></type> <name>docLoaderFactory</name> <init>=
    <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>contractId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>docLoaderFactory</name></expr></argument>, <argument><expr><name>NS_ERROR_NOT_AVAILABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContentViewer</name></expr></argument>&gt;</argument_list></name></type> <name>viewer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIStreamListener</name></expr></argument>&gt;</argument_list></name></type> <name>listener</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>docLoaderFactory</name>-&gt;<name>CreateInstance</name></name><argument_list>(<argument><expr>"external-resource"</expr></argument>, <argument><expr><name>chan</name></expr></argument>, <argument><expr><name>newLoadGroup</name></expr></argument>,
                                        <argument><expr><call><name><name>type</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                                        <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>viewer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocumentViewer</name></expr></argument>&gt;</argument_list></name></type> <name>docViewer</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>viewer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>docViewer</name></expr></argument>, <argument><expr><name>NS_ERROR_UNEXPECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIParser</name></expr></argument>&gt;</argument_list></name></type> <name>parser</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>parser</name></expr>)</condition><then> <block>{
    <comment type="line" format="doxygen">/// We don't want to deal with the various fake documents yet</comment>
    <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// We can't handle HTML and other weird things here yet.</comment>
  <decl_stmt><decl><type><name>nsIContentSink</name>*</type> <name>sink</name> <init>= <expr><call><name><name>parser</name>-&gt;<name>GetContentSink</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXMLContentSink</name></expr></argument>&gt;</argument_list></name></type> <name>xmlSink</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>sink</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>xmlSink</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>listener</name>.<name>swap</name></name><argument_list>(<argument><expr><name>mTargetListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>docViewer</name>.<name>swap</name></name><argument_list>(<argument><expr>*<name>aViewer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>newLoadGroup</name>.<name>swap</name></name><argument_list>(<argument><expr>*<name>aLoadGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsExternalResourceMap</name>::<name>PendingLoad</name>::<name>OnDataAvailable</name></name><parameter_list>(<param><decl><type><name>nsIRequest</name>*</type> <name>aRequest</name></decl></param>,
                                                    <param><decl><type><name>nsISupports</name>*</type> <name>aContext</name></decl></param>,
                                                    <param><decl><type><name>nsIInputStream</name>*</type> <name>aStream</name></decl></param>,
                                                    <param><decl><type><name>PRUint32</name></type> <name>aOffset</name></decl></param>,
                                                    <param><decl><type><name>PRUint32</name></type> <name>aCount</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>mTargetListener</name></expr></argument>, <argument><expr>"Shouldn't be getting called!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name><name>mDisplayDocument</name>-&gt;<name>ExternalResourceMap</name></name><argument_list>()</argument_list></call>.<call><name>HaveShutDown</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_BINDING_ABORTED</name></expr>;</return>
  }</block></then></if>
  <return>return <expr><call><name><name>mTargetListener</name>-&gt;<name>OnDataAvailable</name></name><argument_list>(<argument><expr><name>aRequest</name></expr></argument>, <argument><expr><name>aContext</name></expr></argument>, <argument><expr><name>aStream</name></expr></argument>, <argument><expr><name>aOffset</name></expr></argument>,
                                          <argument><expr><name>aCount</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsExternalResourceMap</name>::<name>PendingLoad</name>::<name>OnStopRequest</name></name><parameter_list>(<param><decl><type><name>nsIRequest</name>*</type> <name>aRequest</name></decl></param>,
                                                  <param><decl><type><name>nsISupports</name>*</type> <name>aContext</name></decl></param>,
                                                  <param><decl><type><name>nsresult</name></type> <name>aStatus</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// mTargetListener might be null if SetupViewer or AddExternalResource failed</comment>
  <if>if <condition>(<expr><name>mTargetListener</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIStreamListener</name></expr></argument>&gt;</argument_list></name></type> <name>listener</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mTargetListener</name>.<name>swap</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>listener</name>-&gt;<name>OnStopRequest</name></name><argument_list>(<argument><expr><name>aRequest</name></expr></argument>, <argument><expr><name>aContext</name></expr></argument>, <argument><expr><name>aStatus</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsExternalResourceMap</name>::<name>PendingLoad</name>::<name>StartLoad</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>,
                                              <param><decl><type><name>nsINode</name>*</type> <name>aRequestingNode</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr>"Must have a URI"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aRequestingNode</name></expr></argument>, <argument><expr>"Must have a node"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Time to start a load.  First, the security checks.</comment>

  <decl_stmt><decl><type><name>nsIPrincipal</name>*</type> <name>requestingPrincipal</name> <init>= <expr><call><name><name>aRequestingNode</name>-&gt;<name>NodePrincipal</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>GetSecurityManager</name></name><argument_list>()</argument_list></call>-&gt;
    <call><name>CheckLoadURIWithPrincipal</name><argument_list>(<argument><expr><name>requestingPrincipal</name></expr></argument>, <argument><expr><name>aURI</name></expr></argument>,
                              <argument><expr><name><name>nsIScriptSecurityManager</name>::<name>STANDARD</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>rv</name> = <call><name><name>requestingPrincipal</name>-&gt;<name>CheckMayLoad</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRInt16</name></type> <name>shouldLoad</name> <init>= <expr><name><name>nsIContentPolicy</name>::<name>ACCEPT</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name>NS_CheckContentLoadPolicy</name><argument_list>(<argument><expr><name><name>nsIContentPolicy</name>::<name>TYPE_OTHER</name></name></expr></argument>,
                                 <argument><expr><name>aURI</name></expr></argument>,
                                 <argument><expr><name>requestingPrincipal</name></expr></argument>,
                                 <argument><expr><name>aRequestingNode</name></expr></argument>,
                                 <argument><expr><call><name>EmptyCString</name><argument_list>()</argument_list></call></expr></argument>, <comment type="line">//mime guess</comment>
                                 <argument><expr><name>nsnull</name></expr></argument>,         <comment type="line">//extra</comment>
                                 <argument><expr>&amp;<name>shouldLoad</name></expr></argument>,
                                 <argument><expr><call><name><name>nsContentUtils</name>::<name>GetContentPolicy</name></name><argument_list>()</argument_list></call></expr></argument>,
                                 <argument><expr><call><name><name>nsContentUtils</name>::<name>GetSecurityManager</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>rv</name></expr>;</return></then></if>
  <if>if <condition>(<expr><call><name>NS_CP_REJECTED</name><argument_list>(<argument><expr><name>shouldLoad</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// Disallowed by content policy</comment>
    <return>return <expr><name>NS_ERROR_CONTENT_BLOCKED</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>doc</name> <init>= <expr><call><name><name>aRequestingNode</name>-&gt;<name>GetOwnerDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>doc</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_NOT_AVAILABLE</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIInterfaceRequestor</name></expr></argument>&gt;</argument_list></name></type> <name>req</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>GetSameOriginChecker</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILoadGroup</name></expr></argument>&gt;</argument_list></name></type> <name>loadGroup</name> <init>= <expr><call><name><name>doc</name>-&gt;<name>GetDocumentLoadGroup</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIChannel</name></expr></argument>&gt;</argument_list></name></type> <name>channel</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name>NS_NewChannel</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aURI</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>loadGroup</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mURI</name> = <name>aURI</name></expr>;</expr_stmt>

  <return>return <expr><call><name><name>channel</name>-&gt;<name>AsyncOpen</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<macro><name>NS_IMPL_ISUPPORTS1</name><argument_list>(<argument>nsExternalResourceMap::LoadgroupCallbacks</argument>,
                   <argument>nsIInterfaceRequestor</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPL_SHIM</name><parameter_list>(<param><type><name>_i</name></type></param>)</parameter_list></cpp:macro> \
  <cpp:value>NS_IMPL_ISUPPORTS1(nsExternalResourceMap::LoadgroupCallbacks::_i##Shim, _i)</cpp:value></cpp:define>

<macro><name>IMPL_SHIM</name><argument_list>(<argument>nsILoadContext</argument>)</argument_list></macro>
<macro><name>IMPL_SHIM</name><argument_list>(<argument>nsIProgressEventSink</argument>)</argument_list></macro>
<macro><name>IMPL_SHIM</name><argument_list>(<argument>nsIChannelEventSink</argument>)</argument_list></macro>
<macro><name>IMPL_SHIM</name><argument_list>(<argument>nsISecurityEventSink</argument>)</argument_list></macro>
<macro><name>IMPL_SHIM</name><argument_list>(<argument>nsIApplicationCacheContainer</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IMPL_SHIM</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IS</name><parameter_list>(<param><type><name>_i</name></type></param>)</parameter_list></cpp:macro> <cpp:value>aIID.Equals(NS_GET_IID(_i))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRY_SHIM</name><parameter_list>(<param><type><name>_i</name></type></param>)</parameter_list></cpp:macro>                                                       \
  <cpp:value>PR_BEGIN_MACRO                                                           \
    if (IID_IS(_i)) {                                                      \
      nsCOMPtr&lt;_i&gt; real = do_GetInterface(mCallbacks);                     \
      if (!real) {                                                         \
        return NS_NOINTERFACE;                                             \
      }                                                                    \
      nsCOMPtr&lt;_i&gt; shim = new _i##Shim(this, real);                        \
      if (!shim) {                                                         \
        return NS_ERROR_OUT_OF_MEMORY;                                     \
      }                                                                    \
      *aSink = shim.forget().get();                                        \
      return NS_OK;                                                        \
    }                                                                      \
  PR_END_MACRO</cpp:value></cpp:define>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsExternalResourceMap</name>::<name>LoadgroupCallbacks</name>::<name>GetInterface</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsIID</name> &amp;</type> <name>aIID</name></decl></param>,
                                                        <param><decl><type><name>void</name> **</type><name>aSink</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mCallbacks</name> &amp;&amp;
      (<call><name>IID_IS</name><argument_list>(<argument><expr><name>nsIPrompt</name></expr></argument>)</argument_list></call> || <call><name>IID_IS</name><argument_list>(<argument><expr><name>nsIAuthPrompt</name></expr></argument>)</argument_list></call> || <call><name>IID_IS</name><argument_list>(<argument><expr><name>nsIAuthPrompt2</name></expr></argument>)</argument_list></call> ||
       <call><name>IID_IS</name><argument_list>(<argument><expr><name>nsITabChild</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
    <return>return <expr><call><name><name>mCallbacks</name>-&gt;<name>GetInterface</name></name><argument_list>(<argument><expr><name>aIID</name></expr></argument>, <argument><expr><name>aSink</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr>*<name>aSink</name> = <name>nsnull</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>TRY_SHIM</name><argument_list>(<argument><expr><name>nsILoadContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TRY_SHIM</name><argument_list>(<argument><expr><name>nsIProgressEventSink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TRY_SHIM</name><argument_list>(<argument><expr><name>nsIChannelEventSink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TRY_SHIM</name><argument_list>(<argument><expr><name>nsISecurityEventSink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TRY_SHIM</name><argument_list>(<argument><expr><name>nsIApplicationCacheContainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
  <return>return <expr><name>NS_NOINTERFACE</name></expr>;</return>
}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TRY_SHIM</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IID_IS</name></cpp:undef>

<destructor><name><name>nsExternalResourceMap</name>::<name>ExternalResource</name>::~<name>ExternalResource</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mViewer</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mViewer</name>-&gt;<name>Close</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mViewer</name>-&gt;<name>Destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></destructor>

<comment type="line">// ==================================================================</comment>
<comment type="line">// =</comment>
<comment type="line">// ==================================================================</comment>

<comment type="line">// If we ever have an nsIDocumentObserver notification for stylesheet title</comment>
<comment type="line">// changes, we could make this inherit from nsDOMStringList instead of</comment>
<comment type="line">// reimplementing nsIDOMDOMStringList.</comment>
<class>class <name>nsDOMStyleSheetSetList</name> <super>: <specifier>public</specifier> <name>nsIDOMDOMStringList</name></super>
                          
<block>{<private type="default">
</private><public>public:
  <function_decl><type><name>NS_DECL_ISUPPORTS</name>

  <name>NS_DECL_NSIDOMDOMSTRINGLIST</name></type>

  <name>nsDOMStyleSheetSetList</name><parameter_list>(<param><decl><type><name>nsIDocument</name>*</type> <name>aDocument</name></decl></param>)</parameter_list>;</function_decl>

  <function><type><name>void</name></type> <name>Disconnect</name><parameter_list>()</parameter_list>
  <block>{
    <expr_stmt><expr><name>mDocument</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></function>

</public><protected>protected:
  <comment type="line">// Rebuild our list of style sets</comment>
  <function_decl><type><name>nsresult</name></type> <name>GetSets</name><parameter_list>(<param><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsString</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aStyleSets</name></decl></param>)</parameter_list>;</function_decl>
  
  <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>mDocument</name></decl>;</decl_stmt>  <comment type="line">// Our document; weak ref.  It'll let us know if it</comment>
                           <comment type="line">// dies.</comment>
</protected>}</block>;</class>

<macro><name>NS_IMPL_ADDREF</name><argument_list>(<argument>nsDOMStyleSheetSetList</argument>)</argument_list></macro>
<macro><name>NS_IMPL_RELEASE</name><argument_list>(<argument>nsDOMStyleSheetSetList</argument>)</argument_list></macro>
<macro><name>NS_INTERFACE_TABLE_HEAD</name><argument_list>(<argument>nsDOMStyleSheetSetList</argument>)</argument_list></macro>
  <macro><name>NS_OFFSET_AND_INTERFACE_TABLE_BEGIN</name><argument_list>(<argument>nsDOMStyleSheetSetList</argument>)</argument_list></macro>
    <macro><name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument>nsDOMStyleSheetSetList</argument>, <argument>nsIDOMDOMStringList</argument>)</argument_list></macro>
  <decl_stmt><decl><type><name>NS_OFFSET_AND_INTERFACE_TABLE_END</name>
  <name>NS_OFFSET_AND_INTERFACE_TABLE_TO_MAP_SEGUE</name></type>
  <name>NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO</name><argument_list>(<argument><expr><name>DOMStringList</name></expr></argument>)</argument_list>
<name>NS_INTERFACE_MAP_END</name>

<name><name>nsDOMStyleSheetSetList</name>::<name>nsDOMStyleSheetSetList</name></name><argument_list>(<argument><expr><name>nsIDocument</name>* <name>aDocument</name></expr></argument>)</argument_list>
  <range>: <macro><name>mDocument</name><argument_list>(<argument>aDocument</argument>)</argument_list></macro>
<expr><block>{
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>mDocument</name></expr></argument>, <argument><expr>"Must have document!"</expr></argument>)</argument_list></call></expr>;
}</block>

<name>NS_IMETHODIMP</name>
<macro><name>nsDOMStyleSheetSetList</name></macro><name>::<name>Item</name></name>(<name>PRUint32</name> <name>aIndex</name>, <name>nsAString</name>&amp; <name>aResult</name>)
<block>{
  <expr><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsString</name></expr></argument>&gt;</argument_list></name> <name>styleSets</name></expr>;
  <expr><name>nsresult</name> <name>rv</name> = <call><name>GetSets</name><argument_list>(<argument><expr><name>styleSets</name></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;
  
  <if>if <condition>(<expr><name>aIndex</name> &gt;= <call><name><name>styleSets</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <expr_stmt><expr><block>{
    <expr><call><name>SetDOMStringToNull</name><argument_list>(<argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;
  }</block></expr></expr_stmt></then> <else>else <expr_stmt><expr><block>{
    <expr><name>aResult</name> = <name><name>styleSets</name><index>[<expr><name>aIndex</name></expr>]</index></name></expr>;
  }</block></expr></expr_stmt></else></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMStyleSheetSetList</name>::<name>GetLength</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>aLength</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsString</name></expr></argument>&gt;</argument_list></name></type> <name>styleSets</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetSets</name><argument_list>(<argument><expr><name>styleSets</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr>*<name>aLength</name> = <call><name><name>styleSets</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMStyleSheetSetList</name>::<name>Contains</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aString</name></decl></param>, <param><decl><type><name>PRBool</name> *</type><name>aResult</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsString</name></expr></argument>&gt;</argument_list></name></type> <name>styleSets</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetSets</name><argument_list>(<argument><expr><name>styleSets</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr>*<name>aResult</name> = <call><name><name>styleSets</name>.<name>Contains</name></name><argument_list>(<argument><expr><name>aString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDOMStyleSheetSetList</name>::<name>GetSets</name></name><parameter_list>(<param><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsString</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aStyleSets</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mDocument</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return> <comment type="line">// Spec says "no exceptions", and we have no style sets if we</comment>
                  <comment type="line">// have no document, for sure</comment>
  }</block></then></if>
  
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>count</name> <init>= <expr><call><name><name>mDocument</name>-&gt;<name>GetNumberOfStyleSheets</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>title</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>temp</name></decl>;</decl_stmt>
  <for>for (<init><decl><type><name>PRInt32</name></type> <name>index</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>index</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsIStyleSheet</name>*</type> <name>sheet</name> <init>= <expr><call><name><name>mDocument</name>-&gt;<name>GetStyleSheetAt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>sheet</name></expr></argument>, <argument><expr>"Null sheet in sheet list!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sheet</name>-&gt;<name>GetTitle</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name><name>title</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>aStyleSets</name>.<name>Contains</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call> &amp;&amp;
        !<call><name><name>aStyleSets</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>
  }</block></for>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// ==================================================================</comment>
<comment type="line">// =</comment>
<comment type="line">// ==================================================================</comment>

<class>class <name>nsDOMImplementation</name> <super>: <specifier>public</specifier> <name>nsIDOMDOMImplementation</name></super>
<block>{<private type="default">
</private><public>public:
  <constructor_decl><name>nsDOMImplementation</name><parameter_list>(<param><decl><type><name>nsIScriptGlobalObject</name>*</type> <name>aScriptObject</name></decl></param>,
                      <param><decl><type><name>nsIURI</name>*</type> <name>aDocumentURI</name></decl></param>,
                      <param><decl><type><name>nsIURI</name>*</type> <name>aBaseURI</name></decl></param>,
                      <param><decl><type><name>nsIPrincipal</name>*</type> <name>aPrincipal</name></decl></param>)</parameter_list>;</constructor_decl>
  <destructor_decl><specifier>virtual</specifier> <name>~<name>nsDOMImplementation</name></name><parameter_list>()</parameter_list>;</destructor_decl>

  <macro><name>NS_DECL_ISUPPORTS</name></macro>

  <comment type="line">// nsIDOMDOMImplementation</comment>
  <macro><name>NS_DECL_NSIDOMDOMIMPLEMENTATION</name></macro>

</public><protected>protected:
  <decl_stmt><decl><type><name>nsWeakPtr</name></type> <name>mScriptObject</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>mDocumentURI</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>mBaseURI</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrincipal</name></expr></argument>&gt;</argument_list></name></type> <name>mPrincipal</name></decl>;</decl_stmt>
</protected>}</block>;</class>


<function><type><name>nsresult</name></type>
<name>NS_NewDOMImplementation</name><parameter_list>(<param><decl><type><name>nsIDOMDOMImplementation</name>**</type> <name>aInstancePtrResult</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aInstancePtrResult</name> = new <call><name>nsDOMImplementation</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!*<name>aInstancePtrResult</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aInstancePtrResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<constructor><name><name>nsDOMImplementation</name>::<name>nsDOMImplementation</name></name><parameter_list>(<param><decl><type><name>nsIScriptGlobalObject</name>*</type> <name>aScriptObject</name></decl></param>,
                                         <param><decl><type><name>nsIURI</name>*</type> <name>aDocumentURI</name></decl></param>,
                                         <param><decl><type><name>nsIURI</name>*</type> <name>aBaseURI</name></decl></param>,
                                         <param><decl><type><name>nsIPrincipal</name>*</type> <name>aPrincipal</name></decl></param>)</parameter_list>
  <member_list>: <call><name>mScriptObject</name><argument_list>(<argument><expr><call><name>do_GetWeakReference</name><argument_list>(<argument><expr><name>aScriptObject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>,
    <call><name>mDocumentURI</name><argument_list>(<argument><expr><name>aDocumentURI</name></expr></argument>)</argument_list></call>,
    <call><name>mBaseURI</name><argument_list>(<argument><expr><name>aBaseURI</name></expr></argument>)</argument_list></call>,
    <call><name>mPrincipal</name><argument_list>(<argument><expr><name>aPrincipal</name></expr></argument>)</argument_list></call>
</member_list><block>{
}</block></constructor>

<destructor><name><name>nsDOMImplementation</name>::~<name>nsDOMImplementation</name></name><parameter_list>()</parameter_list>
<block>{
}</block></destructor>

<macro><name>DOMCI_DATA</name><argument_list>(<argument>DOMImplementation</argument>, <argument>nsDOMImplementation</argument>)</argument_list></macro>

<comment type="line">// QueryInterface implementation for nsDOMImplementation</comment>
<macro><name>NS_INTERFACE_MAP_BEGIN</name><argument_list>(<argument>nsDOMImplementation</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsIDOMDOMImplementation</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_MAP_ENTRY_AMBIGUOUS</name><argument_list>(<argument>nsISupports</argument>, <argument>nsIDOMDOMImplementation</argument>)</argument_list></macro>
  <macro><name>NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO</name><argument_list>(<argument>DOMImplementation</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>NS_INTERFACE_MAP_END</name></type>


<name>NS_IMPL_ADDREF</name><argument_list>(<argument><expr><name>nsDOMImplementation</name></expr></argument>)</argument_list>
<name>NS_IMPL_RELEASE</name><argument_list>(<argument><expr><name>nsDOMImplementation</name></expr></argument>)</argument_list>


<name>NS_IMETHODIMP</name>
<name><name>nsDOMImplementation</name>::<name>HasFeature</name></name><argument_list>(<argument><expr>const <name>nsAString</name>&amp; <name>aFeature</name></expr></argument>,
                                <argument><expr>const <name>nsAString</name>&amp; <name>aVersion</name></expr></argument>,
                                <argument><expr><name>PRBool</name>* <name>aReturn</name></expr></argument>)</argument_list>
<argument_list>{
  return <argument><expr><call><name><name>nsGenericElement</name>::<name>InternalIsSupported</name></name><argument_list>(
           <argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIDOMDOMImplementation</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name>aFeature</name></expr></argument>, <argument><expr><name>aVersion</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

<name>NS_IMETHODIMP</name>
<name><name>nsDOMImplementation</name>::<name>CreateDocumentType</name></name><argument_list>(<argument><expr>const <name>nsAString</name>&amp; <name>aQualifiedName</name></expr></argument>,
                                        <argument><expr>const <name>nsAString</name>&amp; <name>aPublicId</name></expr></argument>,
                                        <argument><expr>const <name>nsAString</name>&amp; <name>aSystemId</name></expr></argument>,
                                        <argument><expr><name>nsIDOMDocumentType</name>** <name>aReturn</name></expr></argument>)</argument_list>
<argument_list>{
  <argument><expr>*<name>aReturn</name> = <name>nsnull</name></expr></argument>;

  <argument><expr><name>nsresult</name> <name>rv</name> = <call><name><name>nsContentUtils</name>::<name>CheckQName</name></name><argument_list>(<argument><expr><name>aQualifiedName</name></expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>;

  <argument><expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAtom</name></expr></argument>&gt;</argument_list></name> <name>name</name> = <call><name>do_GetAtom</name><argument_list>(<argument><expr><name>aQualifiedName</name></expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr></argument>;

  <comment type="line">// Indicate that there is no internal subset (not just an empty one)</comment>
  <argument><expr><name>nsAutoString</name> <name>voidString</name></expr></argument>;
  <argument><expr><call><name><name>voidString</name>.<name>SetIsVoid</name></name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></argument>;
  return <argument><expr><call><name>NS_NewDOMDocumentType</name><argument_list>(<argument><expr><name>aReturn</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>mPrincipal</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                               <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aPublicId</name></expr></argument>, <argument><expr><name>aSystemId</name></expr></argument>, <argument><expr><name>voidString</name></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

<name>NS_IMETHODIMP</name>
<name><name>nsDOMImplementation</name>::<name>CreateDocument</name></name><argument_list>(<argument><expr>const <name>nsAString</name>&amp; <name>aNamespaceURI</name></expr></argument>,
                                    <argument><expr>const <name>nsAString</name>&amp; <name>aQualifiedName</name></expr></argument>,
                                    <argument><expr><name>nsIDOMDocumentType</name>* <name>aDoctype</name></expr></argument>,
                                    <argument><expr><name>nsIDOMDocument</name>** <name>aReturn</name></expr></argument>)</argument_list>
<argument_list>{
  <argument><expr>*<name>aReturn</name> = <name>nsnull</name></expr></argument>;

  <argument><expr><name>nsresult</name> <name>rv</name></expr></argument>;
  if <argument><expr>(!<call><name><name>aQualifiedName</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call>) <block>{
    <expr><name>nsIParserService</name> *<name>parserService</name> = <call><name><name>nsContentUtils</name>::<name>GetParserService</name></name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>parserService</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;

    <expr>const <name>nsAFlatString</name>&amp; <name>qName</name> = <call><name>PromiseFlatString</name><argument_list>(<argument><expr><name>aQualifiedName</name></expr></argument>)</argument_list></call></expr>;
    <expr>const <name>PRUnichar</name> *<name>colon</name></expr>;
    <expr><name>rv</name> = <call><name><name>parserService</name>-&gt;<name>CheckQName</name></name><argument_list>(<argument><expr><name>qName</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr>&amp;<name>colon</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;

    <if>if <condition>(<expr><name>colon</name> &amp;&amp;
        (<call><name>DOMStringIsNull</name><argument_list>(<argument><expr><name>aNamespaceURI</name></expr></argument>)</argument_list></call> ||
         (<call><name>Substring</name><argument_list>(<argument><expr><call><name><name>qName</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>colon</name></expr></argument>)</argument_list></call>.<call><name>EqualsLiteral</name><argument_list>(<argument><expr>"xml"</expr></argument>)</argument_list></call> &amp;&amp;
          !<call><name><name>aNamespaceURI</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"http://www.w3.org/XML/1998/namespace"</expr></argument>)</argument_list></call>))</expr>)</condition><then> <expr_stmt><expr><block>{
      <return>return <expr><name>NS_ERROR_DOM_NAMESPACE_ERR</name></expr>;</return>
    }</block>
  }</expr></expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name>DOMStringIsNull</name><argument_list>(<argument><expr><name>aQualifiedName</name></expr></argument>)</argument_list></call> &amp;&amp;
           !<call><name>DOMStringIsNull</name><argument_list>(<argument><expr><name>aNamespaceURI</name></expr></argument>)</argument_list></call></expr>)</condition><then> <expr_stmt><expr><block>{
    <return>return <expr><name>NS_ERROR_DOM_NAMESPACE_ERR</name></expr>;</return>
  }</block></expr></expr_stmt></then></if></else></if>

  <if>if <condition>(<expr><name>aDoctype</name></expr>)</condition><then> <expr_stmt><expr><block>{
    <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocument</name></expr></argument>&gt;</argument_list></name> <name>owner</name></expr>;
    <call><name><name>aDoctype</name>-&gt;<name>GetOwnerDocument</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt></then></if></block></expr></argument>
    <if>if <condition>(<expr><name>owner</name></expr>)</condition><then> <expr_stmt><expr><block>{
      <return>return <expr><name>NS_ERROR_DOM_WRONG_DOCUMENT_ERR</name></expr>;</return>
    }</block>
  }

  <name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScriptGlobalObject</name></expr></argument>&gt;</argument_list></name> <name>scriptHandlingObject</name> =
    <call><name>do_QueryReferent</name><argument_list>(<argument><expr><name>mScriptObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></argument_list></decl></decl_stmt>
  
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr>!<name>mScriptObject</name> || <name>scriptHandlingObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>nsContentUtils</name>::<name>CreateDocument</name></name><argument_list>(<argument><expr><name>aNamespaceURI</name></expr></argument>, <argument><expr><name>aQualifiedName</name></expr></argument>, <argument><expr><name>aDoctype</name></expr></argument>,
                                        <argument><expr><name>mDocumentURI</name></expr></argument>, <argument><expr><name>mBaseURI</name></expr></argument>, <argument><expr><name>mPrincipal</name></expr></argument>,
                                        <argument><expr><name>scriptHandlingObject</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsDOMImplementation</name></macro><expr_stmt><expr><name>::<name>CreateHTMLDocument</name></name>(const <name>nsAString</name>&amp; <name>aTitle</name>,
                                        <name>nsIDOMDocument</name>** <name>aReturn</name>)
<block>{
  <expr>*<name>aReturn</name> = <name>NULL</name></expr>;

  <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocumentType</name></expr></argument>&gt;</argument_list></name> <name>doctype</name></expr>;
  <comment type="line">// Indicate that there is no internal subset (not just an empty one)</comment>
  <expr><name>nsAutoString</name> <name>voidString</name></expr>;
  <expr><call><name><name>voidString</name>.<name>SetIsVoid</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;
  <expr><name>nsresult</name> <name>rv</name> = <call><name>NS_NewDOMDocumentType</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>doctype</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>NULL</name></expr></argument>, <comment type="line">// aNodeInfoManager</comment>
                                      <argument><expr><name>mPrincipal</name></expr></argument>, <comment type="line">// aPrincipal</comment>
                                      <argument><expr><name><name>nsGkAtoms</name>::<name>html</name></name></expr></argument>, <comment type="line">// aName</comment>
                                      <argument><expr><name>NULL</name></expr></argument>, <comment type="line">// aEntities</comment>
                                      <argument><expr><name>NULL</name></expr></argument>, <comment type="line">// aNotations</comment>
                                      <argument><expr><call><name>EmptyString</name><argument_list>()</argument_list></call></expr></argument>, <comment type="line">// aPublicId</comment>
                                      <argument><expr><call><name>EmptyString</name><argument_list>()</argument_list></call></expr></argument>, <comment type="line">// aSystemId</comment>
                                      <argument><expr><name>voidString</name></expr></argument>)</argument_list></call></expr>; <comment type="line">// aInternalSubset</comment>
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;


  <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScriptGlobalObject</name></expr></argument>&gt;</argument_list></name> <name>scriptHandlingObject</name> =
    <call><name>do_QueryReferent</name><argument_list>(<argument><expr><name>mScriptObject</name></expr></argument>)</argument_list></call></expr>;

  <expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr>!<name>mScriptObject</name> || <name>scriptHandlingObject</name></expr></argument>)</argument_list></call></expr>;
                                                       
  <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocument</name></expr></argument>&gt;</argument_list></name> <name>document</name></expr>;
  <expr><name>rv</name> = <call><name><name>nsContentUtils</name>::<name>CreateDocument</name></name><argument_list>(<argument><expr><call><name>EmptyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>EmptyString</name><argument_list>()</argument_list></call></expr></argument>,
                                      <argument><expr><name>doctype</name></expr></argument>, <argument><expr><name>mDocumentURI</name></expr></argument>, <argument><expr><name>mBaseURI</name></expr></argument>,
                                      <argument><expr><name>mPrincipal</name></expr></argument>, <argument><expr><name>scriptHandlingObject</name></expr></argument>,
                                      <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;
  <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name> <name>doc</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;

  <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name> <name>root</name></expr>;
  <expr><name>rv</name> = <call><name><name>doc</name>-&gt;<name>CreateElem</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"html"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kNameSpaceID_XHTML</name></expr></argument>,
                       <argument><expr>false</expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>rv</name> = <call><name><name>doc</name>-&gt;<name>AppendChildTo</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;

  <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name> <name>head</name></expr>;
  <expr><name>rv</name> = <call><name><name>doc</name>-&gt;<name>CreateElem</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"head"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kNameSpaceID_XHTML</name></expr></argument>,
                       <argument><expr>false</expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>rv</name> = <call><name><name>root</name>-&gt;<name>AppendChildTo</name></name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;

  <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name> <name>title</name></expr>;
  <expr><name>rv</name> = <call><name><name>doc</name>-&gt;<name>CreateElem</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"title"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kNameSpaceID_XHTML</name></expr></argument>,
                       <argument><expr>false</expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>rv</name> = <call><name><name>head</name>-&gt;<name>AppendChildTo</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;

  <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name> <name>titleText</name></expr>;
  <expr><name>rv</name> = <call><name>NS_NewTextNode</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>titleText</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>doc</name>-&gt;<name>NodeInfoManager</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>rv</name> = <call><name><name>titleText</name>-&gt;<name>SetText</name></name><argument_list>(<argument><expr><name>aTitle</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>rv</name> = <call><name><name>title</name>-&gt;<name>AppendChildTo</name></name><argument_list>(<argument><expr><name>titleText</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;

  <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name> <name>body</name></expr>;
  <expr><name>rv</name> = <call><name><name>doc</name>-&gt;<name>CreateElem</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"body"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kNameSpaceID_XHTML</name></expr></argument>,
                       <argument><expr>false</expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>rv</name> = <call><name><name>root</name>-&gt;<name>AppendChildTo</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;

  <expr><call><name><name>document</name>.<name>forget</name></name><argument_list>(<argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></expr></expr_stmt>

<comment type="line">// ==================================================================</comment>
<comment type="line">// =</comment>
<comment type="line">// ==================================================================</comment>

  <comment type="line">// NOTE! nsDocument::operator new() zeroes out all members, so don't</comment>
  <comment type="line">// bother initializing members to 0.</comment>

<constructor><name><name>nsDocument</name>::<name>nsDocument</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>aContentType</name></decl></param>)</parameter_list>
  <member_list>: <call><name>nsIDocument</name><argument_list>()</argument_list></call>
  , <call><name>mAnimatingImages</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call>
</member_list><block>{
  <expr_stmt><expr><call><name>SetContentTypeInternal</name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>aContentType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef>
  <if>if <condition>(<expr>!<name>gDocumentLeakPRLog</name></expr>)</condition><then>
    <expr_stmt><expr><name>gDocumentLeakPRLog</name> = <call><name>PR_NewLogModule</name><argument_list>(<argument><expr>"DocumentLeak"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name>gDocumentLeakPRLog</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gDocumentLeakPRLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
           <argument><expr>("DOCUMENT %p created", <name>this</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr>!<name>gCspPRLog</name></expr>)</condition><then>
    <expr_stmt><expr><name>gCspPRLog</name> = <call><name>PR_NewLogModule</name><argument_list>(<argument><expr>"CSP"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// Start out mLastStyleSheetSet as null, per spec</comment>
  <expr_stmt><expr><call><name>SetDOMStringToNull</name><argument_list>(<argument><expr><name>mLastStyleSheetSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>ClearAllBoxObjects</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name>*</type> <name>aKey</name></decl></param>, <param><decl><type><name>nsPIBoxObject</name>*</type> <name>aBoxObject</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aUserArg</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aBoxObject</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>aBoxObject</name>-&gt;<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<destructor><name><name>nsDocument</name>::~<name>nsDocument</name></name><parameter_list>()</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef>
  <if>if <condition>(<expr><name>gDocumentLeakPRLog</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gDocumentLeakPRLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
           <argument><expr>("DOCUMENT %p destroyed", <name>this</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <expr_stmt><expr><call><name>nsCycleCollector_DEBUG_wasFreed</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIDocument</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>mInDestructor</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mInUnlinkOrDeletion</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

  <comment type="line">// Clear mObservers to keep it in sync with the mutationobserver list</comment>
  <expr_stmt><expr><call><name><name>mObservers</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>mStyleSheetSetList</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mStyleSheetSetList</name>-&gt;<name>Disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><name>mParentDocument</name> = <name>nsnull</name></expr>;</expr_stmt>

  <comment type="line">// Kill the subdocument map, doing this will release its strong</comment>
  <comment type="line">// references, if any.</comment>
  <if>if <condition>(<expr><name>mSubDocuments</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PL_DHashTableDestroy</name><argument_list>(<argument><expr><name>mSubDocuments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>mSubDocuments</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// Destroy link map now so we don't waste time removing</comment>
  <comment type="line">// links one by one</comment>
  <expr_stmt><expr><call><name>DestroyElementMaps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsAutoScriptBlocker</name></type> <name>scriptBlocker</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>indx</name></decl>;</decl_stmt> <comment type="line">// must be signed</comment>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>count</name> <init>= <expr><call><name><name>mChildren</name>.<name>ChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for (<init><expr><name>indx</name> = <call><name>PRInt32</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call> - 1</expr>;</init> <condition><expr><name>indx</name> &gt;= 0</expr>;</condition> <incr><expr>--<name>indx</name></expr></incr>) <block>{
    <expr_stmt><expr><call><name><name>mChildren</name>.<name>ChildAt</name></name><argument_list>(<argument><expr><name>indx</name></expr></argument>)</argument_list></call>-&gt;<call><name>UnbindFromTree</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mChildren</name>.<name>RemoveChildAt</name></name><argument_list>(<argument><expr><name>indx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><name>mFirstChild</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mCachedRootElement</name> = <name>nsnull</name></expr>;</expr_stmt>

  <comment type="line">// Let the stylesheets know we're going away</comment>
  <expr_stmt><expr><name>indx</name> = <call><name><name>mStyleSheets</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr>--<name>indx</name> &gt;= 0</expr>)</condition> <block>{
    <expr_stmt><expr><name><name>mStyleSheets</name><index>[<expr><name>indx</name></expr>]</index></name>-&gt;<call><name>SetOwningDocument</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
  <expr_stmt><expr><name>indx</name> = <call><name><name>mCatalogSheets</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr>--<name>indx</name> &gt;= 0</expr>)</condition> <block>{
    <expr_stmt><expr><name><name>mCatalogSheets</name><index>[<expr><name>indx</name></expr>]</index></name>-&gt;<call><name>SetOwningDocument</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
  <if>if <condition>(<expr><name>mAttrStyleSheet</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>mAttrStyleSheet</name>-&gt;<name>SetOwningDocument</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>mStyleAttrStyleSheet</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>mStyleAttrStyleSheet</name>-&gt;<name>SetOwningDocument</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name>mListenerManager</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mListenerManager</name>-&gt;<name>Disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><name>mScriptLoader</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mScriptLoader</name>-&gt;<name>DropDocumentReference</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><name>mCSSLoader</name></expr>)</condition><then> <block>{
    <comment type="line">// Could be null here if Init() failed</comment>
    <expr_stmt><expr><call><name><name>mCSSLoader</name>-&gt;<name>DropDocumentReference</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name>mCSSLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// XXX Ideally we'd do this cleanup in the nsIDocument destructor.</comment>
  <if>if <condition>(<expr><name>mNodeInfoManager</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mNodeInfoManager</name>-&gt;<name>DropDocumentReference</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name>mNodeInfoManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><name>mAttrStyleSheet</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mAttrStyleSheet</name>-&gt;<name>SetOwningDocument</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  
  <if>if <condition>(<expr><name>mStyleAttrStyleSheet</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mStyleAttrStyleSheet</name>-&gt;<name>SetOwningDocument</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr>delete <name>mHeaderData</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>mBoxObjectTable</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mBoxObjectTable</name>-&gt;<name>EnumerateRead</name></name><argument_list>(<argument><expr><name>ClearAllBoxObjects</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>delete <name>mBoxObjectTable</name></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>mPendingTitleChangeEvent</name>.<name>Revoke</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>mFileDataUris</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <expr_stmt><expr><call><name><name>nsFileDataProtocolHandler</name>::<name>RemoveFileDataEntry</name></name><argument_list>(<argument><expr><name><name>mFileDataUris</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <comment type="line">// We don't want to leave residual locks on images. Make sure we're in an</comment>
  <comment type="line">// unlocked state, and then clear the table.</comment>
  <expr_stmt><expr><call><name>SetImageLockingState</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mImageTracker</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<macro><name>NS_IMPL_CYCLE_COLLECTION_CLASS</name><argument_list>(<argument>nsDocument</argument>)</argument_list></macro>

<macro><name>NS_INTERFACE_TABLE_HEAD</name><argument_list>(<argument>nsDocument</argument>)</argument_list></macro>
  <decl_stmt><decl><type><name>NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY</name></type>
  <name>NS_DOCUMENT_INTERFACE_TABLE_BEGIN</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>, <argument><expr><name>nsIDocument</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>, <argument><expr><name>nsIDOM3DocumentEvent</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>, <argument><expr><name>nsIDOMDocumentStyle</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>, <argument><expr><name>nsIDOMNSDocumentStyle</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>, <argument><expr><name>nsIDOMDocumentRange</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>, <argument><expr><name>nsIDOMDocumentXBL</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>, <argument><expr><name>nsIScriptObjectPrincipal</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>, <argument><expr><name>nsIDOM3EventTarget</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>, <argument><expr><name>nsIDOMNSEventTarget</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>, <argument><expr><name>nsPIDOMEventTarget</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>, <argument><expr><name>nsISupportsWeakReference</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>, <argument><expr><name>nsIRadioGroupContainer</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>, <argument><expr><name>nsIMutationObserver</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>, <argument><expr><name>nsIApplicationCacheContainer</name></expr></argument>)</argument_list>
  <name>NS_OFFSET_AND_INTERFACE_TABLE_END</name>
  <name>NS_OFFSET_AND_INTERFACE_TABLE_TO_MAP_SEGUE</name>
  <name>NS_INTERFACE_MAP_ENTRIES_CYCLE_COLLECTION</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY_TEAROFF</name><argument_list>(<argument><expr><name>nsIDOM3Node</name></expr></argument>, <argument><expr>new <call><name>nsNode3Tearoff</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY_TEAROFF</name><argument_list>(<argument><expr><name>nsIDOMXPathNSResolver</name></expr></argument>,
                                 <argument><expr>new <call><name>nsNode3Tearoff</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY_TEAROFF</name><argument_list>(<argument><expr><name>nsIDOMNodeSelector</name></expr></argument>,
                                 <argument><expr>new <call><name>nsNodeSelectorTearoff</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
  if <argument_list>(<argument><expr><call><name><name>aIID</name>.<name>Equals</name></name><argument_list>(<argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsIDOMXPathEvaluator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> ||
      <call><name><name>aIID</name>.<name>Equals</name></name><argument_list>(<argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsIXPathEvaluatorInternal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list> <argument_list>{
    if <argument><expr>(!<name>mXPathEvaluatorTearoff</name>) <block>{
      <expr><name>nsresult</name> <name>rv</name></expr>;
      <expr><name>mXPathEvaluatorTearoff</name> =
        <call><name>do_CreateInstance</name><argument_list>(<argument><expr><name>NS_XPATH_EVALUATOR_CONTRACTID</name></expr></argument>,
                          <argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIDocument</name> *</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;
      <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;
    }</block></expr></argument>

    <return>return <expr><call><name><name>mXPathEvaluatorTearoff</name>-&gt;<name>QueryInterface</name></name><argument_list>(<argument><expr><name>aIID</name></expr></argument>, <argument><expr><name>aInstancePtr</name></expr></argument>)</argument_list></call></expr>;</return></argument_list></decl></decl_stmt>
  }
  else
<decl_stmt><decl><type><name>NS_INTERFACE_MAP_END</name></type>


<name>NS_IMPL_CYCLE_COLLECTING_ADDREF_AMBIGUOUS</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>, <argument><expr><name>nsIDocument</name></expr></argument>)</argument_list>
<name>NS_IMPL_CYCLE_COLLECTING_RELEASE_AMBIGUOUS_WITH_DESTROY</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>, 
                                                        <argument><expr><name>nsIDocument</name></expr></argument>,
                                                        <argument><expr><call><name><name>nsNodeUtils</name>::<name>LastRelease</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>

<name>NS_IMPL_CYCLE_COLLECTION_ROOT_BEGIN</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER</name>
<name>NS_IMPL_CYCLE_COLLECTION_ROOT_END</name>

static <name>PLDHashOperator</name>
<name>SubDocTraverser</name><argument_list>(<argument><expr><name>PLDHashTable</name> *<name>table</name></expr></argument>, <argument><expr><name>PLDHashEntryHdr</name> *<name>hdr</name></expr></argument>, <argument><expr><name>PRUint32</name> <name>number</name></expr></argument>,
                <argument><expr><name>void</name> *<name>arg</name></expr></argument>)</argument_list>
<argument_list>{
  <argument><expr><name>SubDocMapEntry</name> *<name>entry</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>SubDocMapEntry</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><name>nsCycleCollectionTraversalCallback</name> *<name>cb</name> = 
    <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsCycleCollectionTraversalCallback</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>;

  <argument><expr><call><name>NS_CYCLE_COLLECTION_NOTE_EDGE_NAME</name><argument_list>(<argument><expr>*<name>cb</name></expr></argument>, <argument><expr>"mSubDocuments entry-&gt;mKey"</expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><call><name><name>cb</name>-&gt;<name>NoteXPCOMChild</name></name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>mKey</name></name></expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><call><name>NS_CYCLE_COLLECTION_NOTE_EDGE_NAME</name><argument_list>(<argument><expr>*<name>cb</name></expr></argument>, <argument><expr>"mSubDocuments entry-&gt;mSubDocument"</expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><call><name><name>cb</name>-&gt;<name>NoteXPCOMChild</name></name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>mSubDocument</name></name></expr></argument>)</argument_list></call></expr></argument>;

  return <argument><expr><name>PL_DHASH_NEXT</name></expr></argument>;
}</argument_list>

static <name>PLDHashOperator</name>
<name>RadioGroupsTraverser</name><argument_list>(<argument><expr>const <name>nsAString</name>&amp; <name>aKey</name></expr></argument>, <argument><expr><name>nsRadioGroupStruct</name>* <name>aData</name></expr></argument>,
                     <argument><expr><name>void</name>* <name>aClosure</name></expr></argument>)</argument_list>
<argument_list>{
  <argument><expr><name>nsCycleCollectionTraversalCallback</name> *<name>cb</name> = 
    <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsCycleCollectionTraversalCallback</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aClosure</name></expr></argument>)</argument_list></call></expr></argument>;

  <argument><expr><call><name>NS_CYCLE_COLLECTION_NOTE_EDGE_NAME</name><argument_list>(<argument><expr>*<name>cb</name></expr></argument>,
                                   <argument><expr>"mRadioGroups entry-&gt;mSelectedRadioButton"</expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><call><name><name>cb</name>-&gt;<name>NoteXPCOMChild</name></name><argument_list>(<argument><expr><name><name>aData</name>-&gt;<name>mSelectedRadioButton</name></name></expr></argument>)</argument_list></call></expr></argument>;

  <argument><expr><name>PRUint32</name> <name>i</name></expr></argument>, <argument><expr><name>count</name> = <call><name><name>aData</name>-&gt;<name>mRadioButtons</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></argument>;
  for <argument><expr>(<name>i</name> = 0; <name>i</name> &lt; <name>count</name>; ++<name>i</name>) <block>{
    <expr><call><name>NS_CYCLE_COLLECTION_NOTE_EDGE_NAME</name><argument_list>(<argument><expr>*<name>cb</name></expr></argument>,
                                       <argument><expr>"mRadioGroups entry-&gt;mRadioButtons[i]"</expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>cb</name>-&gt;<name>NoteXPCOMChild</name></name><argument_list>(<argument><expr><name><name>aData</name>-&gt;<name>mRadioButtons</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;
  }</block></expr></argument>

  <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return></argument_list></decl></decl_stmt>
}

static <function><type><name>PLDHashOperator</name></type>
<name>BoxObjectTraverser</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name>*</type> <name>key</name></decl></param>, <param><decl><type><name>nsPIBoxObject</name>*</type> <name>boxObject</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>userArg</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsCycleCollectionTraversalCallback</name> *</type><name>cb</name> <init>= 
    <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsCycleCollectionTraversalCallback</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>userArg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 
  <expr_stmt><expr><call><name>NS_CYCLE_COLLECTION_NOTE_EDGE_NAME</name><argument_list>(<argument><expr>*<name>cb</name></expr></argument>, <argument><expr>"mBoxObjectTable entry"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cb</name>-&gt;<name>NoteXPCOMChild</name></name><argument_list>(<argument><expr><name>boxObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>IdentifierMapEntryTraverse</name><parameter_list>(<param><decl><type><name>nsIdentifierMapEntry</name> *</type><name>aEntry</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aArg</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsCycleCollectionTraversalCallback</name> *</type><name>cb</name> <init>=
    <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsCycleCollectionTraversalCallback</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aArg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aEntry</name>-&gt;<name>Traverse</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name><name>kNSURIs</name><index>[]</index></name> <init>= <expr><block>{
  <expr>" ([none])"</expr>,
  <expr>" (xmlns)"</expr>,
  <expr>" (xml)"</expr>,
  <expr>" (xhtml)"</expr>,
  <expr>" (XLink)"</expr>,
  <expr>" (XSLT)"</expr>,
  <expr>" (XBL)"</expr>,
  <expr>" (MathML)"</expr>,
  <expr>" (RDF)"</expr>,
  <expr>" (XUL)"</expr>
}</block></expr></init></decl>;</decl_stmt>

<macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INTERNAL</name><argument_list>(<argument>nsDocument</argument>)</argument_list></macro>
  <if>if <condition>(<expr><call><name>NS_UNLIKELY</name><argument_list>(<argument><expr><call><name><name>cb</name>.<name>WantDebugInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr>72</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>nsid</name> <init>= <expr><call><name><name>tmp</name>-&gt;<name>GetDefaultNamespaceID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>uri</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>tmp</name>-&gt;<name>mDocumentURI</name></name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>tmp</name>-&gt;<name>mDocumentURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>nsid</name> &lt; <call><name>NS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>kNSURIs</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>PR_snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"nsDocument%s %s"</expr></argument>, <argument><expr><name><name>kNSURIs</name><index>[<expr><name>nsid</name></expr>]</index></name></expr></argument>,
                  <argument><expr><call><name><name>uri</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
      <expr_stmt><expr><call><name>PR_snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"nsDocument %s"</expr></argument>, <argument><expr><call><name><name>uri</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name><name>cb</name>.<name>DescribeNode</name></name><argument_list>(<argument><expr><name>RefCounted</name></expr></argument>, <argument><expr><call><name><name>tmp</name>-&gt;<name>mRefCnt</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nsDocument</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <expr_stmt><expr><call><name><name>cb</name>.<name>DescribeNode</name></name><argument_list>(<argument><expr><name>RefCounted</name></expr></argument>, <argument><expr><call><name><name>tmp</name>-&gt;<name>mRefCnt</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nsDocument</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                    <argument><expr>"nsDocument"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <comment type="line">// Always need to traverse script objects, so do that before we check</comment>
  <comment type="line">// if we're uncollectable.</comment>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_SCRIPT_OBJECTS</name></macro>

  <if>if <condition>(<expr><call><name><name>nsCCUncollectableMarker</name>::<name>InGeneration</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><call><name><name>tmp</name>-&gt;<name>GetMarkedCCGeneration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_SUCCESS_INTERRUPTED_TRAVERSE</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>tmp</name>-&gt;<name>mIdentifierMap</name>.<name>EnumerateEntries</name></name><argument_list>(<argument><expr><name>IdentifierMapEntryTraverse</name></expr></argument>, <argument><expr>&amp;<name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>tmp</name>-&gt;<name>mExternalResourceMap</name>.<name>Traverse</name></name><argument_list>(<argument><expr>&amp;<name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mNodeInfo</argument>)</argument_list></macro>

  <comment type="line">// Traverse the mChildren nsAttrAndChildArray.</comment>
  <for>for (<init><decl><type><name>PRInt32</name></type> <name>indx</name> <init>= <expr><call><name>PRInt32</name><argument_list>(<argument><expr><call><name><name>tmp</name>-&gt;<name>mChildren</name>.<name>ChildCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>indx</name> &gt; 0</expr>;</condition> <incr><expr>--<name>indx</name></expr></incr>) <block>{
    <expr_stmt><expr><call><name>NS_CYCLE_COLLECTION_NOTE_EDGE_NAME</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr>"mChildren[i]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cb</name>.<name>NoteXPCOMChild</name></name><argument_list>(<argument><expr><call><name><name>tmp</name>-&gt;<name>mChildren</name>.<name>ChildAt</name></name><argument_list>(<argument><expr><name>indx</name> - 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <decl_stmt><decl><type><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_USERDATA</name></type>

  <comment type="line">// Traverse all nsIDocument pointer members.</comment>
  <name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument><expr><name>mCachedRootElement</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NATIVE_MEMBER</name><argument_list>(<argument><expr><name>mNodeInfoManager</name></expr></argument>,
                                                  <argument><expr><name>nsNodeInfoManager</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument><expr><name>mSecurityInfo</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument><expr><name>mDisplayDocument</name></expr></argument>)</argument_list>

  <comment type="line">// Traverse all nsDocument nsCOMPtrs.</comment>
  <name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument><expr><name>mParser</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument><expr><name>mScriptGlobalObject</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument><expr><name>mListenerManager</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument><expr><name>mDOMStyleSheets</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument><expr><name>mScriptLoader</name></expr></argument>)</argument_list>

  <name><name>tmp</name>-&gt;<name>mRadioGroups</name>.<name>EnumerateRead</name></name><argument_list>(<argument><expr><name>RadioGroupsTraverser</name></expr></argument>, <argument><expr>&amp;<name>cb</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// The boxobject for an element will only exist as long as it's in the</comment>
  <comment type="line">// document, so we'll traverse the table here instead of from the element.</comment>
  <if>if <condition>(<expr><name><name>tmp</name>-&gt;<name>mBoxObjectTable</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>tmp</name>-&gt;<name>mBoxObjectTable</name>-&gt;<name>EnumerateRead</name></name><argument_list>(<argument><expr><name>BoxObjectTraverser</name></expr></argument>, <argument><expr>&amp;<name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mChannel</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR_AMBIGUOUS</name><argument_list>(<argument>mStyleAttrStyleSheet</argument>, <argument>nsIStyleSheet</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mScriptEventManager</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mXPathEvaluatorTearoff</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mLayoutHistoryState</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mOnloadBlocker</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mFirstBaseNodeWithHref</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mDOMImplementation</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mOriginalDocument</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mCachedEncoder</argument>)</argument_list></macro>

  <comment type="line">// Traverse all our nsCOMArrays.</comment>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMARRAY</name><argument_list>(<argument>mStyleSheets</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMARRAY</name><argument_list>(<argument>mCatalogSheets</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMARRAY</name><argument_list>(<argument>mPreloadingImages</argument>)</argument_list></macro>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>tmp</name>-&gt;<name>mAnimationFrameListeners</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <expr_stmt><expr><call><name>NS_CYCLE_COLLECTION_NOTE_EDGE_NAME</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr>"mAnimationFrameListeners[i]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cb</name>.<name>NoteXPCOMChild</name></name><argument_list>(<argument><expr><name><name>tmp</name>-&gt;<name>mAnimationFrameListeners</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SMIL</name></cpp:ifdef>
  <comment type="line">// Traverse animation components</comment>
  <if>if <condition>(<expr><name><name>tmp</name>-&gt;<name>mAnimationController</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>tmp</name>-&gt;<name>mAnimationController</name>-&gt;<name>Traverse</name></name><argument_list>(<argument><expr>&amp;<name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// MOZ_SMIL</comment>

  <if>if <condition>(<expr><name><name>tmp</name>-&gt;<name>mSubDocuments</name></name> &amp;&amp; <name><name>tmp</name>-&gt;<name>mSubDocuments</name>-&gt;<name>ops</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PL_DHashTableEnumerate</name><argument_list>(<argument><expr><name><name>tmp</name>-&gt;<name>mSubDocuments</name></name></expr></argument>, <argument><expr><name>SubDocTraverser</name></expr></argument>, <argument><expr>&amp;<name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
<decl_stmt><decl><type><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END</name></type>


<name>NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_TRACE_PRESERVED_WRAPPER</name>
<name>NS_IMPL_CYCLE_COLLECTION_TRACE_END</name>


<name>NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN</name><argument_list>(<argument><expr><name>nsDocument</name></expr></argument>)</argument_list>
  <name><name>tmp</name>-&gt;<name>mInUnlinkOrDeletion</name></name> <init>= <expr><name>PR_TRUE</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Clear out our external resources</comment>
  <expr_stmt><expr><call><name><name>tmp</name>-&gt;<name>mExternalResourceMap</name>.<name>Shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsAutoScriptBlocker</name></type> <name>scriptBlocker</name></decl>;</decl_stmt>

  <comment type="line">// Unlink the mChildren nsAttrAndChildArray.</comment>
  <for>for (<init><decl><type><name>PRInt32</name></type> <name>indx</name> <init>= <expr><call><name>PRInt32</name><argument_list>(<argument><expr><call><name><name>tmp</name>-&gt;<name>mChildren</name>.<name>ChildCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> - 1</expr></init></decl>;</init> 
       <condition><expr><name>indx</name> &gt;= 0</expr>;</condition> <incr><expr>--<name>indx</name></expr></incr>) <block>{
    <expr_stmt><expr><call><name><name>tmp</name>-&gt;<name>mChildren</name>.<name>ChildAt</name></name><argument_list>(<argument><expr><name>indx</name></expr></argument>)</argument_list></call>-&gt;<call><name>UnbindFromTree</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tmp</name>-&gt;<name>mChildren</name>.<name>RemoveChildAt</name></name><argument_list>(<argument><expr><name>indx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><name><name>tmp</name>-&gt;<name>mFirstChild</name></name> = <name>nsnull</name></expr>;</expr_stmt>

  <macro><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument>mCachedRootElement</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument>mDisplayDocument</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument>mFirstBaseNodeWithHref</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument>mDOMImplementation</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument>mOriginalDocument</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument>mCachedEncoder</argument>)</argument_list></macro>

  <decl_stmt><decl><type><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_USERDATA</name></type>

  <name><name>tmp</name>-&gt;<name>mParentDocument</name></name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

  <macro><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMARRAY</name><argument_list>(<argument>mPreloadingImages</argument>)</argument_list></macro>

  
  <if>if <condition>(<expr><name><name>tmp</name>-&gt;<name>mBoxObjectTable</name></name></expr>)</condition><then> <block>{
   <expr_stmt><expr><call><name><name>tmp</name>-&gt;<name>mBoxObjectTable</name>-&gt;<name>EnumerateRead</name></name><argument_list>(<argument><expr><name>ClearAllBoxObjects</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr>delete <name><name>tmp</name>-&gt;<name>mBoxObjectTable</name></name></expr>;</expr_stmt>
   <expr_stmt><expr><name><name>tmp</name>-&gt;<name>mBoxObjectTable</name></name> = <name>nsnull</name></expr>;</expr_stmt>
 }</block></then></if>

  <comment type="line">// nsDocument has a pretty complex destructor, so we're going to</comment>
  <comment type="line">// assume that *most* cycles you actually want to break somewhere</comment>
  <comment type="line">// else, and not unlink an awful lot here.</comment>
  <comment type="line">//</comment>
  <comment type="line">// In rare cases where you think an unlink will help here, add one</comment>
  <comment type="line">// manually.</comment>

  <expr_stmt><expr><name><name>tmp</name>-&gt;<name>mInUnlinkOrDeletion</name></name> = <name>PR_FALSE</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>tmp</name>-&gt;<name>mIdentifierMap</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function><type><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_END</name>


<name>nsresult</name></type>
<name><name>nsDocument</name>::<name>Init</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mCSSLoader</name> || <name>mNodeInfoManager</name> || <name>mScriptLoader</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_ALREADY_INITIALIZED</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>mIdentifierMap</name>.<name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>(<name>void</name>)<call><name><name>mStyledLinks</name>.<name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mRadioGroups</name>.<name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Force initialization.</comment>
  <decl_stmt><decl><type><name><name>nsINode</name>::<name>nsSlots</name></name>*</type> <name>slots</name> <init>= <expr><call><name>GetSlots</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>slots</name></expr></argument>,<argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Prepend self as mutation-observer whether we need it or not (some</comment>
  <comment type="line">// subclasses currently do, other don't). This is because the code in</comment>
  <comment type="line">// nsNodeUtils always notifies the first observer first, expecting the</comment>
  <comment type="line">// first observer to be the document.</comment>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><call><name><name>slots</name>-&gt;<name>mMutationObservers</name>.<name>PrependElementUnlessExists</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIMutationObserver</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>mOnloadBlocker</name> = new <call><name>nsOnloadBlocker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mOnloadBlocker</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mCSSLoader</name> = new <call><name><name>mozilla</name>::<name>css</name>::<name>Loader</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mCSSLoader</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name>mCSSLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Assume we're not quirky, until we know otherwise</comment>
  <expr_stmt><expr><call><name><name>mCSSLoader</name>-&gt;<name>SetCompatibilityMode</name></name><argument_list>(<argument><expr><name>eCompatibility_FullStandards</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mNodeInfoManager</name> = new <call><name>nsNodeInfoManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mNodeInfoManager</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name>mNodeInfoManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type>  <name>rv</name> <init>= <expr><call><name><name>mNodeInfoManager</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mNodeInfo</name> = <call><name><name>mNodeInfoManager</name>-&gt;<name>GetDocumentNodeInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mNodeInfo</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>GetOwnerDoc</name><argument_list>()</argument_list></call> == <name>this</name></expr></argument>, <argument><expr>"Our nodeinfo is busted!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mScriptLoader</name> = new <call><name>nsScriptLoader</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mScriptLoader</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<call><name><name>mImageTracker</name>.<name>Init</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> 
<name><name>nsIDocument</name>::<name>DeleteAllProperties</name></name><parameter_list>()</parameter_list>
<block>{
  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name>GetPropertyTableCount</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <expr_stmt><expr><call><name>PropertyTable</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>-&gt;<call><name>DeleteAllProperties</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></for>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIDocument</name>::<name>DeleteAllPropertiesFor</name></name><parameter_list>(<param><decl><type><name>nsINode</name>*</type> <name>aNode</name></decl></param>)</parameter_list>
<block>{
  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name>GetPropertyTableCount</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <expr_stmt><expr><call><name>PropertyTable</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>-&gt;<call><name>DeleteAllPropertiesFor</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
}</block></function>

<function><type><name>nsPropertyTable</name>*</type>
<name><name>nsIDocument</name>::<name>GetExtraPropertyTable</name></name><parameter_list>(<param><decl><type><name>PRUint16</name></type> <name>aCategory</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aCategory</name> &gt; 0</expr></argument>, <argument><expr>"Category 0 should have already been handled"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>aCategory</name> &gt;= <call><name><name>mExtraPropertyTables</name>.<name>Length</name></name><argument_list>()</argument_list></call> + 1</expr>)</condition> <block>{
    <expr_stmt><expr><call><name><name>mExtraPropertyTables</name>.<name>AppendElement</name></name><argument_list>(<argument><expr>new <call><name>nsPropertyTable</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><name><name>mExtraPropertyTables</name><index>[<expr><name>aCategory</name> - 1</expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>AddXMLEventsContent</name></name><parameter_list>(<param><decl><type><name>nsIContent</name> *</type><name>aXMLEventsElement</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mXMLEventsManager</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mXMLEventsManager</name> = new <call><name>nsXMLEventsManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mXMLEventsManager</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AddObserver</name><argument_list>(<argument><expr><name>mXMLEventsManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name><name>mXMLEventsManager</name>-&gt;<name>AddXMLEventsContent</name></name><argument_list>(<argument><expr><name>aXMLEventsElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>Reset</name></name><parameter_list>(<param><decl><type><name>nsIChannel</name>*</type> <name>aChannel</name></decl></param>, <param><decl><type><name>nsILoadGroup</name>*</type> <name>aLoadGroup</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrincipal</name></expr></argument>&gt;</argument_list></name></type> <name>principal</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>aChannel</name></expr>)</condition><then> <block>{
    <comment type="line">// Note: this code is duplicated in nsXULDocument::StartDocumentLoad and</comment>
    <comment type="line">// nsScriptSecurityManager::GetChannelPrincipal.    </comment>
    <comment type="line">// Note: this should match nsDocShell::OnLoadingSite</comment>
    <expr_stmt><expr><call><name>NS_GetFinalChannelURI</name><argument_list>(<argument><expr><name>aChannel</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsIScriptSecurityManager</name> *</type><name>securityManager</name> <init>=
      <expr><call><name><name>nsContentUtils</name>::<name>GetSecurityManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>securityManager</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>securityManager</name>-&gt;<name>GetChannelPrincipal</name></name><argument_list>(<argument><expr><name>aChannel</name></expr></argument>,
                                           <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>principal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <expr_stmt><expr><call><name>ResetToURI</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>aLoadGroup</name></expr></argument>, <argument><expr><name>principal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPropertyBag2</name></expr></argument>&gt;</argument_list></name></type> <name>bag</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aChannel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>bag</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>baseURI</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>bag</name>-&gt;<name>GetPropertyAsInterface</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"baseURI"</expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsIURI</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>baseURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>baseURI</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>mDocumentBaseURI</name> = <name>baseURI</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <expr_stmt><expr><name>mChannel</name> = <name>aChannel</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>ResetToURI</name></name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>, <param><decl><type><name>nsILoadGroup</name> *</type><name>aLoadGroup</name></decl></param>,
                       <param><decl><type><name>nsIPrincipal</name>*</type> <name>aPrincipal</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr>"Null URI passed to ResetToURI"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef>
  <if>if <condition>(<expr><name>gDocumentLeakPRLog</name> &amp;&amp; <call><name>PR_LOG_TEST</name><argument_list>(<argument><expr><name>gDocumentLeakPRLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>spec</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>aURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PR_LogPrint</name><argument_list>(<argument><expr>"DOCUMENT %p ResetToURI %s"</expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>spec</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>SetPrincipal</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mSecurityInfo</name> = <name>nsnull</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>mDocumentLoadGroup</name> = <name>nsnull</name></expr>;</expr_stmt>

  <comment type="line">// Delete references to sub-documents and kill the subdocument map,</comment>
  <comment type="line">// if any. It holds strong references</comment>
  <if>if <condition>(<expr><name>mSubDocuments</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PL_DHashTableDestroy</name><argument_list>(<argument><expr><name>mSubDocuments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>mSubDocuments</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// Destroy link map now so we don't waste time removing</comment>
  <comment type="line">// links one by one</comment>
  <expr_stmt><expr><call><name>DestroyElementMaps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>oldVal</name> <init>= <expr><name>mInUnlinkOrDeletion</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>mInUnlinkOrDeletion</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>count</name> <init>= <expr><call><name><name>mChildren</name>.<name>ChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <block>{ <comment type="line">// Scope for update</comment>
    <expr_stmt><expr><call><name>MOZ_AUTO_DOC_UPDATE</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>UPDATE_CONTENT_MODEL</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <for>for (<init><decl><type><name>PRInt32</name></type> <name>i</name> <init>= <expr><call><name>PRInt32</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call> - 1</expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name> <init>= <expr><call><name><name>mChildren</name>.<name>ChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>nsIContent</name>*</type> <name>previousSibling</name> <init>= <expr><call><name><name>content</name>-&gt;<name>GetPreviousSibling</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>nsINode</name>::<name>GetFirstChild</name></name><argument_list>()</argument_list></call> == <name>content</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>mFirstChild</name> = <call><name><name>content</name>-&gt;<name>GetNextSibling</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name><name>mChildren</name>.<name>RemoveChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>nsNodeUtils</name>::<name>ContentRemoved</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>previousSibling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>content</name>-&gt;<name>UnbindFromTree</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block>
  <expr_stmt><expr><name>mInUnlinkOrDeletion</name> = <name>oldVal</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mCachedRootElement</name> = <name>nsnull</name></expr>;</expr_stmt>

  <comment type="line">// Reset our stylesheets</comment>
  <expr_stmt><expr><call><name>ResetStylesheetsToURI</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="line">// Release the listener manager</comment>
  <if>if <condition>(<expr><name>mListenerManager</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mListenerManager</name>-&gt;<name>Disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mListenerManager</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// Release the stylesheets list.</comment>
  <expr_stmt><expr><name>mDOMStyleSheets</name> = <name>nsnull</name></expr>;</expr_stmt>

  <comment type="line">// Clear the original URI so SetDocumentURI sets it.</comment>
  <expr_stmt><expr><name>mOriginalURI</name> = <name>nsnull</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SetDocumentURI</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// If mDocumentBaseURI is null, nsIDocument::GetBaseURI() returns</comment>
  <comment type="line">// mDocumentURI.</comment>
  <expr_stmt><expr><name>mDocumentBaseURI</name> = <name>nsnull</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>aLoadGroup</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mDocumentLoadGroup</name> = <call><name>do_GetWeakReference</name><argument_list>(<argument><expr><name>aLoadGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// there was an assertion here that aLoadGroup was not null.  This</comment>
    <comment type="line">// is no longer valid: nsDocShell::SetDocument does not create a</comment>
    <comment type="line">// load group, and it works just fine</comment>

    <comment type="line">// XXXbz what does "just fine" mean exactly?  And given that there</comment>
    <comment type="line">// is no nsDocShell::SetDocument, what is this talking about?</comment>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>mLastModified</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// XXXbz I guess we're assuming that the caller will either pass in</comment>
  <comment type="line">// a channel with a useful type or call SetContentType?</comment>
  <expr_stmt><expr><call><name>SetContentTypeInternal</name><argument_list>(<argument><expr><call><name>EmptyCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mContentLanguage</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mBaseTarget</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mReferrer</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mXMLDeclarationBits</name> = 0</expr>;</expr_stmt>

  <comment type="line">// Now get our new principal</comment>
  <if>if <condition>(<expr><name>aPrincipal</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>SetPrincipal</name><argument_list>(<argument><expr><name>aPrincipal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <decl_stmt><decl><type><name>nsIScriptSecurityManager</name> *</type><name>securityManager</name> <init>=
      <expr><call><name><name>nsContentUtils</name>::<name>GetSecurityManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>securityManager</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrincipal</name></expr></argument>&gt;</argument_list></name></type> <name>principal</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>=
        <expr><call><name><name>securityManager</name>-&gt;<name>GetCodebasePrincipal</name></name><argument_list>(<argument><expr><name>mDocumentURI</name></expr></argument>,
                                              <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>principal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>SetPrincipal</name><argument_list>(<argument><expr><name>principal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></else></if>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>ResetStylesheetsToURI</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr>"Null URI passed to ResetStylesheetsToURI"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>mozAutoDocUpdate</name></type> <name>upd</name><parameter_list>(<param><decl><type><name>this</name></type></decl></param>, <param><decl><type><name>UPDATE_STYLE</name></type></decl></param>, <param><decl><type><name>PR_TRUE</name></type></decl></param>)</parameter_list>;</function_decl>
  
  <comment type="line">// The stylesheets should forget us</comment>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>indx</name> <init>= <expr><call><name><name>mStyleSheets</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr>--<name>indx</name> &gt;= 0</expr>)</condition> <block>{
    <decl_stmt><decl><type><name>nsIStyleSheet</name>*</type> <name>sheet</name> <init>= <expr><name><name>mStyleSheets</name><index>[<expr><name>indx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>sheet</name>-&gt;<name>SetOwningDocument</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>sheet</name>-&gt;<name>IsApplicable</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>RemoveStyleSheetFromStyleSets</name><argument_list>(<argument><expr><name>sheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">// XXX Tell observers?</comment>
  }</block></while>

  <expr_stmt><expr><name>indx</name> = <call><name><name>mCatalogSheets</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr>--<name>indx</name> &gt;= 0</expr>)</condition> <block>{
    <decl_stmt><decl><type><name>nsIStyleSheet</name>*</type> <name>sheet</name> <init>= <expr><name><name>mCatalogSheets</name><index>[<expr><name>indx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>sheet</name>-&gt;<name>SetOwningDocument</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>sheet</name>-&gt;<name>IsApplicable</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>shell</name> <init>= <expr><call><name>GetShell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>shell</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>shell</name>-&gt;<name>StyleSet</name></name><argument_list>()</argument_list></call>-&gt;<call><name>RemoveStyleSheet</name><argument_list>(<argument><expr><name><name>nsStyleSet</name>::<name>eAgentSheet</name></name></expr></argument>, <argument><expr><name>sheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>

    <comment type="line">// XXX Tell observers?</comment>
  }</block></while>


  <comment type="line">// Release all the sheets</comment>
  <expr_stmt><expr><call><name><name>mStyleSheets</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// NOTE:  We don't release the catalog sheets.  It doesn't really matter</comment>
  <comment type="line">// now, but it could in the future -- in which case not releasing them</comment>
  <comment type="line">// is probably the right thing to do.</comment>

  <comment type="line">// Now reset our inline style and attribute sheets.</comment>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsStyleSet</name>::<name>sheetType</name></name></type> <name>attrSheetType</name> <init>= <expr><call><name>GetAttrSheetType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>mAttrStyleSheet</name></expr>)</condition><then> <block>{
    <comment type="line">// Remove this sheet from all style sets</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>shell</name> <init>= <expr><call><name>GetShell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>shell</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>shell</name>-&gt;<name>StyleSet</name></name><argument_list>()</argument_list></call>-&gt;<call><name>RemoveStyleSheet</name><argument_list>(<argument><expr><name>attrSheetType</name></expr></argument>, <argument><expr><name>mAttrStyleSheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>mAttrStyleSheet</name>-&gt;<name>Reset</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><name>rv</name> = <call><name>NS_NewHTMLStyleSheet</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mAttrStyleSheet</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aURI</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <comment type="line">// Don't use AddStyleSheet, since it'll put the sheet into style</comment>
  <comment type="line">// sets in the document level, which is not desirable here.</comment>
  <expr_stmt><expr><call><name><name>mAttrStyleSheet</name>-&gt;<name>SetOwningDocument</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if>if <condition>(<expr><name>mStyleAttrStyleSheet</name></expr>)</condition><then> <block>{
    <comment type="line">// Remove this sheet from all style sets</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>shell</name> <init>= <expr><call><name>GetShell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>shell</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>shell</name>-&gt;<name>StyleSet</name></name><argument_list>()</argument_list></call>-&gt;
        <call><name>RemoveStyleSheet</name><argument_list>(<argument><expr><name><name>nsStyleSet</name>::<name>eStyleAttrSheet</name></name></expr></argument>, <argument><expr><name>mStyleAttrStyleSheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>mStyleAttrStyleSheet</name>-&gt;<name>Reset</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><name>mStyleAttrStyleSheet</name> = new <call><name>nsHTMLCSSStyleSheet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mStyleAttrStyleSheet</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>mStyleAttrStyleSheet</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <comment type="line">// The loop over style sets below will handle putting this sheet</comment>
  <comment type="line">// into style sets as needed.</comment>
  <expr_stmt><expr><call><name><name>mStyleAttrStyleSheet</name>-&gt;<name>SetOwningDocument</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Now set up our style sets</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>shell</name> <init>= <expr><call><name>GetShell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>shell</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>FillStyleSet</name><argument_list>(<argument><expr><call><name><name>shell</name>-&gt;<name>StyleSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name><name>nsStyleSet</name>::<name>sheetType</name></name></type>
<name><name>nsDocument</name>::<name>GetAttrSheetType</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr><name><name>nsStyleSet</name>::<name>ePresHintSheet</name></name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>FillStyleSet</name></name><parameter_list>(<param><decl><type><name>nsStyleSet</name>*</type> <name>aStyleSet</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aStyleSet</name></expr></argument>, <argument><expr>"Must have a style set"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><call><name><name>aStyleSet</name>-&gt;<name>SheetCount</name></name><argument_list>(<argument><expr><name><name>nsStyleSet</name>::<name>ePresHintSheet</name></name></expr></argument>)</argument_list></call> == 0</expr></argument>,
                  <argument><expr>"Style set already has a preshint sheet?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><call><name><name>aStyleSet</name>-&gt;<name>SheetCount</name></name><argument_list>(<argument><expr><name><name>nsStyleSet</name>::<name>eHTMLPresHintSheet</name></name></expr></argument>)</argument_list></call> == 0</expr></argument>,
                  <argument><expr>"Style set already has a HTML preshint sheet?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><call><name><name>aStyleSet</name>-&gt;<name>SheetCount</name></name><argument_list>(<argument><expr><name><name>nsStyleSet</name>::<name>eDocSheet</name></name></expr></argument>)</argument_list></call> == 0</expr></argument>,
                  <argument><expr>"Style set already has document sheets?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><call><name><name>aStyleSet</name>-&gt;<name>SheetCount</name></name><argument_list>(<argument><expr><name><name>nsStyleSet</name>::<name>eStyleAttrSheet</name></name></expr></argument>)</argument_list></call> == 0</expr></argument>,
                  <argument><expr>"Style set already has style attr sheets?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>mStyleAttrStyleSheet</name></expr></argument>, <argument><expr>"No style attr stylesheet?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>mAttrStyleSheet</name></expr></argument>, <argument><expr>"No attr stylesheet?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name><name>aStyleSet</name>-&gt;<name>AppendStyleSheet</name></name><argument_list>(<argument><expr><call><name>GetAttrSheetType</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mAttrStyleSheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>aStyleSet</name>-&gt;<name>AppendStyleSheet</name></name><argument_list>(<argument><expr><name><name>nsStyleSet</name>::<name>eStyleAttrSheet</name></name></expr></argument>,
                              <argument><expr><name>mStyleAttrStyleSheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for (<init><expr><name>i</name> = <call><name><name>mStyleSheets</name>.<name>Count</name></name><argument_list>()</argument_list></call> - 1</expr>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr>--<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsIStyleSheet</name>*</type> <name>sheet</name> <init>= <expr><name><name>mStyleSheets</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>sheet</name>-&gt;<name>IsApplicable</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>aStyleSet</name>-&gt;<name>AddDocStyleSheet</name></name><argument_list>(<argument><expr><name>sheet</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>

  <for>for (<init><expr><name>i</name> = <call><name><name>mCatalogSheets</name>.<name>Count</name></name><argument_list>()</argument_list></call> - 1</expr>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr>--<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsIStyleSheet</name>*</type> <name>sheet</name> <init>= <expr><name><name>mCatalogSheets</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>sheet</name>-&gt;<name>IsApplicable</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>aStyleSet</name>-&gt;<name>AppendStyleSheet</name></name><argument_list>(<argument><expr><name><name>nsStyleSet</name>::<name>eAgentSheet</name></name></expr></argument>, <argument><expr><name>sheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>StartDocumentLoad</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>aCommand</name></decl></param>, <param><decl><type><name>nsIChannel</name>*</type> <name>aChannel</name></decl></param>,
                              <param><decl><type><name>nsILoadGroup</name>*</type> <name>aLoadGroup</name></decl></param>,
                              <param><decl><type><name>nsISupports</name>*</type> <name>aContainer</name></decl></param>,
                              <param><decl><type><name>nsIStreamListener</name> **</type><name>aDocListener</name></decl></param>,
                              <param><decl><type><name>PRBool</name></type> <name>aReset</name></decl></param>, <param><decl><type><name>nsIContentSink</name>*</type> <name>aSink</name></decl></param>)</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef>
  <if>if <condition>(<expr><name>gDocumentLeakPRLog</name> &amp;&amp; <call><name>PR_LOG_TEST</name><argument_list>(<argument><expr><name>gDocumentLeakPRLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>aChannel</name>-&gt;<name>GetURI</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>spec</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>uri</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>uri</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>PR_LogPrint</name><argument_list>(<argument><expr>"DOCUMENT %p StartDocumentLoad %s"</expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>spec</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>SetReadyStateInternal</name><argument_list>(<argument><expr><name>READYSTATE_LOADING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name><name>nsCRT</name>::<name>strcmp</name></name><argument_list>(<argument><expr><name>kLoadAsData</name></expr></argument>, <argument><expr><name>aCommand</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mLoadedAsData</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    <comment type="line">// We need to disable script &amp; style loading in this case.</comment>
    <comment type="line">// We leave them disabled even in EndLoad(), and let anyone</comment>
    <comment type="line">// who puts the document on display to worry about enabling.</comment>

    <comment type="line">// Do not load/process scripts when loading as data</comment>
    <expr_stmt><expr><call><name>ScriptLoader</name><argument_list>()</argument_list></call>-&gt;<call><name>SetEnabled</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// styles</comment>
    <expr_stmt><expr><call><name>CSSLoader</name><argument_list>()</argument_list></call>-&gt;<call><name>SetEnabled</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Do not load/process styles when loading as data</comment>
  }</block></then> <else>else <if>if <condition>(<expr><call><name><name>nsCRT</name>::<name>strcmp</name></name><argument_list>(<argument><expr>"external-resource"</expr></argument>, <argument><expr><name>aCommand</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <comment type="line">// Allow CSS, but not scripts</comment>
    <expr_stmt><expr><call><name>ScriptLoader</name><argument_list>()</argument_list></call>-&gt;<call><name>SetEnabled</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if></else></if>

  <expr_stmt><expr><name>mMayStartLayout</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>mHaveInputEncoding</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>aReset</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>Reset</name><argument_list>(<argument><expr><name>aChannel</name></expr></argument>, <argument><expr><name>aLoadGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>contentType</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>aChannel</name>-&gt;<name>GetContentType</name></name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// XXX this is only necessary for viewsource:</comment>
    <decl_stmt><decl><type><name><name>nsACString</name>::<name>const_iterator</name></name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>semicolon</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>contentType</name>.<name>BeginReading</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentType</name>.<name>EndReading</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>semicolon</name> = <name>start</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FindCharInReadable</name><argument_list>(<argument><expr>';'</expr></argument>, <argument><expr><name>semicolon</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetContentTypeInternal</name><argument_list>(<argument><expr><call><name>Substring</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>semicolon</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name>RetrieveRelevantHeaders</name><argument_list>(<argument><expr><name>aChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mChannel</name> = <name>aChannel</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>InitCSP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>InitCSP</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>CSPService</name>::<name>sCSPEnabled</name></name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>cspHeaderValue</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>cspROHeaderValue</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>this</name>-&gt;<name>GetHeaderData</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>headerCSP</name></name></expr></argument>, <argument><expr><name>cspHeaderValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name>-&gt;<name>GetHeaderData</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>headerCSPReportOnly</name></name></expr></argument>, <argument><expr><name>cspROHeaderValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PRBool</name></type> <name>system</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsIScriptSecurityManager</name> *</type><name>ssm</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>GetSecurityManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>ssm</name>-&gt;<name>IsSystemPrincipal</name></name><argument_list>(<argument><expr><call><name>NodePrincipal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>system</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>system</name></expr>)</condition><then> <block>{
      <comment type="line">// only makes sense to register new CSP if this document is not priviliged</comment>
      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>cspHeaderValue</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>cspROHeaderValue</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <comment type="line">// no CSP header present, stop processing</comment>
      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef> 
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gCspPRLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("CSP header specified for document %p", <name>this</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContentSecurityPolicy</name></expr></argument>&gt;</argument_list></name></type> <name>mCSP</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>mCSP</name> = <call><name>do_CreateInstance</name><argument_list>(<argument><expr>"@mozilla.org/contentsecuritypolicy;1"</expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef> 
      <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gCspPRLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("Failed to create CSP object: %x", <name>rv</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// Store the request context for violation reports</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIHttpChannel</name></expr></argument>&gt;</argument_list></name></type> <name>httpChannel</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mChannel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mCSP</name>-&gt;<name>ScanRequestData</name></name><argument_list>(<argument><expr><name>httpChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Start parsing the policy</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>chanURI</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mChannel</name>-&gt;<name>GetURI</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>chanURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef> 
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gCspPRLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("CSP Loaded")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// ReportOnly mode is enabled *only* if there are no regular-strength CSP</comment>
    <comment type="line">// headers present.  If there are, then we ignore the ReportOnly mode and</comment>
    <comment type="line">// toss a warning into the error console, proceeding with enforcing the</comment>
    <comment type="line">// regular-strength CSP.</comment>
    <if>if <condition>(<expr><call><name><name>cspHeaderValue</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mCSP</name>-&gt;<name>SetReportOnlyMode</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>mCSP</name>-&gt;<name>RefinePolicy</name></name><argument_list>(<argument><expr><name>cspROHeaderValue</name></expr></argument>, <argument><expr><name>chanURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef> 
      <block>{
        <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gCspPRLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, 
                <argument><expr>("CSP (report only) refined, policy: \"%s\"", 
                  <call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><name>cspROHeaderValue</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then> <else>else <block>{
      <comment type="line">//XXX(sstamm): maybe we should post a warning when both read only and regular </comment>
      <comment type="line">// CSP headers are present.</comment>
      <expr_stmt><expr><call><name><name>mCSP</name>-&gt;<name>RefinePolicy</name></name><argument_list>(<argument><expr><name>cspHeaderValue</name></expr></argument>, <argument><expr><name>chanURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef> 
      <block>{
        <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gCspPRLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, 
               <argument><expr>("CSP refined, policy: \"%s\"",
                <call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><name>cspHeaderValue</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></else></if>

    <comment type="line">// Check for frame-ancestor violation</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocShell</name></expr></argument>&gt;</argument_list></name></type> <name>docShell</name> <init>= <expr><call><name>do_QueryReferent</name><argument_list>(<argument><expr><name>mDocumentContainer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>docShell</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PRBool</name></type> <name>safeAncestry</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>

        <comment type="line">// PermitsAncestry sends violation reports when necessary</comment>
        <expr_stmt><expr><name>rv</name> = <call><name><name>mCSP</name>-&gt;<name>PermitsAncestry</name></name><argument_list>(<argument><expr><name>docShell</name></expr></argument>, <argument><expr>&amp;<name>safeAncestry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<name>safeAncestry</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef>
            <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gCspPRLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, 
                   <argument><expr>("CSP doesn't like frame's ancestry, not loading.")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <comment type="line">// stop!  ERROR page!</comment>
            <expr_stmt><expr><call><name><name>mChannel</name>-&gt;<name>Cancel</name></name><argument_list>(<argument><expr><name>NS_ERROR_CSP_FRAME_ANCESTOR_VIOLATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <comment type="line">//Copy into principal</comment>
    <decl_stmt><decl><type><name>nsIPrincipal</name>*</type> <name>principal</name> <init>= <expr><call><name>GetPrincipal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>principal</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>principal</name>-&gt;<name>SetCsp</name></name><argument_list>(<argument><expr><name>mCSP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef>
        <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gCspPRLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, 
                <argument><expr>("Inserted CSP into principal %p", <name>principal</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
      <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gCspPRLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, 
              <argument><expr>("Couldn't copy CSP into absent principal %p", <name>principal</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></else></if>
  }</block></then>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef>
  <else>else <block>{ <comment type="line">//CSP was not enabled!</comment>
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>gCspPRLog</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, 
           <argument><expr>("CSP is disabled, skipping CSP init for document %p", <name>this</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>StopDocumentLoad</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mParser</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mParser</name>-&gt;<name>Terminate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>SetDocumentURI</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>oldBase</name> <init>= <expr><call><name>GetDocBaseURI</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>mDocumentURI</name> = <call><name>NS_TryToMakeImmutable</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>nsIURI</name>*</type> <name>newBase</name> <init>= <expr><call><name>GetDocBaseURI</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>equalBases</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>oldBase</name> &amp;&amp; <name>newBase</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>oldBase</name>-&gt;<name>Equals</name></name><argument_list>(<argument><expr><name>newBase</name></expr></argument>, <argument><expr>&amp;<name>equalBases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <expr_stmt><expr><name>equalBases</name> = !<name>oldBase</name> &amp;&amp; !<name>newBase</name></expr>;</expr_stmt>
  }</block></else></if>

  <comment type="line">// If this is the first time we're setting the document's URI, set the</comment>
  <comment type="line">// document's original URI.</comment>
  <if>if <condition>(<expr>!<name>mOriginalURI</name></expr>)</condition><then>
    <expr_stmt><expr><name>mOriginalURI</name> = <name>mDocumentURI</name></expr>;</expr_stmt></then></if>

  <comment type="line">// If changing the document's URI changed the base URI of the document, we</comment>
  <comment type="line">// need to refresh the hrefs of all the links on the page.</comment>
  <if>if <condition>(<expr>!<name>equalBases</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>RefreshLinkHrefs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetLastModified</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aLastModified</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name><name>mLastModified</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>aLastModified</name>.<name>Assign</name></name><argument_list>(<argument><expr><name>mLastModified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <comment type="line">// If we for whatever reason failed to find the last modified time</comment>
    <comment type="line">// (or even the current time), fall back to what NS4.x returned.</comment>
    <expr_stmt><expr><call><name><name>aLastModified</name>.<name>Assign</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"01/01/1970 00:00:00"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>AddToNameTable</name></name><parameter_list>(<param><decl><type><name>Element</name> *</type><name>aElement</name></decl></param>, <param><decl><type><name>nsIAtom</name>*</type> <name>aName</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mIsRegularHTML</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <decl_stmt><decl><type><name>nsIdentifierMapEntry</name> *</type><name>entry</name> <init>=
    <expr><call><name><name>mIdentifierMap</name>.<name>GetEntry</name></name><argument_list>(<argument><expr><call><name>nsDependentAtomString</name><argument_list>(<argument><expr><name>aName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// entry is null if we're not tracking the elements with this name</comment>

  <if>if <condition>(<expr><name>entry</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>entry</name>-&gt;<name>AddNameElement</name></name><argument_list>(<argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>RemoveFromNameTable</name></name><parameter_list>(<param><decl><type><name>Element</name> *</type><name>aElement</name></decl></param>, <param><decl><type><name>nsIAtom</name>*</type> <name>aName</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Speed up document teardown</comment>
  <if>if <condition>(<expr>!<name>mIsRegularHTML</name> || <call><name><name>mIdentifierMap</name>.<name>Count</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
    <return>return;</return></then></if>

  <decl_stmt><decl><type><name>nsIdentifierMapEntry</name> *</type><name>entry</name> <init>=
    <expr><call><name><name>mIdentifierMap</name>.<name>GetEntry</name></name><argument_list>(<argument><expr><call><name>nsDependentAtomString</name><argument_list>(<argument><expr><name>aName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then> <comment type="line">// Should never be false unless we had OOM when adding the entry</comment>
    <return>return;</return></then></if>

  <expr_stmt><expr><call><name><name>entry</name>-&gt;<name>RemoveNameElement</name></name><argument_list>(<argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>AddToIdTable</name></name><parameter_list>(<param><decl><type><name>Element</name> *</type><name>aElement</name></decl></param>, <param><decl><type><name>nsIAtom</name>*</type> <name>aId</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIdentifierMapEntry</name> *</type><name>entry</name> <init>=
    <expr><call><name><name>mIdentifierMap</name>.<name>PutEntry</name></name><argument_list>(<argument><expr><call><name>nsDependentAtomString</name><argument_list>(<argument><expr><name>aId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>entry</name></expr>)</condition><then> <block>{ <comment type="block">/* True except on OOM */</comment>
    <expr_stmt><expr><call><name><name>entry</name>-&gt;<name>AddIdElement</name></name><argument_list>(<argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>RemoveFromIdTable</name></name><parameter_list>(<param><decl><type><name>Element</name> *</type><name>aElement</name></decl></param>, <param><decl><type><name>nsIAtom</name>*</type> <name>aId</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aId</name></expr></argument>, <argument><expr>"huhwhatnow?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Speed up document teardown</comment>
  <if>if <condition>(<expr><call><name><name>mIdentifierMap</name>.<name>Count</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsIdentifierMapEntry</name> *</type><name>entry</name> <init>=
    <expr><call><name><name>mIdentifierMap</name>.<name>GetEntry</name></name><argument_list>(<argument><expr><call><name>nsDependentAtomString</name><argument_list>(<argument><expr><name>aId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then> <comment type="line">// Can be null for XML elements with changing ids.</comment>
    <return>return;</return></then></if>

  <expr_stmt><expr><call><name><name>entry</name>-&gt;<name>RemoveIdElement</name></name><argument_list>(<argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name><name>entry</name>-&gt;<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mIdentifierMap</name>.<name>RawRemoveEntry</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>nsIPrincipal</name>*</type>
<name><name>nsDocument</name>::<name>GetPrincipal</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr><call><name>NodePrincipal</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <name>PRBool</name></type> <name>sDisablePrefetchHTTPSPref</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>SetPrincipal</name></name><parameter_list>(<param><decl><type><name>nsIPrincipal</name> *</type><name>aNewPrincipal</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aNewPrincipal</name> &amp;&amp; <name>mAllowDNSPrefetch</name> &amp;&amp; <name>sDisablePrefetchHTTPSPref</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>aNewPrincipal</name>-&gt;<name>GetURI</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>isHTTPS</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>uri</name> || <call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name><name>uri</name>-&gt;<name>SchemeIs</name></name><argument_list>(<argument><expr>"https"</expr></argument>, <argument><expr>&amp;<name>isHTTPS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> ||
        <name>isHTTPS</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>mAllowDNSPrefetch</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
  <expr_stmt><expr><call><name><name>mNodeInfoManager</name>-&gt;<name>SetDocumentPrincipal</name></name><argument_list>(<argument><expr><name>aNewPrincipal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetApplicationCache</name></name><parameter_list>(<param><decl><type><name>nsIApplicationCache</name> **</type><name>aApplicationCache</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aApplicationCache</name> = <name>mApplicationCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>SetApplicationCache</name></name><parameter_list>(<param><decl><type><name>nsIApplicationCache</name> *</type><name>aApplicationCache</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mApplicationCache</name> = <name>aApplicationCache</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetContentType</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aContentType</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>CopyUTF8toUTF16</name><argument_list>(<argument><expr><call><name>GetContentTypeInternal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>aContentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>SetContentType</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aContentType</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>GetContentTypeInternal</name><argument_list>()</argument_list></call>.<call><name>IsEmpty</name><argument_list>()</argument_list></call> ||
               <call><name>GetContentTypeInternal</name><argument_list>()</argument_list></call>.<call><name>Equals</name><argument_list>(<argument><expr><call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><name>aContentType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr>"Do you really want to change the content-type?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SetContentTypeInternal</name><argument_list>(<argument><expr><call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><name>aContentType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* Return true if the document is in the focused top-level window, and is an
 * ancestor of the focused DOMWindow. */</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>HasFocus</name></name><parameter_list>(<param><decl><type><name>PRBool</name>*</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aResult</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIFocusManager</name>*</type> <name>fm</name> <init>= <expr><call><name><name>nsFocusManager</name>::<name>GetFocusManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>fm</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_NOT_AVAILABLE</name></expr>;</return></then></if>

  <comment type="line">// Is there a focused DOMWindow?</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMWindow</name></expr></argument>&gt;</argument_list></name></type> <name>focusedWindow</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>fm</name>-&gt;<name>GetFocusedWindow</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>focusedWindow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>focusedWindow</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <comment type="line">// Are we an ancestor of the focused DOMWindow?</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocument</name></expr></argument>&gt;</argument_list></name></type> <name>domDocument</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>focusedWindow</name>-&gt;<name>GetDocument</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>domDocument</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></type> <name>document</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>domDocument</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for (<init><decl><type><name>nsIDocument</name>*</type> <name>currentDoc</name> <init>= <expr><name>document</name></expr></init></decl>;</init> <condition><expr><name>currentDoc</name></expr>;</condition>
       <incr><expr><name>currentDoc</name> = <call><name><name>currentDoc</name>-&gt;<name>GetParentDocument</name></name><argument_list>()</argument_list></call></expr></incr>) <block>{
    <if>if <condition>(<expr><name>currentDoc</name> == <name>this</name></expr>)</condition><then> <block>{
      <comment type="line">// Yes, we are an ancestor</comment>
      <expr_stmt><expr>*<name>aResult</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>
  }</block></for>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetReferrer</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aReferrer</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>CopyUTF8toUTF16</name><argument_list>(<argument><expr><name>mReferrer</name></expr></argument>, <argument><expr><name>aReferrer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetActiveElement</name></name><parameter_list>(<param><decl><type><name>nsIDOMElement</name> **</type><name>aElement</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aElement</name> = <name>nsnull</name></expr>;</expr_stmt>

  <comment type="line">// Get the focused element.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsPIDOMWindow</name></expr></argument>&gt;</argument_list></name></type> <name>window</name> <init>= <expr><call><name>GetWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>window</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_NOT_AVAILABLE</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsIFocusManager</name>*</type> <name>fm</name> <init>= <expr><call><name><name>nsFocusManager</name>::<name>GetFocusManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>fm</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_NOT_AVAILABLE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsPIDOMWindow</name></expr></argument>&gt;</argument_list></name></type> <name>focusedWindow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsIContent</name>*</type> <name>focusedContent</name> <init>=
    <expr><call><name><name>nsFocusManager</name>::<name>GetFocusedDescendant</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>focusedWindow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// an element in this document is focused, so return it</comment>
  <if>if <condition>(<expr><name>focusedContent</name></expr>)</condition><then> <block>{
    <comment type="line">// be safe and make sure the element is from this document</comment>
    <if>if <condition>(<expr><call><name><name>focusedContent</name>-&gt;<name>GetOwnerDoc</name></name><argument_list>()</argument_list></call> != <name>this</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"Focused element found from another document"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>focusedContent</name></expr></argument>, <argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// No focused element anywhere in this document.  Try to get the BODY.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLDocument</name></expr></argument>&gt;</argument_list></name></type> <name>htmlDoc</name> <init>=
    <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIDocument</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>htmlDoc</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLElement</name></expr></argument>&gt;</argument_list></name></type> <name>bodyElement</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>htmlDoc</name>-&gt;<name>GetBody</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>bodyElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>bodyElement</name></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>aElement</name> = <name>bodyElement</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <comment type="line">// Because of IE compatibility, return null when html document doesn't have</comment>
    <comment type="line">// a body.</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// If we couldn't get a BODY, return the root element.</comment>
  <return>return <expr><call><name>GetDocumentElement</name><argument_list>(<argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetCurrentScript</name></name><parameter_list>(<param><decl><type><name>nsIDOMElement</name> **</type><name>aElement</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIScriptElement</name>*</type> <name>script</name> <init>= <expr><call><name><name>mScriptLoader</name>-&gt;<name>GetCurrentScript</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>script</name></expr>)</condition><then> <block>{
    <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>
  
  <expr_stmt><expr>*<name>aElement</name> = <name>nsnull</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>ElementFromPoint</name></name><parameter_list>(<param><decl><type><name>float</name></type> <name>aX</name></decl></param>, <param><decl><type><name>float</name></type> <name>aY</name></decl></param>, <param><decl><type><name>nsIDOMElement</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>ElementFromPointHelper</name><argument_list>(<argument><expr><name>aX</name></expr></argument>, <argument><expr><name>aY</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>ElementFromPointHelper</name></name><parameter_list>(<param><decl><type><name>float</name></type> <name>aX</name></decl></param>, <param><decl><type><name>float</name></type> <name>aY</name></decl></param>,
                                   <param><decl><type><name>PRBool</name></type> <name>aIgnoreRootScrollFrame</name></decl></param>,
                                   <param><decl><type><name>PRBool</name></type> <name>aFlushLayout</name></decl></param>,
                                   <param><decl><type><name>nsIDOMElement</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aReturn</name> = <name>nsnull</name></expr>;</expr_stmt>
  <comment type="line">// As per the the spec, we return null if either coord is negative</comment>
  <if>if <condition>(<expr>!<name>aIgnoreRootScrollFrame</name> &amp;&amp; (<name>aX</name> &lt; 0 || <name>aY</name> &lt; 0)</expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nscoord</name></type> <name>x</name> <init>= <expr><call><name><name>nsPresContext</name>::<name>CSSPixelsToAppUnits</name></name><argument_list>(<argument><expr><name>aX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nscoord</name></type> <name>y</name> <init>= <expr><call><name><name>nsPresContext</name>::<name>CSSPixelsToAppUnits</name></name><argument_list>(<argument><expr><name>aY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>nsPoint</name></type> <name>pt</name><parameter_list>(<param><decl><type><name>x</name></type></decl></param>, <param><decl><type><name>y</name></type></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// Make sure the layout information we get is up-to-date, and</comment>
  <comment type="line">// ensure we get a root frame (for everything but XUL)</comment>
  <if>if <condition>(<expr><name>aFlushLayout</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>FlushPendingNotifications</name><argument_list>(<argument><expr><name>Flush_Layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <decl_stmt><decl><type><name>nsIPresShell</name> *</type><name>ps</name> <init>= <expr><call><name>GetShell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>nsIFrame</name> *</type><name>rootFrame</name> <init>= <expr><call><name><name>ps</name>-&gt;<name>GetRootFrame</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// XUL docs, unlike HTML, have no frame tree until everything's done loading</comment>
  <if>if <condition>(<expr>!<name>rootFrame</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if> <comment type="line">// return null to premature XUL callers as a reminder to wait</comment>

  <decl_stmt><decl><type><name>nsIFrame</name> *</type><name>ptFrame</name> <init>= <expr><call><name><name>nsLayoutUtils</name>::<name>GetFrameForPoint</name></name><argument_list>(<argument><expr><name>rootFrame</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>,
                                                      <argument><expr><name>aIgnoreRootScrollFrame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>ptFrame</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsIContent</name>*</type> <name>ptContent</name> <init>= <expr><call><name><name>ptFrame</name>-&gt;<name>GetContent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>ptContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// If the content is in a subdocument, try to get the element from |this| doc</comment>
  <decl_stmt><decl><type><name>nsIDocument</name> *</type><name>currentDoc</name> <init>= <expr><call><name><name>ptContent</name>-&gt;<name>GetCurrentDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>currentDoc</name> &amp;&amp; (<name>currentDoc</name> != <name>this</name>)</expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aReturn</name> = <call><name>CheckAncestryAndGetFrame</name><argument_list>(<argument><expr><name>currentDoc</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// If we have an anonymous element (such as an internal div from a textbox),</comment>
  <comment type="line">// or a node that isn't an element (such as a text frame node),</comment>
  <comment type="line">// replace it with the first non-anonymous parent node of type element.</comment>
  <while>while <condition>(<expr><name>ptContent</name> &amp;&amp;
         (!<call><name><name>ptContent</name>-&gt;<name>IsElement</name></name><argument_list>()</argument_list></call> ||
          <call><name><name>ptContent</name>-&gt;<name>IsInAnonymousSubtree</name></name><argument_list>()</argument_list></call>)</expr>)</condition> <block>{
    <comment type="line">// XXXldb: Faster to jump to GetBindingParent if non-null?</comment>
    <expr_stmt><expr><name>ptContent</name> = <call><name><name>ptContent</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></while>
 
  <if>if <condition>(<expr><name>ptContent</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>ptContent</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>NodesFromRectHelper</name></name><parameter_list>(<param><decl><type><name>float</name></type> <name>aX</name></decl></param>, <param><decl><type><name>float</name></type> <name>aY</name></decl></param>,
                                <param><decl><type><name>float</name></type> <name>aTopSize</name></decl></param>, <param><decl><type><name>float</name></type> <name>aRightSize</name></decl></param>,
                                <param><decl><type><name>float</name></type> <name>aBottomSize</name></decl></param>, <param><decl><type><name>float</name></type> <name>aLeftSize</name></decl></param>,
                                <param><decl><type><name>PRBool</name></type> <name>aIgnoreRootScrollFrame</name></decl></param>,
                                <param><decl><type><name>PRBool</name></type> <name>aFlushLayout</name></decl></param>,
                                <param><decl><type><name>nsIDOMNodeList</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>nsBaseContentList</name>*</type> <name>elements</name> <init>= <expr>new <call><name>nsBaseContentList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name>elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aReturn</name> = <name>elements</name></expr>;</expr_stmt>

  <comment type="line">// Following the same behavior of elementFromPoint,</comment>
  <comment type="line">// we don't return anything if either coord is negative</comment>
  <if>if <condition>(<expr>!<name>aIgnoreRootScrollFrame</name> &amp;&amp; (<name>aX</name> &lt; 0 || <name>aY</name> &lt; 0)</expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nscoord</name></type> <name>x</name> <init>= <expr><call><name><name>nsPresContext</name>::<name>CSSPixelsToAppUnits</name></name><argument_list>(<argument><expr><name>aX</name> - <name>aLeftSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nscoord</name></type> <name>y</name> <init>= <expr><call><name><name>nsPresContext</name>::<name>CSSPixelsToAppUnits</name></name><argument_list>(<argument><expr><name>aY</name> - <name>aTopSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nscoord</name></type> <name>w</name> <init>= <expr><call><name><name>nsPresContext</name>::<name>CSSPixelsToAppUnits</name></name><argument_list>(<argument><expr><name>aLeftSize</name> + <name>aRightSize</name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nscoord</name></type> <name>h</name> <init>= <expr><call><name><name>nsPresContext</name>::<name>CSSPixelsToAppUnits</name></name><argument_list>(<argument><expr><name>aTopSize</name> + <name>aBottomSize</name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>

  <function_decl><type><name>nsRect</name></type> <name>rect</name><parameter_list>(<param><decl><type><name>x</name></type></decl></param>, <param><decl><type><name>y</name></type></decl></param>, <param><decl><type><name>w</name></type></decl></param>, <param><decl><type><name>h</name></type></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// Make sure the layout information we get is up-to-date, and</comment>
  <comment type="line">// ensure we get a root frame (for everything but XUL)</comment>
  <if>if <condition>(<expr><name>aFlushLayout</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>FlushPendingNotifications</name><argument_list>(<argument><expr><name>Flush_Layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsIPresShell</name> *</type><name>ps</name> <init>= <expr><call><name>GetShell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>nsIFrame</name> *</type><name>rootFrame</name> <init>= <expr><call><name><name>ps</name>-&gt;<name>GetRootFrame</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// XUL docs, unlike HTML, have no frame tree until everything's done loading</comment>
  <if>if <condition>(<expr>!<name>rootFrame</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if> <comment type="line">// return nothing to premature XUL callers as a reminder to wait</comment>

  <decl_stmt><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsIFrame</name>*</expr></argument>&gt;</argument_list></name></type> <name>outFrames</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>nsLayoutUtils</name>::<name>GetFramesForArea</name></name><argument_list>(<argument><expr><name>rootFrame</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><name>outFrames</name></expr></argument>,
                                  <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>aIgnoreRootScrollFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>length</name> <init>= <expr><call><name><name>outFrames</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>length</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <comment type="line">// Used to filter out repeated elements in sequence.</comment>
  <decl_stmt><decl><type><name>nsIContent</name>*</type> <name>lastAdded</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

  <for>for (<init><decl><type><name>PRInt32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{

    <decl_stmt><decl><type><name>nsIContent</name>*</type> <name>ptContent</name> <init>= <expr><call><name><name>outFrames</name>.<name>ElementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>-&gt;<call><name>GetContent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>ptContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If the content is in a subdocument, try to get the element from |this| doc</comment>
    <decl_stmt><decl><type><name>nsIDocument</name> *</type><name>currentDoc</name> <init>= <expr><call><name><name>ptContent</name>-&gt;<name>GetCurrentDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>currentDoc</name> &amp;&amp; (<name>currentDoc</name> != <name>this</name>)</expr>)</condition><then> <block>{
      <comment type="line">// XXX felipe: I can't get this type right without the intermediate vars</comment>
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>x</name> <init>= <expr><call><name>CheckAncestryAndGetFrame</name><argument_list>(<argument><expr><name>currentDoc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>elementDoc</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>elementDoc</name> != <name>lastAdded</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>elements</name>-&gt;<name>AppendElement</name></name><argument_list>(<argument><expr><name>elementDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lastAdded</name> = <name>elementDoc</name></expr>;</expr_stmt>
      }</block></then></if>
      <continue>continue;</continue>
    }</block></then></if>

    <comment type="line">// If we have an anonymous element (such as an internal div from a textbox),</comment>
    <comment type="line">// or a node that isn't an element or a text node,</comment>
    <comment type="line">// replace it with the first non-anonymous parent node.</comment>
    <while>while <condition>(<expr><name>ptContent</name> &amp;&amp;
           (!(<call><name><name>ptContent</name>-&gt;<name>IsElement</name></name><argument_list>()</argument_list></call> ||
              <call><name><name>ptContent</name>-&gt;<name>IsNodeOfType</name></name><argument_list>(<argument><expr><name><name>nsINode</name>::<name>eTEXT</name></name></expr></argument>)</argument_list></call>) ||
            <call><name><name>ptContent</name>-&gt;<name>IsInAnonymousSubtree</name></name><argument_list>()</argument_list></call>)</expr>)</condition> <block>{
      <comment type="line">// XXXldb: Faster to jump to GetBindingParent if non-null?</comment>
      <expr_stmt><expr><name>ptContent</name> = <call><name><name>ptContent</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
   
    <if>if <condition>(<expr><name>ptContent</name> &amp;&amp; <name>ptContent</name> != <name>lastAdded</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>elements</name>-&gt;<name>AppendElement</name></name><argument_list>(<argument><expr><name>ptContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>lastAdded</name> = <name>ptContent</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetElementsByClassName</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aClasses</name></decl></param>,
                                   <param><decl><type><name>nsIDOMNodeList</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsContentUtils</name>::<name>GetElementsByClassName</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aClasses</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>ReleaseCapture</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// only release the capture if the caller can access it. This prevents a</comment>
  <comment type="line">// page from stopping a scrollbar grab for example.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>node</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name><name>nsIPresShell</name>::<name>GetCapturingContent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>node</name> &amp;&amp; <call><name><name>nsContentUtils</name>::<name>CanCallerAccess</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>nsIPresShell</name>::<name>SetCapturingContent</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>SetBaseURI</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>aURI</name> &amp;&amp; !<name>mDocumentBaseURI</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>
  
  <comment type="line">// Don't do anything if the URI wasn't actually changed.</comment>
  <if>if <condition>(<expr><name>aURI</name> &amp;&amp; <name>mDocumentBaseURI</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRBool</name></type> <name>equalBases</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mDocumentBaseURI</name>-&gt;<name>Equals</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr>&amp;<name>equalBases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>equalBases</name></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <if>if <condition>(<expr><name>aURI</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mDocumentBaseURI</name> = <call><name>NS_TryToMakeImmutable</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><name>mDocumentBaseURI</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></else></if>
  <expr_stmt><expr><call><name>RefreshLinkHrefs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>GetBaseTarget</name></name><parameter_list>(<param><decl><type><name>nsAString</name> &amp;</type><name>aBaseTarget</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>aBaseTarget</name> = <name>mBaseTarget</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>SetDocumentCharacterSet</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aCharSetID</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name><name>mCharacterSet</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>aCharSetID</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mCharacterSet</name> = <name>aCharSetID</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsICharsetAlias</name></expr></argument>&gt;</argument_list></name></type> <name>calias</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_CHARSETALIAS_CONTRACTID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>calias</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>canonicalName</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>calias</name>-&gt;<name>GetPreferred</name></name><argument_list>(<argument><expr><name>aCharSetID</name></expr></argument>, <argument><expr><name>canonicalName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>canonicalName</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>aCharSetID</name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr>"charset name must be canonical"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>PRInt32</name></type> <name>n</name> <init>= <expr><call><name><name>mCharSetObservers</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for (<init><decl><type><name>PRInt32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
      <decl_stmt><decl><type><name>nsIObserver</name>*</type> <name>observer</name> <init>= <expr><call><name><name>mCharSetObservers</name>.<name>ElementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>observer</name>-&gt;<name>Observe</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIDocument</name> *</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"charset"</expr></argument>,
                        <argument><expr><call><name>NS_ConvertASCIItoUTF16</name><argument_list>(<argument><expr><name>aCharSetID</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></then></if>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>AddCharSetObserver</name></name><parameter_list>(<param><decl><type><name>nsIObserver</name>*</type> <name>aObserver</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aObserver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><call><name><name>mCharSetObservers</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>aObserver</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>RemoveCharSetObserver</name></name><parameter_list>(<param><decl><type><name>nsIObserver</name>*</type> <name>aObserver</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>mCharSetObservers</name>.<name>RemoveElement</name></name><argument_list>(<argument><expr><name>aObserver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>GetHeaderData</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aHeaderField</name></decl></param>, <param><decl><type><name>nsAString</name>&amp;</type> <name>aData</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <expr_stmt><expr><call><name><name>aData</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsDocHeaderData</name>*</type> <name>data</name> <init>= <expr><name>mHeaderData</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>data</name></expr>)</condition> <block>{
    <if>if <condition>(<expr><name><name>data</name>-&gt;<name>mField</name></name> == <name>aHeaderField</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>aData</name> = <name><name>data</name>-&gt;<name>mData</name></name></expr>;</expr_stmt>

      <break>break;</break>
    }</block></then></if>
    <expr_stmt><expr><name>data</name> = <name><name>data</name>-&gt;<name>mNext</name></name></expr>;</expr_stmt>
  }</block></while>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>SetHeaderData</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aHeaderField</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>aHeaderField</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"null headerField"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <if>if <condition>(<expr>!<name>mHeaderData</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr>!<call><name><name>aData</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <comment type="line">// don't bother storing empty string</comment>
      <expr_stmt><expr><name>mHeaderData</name> = new <call><name>nsDocHeaderData</name><argument_list>(<argument><expr><name>aHeaderField</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then>
  <else>else <block>{
    <decl_stmt><decl><type><name>nsDocHeaderData</name>*</type> <name>data</name> <init>= <expr><name>mHeaderData</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsDocHeaderData</name>**</type> <name>lastPtr</name> <init>= <expr>&amp;<name>mHeaderData</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>found</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
    <do>do <block>{  <comment type="line">// look for existing and replace</comment>
      <if>if <condition>(<expr><name><name>data</name>-&gt;<name>mField</name></name> == <name>aHeaderField</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name><name>aData</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>data</name>-&gt;<name>mData</name>.<name>Assign</name></name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{  <comment type="line">// don't store empty string</comment>
          <expr_stmt><expr>*<name>lastPtr</name> = <name><name>data</name>-&gt;<name>mNext</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>data</name>-&gt;<name>mNext</name></name> = <name>nsnull</name></expr>;</expr_stmt>
          <expr_stmt><expr>delete <name>data</name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>found</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

        <break>break;</break>
      }</block></then></if>
      <expr_stmt><expr><name>lastPtr</name> = &amp;(<name><name>data</name>-&gt;<name>mNext</name></name>)</expr>;</expr_stmt>
      <expr_stmt><expr><name>data</name> = *<name>lastPtr</name></expr>;</expr_stmt>
    }</block> while <condition>(<expr><name>data</name></expr>)</condition>;</do>

    <if>if <condition>(<expr>!<call><name><name>aData</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call> &amp;&amp; !<name>found</name></expr>)</condition><then> <block>{
      <comment type="line">// didn't find, append</comment>
      <expr_stmt><expr>*<name>lastPtr</name> = new <call><name>nsDocHeaderData</name><argument_list>(<argument><expr><name>aHeaderField</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></else></if>

  <if>if <condition>(<expr><name>aHeaderField</name> == <name><name>nsGkAtoms</name>::<name>headerContentLanguage</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>CopyUTF16toUTF8</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><name>mContentLanguage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// Set the default script-type on the root element.</comment>
  <if>if <condition>(<expr><name>aHeaderField</name> == <name><name>nsGkAtoms</name>::<name>headerContentScriptType</name></name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>Element</name> *</type><name>root</name> <init>= <expr><call><name>GetRootElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>root</name></expr>)</condition><then> <block>{
      <comment type="line">// Get the script-type ID for this value.</comment>
      <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScriptRuntime</name></expr></argument>&gt;</argument_list></name></type> <name>runtime</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rv</name> = <call><name>NS_GetScriptRuntime</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>runtime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> || <name>runtime</name> == <name>nsnull</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"The script-type is unknown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>root</name>-&gt;<name>SetScriptTypeID</name></name><argument_list>(<argument><expr><call><name><name>runtime</name>-&gt;<name>GetScriptTypeID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then></if>
  }</block></then></if>

  <if>if <condition>(<expr><name>aHeaderField</name> == <name><name>nsGkAtoms</name>::<name>headerDefaultStyle</name></name></expr>)</condition><then> <block>{
    <comment type="line">// Only mess with our stylesheets if we don't have a lastStyleSheetSet, per</comment>
    <comment type="line">// spec.</comment>
    <if>if <condition>(<expr><call><name>DOMStringIsNull</name><argument_list>(<argument><expr><name>mLastStyleSheetSet</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <comment type="line">// Calling EnableStyleSheetsForSetInternal, not SetSelectedStyleSheetSet,</comment>
      <comment type="line">// per spec.  The idea here is that we're changing our preferred set and</comment>
      <comment type="line">// that shouldn't change the value of lastStyleSheetSet.  Also, we're</comment>
      <comment type="line">// using the Internal version so we can update the CSSLoader and not have</comment>
      <comment type="line">// to worry about null strings.</comment>
      <expr_stmt><expr><call><name>EnableStyleSheetsForSetInternal</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <if>if <condition>(<expr><name>aHeaderField</name> == <name><name>nsGkAtoms</name>::<name>refresh</name></name></expr>)</condition><then> <block>{
    <comment type="line">// We get into this code before we have a script global yet, so get to</comment>
    <comment type="line">// our container via mDocumentContainer.</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIRefreshURI</name></expr></argument>&gt;</argument_list></name></type> <name>refresher</name> <init>= <expr><call><name>do_QueryReferent</name><argument_list>(<argument><expr><name>mDocumentContainer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>refresher</name></expr>)</condition><then> <block>{
      <comment type="line">// Note: using mDocumentURI instead of mBaseURI here, for consistency</comment>
      <comment type="line">// (used to just use the current URI of our webnavigation, but that</comment>
      <comment type="line">// should really be the same thing).  Note that this code can run</comment>
      <comment type="line">// before the current URI of the webnavigation has been updated, so we</comment>
      <comment type="line">// can't assert equality here.</comment>
      <expr_stmt><expr><call><name><name>refresher</name>-&gt;<name>SetupRefreshURIFromHeader</name></name><argument_list>(<argument><expr><name>mDocumentURI</name></expr></argument>,
                                           <argument><expr><call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <if>if <condition>(<expr><name>aHeaderField</name> == <name><name>nsGkAtoms</name>::<name>headerDNSPrefetchControl</name></name> &amp;&amp;
      <name>mAllowDNSPrefetch</name></expr>)</condition><then> <block>{
    <comment type="line">// Chromium treats any value other than 'on' (case insensitive) as 'off'.</comment>
    <expr_stmt><expr><name>mAllowDNSPrefetch</name> = <call><name><name>aData</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call> || <call><name><name>aData</name>.<name>LowerCaseEqualsLiteral</name></name><argument_list>(<argument><expr>"on"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsDocument</name>::<name>TryChannelCharset</name></name><parameter_list>(<param><decl><type><name>nsIChannel</name> *</type><name>aChannel</name></decl></param>,
                              <param><decl><type><name>PRInt32</name>&amp;</type> <name>aCharsetSource</name></decl></param>,
                              <param><decl><type><name>nsACString</name>&amp;</type> <name>aCharset</name></decl></param>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name>kCharsetFromChannel</name> &lt;= <name>aCharsetSource</name></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_TRUE</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><name>aChannel</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>charsetVal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>aChannel</name>-&gt;<name>GetContentCharset</name></name><argument_list>(<argument><expr><name>charsetVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsICharsetAlias</name></expr></argument>&gt;</argument_list></name></type> <name>calias</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_CHARSETALIAS_CONTRACTID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>calias</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>preferred</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name><name>calias</name>-&gt;<name>GetPreferred</name></name><argument_list>(<argument><expr><name>charsetVal</name></expr></argument>,
                                  <argument><expr><name>preferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>aCharset</name> = <name>preferred</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>aCharsetSource</name> = <name>kCharsetFromChannel</name></expr>;</expr_stmt>
          <return>return <expr><name>PR_TRUE</name></expr>;</return>
        }</block></then></if>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>
  <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>CreateShell</name></name><parameter_list>(<param><decl><type><name>nsPresContext</name>*</type> <name>aContext</name></decl></param>, <param><decl><type><name>nsIViewManager</name>*</type> <name>aViewManager</name></decl></param>,
                        <param><decl><type><name>nsStyleSet</name>*</type> <name>aStyleSet</name></decl></param>,
                        <param><decl><type><name>nsIPresShell</name>**</type> <name>aInstancePtrResult</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Don't add anything here.  Add it to |doCreateShell| instead.</comment>
  <comment type="line">// This exists so that subclasses can pass other values for the 4th</comment>
  <comment type="line">// parameter some of the time.</comment>
  <return>return <expr><call><name>doCreateShell</name><argument_list>(<argument><expr><name>aContext</name></expr></argument>, <argument><expr><name>aViewManager</name></expr></argument>, <argument><expr><name>aStyleSet</name></expr></argument>,
                       <argument><expr><name>eCompatibility_FullStandards</name></expr></argument>, <argument><expr><name>aInstancePtrResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>doCreateShell</name></name><parameter_list>(<param><decl><type><name>nsPresContext</name>*</type> <name>aContext</name></decl></param>,
                          <param><decl><type><name>nsIViewManager</name>*</type> <name>aViewManager</name></decl></param>, <param><decl><type><name>nsStyleSet</name>*</type> <name>aStyleSet</name></decl></param>,
                          <param><decl><type><name>nsCompatibility</name></type> <name>aCompatMode</name></decl></param>,
                          <param><decl><type><name>nsIPresShell</name>**</type> <name>aInstancePtrResult</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aInstancePtrResult</name> = <name>nsnull</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>mPresShell</name></expr></argument>, <argument><expr>"We have a presshell already!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ENSURE_FALSE</name><argument_list>(<argument><expr><call><name>GetBFCacheEntry</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>FillStyleSet</name><argument_list>(<argument><expr><name>aStyleSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>shell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_NewPresShell</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>rv</name> = <call><name><name>shell</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aContext</name></expr></argument>, <argument><expr><name>aViewManager</name></expr></argument>, <argument><expr><name>aStyleSet</name></expr></argument>, <argument><expr><name>aCompatMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Note: we don't hold a ref to the shell (it holds a ref to us)</comment>
  <expr_stmt><expr><name>mPresShell</name> = <name>shell</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>mExternalResourceMap</name>.<name>ShowViewers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsRefreshDriver</name>*</type> <name>rd</name> <init>= <expr><call><name><name>mPresShell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call>-&gt;<call><name>RefreshDriver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>mHavePendingPaint</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>rd</name>-&gt;<name>ScheduleBeforePaintEvent</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr>!<call><name><name>mAnimationFrameListeners</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>rd</name>-&gt;<name>ScheduleAnimationFrameListeners</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>shell</name>.<name>swap</name></name><argument_list>(<argument><expr>*<name>aInstancePtrResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIDocument</name>::<name>TakeAnimationFrameListeners</name></name><parameter_list>(<param><decl><type><name>AnimationListenerList</name>&amp;</type> <name>aListeners</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aListeners</name>.<name>AppendElements</name></name><argument_list>(<argument><expr><name>mAnimationFrameListeners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mAnimationFrameListeners</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>DeleteShell</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>mExternalResourceMap</name>.<name>HideViewers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>mHavePendingPaint</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mPresShell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call>-&gt;<call><name>RefreshDriver</name><argument_list>()</argument_list></call>-&gt;<call><name>RevokeBeforePaintEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr>!<call><name><name>mAnimationFrameListeners</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mPresShell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call>-&gt;<call><name>RefreshDriver</name><argument_list>()</argument_list></call>-&gt;
      <call><name>RevokeAnimationFrameListeners</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><name>mPresShell</name> = <name>nsnull</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SubDocClearEntry</name><parameter_list>(<param><decl><type><name>PLDHashTable</name> *</type><name>table</name></decl></param>, <param><decl><type><name>PLDHashEntryHdr</name> *</type><name>entry</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>SubDocMapEntry</name> *</type><name>e</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>SubDocMapEntry</name> *</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name><name>e</name>-&gt;<name>mKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>e</name>-&gt;<name>mSubDocument</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>e</name>-&gt;<name>mSubDocument</name>-&gt;<name>SetParentDocument</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name><name>e</name>-&gt;<name>mSubDocument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>SubDocInitEntry</name><parameter_list>(<param><decl><type><name>PLDHashTable</name> *</type><name>table</name></decl></param>, <param><decl><type><name>PLDHashEntryHdr</name> *</type><name>entry</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>SubDocMapEntry</name> *</type><name>e</name> <init>=
    <expr><call><name><name>const_cast</name><argument_list>&lt;<argument><expr><name>SubDocMapEntry</name> *</expr></argument>&gt;</argument_list></name>
              <argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><specifier>const</specifier> <name>SubDocMapEntry</name> *</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>e</name>-&gt;<name>mKey</name></name> = <call><name><name>const_cast</name><argument_list>&lt;<argument><expr><name>nsIContent</name> *</expr></argument>&gt;</argument_list></name>
                      <argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><specifier>const</specifier> <name>nsIContent</name> *</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name><name>e</name>-&gt;<name>mKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>e</name>-&gt;<name>mSubDocument</name></name> = <name>nsnull</name></expr>;</expr_stmt>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>SetSubDocumentFor</name></name><parameter_list>(<param><decl><type><name>nsIContent</name> *</type><name>aContent</name></decl></param>, <param><decl><type><name>nsIDocument</name>*</type> <name>aSubDoc</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>, <argument><expr><name>NS_ERROR_UNEXPECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>aSubDoc</name></expr>)</condition><then> <block>{
    <comment type="line">// aSubDoc is nsnull, remove the mapping</comment>

    <if>if <condition>(<expr><name>mSubDocuments</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>SubDocMapEntry</name> *</type><name>entry</name> <init>=
        <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>SubDocMapEntry</name>*</expr></argument>&gt;</argument_list></name>
                   <argument_list>(<argument><expr><call><name>PL_DHashTableOperate</name><argument_list>(<argument><expr><name>mSubDocuments</name></expr></argument>, <argument><expr><name>aContent</name></expr></argument>,
                                            <argument><expr><name>PL_DHASH_LOOKUP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name>PL_DHASH_ENTRY_IS_BUSY</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PL_DHashTableRawRemove</name><argument_list>(<argument><expr><name>mSubDocuments</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></then> <else>else <block>{
    <if>if <condition>(<expr>!<name>mSubDocuments</name></expr>)</condition><then> <block>{
      <comment type="line">// Create a new hashtable</comment>

      <decl_stmt><decl><type><specifier>static</specifier> <name>PLDHashTableOps</name></type> <name>hash_table_ops</name> <init>=
      <expr><block>{
        <expr><name>PL_DHashAllocTable</name></expr>,
        <expr><name>PL_DHashFreeTable</name></expr>,
        <expr><name>PL_DHashVoidPtrKeyStub</name></expr>,
        <expr><name>PL_DHashMatchEntryStub</name></expr>,
        <expr><name>PL_DHashMoveEntryStub</name></expr>,
        <expr><name>SubDocClearEntry</name></expr>,
        <expr><name>PL_DHashFinalizeStub</name></expr>,
        <expr><name>SubDocInitEntry</name></expr>
      }</block></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>mSubDocuments</name> = <call><name>PL_NewDHashTable</name><argument_list>(<argument><expr>&amp;<name>hash_table_ops</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                                       <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SubDocMapEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>!<name>mSubDocuments</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
      }</block></then></if>
    }</block></then></if>

    <comment type="line">// Add a mapping to the hash table</comment>
    <decl_stmt><decl><type><name>SubDocMapEntry</name> *</type><name>entry</name> <init>=
      <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>SubDocMapEntry</name>*</expr></argument>&gt;</argument_list></name>
                 <argument_list>(<argument><expr><call><name>PL_DHashTableOperate</name><argument_list>(<argument><expr><name>mSubDocuments</name></expr></argument>, <argument><expr><name>aContent</name></expr></argument>,
                                          <argument><expr><name>PL_DHASH_ADD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>mSubDocument</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>entry</name>-&gt;<name>mSubDocument</name>-&gt;<name>SetParentDocument</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Release the old sub document</comment>
      <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>mSubDocument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name><name>entry</name>-&gt;<name>mSubDocument</name></name> = <name>aSubDoc</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>mSubDocument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>aSubDoc</name>-&gt;<name>SetParentDocument</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsIDocument</name>*</type>
<name><name>nsDocument</name>::<name>GetSubDocumentFor</name></name><parameter_list>(<param><decl><type><name>nsIContent</name> *</type><name>aContent</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <if>if <condition>(<expr><name>mSubDocuments</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>SubDocMapEntry</name> *</type><name>entry</name> <init>=
      <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>SubDocMapEntry</name>*</expr></argument>&gt;</argument_list></name>
                 <argument_list>(<argument><expr><call><name>PL_DHashTableOperate</name><argument_list>(<argument><expr><name>mSubDocuments</name></expr></argument>, <argument><expr><name>aContent</name></expr></argument>,
                                          <argument><expr><name>PL_DHASH_LOOKUP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>PL_DHASH_ENTRY_IS_BUSY</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name><name>entry</name>-&gt;<name>mSubDocument</name></name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><name>nsnull</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>FindContentEnumerator</name><parameter_list>(<param><decl><type><name>PLDHashTable</name> *</type><name>table</name></decl></param>, <param><decl><type><name>PLDHashEntryHdr</name> *</type><name>hdr</name></decl></param>,
                      <param><decl><type><name>PRUint32</name></type> <name>number</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>SubDocMapEntry</name> *</type><name>entry</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>SubDocMapEntry</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FindContentData</name> *</type><name>data</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>FindContentData</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>mSubDocument</name></name> == <name><name>data</name>-&gt;<name>mSubDocument</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name><name>data</name>-&gt;<name>mResult</name></name> = <name><name>entry</name>-&gt;<name>mKey</name></name></expr>;</expr_stmt>

    <return>return <expr><name>PL_DHASH_STOP</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<function><type><name>nsIContent</name>*</type>
<name><name>nsDocument</name>::<name>FindContentForSubDocument</name></name><parameter_list>(<param><decl><type><name>nsIDocument</name> *</type><name>aDocument</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>mSubDocuments</name></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <function_decl><type><name>FindContentData</name></type> <name>data</name><parameter_list>(<param><decl><type><name>aDocument</name></type></decl></param>)</parameter_list>;</function_decl>
  <expr_stmt><expr><call><name>PL_DHashTableEnumerate</name><argument_list>(<argument><expr><name>mSubDocuments</name></expr></argument>, <argument><expr><name>FindContentEnumerator</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name><name>data</name>.<name>mResult</name></name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsDocument</name>::<name>IsNodeOfType</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aFlags</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
    <return>return <expr>!(<name>aFlags</name> &amp; ~<name>eDOCUMENT</name>)</expr>;</return>
}</block></function>

<function><type><name>Element</name>*</type>
<name><name>nsDocument</name>::<name>GetRootElementInternal</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <comment type="line">// Loop backwards because any non-elements, such as doctypes and PIs</comment>
  <comment type="line">// are likely to appear before the root element.</comment>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for (<init><expr><name>i</name> = <call><name><name>mChildren</name>.<name>ChildCount</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>i</name> &gt; 0</expr>;</condition> <incr><expr>--<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsIContent</name>*</type> <name>child</name> <init>= <expr><call><name><name>mChildren</name>.<name>ChildAt</name></name><argument_list>(<argument><expr><name>i</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>child</name>-&gt;<name>IsElement</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>const_cast</name><argument_list>&lt;<argument><expr><name>nsDocument</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>-&gt;<name>mCachedRootElement</name> = <name>child</name></expr>;</expr_stmt>
      <return>return <expr><call><name><name>child</name>-&gt;<name>AsElement</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>
  }</block></for>
  
  <expr_stmt><expr><call><name><name>const_cast</name><argument_list>&lt;<argument><expr><name>nsDocument</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>-&gt;<name>mCachedRootElement</name> = <name>nsnull</name></expr>;</expr_stmt>
  <return>return <expr><name>nsnull</name></expr>;</return>
}</block></function>

<function><type><name>nsIContent</name> *</type>
<name><name>nsDocument</name>::<name>GetChildAt</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aIndex</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><call><name><name>mChildren</name>.<name>GetSafeChildAt</name></name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PRInt32</name></type>
<name><name>nsDocument</name>::<name>IndexOf</name></name><parameter_list>(<param><decl><type><name>nsINode</name>*</type> <name>aPossibleChild</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><call><name><name>mChildren</name>.<name>IndexOfChild</name></name><argument_list>(<argument><expr><name>aPossibleChild</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PRUint32</name></type>
<name><name>nsDocument</name>::<name>GetChildCount</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><call><name><name>mChildren</name>.<name>ChildCount</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsIContent</name> * <specifier>const</specifier> *</type>
<name><name>nsDocument</name>::<name>GetChildArray</name></name><parameter_list>(<param><decl><type><name>PRUint32</name>*</type> <name>aChildCount</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><call><name><name>mChildren</name>.<name>GetChildArray</name></name><argument_list>(<argument><expr><name>aChildCount</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
  

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>InsertChildAt</name></name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type> <name>aKid</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aIndex</name></decl></param>,
                          <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name><name>aKid</name>-&gt;<name>IsElement</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name>GetRootElement</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Inserting element child when we already have one"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_DOM_HIERARCHY_REQUEST_ERR</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name>doInsertChildAt</name><argument_list>(<argument><expr><name>aKid</name></expr></argument>, <argument><expr><name>aIndex</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>, <argument><expr><name>mChildren</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>AppendChildTo</name></name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type> <name>aKid</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Make sure to _not_ call the subclass InsertChildAt here.  If</comment>
  <comment type="line">// subclasses wanted to hook into this stuff, they would have</comment>
  <comment type="line">// overridden AppendChildTo.</comment>
  <comment type="line">// XXXbz maybe this should just be a non-virtual method on nsINode?</comment>
  <comment type="line">// Feels that way to me...</comment>
  <return>return <expr><call><name><name>nsDocument</name>::<name>InsertChildAt</name></name><argument_list>(<argument><expr><name>aKid</name></expr></argument>, <argument><expr><call><name>GetChildCount</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>RemoveChildAt</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aIndex</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aMutationEvent</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aMutationEvent</name></expr></argument>, <argument><expr>"Someone tried to inhibit mutations on document child removal."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>oldKid</name> <init>= <expr><call><name>GetChildAt</name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>oldKid</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><call><name><name>oldKid</name>-&gt;<name>IsElement</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// Destroy the link map up front before we mess with the child list.</comment>
    <expr_stmt><expr><call><name>DestroyElementMaps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>=
    <expr><call><name>doRemoveChildAt</name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>, <argument><expr><name>oldKid</name></expr></argument>, <argument><expr><name>mChildren</name></expr></argument>, <argument><expr><name>aMutationEvent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>mCachedRootElement</name> = <name>nsnull</name></expr>;</expr_stmt>
  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>PRInt32</name></type>
<name><name>nsDocument</name>::<name>GetNumberOfStyleSheets</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><call><name><name>mStyleSheets</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsIStyleSheet</name>*</type>
<name><name>nsDocument</name>::<name>GetStyleSheetAt</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aIndex</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr>0 &lt;= <name>aIndex</name> &amp;&amp; <name>aIndex</name> &lt; <call><name><name>mStyleSheets</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>mStyleSheets</name><index>[<expr><name>aIndex</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>PRInt32</name></type>
<name><name>nsDocument</name>::<name>GetIndexOfStyleSheet</name></name><parameter_list>(<param><decl><type><name>nsIStyleSheet</name>*</type> <name>aSheet</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><call><name><name>mStyleSheets</name>.<name>IndexOf</name></name><argument_list>(<argument><expr><name>aSheet</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>AddStyleSheetToStyleSets</name></name><parameter_list>(<param><decl><type><name>nsIStyleSheet</name>*</type> <name>aSheet</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>shell</name> <init>= <expr><call><name>GetShell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>shell</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>shell</name>-&gt;<name>StyleSet</name></name><argument_list>()</argument_list></call>-&gt;<call><name>AddDocStyleSheet</name><argument_list>(<argument><expr><name>aSheet</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>AddStyleSheet</name></name><parameter_list>(<param><decl><type><name>nsIStyleSheet</name>*</type> <name>aSheet</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aSheet</name></expr></argument>, <argument><expr>"null arg"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mStyleSheets</name>.<name>AppendObject</name></name><argument_list>(<argument><expr><name>aSheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>aSheet</name>-&gt;<name>SetOwningDocument</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name><name>aSheet</name>-&gt;<name>IsApplicable</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>AddStyleSheetToStyleSets</name><argument_list>(<argument><expr><name>aSheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name>NS_DOCUMENT_NOTIFY_OBSERVERS</name><argument_list>(<argument><expr><name>StyleSheetAdded</name></expr></argument>, <argument><expr>(<name>this</name>, <name>aSheet</name>, <name>PR_TRUE</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>RemoveStyleSheetFromStyleSets</name></name><parameter_list>(<param><decl><type><name>nsIStyleSheet</name>*</type> <name>aSheet</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>shell</name> <init>= <expr><call><name>GetShell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>shell</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>shell</name>-&gt;<name>StyleSet</name></name><argument_list>()</argument_list></call>-&gt;<call><name>RemoveStyleSheet</name><argument_list>(<argument><expr><name><name>nsStyleSet</name>::<name>eDocSheet</name></name></expr></argument>, <argument><expr><name>aSheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>RemoveStyleSheet</name></name><parameter_list>(<param><decl><type><name>nsIStyleSheet</name>*</type> <name>aSheet</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aSheet</name></expr></argument>, <argument><expr>"null arg"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIStyleSheet</name></expr></argument>&gt;</argument_list></name></type> <name>sheet</name> <init>= <expr><name>aSheet</name></expr></init></decl>;</decl_stmt> <comment type="line">// hold ref so it won't die too soon</comment>

  <if>if <condition>(<expr>!<call><name><name>mStyleSheets</name>.<name>RemoveObject</name></name><argument_list>(<argument><expr><name>aSheet</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_NOTREACHED</name><argument_list>(<argument><expr>"stylesheet not found"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <if>if <condition>(<expr>!<name>mIsGoingAway</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><call><name><name>aSheet</name>-&gt;<name>IsApplicable</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>RemoveStyleSheetFromStyleSets</name><argument_list>(<argument><expr><name>aSheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>NS_DOCUMENT_NOTIFY_OBSERVERS</name><argument_list>(<argument><expr><name>StyleSheetRemoved</name></expr></argument>, <argument><expr>(<name>this</name>, <name>aSheet</name>, <name>PR_TRUE</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>aSheet</name>-&gt;<name>SetOwningDocument</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>UpdateStyleSheets</name></name><parameter_list>(<param><decl><type><name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsIStyleSheet</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aOldSheets</name></decl></param>,
                              <param><decl><type><name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsIStyleSheet</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aNewSheets</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>BeginUpdate</name><argument_list>(<argument><expr><name>UPDATE_STYLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// XXX Need to set the sheet on the ownernode, if any</comment>
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><call><name><name>aOldSheets</name>.<name>Count</name></name><argument_list>()</argument_list></call> == <call><name><name>aNewSheets</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></argument>,
                  <argument><expr>"The lists must be the same length!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>count</name> <init>= <expr><call><name><name>aOldSheets</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIStyleSheet</name></expr></argument>&gt;</argument_list></name></type> <name>oldSheet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <expr_stmt><expr><name>oldSheet</name> = <name><name>aOldSheets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="line">// First remove the old sheet.</comment>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>oldSheet</name></expr></argument>, <argument><expr>"None of the old sheets should be null"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>oldIndex</name> <init>= <expr><call><name><name>mStyleSheets</name>.<name>IndexOf</name></name><argument_list>(<argument><expr><name>oldSheet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RemoveStyleSheet</name><argument_list>(<argument><expr><name>oldSheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// This does the right notifications</comment>

    <comment type="line">// Now put the new one in its place.  If it's null, just ignore it.</comment>
    <decl_stmt><decl><type><name>nsIStyleSheet</name>*</type> <name>newSheet</name> <init>= <expr><name><name>aNewSheets</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>newSheet</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mStyleSheets</name>.<name>InsertObjectAt</name></name><argument_list>(<argument><expr><name>newSheet</name></expr></argument>, <argument><expr><name>oldIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>newSheet</name>-&gt;<name>SetOwningDocument</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name><name>newSheet</name>-&gt;<name>IsApplicable</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>AddStyleSheetToStyleSets</name><argument_list>(<argument><expr><name>newSheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><call><name>NS_DOCUMENT_NOTIFY_OBSERVERS</name><argument_list>(<argument><expr><name>StyleSheetAdded</name></expr></argument>, <argument><expr>(<name>this</name>, <name>newSheet</name>, <name>PR_TRUE</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>

  <expr_stmt><expr><call><name>EndUpdate</name><argument_list>(<argument><expr><name>UPDATE_STYLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>InsertStyleSheetAt</name></name><parameter_list>(<param><decl><type><name>nsIStyleSheet</name>*</type> <name>aSheet</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aIndex</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aSheet</name></expr></argument>, <argument><expr>"null ptr"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mStyleSheets</name>.<name>InsertObjectAt</name></name><argument_list>(<argument><expr><name>aSheet</name></expr></argument>, <argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>aSheet</name>-&gt;<name>SetOwningDocument</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name><name>aSheet</name>-&gt;<name>IsApplicable</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>AddStyleSheetToStyleSets</name><argument_list>(<argument><expr><name>aSheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name>NS_DOCUMENT_NOTIFY_OBSERVERS</name><argument_list>(<argument><expr><name>StyleSheetAdded</name></expr></argument>, <argument><expr>(<name>this</name>, <name>aSheet</name>, <name>PR_TRUE</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>SetStyleSheetApplicableState</name></name><parameter_list>(<param><decl><type><name>nsIStyleSheet</name>*</type> <name>aSheet</name></decl></param>,
                                         <param><decl><type><name>PRBool</name></type> <name>aApplicable</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aSheet</name></expr></argument>, <argument><expr>"null arg"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// If we're actually in the document style sheet list</comment>
  <if>if <condition>(<expr>-1 != <call><name><name>mStyleSheets</name>.<name>IndexOf</name></name><argument_list>(<argument><expr><name>aSheet</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>aApplicable</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>AddStyleSheetToStyleSets</name><argument_list>(<argument><expr><name>aSheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>RemoveStyleSheetFromStyleSets</name><argument_list>(<argument><expr><name>aSheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then></if>

  <comment type="line">// We have to always notify, since this will be called for sheets</comment>
  <comment type="line">// that are children of sheets in our style set, as well as some</comment>
  <comment type="line">// sheets for nsHTMLEditor.</comment>

  <expr_stmt><expr><call><name>NS_DOCUMENT_NOTIFY_OBSERVERS</name><argument_list>(<argument><expr><name>StyleSheetApplicableStateChanged</name></expr></argument>,
                               <argument><expr>(<name>this</name>, <name>aSheet</name>, <name>aApplicable</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line">// These three functions are a lot like the implementation of the</comment>
<comment type="line">// corresponding API for regular stylesheets.</comment>

<function><type><name>PRInt32</name></type>
<name><name>nsDocument</name>::<name>GetNumberOfCatalogStyleSheets</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><call><name><name>mCatalogSheets</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsIStyleSheet</name>*</type>
<name><name>nsDocument</name>::<name>GetCatalogStyleSheetAt</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aIndex</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr>0 &lt;= <name>aIndex</name> &amp;&amp; <name>aIndex</name> &lt; <call><name><name>mCatalogSheets</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>mCatalogSheets</name><index>[<expr><name>aIndex</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>AddCatalogStyleSheet</name></name><parameter_list>(<param><decl><type><name>nsIStyleSheet</name>*</type> <name>aSheet</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>mCatalogSheets</name>.<name>AppendObject</name></name><argument_list>(<argument><expr><name>aSheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>aSheet</name>-&gt;<name>SetOwningDocument</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name><name>aSheet</name>-&gt;<name>IsApplicable</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// This is like |AddStyleSheetToStyleSets|, but for an agent sheet.</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>shell</name> <init>= <expr><call><name>GetShell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>shell</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>shell</name>-&gt;<name>StyleSet</name></name><argument_list>()</argument_list></call>-&gt;<call><name>AppendStyleSheet</name><argument_list>(<argument><expr><name><name>nsStyleSet</name>::<name>eAgentSheet</name></name></expr></argument>, <argument><expr><name>aSheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
                                                                                
  <expr_stmt><expr><call><name>NS_DOCUMENT_NOTIFY_OBSERVERS</name><argument_list>(<argument><expr><name>StyleSheetAdded</name></expr></argument>, <argument><expr>(<name>this</name>, <name>aSheet</name>, <name>PR_FALSE</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>EnsureCatalogStyleSheet</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aStyleSheetURI</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>mozilla</name>::<name>css</name>::<name>Loader</name></name>*</type> <name>cssLoader</name> <init>= <expr><call><name>CSSLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name><name>cssLoader</name>-&gt;<name>GetEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>sheetCount</name> <init>= <expr><call><name>GetNumberOfCatalogStyleSheets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>PRInt32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>sheetCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
      <decl_stmt><decl><type><name>nsIStyleSheet</name>*</type> <name>sheet</name> <init>= <expr><call><name>GetCatalogStyleSheetAt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>sheet</name></expr></argument>, <argument><expr>"unexpected null stylesheet in the document"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>sheet</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>uriStr</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sheet</name>-&gt;<name>GetSheetURI</name></name><argument_list>()</argument_list></call>-&gt;<call><name>GetSpec</name><argument_list>(<argument><expr><name>uriStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>uriStr</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>aStyleSheetURI</name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <return>return;</return></then></if>
      }</block></then></if>
    }</block></for>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_NewURI</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aStyleSheetURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>uri</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsCSSStyleSheet</name></expr></argument>&gt;</argument_list></name></type> <name>sheet</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>cssLoader</name>-&gt;<name>LoadSheetSync</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>sheet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>sheet</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>BeginUpdate</name><argument_list>(<argument><expr><name>UPDATE_STYLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>AddCatalogStyleSheet</name><argument_list>(<argument><expr><name>sheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EndUpdate</name><argument_list>(<argument><expr><name>UPDATE_STYLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>
}</block></function>

<function><type><name>nsIScriptGlobalObject</name>*</type>
<name><name>nsDocument</name>::<name>GetScriptGlobalObject</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
   <comment type="line">// If we're going away, we've already released the reference to our</comment>
   <comment type="line">// ScriptGlobalObject.  We can, however, try to obtain it for the</comment>
   <comment type="line">// caller through our docshell.</comment>

   <comment type="line">// We actually need to start returning the docshell's script global</comment>
   <comment type="line">// object as soon as nsDocumentViewer::Close has called</comment>
   <comment type="line">// RemovedFromDocShell on us.</comment>
   <if>if <condition>(<expr><name>mRemovedFromDocShell</name></expr>)</condition><then> <block>{
     <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIInterfaceRequestor</name></expr></argument>&gt;</argument_list></name></type> <name>requestor</name> <init>=
       <expr><call><name>do_QueryReferent</name><argument_list>(<argument><expr><name>mDocumentContainer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <if>if <condition>(<expr><name>requestor</name></expr>)</condition><then> <block>{
       <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScriptGlobalObject</name></expr></argument>&gt;</argument_list></name></type> <name>globalObject</name> <init>= <expr><call><name>do_GetInterface</name><argument_list>(<argument><expr><name>requestor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <return>return <expr><name>globalObject</name></expr>;</return>
     }</block></then></if>
   }</block></then></if>

   <return>return <expr><name>mScriptGlobalObject</name></expr>;</return>
}</block></function>

<function><type><name>nsIScriptGlobalObject</name>*</type>
<name><name>nsDocument</name>::<name>GetScopeObject</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScriptGlobalObject</name></expr></argument>&gt;</argument_list></name></type> <name>scope</name><argument_list>(<argument><expr><call><name>do_QueryReferent</name><argument_list>(<argument><expr><name>mScopeObject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <return>return <expr><name>scope</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>NotifyActivityChanged</name><parameter_list>(<param><decl><type><name>nsIContent</name> *</type><name>aContent</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aUnused</name></decl></param>)</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_MEDIA</name></cpp:ifdef>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLMediaElement</name></expr></argument>&gt;</argument_list></name></type> <name>domMediaElem</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>domMediaElem</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsHTMLMediaElement</name>*</type> <name>mediaElem</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsHTMLMediaElement</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mediaElem</name>-&gt;<name>NotifyOwnerDocumentActivityChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIDocument</name>::<name>SetContainer</name></name><parameter_list>(<param><decl><type><name>nsISupports</name>*</type> <name>aContainer</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mDocumentContainer</name> = <call><name>do_GetWeakReference</name><argument_list>(<argument><expr><name>aContainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>EnumerateFreezableElements</name><argument_list>(<argument><expr><name>NotifyActivityChanged</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>SetScriptGlobalObject</name></name><parameter_list>(<param><decl><type><name>nsIScriptGlobalObject</name> *</type><name>aScriptGlobalObject</name></decl></param>)</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsPIDOMWindow</name></expr></argument>&gt;</argument_list></name></type> <name>win</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aScriptGlobalObject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>win</name> || <call><name><name>win</name>-&gt;<name>IsInnerWindow</name></name><argument_list>()</argument_list></call></expr></argument>,
                 <argument><expr>"Script global object must be an inner window!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SMIL</name></cpp:ifdef>
  <expr_stmt><expr><call><name>NS_ABORT_IF_FALSE</name><argument_list>(<argument><expr><name>aScriptGlobalObject</name> || !<name>mAnimationController</name> ||
                    <call><name><name>mAnimationController</name>-&gt;<name>IsPausedByType</name></name><argument_list>(
                        <argument><expr><name><name>nsSMILTimeContainer</name>::<name>PAUSE_PAGEHIDE</name></name> |
                        <name><name>nsSMILTimeContainer</name>::<name>PAUSE_BEGIN</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr>"Clearing window pointer while animations are unpaused"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// MOZ_SMIL</comment>

  <if>if <condition>(<expr><name>mScriptGlobalObject</name> &amp;&amp; !<name>aScriptGlobalObject</name></expr>)</condition><then> <block>{
    <comment type="line">// We're detaching from the window.  We need to grab a pointer to</comment>
    <comment type="line">// our layout history state now.</comment>
    <expr_stmt><expr><name>mLayoutHistoryState</name> = <call><name>GetLayoutHistoryState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Also make sure to remove our onload blocker now if we haven't done it yet</comment>
    <if>if <condition>(<expr><name>mOnloadBlockCount</name> != 0</expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILoadGroup</name></expr></argument>&gt;</argument_list></name></type> <name>loadGroup</name> <init>= <expr><call><name>GetDocumentLoadGroup</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>loadGroup</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>loadGroup</name>-&gt;<name>RemoveRequest</name></name><argument_list>(<argument><expr><name>mOnloadBlocker</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>NS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>

  <expr_stmt><expr><name>mScriptGlobalObject</name> = <name>aScriptGlobalObject</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>aScriptGlobalObject</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mScriptObject</name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mHasHadScriptHandlingObject</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    <comment type="line">// Go back to using the docshell for the layout history state</comment>
    <expr_stmt><expr><name>mLayoutHistoryState</name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mScopeObject</name> = <call><name>do_GetWeakReference</name><argument_list>(<argument><expr><name>aScriptGlobalObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <if>if <condition>(<expr>!<name>mWillReparent</name></expr>)</condition><then> <block>{
      <comment type="line">// We really shouldn't have a wrapper here but if we do we need to make sure</comment>
      <comment type="line">// it has the correct parent.</comment>
      <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name> <init>= <expr><call><name>GetWrapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>obj</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>JSObject</name> *</type><name>newScope</name> <init>= <expr><call><name><name>aScriptGlobalObject</name>-&gt;<name>GetGlobalJSObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>nsIScriptContext</name> *</type><name>scx</name> <init>= <expr><call><name><name>aScriptGlobalObject</name>-&gt;<name>GetContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name> <init>= <expr><name>scx</name> ? (<name>JSContext</name> *)<call><name><name>scx</name>-&gt;<name>GetNativeContext</name></name><argument_list>()</argument_list></call> : <name>nsnull</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>cx</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>ThreadJSContextStack</name></name><argument_list>()</argument_list></call>-&gt;<call><name>Peek</name><argument_list>(<argument><expr>&amp;<name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>!<name>cx</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>ThreadJSContextStack</name></name><argument_list>()</argument_list></call>-&gt;<call><name>GetSafeJSContext</name><argument_list>(<argument><expr>&amp;<name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"Uhoh, no context, this is bad!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>cx</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>JS_GetGlobalForObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> == <name>newScope</name></expr></argument>,
                       <argument><expr>"Wrong scope, this is really bad!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr><name>mAllowDNSPrefetch</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocShell</name></expr></argument>&gt;</argument_list></name></type> <name>docShell</name> <init>= <expr><call><name>do_QueryReferent</name><argument_list>(<argument><expr><name>mDocumentContainer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>docShell</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIWebNavigation</name></expr></argument>&gt;</argument_list></name></type> <name>webNav</name> <init>=
          <expr><call><name>do_GetInterface</name><argument_list>(<argument><expr><name>aScriptGlobalObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>SameCOMIdentity</name><argument_list>(<argument><expr><name>webNav</name></expr></argument>, <argument><expr><name>docShell</name></expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr>"Unexpected container or script global?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <decl_stmt><decl><type><name>PRBool</name></type> <name>allowDNSPrefetch</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>docShell</name>-&gt;<name>GetAllowDNSPrefetch</name></name><argument_list>(<argument><expr>&amp;<name>allowDNSPrefetch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mAllowDNSPrefetch</name> = <name>allowDNSPrefetch</name></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>

  <comment type="line">// Remember the pointer to our window (or lack there of), to avoid</comment>
  <comment type="line">// having to QI every time it's asked for.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsPIDOMWindow</name></expr></argument>&gt;</argument_list></name></type> <name>window</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mScriptGlobalObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>mWindow</name> = <name>window</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>nsIScriptGlobalObject</name>*</type>
<name><name>nsDocument</name>::<name>GetScriptHandlingObjectInternal</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>mScriptGlobalObject</name></expr></argument>,
               <argument><expr>"Do not call this when mScriptGlobalObject is set!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScriptGlobalObject</name></expr></argument>&gt;</argument_list></name></type> <name>scriptHandlingObject</name> <init>=
    <expr><call><name>do_QueryReferent</name><argument_list>(<argument><expr><name>mScriptObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsPIDOMWindow</name></expr></argument>&gt;</argument_list></name></type> <name>win</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>scriptHandlingObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>win</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>win</name>-&gt;<name>IsInnerWindow</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"Should have inner window here!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nsPIDOMWindow</name>*</type> <name>outer</name> <init>= <expr><call><name><name>win</name>-&gt;<name>GetOuterWindow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>outer</name> || <call><name><name>outer</name>-&gt;<name>GetCurrentInnerWindow</name></name><argument_list>()</argument_list></call> != <name>win</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"Wrong inner/outer window combination!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>nsnull</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>
  <return>return <expr><name>scriptHandlingObject</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>SetScriptHandlingObject</name></name><parameter_list>(<param><decl><type><name>nsIScriptGlobalObject</name>*</type> <name>aScriptObject</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>mScriptGlobalObject</name> ||
               <name>mScriptGlobalObject</name> == <name>aScriptObject</name></expr></argument>,
               <argument><expr>"Wrong script object!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsPIDOMWindow</name></expr></argument>&gt;</argument_list></name></type> <name>win</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aScriptObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>win</name> || <call><name><name>win</name>-&gt;<name>IsInnerWindow</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"Should have inner window here!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mScopeObject</name> = <name>mScriptObject</name> = <call><name>do_GetWeakReference</name><argument_list>(<argument><expr><name>aScriptObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>aScriptObject</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mHasHadScriptHandlingObject</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>nsPIDOMWindow</name> *</type>
<name><name>nsDocument</name>::<name>GetWindowInternal</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>mWindow</name></expr></argument>, <argument><expr>"This should not be called when mWindow is not null!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsPIDOMWindow</name></expr></argument>&gt;</argument_list></name></type> <name>win</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name>GetScriptGlobalObject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>win</name></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name><name>win</name>-&gt;<name>GetOuterWindow</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsPIDOMWindow</name> *</type>
<name><name>nsDocument</name>::<name>GetInnerWindowInternal</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>mRemovedFromDocShell</name></expr></argument>,
               <argument><expr>"This document should have been removed from docshell!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsPIDOMWindow</name></expr></argument>&gt;</argument_list></name></type> <name>win</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name>GetScriptGlobalObject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

  <return>return <expr><name>win</name></expr>;</return>
}</block></function>

<function><type><name>nsScriptLoader</name>*</type>
<name><name>nsDocument</name>::<name>ScriptLoader</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr><name>mScriptLoader</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsDocument</name>::<name>InternalAllowXULXBL</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name><name>nsContentUtils</name>::<name>AllowXULXBLForPrincipal</name></name><argument_list>(<argument><expr><call><name>NodePrincipal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mAllowXULXBL</name> = <name>eTriTrue</name></expr>;</expr_stmt>
    <return>return <expr><name>PR_TRUE</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>mAllowXULXBL</name> = <name>eTriFalse</name></expr>;</expr_stmt>
  <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<comment type="line">// Note: We don't hold a reference to the document observer; we assume</comment>
<comment type="line">// that it has a live reference to the document.</comment>
<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>AddObserver</name></name><parameter_list>(<param><decl><type><name>nsIDocumentObserver</name>*</type> <name>aObserver</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>mObservers</name>.<name>IndexOf</name></name><argument_list>(<argument><expr><name>aObserver</name></expr></argument>)</argument_list></call> == <name><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name>::<name>NoIndex</name></name></expr></argument>,
               <argument><expr>"Observer already in the list"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mObservers</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>aObserver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMutationObserver</name><argument_list>(<argument><expr><name>aObserver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsDocument</name>::<name>RemoveObserver</name></name><parameter_list>(<param><decl><type><name>nsIDocumentObserver</name>*</type> <name>aObserver</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// If we're in the process of destroying the document (and we're</comment>
  <comment type="line">// informing the observers of the destruction), don't remove the</comment>
  <comment type="line">// observers from the list. This is not a big deal, since we</comment>
  <comment type="line">// don't hold a live reference to the observers.</comment>
  <if>if <condition>(<expr>!<name>mInDestructor</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>RemoveMutationObserver</name><argument_list>(<argument><expr><name>aObserver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>mObservers</name>.<name>RemoveElement</name></name><argument_list>(<argument><expr><name>aObserver</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name><name>mObservers</name>.<name>Contains</name></name><argument_list>(<argument><expr><name>aObserver</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>MaybeEndOutermostXBLUpdate</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// Only call BindingManager()-&gt;EndOutermostUpdate() when</comment>
  <comment type="line">// we're not in an update and it is safe to run scripts.</comment>
  <if>if <condition>(<expr><name>mUpdateNestLevel</name> == 0 &amp;&amp; <name>mInXBLUpdate</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><call><name><name>nsContentUtils</name>::<name>IsSafeToRunScript</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>mInXBLUpdate</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>BindingManager</name><argument_list>()</argument_list></call>-&gt;<call><name>EndOutermostUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr>!<name>mInDestructor</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>AddScriptRunner</name></name><argument_list>(
        <argument><expr><call><name>NS_NewRunnableMethod</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>&amp;<name><name>nsDocument</name>::<name>MaybeEndOutermostXBLUpdate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>BeginUpdate</name></name><parameter_list>(<param><decl><type><name>nsUpdateType</name></type> <name>aUpdateType</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mUpdateNestLevel</name> == 0 &amp;&amp; !<name>mInXBLUpdate</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mInXBLUpdate</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BindingManager</name><argument_list>()</argument_list></call>-&gt;<call><name>BeginOutermostUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  
  <expr_stmt><expr>++<name>mUpdateNestLevel</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>aUpdateType</name> == <name>UPDATE_CONTENT_MODEL</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>AddRemovableScriptBlocker</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>AddScriptBlocker</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
  <expr_stmt><expr><call><name>NS_DOCUMENT_NOTIFY_OBSERVERS</name><argument_list>(<argument><expr><name>BeginUpdate</name></expr></argument>, <argument><expr>(<name>this</name>, <name>aUpdateType</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>EndUpdate</name></name><parameter_list>(<param><decl><type><name>nsUpdateType</name></type> <name>aUpdateType</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_DOCUMENT_NOTIFY_OBSERVERS</name><argument_list>(<argument><expr><name>EndUpdate</name></expr></argument>, <argument><expr>(<name>this</name>, <name>aUpdateType</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>aUpdateType</name> == <name>UPDATE_CONTENT_MODEL</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>RemoveRemovableScriptBlocker</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>RemoveScriptBlocker</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <expr_stmt><expr>--<name>mUpdateNestLevel</name></expr>;</expr_stmt>

  <comment type="line">// This set of updates may have created XBL bindings.  Let the</comment>
  <comment type="line">// binding manager know we're done.</comment>
  <expr_stmt><expr><call><name>MaybeEndOutermostXBLUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>MaybeInitializeFinalizeFrameLoaders</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>BeginLoad</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// Block onload here to prevent having to deal with blocking and</comment>
  <comment type="line">// unblocking it while we know the document is loading.</comment>
  <expr_stmt><expr><call><name>BlockOnload</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>mScriptLoader</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mScriptLoader</name>-&gt;<name>BeginDeferringScripts</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name>NS_DOCUMENT_NOTIFY_OBSERVERS</name><argument_list>(<argument><expr><name>BeginLoad</name></expr></argument>, <argument><expr>(<name>this</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>ReportEmptyGetElementByIdArg</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>ReportToConsole</name></name><argument_list>(<argument><expr><name><name>nsContentUtils</name>::<name>eDOM_PROPERTIES</name></name></expr></argument>,
                                  <argument><expr>"EmptyGetElementByIdParam"</expr></argument>,
                                  <argument><expr><name>nsnull</name></expr></argument>, <argument><expr>0</expr></argument>,
                                  <argument><expr><name>nsnull</name></expr></argument>,
                                  <argument><expr><call><name>EmptyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                                  <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                                  <argument><expr>"DOM"</expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>Element</name>*</type>
<name><name>nsDocument</name>::<name>GetElementById</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aElementId</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>CheckGetElementByIdArg</name><argument_list>(<argument><expr><name>aElementId</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsIdentifierMapEntry</name> *</type><name>entry</name> <init>= <expr><call><name><name>mIdentifierMap</name>.<name>GetEntry</name></name><argument_list>(<argument><expr><name>aElementId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>entry</name> ? <call><name><name>entry</name>-&gt;<name>GetIdElement</name></name><argument_list>()</argument_list></call> : <name>nsnull</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetElementById</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aId</name></decl></param>, <param><decl><type><name>nsIDOMElement</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>Element</name> *</type><name>content</name> <init>= <expr><call><name>GetElementById</name><argument_list>(<argument><expr><name>aId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>content</name></expr>)</condition><then> <block>{
    <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr>*<name>aReturn</name> = <name>nsnull</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>Element</name>*</type>
<name><name>nsDocument</name>::<name>AddIDTargetObserver</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aID</name></decl></param>, <param><decl><type><name>IDTargetObserver</name></type> <name>aObserver</name></decl></param>,
                                <param><decl><type><name>void</name>*</type> <name>aData</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aForImage</name></decl></param>)</parameter_list>
<block>{
  <function_decl><type><name>nsDependentAtomString</name></type> <name>id</name><parameter_list>(<param><decl><type><name>aID</name></type></decl></param>)</parameter_list>;</function_decl>

  <if>if <condition>(<expr>!<call><name>CheckGetElementByIdArg</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsIdentifierMapEntry</name> *</type><name>entry</name> <init>= <expr><call><name><name>mIdentifierMap</name>.<name>PutEntry</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>entry</name>-&gt;<name>AddContentChangeCallback</name></name><argument_list>(<argument><expr><name>aObserver</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>, <argument><expr><name>aForImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>aForImage</name> ? <call><name><name>entry</name>-&gt;<name>GetImageIdElement</name></name><argument_list>()</argument_list></call> : <call><name><name>entry</name>-&gt;<name>GetIdElement</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>RemoveIDTargetObserver</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aID</name></decl></param>, <param><decl><type><name>IDTargetObserver</name></type> <name>aObserver</name></decl></param>,
                                   <param><decl><type><name>void</name>*</type> <name>aData</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aForImage</name></decl></param>)</parameter_list>
<block>{
  <function_decl><type><name>nsDependentAtomString</name></type> <name>id</name><parameter_list>(<param><decl><type><name>aID</name></type></decl></param>)</parameter_list>;</function_decl>

  <if>if <condition>(<expr>!<call><name>CheckGetElementByIdArg</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>

  <decl_stmt><decl><type><name>nsIdentifierMapEntry</name> *</type><name>entry</name> <init>= <expr><call><name><name>mIdentifierMap</name>.<name>GetEntry</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>entry</name>-&gt;<name>RemoveContentChangeCallback</name></name><argument_list>(<argument><expr><name>aObserver</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>, <argument><expr><name>aForImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>MozSetImageElement</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aImageElementId</name></decl></param>,
                               <param><decl><type><name>nsIDOMElement</name>*</type> <name>aImageElement</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name><name>aImageElementId</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aImageElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsIdentifierMapEntry</name> *</type><name>entry</name> <init>= <expr><call><name><name>mIdentifierMap</name>.<name>PutEntry</name></name><argument_list>(<argument><expr><name>aImageElementId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>entry</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>entry</name>-&gt;<name>SetImageElement</name></name><argument_list>(<argument><expr><name>content</name> ? <call><name><name>content</name>-&gt;<name>AsElement</name></name><argument_list>()</argument_list></call> : <name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name><name>entry</name>-&gt;<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mIdentifierMap</name>.<name>RemoveEntry</name></name><argument_list>(<argument><expr><name>aImageElementId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>Element</name>*</type>
<name><name>nsDocument</name>::<name>LookupImageElement</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aId</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name><name>aId</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsIdentifierMapEntry</name> *</type><name>entry</name> <init>= <expr><call><name><name>mIdentifierMap</name>.<name>PutEntry</name></name><argument_list>(<argument><expr><name>aId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>entry</name> ? <call><name><name>entry</name>-&gt;<name>GetImageIdElement</name></name><argument_list>()</argument_list></call> : <name>nsnull</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>DispatchContentLoadedEvents</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><name>NS_TIME_FUNCTION</name></expr>;</expr_stmt>
  <comment type="line">// If you add early returns from this method, make sure you're</comment>
  <comment type="line">// calling UnblockOnload properly.</comment>
  
  <comment type="line">// Unpin references to preloaded images</comment>
  <expr_stmt><expr><call><name><name>mPreloadingImages</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
  <comment type="line">// Fire a DOM event notifying listeners that this document has been</comment>
  <comment type="line">// loaded (excluding images and other loads initiated by this</comment>
  <comment type="line">// document).</comment>
  <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>DispatchTrustedEvent</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIDocument</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"DOMContentLoaded"</expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// If this document is a [i]frame, fire a DOMFrameContentLoaded</comment>
  <comment type="line">// event on all parent documents notifying that the HTML (excluding</comment>
  <comment type="line">// other external files such as images and stylesheets) in a frame</comment>
  <comment type="line">// has finished loading.</comment>

  <comment type="line">// target_frame is the [i]frame element that will be used as the</comment>
  <comment type="line">// target for the event. It's the [i]frame whose content is done</comment>
  <comment type="line">// loading.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMEventTarget</name></expr></argument>&gt;</argument_list></name></type> <name>target_frame</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>mParentDocument</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>target_frame</name> =
      <call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name><name>mParentDocument</name>-&gt;<name>FindContentForSubDocument</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><name>target_frame</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></type> <name>parent</name> <init>= <expr><name>mParentDocument</name></expr></init></decl>;</decl_stmt>
    <do>do <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocumentEvent</name></expr></argument>&gt;</argument_list></name></type> <name>document_event</name> <init>=
        <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMEvent</name></expr></argument>&gt;</argument_list></name></type> <name>event</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrivateDOMEvent</name></expr></argument>&gt;</argument_list></name></type> <name>privateEvent</name></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>document_event</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>document_event</name>-&gt;<name>CreateEvent</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"Events"</expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>privateEvent</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><name>event</name> &amp;&amp; <name>privateEvent</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>event</name>-&gt;<name>InitEvent</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"DOMFrameContentLoaded"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>,
                         <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>privateEvent</name>-&gt;<name>SetTarget</name></name><argument_list>(<argument><expr><name>target_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>privateEvent</name>-&gt;<name>SetTrusted</name></name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// To dispatch this event we must manually call</comment>
        <comment type="line">// nsEventDispatcher::Dispatch() on the ancestor document since the</comment>
        <comment type="line">// target is not in the same document, so the event would never reach</comment>
        <comment type="line">// the ancestor document if we used the normal event</comment>
        <comment type="line">// dispatching code.</comment>

        <decl_stmt><decl><type><name>nsEvent</name>*</type> <name>innerEvent</name> <init>= <expr><call><name><name>privateEvent</name>-&gt;<name>GetInternalNSEvent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>innerEvent</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>nsEventStatus</name></type> <name>status</name> <init>= <expr><name>nsEventStatus_eIgnore</name></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><name>nsIPresShell</name> *</type><name>shell</name> <init>= <expr><call><name><name>parent</name>-&gt;<name>GetShell</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>shell</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsPresContext</name></expr></argument>&gt;</argument_list></name></type> <name>context</name> <init>= <expr><call><name><name>shell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>context</name></expr>)</condition><then> <block>{
              <expr_stmt><expr><call><name><name>nsEventDispatcher</name>::<name>Dispatch</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>innerEvent</name></expr></argument>, <argument><expr><name>event</name></expr></argument>,
                                          <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
          }</block></then></if>
        }</block></then></if>
      }</block></then></if>
      
      <expr_stmt><expr><name>parent</name> = <call><name><name>parent</name>-&gt;<name>GetParentDocument</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block> while <condition>(<expr><name>parent</name></expr>)</condition>;</do>
  }</block></then></if>

  <comment type="line">// If the document has a manifest attribute, fire a MozApplicationManifest</comment>
  <comment type="line">// event.</comment>
  <decl_stmt><decl><type><name>Element</name>*</type> <name>root</name> <init>= <expr><call><name>GetRootElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>root</name> &amp;&amp; <call><name><name>root</name>-&gt;<name>HasAttr</name></name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>manifest</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>DispatchChromeEvent</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIDocument</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"MozApplicationManifest"</expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name>UnblockOnload</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>EndLoad</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// Drop the ref to our parser, if any, but keep hold of the sink so that we</comment>
  <comment type="line">// can flush it from FlushPendingNotifications as needed.  We might have to</comment>
  <comment type="line">// do that to get a StartLayout() to happen.</comment>
  <if>if <condition>(<expr><name>mParser</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mWeakSink</name> = <call><name>do_GetWeakReference</name><argument_list>(<argument><expr><call><name><name>mParser</name>-&gt;<name>GetContentSink</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mParser</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>
  
  <expr_stmt><expr><call><name>NS_DOCUMENT_NOTIFY_OBSERVERS</name><argument_list>(<argument><expr><name>EndLoad</name></expr></argument>, <argument><expr>(<name>this</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if>if <condition>(<expr>!<name>mSynchronousDOMContentLoaded</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsIRunnable</name></expr></argument>&gt;</argument_list></name></type> <name>ev</name> <init>=
      <expr><call><name>NS_NewRunnableMethod</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>&amp;<name><name>nsDocument</name>::<name>DispatchContentLoadedEvents</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_DispatchToCurrentThread</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name>DispatchContentLoadedEvents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>ContentStatesChanged</name></name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type> <name>aContent1</name></decl></param>, <param><decl><type><name>nsIContent</name>*</type> <name>aContent2</name></decl></param>,
                                 <param><decl><type><name>nsEventStates</name></type> <name>aStateMask</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_DOCUMENT_NOTIFY_OBSERVERS</name><argument_list>(<argument><expr><name>ContentStatesChanged</name></expr></argument>,
                               <argument><expr>(<name>this</name>, <name>aContent1</name>, <name>aContent2</name>, <name>aStateMask</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>DocumentStatesChanged</name></name><parameter_list>(<param><decl><type><name>nsEventStates</name></type> <name>aStateMask</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Invalidate our cached state.</comment>
  <expr_stmt><expr><name>mGotDocumentState</name> &amp;= ~<name>aStateMask</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mDocumentState</name> &amp;= ~<name>aStateMask</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_DOCUMENT_NOTIFY_OBSERVERS</name><argument_list>(<argument><expr><name>DocumentStatesChanged</name></expr></argument>, <argument><expr>(<name>this</name>, <name>aStateMask</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>StyleRuleChanged</name></name><parameter_list>(<param><decl><type><name>nsIStyleSheet</name>*</type> <name>aStyleSheet</name></decl></param>,
                             <param><decl><type><name>nsIStyleRule</name>*</type> <name>aOldStyleRule</name></decl></param>,
                             <param><decl><type><name>nsIStyleRule</name>*</type> <name>aNewStyleRule</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_DOCUMENT_NOTIFY_OBSERVERS</name><argument_list>(<argument><expr><name>StyleRuleChanged</name></expr></argument>,
                               <argument><expr>(<name>this</name>, <name>aStyleSheet</name>,
                                <name>aOldStyleRule</name>, <name>aNewStyleRule</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>StyleRuleAdded</name></name><parameter_list>(<param><decl><type><name>nsIStyleSheet</name>*</type> <name>aStyleSheet</name></decl></param>,
                           <param><decl><type><name>nsIStyleRule</name>*</type> <name>aStyleRule</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_DOCUMENT_NOTIFY_OBSERVERS</name><argument_list>(<argument><expr><name>StyleRuleAdded</name></expr></argument>,
                               <argument><expr>(<name>this</name>, <name>aStyleSheet</name>, <name>aStyleRule</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>StyleRuleRemoved</name></name><parameter_list>(<param><decl><type><name>nsIStyleSheet</name>*</type> <name>aStyleSheet</name></decl></param>,
                             <param><decl><type><name>nsIStyleRule</name>*</type> <name>aStyleRule</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_DOCUMENT_NOTIFY_OBSERVERS</name><argument_list>(<argument><expr><name>StyleRuleRemoved</name></expr></argument>,
                               <argument><expr>(<name>this</name>, <name>aStyleSheet</name>, <name>aStyleRule</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="line">//</comment>
<comment type="line">// nsIDOMDocument interface</comment>
<comment type="line">//</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetDoctype</name></name><parameter_list>(<param><decl><type><name>nsIDOMDocumentType</name>**</type> <name>aDoctype</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aDoctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aDoctype</name> = <name>nsnull</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>count</name> = <call><name><name>mChildren</name>.<name>ChildCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
    <expr_stmt><expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><call><name><name>mChildren</name>.<name>ChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aDoctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>*<name>aDoctype</name></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>
  }</block></for>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetImplementation</name></name><parameter_list>(<param><decl><type><name>nsIDOMDOMImplementation</name>**</type> <name>aImplementation</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mDOMImplementation</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_NewURI</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"about:blank"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>hasHadScriptObject</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsIScriptGlobalObject</name>*</type> <name>scriptObject</name> <init>=
      <expr><call><name>GetScriptHandlingObject</name><argument_list>(<argument><expr><name>hasHadScriptObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>scriptObject</name> || !<name>hasHadScriptObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mDOMImplementation</name> = new <call><name>nsDOMImplementation</name><argument_list>(<argument><expr><name>scriptObject</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>,
                                                 <argument><expr><call><name>NodePrincipal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>mDOMImplementation</name></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aImplementation</name> = <name>mDOMImplementation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetDocumentElement</name></name><parameter_list>(<param><decl><type><name>nsIDOMElement</name>**</type> <name>aDocumentElement</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aDocumentElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>Element</name>*</type> <name>root</name> <init>= <expr><call><name>GetRootElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>root</name></expr>)</condition><then> <block>{
    <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>aDocumentElement</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr>*<name>aDocumentElement</name> = <name>nsnull</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>CreateElement</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aTagName</name></decl></param>,
                          <param><decl><type><name>nsIDOMElement</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aReturn</name> = <name>nsnull</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>CreateElement</name><argument_list>(<argument><expr><name>aTagName</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type> <name>IsLowercaseASCII</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>len</name> <init>= <expr><call><name><name>aValue</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for (<init><decl><type><name>PRInt32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name>PRUnichar</name></type> <name>c</name> <init>= <expr><name><name>aValue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!(0x0061 &lt;= (<name>c</name>) &amp;&amp; ((<name>c</name>) &lt;= 0x007a))</expr>)</condition><then> <block>{
      <return>return <expr><name>PR_FALSE</name></expr>;</return>
    }</block></then></if>
  }</block></for>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>CreateElement</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aTagName</name></decl></param>,
                          <param><decl><type><name>nsIContent</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aReturn</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>CheckQName</name></name><argument_list>(<argument><expr><name>aTagName</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>needsLowercase</name> <init>= <expr><call><name>IsHTML</name><argument_list>()</argument_list></call> &amp;&amp; !<call><name>IsLowercaseASCII</name><argument_list>(<argument><expr><name>aTagName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>lcTagName</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>needsLowercase</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>ToLowerCase</name><argument_list>(<argument><expr><name>aTagName</name></expr></argument>, <argument><expr><name>lcTagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><name>rv</name> = <call><name>CreateElem</name><argument_list>(<argument><expr><name>needsLowercase</name> ? <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><specifier>const</specifier> <name>nsAString</name>&amp;</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>lcTagName</name></expr></argument>)</argument_list></call>
                                 : <name>aTagName</name></expr></argument>,
                  <argument><expr><name>nsnull</name></expr></argument>,
                  <argument><expr><call><name>IsHTML</name><argument_list>()</argument_list></call> ? <name>kNameSpaceID_XHTML</name> : <call><name>GetDefaultNamespaceID</name><argument_list>()</argument_list></call></expr></argument>,
                  <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>CreateElementNS</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aNamespaceURI</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aQualifiedName</name></decl></param>,
                            <param><decl><type><name>nsIDOMElement</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aReturn</name> = <name>nsnull</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>CreateElementNS</name><argument_list>(<argument><expr><name>aNamespaceURI</name></expr></argument>, <argument><expr><name>aQualifiedName</name></expr></argument>,
                                <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>CreateElementNS</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aNamespaceURI</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aQualifiedName</name></decl></param>,
                            <param><decl><type><name>nsIContent</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name></type> <name>nodeInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>GetNodeInfoFromQName</name></name><argument_list>(<argument><expr><name>aNamespaceURI</name></expr></argument>,
                                                     <argument><expr><name>aQualifiedName</name></expr></argument>,
                                                     <argument><expr><name>mNodeInfoManager</name></expr></argument>,
                                                     <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>nodeInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>ns</name> <init>= <expr><call><name><name>nodeInfo</name>-&gt;<name>NamespaceID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>NS_NewElement</name><argument_list>(<argument><expr><name>aReturn</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>,
                       <argument><expr><call><name><name>nodeInfo</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NOT_FROM_PARSER</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>CreateTextNode</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aData</name></decl></param>, <param><decl><type><name>nsIDOMText</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aReturn</name> = <name>nsnull</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>CreateTextNode</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>CreateTextNode</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aData</name></decl></param>, <param><decl><type><name>nsIContent</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_NewTextNode</name><argument_list>(<argument><expr><name>aReturn</name></expr></argument>, <argument><expr><name>mNodeInfoManager</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// Don't notify; this node is still being created.</comment>
    <expr_stmt><expr><call><name>(*<name>aReturn</name>)-&gt;<name>SetText</name></name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>CreateDocumentFragment</name></name><parameter_list>(<param><decl><type><name>nsIDOMDocumentFragment</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>NS_NewDocumentFragment</name><argument_list>(<argument><expr><name>aReturn</name></expr></argument>, <argument><expr><name>mNodeInfoManager</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>CreateComment</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aData</name></decl></param>, <param><decl><type><name>nsIDOMComment</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aReturn</name> = <name>nsnull</name></expr>;</expr_stmt>

  <comment type="line">// Make sure the substring "--" is not present in aData.  Otherwise</comment>
  <comment type="line">// we'll create a document that can't be serialized.</comment>
  <if>if <condition>(<expr><call><name>FindInReadable</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"--"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_DOM_INVALID_CHARACTER_ERR</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>comment</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_NewCommentNode</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mNodeInfoManager</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// Don't notify; this node is still being created.</comment>
    <expr_stmt><expr><call><name><name>comment</name>-&gt;<name>SetText</name></name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rv</name> = <call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>comment</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>CreateCDATASection</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aData</name></decl></param>,
                               <param><decl><type><name>nsIDOMCDATASection</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aReturn</name> = <name>nsnull</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>FindInReadable</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"]]&gt;"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_DOM_INVALID_CHARACTER_ERR</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_NewXMLCDATASection</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>mNodeInfoManager</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// Don't notify; this node is still being created.</comment>
    <expr_stmt><expr><call><name><name>content</name>-&gt;<name>SetText</name></name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rv</name> = <call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>CreateProcessingInstruction</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aTarget</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aData</name></decl></param>,
                                        <param><decl><type><name>nsIDOMProcessingInstruction</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aReturn</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>CheckQName</name></name><argument_list>(<argument><expr><name>aTarget</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>FindInReadable</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"?&gt;"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_DOM_INVALID_CHARACTER_ERR</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name>NS_NewXMLProcessingInstruction</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>mNodeInfoManager</name></expr></argument>, <argument><expr><name>aTarget</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>CreateAttribute</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aName</name></decl></param>,
                            <param><decl><type><name>nsIDOMAttr</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aReturn</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mNodeInfoManager</name></expr></argument>, <argument><expr><name>NS_ERROR_NOT_INITIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>CheckQName</name></name><argument_list>(<argument><expr><name>aName</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsDOMAttribute</name>*</type> <name>attribute</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name></type> <name>nodeInfo</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>mNodeInfoManager</name>-&gt;<name>GetNodeInfo</name></name><argument_list>(<argument><expr><name>aName</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>kNameSpaceID_None</name></expr></argument>,
                                     <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>nodeInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>attribute</name> = new <call><name>nsDOMAttribute</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><call><name><name>nodeInfo</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>CreateAttributeNS</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type> <name>aNamespaceURI</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type> <name>aQualifiedName</name></decl></param>,
                              <param><decl><type><name>nsIDOMAttr</name> **</type><name>aResult</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aResult</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name></type> <name>nodeInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>GetNodeInfoFromQName</name></name><argument_list>(<argument><expr><name>aNamespaceURI</name></expr></argument>,
                                                     <argument><expr><name>aQualifiedName</name></expr></argument>,
                                                     <argument><expr><name>mNodeInfoManager</name></expr></argument>,
                                                     <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>nodeInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsDOMAttribute</name>*</type> <name>attribute</name> <init>=
    <expr>new <call><name>nsDOMAttribute</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><call><name><name>nodeInfo</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>CreateEntityReference</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aName</name></decl></param>,
                                  <param><decl><type><name>nsIDOMEntityReference</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aReturn</name> = <name>nsnull</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsContentList</name></expr></argument>&gt;</argument_list></name></type>
<name><name>nsDocument</name>::<name>GetElementsByTagName</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aTagname</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>lowercaseName</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>ASCIIToLower</name></name><argument_list>(<argument><expr><name>aTagname</name></expr></argument>, <argument><expr><name>lowercaseName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAtom</name></expr></argument>&gt;</argument_list></name></type> <name>xmlAtom</name> <init>= <expr><call><name>do_GetAtom</name><argument_list>(<argument><expr><name>aTagname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAtom</name></expr></argument>&gt;</argument_list></name></type> <name>htmlAtom</name> <init>= <expr><call><name>do_GetAtom</name><argument_list>(<argument><expr><name>lowercaseName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>NS_GetContentList</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>kNameSpaceID_Unknown</name></expr></argument>, <argument><expr><name>htmlAtom</name></expr></argument>, <argument><expr><name>xmlAtom</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetElementsByTagName</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aTagname</name></decl></param>,
                                 <param><decl><type><name>nsIDOMNodeList</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsContentList</name></expr></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name>GetElementsByTagName</name><argument_list>(<argument><expr><name>aTagname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// transfer ref to aReturn</comment>
  <expr_stmt><expr>*<name>aReturn</name> = <call><name><name>list</name>.<name>forget</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsContentList</name></expr></argument>&gt;</argument_list></name></type>
<name><name>nsDocument</name>::<name>GetElementsByTagNameNS</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aNamespaceURI</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aLocalName</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>nameSpaceId</name> <init>= <expr><name>kNameSpaceID_Wildcard</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<call><name><name>aNamespaceURI</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"*"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>=
      <expr><call><name><name>nsContentUtils</name>::<name>NameSpaceManager</name></name><argument_list>()</argument_list></call>-&gt;<call><name>RegisterNameSpace</name><argument_list>(<argument><expr><name>aNamespaceURI</name></expr></argument>,
                                                            <argument><expr><name>nameSpaceId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAtom</name></expr></argument>&gt;</argument_list></name></type> <name>nameAtom</name> <init>= <expr><call><name>do_GetAtom</name><argument_list>(<argument><expr><name>aLocalName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>NS_GetContentList</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>nameSpaceId</name></expr></argument>, <argument><expr><name>nameAtom</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetElementsByTagNameNS</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aNamespaceURI</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aLocalName</name></decl></param>,
                                   <param><decl><type><name>nsIDOMNodeList</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsContentList</name></expr></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name>GetElementsByTagNameNS</name><argument_list>(<argument><expr><name>aNamespaceURI</name></expr></argument>,
                                                        <argument><expr><name>aLocalName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// transfer ref to aReturn</comment>
  <expr_stmt><expr>*<name>aReturn</name> = <call><name><name>list</name>.<name>forget</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetAsync</name></name><parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>aAsync</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"nsDocument::GetAsync() should be overriden by subclass!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>SetAsync</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aAsync</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"nsDocument::SetAsync() should be overriden by subclass!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>Load</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aUrl</name></decl></param>, <param><decl><type><name>PRBool</name> *</type><name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"nsDocument::Load() should be overriden by subclass!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>EvaluateFIXptr</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aExpression</name></decl></param>, <param><decl><type><name>nsIDOMRange</name> **</type><name>aRange</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"nsDocument::EvaluateFIXptr() should be overriden by subclass!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>EvaluateXPointer</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aExpression</name></decl></param>,
                             <param><decl><type><name>nsIXPointerResult</name> **</type><name>aResult</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"nsDocument::EvaluateXPointer() should be overriden by subclass!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetStyleSheets</name></name><parameter_list>(<param><decl><type><name>nsIDOMStyleSheetList</name>**</type> <name>aStyleSheets</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mDOMStyleSheets</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mDOMStyleSheets</name> = new <call><name>nsDOMStyleSheetList</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>mDOMStyleSheets</name></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <expr_stmt><expr>*<name>aStyleSheets</name> = <name>mDOMStyleSheets</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aStyleSheets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetSelectedStyleSheetSet</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aSheetSet</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aSheetSet</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
  <comment type="line">// Look through our sheets, find the selected set title</comment>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>count</name> <init>= <expr><call><name>GetNumberOfStyleSheets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>title</name></decl>;</decl_stmt>
  <for>for (<init><decl><type><name>PRInt32</name></type> <name>index</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>index</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsIStyleSheet</name>*</type> <name>sheet</name> <init>= <expr><call><name>GetStyleSheetAt</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>sheet</name></expr></argument>, <argument><expr>"Null sheet in sheet list!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMStyleSheet</name></expr></argument>&gt;</argument_list></name></type> <name>domSheet</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>sheet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>domSheet</name></expr></argument>, <argument><expr>"Sheet must QI to nsIDOMStyleSheet"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>disabled</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>domSheet</name>-&gt;<name>GetDisabled</name></name><argument_list>(<argument><expr>&amp;<name>disabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>disabled</name></expr>)</condition><then> <block>{
      <comment type="line">// Disabled sheets don't affect the currently selected set</comment>
      <continue>continue;</continue>
    }</block></then></if>
    
    <expr_stmt><expr><call><name><name>sheet</name>-&gt;<name>GetTitle</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>aSheetSet</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>aSheetSet</name> = <name>title</name></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>title</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>aSheetSet</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <comment type="line">// Sheets from multiple sets enabled; return null string, per spec.</comment>
      <expr_stmt><expr><call><name>SetDOMStringToNull</name><argument_list>(<argument><expr><name>aSheetSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    }</block></then></if></else></if>
  }</block></for>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>SetSelectedStyleSheetSet</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aSheetSet</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name>DOMStringIsNull</name><argument_list>(<argument><expr><name>aSheetSet</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// Must update mLastStyleSheetSet before doing anything else with stylesheets</comment>
  <comment type="line">// or CSSLoaders.</comment>
  <expr_stmt><expr><name>mLastStyleSheetSet</name> = <name>aSheetSet</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>EnableStyleSheetsForSetInternal</name><argument_list>(<argument><expr><name>aSheetSet</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetLastStyleSheetSet</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aSheetSet</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>aSheetSet</name> = <name>mLastStyleSheetSet</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetPreferredStyleSheetSet</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aSheetSet</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>GetHeaderData</name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>headerDefaultStyle</name></name></expr></argument>, <argument><expr><name>aSheetSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetStyleSheetSets</name></name><parameter_list>(<param><decl><type><name>nsIDOMDOMStringList</name>**</type> <name>aList</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mStyleSheetSetList</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mStyleSheetSetList</name> = new <call><name>nsDOMStyleSheetSetList</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>mStyleSheetSetList</name></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aList</name> = <name>mStyleSheetSetList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>EnableStyleSheetsForSet</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aSheetSet</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Per spec, passing in null is a no-op.</comment>
  <if>if <condition>(<expr>!<call><name>DOMStringIsNull</name><argument_list>(<argument><expr><name>aSheetSet</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// Note: must make sure to not change the CSSLoader's preferred sheet --</comment>
    <comment type="line">// that value should be equal to either our lastStyleSheetSet (if that's</comment>
    <comment type="line">// non-null) or to our preferredStyleSheetSet.  And this method doesn't</comment>
    <comment type="line">// change either of those.</comment>
    <expr_stmt><expr><call><name>EnableStyleSheetsForSetInternal</name><argument_list>(<argument><expr><name>aSheetSet</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>EnableStyleSheetsForSetInternal</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aSheetSet</name></decl></param>,
                                            <param><decl><type><name>PRBool</name></type> <name>aUpdateCSSLoader</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>BeginUpdate</name><argument_list>(<argument><expr><name>UPDATE_STYLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>count</name> <init>= <expr><call><name>GetNumberOfStyleSheets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>title</name></decl>;</decl_stmt>
  <for>for (<init><decl><type><name>PRInt32</name></type> <name>index</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>index</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsIStyleSheet</name>*</type> <name>sheet</name> <init>= <expr><call><name>GetStyleSheetAt</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>sheet</name></expr></argument>, <argument><expr>"Null sheet in sheet list!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sheet</name>-&gt;<name>GetTitle</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name><name>title</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>sheet</name>-&gt;<name>SetEnabled</name></name><argument_list>(<argument><expr><call><name><name>title</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>aSheetSet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>
  <if>if <condition>(<expr><name>aUpdateCSSLoader</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>CSSLoader</name><argument_list>()</argument_list></call>-&gt;<call><name>SetPreferredSheet</name><argument_list>(<argument><expr><name>aSheetSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>EndUpdate</name><argument_list>(<argument><expr><name>UPDATE_STYLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetCharacterSet</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aCharacterSet</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>CopyASCIItoUTF16</name><argument_list>(<argument><expr><call><name>GetDocumentCharacterSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>aCharacterSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>ImportNode</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>*</type> <name>aImportedNode</name></decl></param>,
                       <param><decl><type><name>PRBool</name></type> <name>aDeep</name></decl></param>,
                       <param><decl><type><name>nsIDOMNode</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG</name><argument_list>(<argument><expr><name>aImportedNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aResult</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>CheckSameOrigin</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aImportedNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRUint16</name></type> <name>nodeType</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aImportedNode</name>-&gt;<name>GetNodeType</name></name><argument_list>(<argument><expr>&amp;<name>nodeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name>nodeType</name></expr>)</condition> <block>{
    <case>case <expr><name><name>nsIDOMNode</name>::<name>ATTRIBUTE_NODE</name></name></expr>:
    </case><case>case <expr><name><name>nsIDOMNode</name>::<name>DOCUMENT_FRAGMENT_NODE</name></name></expr>:
    </case><case>case <expr><name><name>nsIDOMNode</name>::<name>ELEMENT_NODE</name></name></expr>:
    </case><case>case <expr><name><name>nsIDOMNode</name>::<name>PROCESSING_INSTRUCTION_NODE</name></name></expr>:
    </case><case>case <expr><name><name>nsIDOMNode</name>::<name>TEXT_NODE</name></name></expr>:
    </case><case>case <expr><name><name>nsIDOMNode</name>::<name>CDATA_SECTION_NODE</name></name></expr>:
    </case><case>case <expr><name><name>nsIDOMNode</name>::<name>COMMENT_NODE</name></name></expr>:
    <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINode</name></expr></argument>&gt;</argument_list></name></type> <name>imported</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aImportedNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>imported</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>newNode</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsINode</name></expr></argument>&gt;</argument_list></name></type> <name>nodesWithProperties</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rv</name> = <call><name><name>nsNodeUtils</name>::<name>Clone</name></name><argument_list>(<argument><expr><name>imported</name></expr></argument>, <argument><expr><name>aDeep</name></expr></argument>, <argument><expr><name>mNodeInfoManager</name></expr></argument>,
                              <argument><expr><name>nodesWithProperties</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>newNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>nsIDocument</name> *</type><name>ownerDoc</name> <init>= <expr><call><name><name>imported</name>-&gt;<name>GetOwnerDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>ownerDoc</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>rv</name> = <call><name><name>nsNodeUtils</name>::<name>CallUserDataHandlers</name></name><argument_list>(<argument><expr><name>nodesWithProperties</name></expr></argument>, <argument><expr><name>ownerDoc</name></expr></argument>,
                                               <argument><expr><name><name>nsIDOMUserDataHandler</name>::<name>NODE_IMPORTED</name></name></expr></argument>,
                                               <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><call><name><name>newNode</name>.<name>swap</name></name><argument_list>(<argument><expr>*<name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block>
    </case><case>case <expr><name><name>nsIDOMNode</name>::<name>ENTITY_NODE</name></name></expr>:
    </case><case>case <expr><name><name>nsIDOMNode</name>::<name>ENTITY_REFERENCE_NODE</name></name></expr>:
    </case><case>case <expr><name><name>nsIDOMNode</name>::<name>NOTATION_NODE</name></name></expr>:
    <block>{
      <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
    }</block>
    </case><default>default:
    <block>{
      <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"Don't know how to clone this nodetype for importNode."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>NS_ERROR_DOM_NOT_SUPPORTED_ERR</name></expr>;</return>
    }</block>
  </default>}</block></switch>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>AddBinding</name></name><parameter_list>(<param><decl><type><name>nsIDOMElement</name>*</type> <name>aContent</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aURI</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>CheckSameOrigin</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name>NS_NewURI</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// Figure out the right principal to use</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrincipal</name></expr></argument>&gt;</argument_list></name></type> <name>subject</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsIScriptSecurityManager</name>*</type> <name>secMan</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>GetSecurityManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>secMan</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rv</name> = <call><name><name>secMan</name>-&gt;<name>GetSubjectPrincipal</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>subject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr>!<name>subject</name></expr>)</condition><then> <block>{
    <comment type="line">// Fall back to our principal.  Or should we fall back to the null</comment>
    <comment type="line">// principal?  The latter would just mean no binding loads....</comment>
    <expr_stmt><expr><name>subject</name> = <call><name>NodePrincipal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  
  <return>return <expr><call><name>BindingManager</name><argument_list>()</argument_list></call>-&gt;<call><name>AddLayeredBinding</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>subject</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>RemoveBinding</name></name><parameter_list>(<param><decl><type><name>nsIDOMElement</name>*</type> <name>aContent</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aURI</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>CheckSameOrigin</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name>NS_NewURI</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <return>return <expr><call><name>BindingManager</name><argument_list>()</argument_list></call>-&gt;<call><name>RemoveLayeredBinding</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>LoadBindingDocument</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aURI</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_NewURI</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aURI</name></expr></argument>,
                          <argument><expr><call><name><name>mCharacterSet</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
                          <argument><expr><call><name>GetDocBaseURI</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Figure out the right principal to use</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrincipal</name></expr></argument>&gt;</argument_list></name></type> <name>subject</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsIScriptSecurityManager</name>*</type> <name>secMan</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>GetSecurityManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>secMan</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rv</name> = <call><name><name>secMan</name>-&gt;<name>GetSubjectPrincipal</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>subject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr>!<name>subject</name></expr>)</condition><then> <block>{
    <comment type="line">// Fall back to our principal.  Or should we fall back to the null</comment>
    <comment type="line">// principal?  The latter would just mean no binding loads....</comment>
    <expr_stmt><expr><name>subject</name> = <call><name>NodePrincipal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  
  <expr_stmt><expr><call><name>BindingManager</name><argument_list>()</argument_list></call>-&gt;<call><name>LoadBindingDocument</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>subject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetBindingParent</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>*</type> <name>aNode</name></decl></param>, <param><decl><type><name>nsIDOMElement</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aResult</name> = <name>nsnull</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>content</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>elt</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name><name>content</name>-&gt;<name>GetBindingParent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aResult</name> = <name>elt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>nsresult</name></type>
<name>GetElementByAttribute</name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type> <name>aContent</name></decl></param>, <param><decl><type><name>nsIAtom</name>*</type> <name>aAttrName</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aAttrValue</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aUniversalMatch</name></decl></param>,
                      <param><decl><type><name>nsIDOMElement</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aUniversalMatch</name> ? <call><name><name>aContent</name>-&gt;<name>HasAttr</name></name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name>aAttrName</name></expr></argument>)</argument_list></call> :
                        <call><name><name>aContent</name>-&gt;<name>AttrValueIs</name></name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name>aAttrName</name></expr></argument>,
                                              <argument><expr><name>aAttrValue</name></expr></argument>, <argument><expr><name>eCaseMatters</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>childCount</name> <init>= <expr><call><name><name>aContent</name>-&gt;<name>GetChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>childCount</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsIContent</name> *</type><name>current</name> <init>= <expr><call><name><name>aContent</name>-&gt;<name>GetChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GetElementByAttribute</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>aAttrName</name></expr></argument>, <argument><expr><name>aAttrValue</name></expr></argument>, <argument><expr><name>aUniversalMatch</name></expr></argument>,
                          <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>*<name>aResult</name></expr>)</condition><then>
      <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
  }</block></for>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetAnonymousElementByAttribute</name></name><parameter_list>(<param><decl><type><name>nsIDOMElement</name>*</type> <name>aElement</name></decl></param>,
                                           <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aAttrName</name></decl></param>,
                                           <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aAttrValue</name></decl></param>,
                                           <param><decl><type><name>nsIDOMElement</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aResult</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNodeList</name></expr></argument>&gt;</argument_list></name></type> <name>nodeList</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetAnonymousNodes</name><argument_list>(<argument><expr><name>aElement</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>nodeList</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAtom</name></expr></argument>&gt;</argument_list></name></type> <name>attribute</name> <init>= <expr><call><name>do_GetAtom</name><argument_list>(<argument><expr><name>aAttrName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>length</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>nodeList</name>-&gt;<name>GetLength</name></name><argument_list>(<argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>universalMatch</name> <init>= <expr><call><name><name>aAttrValue</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"*"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>current</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>nodeList</name>-&gt;<name>Item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GetElementByAttribute</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>attribute</name></expr></argument>, <argument><expr><name>aAttrValue</name></expr></argument>, <argument><expr><name>universalMatch</name></expr></argument>,
                          <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>*<name>aResult</name></expr>)</condition><then>
      <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
  }</block></for>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetAnonymousNodes</name></name><parameter_list>(<param><decl><type><name>nsIDOMElement</name>*</type> <name>aElement</name></decl></param>,
                              <param><decl><type><name>nsIDOMNodeList</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aResult</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <return>return <expr><call><name>BindingManager</name><argument_list>()</argument_list></call>-&gt;<call><name>GetAnonymousNodesFor</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>CreateRange</name></name><parameter_list>(<param><decl><type><name>nsIDOMRange</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_NewRange</name><argument_list>(<argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>(*<name>aReturn</name>)-&gt;<name>SetStart</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>(*<name>aReturn</name>)-&gt;<name>SetEnd</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>CreateNodeIterator</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name> *</type><name>aRoot</name></decl></param>,
                               <param><decl><type><name>PRUint32</name></type> <name>aWhatToShow</name></decl></param>,
                               <param><decl><type><name>nsIDOMNodeFilter</name> *</type><name>aFilter</name></decl></param>,
                               <param><decl><type><name>PRBool</name></type> <name>aEntityReferenceExpansion</name></decl></param>,
                               <param><decl><type><name>nsIDOMNodeIterator</name> **</type><name>_retval</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>_retval</name> = <name>nsnull</name></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>aRoot</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_DOM_NOT_SUPPORTED_ERR</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>CheckSameOrigin</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aRoot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>_retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINode</name></expr></argument>&gt;</argument_list></name></type> <name>root</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aRoot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>NS_ERROR_DOM_NOT_SUPPORTED_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsNodeIterator</name> *</type><name>iterator</name> <init>= <expr>new <call><name>nsNodeIterator</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
                                                <argument><expr><name>aWhatToShow</name></expr></argument>,
                                                <argument><expr><name>aFilter</name></expr></argument>,
                                                <argument><expr><name>aEntityReferenceExpansion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>_retval</name> = <name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return> 
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>CreateTreeWalker</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name> *</type><name>aRoot</name></decl></param>,
                             <param><decl><type><name>PRUint32</name></type> <name>aWhatToShow</name></decl></param>,
                             <param><decl><type><name>nsIDOMNodeFilter</name> *</type><name>aFilter</name></decl></param>,
                             <param><decl><type><name>PRBool</name></type> <name>aEntityReferenceExpansion</name></decl></param>,
                             <param><decl><type><name>nsIDOMTreeWalker</name> **</type><name>_retval</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>_retval</name> = <name>nsnull</name></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>aRoot</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_DOM_NOT_SUPPORTED_ERR</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>CheckSameOrigin</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aRoot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>_retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINode</name></expr></argument>&gt;</argument_list></name></type> <name>root</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aRoot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>NS_ERROR_DOM_NOT_SUPPORTED_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsTreeWalker</name>*</type> <name>walker</name> <init>= <expr>new <call><name>nsTreeWalker</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
                                          <argument><expr><name>aWhatToShow</name></expr></argument>,
                                          <argument><expr><name>aFilter</name></expr></argument>,
                                          <argument><expr><name>aEntityReferenceExpansion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>walker</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>_retval</name> = <name>walker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetDefaultView</name></name><parameter_list>(<param><decl><type><name>nsIDOMAbstractView</name>**</type> <name>aDefaultView</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsPIDOMWindow</name>*</type> <name>win</name> <init>= <expr><call><name>GetWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>win</name></expr>)</condition><then> <block>{
    <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>aDefaultView</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr>*<name>aDefaultView</name> = <name>nsnull</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetLocation</name></name><parameter_list>(<param><decl><type><name>nsIDOMLocation</name> **</type><name>_retval</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>_retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>_retval</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMWindowInternal</name></expr></argument>&gt;</argument_list></name></type> <name>w</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mScriptGlobalObject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>w</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name><name>w</name>-&gt;<name>GetLocation</name></name><argument_list>(<argument><expr><name>_retval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>Element</name>*</type>
<name><name>nsIDocument</name>::<name>GetHtmlElement</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>Element</name>*</type> <name>rootElement</name> <init>= <expr><call><name>GetRootElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>rootElement</name> &amp;&amp; <call><name><name>rootElement</name>-&gt;<name>Tag</name></name><argument_list>()</argument_list></call> == <name><name>nsGkAtoms</name>::<name>html</name></name> &amp;&amp;
      <call><name><name>rootElement</name>-&gt;<name>IsHTML</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rootElement</name></expr>;</return></then></if>
  <return>return <expr><name>nsnull</name></expr>;</return>
}</block></function>

<function><type><name>Element</name>*</type>
<name><name>nsIDocument</name>::<name>GetHtmlChildElement</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aTag</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>Element</name>*</type> <name>html</name> <init>= <expr><call><name>GetHtmlElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>html</name></expr>)</condition><then>
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>

  <comment type="line">// Look for the element with aTag inside html. This needs to run</comment>
  <comment type="line">// forwards to find the first such element.</comment>
  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>html</name>-&gt;<name>GetChildCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsIContent</name>*</type> <name>result</name> <init>= <expr><call><name><name>html</name>-&gt;<name>GetChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>result</name>-&gt;<name>Tag</name></name><argument_list>()</argument_list></call> == <name>aTag</name> &amp;&amp; <call><name><name>result</name>-&gt;<name>IsHTML</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
      <return>return <expr><call><name><name>result</name>-&gt;<name>AsElement</name></name><argument_list>()</argument_list></call></expr>;</return></then></if>
  }</block></for>
  <return>return <expr><name>nsnull</name></expr>;</return>
}</block></function>

<function><type><name>nsIContent</name>*</type>
<name><name>nsDocument</name>::<name>GetTitleContent</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aNamespace</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// mMayHaveTitleElement will have been set to true if any HTML or SVG</comment>
  <comment type="line">// &lt;title&gt; element has been bound to this document. So if it's false,</comment>
  <comment type="line">// we know there is nothing to do here. This avoids us having to search</comment>
  <comment type="line">// the whole DOM if someone calls document.title on a large document</comment>
  <comment type="line">// without a title.</comment>
  <if>if <condition>(<expr>!<name>mMayHaveTitleElement</name></expr>)</condition><then>
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsContentList</name></expr></argument>&gt;</argument_list></name></type> <name>list</name> <init>=
    <expr><call><name>NS_GetContentList</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aNamespace</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>list</name>-&gt;<name>Item</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>GetTitleFromElement</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aNamespace</name></decl></param>, <param><decl><type><name>nsAString</name>&amp;</type> <name>aTitle</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIContent</name>*</type> <name>title</name> <init>= <expr><call><name>GetTitleContent</name><argument_list>(<argument><expr><name>aNamespace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>title</name></expr>)</condition><then>
    <return>return;</return></then></if>
  <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>GetNodeTextContent</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>aTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetTitle</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aTitle</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aTitle</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIContent</name> *</type><name>rootElement</name> <init>= <expr><call><name>GetRootElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>rootElement</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>tmp</name></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><call><name><name>rootElement</name>-&gt;<name>GetNameSpaceID</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_XUL</name></cpp:ifdef>
    <case>case <expr><name>kNameSpaceID_XUL</name></expr>:
      <expr_stmt><expr><call><name><name>rootElement</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>title</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SVG</name></cpp:ifdef>
    </case><case>case <expr><name>kNameSpaceID_SVG</name></expr>:
      <if>if <condition>(<expr><call><name><name>rootElement</name>-&gt;<name>Tag</name></name><argument_list>()</argument_list></call> == <name><name>nsGkAtoms</name>::<name>svg</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>GetTitleFromElement</name><argument_list>(<argument><expr><name>kNameSpaceID_SVG</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      }</block></then></if> <comment type="line">// else fall through</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </case><default>default:
      <expr_stmt><expr><call><name>GetTitleFromElement</name><argument_list>(<argument><expr><name>kNameSpaceID_XHTML</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </default>}</block></switch>

  <expr_stmt><expr><call><name><name>tmp</name>.<name>CompressWhitespace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>aTitle</name> = <name>tmp</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>SetTitle</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aTitle</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>Element</name> *</type><name>rootElement</name> <init>= <expr><call><name>GetRootElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>rootElement</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <switch>switch <condition>(<expr><call><name><name>rootElement</name>-&gt;<name>GetNameSpaceID</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SVG</name></cpp:ifdef>
    <case>case <expr><name>kNameSpaceID_SVG</name></expr>:
      <return>return <expr><name>NS_OK</name></expr>;</return> <comment type="line">// SVG doesn't support setting a title</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_XUL</name></cpp:ifdef>
    </case><case>case <expr><name>kNameSpaceID_XUL</name></expr>:
      <return>return <expr><call><name><name>rootElement</name>-&gt;<name>SetAttr</name></name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>title</name></name></expr></argument>,
                                  <argument><expr><name>aTitle</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </case>}</block></switch>

  <comment type="line">// Batch updates so that mutation events don't change "the title</comment>
  <comment type="line">// element" under us</comment>
  <function_decl><type><name>mozAutoDocUpdate</name></type> <name>updateBatch</name><parameter_list>(<param><decl><type><name>this</name></type></decl></param>, <param><decl><type><name>UPDATE_CONTENT_MODEL</name></type></decl></param>, <param><decl><type><name>PR_TRUE</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>nsIContent</name>*</type> <name>title</name> <init>= <expr><call><name>GetTitleContent</name><argument_list>(<argument><expr><name>kNameSpaceID_XHTML</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>title</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>Element</name> *</type><name>head</name> <init>= <expr><call><name>GetHeadElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>head</name></expr>)</condition><then>
      <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

    <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name></type> <name>titleInfo</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>titleInfo</name> = <call><name><name>mNodeInfoManager</name>-&gt;<name>GetNodeInfo</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>title</name></name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                                                <argument><expr><name>kNameSpaceID_XHTML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>!<name>titleInfo</name></expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
      <expr_stmt><expr><name>title</name> = <call><name>NS_NewHTMLTitleElement</name><argument_list>(<argument><expr><call><name><name>titleInfo</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>!<name>title</name></expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
    }</block>

    <expr_stmt><expr><call><name><name>head</name>-&gt;<name>AppendChildTo</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><call><name><name>nsContentUtils</name>::<name>SetNodeTextContent</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>aTitle</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>NotifyPossibleTitleChange</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aBoundTitleElement</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aBoundTitleElement</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mMayHaveTitleElement</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr><call><name><name>mPendingTitleChangeEvent</name>.<name>IsPending</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>

  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name><name>nsRunnableMethod</name><argument_list>&lt;<argument><expr><name>nsDocument</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr>false</expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>event</name> <init>=
    <expr><call><name>NS_NewNonOwningRunnableMethod</name><argument_list>(<argument><expr><name>this</name></expr></argument>,
      <argument><expr>&amp;<name><name>nsDocument</name>::<name>DoNotifyPossibleTitleChange</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_DispatchToCurrentThread</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mPendingTitleChangeEvent</name> = <name>event</name></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>DoNotifyPossibleTitleChange</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>mPendingTitleChangeEvent</name>.<name>Forget</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mHaveFiredTitleChange</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>title</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetTitle</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>shell</name> <init>= <expr><call><name>GetShell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>shell</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>container</name> <init>= <expr><call><name><name>shell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call>-&gt;<call><name>GetContainer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>container</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIBaseWindow</name></expr></argument>&gt;</argument_list></name></type> <name>docShellWin</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>container</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>docShellWin</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>docShellWin</name>-&gt;<name>SetTitle</name></name><argument_list>(<argument><expr><call><name>PromiseFlatString</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>

  <comment type="line">// Fire a DOM event for the title change.</comment>
  <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>DispatchChromeEvent</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIDocument</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"DOMTitleChanged"</expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetBoxObjectFor</name></name><parameter_list>(<param><decl><type><name>nsIDOMElement</name>*</type> <name>aElement</name></decl></param>, <param><decl><type><name>nsIBoxObject</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>NS_ERROR_UNEXPECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>doc</name> <init>= <expr><call><name><name>content</name>-&gt;<name>GetOwnerDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>doc</name> == <name>this</name></expr></argument>, <argument><expr><name>NS_ERROR_DOM_WRONG_DOCUMENT_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>mHasWarnedAboutBoxObjects</name> &amp;&amp; !<call><name><name>content</name>-&gt;<name>IsXUL</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mHasWarnedAboutBoxObjects</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>ReportToConsole</name></name><argument_list>(<argument><expr><name><name>nsContentUtils</name>::<name>eDOM_PROPERTIES</name></name></expr></argument>,
                                    <argument><expr>"UseOfGetBoxObjectForWarning"</expr></argument>,
                                    <argument><expr><name>nsnull</name></expr></argument>, <argument><expr>0</expr></argument>,
                                    <argument><expr><name>nsnull</name></expr></argument>,
                                    <argument><expr><call><name>EmptyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                                    <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                                    <argument><expr>"BoxObjects"</expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr>*<name>aResult</name> = <name>nsnull</name></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>mBoxObjectTable</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mBoxObjectTable</name> = new <name><name>nsInterfaceHashtable</name><argument_list>&lt;<argument><expr><name>nsVoidPtrHashKey</name></expr></argument>, <argument><expr><name>nsPIBoxObject</name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>mBoxObjectTable</name> &amp;&amp; !<call><name><name>mBoxObjectTable</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr>12</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>mBoxObjectTable</name> = <name>nsnull</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then> <else>else <block>{
    <comment type="line">// Want to use Get(content, aResult); but it's the wrong type</comment>
    <expr_stmt><expr>*<name>aResult</name> = <call><name><name>mBoxObjectTable</name>-&gt;<name>GetWeak</name></name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>*<name>aResult</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>
  }</block></else></if>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>namespaceID</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAtom</name></expr></argument>&gt;</argument_list></name></type> <name>tag</name> <init>= <expr><call><name>BindingManager</name><argument_list>()</argument_list></call>-&gt;<call><name>ResolveTag</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr>&amp;<name>namespaceID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>contractID</name><argument_list>(<argument><expr>"@mozilla.org/layout/xul-boxobject"</expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>namespaceID</name> == <name>kNameSpaceID_XUL</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>tag</name> == <name><name>nsGkAtoms</name>::<name>browser</name></name> ||
        <name>tag</name> == <name><name>nsGkAtoms</name>::<name>editor</name></name> ||
        <name>tag</name> == <name><name>nsGkAtoms</name>::<name>iframe</name></name></expr>)</condition><then>
      <expr_stmt><expr><name>contractID</name> += "-container"</expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name>tag</name> == <name><name>nsGkAtoms</name>::<name>menu</name></name></expr>)</condition><then>
      <expr_stmt><expr><name>contractID</name> += "-menu"</expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name>tag</name> == <name><name>nsGkAtoms</name>::<name>popup</name></name> ||
             <name>tag</name> == <name><name>nsGkAtoms</name>::<name>menupopup</name></name> ||
             <name>tag</name> == <name><name>nsGkAtoms</name>::<name>panel</name></name> ||
             <name>tag</name> == <name><name>nsGkAtoms</name>::<name>tooltip</name></name></expr>)</condition><then>
      <expr_stmt><expr><name>contractID</name> += "-popup"</expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name>tag</name> == <name><name>nsGkAtoms</name>::<name>tree</name></name></expr>)</condition><then>
      <expr_stmt><expr><name>contractID</name> += "-tree"</expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name>tag</name> == <name><name>nsGkAtoms</name>::<name>listbox</name></name></expr>)</condition><then>
      <expr_stmt><expr><name>contractID</name> += "-listbox"</expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name>tag</name> == <name><name>nsGkAtoms</name>::<name>scrollbox</name></name></expr>)</condition><then>
      <expr_stmt><expr><name>contractID</name> += "-scrollbox"</expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if></else></if>
  }</block></then></if>
  <expr_stmt><expr><name>contractID</name> += ";1"</expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsPIBoxObject</name></expr></argument>&gt;</argument_list></name></type> <name>boxObject</name><argument_list>(<argument><expr><call><name>do_CreateInstance</name><argument_list>(<argument><expr><call><name><name>contractID</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>boxObject</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name><name>boxObject</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>mBoxObjectTable</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mBoxObjectTable</name>-&gt;<name>Put</name></name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><call><name><name>boxObject</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr>*<name>aResult</name> = <name>boxObject</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>ClearBoxObjectFor</name></name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type> <name>aContent</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mBoxObjectTable</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsPIBoxObject</name> *</type><name>boxObject</name> <init>= <expr><call><name><name>mBoxObjectTable</name>-&gt;<name>GetWeak</name></name><argument_list>(<argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>boxObject</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>boxObject</name>-&gt;<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>mBoxObjectTable</name>-&gt;<name>Remove</name></name><argument_list>(<argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>GetXBLChildNodesFor</name></name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type> <name>aContent</name></decl></param>, <param><decl><type><name>nsIDOMNodeList</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>BindingManager</name><argument_list>()</argument_list></call>-&gt;<call><name>GetXBLChildNodesFor</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>GetContentListFor</name></name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type> <name>aContent</name></decl></param>, <param><decl><type><name>nsIDOMNodeList</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>BindingManager</name><argument_list>()</argument_list></call>-&gt;<call><name>GetContentListFor</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>FlushSkinBindings</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>BindingManager</name><argument_list>()</argument_list></call>-&gt;<call><name>FlushSkinBindings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>InitializeFrameLoader</name></name><parameter_list>(<param><decl><type><name>nsFrameLoader</name>*</type> <name>aLoader</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>mInitializableFrameLoaders</name>.<name>RemoveElement</name></name><argument_list>(<argument><expr><name>aLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Don't even try to initialize.</comment>
  <if>if <condition>(<expr><name>mInDestructor</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"Trying to initialize a frame loader while"
               "document is being deleted"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>mInitializableFrameLoaders</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>aLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>mFrameLoaderRunner</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mFrameLoaderRunner</name> =
      <call><name>NS_NewRunnableMethod</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>&amp;<name><name>nsDocument</name>::<name>MaybeInitializeFinalizeFrameLoaders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mFrameLoaderRunner</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>AddScriptRunner</name></name><argument_list>(<argument><expr><name>mFrameLoaderRunner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>FinalizeFrameLoader</name></name><parameter_list>(<param><decl><type><name>nsFrameLoader</name>*</type> <name>aLoader</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>mInitializableFrameLoaders</name>.<name>RemoveElement</name></name><argument_list>(<argument><expr><name>aLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>mInDestructor</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>mFinalizableFrameLoaders</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>aLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>mFrameLoaderRunner</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mFrameLoaderRunner</name> =
      <call><name>NS_NewRunnableMethod</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>&amp;<name><name>nsDocument</name>::<name>MaybeInitializeFinalizeFrameLoaders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mFrameLoaderRunner</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>AddScriptRunner</name></name><argument_list>(<argument><expr><name>mFrameLoaderRunner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>MaybeInitializeFinalizeFrameLoaders</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mDelayFrameLoaderInitialization</name> || <name>mUpdateNestLevel</name> != 0</expr>)</condition><then> <block>{
    <comment type="line">// This method will be recalled when mUpdateNestLevel drops to 0,</comment>
    <comment type="line">// or when !mDelayFrameLoaderInitialization.</comment>
    <expr_stmt><expr><name>mFrameLoaderRunner</name> = <name>nsnull</name></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <comment type="line">// We're not in an update, but it is not safe to run scripts, so</comment>
  <comment type="line">// postpone frameloader initialization and finalization.</comment>
  <if>if <condition>(<expr>!<call><name><name>nsContentUtils</name>::<name>IsSafeToRunScript</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <if>if <condition>(<expr>!<name>mInDestructor</name> &amp;&amp; !<name>mFrameLoaderRunner</name> &amp;&amp;
        (<call><name><name>mInitializableFrameLoaders</name>.<name>Length</name></name><argument_list>()</argument_list></call> ||
         <call><name><name>mFinalizableFrameLoaders</name>.<name>Length</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
      <expr_stmt><expr><name>mFrameLoaderRunner</name> =
        <call><name>NS_NewRunnableMethod</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>&amp;<name><name>nsDocument</name>::<name>MaybeInitializeFinalizeFrameLoaders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>AddScriptRunner</name></name><argument_list>(<argument><expr><name>mFrameLoaderRunner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return;</return>
  }</block></then></if>
  <expr_stmt><expr><name>mFrameLoaderRunner</name> = <name>nsnull</name></expr>;</expr_stmt>

  <comment type="line">// Don't use a temporary array for mInitializableFrameLoaders, because</comment>
  <comment type="line">// loading a frame may cause some other frameloader to be removed from the</comment>
  <comment type="line">// array. But be careful to keep the loader alive when starting the load!</comment>
  <while>while <condition>(<expr><call><name><name>mInitializableFrameLoaders</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
    <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsFrameLoader</name></expr></argument>&gt;</argument_list></name></type> <name>loader</name> <init>= <expr><name><name>mInitializableFrameLoaders</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mInitializableFrameLoaders</name>.<name>RemoveElementAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>loader</name></expr></argument>, <argument><expr>"null frameloader in the array?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>loader</name>-&gt;<name>ReallyStartLoading</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></while>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>length</name> <init>= <expr><call><name><name>mFinalizableFrameLoaders</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>length</name> &gt; 0</expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsFrameLoader</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>loaders</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mFinalizableFrameLoaders</name>.<name>SwapElements</name></name><argument_list>(<argument><expr><name>loaders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
      <expr_stmt><expr><name><name>loaders</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<call><name>Finalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>TryCancelFrameLoaderInitialization</name></name><parameter_list>(<param><decl><type><name>nsIDocShell</name>*</type> <name>aShell</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>length</name> <init>= <expr><call><name><name>mInitializableFrameLoaders</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <if>if <condition>(<expr><name><name>mInitializableFrameLoaders</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<call><name>GetExistingDocShell</name><argument_list>()</argument_list></call> == <name>aShell</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mInitializableFrameLoaders</name>.<name>RemoveElementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>
  }</block></for>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsDocument</name>::<name>FrameLoaderScheduledToBeFinalized</name></name><parameter_list>(<param><decl><type><name>nsIDocShell</name>*</type> <name>aShell</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aShell</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>length</name> <init>= <expr><call><name><name>mFinalizableFrameLoaders</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
      <if>if <condition>(<expr><name><name>mFinalizableFrameLoaders</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<call><name>GetExistingDocShell</name><argument_list>()</argument_list></call> == <name>aShell</name></expr>)</condition><then> <block>{
        <return>return <expr><name>PR_TRUE</name></expr>;</return>
      }</block></then></if>
    }</block></for>
  }</block></then></if>
  <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<function><type><name>nsIDocument</name>*</type>
<name><name>nsDocument</name>::<name>RequestExternalResource</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>,
                                    <param><decl><type><name>nsINode</name>*</type> <name>aRequestingNode</name></decl></param>,
                                    <param><decl><type><name>ExternalResourceLoad</name>**</type> <name>aPendingLoad</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr>"Must have a URI"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aRequestingNode</name></expr></argument>, <argument><expr>"Must have a node"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>mDisplayDocument</name></expr>)</condition><then> <block>{
    <return>return <expr><call><name><name>mDisplayDocument</name>-&gt;<name>RequestExternalResource</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>,
                                                     <argument><expr><name>aRequestingNode</name></expr></argument>,
                                                     <argument><expr><name>aPendingLoad</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name><name>mExternalResourceMap</name>.<name>RequestResource</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><name>aRequestingNode</name></expr></argument>,
                                              <argument><expr><name>this</name></expr></argument>, <argument><expr><name>aPendingLoad</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>EnumerateExternalResources</name></name><parameter_list>(<param><decl><type><name>nsSubDocEnumFunc</name></type> <name>aCallback</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>mExternalResourceMap</name>.<name>EnumerateResources</name></name><argument_list>(<argument><expr><name>aCallback</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SMIL</name></cpp:ifdef>
<function><type><name>nsSMILAnimationController</name>*</type>
<name><name>nsDocument</name>::<name>GetAnimationController</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// We create the animation controller lazily because most documents won't want</comment>
  <comment type="line">// one and only SVG documents and the like will call this</comment>
  <if>if <condition>(<expr><name>mAnimationController</name></expr>)</condition><then>
    <return>return <expr><name>mAnimationController</name></expr>;</return></then></if>
  <comment type="line">// Refuse to create an Animation Controller if SMIL is disabled, and also</comment>
  <comment type="line">// for data documents.</comment>
  <if>if <condition>(<expr>!<call><name>NS_SMILEnabled</name><argument_list>()</argument_list></call> || <name>mLoadedAsData</name> || <name>mLoadedAsInteractiveData</name></expr>)</condition><then>
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>

  <expr_stmt><expr><name>mAnimationController</name> = <call><name>NS_NewSMILAnimationController</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="line">// If there's a presContext then check the animation mode and pause if</comment>
  <comment type="line">// necessary.</comment>
  <decl_stmt><decl><type><name>nsIPresShell</name> *</type><name>shell</name> <init>= <expr><call><name>GetShell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>mAnimationController</name> &amp;&amp; <name>shell</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsPresContext</name> *</type><name>context</name> <init>= <expr><call><name><name>shell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>context</name> &amp;&amp;
        <call><name><name>context</name>-&gt;<name>ImageAnimationMode</name></name><argument_list>()</argument_list></call> == <name><name>imgIContainer</name>::<name>kDontAnimMode</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mAnimationController</name>-&gt;<name>Pause</name></name><argument_list>(<argument><expr><name><name>nsSMILTimeContainer</name>::<name>PAUSE_USERPREF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <comment type="line">// If we're hidden (or being hidden), notify the newly-created animation</comment>
  <comment type="line">// controller. (Skip this check for SVG-as-an-image documents, though,</comment>
  <comment type="line">// because they don't get OnPageShow / OnPageHide calls).</comment>
  <if>if <condition>(<expr>!<name>mIsShowing</name> &amp;&amp; !<name>mIsBeingUsedAsImage</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mAnimationController</name>-&gt;<name>OnPageHide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>mAnimationController</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// MOZ_SMIL</comment>

<struct>struct <name>DirTable</name> <block>{<public type="default">
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>mName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRUint8</name></type>     <name>mValue</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>DirTable</name></type> <name><name>dirAttributes</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{<expr>"ltr"</expr>, <expr><name>IBMBIDI_TEXTDIRECTION_LTR</name></expr>}</block></expr>,
  <expr><block>{<expr>"rtl"</expr>, <expr><name>IBMBIDI_TEXTDIRECTION_RTL</name></expr>}</block></expr>,
  <expr><block>{<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Retrieve the "direction" property of the document.
 *
 * @lina 01/09/2001
 */</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetDir</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aDirection</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>options</name> <init>= <expr><call><name>GetBidiOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for (<init><decl><type><specifier>const</specifier> <name>DirTable</name>*</type> <name>elt</name> <init>= <expr><name>dirAttributes</name></expr></init></decl>;</init> <condition><expr><name><name>elt</name>-&gt;<name>mName</name></name></expr>;</condition> <incr><expr><name>elt</name>++</expr></incr>) <block>{
    <if>if <condition>(<expr><call><name>GET_BIDI_OPTION_DIRECTION</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call> == <name><name>elt</name>-&gt;<name>mValue</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>CopyASCIItoUTF16</name><argument_list>(<argument><expr><name><name>elt</name>-&gt;<name>mName</name></name></expr></argument>, <argument><expr><name>aDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    }</block></then></if>
  }</block></for>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block" format="doxygen">/**
 * Set the "direction" property of the document.
 *
 * @lina 01/09/2001
 */</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>SetDir</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aDirection</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>options</name> <init>= <expr><call><name>GetBidiOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for (<init><decl><type><specifier>const</specifier> <name>DirTable</name>*</type> <name>elt</name> <init>= <expr><name>dirAttributes</name></expr></init></decl>;</init> <condition><expr><name><name>elt</name>-&gt;<name>mName</name></name></expr>;</condition> <incr><expr><name>elt</name>++</expr></incr>) <block>{
    <if>if <condition>(<expr><name>aDirection</name> == <call><name>NS_ConvertASCIItoUTF16</name><argument_list>(<argument><expr><name><name>elt</name>-&gt;<name>mName</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><call><name>GET_BIDI_OPTION_DIRECTION</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call> != <name><name>elt</name>-&gt;<name>mValue</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>SET_BIDI_OPTION_DIRECTION</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>elt</name>-&gt;<name>mValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>nsIPresShell</name> *</type><name>shell</name> <init>= <expr><call><name>GetShell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>shell</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>nsPresContext</name> *</type><name>context</name> <init>= <expr><call><name><name>shell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NS_ERROR_UNEXPECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>context</name>-&gt;<name>SetBidi</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <comment type="line">// No presentation; just set it on ourselves</comment>
          <expr_stmt><expr><call><name>SetBidiOptions</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></then></if>

      <break>break;</break>
    }</block></then></if>
  }</block></for>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<comment type="line">//</comment>
<comment type="line">// nsIDOMNode methods</comment>
<comment type="line">//</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetNodeName</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aNodeName</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aNodeName</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"#document"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetNodeValue</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aNodeValue</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SetDOMStringToNull</name><argument_list>(<argument><expr><name>aNodeValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>SetNodeValue</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aNodeValue</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// The DOM spec says that when nodeValue is defined to be null "setting it</comment>
  <comment type="line">// has no effect", so we don't throw an exception.</comment>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetNodeType</name></name><parameter_list>(<param><decl><type><name>PRUint16</name>*</type> <name>aNodeType</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aNodeType</name> = <name><name>nsIDOMNode</name>::<name>DOCUMENT_NODE</name></name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetParentNode</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>**</type> <name>aParentNode</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aParentNode</name> = <name>nsnull</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetChildNodes</name></name><parameter_list>(<param><decl><type><name>nsIDOMNodeList</name>**</type> <name>aChildNodes</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsINode</name>::<name>GetChildNodes</name></name><argument_list>(<argument><expr><name>aChildNodes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>HasChildNodes</name></name><parameter_list>(<param><decl><type><name>PRBool</name>*</type> <name>aHasChildNodes</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG</name><argument_list>(<argument><expr><name>aHasChildNodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aHasChildNodes</name> = (<call><name><name>mChildren</name>.<name>ChildCount</name></name><argument_list>()</argument_list></call> != 0)</expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>HasAttributes</name></name><parameter_list>(<param><decl><type><name>PRBool</name>*</type> <name>aHasAttributes</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG</name><argument_list>(<argument><expr><name>aHasAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aHasAttributes</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetFirstChild</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>**</type> <name>aFirstChild</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsINode</name>::<name>GetFirstChild</name></name><argument_list>(<argument><expr><name>aFirstChild</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetLastChild</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>**</type> <name>aLastChild</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsINode</name>::<name>GetLastChild</name></name><argument_list>(<argument><expr><name>aLastChild</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetPreviousSibling</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>**</type> <name>aPreviousSibling</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aPreviousSibling</name> = <name>nsnull</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetNextSibling</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>**</type> <name>aNextSibling</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aNextSibling</name> = <name>nsnull</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetAttributes</name></name><parameter_list>(<param><decl><type><name>nsIDOMNamedNodeMap</name>**</type> <name>aAttributes</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aAttributes</name> = <name>nsnull</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetNamespaceURI</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aNamespaceURI</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SetDOMStringToNull</name><argument_list>(<argument><expr><name>aNamespaceURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetPrefix</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aPrefix</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SetDOMStringToNull</name><argument_list>(<argument><expr><name>aPrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>SetPrefix</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aPrefix</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_DOM_NO_MODIFICATION_ALLOWED_ERR</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetLocalName</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aLocalName</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SetDOMStringToNull</name><argument_list>(<argument><expr><name>aLocalName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>InsertBefore</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>*</type> <name>aNewChild</name></decl></param>, <param><decl><type><name>nsIDOMNode</name>*</type> <name>aRefChild</name></decl></param>,
                         <param><decl><type><name>nsIDOMNode</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>ReplaceOrInsertBefore</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>aNewChild</name></expr></argument>, <argument><expr><name>aRefChild</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>ReplaceChild</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>*</type> <name>aNewChild</name></decl></param>, <param><decl><type><name>nsIDOMNode</name>*</type> <name>aOldChild</name></decl></param>,
                         <param><decl><type><name>nsIDOMNode</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>ReplaceOrInsertBefore</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>aNewChild</name></expr></argument>, <argument><expr><name>aOldChild</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>RemoveChild</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>*</type> <name>aOldChild</name></decl></param>, <param><decl><type><name>nsIDOMNode</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsINode</name>::<name>RemoveChild</name></name><argument_list>(<argument><expr><name>aOldChild</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>AppendChild</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name>*</type> <name>aNewChild</name></decl></param>, <param><decl><type><name>nsIDOMNode</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsDocument</name>::<name>InsertBefore</name></name><argument_list>(<argument><expr><name>aNewChild</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>CloneNode</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aDeep</name></decl></param>, <param><decl><type><name>nsIDOMNode</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsNodeUtils</name>::<name>CloneNodeImpl</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aDeep</name></expr></argument>, <argument><expr>!<name>mCreatingStaticClone</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>Normalize</name></name><parameter_list>()</parameter_list>
<block>{
  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>mChildren</name>.<name>ChildCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>node</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name><name>mChildren</name>.<name>ChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>node</name>-&gt;<name>Normalize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>IsSupported</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aFeature</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aVersion</name></decl></param>,
                        <param><decl><type><name>PRBool</name>*</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsGenericElement</name>::<name>InternalIsSupported</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIDOMDocument</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument><expr><name>aFeature</name></expr></argument>, <argument><expr><name>aVersion</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>GetTextContent</name></name><parameter_list>(<param><decl><type><name>nsAString</name> &amp;</type><name>aTextContent</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SetDOMStringToNull</name><argument_list>(<argument><expr><name>aTextContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsDocument</name>::<name>IsEqualNode</name></name><parameter_list>(<param><decl><type><name>nsINode</name>*</type> <name>aOther</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>aOther</name> || !<call><name><name>aOther</name>-&gt;<name>IsNodeOfType</name></name><argument_list>(<argument><expr><name>eDOCUMENT</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <comment type="line">// Child nodes check.</comment>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>childCount</name> <init>= <expr><call><name>GetChildCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>childCount</name> != <call><name><name>aOther</name>-&gt;<name>GetChildCount</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>childCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
    <if>if <condition>(<expr>!<call><name>GetChildAt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>-&gt;<call><name>IsEqual</name><argument_list>(<argument><expr><call><name><name>aOther</name>-&gt;<name>GetChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>PR_FALSE</name></expr>;</return>
    }</block></then></if>
  }</block></for>

  <comment type="block">/* Checks not needed:  Prefix, namespace URI, local name, node name,
     node value, attributes.
   */</comment>

  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetInputEncoding</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aInputEncoding</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mHaveInputEncoding</name></expr>)</condition><then> <block>{
    <return>return <expr><call><name>GetCharacterSet</name><argument_list>(<argument><expr><name>aInputEncoding</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>SetDOMStringToNull</name><argument_list>(<argument><expr><name>aInputEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetXmlEncoding</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aXmlEncoding</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mXMLDeclarationBits</name> &amp; <name>XML_DECLARATION_BITS_DECLARATION_EXISTS</name> &amp;&amp;
      <name>mXMLDeclarationBits</name> &amp; <name>XML_DECLARATION_BITS_ENCODING_EXISTS</name></expr>)</condition><then> <block>{
    <comment type="line">// XXX We don't store the encoding given in the xml declaration.</comment>
    <comment type="line">// For now, just output the inputEncoding which we do store.</comment>
    <expr_stmt><expr><call><name>GetInputEncoding</name><argument_list>(<argument><expr><name>aXmlEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name>SetDOMStringToNull</name><argument_list>(<argument><expr><name>aXmlEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetXmlStandalone</name></name><parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>aXmlStandalone</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aXmlStandalone</name> = 
    <name>mXMLDeclarationBits</name> &amp; <name>XML_DECLARATION_BITS_DECLARATION_EXISTS</name> &amp;&amp;
    <name>mXMLDeclarationBits</name> &amp; <name>XML_DECLARATION_BITS_STANDALONE_EXISTS</name> &amp;&amp;
    <name>mXMLDeclarationBits</name> &amp; <name>XML_DECLARATION_BITS_STANDALONE_YES</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>SetXmlStandalone</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aXmlStandalone</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetXmlVersion</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aXmlVersion</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// If there is no declaration, the value is "1.0".</comment>

  <comment type="line">// XXX We only support "1.0", so always output "1.0" until that changes.</comment>
  <expr_stmt><expr><call><name><name>aXmlVersion</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"1.0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>SetXmlVersion</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aXmlVersion</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetStrictErrorChecking</name></name><parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>aStrictErrorChecking</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// This attribute is true by default, and we don't really support it being false.</comment>
  <expr_stmt><expr>*<name>aStrictErrorChecking</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>SetStrictErrorChecking</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aStrictErrorChecking</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// We don't really support non-strict error checking, so just no-op for now.</comment>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetDocumentURI</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aDocumentURI</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mDocumentURI</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>uri</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mDocumentURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CopyUTF8toUTF16</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>aDocumentURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name>SetDOMStringToNull</name><argument_list>(<argument><expr><name>aDocumentURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>SetDocumentURI</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aDocumentURI</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Not allowing this yet, need to think about security ramifications first.</comment>
  <comment type="line">// We use mDocumentURI to get principals for this document.</comment>
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>BlastSubtreeToPieces</name><parameter_list>(<param><decl><type><name>nsINode</name> *</type><name>aNode</name></decl></param>)</parameter_list>;</function_decl>

<function><type><name>PLDHashOperator</name></type>
<name>BlastFunc</name><parameter_list>(<param><decl><type><name><name>nsAttrHashKey</name>::<name>KeyType</name></name></type> <name>aKey</name></decl></param>, <param><decl><type><name>nsDOMAttribute</name> *</type><name>aData</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aUserArg</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAttribute</name></expr></argument>&gt;</argument_list></name> *</type><name>attr</name> <init>=
    <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAttribute</name></expr></argument>&gt;</argument_list></name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aUserArg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>attr</name> = <name>aData</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>attr</name>-&gt;<name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
               <argument><expr>"non-nsIAttribute somehow made it into the hashmap?!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>PL_DHASH_STOP</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>BlastSubtreeToPieces</name><parameter_list>(<param><decl><type><name>nsINode</name> *</type><name>aNode</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name><name>aNode</name>-&gt;<name>IsElement</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsGenericElement</name> *</type><name>element</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsGenericElement</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsDOMAttributeMap</name> *</type><name>map</name> <init>= <expr><call><name><name>element</name>-&gt;<name>GetAttributeMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>map</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAttribute</name></expr></argument>&gt;</argument_list></name></type> <name>attr</name></decl>;</decl_stmt>
      <while>while <condition>(<expr><call><name><name>map</name>-&gt;<name>Enumerate</name></name><argument_list>(<argument><expr><name>BlastFunc</name></expr></argument>, <argument><expr>&amp;<name>attr</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition> <block>{
        <expr_stmt><expr><call><name>BlastSubtreeToPieces</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
        <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>=
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          <expr><call><name><name>element</name>-&gt;<name>UnsetAttr</name></name><argument_list>(<argument><expr><call><name><name>attr</name>-&gt;<name>NodeInfo</name></name><argument_list>()</argument_list></call>-&gt;<call><name>NamespaceID</name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>attr</name>-&gt;<name>NodeInfo</name></name><argument_list>()</argument_list></call>-&gt;<call><name>NameAtom</name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// XXX Should we abort here?</comment>
        <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"Uhoh, UnsetAttr shouldn't fail!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>
    }</block></then></if>
  }</block></then></if>

  <expr_stmt><expr><name>count</name> = <call><name><name>aNode</name>-&gt;<name>GetChildCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <expr_stmt><expr><call><name>BlastSubtreeToPieces</name><argument_list>(<argument><expr><call><name><name>aNode</name>-&gt;<name>GetChildAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>=
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr><call><name><name>aNode</name>-&gt;<name>RemoveChildAt</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// XXX Should we abort here?</comment>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"Uhoh, RemoveChildAt shouldn't fail!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>AdoptNode</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name> *</type><name>aAdoptedNode</name></decl></param>, <param><decl><type><name>nsIDOMNode</name> **</type><name>aResult</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG</name><argument_list>(<argument><expr><name>aAdoptedNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aResult</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>CheckSameOrigin</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aAdoptedNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINode</name></expr></argument>&gt;</argument_list></name></type> <name>adoptedNode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRUint16</name></type> <name>nodeType</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aAdoptedNode</name>-&gt;<name>GetNodeType</name></name><argument_list>(<argument><expr>&amp;<name>nodeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name>nodeType</name></expr>)</condition> <block>{
    <case>case <expr><name><name>nsIDOMNode</name>::<name>ATTRIBUTE_NODE</name></name></expr>:
    <block>{
      <comment type="line">// Remove from ownerElement.</comment>
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMAttr</name></expr></argument>&gt;</argument_list></name></type> <name>adoptedAttr</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aAdoptedNode</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>ownerElement</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rv</name> = <call><name><name>adoptedAttr</name>-&gt;<name>GetOwnerElement</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>ownerElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>ownerElement</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMAttr</name></expr></argument>&gt;</argument_list></name></type> <name>newAttr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name><name>ownerElement</name>-&gt;<name>RemoveAttributeNode</name></name><argument_list>(<argument><expr><name>adoptedAttr</name></expr></argument>,
                                               <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>newAttr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>newAttr</name>.<name>swap</name></name><argument_list>(<argument><expr><name>adoptedAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><name>adoptedNode</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>adoptedAttr</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    }</block>
    </case><case>case <expr><name><name>nsIDOMNode</name>::<name>DOCUMENT_FRAGMENT_NODE</name></name></expr>:
    </case><case>case <expr><name><name>nsIDOMNode</name>::<name>ELEMENT_NODE</name></name></expr>:
    </case><case>case <expr><name><name>nsIDOMNode</name>::<name>PROCESSING_INSTRUCTION_NODE</name></name></expr>:
    </case><case>case <expr><name><name>nsIDOMNode</name>::<name>TEXT_NODE</name></name></expr>:
    </case><case>case <expr><name><name>nsIDOMNode</name>::<name>CDATA_SECTION_NODE</name></name></expr>:
    </case><case>case <expr><name><name>nsIDOMNode</name>::<name>COMMENT_NODE</name></name></expr>:
    <block>{
      <expr_stmt><expr><name>adoptedNode</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aAdoptedNode</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// We don't want to adopt an element into its own contentDocument or into</comment>
      <comment type="line">// a descendant contentDocument, so we check if the frameElement of this</comment>
      <comment type="line">// document or any of its parents is the adopted node or one of its</comment>
      <comment type="line">// descendants.</comment>
      <decl_stmt><decl><type><name>nsIDocument</name> *</type><name>doc</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>
      <do>do <block>{
        <decl_stmt><decl><type><name>nsPIDOMWindow</name> *</type><name>win</name> <init>= <expr><call><name><name>doc</name>-&gt;<name>GetWindow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>win</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINode</name></expr></argument>&gt;</argument_list></name></type> <name>node</name> <init>=
            <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name><name>win</name>-&gt;<name>GetFrameElementInternal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>node</name> &amp;&amp;
              <call><name><name>nsContentUtils</name>::<name>ContentIsDescendantOf</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>adoptedNode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>NS_ERROR_DOM_HIERARCHY_REQUEST_ERR</name></expr>;</return>
          }</block></then></if>
        }</block></then></if>
      }</block> while <condition>(<expr>(<name>doc</name> = <call><name><name>doc</name>-&gt;<name>GetParentDocument</name></name><argument_list>()</argument_list></call>)</expr>)</condition>;</do>

      <comment type="line">// Remove from parent.</comment>
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>parent</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>aAdoptedNode</name>-&gt;<name>GetParentNode</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>parent</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>newChild</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name><name>parent</name>-&gt;<name>RemoveChild</name></name><argument_list>(<argument><expr><name>aAdoptedNode</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>newChild</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <break>break;</break>
    }</block>
    </case><case>case <expr><name><name>nsIDOMNode</name>::<name>ENTITY_REFERENCE_NODE</name></name></expr>:
    <block>{
      <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
    }</block>
    </case><case>case <expr><name><name>nsIDOMNode</name>::<name>DOCUMENT_NODE</name></name></expr>:
    </case><case>case <expr><name><name>nsIDOMNode</name>::<name>DOCUMENT_TYPE_NODE</name></name></expr>:
    </case><case>case <expr><name><name>nsIDOMNode</name>::<name>ENTITY_NODE</name></name></expr>:
    </case><case>case <expr><name><name>nsIDOMNode</name>::<name>NOTATION_NODE</name></name></expr>:
    <block>{
      <return>return <expr><name>NS_ERROR_DOM_NOT_SUPPORTED_ERR</name></expr>;</return>
    }</block>
    </case><default>default:
    <block>{
      <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"Don't know how to adopt this nodetype for adoptNode."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>NS_ERROR_DOM_NOT_SUPPORTED_ERR</name></expr>;</return>
    }</block>
  </default>}</block></switch>

  <decl_stmt><decl><type><name>nsIDocument</name> *</type><name>oldDocument</name> <init>= <expr><call><name><name>adoptedNode</name>-&gt;<name>GetOwnerDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>sameDocument</name> <init>= <expr><name>oldDocument</name> == <name>this</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JSObject</name> *</type><name>newScope</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>sameDocument</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rv</name> = <call><name><name>nsContentUtils</name>::<name>GetContextAndScope</name></name><argument_list>(<argument><expr><name>oldDocument</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>&amp;<name>cx</name></expr></argument>, <argument><expr>&amp;<name>newScope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsINode</name></expr></argument>&gt;</argument_list></name></type> <name>nodesWithProperties</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>nsNodeUtils</name>::<name>Adopt</name></name><argument_list>(<argument><expr><name>adoptedNode</name></expr></argument>, <argument><expr><name>sameDocument</name> ? <name>nsnull</name> : <name>mNodeInfoManager</name></expr></argument>,
                          <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>newScope</name></expr></argument>, <argument><expr><name>nodesWithProperties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// Disconnect all nodes from their parents, since some have the old document</comment>
    <comment type="line">// as their ownerDocument and some have this as their ownerDocument.</comment>
    <expr_stmt><expr><call><name>BlastSubtreeToPieces</name><argument_list>(<argument><expr><name>adoptedNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name>sameDocument</name> &amp;&amp; <name>oldDocument</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>PRUint32</name></type> <name>count</name> <init>= <expr><call><name><name>nodesWithProperties</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for (<init><decl><type><name>PRUint32</name></type> <name>j</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <call><name><name>oldDocument</name>-&gt;<name>GetPropertyTableCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
        <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
          <comment type="line">// Remove all properties.</comment>
          <expr_stmt><expr><call><name><name>oldDocument</name>-&gt;<name>PropertyTable</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call>-&gt;
            <call><name>DeleteAllPropertiesFor</name><argument_list>(<argument><expr><name><name>nodesWithProperties</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
      }</block></for>
    }</block></then></if>

    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>count</name> <init>= <expr><call><name><name>nodesWithProperties</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>sameDocument</name> &amp;&amp; <name>oldDocument</name></expr>)</condition><then> <block>{
    <for>for (<init><decl><type><name>PRUint32</name></type> <name>j</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <call><name><name>oldDocument</name>-&gt;<name>GetPropertyTableCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
      <decl_stmt><decl><type><name>nsPropertyTable</name> *</type><name>oldTable</name> <init>= <expr><call><name><name>oldDocument</name>-&gt;<name>PropertyTable</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>nsPropertyTable</name> *</type><name>newTable</name> <init>= <expr><call><name>PropertyTable</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>rv</name> = <call><name><name>oldTable</name>-&gt;<name>TransferOrDeleteAllPropertiesFor</name></name><argument_list>(<argument><expr><name><name>nodesWithProperties</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                                          <argument><expr><name>newTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>oldTable</name>-&gt;<name>DeleteAllPropertiesFor</name></name><argument_list>(<argument><expr><name><name>nodesWithProperties</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></for>
    }</block></for>

    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <comment type="line">// Disconnect all nodes from their parents.</comment>
      <expr_stmt><expr><call><name>BlastSubtreeToPieces</name><argument_list>(<argument><expr><name>adoptedNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <expr_stmt><expr><name>rv</name> = <call><name><name>nsNodeUtils</name>::<name>CallUserDataHandlers</name></name><argument_list>(<argument><expr><name>nodesWithProperties</name></expr></argument>, <argument><expr><name>this</name></expr></argument>,
                                         <argument><expr><name><name>nsIDOMUserDataHandler</name>::<name>NODE_ADOPTED</name></name></expr></argument>,
                                         <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name><name>adoptedNode</name>-&gt;<name>GetOwnerDoc</name></name><argument_list>()</argument_list></call> != <name>this</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_DOM_WRONG_DOCUMENT_ERR</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>adoptedNode</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetDomConfig</name></name><parameter_list>(<param><decl><type><name>nsIDOMDOMConfiguration</name> **</type><name>aConfig</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>NormalizeDocument</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// We don't support DOMConfigurations yet, so this just</comment>
  <comment type="line">// does a straight shot of normalization.</comment>
  <return>return <expr><call><name>Normalize</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>RenameNode</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name> *</type><name>aNode</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>namespaceURI</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>qualifiedName</name></decl></param>,
                       <param><decl><type><name>nsIDOMNode</name> **</type><name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetOwnerDocument</name></name><parameter_list>(<param><decl><type><name>nsIDOMDocument</name>**</type> <name>aOwnerDocument</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsINode</name>::<name>GetOwnerDocument</name></name><argument_list>(<argument><expr><name>aOwnerDocument</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsIEventListenerManager</name>*</type>
<name><name>nsDocument</name>::<name>GetListenerManager</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aCreateIfNotFound</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mListenerManager</name> || !<name>aCreateIfNotFound</name></expr>)</condition><then> <block>{
    <return>return <expr><name>mListenerManager</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_NewEventListenerManager</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mListenerManager</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>mListenerManager</name>-&gt;<name>SetListenerTarget</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIDocument</name> *</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>mListenerManager</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>GetSystemEventGroup</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventGroup</name> **</type><name>aGroup</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIEventListenerManager</name>*</type> <name>manager</name> <init>= <expr><call><name>GetListenerManager</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>manager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>manager</name>-&gt;<name>GetSystemEventGroupLM</name></name><argument_list>(<argument><expr><name>aGroup</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>PreHandleEvent</name></name><parameter_list>(<param><decl><type><name>nsEventChainPreVisitor</name>&amp;</type> <name>aVisitor</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name><name>aVisitor</name>.<name>mCanHandle</name></name> = <name>PR_TRUE</name></expr>;</expr_stmt>
   <comment type="line">// FIXME! This is a hack to make middle mouse paste working also in Editor.</comment>
   <comment type="line">// Bug 329119</comment>
  <expr_stmt><expr><name><name>aVisitor</name>.<name>mForceContentDispatch</name></name> = <name>PR_TRUE</name></expr>;</expr_stmt>

  <comment type="line">// Load events must not propagate to |window| object, see bug 335251.</comment>
  <if>if <condition>(<expr><name><name>aVisitor</name>.<name>mEvent</name>-&gt;<name>message</name></name> != <name>NS_LOAD</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsGlobalWindow</name>*</type> <name>window</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsGlobalWindow</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>GetWindow</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>aVisitor</name>.<name>mParentTarget</name></name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsPIDOMEventTarget</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>PostHandleEvent</name></name><parameter_list>(<param><decl><type><name>nsEventChainPostVisitor</name>&amp;</type> <name>aVisitor</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>DispatchDOMEvent</name></name><parameter_list>(<param><decl><type><name>nsEvent</name>*</type> <name>aEvent</name></decl></param>,
                             <param><decl><type><name>nsIDOMEvent</name>*</type> <name>aDOMEvent</name></decl></param>,
                             <param><decl><type><name>nsPresContext</name>*</type> <name>aPresContext</name></decl></param>,
                             <param><decl><type><name>nsEventStatus</name>*</type> <name>aEventStatus</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsEventDispatcher</name>::<name>DispatchDOMEvent</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsINode</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><name>aEvent</name></expr></argument>, <argument><expr><name>aDOMEvent</name></expr></argument>,
                                             <argument><expr><name>aPresContext</name></expr></argument>, <argument><expr><name>aEventStatus</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>AddEventListenerByIID</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventListener</name> *</type><name>aListener</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>nsIID</name>&amp;</type> <name>aIID</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIEventListenerManager</name>*</type> <name>manager</name> <init>= <expr><call><name>GetListenerManager</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>manager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>manager</name>-&gt;<name>AddEventListenerByIID</name></name><argument_list>(<argument><expr><name>aListener</name></expr></argument>, <argument><expr><name>aIID</name></expr></argument>, <argument><expr><name>NS_EVENT_FLAG_BUBBLE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>RemoveEventListenerByIID</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventListener</name> *</type><name>aListener</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>nsIID</name>&amp;</type> <name>aIID</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>mListenerManager</name> ?
    <call><name><name>mListenerManager</name>-&gt;<name>RemoveEventListenerByIID</name></name><argument_list>(<argument><expr><name>aListener</name></expr></argument>, <argument><expr><name>aIID</name></expr></argument>,
                                               <argument><expr><name>NS_EVENT_FLAG_BUBBLE</name></expr></argument>)</argument_list></call> :
    <name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>AddEventListener</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aType</name></decl></param>,
                             <param><decl><type><name>nsIDOMEventListener</name>*</type> <name>aListener</name></decl></param>,
                             <param><decl><type><name>PRBool</name></type> <name>aUseCapture</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>AddEventListener</name><argument_list>(<argument><expr><name>aType</name></expr></argument>, <argument><expr><name>aListener</name></expr></argument>, <argument><expr><name>aUseCapture</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>RemoveEventListener</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aType</name></decl></param>,
                                <param><decl><type><name>nsIDOMEventListener</name>*</type> <name>aListener</name></decl></param>,
                                <param><decl><type><name>PRBool</name></type> <name>aUseCapture</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>RemoveGroupedEventListener</name><argument_list>(<argument><expr><name>aType</name></expr></argument>, <argument><expr><name>aListener</name></expr></argument>, <argument><expr><name>aUseCapture</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>DispatchEvent</name></name><parameter_list>(<param><decl><type><name>nsIDOMEvent</name>*</type> <name>aEvent</name></decl></param>, <param><decl><type><name>PRBool</name> *</type><name>_retval</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Obtain a presentation context</comment>
  <decl_stmt><decl><type><name>nsIPresShell</name> *</type><name>shell</name> <init>= <expr><call><name>GetShell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsPresContext</name></expr></argument>&gt;</argument_list></name></type> <name>context</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>shell</name></expr>)</condition><then> <block>{
     <expr_stmt><expr><name>context</name> = <call><name><name>shell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsEventStatus</name></type> <name>status</name> <init>= <expr><name>nsEventStatus_eIgnore</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>=
    <expr><call><name><name>nsEventDispatcher</name>::<name>DispatchDOMEvent</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsINode</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aEvent</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>_retval</name> = (<name>status</name> != <name>nsEventStatus_eConsumeNoDefault</name>)</expr>;</expr_stmt>
  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>AddGroupedEventListener</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aType</name></decl></param>,
                                    <param><decl><type><name>nsIDOMEventListener</name> *</type><name>aListener</name></decl></param>,
                                    <param><decl><type><name>PRBool</name></type> <name>aUseCapture</name></decl></param>,
                                    <param><decl><type><name>nsIDOMEventGroup</name> *</type><name>aEvtGrp</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIEventListenerManager</name>*</type> <name>manager</name> <init>= <expr><call><name>GetListenerManager</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>manager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>flags</name> <init>= <expr><name>aUseCapture</name> ? <name>NS_EVENT_FLAG_CAPTURE</name> : <name>NS_EVENT_FLAG_BUBBLE</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>manager</name>-&gt;<name>AddEventListenerByType</name></name><argument_list>(<argument><expr><name>aListener</name></expr></argument>, <argument><expr><name>aType</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>aEvtGrp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>RemoveGroupedEventListener</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aType</name></decl></param>,
                                       <param><decl><type><name>nsIDOMEventListener</name> *</type><name>aListener</name></decl></param>,
                                       <param><decl><type><name>PRBool</name></type> <name>aUseCapture</name></decl></param>,
                                       <param><decl><type><name>nsIDOMEventGroup</name> *</type><name>aEvtGrp</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mListenerManager</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>flags</name> <init>= <expr><name>aUseCapture</name> ? <name>NS_EVENT_FLAG_CAPTURE</name> : <name>NS_EVENT_FLAG_BUBBLE</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mListenerManager</name>-&gt;<name>RemoveEventListenerByType</name></name><argument_list>(<argument><expr><name>aListener</name></expr></argument>, <argument><expr><name>aType</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
                                                <argument><expr><name>aEvtGrp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>CanTrigger</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type> <name>type</name></decl></param>, <param><decl><type><name>PRBool</name> *</type><name>_retval</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>IsRegisteredHere</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type> <name>type</name></decl></param>, <param><decl><type><name>PRBool</name> *</type><name>_retval</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>AddEventListener</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aType</name></decl></param>,
                             <param><decl><type><name>nsIDOMEventListener</name> *</type><name>aListener</name></decl></param>,
                             <param><decl><type><name>PRBool</name></type> <name>aUseCapture</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aWantsUntrusted</name></decl></param>,
                             <param><decl><type><name>PRUint8</name></type> <name>optional_argc</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>aWantsUntrusted</name> || <name>optional_argc</name> &gt; 0</expr></argument>,
               <argument><expr>"Won't check if this is chrome, you want to set "
               "aWantsUntrusted to PR_FALSE or make the aWantsUntrusted "
               "explicit by making optional_argc non-zero."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIEventListenerManager</name>*</type> <name>manager</name> <init>= <expr><call><name>GetListenerManager</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>manager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>flags</name> <init>= <expr><name>aUseCapture</name> ? <name>NS_EVENT_FLAG_CAPTURE</name> : <name>NS_EVENT_FLAG_BUBBLE</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>aWantsUntrusted</name> ||
      (<name>optional_argc</name> == 0 &amp;&amp; !<call><name><name>nsContentUtils</name>::<name>IsChromeDoc</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>flags</name> |= <name>NS_PRIV_EVENT_UNTRUSTED_PERMITTED</name></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><call><name><name>manager</name>-&gt;<name>AddEventListenerByType</name></name><argument_list>(<argument><expr><name>aListener</name></expr></argument>, <argument><expr><name>aType</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>CreateEvent</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aEventType</name></decl></param>, <param><decl><type><name>nsIDOMEvent</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aReturn</name> = <name>nsnull</name></expr>;</expr_stmt>

  <comment type="line">// Obtain a presentation shell</comment>

  <decl_stmt><decl><type><name>nsIPresShell</name> *</type><name>shell</name> <init>= <expr><call><name>GetShell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsPresContext</name> *</type><name>presContext</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>shell</name></expr>)</condition><then> <block>{
    <comment type="line">// Retrieve the context</comment>
    <expr_stmt><expr><name>presContext</name> = <call><name><name>shell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// Create event even without presContext.</comment>
  <return>return <expr><call><name><name>nsEventDispatcher</name>::<name>CreateEvent</name></name><argument_list>(<argument><expr><name>presContext</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                                        <argument><expr><name>aEventType</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>CreateEventGroup</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventGroup</name> **</type><name>aInstancePtrResult</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMEventGroup</name></expr></argument>&gt;</argument_list></name></type> <name>group</name><argument_list>(<argument><expr><call><name>do_CreateInstance</name><argument_list>(<argument><expr><name>kDOMEventGroupCID</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aInstancePtrResult</name> = <name>group</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aInstancePtrResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>FlushPendingNotifications</name></name><parameter_list>(<param><decl><type><name>mozFlushType</name></type> <name>aType</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mParser</name> || <name>mWeakSink</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContentSink</name></expr></argument>&gt;</argument_list></name></type> <name>sink</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>mParser</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>sink</name> = <call><name><name>mParser</name>-&gt;<name>GetContentSink</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>sink</name> = <call><name>do_QueryReferent</name><argument_list>(<argument><expr><name>mWeakSink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>!<name>sink</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>mWeakSink</name> = <name>nsnull</name></expr>;</expr_stmt>
      }</block></then></if>
    }</block></else></if>
    <comment type="line">// Determine if it is safe to flush the sink notifications</comment>
    <comment type="line">// by determining if it safe to flush all the presshells.</comment>
    <if>if <condition>(<expr><name>sink</name> &amp;&amp; (<name>aType</name> == <name>Flush_Content</name> || <call><name>IsSafeToFlush</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>sink</name>-&gt;<name>FlushPendingNotifications</name></name><argument_list>(<argument><expr><name>aType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <comment type="line">// Should we be flushing pending binding constructors in here?</comment>

  <if>if <condition>(<expr><name>aType</name> &lt;= <name>Flush_ContentAndNotify</name></expr>)</condition><then> <block>{
    <comment type="line">// Nothing to do here</comment>
    <return>return;</return>
  }</block></then></if>

  <comment type="line">// If we have a parent we must flush the parent too to ensure that our</comment>
  <comment type="line">// container is reflowed if its size was changed.  But if it's not safe to</comment>
  <comment type="line">// flush ourselves, then don't flush the parent, since that can cause things</comment>
  <comment type="line">// like resizes of our frame's widget, which we can't handle while flushing</comment>
  <comment type="line">// is unsafe.</comment>
  <comment type="line">// Since media queries mean that a size change of our container can</comment>
  <comment type="line">// affect style, we need to promote a style flush on ourself to a</comment>
  <comment type="line">// layout flush on our parent, since we need our container to be the</comment>
  <comment type="line">// correct size to determine the correct style.</comment>
  <if>if <condition>(<expr><name>mParentDocument</name> &amp;&amp; <call><name>IsSafeToFlush</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>mozFlushType</name></type> <name>parentType</name> <init>= <expr><name>aType</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>aType</name> &gt;= <name>Flush_Style</name></expr>)</condition><then>
      <expr_stmt><expr><name>parentType</name> = <call><name>NS_MAX</name><argument_list>(<argument><expr><name>Flush_Layout</name></expr></argument>, <argument><expr><name>aType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name><name>mParentDocument</name>-&gt;<name>FlushPendingNotifications</name></name><argument_list>(<argument><expr><name>parentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>shell</name> <init>= <expr><call><name>GetShell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>shell</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>shell</name>-&gt;<name>FlushPendingNotifications</name></name><argument_list>(<argument><expr><name>aType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>Flush</name><parameter_list>(<param><decl><type><name>nsIDocument</name>*</type> <name>aDocument</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>mozFlushType</name>*</type> <name>type</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><specifier>const</specifier> <name>mozFlushType</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aDocument</name>-&gt;<name>FlushPendingNotifications</name></name><argument_list>(<argument><expr>*<name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>FlushExternalResources</name></name><parameter_list>(<param><decl><type><name>mozFlushType</name></type> <name>aType</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aType</name> &gt;= <name>Flush_Style</name></expr></argument>,
    <argument><expr>"should only need to flush for style or higher in external resources"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>GetDisplayDocument</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>EnumerateExternalResources</name><argument_list>(<argument><expr><name>Flush</name></expr></argument>, <argument><expr>&amp;<name>aType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>nsIScriptEventManager</name>*</type>
<name><name>nsDocument</name>::<name>GetScriptEventManager</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mScriptEventManager</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mScriptEventManager</name> = new <call><name>nsScriptEventManager</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// automatically AddRefs</comment>
  }</block></then></if>

  <return>return <expr><name>mScriptEventManager</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>SetXMLDeclaration</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>aVersion</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>aEncoding</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>PRInt32</name></type> <name>aStandalone</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>aVersion</name> || *<name>aVersion</name> == '\0'</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mXMLDeclarationBits</name> = 0</expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <expr_stmt><expr><name>mXMLDeclarationBits</name> = <name>XML_DECLARATION_BITS_DECLARATION_EXISTS</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>aEncoding</name> &amp;&amp; *<name>aEncoding</name> != '\0'</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mXMLDeclarationBits</name> |= <name>XML_DECLARATION_BITS_ENCODING_EXISTS</name></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><name>aStandalone</name> == 1</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mXMLDeclarationBits</name> |= <name>XML_DECLARATION_BITS_STANDALONE_EXISTS</name> |
                           <name>XML_DECLARATION_BITS_STANDALONE_YES</name></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><name>aStandalone</name> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mXMLDeclarationBits</name> |= <name>XML_DECLARATION_BITS_STANDALONE_EXISTS</name></expr>;</expr_stmt>
  }</block></then></if></else></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>GetXMLDeclaration</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aVersion</name></decl></param>, <param><decl><type><name>nsAString</name>&amp;</type> <name>aEncoding</name></decl></param>,
                              <param><decl><type><name>nsAString</name>&amp;</type> <name>aStandalone</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aVersion</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>aEncoding</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>aStandalone</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!(<name>mXMLDeclarationBits</name> &amp; <name>XML_DECLARATION_BITS_DECLARATION_EXISTS</name>)</expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>

  <comment type="line">// always until we start supporting 1.1 etc.</comment>
  <expr_stmt><expr><call><name><name>aVersion</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"1.0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>mXMLDeclarationBits</name> &amp; <name>XML_DECLARATION_BITS_ENCODING_EXISTS</name></expr>)</condition><then> <block>{
    <comment type="line">// This is what we have stored, not necessarily what was written</comment>
    <comment type="line">// in the original</comment>
    <expr_stmt><expr><call><name>GetCharacterSet</name><argument_list>(<argument><expr><name>aEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><name>mXMLDeclarationBits</name> &amp; <name>XML_DECLARATION_BITS_STANDALONE_EXISTS</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>mXMLDeclarationBits</name> &amp; <name>XML_DECLARATION_BITS_STANDALONE_YES</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>aStandalone</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"yes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>aStandalone</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"no"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then></if>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsDocument</name>::<name>IsScriptEnabled</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScriptSecurityManager</name></expr></argument>&gt;</argument_list></name></type> <name>sm</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_SCRIPTSECURITYMANAGER_CONTRACTID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>sm</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIScriptGlobalObject</name>*</type> <name>globalObject</name> <init>= <expr><call><name>GetScriptGlobalObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>globalObject</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIScriptContext</name> *</type><name>scriptContext</name> <init>= <expr><call><name><name>globalObject</name>-&gt;<name>GetContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>scriptContext</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>JSContext</name>*</type> <name>cx</name> <init>= <expr>(<name>JSContext</name> *) <call><name><name>scriptContext</name>-&gt;<name>GetNativeContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>enabled</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>sm</name>-&gt;<name>CanExecuteScripts</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>NodePrincipal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>enabled</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>enabled</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>GetRadioGroup</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aName</name></decl></param>,
                          <param><decl><type><name>nsRadioGroupStruct</name> **</type><name>aRadioGroup</name></decl></param>)</parameter_list>
<block>{
  <function_decl><type><name>nsAutoString</name></type> <name>tmKey</name><parameter_list>(<param><decl><type><name>aName</name></type></decl></param>)</parameter_list>;</function_decl>
  <if>if<condition>(<expr><call><name>IsHTML</name><argument_list>()</argument_list></call></expr>)</condition><then>
     <expr_stmt><expr><call><name>ToLowerCase</name><argument_list>(<argument><expr><name>tmKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if> <comment type="line">//should case-insensitive.</comment>
  <if>if <condition>(<expr><call><name><name>mRadioGroups</name>.<name>Get</name></name><argument_list>(<argument><expr><name>tmKey</name></expr></argument>, <argument><expr><name>aRadioGroup</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsAutoPtr</name><argument_list>&lt;<argument><expr><name>nsRadioGroupStruct</name></expr></argument>&gt;</argument_list></name></type> <name>radioGroup</name><argument_list>(<argument><expr>new <call><name>nsRadioGroupStruct</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>radioGroup</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><call><name><name>mRadioGroups</name>.<name>Put</name></name><argument_list>(<argument><expr><name>tmKey</name></expr></argument>, <argument><expr><name>radioGroup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aRadioGroup</name> = <name>radioGroup</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>radioGroup</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>SetCurrentRadioButton</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aName</name></decl></param>,
                                  <param><decl><type><name>nsIDOMHTMLInputElement</name>*</type> <name>aRadio</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsRadioGroupStruct</name>*</type> <name>radioGroup</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetRadioGroup</name><argument_list>(<argument><expr><name>aName</name></expr></argument>, <argument><expr>&amp;<name>radioGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>radioGroup</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name><name>radioGroup</name>-&gt;<name>mSelectedRadioButton</name></name> = <name>aRadio</name></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetCurrentRadioButton</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aName</name></decl></param>,
                                  <param><decl><type><name>nsIDOMHTMLInputElement</name>**</type> <name>aRadio</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsRadioGroupStruct</name>*</type> <name>radioGroup</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetRadioGroup</name><argument_list>(<argument><expr><name>aName</name></expr></argument>, <argument><expr>&amp;<name>radioGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>radioGroup</name></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aRadio</name> = <name><name>radioGroup</name>-&gt;<name>mSelectedRadioButton</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aRadio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetPositionInGroup</name></name><parameter_list>(<param><decl><type><name>nsIDOMHTMLInputElement</name> *</type><name>aRadio</name></decl></param>,
                               <param><decl><type><name>PRInt32</name> *</type><name>aPositionIndex</name></decl></param>,
                               <param><decl><type><name>PRInt32</name> *</type><name>aItemsInGroup</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aPositionIndex</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aItemsInGroup</name> = 1</expr>;</expr_stmt>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>name</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aRadio</name>-&gt;<name>GetName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name><name>name</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsRadioGroupStruct</name>*</type> <name>radioGroup</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetRadioGroup</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>radioGroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFormControl</name></expr></argument>&gt;</argument_list></name></type> <name>radioControl</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aRadio</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>radioControl</name></expr></argument>, <argument><expr>"Radio button should implement nsIFormControl"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aPositionIndex</name> = <call><name><name>radioGroup</name>-&gt;<name>mRadioButtons</name>.<name>IndexOf</name></name><argument_list>(<argument><expr><name>radioControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>*<name>aPositionIndex</name> &gt;= 0</expr></argument>, <argument><expr>"Radio button not found in its own group"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aItemsInGroup</name> = <call><name><name>radioGroup</name>-&gt;<name>mRadioButtons</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetNextRadioButton</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aName</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>PRBool</name></type> <name>aPrevious</name></decl></param>,
                               <param><decl><type><name>nsIDOMHTMLInputElement</name>*</type>  <name>aFocusedRadio</name></decl></param>,
                               <param><decl><type><name>nsIDOMHTMLInputElement</name>**</type> <name>aRadioOut</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// XXX Can we combine the HTML radio button method impls of </comment>
  <comment type="line">//     nsDocument and nsHTMLFormControl?</comment>
  <comment type="line">// XXX Why is HTML radio button stuff in nsDocument, as </comment>
  <comment type="line">//     opposed to nsHTMLDocument?</comment>
  <expr_stmt><expr>*<name>aRadioOut</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsRadioGroupStruct</name>*</type> <name>radioGroup</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetRadioGroup</name><argument_list>(<argument><expr><name>aName</name></expr></argument>, <argument><expr>&amp;<name>radioGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>radioGroup</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// Return the radio button relative to the focused radio button.</comment>
  <comment type="line">// If no radio is focused, get the radio relative to the selected one.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLInputElement</name></expr></argument>&gt;</argument_list></name></type> <name>currentRadio</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>aFocusedRadio</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>currentRadio</name> = <name>aFocusedRadio</name></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <expr_stmt><expr><name>currentRadio</name> = <name><name>radioGroup</name>-&gt;<name>mSelectedRadioButton</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>currentRadio</name></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></then></if>
  }</block></else></if>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFormControl</name></expr></argument>&gt;</argument_list></name></type> <name>radioControl</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>currentRadio</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>index</name> <init>= <expr><call><name><name>radioGroup</name>-&gt;<name>mRadioButtons</name>.<name>IndexOf</name></name><argument_list>(<argument><expr><name>radioControl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>index</name> &lt; 0</expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>numRadios</name> <init>= <expr><call><name><name>radioGroup</name>-&gt;<name>mRadioButtons</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>disabled</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLInputElement</name></expr></argument>&gt;</argument_list></name></type> <name>radio</name></decl>;</decl_stmt>
  <do>do <block>{
    <if>if <condition>(<expr><name>aPrevious</name></expr>)</condition><then> <block>{
      <if>if <condition>(<expr>--<name>index</name> &lt; 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>index</name> = <name>numRadios</name> -1</expr>;</expr_stmt>
      }</block></then></if>
    }</block></then>
    <else>else <if>if <condition>(<expr>++<name>index</name> &gt;= <name>numRadios</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>index</name> = 0</expr>;</expr_stmt>
    }</block></then></if></else></if>
    <expr_stmt><expr><name>radio</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name><name>radioGroup</name>-&gt;<name>mRadioButtons</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>radio</name></expr></argument>, <argument><expr>"mRadioButtons holding a non-radio button"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>radio</name>-&gt;<name>GetDisabled</name></name><argument_list>(<argument><expr>&amp;<name>disabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block> while <condition>(<expr><name>disabled</name> &amp;&amp; <name>radio</name> != <name>currentRadio</name></expr>)</condition>;</do>

  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aRadioOut</name> = <name>radio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>AddToRadioGroup</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aName</name></decl></param>,
                            <param><decl><type><name>nsIFormControl</name>*</type> <name>aRadio</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsRadioGroupStruct</name>*</type> <name>radioGroup</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetRadioGroup</name><argument_list>(<argument><expr><name>aName</name></expr></argument>, <argument><expr>&amp;<name>radioGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>radioGroup</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>radioGroup</name>-&gt;<name>mRadioButtons</name>.<name>AppendObject</name></name><argument_list>(<argument><expr><name>aRadio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>RemoveFromRadioGroup</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aName</name></decl></param>,
                                 <param><decl><type><name>nsIFormControl</name>*</type> <name>aRadio</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsRadioGroupStruct</name>*</type> <name>radioGroup</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetRadioGroup</name><argument_list>(<argument><expr><name>aName</name></expr></argument>, <argument><expr>&amp;<name>radioGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>radioGroup</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>radioGroup</name>-&gt;<name>mRadioButtons</name>.<name>RemoveObject</name></name><argument_list>(<argument><expr><name>aRadio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>WalkRadioGroup</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aName</name></decl></param>,
                           <param><decl><type><name>nsIRadioVisitor</name>*</type> <name>aVisitor</name></decl></param>,
                           <param><decl><type><name>PRBool</name></type> <name>aFlushContent</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsRadioGroupStruct</name>*</type> <name>radioGroup</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetRadioGroup</name><argument_list>(<argument><expr><name>aName</name></expr></argument>, <argument><expr>&amp;<name>radioGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>radioGroup</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>stop</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
  <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>radioGroup</name>-&gt;<name>mRadioButtons</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
    <expr_stmt><expr><call><name><name>aVisitor</name>-&gt;<name>Visit</name></name><argument_list>(<argument><expr><name><name>radioGroup</name>-&gt;<name>mRadioButtons</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>stop</name></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>
  }</block></for>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>RetrieveRelevantHeaders</name></name><parameter_list>(<param><decl><type><name>nsIChannel</name> *</type><name>aChannel</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIHttpChannel</name></expr></argument>&gt;</argument_list></name></type> <name>httpChannel</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aChannel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRTime</name></type> <name>modDate</name> <init>= <expr><name>LL_ZERO</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>httpChannel</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>tmp</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>httpChannel</name>-&gt;<name>GetResponseHeader</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"last-modified"</expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>PRTime</name></type> <name>time</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>PRStatus</name></type> <name>st</name> <init>= <expr><call><name>PR_ParseTimeString</name><argument_list>(<argument><expr><call><name><name>tmp</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr>&amp;<name>time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>st</name> == <name>PR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>modDate</name> = <name>time</name></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>

    <comment type="line">// The misspelled key 'referer' is as per the HTTP spec</comment>
    <expr_stmt><expr><name>rv</name> = <call><name><name>httpChannel</name>-&gt;<name>GetRequestHeader</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"referer"</expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><name>mReferrer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mReferrer</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name><name>headers</name><index>[]</index></name> <init>= <expr><block>{
      <expr>"default-style"</expr>,
      <expr>"content-style-type"</expr>,
      <expr>"content-language"</expr>,
      <expr>"content-disposition"</expr>,
      <expr>"refresh"</expr>,
      <expr>"x-dns-prefetch-control"</expr>,
      <expr>"x-content-security-policy"</expr>,
      <expr>"x-content-security-policy-report-only"</expr>,
      <expr>"x-frame-options"</expr>,
      <comment type="line">// add more http headers if you need</comment>
      <comment type="line">// XXXbz don't add content-location support without reading bug</comment>
      <comment type="line">// 238654 and its dependencies/dups first.</comment>
      <expr>0</expr>
    }</block></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>headerVal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *<specifier>const</specifier> *</type><name>name</name> <init>= <expr><name>headers</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr>*<name>name</name></expr>)</condition> <block>{
      <expr_stmt><expr><name>rv</name> =
        <call><name><name>httpChannel</name>-&gt;<name>GetResponseHeader</name></name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr>*<name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>headerVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>headerVal</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAtom</name></expr></argument>&gt;</argument_list></name></type> <name>key</name> <init>= <expr><call><name>do_GetAtom</name><argument_list>(<argument><expr>*<name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>SetHeaderData</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>NS_ConvertASCIItoUTF16</name><argument_list>(<argument><expr><name>headerVal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr>++<name>name</name></expr>;</expr_stmt>
    }</block></while>
  }</block></then> <else>else <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFileChannel</name></expr></argument>&gt;</argument_list></name></type> <name>fileChannel</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aChannel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>fileChannel</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name></type> <name>file</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>fileChannel</name>-&gt;<name>GetFile</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>file</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PRTime</name></type> <name>msecs</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name><name>file</name>-&gt;<name>GetLastModifiedTime</name></name><argument_list>(<argument><expr>&amp;<name>msecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>PRInt64</name></type> <name>intermediateValue</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>LL_I2L</name><argument_list>(<argument><expr><name>intermediateValue</name></expr></argument>, <argument><expr><name>PR_USEC_PER_MSEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>LL_MUL</name><argument_list>(<argument><expr><name>modDate</name></expr></argument>, <argument><expr><name>msecs</name></expr></argument>, <argument><expr><name>intermediateValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIMultiPartChannel</name></expr></argument>&gt;</argument_list></name></type> <name>partChannel</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aChannel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>partChannel</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>contentDisp</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name><name>partChannel</name>-&gt;<name>GetContentDisposition</name></name><argument_list>(<argument><expr><name>contentDisp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>contentDisp</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>SetHeaderData</name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>headerContentDisposition</name></name></expr></argument>,
                        <argument><expr><call><name>NS_ConvertASCIItoUTF16</name><argument_list>(<argument><expr><name>contentDisp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
    }</block></else></if>
  }</block></else></if>

  <if>if <condition>(<expr><call><name>LL_IS_ZERO</name><argument_list>(<argument><expr><name>modDate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// We got nothing from our attempt to ask nsIFileChannel and</comment>
    <comment type="line">// nsIHttpChannel for the last modified time. Return the current</comment>
    <comment type="line">// time.</comment>
    <expr_stmt><expr><name>modDate</name> = <call><name>PR_Now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>mLastModified</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>LL_NE</name><argument_list>(<argument><expr><name>modDate</name></expr></argument>, <argument><expr><name>LL_ZERO</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRExplodedTime</name></type> <name>prtime</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>PR_ExplodeTime</name><argument_list>(<argument><expr><name>modDate</name></expr></argument>, <argument><expr><name>PR_LocalTimeParameters</name></expr></argument>, <argument><expr>&amp;<name>prtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// "MM/DD/YYYY hh:mm:ss"</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>formatedTime</name><index>[<expr>24</expr>]</index></name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>PR_snprintf</name><argument_list>(<argument><expr><name>formatedTime</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>formatedTime</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                    <argument><expr>"%02ld/%02ld/%04hd %02ld:%02ld:%02ld"</expr></argument>,
                    <argument><expr><name><name>prtime</name>.<name>tm_month</name></name> + 1</expr></argument>, <argument><expr><name><name>prtime</name>.<name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>prtime</name>.<name>tm_year</name></name></expr></argument>,
                    <argument><expr><name><name>prtime</name>.<name>tm_hour</name></name></expr></argument>     ,  <argument><expr><name><name>prtime</name>.<name>tm_min</name></name></expr></argument>,  <argument><expr><name><name>prtime</name>.<name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>CopyASCIItoUTF16</name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>formatedTime</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mLastModified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>CreateElem</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aName</name></decl></param>, <param><decl><type><name>nsIAtom</name> *</type><name>aPrefix</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aNamespaceID</name></decl></param>,
                       <param><decl><type><name>PRBool</name></type> <name>aDocumentDefaultType</name></decl></param>, <param><decl><type><name>nsIContent</name> **</type><name>aResult</name></decl></param>)</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>qName</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>aPrefix</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>aPrefix</name>-&gt;<name>ToString</name></name><argument_list>(<argument><expr><name>qName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>qName</name>.<name>Append</name></name><argument_list>(<argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name><name>qName</name>.<name>Append</name></name><argument_list>(<argument><expr><name>aName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Note: "a:b:c" is a valid name in non-namespaces XML, and</comment>
  <comment type="line">// nsDocument::CreateElement can call us with such a name and no prefix,</comment>
  <comment type="line">// which would cause an error if we just used PR_TRUE here.</comment>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>nsAware</name> <init>= <expr><name>aPrefix</name> != <name>nsnull</name> || <name>aNamespaceID</name> != <call><name>GetDefaultNamespaceID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>nsContentUtils</name>::<name>CheckQName</name></name><argument_list>(<argument><expr><name>qName</name></expr></argument>, <argument><expr><name>nsAware</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr>"Don't pass invalid prefixes to nsDocument::CreateElem, "
               "check caller."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr>*<name>aResult</name> = <name>nsnull</name></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>elementType</name> <init>= <expr><name>aDocumentDefaultType</name> ? <name>mDefaultElementType</name> :
    <name>aNamespaceID</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name></type> <name>nodeInfo</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mNodeInfoManager</name>-&gt;<name>GetNodeInfo</name></name><argument_list>(<argument><expr><name>aName</name></expr></argument>, <argument><expr><name>aPrefix</name></expr></argument>, <argument><expr><name>aNamespaceID</name></expr></argument>,
                                <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>nodeInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>nodeInfo</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>NS_NewElement</name><argument_list>(<argument><expr><name>aResult</name></expr></argument>, <argument><expr><name>elementType</name></expr></argument>, <argument><expr><call><name><name>nodeInfo</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr></argument>,
                       <argument><expr><name>NOT_FROM_PARSER</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsDocument</name>::<name>IsSafeToFlush</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>shell</name> <init>= <expr><call><name>GetShell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>shell</name></expr>)</condition><then>
    <return>return <expr><name>PR_TRUE</name></expr>;</return></then></if>

  <return>return <expr><call><name><name>shell</name>-&gt;<name>IsSafeToFlush</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>Sanitize</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// Sanitize the document by resetting all password fields and any form</comment>
  <comment type="line">// fields with autocomplete=off to their default values.  We do this now,</comment>
  <comment type="line">// instead of when the presentation is restored, to offer some protection</comment>
  <comment type="line">// in case there is ever an exploit that allows a cached document to be</comment>
  <comment type="line">// accessed from a different document.</comment>

  <comment type="line">// First locate all input elements, regardless of whether they are</comment>
  <comment type="line">// in a form, and reset the password and autocomplete=off elements.</comment>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNodeList</name></expr></argument>&gt;</argument_list></name></type> <name>nodes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetElementsByTagName</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"input"</expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>length</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>nodes</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>nodes</name>-&gt;<name>GetLength</name></name><argument_list>(<argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>item</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <expr_stmt><expr><call><name><name>nodes</name>-&gt;<name>Item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr>"null item in node list!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLInputElement</name></expr></argument>&gt;</argument_list></name></type> <name>input</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>input</name></expr>)</condition><then>
      <continue>continue;</continue></then></if>

    <decl_stmt><decl><type><name>PRBool</name></type> <name>resetValue</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>input</name>-&gt;<name>GetAttribute</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"autocomplete"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name><name>value</name>.<name>LowerCaseEqualsLiteral</name></name><argument_list>(<argument><expr>"off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>resetValue</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>input</name>-&gt;<name>GetType</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name><name>value</name>.<name>LowerCaseEqualsLiteral</name></name><argument_list>(<argument><expr>"password"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>resetValue</name> = <name>PR_TRUE</name></expr>;</expr_stmt></then></if>
    }</block></else></if>

    <if>if <condition>(<expr><name>resetValue</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFormControl</name></expr></argument>&gt;</argument_list></name></type> <name>fc</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>fc</name>-&gt;<name>Reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>

  <comment type="line">// Now locate all _form_ elements that have autocomplete=off and reset them</comment>
  <expr_stmt><expr><name>rv</name> = <call><name>GetElementsByTagName</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"form"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>length</name> = 0</expr>;</expr_stmt>
  <if>if <condition>(<expr><name>nodes</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>nodes</name>-&gt;<name>GetLength</name></name><argument_list>(<argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <expr_stmt><expr><call><name><name>nodes</name>-&gt;<name>Item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr>"null item in nodelist"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLFormElement</name></expr></argument>&gt;</argument_list></name></type> <name>form</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>form</name></expr>)</condition><then>
      <continue>continue;</continue></then></if>

    <expr_stmt><expr><call><name><name>form</name>-&gt;<name>GetAttribute</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"autocomplete"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name><name>value</name>.<name>LowerCaseEqualsLiteral</name></name><argument_list>(<argument><expr>"off"</expr></argument>)</argument_list></call></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>form</name>-&gt;<name>Reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
  }</block></for>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<struct>struct <name>SubDocEnumArgs</name>
<block>{<public type="default">
  <decl_stmt><decl><type><name><name>nsIDocument</name>::<name>nsSubDocEnumFunc</name></name></type> <name>callback</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>data</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>SubDocHashEnum</name><parameter_list>(<param><decl><type><name>PLDHashTable</name> *</type><name>table</name></decl></param>, <param><decl><type><name>PLDHashEntryHdr</name> *</type><name>hdr</name></decl></param>,
               <param><decl><type><name>PRUint32</name></type> <name>number</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>SubDocMapEntry</name> *</type><name>entry</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>SubDocMapEntry</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SubDocEnumArgs</name> *</type><name>args</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>SubDocEnumArgs</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsIDocument</name> *</type><name>subdoc</name> <init>= <expr><name><name>entry</name>-&gt;<name>mSubDocument</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>next</name> <init>= <expr><name>subdoc</name> ? <call><name><name>args</name>-&gt;<name>callback</name></name><argument_list>(<argument><expr><name>subdoc</name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call> : <name>PR_TRUE</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><name>next</name> ? <name>PL_DHASH_NEXT</name> : <name>PL_DHASH_STOP</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>EnumerateSubDocuments</name></name><parameter_list>(<param><decl><type><name>nsSubDocEnumFunc</name></type> <name>aCallback</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aData</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mSubDocuments</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>SubDocEnumArgs</name></type> <name>args</name> <init>= <expr><block>{ <expr><name>aCallback</name></expr>, <expr><name>aData</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>PL_DHashTableEnumerate</name><argument_list>(<argument><expr><name>mSubDocuments</name></expr></argument>, <argument><expr><name>SubDocHashEnum</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>CanCacheSubDocument</name><parameter_list>(<param><decl><type><name>PLDHashTable</name> *</type><name>table</name></decl></param>, <param><decl><type><name>PLDHashEntryHdr</name> *</type><name>hdr</name></decl></param>,
                    <param><decl><type><name>PRUint32</name></type> <name>number</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>SubDocMapEntry</name> *</type><name>entry</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>SubDocMapEntry</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name> *</type><name>canCacheArg</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PRBool</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsIDocument</name> *</type><name>subdoc</name> <init>= <expr><name><name>entry</name>-&gt;<name>mSubDocument</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// The aIgnoreRequest we were passed is only for us, so don't pass it on.</comment>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>canCache</name> <init>= <expr><name>subdoc</name> ? <call><name><name>subdoc</name>-&gt;<name>CanSavePresentation</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call> : <name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>canCache</name></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>canCacheArg</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <return>return <expr><name>PL_DHASH_STOP</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_bryner</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_PAGE_CACHE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>PRBool</name></type>
<name><name>nsDocument</name>::<name>CanSavePresentation</name></name><parameter_list>(<param><decl><type><name>nsIRequest</name> *</type><name>aNewRequest</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name>EventHandlingSuppressed</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsPIDOMWindow</name>*</type> <name>win</name> <init>= <expr><call><name>GetInnerWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>win</name> &amp;&amp; <call><name><name>win</name>-&gt;<name>TimeoutSuspendCount</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// Check our event listener manager for unload/beforeunload listeners.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsPIDOMEventTarget</name></expr></argument>&gt;</argument_list></name></type> <name>piTarget</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mScriptGlobalObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>piTarget</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsIEventListenerManager</name>*</type> <name>manager</name> <init>=
      <expr><call><name><name>piTarget</name>-&gt;<name>GetListenerManager</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>manager</name> &amp;&amp; <call><name><name>manager</name>-&gt;<name>HasUnloadListeners</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>PR_FALSE</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILoadGroup</name></expr></argument>&gt;</argument_list></name></type> <name>loadGroup</name> <init>= <expr><call><name>GetDocumentLoadGroup</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>loadGroup</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISimpleEnumerator</name></expr></argument>&gt;</argument_list></name></type> <name>requests</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>loadGroup</name>-&gt;<name>GetRequests</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>requests</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PRBool</name></type> <name>hasMore</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>requests</name>-&gt;<name>HasMoreElements</name></name><argument_list>(<argument><expr>&amp;<name>hasMore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>hasMore</name></expr>)</condition> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>elem</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>requests</name>-&gt;<name>GetNext</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIRequest</name></expr></argument>&gt;</argument_list></name></type> <name>request</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>request</name> &amp;&amp; <name>request</name> != <name>aNewRequest</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_PAGE_CACHE</name></cpp:ifdef>
        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>requestName</name></decl>, <decl><type ref="prev"/><name>docSpec</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>request</name>-&gt;<name>GetName</name></name><argument_list>(<argument><expr><name>requestName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mDocumentURI</name></expr>)</condition><then>
          <expr_stmt><expr><call><name><name>mDocumentURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>docSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"document %s has request %s\n"</expr></argument>,
               <argument><expr><call><name><name>docSpec</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>requestName</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return <expr><name>PR_FALSE</name></expr>;</return>
      }</block></then></if>
    }</block></while>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>canCache</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>mSubDocuments</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>PL_DHashTableEnumerate</name><argument_list>(<argument><expr><name>mSubDocuments</name></expr></argument>, <argument><expr><name>CanCacheSubDocument</name></expr></argument>, <argument><expr>&amp;<name>canCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>canCache</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>Destroy</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// The ContentViewer wants to release the document now.  So, tell our content</comment>
  <comment type="line">// to drop any references to the document so that it can be destroyed.</comment>
  <if>if <condition>(<expr><name>mIsGoingAway</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <expr_stmt><expr><name>mIsGoingAway</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RemovedFromDocShell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>oldVal</name> <init>= <expr><name>mInUnlinkOrDeletion</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>mInUnlinkOrDeletion</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><call><name><name>mChildren</name>.<name>ChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <expr_stmt><expr><call><name><name>mChildren</name>.<name>ChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>-&gt;<call><name>DestroyContent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><name>mInUnlinkOrDeletion</name> = <name>oldVal</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>mLayoutHistoryState</name> = <name>nsnull</name></expr>;</expr_stmt>

  <comment type="line">// Shut down our external resource map.  We might not need this for</comment>
  <comment type="line">// leak-fixing if we fix DocumentViewerImpl to do cycle-collection, but</comment>
  <comment type="line">// tearing down all those frame trees right now is the right thing to do.</comment>
  <expr_stmt><expr><call><name><name>mExternalResourceMap</name>.<name>Shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// XXX We really should let cycle collection do this, but that currently still</comment>
  <comment type="line">//     leaks (see https://bugzilla.mozilla.org/show_bug.cgi?id=406684).</comment>
  <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>ReleaseWrapper</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsINode</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>RemovedFromDocShell</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mRemovedFromDocShell</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <expr_stmt><expr><name>mRemovedFromDocShell</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>EnumerateFreezableElements</name><argument_list>(<argument><expr><name>NotifyActivityChanged</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><call><name><name>mChildren</name>.<name>ChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <expr_stmt><expr><call><name><name>mChildren</name>.<name>ChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>-&gt;<call><name>SaveSubtreeState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></for>
}</block></function>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsILayoutHistoryState</name></expr></argument>&gt;</argument_list></name></type>
<name><name>nsDocument</name>::<name>GetLayoutHistoryState</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <decl_stmt><decl><type><name>nsILayoutHistoryState</name>*</type> <name>state</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>mScriptGlobalObject</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr><name>state</name> = <name>mLayoutHistoryState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocShell</name></expr></argument>&gt;</argument_list></name></type> <name>docShell</name><argument_list>(<argument><expr><call><name>do_QueryReferent</name><argument_list>(<argument><expr><name>mDocumentContainer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>docShell</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>docShell</name>-&gt;<name>GetLayoutHistoryState</name></name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></else></if>

  <return>return <expr><name>state</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>EnsureOnloadBlocker</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// If mScriptGlobalObject is null, we shouldn't be messing with the loadgroup</comment>
  <comment type="line">// -- it's not ours.</comment>
  <if>if <condition>(<expr><name>mOnloadBlockCount</name> != 0 &amp;&amp; <name>mScriptGlobalObject</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILoadGroup</name></expr></argument>&gt;</argument_list></name></type> <name>loadGroup</name> <init>= <expr><call><name>GetDocumentLoadGroup</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>loadGroup</name></expr>)</condition><then> <block>{
      <comment type="line">// Check first to see if mOnloadBlocker is in the loadgroup.</comment>
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISimpleEnumerator</name></expr></argument>&gt;</argument_list></name></type> <name>requests</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>loadGroup</name>-&gt;<name>GetRequests</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>requests</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>PRBool</name></type> <name>hasMore</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>requests</name>-&gt;<name>HasMoreElements</name></name><argument_list>(<argument><expr>&amp;<name>hasMore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>hasMore</name></expr>)</condition> <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>elem</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>requests</name>-&gt;<name>GetNext</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIRequest</name></expr></argument>&gt;</argument_list></name></type> <name>request</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>request</name> &amp;&amp; <name>request</name> == <name>mOnloadBlocker</name></expr>)</condition><then> <block>{
          <return>return;</return>
        }</block></then></if>
      }</block></while>

      <comment type="line">// Not in the loadgroup, so add it.</comment>
      <expr_stmt><expr><call><name><name>loadGroup</name>-&gt;<name>AddRequest</name></name><argument_list>(<argument><expr><name>mOnloadBlocker</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>AsyncBlockOnload</name></name><parameter_list>()</parameter_list>
<block>{
  <while>while <condition>(<expr><name>mAsyncOnloadBlockCount</name></expr>)</condition> <block>{
    <expr_stmt><expr>--<name>mAsyncOnloadBlockCount</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BlockOnload</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></while>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>BlockOnload</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mDisplayDocument</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mDisplayDocument</name>-&gt;<name>BlockOnload</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>
  
  <comment type="line">// If mScriptGlobalObject is null, we shouldn't be messing with the loadgroup</comment>
  <comment type="line">// -- it's not ours.</comment>
  <if>if <condition>(<expr><name>mOnloadBlockCount</name> == 0 &amp;&amp; <name>mScriptGlobalObject</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr>!<call><name><name>nsContentUtils</name>::<name>IsSafeToRunScript</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <comment type="line">// Because AddRequest may lead to OnStateChange calls in chrome,</comment>
      <comment type="line">// block onload only when there are no script blockers.</comment>
      <expr_stmt><expr>++<name>mAsyncOnloadBlockCount</name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>mAsyncOnloadBlockCount</name> == 1</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>AddScriptRunner</name></name><argument_list>(
          <argument><expr><call><name>NS_NewRunnableMethod</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>&amp;<name><name>nsDocument</name>::<name>AsyncBlockOnload</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <return>return;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILoadGroup</name></expr></argument>&gt;</argument_list></name></type> <name>loadGroup</name> <init>= <expr><call><name>GetDocumentLoadGroup</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>loadGroup</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>loadGroup</name>-&gt;<name>AddRequest</name></name><argument_list>(<argument><expr><name>mOnloadBlocker</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
  <expr_stmt><expr>++<name>mOnloadBlockCount</name></expr>;</expr_stmt>      
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>UnblockOnload</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aFireSync</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mDisplayDocument</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mDisplayDocument</name>-&gt;<name>UnblockOnload</name></name><argument_list>(<argument><expr><name>aFireSync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <if>if <condition>(<expr><name>mOnloadBlockCount</name> == 0 &amp;&amp; <name>mAsyncOnloadBlockCount</name> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_NOTREACHED</name><argument_list>(<argument><expr>"More UnblockOnload() calls than BlockOnload() calls; dropping call"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <expr_stmt><expr>--<name>mOnloadBlockCount</name></expr>;</expr_stmt>

  <comment type="line">// If mScriptGlobalObject is null, we shouldn't be messing with the loadgroup</comment>
  <comment type="line">// -- it's not ours.</comment>
  <if>if <condition>(<expr><name>mOnloadBlockCount</name> == 0 &amp;&amp; <name>mScriptGlobalObject</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>aFireSync</name> &amp;&amp; <name>mAsyncOnloadBlockCount</name> == 0</expr>)</condition><then> <block>{
      <comment type="line">// Increment mOnloadBlockCount, since DoUnblockOnload will decrement it</comment>
      <expr_stmt><expr>++<name>mOnloadBlockCount</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>DoUnblockOnload</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>PostUnblockOnloadEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then></if>
}</block></function>

<class>class <name>nsUnblockOnloadEvent</name> <super>: <specifier>public</specifier> <name>nsRunnable</name></super> <block>{<private type="default">
</private><public>public:
  <constructor><name>nsUnblockOnloadEvent</name><parameter_list>(<param><decl><type><name>nsDocument</name> *</type><name>doc</name></decl></param>)</parameter_list> <member_list>: <call><name>mDoc</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call> </member_list><block>{}</block></constructor>
  <function><type><name>NS_IMETHOD</name></type> <name>Run</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>mDoc</name>-&gt;<name>DoUnblockOnload</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></function>
</public><private>private:  
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsDocument</name></expr></argument>&gt;</argument_list></name></type> <name>mDoc</name></decl>;</decl_stmt>
</private>}</block>;</class>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>PostUnblockOnloadEvent</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIRunnable</name></expr></argument>&gt;</argument_list></name></type> <name>evt</name> <init>= <expr>new <call><name>nsUnblockOnloadEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_DispatchToCurrentThread</name><argument_list>(<argument><expr><name>evt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// Stabilize block count so we don't post more events while this one is up</comment>
    <expr_stmt><expr>++<name>mOnloadBlockCount</name></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"failed to dispatch nsUnblockOnloadEvent"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>DoUnblockOnload</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr>!<name>mDisplayDocument</name></expr></argument>,
                  <argument><expr>"Shouldn't get here for resource document"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>mOnloadBlockCount</name> != 0</expr></argument>,
                  <argument><expr>"Shouldn't have a count of zero here, since we stabilized in "
                  "PostUnblockOnloadEvent"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr>--<name>mOnloadBlockCount</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>mOnloadBlockCount</name> != 0</expr>)</condition><then> <block>{
    <comment type="line">// We blocked again after the last unblock.  Nothing to do here.  We'll</comment>
    <comment type="line">// post a new event when we unblock again.</comment>
    <return>return;</return>
  }</block></then></if>

  <if>if <condition>(<expr><name>mAsyncOnloadBlockCount</name> != 0</expr>)</condition><then> <block>{
    <comment type="line">// We need to wait until the async onload block has been handled.</comment>
    <expr_stmt><expr><call><name>PostUnblockOnloadEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// If mScriptGlobalObject is null, we shouldn't be messing with the loadgroup</comment>
  <comment type="line">// -- it's not ours.</comment>
  <if>if <condition>(<expr><name>mScriptGlobalObject</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILoadGroup</name></expr></argument>&gt;</argument_list></name></type> <name>loadGroup</name> <init>= <expr><call><name>GetDocumentLoadGroup</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>loadGroup</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>loadGroup</name>-&gt;<name>RemoveRequest</name></name><argument_list>(<argument><expr><name>mOnloadBlocker</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>NS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
}</block></function>

<comment type="block">/* See if document is a child of this.  If so, return the frame element in this
 * document that holds currentDoc (or an ancestor). */</comment>
<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type>
<name><name>nsDocument</name>::<name>CheckAncestryAndGetFrame</name></name><parameter_list>(<param><decl><type><name>nsIDocument</name>*</type> <name>aDocument</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>parentDoc</name></decl>;</decl_stmt>
  <for>for (<init><expr><name>parentDoc</name> = <call><name><name>aDocument</name>-&gt;<name>GetParentDocument</name></name><argument_list>()</argument_list></call></expr>;</init>
       <condition><expr><name>parentDoc</name> != <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><specifier>const</specifier> <name>nsIDocument</name>* <specifier>const</specifier></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</condition>
       <incr><expr><name>parentDoc</name> = <call><name><name>parentDoc</name>-&gt;<name>GetParentDocument</name></name><argument_list>()</argument_list></call></expr></incr>) <block>{
    <if>if <condition>(<expr>!<name>parentDoc</name></expr>)</condition><then> <block>{
      <return>return <expr><name>nsnull</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>aDocument</name> = <name>parentDoc</name></expr>;</expr_stmt>
  }</block></for>

  <comment type="line">// In a child document.  Get the appropriate frame.</comment>
  <decl_stmt><decl><type><name>nsPIDOMWindow</name>*</type> <name>currentWindow</name> <init>= <expr><call><name><name>aDocument</name>-&gt;<name>GetWindow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>currentWindow</name></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name>nsIDOMElement</name>*</type> <name>frameElement</name> <init>= <expr><call><name><name>currentWindow</name>-&gt;<name>GetFrameElementInternal</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>frameElement</name></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// Sanity check result</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocument</name></expr></argument>&gt;</argument_list></name></type> <name>domDocument</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>frameElement</name>-&gt;<name>GetOwnerDocument</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>domDocument</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>domDocument</name> != <name>this</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Child documents should live in windows the parent owns"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name>frameElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>frameElement</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>DispatchPageTransition</name></name><parameter_list>(<param><decl><type><name>nsPIDOMEventTarget</name>*</type> <name>aDispatchTarget</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aType</name></decl></param>,
                                   <param><decl><type><name>PRBool</name></type> <name>aPersisted</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aDispatchTarget</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMEvent</name></expr></argument>&gt;</argument_list></name></type> <name>event</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CreateEvent</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"pagetransition"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMPageTransitionEvent</name></expr></argument>&gt;</argument_list></name></type> <name>ptEvent</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrivateDOMEvent</name></expr></argument>&gt;</argument_list></name></type> <name>pEvent</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>ptEvent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>pEvent</name> &amp;&amp; <call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>ptEvent</name>-&gt;<name>InitPageTransitionEvent</name></name><argument_list>(<argument><expr><name>aType</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>,
                                                                <argument><expr><name>PR_TRUE</name></expr></argument>,
                                                                <argument><expr><name>aPersisted</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>pEvent</name>-&gt;<name>SetTrusted</name></name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>pEvent</name>-&gt;<name>SetTarget</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>nsEventDispatcher</name>::<name>DispatchDOMEvent</name></name><argument_list>(<argument><expr><name>aDispatchTarget</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>event</name></expr></argument>,
                                          <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>NotifyPageShow</name><parameter_list>(<param><decl><type><name>nsIDocument</name>*</type> <name>aDocument</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>PRBool</name>*</type> <name>aPersistedPtr</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><specifier>const</specifier> <name>PRBool</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aDocument</name>-&gt;<name>OnPageShow</name></name><argument_list>(<argument><expr>*<name>aPersistedPtr</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>OnPageShow</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aPersisted</name></decl></param>,
                       <param><decl><type><name>nsIDOMEventTarget</name>*</type> <name>aDispatchStartTarget</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mVisible</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>EnumerateFreezableElements</name><argument_list>(<argument><expr><name>NotifyActivityChanged</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>EnumerateExternalResources</name><argument_list>(<argument><expr><name>NotifyPageShow</name></expr></argument>, <argument><expr>&amp;<name>aPersisted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>Element</name>*</type> <name>root</name> <init>= <expr><call><name>GetRootElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>aPersisted</name> &amp;&amp; <name>root</name></expr>)</condition><then> <block>{
    <comment type="line">// Send out notifications that our &lt;link&gt; elements are attached.</comment>
    <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsContentList</name></expr></argument>&gt;</argument_list></name></type> <name>links</name> <init>= <expr><call><name>NS_GetContentList</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
                                                      <argument><expr><name>kNameSpaceID_Unknown</name></expr></argument>,
                                                      <argument><expr><name><name>nsGkAtoms</name>::<name>link</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PRUint32</name></type> <name>linkCount</name> <init>= <expr><call><name><name>links</name>-&gt;<name>Length</name></name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>linkCount</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILink</name></expr></argument>&gt;</argument_list></name></type> <name>link</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name><name>links</name>-&gt;<name>Item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>link</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>link</name>-&gt;<name>LinkAdded</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>
  }</block></then></if>

  <comment type="line">// See nsIDocument</comment>
  <if>if <condition>(<expr>!<name>aDispatchStartTarget</name></expr>)</condition><then> <block>{
    <comment type="line">// Set mIsShowing before firing events, in case those event handlers</comment>
    <comment type="line">// move us around.</comment>
    <expr_stmt><expr><name>mIsShowing</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  }</block></then></if>
 
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SMIL</name></cpp:ifdef>
  <if>if <condition>(<expr><name>mAnimationController</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mAnimationController</name>-&gt;<name>OnPageShow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if>if <condition>(<expr><name>aPersisted</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>SetImagesNeedAnimating</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsPIDOMEventTarget</name></expr></argument>&gt;</argument_list></name></type> <name>target</name> <init>=
    <expr><name>aDispatchStartTarget</name> ? <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aDispatchStartTarget</name></expr></argument>)</argument_list></call> :
                           <call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name>GetWindow</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>DispatchPageTransition</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"pageshow"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aPersisted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>NotifyPageHide</name><parameter_list>(<param><decl><type><name>nsIDocument</name>*</type> <name>aDocument</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>PRBool</name>*</type> <name>aPersistedPtr</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><specifier>const</specifier> <name>PRBool</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aDocument</name>-&gt;<name>OnPageHide</name></name><argument_list>(<argument><expr>*<name>aPersistedPtr</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>OnPageHide</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aPersisted</name></decl></param>,
                       <param><decl><type><name>nsIDOMEventTarget</name>*</type> <name>aDispatchStartTarget</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Send out notifications that our &lt;link&gt; elements are detached,</comment>
  <comment type="line">// but only if this is not a full unload.</comment>
  <decl_stmt><decl><type><name>Element</name>*</type> <name>root</name> <init>= <expr><call><name>GetRootElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>aPersisted</name> &amp;&amp; <name>root</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsContentList</name></expr></argument>&gt;</argument_list></name></type> <name>links</name> <init>= <expr><call><name>NS_GetContentList</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
                                                      <argument><expr><name>kNameSpaceID_Unknown</name></expr></argument>,
                                                      <argument><expr><name><name>nsGkAtoms</name>::<name>link</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PRUint32</name></type> <name>linkCount</name> <init>= <expr><call><name><name>links</name>-&gt;<name>Length</name></name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>linkCount</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILink</name></expr></argument>&gt;</argument_list></name></type> <name>link</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name><name>links</name>-&gt;<name>Item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>link</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>link</name>-&gt;<name>LinkRemoved</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>
  }</block></then></if>

  <comment type="line">// See nsIDocument</comment>
  <if>if <condition>(<expr>!<name>aDispatchStartTarget</name></expr>)</condition><then> <block>{
    <comment type="line">// Set mIsShowing before firing events, in case those event handlers</comment>
    <comment type="line">// move us around.</comment>
    <expr_stmt><expr><name>mIsShowing</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
  }</block></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SMIL</name></cpp:ifdef>
  <if>if <condition>(<expr><name>mAnimationController</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mAnimationController</name>-&gt;<name>OnPageHide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <if>if <condition>(<expr><name>aPersisted</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>SetImagesNeedAnimating</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// Now send out a PageHide event.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsPIDOMEventTarget</name></expr></argument>&gt;</argument_list></name></type> <name>target</name> <init>=
    <expr><name>aDispatchStartTarget</name> ? <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aDispatchStartTarget</name></expr></argument>)</argument_list></call> :
                           <call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name>GetWindow</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>DispatchPageTransition</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"pagehide"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aPersisted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mVisible</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>EnumerateExternalResources</name><argument_list>(<argument><expr><name>NotifyPageHide</name></expr></argument>, <argument><expr>&amp;<name>aPersisted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>EnumerateFreezableElements</name><argument_list>(<argument><expr><name>NotifyActivityChanged</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>WillDispatchMutationEvent</name></name><parameter_list>(<param><decl><type><name>nsINode</name>*</type> <name>aTarget</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>mSubtreeModifiedDepth</name> != 0 ||
               <call><name><name>mSubtreeModifiedTargets</name>.<name>Count</name></name><argument_list>()</argument_list></call> == 0</expr></argument>,
               <argument><expr>"mSubtreeModifiedTargets not cleared after dispatching?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>++<name>mSubtreeModifiedDepth</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>aTarget</name></expr>)</condition><then> <block>{
    <comment type="line">// MayDispatchMutationEvent is often called just before this method,</comment>
    <comment type="line">// so it has already appended the node to mSubtreeModifiedTargets.</comment>
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>count</name> <init>= <expr><call><name><name>mSubtreeModifiedTargets</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>count</name> || <name><name>mSubtreeModifiedTargets</name><index>[<expr><name>count</name> - 1</expr>]</index></name> != <name>aTarget</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mSubtreeModifiedTargets</name>.<name>AppendObject</name></name><argument_list>(<argument><expr><name>aTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>MutationEventDispatched</name></name><parameter_list>(<param><decl><type><name>nsINode</name>*</type> <name>aTarget</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>--<name>mSubtreeModifiedDepth</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>mSubtreeModifiedDepth</name> == 0</expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>count</name> <init>= <expr><call><name><name>mSubtreeModifiedTargets</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>count</name></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsPIDOMWindow</name></expr></argument>&gt;</argument_list></name></type> <name>window</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>window</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name>GetScriptGlobalObject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>window</name> &amp;&amp;
        !<call><name><name>window</name>-&gt;<name>HasMutationListeners</name></name><argument_list>(<argument><expr><name>NS_EVENT_BITS_MUTATION_SUBTREEMODIFIED</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mSubtreeModifiedTargets</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsINode</name></expr></argument>&gt;</argument_list></name></type> <name>realTargets</name></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>PRInt32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
      <decl_stmt><decl><type><name>nsINode</name>*</type> <name>possibleTarget</name> <init>= <expr><name><name>mSubtreeModifiedTargets</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>possibleTarget</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>content</name> &amp;&amp; <call><name><name>content</name>-&gt;<name>IsInNativeAnonymousSubtree</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <continue>continue;</continue>
      }</block></then></if>

      <decl_stmt><decl><type><name>nsINode</name>*</type> <name>commonAncestor</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>PRInt32</name></type> <name>realTargetCount</name> <init>= <expr><call><name><name>realTargets</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for (<init><decl><type><name>PRInt32</name></type> <name>j</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name>realTargetCount</name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
        <expr_stmt><expr><name>commonAncestor</name> =
          <call><name><name>nsContentUtils</name>::<name>GetCommonAncestor</name></name><argument_list>(<argument><expr><name>possibleTarget</name></expr></argument>, <argument><expr><name><name>realTargets</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>commonAncestor</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>realTargets</name>.<name>ReplaceObjectAt</name></name><argument_list>(<argument><expr><name>commonAncestor</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        }</block></then></if>
      }</block></for>
      <if>if <condition>(<expr>!<name>commonAncestor</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>realTargets</name>.<name>AppendObject</name></name><argument_list>(<argument><expr><name>possibleTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>

    <expr_stmt><expr><call><name><name>mSubtreeModifiedTargets</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PRInt32</name></type> <name>realTargetCount</name> <init>= <expr><call><name><name>realTargets</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>PRInt32</name></type> <name>k</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>k</name> &lt; <name>realTargetCount</name></expr>;</condition> <incr><expr>++<name>k</name></expr></incr>) <block>{
      <function_decl><type><name>mozAutoRemovableBlockerRemover</name></type> <name>blockerRemover</name><parameter_list>(<param><decl><type><name>this</name></type></decl></param>)</parameter_list>;</function_decl>

      <function_decl><type><name>nsMutationEvent</name></type> <name>mutation</name><parameter_list>(<param><decl><type><name>PR_TRUE</name></type></decl></param>, <param><decl><type><name>NS_MUTATION_SUBTREEMODIFIED</name></type></decl></param>)</parameter_list>;</function_decl>
      <expr_stmt><expr><call><name><name>nsEventDispatcher</name>::<name>Dispatch</name></name><argument_list>(<argument><expr><name><name>realTargets</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr>&amp;<name>mutation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>AddStyleRelevantLink</name></name><parameter_list>(<param><decl><type><name>Link</name>*</type> <name>aLink</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aLink</name></expr></argument>, <argument><expr>"Passing in a null link.  Expect crashes RSN!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <decl_stmt><decl><type><name><name>nsPtrHashKey</name><argument_list>&lt;<argument><expr><name>Link</name></expr></argument>&gt;</argument_list></name>*</type> <name>entry</name> <init>= <expr><call><name><name>mStyledLinks</name>.<name>GetEntry</name></name><argument_list>(<argument><expr><name>aLink</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>entry</name></expr></argument>, <argument><expr>"Document already knows about this Link!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mStyledLinksCleared</name> = false</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr>(<name>void</name>)<call><name><name>mStyledLinks</name>.<name>PutEntry</name></name><argument_list>(<argument><expr><name>aLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>ForgetLink</name></name><parameter_list>(<param><decl><type><name>Link</name>*</type> <name>aLink</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aLink</name></expr></argument>, <argument><expr>"Passing in a null link.  Expect crashes RSN!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <decl_stmt><decl><type><name><name>nsPtrHashKey</name><argument_list>&lt;<argument><expr><name>Link</name></expr></argument>&gt;</argument_list></name>*</type> <name>entry</name> <init>= <expr><call><name><name>mStyledLinks</name>.<name>GetEntry</name></name><argument_list>(<argument><expr><name>aLink</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>entry</name> || <name>mStyledLinksCleared</name></expr></argument>,
               <argument><expr>"Document knows nothing about this Link!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr>(<name>void</name>)<call><name><name>mStyledLinks</name>.<name>RemoveEntry</name></name><argument_list>(<argument><expr><name>aLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>DestroyElementMaps</name></name><parameter_list>()</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <expr_stmt><expr><name>mStyledLinksCleared</name> = true</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name><name>mStyledLinks</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mIdentifierMap</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier>
<name>PLDHashOperator</name></type>
<name>EnumerateStyledLinks</name><parameter_list>(<param><decl><type><name><name>nsPtrHashKey</name><argument_list>&lt;<argument><expr><name>Link</name></expr></argument>&gt;</argument_list></name>*</type> <name>aEntry</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aArray</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>LinkArray</name>*</type> <name>array</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>LinkArray</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr>(<name>void</name>)<call><name><name>array</name>-&gt;<name>AppendElement</name></name><argument_list>(<argument><expr><call><name><name>aEntry</name>-&gt;<name>GetKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>RefreshLinkHrefs</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// Get a list of all links we know about.  We will reset them, which will</comment>
  <comment type="line">// remove them from the document, so we need a copy of what is in the</comment>
  <comment type="line">// hashtable.</comment>
  <decl_stmt><decl><type><name>LinkArray</name></type> <name>linksToNotify</name><argument_list>(<argument><expr><call><name><name>mStyledLinks</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr>(<name>void</name>)<call><name><name>mStyledLinks</name>.<name>EnumerateEntries</name></name><argument_list>(<argument><expr><name>EnumerateStyledLinks</name></expr></argument>, <argument><expr>&amp;<name>linksToNotify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Reset all of our styled links.</comment>
  <expr_stmt><expr><call><name>MOZ_AUTO_DOC_UPDATE</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>UPDATE_CONTENT_STATE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><decl><type><name><name>LinkArray</name>::<name>size_type</name></name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>linksToNotify</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
    <expr_stmt><expr><name><name>linksToNotify</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<call><name>ResetLinkState</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetScriptTypeID</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>aScriptType</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"No default script type here - ask some element"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>nsIProgrammingLanguage</name>::<name>UNKNOWN</name></name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>SetScriptTypeID</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aScriptType</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Can't change default script type for a document"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>CloneDocHelper</name></name><parameter_list>(<param><decl><type><name>nsDocument</name>*</type> <name>clone</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <expr_stmt><expr><name><name>clone</name>-&gt;<name>mIsStaticDocument</name></name> = <name>mCreatingStaticClone</name></expr>;</expr_stmt>

  <comment type="line">// Init document</comment>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>clone</name>-&gt;<name>Init</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Set URI/principal</comment>
  <expr_stmt><expr><call><name><name>clone</name>-&gt;<name>nsDocument</name>::<name>SetDocumentURI</name></name><argument_list>(<argument><expr><call><name><name>nsIDocument</name>::<name>GetDocumentURI</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Must set the principal first, since SetBaseURI checks it.</comment>
  <expr_stmt><expr><call><name><name>clone</name>-&gt;<name>SetPrincipal</name></name><argument_list>(<argument><expr><call><name>NodePrincipal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>clone</name>-&gt;<name>mDocumentBaseURI</name></name> = <name>mDocumentBaseURI</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>mCreatingStaticClone</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIChannel</name></expr></argument>&gt;</argument_list></name></type> <name>channel</name> <init>= <expr><call><name>GetChannel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILoadGroup</name></expr></argument>&gt;</argument_list></name></type> <name>loadGroup</name> <init>= <expr><call><name>GetDocumentLoadGroup</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>channel</name> &amp;&amp; <name>loadGroup</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>clone</name>-&gt;<name>Reset</name></name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>loadGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>nsIURI</name>*</type> <name>uri</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><specifier>const</specifier> <name>nsIDocument</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>-&gt;<call><name>GetDocumentURI</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>uri</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>clone</name>-&gt;<name>ResetToURI</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>loadGroup</name></expr></argument>, <argument><expr><call><name>NodePrincipal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></else></if>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>container</name> <init>= <expr><call><name>GetContainer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>clone</name>-&gt;<name>SetContainer</name></name><argument_list>(<argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// Set scripting object</comment>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>hasHadScriptObject</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsIScriptGlobalObject</name>*</type> <name>scriptObject</name> <init>=
    <expr><call><name>GetScriptHandlingObject</name><argument_list>(<argument><expr><name>hasHadScriptObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>scriptObject</name> || !<name>hasHadScriptObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>clone</name>-&gt;<name>SetScriptHandlingObject</name></name><argument_list>(<argument><expr><name>scriptObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Make the clone a data document</comment>
  <expr_stmt><expr><call><name><name>clone</name>-&gt;<name>SetLoadedAsData</name></name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Misc state</comment>

  <comment type="line">// State from nsIDocument</comment>
  <expr_stmt><expr><name><name>clone</name>-&gt;<name>mCharacterSet</name></name> = <name>mCharacterSet</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>clone</name>-&gt;<name>mCharacterSetSource</name></name> = <name>mCharacterSetSource</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>clone</name>-&gt;<name>mCompatMode</name></name> = <name>mCompatMode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>clone</name>-&gt;<name>mBidiOptions</name></name> = <name>mBidiOptions</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>clone</name>-&gt;<name>mContentLanguage</name></name> = <name>mContentLanguage</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>clone</name>-&gt;<name>SetContentTypeInternal</name></name><argument_list>(<argument><expr><call><name>GetContentTypeInternal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>clone</name>-&gt;<name>mSecurityInfo</name></name> = <name>mSecurityInfo</name></expr>;</expr_stmt>

  <comment type="line">// State from nsDocument</comment>
  <expr_stmt><expr><name><name>clone</name>-&gt;<name>mIsRegularHTML</name></name> = <name>mIsRegularHTML</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>clone</name>-&gt;<name>mXMLDeclarationBits</name></name> = <name>mXMLDeclarationBits</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>clone</name>-&gt;<name>mBaseTarget</name></name> = <name>mBaseTarget</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>SetReadyStateInternal</name></name><parameter_list>(<param><decl><type><name>ReadyState</name></type> <name>rs</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mReadyState</name> = <name>rs</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsPLDOMEvent</name></expr></argument>&gt;</argument_list></name></type> <name>plevent</name> <init>=
    <expr>new <call><name>nsPLDOMEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"readystatechange"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
  <if>if <condition>(<expr><name>plevent</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>plevent</name>-&gt;<name>RunDOMEventWhenSafe</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name><name>nsIDocument</name>::<name>ReadyState</name></name></type>
<name><name>nsDocument</name>::<name>GetReadyStateEnum</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr><name>mReadyState</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDocument</name>::<name>GetReadyState</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aReadyState</name></decl></param>)</parameter_list>
<block>{
  <switch>switch<condition>(<expr><name>mReadyState</name></expr>)</condition> <block>{
  <case>case <expr><name>READYSTATE_LOADING</name></expr> :
    <expr_stmt><expr><call><name><name>aReadyState</name>.<name>Assign</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"loading"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </case><case>case <expr><name>READYSTATE_INTERACTIVE</name></expr> :
    <expr_stmt><expr><call><name><name>aReadyState</name>.<name>Assign</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"interactive"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </case><case>case <expr><name>READYSTATE_COMPLETE</name></expr> :
    <expr_stmt><expr><call><name><name>aReadyState</name>.<name>Assign</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"complete"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>  
  </case><default>default:
    <expr_stmt><expr><call><name><name>aReadyState</name>.<name>Assign</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"uninitialized"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </default>}</block></switch>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>SuppressEventHandlingInDocument</name><parameter_list>(<param><decl><type><name>nsIDocument</name>*</type> <name>aDocument</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aDocument</name>-&gt;<name>SuppressEventHandling</name></name><argument_list>(<argument><expr>*<call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PRUint32</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>SuppressEventHandling</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aIncrease</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mEventsSuppressed</name> += <name>aIncrease</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>EnumerateSubDocuments</name><argument_list>(<argument><expr><name>SuppressEventHandlingInDocument</name></expr></argument>, <argument><expr>&amp;<name>aIncrease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>FireOrClearDelayedEvents</name><parameter_list>(<param><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>&amp;</type> <name>aDocuments</name></decl></param>,
                         <param><decl><type><name>PRBool</name></type> <name>aFireEvents</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIFocusManager</name>*</type> <name>fm</name> <init>= <expr><call><name><name>nsFocusManager</name>::<name>GetFocusManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>fm</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>aDocuments</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <if>if <condition>(<expr>!<name><name>aDocuments</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<call><name>EventHandlingSuppressed</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>fm</name>-&gt;<name>FireDelayedEvents</name></name><argument_list>(<argument><expr><name><name>aDocuments</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>shell</name> <init>= <expr><name><name>aDocuments</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<call><name>GetShell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>shell</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>shell</name>-&gt;<name>FireOrClearDelayedEvents</name></name><argument_list>(<argument><expr><name>aFireEvents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></for>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>MaybePreLoadImage</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>uri</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Early exit if the img is already present in the img-cache</comment>
  <comment type="line">// which indicates that the "real" load has already started and</comment>
  <comment type="line">// that we shouldn't preload it.</comment>
  <decl_stmt><decl><type><name>PRInt16</name></type> <name>blockingStatus</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name><name>nsContentUtils</name>::<name>IsImageInCache</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> ||
      !<call><name><name>nsContentUtils</name>::<name>CanLoadImage</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIDocument</name> *</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>NodePrincipal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>blockingStatus</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>

  <comment type="line">// Image not in cache - trigger preload</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>imgIRequest</name></expr></argument>&gt;</argument_list></name></type> <name>request</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>=
    <expr><call><name><name>nsContentUtils</name>::<name>LoadImage</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>,
                              <argument><expr><name>this</name></expr></argument>,
                              <argument><expr><call><name>NodePrincipal</name><argument_list>()</argument_list></call></expr></argument>,
                              <argument><expr><name>mDocumentURI</name></expr></argument>, <comment type="line">// uri of document used as referrer</comment>
                              <argument><expr><name>nsnull</name></expr></argument>,       <comment type="line">// no observer</comment>
                              <argument><expr><name><name>nsIRequest</name>::<name>LOAD_NORMAL</name></name></expr></argument>,
                              <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// Pin image-reference to avoid evicting it from the img-cache before</comment>
  <comment type="line">// the "real" load occurs. Unpinned in DispatchContentLoadedEvents and</comment>
  <comment type="line">// unlink</comment>
  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mPreloadingImages</name>.<name>AppendObject</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>nsEventStates</name></type>
<name><name>nsDocument</name>::<name>GetDocumentState</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name><name>mGotDocumentState</name>.<name>HasState</name></name><argument_list>(<argument><expr><name>NS_DOCUMENT_STATE_RTL_LOCALE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><call><name>IsDocumentRightToLeft</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>mDocumentState</name> |= <name>NS_DOCUMENT_STATE_RTL_LOCALE</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>mGotDocumentState</name> |= <name>NS_DOCUMENT_STATE_RTL_LOCALE</name></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr>!<call><name><name>mGotDocumentState</name>.<name>HasState</name></name><argument_list>(<argument><expr><name>NS_DOCUMENT_STATE_WINDOW_INACTIVE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsIPresShell</name>*</type> <name>shell</name> <init>= <expr><call><name>GetShell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>shell</name> &amp;&amp; <call><name><name>shell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call> &amp;&amp;
        <call><name><name>shell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call>-&gt;<call><name>IsTopLevelWindowInactive</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>mDocumentState</name> |= <name>NS_DOCUMENT_STATE_WINDOW_INACTIVE</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>mGotDocumentState</name> |= <name>NS_DOCUMENT_STATE_WINDOW_INACTIVE</name></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>mDocumentState</name></expr>;</return>
}</block></function>

<namespace>namespace <block>{

<comment type="block" format="doxygen">/**
 * Stub for LoadSheet(), since all we want is to get the sheet into
 * the CSSLoader's style cache
 */</comment>
<class>class <name>StubCSSLoaderObserver</name> <super>: <specifier>public</specifier> <name>nsICSSLoaderObserver</name></super> <block>{<private type="default">
</private><public>public:
  <function><type><name>NS_IMETHOD</name></type>
  <name>StyleSheetLoaded</name><parameter_list>(<param><decl><type><name>nsCSSStyleSheet</name>*</type></decl></param>, <param><decl><type><name>PRBool</name></type></decl></param>, <param><decl><type><name>nsresult</name></type></decl></param>)</parameter_list>
  <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></function>
  <macro><name>NS_DECL_ISUPPORTS</name></macro>
</public>}</block>;</class>
<macro><name>NS_IMPL_ISUPPORTS1</name><argument_list>(<argument>StubCSSLoaderObserver</argument>, <argument>nsICSSLoaderObserver</argument>)</argument_list></macro>

}</block></namespace>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>PreloadStyle</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>uri</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>charset</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// The CSSLoader will retain this object after we return.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsICSSLoaderObserver</name></expr></argument>&gt;</argument_list></name></type> <name>obs</name> <init>= <expr>new <call><name>StubCSSLoaderObserver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// Charset names are always ASCII.</comment>
  <expr_stmt><expr><call><name>CSSLoader</name><argument_list>()</argument_list></call>-&gt;<call><name>LoadSheet</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><call><name>NodePrincipal</name><argument_list>()</argument_list></call></expr></argument>,
                         <argument><expr><call><name>NS_LossyConvertUTF16toASCII</name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name>obs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>LoadChromeSheetSync</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>uri</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>isAgentSheet</name></decl></param>,
                                <param><decl><type><name>nsCSSStyleSheet</name>**</type> <name>sheet</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>CSSLoader</name><argument_list>()</argument_list></call>-&gt;<call><name>LoadSheetSync</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>isAgentSheet</name></expr></argument>, <argument><expr><name>isAgentSheet</name></expr></argument>, <argument><expr><name>sheet</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<class>class <name>nsDelayedEventDispatcher</name> <super>: <specifier>public</specifier> <name>nsRunnable</name></super>
<block>{<private type="default">
</private><public>public:
  <constructor><name>nsDelayedEventDispatcher</name><parameter_list>(<param><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>&amp;</type> <name>aDocuments</name></decl></param>)</parameter_list>
  <block>{
    <expr_stmt><expr><call><name><name>mDocuments</name>.<name>SwapElements</name></name><argument_list>(<argument><expr><name>aDocuments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>
  <destructor><specifier>virtual</specifier> <name>~<name>nsDelayedEventDispatcher</name></name><parameter_list>()</parameter_list> <block>{}</block></destructor>

  <function><type><name>NS_IMETHOD</name></type> <name>Run</name><parameter_list>()</parameter_list>
  <block>{
    <expr_stmt><expr><call><name>FireOrClearDelayedEvents</name><argument_list>(<argument><expr><name>mDocuments</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></function>

</public><private>private:
  <decl_stmt><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>mDocuments</name></decl>;</decl_stmt>
</private>}</block>;</class>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>GetAndUnsuppressSubDocuments</name><parameter_list>(<param><decl><type><name>nsIDocument</name>*</type> <name>aDocument</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>suppression</name> <init>= <expr><call><name><name>aDocument</name>-&gt;<name>EventHandlingSuppressed</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>suppression</name> &gt; 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsDocument</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>)</argument_list></call>-&gt;<call><name>DecreaseEventSuppression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <decl_stmt><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>*</type> <name>docs</name> <init>=
    <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name>*</expr></argument> &gt;</argument_list></name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>docs</name>-&gt;<name>AppendElement</name></name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>aDocument</name>-&gt;<name>EnumerateSubDocuments</name></name><argument_list>(<argument><expr><name>GetAndUnsuppressSubDocuments</name></expr></argument>, <argument><expr><name>docs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>UnsuppressEventHandlingAndFireEvents</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aFireEvents</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mEventsSuppressed</name> &gt; 0</expr>)</condition><then> <block>{
    <expr_stmt><expr>--<name>mEventsSuppressed</name></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>documents</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>documents</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>EnumerateSubDocuments</name><argument_list>(<argument><expr><name>GetAndUnsuppressSubDocuments</name></expr></argument>, <argument><expr>&amp;<name>documents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>aFireEvents</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_DispatchToCurrentThread</name><argument_list>(<argument><expr>new <call><name>nsDelayedEventDispatcher</name><argument_list>(<argument><expr><name>documents</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name>FireOrClearDelayedEvents</name><argument_list>(<argument><expr><name>documents</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>

<function><type><name>nsISupports</name>*</type>
<name><name>nsDocument</name>::<name>GetCurrentContentSink</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr><name>mParser</name> ? <call><name><name>mParser</name>-&gt;<name>GetContentSink</name></name><argument_list>()</argument_list></call> : <name>nsnull</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>RegisterFileDataUri</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aUri</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>mFileDataUris</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>aUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>UnregisterFileDataUri</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aUri</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>mFileDataUris</name>.<name>RemoveElement</name></name><argument_list>(<argument><expr><name>aUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>SetScrollToRef</name></name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type><name>aDocumentURI</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>aDocumentURI</name></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>ref</name></decl>;</decl_stmt>

  <comment type="line">// Since all URI's that pass through here aren't URL's we can't</comment>
  <comment type="line">// rely on the nsIURI implementation for providing a way for</comment>
  <comment type="line">// finding the 'ref' part of the URI, we'll haveto revert to</comment>
  <comment type="line">// string routines for finding the data past '#'</comment>

  <expr_stmt><expr><call><name><name>aDocumentURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsReadingIterator</name><argument_list>&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>ref</name>.<name>BeginReading</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>ref</name>.<name>EndReading</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>FindCharInReadable</name><argument_list>(<argument><expr>'#'</expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>++<name>start</name></expr>;</expr_stmt> <comment type="line">// Skip over the '#'</comment>

    <expr_stmt><expr><name>mScrollToRef</name> = <call><name>Substring</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>ScrollToRef</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mScrolledToRefAlready</name></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>

  <if>if <condition>(<expr><call><name><name>mScrollToRef</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>char</name>*</type> <name>tmpstr</name> <init>= <expr><call><name>ToNewCString</name><argument_list>(<argument><expr><name>mScrollToRef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>tmpstr</name></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>nsUnescape</name><argument_list>(<argument><expr><name>tmpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>unescapedRef</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>unescapedRef</name>.<name>Assign</name></name><argument_list>(<argument><expr><name>tmpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>nsMemory</name>::<name>Free</name></name><argument_list>(<argument><expr><name>tmpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_ERROR_FAILURE</name></expr></init></decl>;</decl_stmt>
  <comment type="line">// We assume that the bytes are in UTF-8, as it says in the spec:</comment>
  <comment type="line">// http://www.w3.org/TR/html4/appendix/notes.html#h-B.2.1</comment>
  <function_decl><type><name>NS_ConvertUTF8toUTF16</name></type> <name>ref</name><parameter_list>(<param><decl><type><name>unescapedRef</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>shell</name> <init>= <expr><call><name>GetShell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>shell</name></expr>)</condition><then> <block>{
    <comment type="line">// Check an empty string which might be caused by the UTF-8 conversion</comment>
    <if>if <condition>(<expr>!<call><name><name>ref</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <comment type="line">// Note that GoToAnchor will handle flushing layout as needed.</comment>
      <expr_stmt><expr><name>rv</name> = <call><name><name>shell</name>-&gt;<name>GoToAnchor</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>mChangeScrollPosWhenScrollingToRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="line">// If UTF-8 URI failed then try to assume the string as a</comment>
    <comment type="line">// document's charset.</comment>

    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>nsACString</name> &amp;</type><name>docCharset</name> <init>= <expr><call><name>GetDocumentCharacterSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>rv</name> = <call><name><name>nsContentUtils</name>::<name>ConvertStringFromCharset</name></name><argument_list>(<argument><expr><name>docCharset</name></expr></argument>, <argument><expr><name>unescapedRef</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>ref</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>rv</name> = <call><name><name>shell</name>-&gt;<name>GoToAnchor</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>mChangeScrollPosWhenScrollingToRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>mScrolledToRefAlready</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>ResetScrolledToRefAlready</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><name>mScrolledToRefAlready</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>SetChangeScrollPosWhenScrollingToRef</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mChangeScrollPosWhenScrollingToRef</name> = <name>aValue</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIDocument</name>::<name>RegisterFreezableElement</name></name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type> <name>aContent</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mFreezableElements</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mFreezableElements</name> = new <call><name><name>nsTHashtable</name><argument_list>&lt;<argument><expr><name><name>nsPtrHashKey</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>mFreezableElements</name></expr>)</condition><then>
      <return>return;</return></then></if>
    <expr_stmt><expr><call><name><name>mFreezableElements</name>-&gt;<name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name><name>mFreezableElements</name>-&gt;<name>PutEntry</name></name><argument_list>(<argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsIDocument</name>::<name>UnregisterFreezableElement</name></name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type> <name>aContent</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mFreezableElements</name></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>
  <if>if <condition>(<expr>!<call><name><name>mFreezableElements</name>-&gt;<name>GetEntry</name></name><argument_list>(<argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name><name>mFreezableElements</name>-&gt;<name>RemoveEntry</name></name><argument_list>(<argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<struct>struct <name>EnumerateFreezablesData</name> <block>{<public type="default">
  <decl_stmt><decl><type><name><name>nsIDocument</name>::<name>FreezableElementEnumerator</name></name></type> <name>mEnumerator</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>*</type> <name>mData</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>EnumerateFreezables</name><parameter_list>(<param><decl><type><name><name>nsPtrHashKey</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name>*</type> <name>aEntry</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>EnumerateFreezablesData</name>*</type> <name>data</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>EnumerateFreezablesData</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>data</name>-&gt;<name>mEnumerator</name></name><argument_list>(<argument><expr><call><name><name>aEntry</name>-&gt;<name>GetKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>data</name>-&gt;<name>mData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIDocument</name>::<name>EnumerateFreezableElements</name></name><parameter_list>(<param><decl><type><name>FreezableElementEnumerator</name></type> <name>aEnumerator</name></decl></param>,
                                        <param><decl><type><name>void</name>*</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mFreezableElements</name></expr>)</condition><then>
    <return>return;</return></then></if>
  <decl_stmt><decl><type><name>EnumerateFreezablesData</name></type> <name>data</name> <init>= <expr><block>{ <expr><name>aEnumerator</name></expr>, <expr><name>aData</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mFreezableElements</name>-&gt;<name>EnumerateEntries</name></name><argument_list>(<argument><expr><name>EnumerateFreezables</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></type>
<name><name>nsIDocument</name>::<name>CreateStaticClone</name></name><parameter_list>(<param><decl><type><name>nsISupports</name>*</type> <name>aCloneContainer</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocument</name></expr></argument>&gt;</argument_list></name></type> <name>domDoc</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>domDoc</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mCreatingStaticClone</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

  <comment type="line">// Make document use different container during cloning.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>originalContainer</name> <init>= <expr><call><name>GetContainer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SetContainer</name><argument_list>(<argument><expr><name>aCloneContainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>clonedNode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>domDoc</name>-&gt;<name>CloneNode</name></name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>clonedNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SetContainer</name><argument_list>(<argument><expr><name>originalContainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></type> <name>clonedDoc</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>clonedDoc</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>clonedNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocument</name></expr></argument>&gt;</argument_list></name></type> <name>clonedDOMDoc</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>clonedDoc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>clonedDOMDoc</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>clonedDoc</name>-&gt;<name>mOriginalDocument</name></name> = <name>this</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>PRInt32</name></type> <name>sheetsCount</name> <init>= <expr><call><name>GetNumberOfStyleSheets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for (<init><decl><type><name>PRInt32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>sheetsCount</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsCSSStyleSheet</name></expr></argument>&gt;</argument_list></name></type> <name>sheet</name> <init>= <expr><call><name>do_QueryObject</name><argument_list>(<argument><expr><call><name>GetStyleSheetAt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>sheet</name></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><call><name><name>sheet</name>-&gt;<name>IsApplicable</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsCSSStyleSheet</name></expr></argument>&gt;</argument_list></name></type> <name>clonedSheet</name> <init>=
              <expr><call><name><name>sheet</name>-&gt;<name>Clone</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>clonedDoc</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>NS_WARN_IF_FALSE</name><argument_list>(<argument><expr><name>clonedSheet</name></expr></argument>, <argument><expr>"Cloning a stylesheet didn't work!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>clonedSheet</name></expr>)</condition><then> <block>{
              <expr_stmt><expr><call><name><name>clonedDoc</name>-&gt;<name>AddStyleSheet</name></name><argument_list>(<argument><expr><name>clonedSheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
          }</block></then></if>
        }</block></then></if>
      }</block></for>

      <expr_stmt><expr><name>sheetsCount</name> = <call><name>GetNumberOfCatalogStyleSheets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><decl><type><name>PRInt32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>sheetsCount</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsCSSStyleSheet</name></expr></argument>&gt;</argument_list></name></type> <name>sheet</name> <init>=
          <expr><call><name>do_QueryObject</name><argument_list>(<argument><expr><call><name>GetCatalogStyleSheetAt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>sheet</name></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><call><name><name>sheet</name>-&gt;<name>IsApplicable</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsCSSStyleSheet</name></expr></argument>&gt;</argument_list></name></type> <name>clonedSheet</name> <init>=
              <expr><call><name><name>sheet</name>-&gt;<name>Clone</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>clonedDoc</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>NS_WARN_IF_FALSE</name><argument_list>(<argument><expr><name>clonedSheet</name></expr></argument>, <argument><expr>"Cloning a stylesheet didn't work!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>clonedSheet</name></expr>)</condition><then> <block>{
              <expr_stmt><expr><call><name><name>clonedDoc</name>-&gt;<name>AddCatalogStyleSheet</name></name><argument_list>(<argument><expr><name>clonedSheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
          }</block></then></if>
        }</block></then></if>
      }</block></for>
    }</block></then></if>
  }</block></then></if>
  <expr_stmt><expr><name>mCreatingStaticClone</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
  <return>return <expr><call><name><name>clonedDoc</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIDocument</name>::<name>ScheduleBeforePaintEvent</name></name><parameter_list>(<param><decl><type><name>nsIAnimationFrameListener</name>*</type> <name>aListener</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aListener</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRBool</name></type> <name>alreadyRegistered</name> <init>= <expr>!<call><name><name>mAnimationFrameListeners</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>mAnimationFrameListeners</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>aListener</name></expr></argument>)</argument_list></call> &amp;&amp;
        !<name>alreadyRegistered</name> &amp;&amp; <name>mPresShell</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mPresShell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call>-&gt;<call><name>RefreshDriver</name><argument_list>()</argument_list></call>-&gt;
        <call><name>ScheduleAnimationFrameListeners</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return;</return>
  }</block></then></if>

  <if>if <condition>(<expr>!<name>mHavePendingPaint</name></expr>)</condition><then> <block>{
    <comment type="line">// We don't want to use GetShell() here, because we want to schedule the</comment>
    <comment type="line">// paint even if we're frozen.  Either we'll get unfrozen and then the</comment>
    <comment type="line">// event will fire, or we'll quietly go away at some point.</comment>
    <expr_stmt><expr><name>mHavePendingPaint</name> =
      !<name>mPresShell</name> ||
      <call><name><name>mPresShell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call>-&gt;<call><name>RefreshDriver</name><argument_list>()</argument_list></call>-&gt;
        <call><name>ScheduleBeforePaintEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>AddImage</name></name><parameter_list>(<param><decl><type><name>imgIRequest</name>*</type> <name>aImage</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// See if the image is already in the hashtable. If it is, get the old count.</comment>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>oldCount</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mImageTracker</name>.<name>Get</name></name><argument_list>(<argument><expr><name>aImage</name></expr></argument>, <argument><expr>&amp;<name>oldCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Put the image in the hashtable, with the proper count.</comment>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>success</name> <init>= <expr><call><name><name>mImageTracker</name>.<name>Put</name></name><argument_list>(<argument><expr><name>aImage</name></expr></argument>, <argument><expr><name>oldCount</name> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>success</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <comment type="line">// If this is the first insertion and we're locking images, lock this image</comment>
  <comment type="line">// too.</comment>
  <if>if <condition>(<expr>(<name>oldCount</name> == 0) &amp;&amp; <name>mLockingImages</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>aImage</name>-&gt;<name>LockImage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>aImage</name>-&gt;<name>RequestDecode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// If this is the first insertion and we're animating images, request</comment>
  <comment type="line">// that this image be animated too.</comment>
  <if>if <condition>(<expr><name>oldCount</name> == 0 &amp;&amp; <name>mAnimatingImages</name></expr>)</condition><then> <block>{
    <return>return <expr><call><name><name>aImage</name>-&gt;<name>IncrementAnimationConsumers</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>RemoveImage</name></name><parameter_list>(<param><decl><type><name>imgIRequest</name>*</type> <name>aImage</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Get the old count. It should exist and be &gt; 0.</comment>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>found</name> <init>= <expr><call><name><name>mImageTracker</name>.<name>Get</name></name><argument_list>(<argument><expr><name>aImage</name></expr></argument>, <argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ABORT_IF_FALSE</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr>"Removing image that wasn't in the tracker!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ABORT_IF_FALSE</name><argument_list>(<argument><expr><name>count</name> &gt; 0</expr></argument>, <argument><expr>"Entry in the cache tracker with count 0!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// We're removing, so decrement the count.</comment>
  <expr_stmt><expr><name>count</name>--</expr>;</expr_stmt>

  <comment type="line">// If the count is now zero, remove from the tracker.</comment>
  <comment type="line">// Otherwise, set the new value.</comment>
  <if>if <condition>(<expr><name>count</name> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mImageTracker</name>.<name>Remove</name></name><argument_list>(<argument><expr><name>aImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name><name>mImageTracker</name>.<name>Put</name></name><argument_list>(<argument><expr><name>aImage</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <comment type="line">// If we removed the image from the tracker and we're locking images, unlock</comment>
  <comment type="line">// this image.</comment>
  <if>if <condition>(<expr>(<name>count</name> == 0) &amp;&amp; <name>mLockingImages</name></expr>)</condition><then>
    <return>return <expr><call><name><name>aImage</name>-&gt;<name>UnlockImage</name></name><argument_list>()</argument_list></call></expr>;</return></then></if>

  <comment type="line">// If we removed the image from the tracker and we're animating images,</comment>
  <comment type="line">// remove our request to animate this image.</comment>
  <if>if <condition>(<expr><name>count</name> == 0 &amp;&amp; <name>mAnimatingImages</name></expr>)</condition><then>
    <return>return <expr><call><name><name>aImage</name>-&gt;<name>DecrementAnimationConsumers</name></name><argument_list>()</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>PLDHashOperator</name></type> <name>LockEnumerator</name><parameter_list>(<param><decl><type><name>imgIRequest</name>*</type> <name>aKey</name></decl></param>,
                               <param><decl><type><name>PRUint32</name></type> <name>aData</name></decl></param>,
                               <param><decl><type><name>void</name>*</type>    <name>userArg</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aKey</name>-&gt;<name>LockImage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>aKey</name>-&gt;<name>RequestDecode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<function><type><name>PLDHashOperator</name></type> <name>UnlockEnumerator</name><parameter_list>(<param><decl><type><name>imgIRequest</name>*</type> <name>aKey</name></decl></param>,
                                 <param><decl><type><name>PRUint32</name></type> <name>aData</name></decl></param>,
                                 <param><decl><type><name>void</name>*</type>    <name>userArg</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aKey</name>-&gt;<name>UnlockImage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>


<function><type><name>nsresult</name></type>
<name><name>nsDocument</name>::<name>SetImageLockingState</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aLocked</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// If there's no change, there's nothing to do.</comment>
  <if>if <condition>(<expr><name>mLockingImages</name> == <name>aLocked</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <comment type="line">// Otherwise, iterate over our images and perform the appropriate action.</comment>
  <expr_stmt><expr><call><name><name>mImageTracker</name>.<name>EnumerateRead</name></name><argument_list>(<argument><expr><name>aLocked</name> ? <name>LockEnumerator</name>
                                      : <name>UnlockEnumerator</name></expr></argument>,
                              <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Update state.</comment>
  <expr_stmt><expr><name>mLockingImages</name> = <name>aLocked</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>PLDHashOperator</name></type> <name>IncrementAnimationEnumerator</name><parameter_list>(<param><decl><type><name>imgIRequest</name>*</type> <name>aKey</name></decl></param>,
                                             <param><decl><type><name>PRUint32</name></type> <name>aData</name></decl></param>,
                                             <param><decl><type><name>void</name>*</type>    <name>userArg</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aKey</name>-&gt;<name>IncrementAnimationConsumers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<function><type><name>PLDHashOperator</name></type> <name>DecrementAnimationEnumerator</name><parameter_list>(<param><decl><type><name>imgIRequest</name>*</type> <name>aKey</name></decl></param>,
                                             <param><decl><type><name>PRUint32</name></type> <name>aData</name></decl></param>,
                                             <param><decl><type><name>void</name>*</type>    <name>userArg</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aKey</name>-&gt;<name>DecrementAnimationConsumers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDocument</name>::<name>SetImagesNeedAnimating</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aAnimating</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// If there's no change, there's nothing to do.</comment>
  <if>if <condition>(<expr><name>mAnimatingImages</name> == <name>aAnimating</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <comment type="line">// Otherwise, iterate over our images and perform the appropriate action.</comment>
  <expr_stmt><expr><call><name><name>mImageTracker</name>.<name>EnumerateRead</name></name><argument_list>(<argument><expr><name>aAnimating</name> ? <name>IncrementAnimationEnumerator</name>
                                         : <name>DecrementAnimationEnumerator</name></expr></argument>,
                              <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Update state.</comment>
  <expr_stmt><expr><name>mAnimatingImages</name> = <name>aAnimating</name></expr>;</expr_stmt>
}</block></function>
</unit>
