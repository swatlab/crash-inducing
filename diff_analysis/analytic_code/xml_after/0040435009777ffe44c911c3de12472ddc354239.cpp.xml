<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0040435009777ffe44c911c3de12472ddc354239.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Dean Tessman &lt;dean_tessman@hotmail.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsBaseWidget.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDeviceContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGfxCIID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsWidgetsCID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsServiceManagerUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScreenManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAppDirectoryServiceDefs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISimpleEnumerator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIContent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIServiceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefBranch2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"BasicLayers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"LayerManagerOGL.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIObserver.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>debug_RegisterPrefCallbacks</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>PRBool</name></type> <name>debug_InSecureKeyboardInputMode</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NOISY_WIDGET_LEAKS</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PRInt32</name></type> <name>gNumWidgets</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<using>using namespace <name><name>mozilla</name>::<name>layers</name></name>;</using>

<decl_stmt><decl><type><name>nsIContent</name>*</type> <name><name>nsBaseWidget</name>::<name>mLastRollup</name></name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

<comment type="line">// nsBaseWidget</comment>
<macro><name>NS_IMPL_ISUPPORTS1</name><argument_list>(<argument>nsBaseWidget</argument>, <argument>nsIWidget</argument>)</argument_list></macro>


<constructor><name><name>nsAutoRollup</name>::<name>nsAutoRollup</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// remember if mLastRollup was null, and only clear it upon destruction</comment>
  <comment type="line">// if so. This prevents recursive usage of nsAutoRollup from clearing</comment>
  <comment type="line">// mLastRollup when it shouldn't.</comment>
  <expr_stmt><expr><name>wasClear</name> = !<name><name>nsBaseWidget</name>::<name>mLastRollup</name></name></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>nsAutoRollup</name>::~<name>nsAutoRollup</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>nsBaseWidget</name>::<name>mLastRollup</name></name> &amp;&amp; <name>wasClear</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name><name>nsBaseWidget</name>::<name>mLastRollup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></destructor>

<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// nsBaseWidget constructor</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>

<constructor><name><name>nsBaseWidget</name>::<name>nsBaseWidget</name></name><parameter_list>()</parameter_list>
<member_list>: <call><name>mClientData</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>
, <call><name>mViewWrapperPtr</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>
, <call><name>mEventCallback</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>
, <call><name>mViewCallback</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>
, <call><name>mContext</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>
, <call><name>mToolkit</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>
, <call><name>mCursor</name><argument_list>(<argument><expr><name>eCursor_standard</name></expr></argument>)</argument_list></call>
, <call><name>mWindowType</name><argument_list>(<argument><expr><name>eWindowType_child</name></expr></argument>)</argument_list></call>
, <call><name>mBorderStyle</name><argument_list>(<argument><expr><name>eBorderStyle_none</name></expr></argument>)</argument_list></call>
, <call><name>mOnDestroyCalled</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>
, <call><name>mUseAcceleratedRendering</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>
, <call><name>mBounds</name><argument_list>(<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call>
, <call><name>mOriginalBounds</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>
, <call><name>mClipRectCount</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>
, <call><name>mZIndex</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>
, <call><name>mSizeMode</name><argument_list>(<argument><expr><name>nsSizeMode_Normal</name></expr></argument>)</argument_list></call>
</member_list><block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NOISY_WIDGET_LEAKS</name></cpp:ifdef>
  <expr_stmt><expr><name>gNumWidgets</name>++</expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"WIDGETS+ = %d\n"</expr></argument>, <argument><expr><name>gNumWidgets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>debug_RegisterPrefCallbacks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></constructor>


<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// nsBaseWidget destructor</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<destructor><name><name>nsBaseWidget</name>::~<name>nsBaseWidget</name></name><parameter_list>()</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NOISY_WIDGET_LEAKS</name></cpp:ifdef>
  <expr_stmt><expr><name>gNumWidgets</name>--</expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"WIDGETS- = %d\n"</expr></argument>, <argument><expr><name>gNumWidgets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>NS_IF_RELEASE</name><argument_list>(<argument><expr><name>mToolkit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_IF_RELEASE</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>mOriginalBounds</name></expr>)</condition><then>
    <expr_stmt><expr>delete <name>mOriginalBounds</name></expr>;</expr_stmt></then></if>
}</block></destructor>


<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Basic create.</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>void</name></type> <name><name>nsBaseWidget</name>::<name>BaseCreate</name></name><parameter_list>(<param><decl><type><name>nsIWidget</name> *</type><name>aParent</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>nsIntRect</name> &amp;</type><name>aRect</name></decl></param>,
                              <param><decl><type><name>EVENT_CALLBACK</name></type> <name>aHandleEventFunction</name></decl></param>,
                              <param><decl><type><name>nsIDeviceContext</name> *</type><name>aContext</name></decl></param>,
                              <param><decl><type><name>nsIAppShell</name> *</type><name>aAppShell</name></decl></param>,
                              <param><decl><type><name>nsIToolkit</name> *</type><name>aToolkit</name></decl></param>,
                              <param><decl><type><name>nsWidgetInitData</name> *</type><name>aInitData</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>nsnull</name> == <name>mToolkit</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>nsnull</name> != <name>aToolkit</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>mToolkit</name> = (<name>nsIToolkit</name>*)<name>aToolkit</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name>mToolkit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
      <if>if <condition>(<expr><name>nsnull</name> != <name>aParent</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>mToolkit</name> = <call><name><name>aParent</name>-&gt;<name>GetToolkit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr><name>mToolkit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then>
      <comment type="line">// it's some top level window with no toolkit passed in.</comment>
      <comment type="line">// Create a default toolkit with the current thread</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>USE_TLS_FOR_TOOLKIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <else>else <block>{
        <expr_stmt><expr>static <call><name>NS_DEFINE_CID</name><argument_list>(<argument><expr><name>kToolkitCID</name></expr></argument>, <argument><expr><name>NS_TOOLKIT_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>nsresult</name></type> <name>res</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>res</name> = <call><name>CallCreateInstance</name><argument_list>(<argument><expr><name>kToolkitCID</name></expr></argument>, <argument><expr>&amp;<name>mToolkit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"Can not create a toolkit in nsBaseWidget::Create"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mToolkit</name></expr>)</condition><then>
          <expr_stmt><expr><call><name><name>mToolkit</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><call><name>PR_GetCurrentThread</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      }</block></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* USE_TLS_FOR_TOOLKIT */</comment>
      <else>else <block>{
        <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>rv</name> = <call><name>NS_GetCurrentToolkit</name><argument_list>(<argument><expr>&amp;<name>mToolkit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_TLS_FOR_TOOLKIT */</comment>
    }</block></else></if>
    
  }</block></then></if>
  
  <comment type="line">// save the event callback function</comment>
  <expr_stmt><expr><name>mEventCallback</name> = <name>aHandleEventFunction</name></expr>;</expr_stmt>
  
  <comment type="line">// keep a reference to the device context</comment>
  <if>if <condition>(<expr><name>aContext</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mContext</name> = <name>aContext</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <decl_stmt><decl><type><name>nsresult</name></type>  <name>res</name></decl>;</decl_stmt>
    
    <expr_stmt><expr>static <call><name>NS_DEFINE_CID</name><argument_list>(<argument><expr><name>kDeviceContextCID</name></expr></argument>, <argument><expr><name>NS_DEVICE_CONTEXT_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>res</name> = <call><name>CallCreateInstance</name><argument_list>(<argument><expr><name>kDeviceContextCID</name></expr></argument>, <argument><expr>&amp;<name>mContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>mContext</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  }</block></else></if>

  <if>if <condition>(<expr><name>nsnull</name> != <name>aInitData</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mWindowType</name> = <name><name>aInitData</name>-&gt;<name>mWindowType</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mBorderStyle</name> = <name><name>aInitData</name>-&gt;<name>mBorderStyle</name></name></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><name>aParent</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>aParent</name>-&gt;<name>AddChild</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsBaseWidget</name>::<name>CaptureMouse</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aCapture</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Accessor functions to get/set the client data</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsBaseWidget</name>::<name>GetClientData</name></name><parameter_list>(<param><decl><type><name>void</name>*&amp;</type> <name>aClientData</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>aClientData</name> = <name>mClientData</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsBaseWidget</name>::<name>SetClientData</name></name><parameter_list>(<param><decl><type><name>void</name>*</type> <name>aClientData</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mClientData</name> = <name>aClientData</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// Attach a view to our widget which we'll send events to. </comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsBaseWidget</name>::<name>AttachViewToTopLevel</name></name><parameter_list>(<param><decl><type><name>EVENT_CALLBACK</name></type> <name>aViewEventFunction</name></decl></param>,
                                   <param><decl><type><name>nsIDeviceContext</name> *</type><name>aContext</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>(<name>mWindowType</name> == <name>eWindowType_toplevel</name>)</expr></argument>, <argument><expr>"Can't attach to child?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mViewCallback</name> = <name>aViewEventFunction</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>aContext</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>mContext</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>NS_IF_RELEASE</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>mContext</name> = <name>aContext</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>ViewWrapper</name>*</type> <name><name>nsBaseWidget</name>::<name>GetAttachedViewPtr</name></name><parameter_list>()</parameter_list>
 <block>{
   <return>return <expr><name>mViewWrapperPtr</name></expr>;</return>
 }</block></function>
 
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsBaseWidget</name>::<name>SetAttachedViewPtr</name></name><parameter_list>(<param><decl><type><name>ViewWrapper</name>*</type> <name>aViewWrapper</name></decl></param>)</parameter_list>
 <block>{
   <expr_stmt><expr><name>mViewWrapperPtr</name> = <name>aViewWrapper</name></expr>;</expr_stmt>
   <return>return <expr><name>NS_OK</name></expr>;</return>
 }</block></function>

<function><type><name>NS_METHOD</name></type> <name><name>nsBaseWidget</name>::<name>ResizeClient</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aX</name></decl></param>,
                                     <param><decl><type><name>PRInt32</name></type> <name>aY</name></decl></param>,
                                     <param><decl><type><name>PRInt32</name></type> <name>aWidth</name></decl></param>,
                                     <param><decl><type><name>PRInt32</name></type> <name>aHeight</name></decl></param>,
                                     <param><decl><type><name>PRBool</name></type> <name>aRepaint</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>Resize</name><argument_list>(<argument><expr><name>aX</name></expr></argument>, <argument><expr><name>aY</name></expr></argument>, <argument><expr><name>aWidth</name></expr></argument>, <argument><expr><name>aHeight</name></expr></argument>, <argument><expr><name>aRepaint</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Close this nsBaseWidget</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>NS_METHOD</name></type> <name><name>nsBaseWidget</name>::<name>Destroy</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// Just in case our parent is the only ref to us</comment>
  <function_decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIWidget</name></expr></argument>&gt;</argument_list></name></type> <name>kungFuDeathGrip</name><parameter_list>(<param><decl><type><name>this</name></type></decl></param>)</parameter_list>;</function_decl>
  <comment type="line">// disconnect from the parent</comment>
  <decl_stmt><decl><type><name>nsIWidget</name> *</type><name>parent</name> <init>= <expr><call><name>GetParent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>parent</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>parent</name>-&gt;<name>RemoveChild</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Set this nsBaseWidget's parent</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsBaseWidget</name>::<name>SetParent</name></name><parameter_list>(<param><decl><type><name>nsIWidget</name>*</type> <name>aNewParent</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>


<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Get this nsBaseWidget parent</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>nsIWidget</name>*</type> <name><name>nsBaseWidget</name>::<name>GetParent</name></name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>nsnull</name></expr>;</return>
}</block></function>

<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Get this nsBaseWidget top level widget</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>nsIWidget</name>*</type> <name><name>nsBaseWidget</name>::<name>GetTopLevelWidget</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIWidget</name> *</type><name>topLevelWidget</name> <init>= <expr><name>nsnull</name></expr></init>, *<name>widget</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>widget</name></expr>)</condition> <block>{
    <expr_stmt><expr><name>topLevelWidget</name> = <name>widget</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>widget</name> = <call><name><name>widget</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><name>topLevelWidget</name></expr>;</return>
}</block></function>

<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Get this nsBaseWidget's top (non-sheet) parent (if it's a sheet)</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>nsIWidget</name>*</type> <name><name>nsBaseWidget</name>::<name>GetSheetWindowParent</name></name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>nsnull</name></expr>;</return>
}</block></function>

<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Add a child to the list of children</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>void</name></type> <name><name>nsBaseWidget</name>::<name>AddChild</name></name><parameter_list>(<param><decl><type><name>nsIWidget</name>*</type> <name>aChild</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr>!<call><name><name>aChild</name>-&gt;<name>GetNextSibling</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>aChild</name>-&gt;<name>GetPrevSibling</name></name><argument_list>()</argument_list></call></expr></argument>,
                  <argument><expr>"aChild not properly removed from its old child list"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if>if <condition>(<expr>!<name>mFirstChild</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mFirstChild</name> = <name>mLastChild</name> = <name>aChild</name></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <comment type="line">// append to the list</comment>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>mLastChild</name></expr></argument>, <argument><expr>"Bogus state"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<call><name><name>mLastChild</name>-&gt;<name>GetNextSibling</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"Bogus state"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mLastChild</name>-&gt;<name>SetNextSibling</name></name><argument_list>(<argument><expr><name>aChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aChild</name>-&gt;<name>SetPrevSibling</name></name><argument_list>(<argument><expr><name>mLastChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mLastChild</name> = <name>aChild</name></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>


<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Remove a child from the list of children</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>void</name></type> <name><name>nsBaseWidget</name>::<name>RemoveChild</name></name><parameter_list>(<param><decl><type><name>nsIWidget</name>*</type> <name>aChild</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>aChild</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call> == <name>this</name></expr></argument>, <argument><expr>"Not one of our kids!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if>if <condition>(<expr><name>mLastChild</name> == <name>aChild</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mLastChild</name> = <call><name><name>mLastChild</name>-&gt;<name>GetPrevSibling</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr><name>mFirstChild</name> == <name>aChild</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mFirstChild</name> = <call><name><name>mFirstChild</name>-&gt;<name>GetNextSibling</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// Now remove from the list.  Make sure that we pass ownership of the tail</comment>
  <comment type="line">// of the list correctly before we have aChild let go of it.</comment>
  <decl_stmt><decl><type><name>nsIWidget</name>*</type> <name>prev</name> <init>= <expr><call><name><name>aChild</name>-&gt;<name>GetPrevSibling</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsIWidget</name>*</type> <name>next</name> <init>= <expr><call><name><name>aChild</name>-&gt;<name>GetNextSibling</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>prev</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>prev</name>-&gt;<name>SetNextSibling</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr><name>next</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>next</name>-&gt;<name>SetPrevSibling</name></name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  
  <expr_stmt><expr><call><name><name>aChild</name>-&gt;<name>SetNextSibling</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>aChild</name>-&gt;<name>SetPrevSibling</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Sets widget's position within its parent's child list.</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsBaseWidget</name>::<name>SetZIndex</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aZIndex</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Hold a ref to ourselves just in case, since we're going to remove</comment>
  <comment type="line">// from our parent.</comment>
  <function_decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIWidget</name></expr></argument>&gt;</argument_list></name></type> <name>kungFuDeathGrip</name><parameter_list>(<param><decl><type><name>this</name></type></decl></param>)</parameter_list>;</function_decl>
  
  <expr_stmt><expr><name>mZIndex</name> = <name>aZIndex</name></expr>;</expr_stmt>

  <comment type="line">// reorder this child in its parent's list.</comment>
  <decl_stmt><decl><type><name>nsBaseWidget</name>*</type> <name>parent</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsBaseWidget</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>GetParent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>parent</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>parent</name>-&gt;<name>RemoveChild</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Scope sib outside the for loop so we can check it afterward</comment>
    <decl_stmt><decl><type><name>nsIWidget</name>*</type> <name>sib</name> <init>= <expr><call><name><name>parent</name>-&gt;<name>GetFirstChild</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for ( <init>;</init> <condition><expr><name>sib</name></expr>;</condition> <incr><expr><name>sib</name> = <call><name><name>sib</name>-&gt;<name>GetNextSibling</name></name><argument_list>()</argument_list></call></expr></incr>) <block>{
      <decl_stmt><decl><type><name>PRInt32</name></type> <name>childZIndex</name></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>sib</name>-&gt;<name>GetZIndex</name></name><argument_list>(<argument><expr>&amp;<name>childZIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>aZIndex</name> &lt; <name>childZIndex</name></expr>)</condition><then> <block>{
          <comment type="line">// Insert ourselves before sib</comment>
          <decl_stmt><decl><type><name>nsIWidget</name>*</type> <name>prev</name> <init>= <expr><call><name><name>sib</name>-&gt;<name>GetPrevSibling</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>mNextSibling</name> = <name>sib</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>mPrevSibling</name> = <name>prev</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>sib</name>-&gt;<name>SetPrevSibling</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>prev</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>prev</name>-&gt;<name>SetNextSibling</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>sib</name> == <name><name>parent</name>-&gt;<name>mFirstChild</name></name></expr></argument>, <argument><expr>"Broken child list"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// We've taken ownership of sib, so it's safe to have parent let</comment>
            <comment type="line">// go of it</comment>
            <expr_stmt><expr><name><name>parent</name>-&gt;<name>mFirstChild</name></name> = <name>this</name></expr>;</expr_stmt>
          }</block></else></if>
          <expr_stmt><expr><call><name>PlaceBehind</name><argument_list>(<argument><expr><name>eZPlacementBelow</name></expr></argument>, <argument><expr><name>sib</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        }</block></then></if>
      }</block></then></if>
    }</block></for>
    <comment type="line">// were we added to the list?</comment>
    <if>if <condition>(<expr>!<name>sib</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>parent</name>-&gt;<name>AddChild</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Gets widget's position within its parent's child list.</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsBaseWidget</name>::<name>GetZIndex</name></name><parameter_list>(<param><decl><type><name>PRInt32</name>*</type> <name>aZIndex</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aZIndex</name> = <name>mZIndex</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Places widget behind the given widget (platforms must override)</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsBaseWidget</name>::<name>PlaceBehind</name></name><parameter_list>(<param><decl><type><name>nsTopLevelWidgetZPlacement</name></type> <name>aPlacement</name></decl></param>,
                                        <param><decl><type><name>nsIWidget</name> *</type><name>aWidget</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aActivate</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Maximize, minimize or restore the window. The BaseWidget implementation</comment>
<comment type="line">// merely stores the state.</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsBaseWidget</name>::<name>SetSizeMode</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aMode</name></decl></param>)</parameter_list> <block>{


  <if>if <condition>(<expr><name>aMode</name> == <name>nsSizeMode_Normal</name> ||
      <name>aMode</name> == <name>nsSizeMode_Minimized</name> ||
      <name>aMode</name> == <name>nsSizeMode_Maximized</name> ||
      <name>aMode</name> == <name>nsSizeMode_Fullscreen</name></expr>)</condition><then> <block>{

    <expr_stmt><expr><name>mSizeMode</name> = (<name>nsSizeMode</name>) <name>aMode</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>
  <return>return <expr><name>NS_ERROR_ILLEGAL_VALUE</name></expr>;</return>
}</block></function>

<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Get the size mode (minimized, maximized, that sort of thing...)</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsBaseWidget</name>::<name>GetSizeMode</name></name><parameter_list>(<param><decl><type><name>PRInt32</name>*</type> <name>aMode</name></decl></param>)</parameter_list> <block>{

  <expr_stmt><expr>*<name>aMode</name> = <name>mSizeMode</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Get the foreground color</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>nscolor</name></type> <name><name>nsBaseWidget</name>::<name>GetForegroundColor</name></name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>mForeground</name></expr>;</return>
}</block></function>

    
<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Set the foreground color</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>NS_METHOD</name></type> <name><name>nsBaseWidget</name>::<name>SetForegroundColor</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nscolor</name> &amp;</type><name>aColor</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mForeground</name> = <name>aColor</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

    
<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Get the background color</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>nscolor</name></type> <name><name>nsBaseWidget</name>::<name>GetBackgroundColor</name></name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>mBackground</name></expr>;</return>
}</block></function>

<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Set the background color</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>NS_METHOD</name></type> <name><name>nsBaseWidget</name>::<name>SetBackgroundColor</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nscolor</name> &amp;</type><name>aColor</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mBackground</name> = <name>aColor</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
     
<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Get this component cursor</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>nsCursor</name></type> <name><name>nsBaseWidget</name>::<name>GetCursor</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr><name>mCursor</name></expr>;</return>
}</block></function>

<function><type><name>NS_METHOD</name></type> <name><name>nsBaseWidget</name>::<name>SetCursor</name></name><parameter_list>(<param><decl><type><name>nsCursor</name></type> <name>aCursor</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mCursor</name> = <name>aCursor</name></expr>;</expr_stmt> 
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsBaseWidget</name>::<name>SetCursor</name></name><parameter_list>(<param><decl><type><name>imgIContainer</name>*</type> <name>aCursor</name></decl></param>,
                                      <param><decl><type><name>PRUint32</name></type> <name>aHotspotX</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aHotspotY</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>
    
<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Get the window type for this widget</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsBaseWidget</name>::<name>GetWindowType</name></name><parameter_list>(<param><decl><type><name>nsWindowType</name>&amp;</type> <name>aWindowType</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>aWindowType</name> = <name>mWindowType</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Window transparency methods</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name><name>nsBaseWidget</name>::<name>SetTransparencyMode</name></name><parameter_list>(<param><decl><type><name>nsTransparencyMode</name></type> <name>aMode</name></decl></param>)</parameter_list> <block>{
}</block></function>

<function><type><name>nsTransparencyMode</name></type> <name><name>nsBaseWidget</name>::<name>GetTransparencyMode</name></name><parameter_list>()</parameter_list> <block>{
  <return>return <expr><name>eTransparencyOpaque</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsBaseWidget</name>::<name>StoreWindowClipRegion</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsIntRect</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aRects</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mClipRects</name> &amp;&amp; <name>mClipRectCount</name> == <call><name><name>aRects</name>.<name>Length</name></name><argument_list>()</argument_list></call> &amp;&amp;
      <call><name>memcmp</name><argument_list>(<argument><expr><name>mClipRects</name></expr></argument>, <argument><expr><call><name><name>aRects</name>.<name>Elements</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nsIntRect</name></expr></argument>)</argument_list></sizeof>*<name>mClipRectCount</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <expr_stmt><expr><name>mClipRectCount</name> = <call><name><name>aRects</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mClipRects</name> = new <name><name>nsIntRect</name><index>[<expr><name>mClipRectCount</name></expr>]</index></name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>mClipRects</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mClipRects</name></expr></argument>, <argument><expr><call><name><name>aRects</name>.<name>Elements</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nsIntRect</name></expr></argument>)</argument_list></sizeof>*<name>mClipRectCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsBaseWidget</name>::<name>GetWindowClipRegion</name></name><parameter_list>(<param><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsIntRect</name></expr></argument>&gt;</argument_list></name>*</type> <name>aRects</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mClipRects</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>aRects</name>-&gt;<name>AppendElements</name></name><argument_list>(<argument><expr><call><name><name>mClipRects</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mClipRectCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name><name>aRects</name>-&gt;<name>AppendElement</name></name><argument_list>(<argument><expr><call><name>nsIntRect</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>mBounds</name>.<name>width</name></name></expr></argument>, <argument><expr><name><name>mBounds</name>.<name>height</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>

<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Set window shadow style</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsBaseWidget</name>::<name>SetWindowShadowStyle</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aMode</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Hide window borders/decorations for this widget</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsBaseWidget</name>::<name>HideWindowChrome</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aShouldHide</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Put the window into full-screen mode</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsBaseWidget</name>::<name>MakeFullScreen</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aFullScreen</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>HideWindowChrome</name><argument_list>(<argument><expr><name>aFullScreen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>aFullScreen</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr>!<name>mOriginalBounds</name></expr>)</condition><then>
      <expr_stmt><expr><name>mOriginalBounds</name> = new <call><name>nsIntRect</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>GetScreenBounds</name><argument_list>(<argument><expr>*<name>mOriginalBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Move to top-left corner of screen and size to the screen dimensions</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScreenManager</name></expr></argument>&gt;</argument_list></name></type> <name>screenManager</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>screenManager</name> = <call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/gfx/screenmanager;1"</expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>screenManager</name></expr></argument>, <argument><expr>"Unable to grab screenManager."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>screenManager</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScreen</name></expr></argument>&gt;</argument_list></name></type> <name>screen</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>screenManager</name>-&gt;<name>ScreenForRect</name></name><argument_list>(<argument><expr><name><name>mOriginalBounds</name>-&gt;<name>x</name></name></expr></argument>, <argument><expr><name><name>mOriginalBounds</name>-&gt;<name>y</name></name></expr></argument>,
                                   <argument><expr><name><name>mOriginalBounds</name>-&gt;<name>width</name></name></expr></argument>, <argument><expr><name><name>mOriginalBounds</name>-&gt;<name>height</name></name></expr></argument>,
                                   <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>screen</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PRInt32</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>top</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>screen</name>-&gt;<name>GetRect</name></name><argument_list>(<argument><expr>&amp;<name>left</name></expr></argument>, <argument><expr>&amp;<name>top</name></expr></argument>, <argument><expr>&amp;<name>width</name></expr></argument>, <argument><expr>&amp;<name>height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>Resize</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
    }</block></then></if>

  }</block></then> <else>else <if>if <condition>(<expr><name>mOriginalBounds</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>Resize</name><argument_list>(<argument><expr><name><name>mOriginalBounds</name>-&gt;<name>x</name></name></expr></argument>, <argument><expr><name><name>mOriginalBounds</name>-&gt;<name>y</name></name></expr></argument>, <argument><expr><name><name>mOriginalBounds</name>-&gt;<name>width</name></name></expr></argument>,
           <argument><expr><name><name>mOriginalBounds</name>-&gt;<name>height</name></name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if></else></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<constructor><name><name>nsBaseWidget</name>::<name>AutoLayerManagerSetup</name>::<name>AutoLayerManagerSetup</name></name><parameter_list>(
    <param><decl><type><name>nsBaseWidget</name>*</type> <name>aWidget</name></decl></param>, <param><decl><type><name>gfxContext</name>*</type> <name>aTarget</name></decl></param>)</parameter_list>
  <member_list>: <call><name>mWidget</name><argument_list>(<argument><expr><name>aWidget</name></expr></argument>)</argument_list></call>
</member_list><block>{
  <decl_stmt><decl><type><name>BasicLayerManager</name>*</type> <name>manager</name> <init>=
    <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>BasicLayerManager</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>mWidget</name>-&gt;<name>GetLayerManager</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>manager</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>manager</name>-&gt;<name>GetBackendType</name></name><argument_list>()</argument_list></call> == <name><name>LayerManager</name>::<name>LAYERS_BASIC</name></name></expr></argument>,
      <argument><expr>"AutoLayerManagerSetup instantiated for non-basic layer backend!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>manager</name>-&gt;<name>SetDefaultTarget</name></name><argument_list>(<argument><expr><name>aTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></constructor>

<destructor><name><name>nsBaseWidget</name>::<name>AutoLayerManagerSetup</name>::~<name>AutoLayerManagerSetup</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>BasicLayerManager</name>*</type> <name>manager</name> <init>=
    <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>BasicLayerManager</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>mWidget</name>-&gt;<name>GetLayerManager</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>manager</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>manager</name>-&gt;<name>GetBackendType</name></name><argument_list>()</argument_list></call> == <name><name>LayerManager</name>::<name>LAYERS_BASIC</name></name></expr></argument>,
      <argument><expr>"AutoLayerManagerSetup instantiated for non-basic layer backend!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>manager</name>-&gt;<name>SetDefaultTarget</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></destructor>

<function><type><name>LayerManager</name>*</type> <name><name>nsBaseWidget</name>::<name>GetLayerManager</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mLayerManager</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrefBranch2</name></expr></argument>&gt;</argument_list></name></type> <name>prefs</name> <init>= <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_PREFSERVICE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PRBool</name></type> <name>allowAcceleration</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>prefs</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>prefs</name>-&gt;<name>GetBoolPref</name></name><argument_list>(<argument><expr>"mozilla.widget.accelerated-layers"</expr></argument>,
                         <argument><expr>&amp;<name>allowAcceleration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>mUseAcceleratedRendering</name> &amp;&amp; <name>allowAcceleration</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>LayerManagerOGL</name></expr></argument>&gt;</argument_list></name></type> <name>layerManager</name> <init>=
        <expr>new <call><name><name>mozilla</name>::<name>layers</name>::<name>LayerManagerOGL</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="block" format="doxygen">/**
       * XXX - On several OSes initialization is expected to fail for now.
       * If we'd get a none-basic layer manager they'd crash. This is ok though
       * since on those platforms it will fail. Anyone implementing new
       * platforms on LayerManagerOGL should ensure their widget is able to
       * deal with it though!
       */</comment>
      <if>if <condition>(<expr><call><name><name>layerManager</name>-&gt;<name>Initialize</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>mLayerManager</name> = <name>layerManager</name></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
    <if>if <condition>(<expr>!<name>mLayerManager</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>mLayerManager</name> = new <call><name>BasicLayerManager</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
  <return>return <expr><name>mLayerManager</name></expr>;</return>
}</block></function>

<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Return the toolkit this widget was created on</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>nsIToolkit</name>*</type> <name><name>nsBaseWidget</name>::<name>GetToolkit</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr><name>mToolkit</name></expr>;</return>
}</block></function>


<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Return the used device context</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>nsIDeviceContext</name>*</type> <name><name>nsBaseWidget</name>::<name>GetDeviceContext</name></name><parameter_list>()</parameter_list> 
<block>{
  <return>return <expr><name>mContext</name></expr>;</return> 
}</block></function>

<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Get the thebes surface</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>gfxASurface</name> *</type><name><name>nsBaseWidget</name>::<name>GetThebesSurface</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// in theory we should get our parent's surface,</comment>
  <comment type="line">// clone it, and set a device offset before returning</comment>
  <return>return <expr><name>nsnull</name></expr>;</return>
}</block></function>


<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Destroy the window</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>
<function><type><name>void</name></type> <name><name>nsBaseWidget</name>::<name>OnDestroy</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// release references to device context, toolkit, and app shell</comment>
  <expr_stmt><expr><call><name>NS_IF_RELEASE</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_IF_RELEASE</name><argument_list>(<argument><expr><name>mToolkit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>NS_METHOD</name></type> <name><name>nsBaseWidget</name>::<name>SetWindowClass</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>xulWinType</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<comment type="line">//-------------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">// Bounds</comment>
<comment type="line">//</comment>
<comment type="line">//-------------------------------------------------------------------------</comment>

<comment type="block" format="doxygen">/**
* If the implementation of nsWindow supports borders this method MUST be overridden
*
**/</comment>
<function><type><name>NS_METHOD</name></type> <name><name>nsBaseWidget</name>::<name>GetClientBounds</name></name><parameter_list>(<param><decl><type><name>nsIntRect</name> &amp;</type><name>aRect</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBounds</name><argument_list>(<argument><expr><name>aRect</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block" format="doxygen">/**
* If the implementation of nsWindow supports borders this method MUST be overridden
*
**/</comment>
<function><type><name>NS_METHOD</name></type> <name><name>nsBaseWidget</name>::<name>GetBounds</name></name><parameter_list>(<param><decl><type><name>nsIntRect</name> &amp;</type><name>aRect</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>aRect</name> = <name>mBounds</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block" format="doxygen">/**
* If the implementation of nsWindow uses a local coordinate system within the window,
* this method must be overridden
*
**/</comment>
<function><type><name>NS_METHOD</name></type> <name><name>nsBaseWidget</name>::<name>GetScreenBounds</name></name><parameter_list>(<param><decl><type><name>nsIntRect</name> &amp;</type><name>aRect</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBounds</name><argument_list>(<argument><expr><name>aRect</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_METHOD</name></type> <name><name>nsBaseWidget</name>::<name>GetClientOffset</name></name><parameter_list>(<param><decl><type><name>nsIntPoint</name> &amp;</type><name>aPt</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name><name>aPt</name>.<name>x</name></name> = <name><name>aPt</name>.<name>y</name></name> = 0</expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_METHOD</name></type> <name><name>nsBaseWidget</name>::<name>SetBounds</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsIntRect</name> &amp;</type><name>aRect</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mBounds</name> = <name>aRect</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsBaseWidget</name>::<name>GetNonClientMargins</name></name><parameter_list>(<param><decl><type><name>nsIntMargin</name> &amp;</type><name>margins</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>
 
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsBaseWidget</name>::<name>SetNonClientMargins</name></name><parameter_list>(<param><decl><type><name>nsIntMargin</name> &amp;</type><name>margins</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>NS_METHOD</name></type> <name><name>nsBaseWidget</name>::<name>EnableDragDrop</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aEnable</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_METHOD</name></type> <name><name>nsBaseWidget</name>::<name>SetModal</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aModal</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsBaseWidget</name>::<name>GetAttention</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aCycleCount</name></decl></param>)</parameter_list> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsBaseWidget</name>::<name>HasPendingInputEvent</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsBaseWidget</name>::<name>SetIcon</name></name><parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>nsAString</name>&amp;</decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsBaseWidget</name>::<name>BeginSecureKeyboardInput</name></name><parameter_list>()</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>debug_InSecureKeyboardInputMode</name></expr></argument>, <argument><expr>"Attempting to nest call to BeginSecureKeyboardInput!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>debug_InSecureKeyboardInputMode</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsBaseWidget</name>::<name>EndSecureKeyboardInput</name></name><parameter_list>()</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>debug_InSecureKeyboardInputMode</name></expr></argument>, <argument><expr>"Calling EndSecureKeyboardInput when it hasn't been enabled!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>debug_InSecureKeyboardInputMode</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsBaseWidget</name>::<name>SetWindowTitlebarColor</name></name><parameter_list>(<param><decl><type><name>nscolor</name></type> <name>aColor</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aActive</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsBaseWidget</name>::<name>ShowsResizeIndicator</name></name><parameter_list>(<param><decl><type><name>nsIntRect</name>*</type> <name>aResizerRect</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsBaseWidget</name>::<name>SetAcceleratedRendering</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aEnabled</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mUseAcceleratedRendering</name> == <name>aEnabled</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>mUseAcceleratedRendering</name> = <name>aEnabled</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mLayerManager</name> = <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsBaseWidget</name>::<name>GetAcceleratedRendering</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr><name>mUseAcceleratedRendering</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsBaseWidget</name>::<name>OverrideSystemMouseScrollSpeed</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aOriginalDelta</name></decl></param>,
                                             <param><decl><type><name>PRBool</name></type> <name>aIsHorizontal</name></decl></param>,
                                             <param><decl><type><name>PRInt32</name> &amp;</type><name>aOverriddenDelta</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>aOverriddenDelta</name> = <name>aOriginalDelta</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrefService</name></expr></argument>&gt;</argument_list></name></type> <name>prefs</name> <init>= <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_PREFSERVICE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>prefs</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrefBranch</name></expr></argument>&gt;</argument_list></name></type> <name>prefBranch</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>prefs</name>-&gt;<name>GetBranch</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>prefBranch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>prefBranch</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>isOverrideEnabled</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>kPrefNameOverrideEnabled</name> <init>=
    <expr>"mousewheel.system_scroll_override_on_root_content.enabled"</expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>prefBranch</name>-&gt;<name>GetBoolPref</name></name><argument_list>(<argument><expr><name>kPrefNameOverrideEnabled</name></expr></argument>, <argument><expr>&amp;<name>isOverrideEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> || !<name>isOverrideEnabled</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>iFactor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>factorPrefName</name><argument_list>(
    <argument><expr>"mousewheel.system_scroll_override_on_root_content."</expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>aIsHorizontal</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>factorPrefName</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>"horizontal."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name><name>factorPrefName</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>"vertical."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
  <expr_stmt><expr><call><name><name>factorPrefName</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>"factor"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>prefBranch</name>-&gt;<name>GetIntPref</name></name><argument_list>(<argument><expr><call><name><name>factorPrefName</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>iFactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// The pref value must be larger than 100, otherwise, we don't override the</comment>
  <comment type="line">// delta value.</comment>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> || <name>iFactor</name> &lt;= 100</expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name>double</name></type> <name>factor</name> <init>= <expr>(<name>double</name>)<name>iFactor</name> / 100</expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>aOverriddenDelta</name> = <call><name>PRInt32</name><argument_list>(<argument><expr><call><name>NS_round</name><argument_list>(<argument><expr>(<name>double</name>)<name>aOriginalDelta</name> * <name>factor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<comment type="block" format="doxygen">/**
 * Modifies aFile to point at an icon file with the given name and suffix.  The
 * suffix may correspond to a file extension with leading '.' if appropriate.
 * Returns true if the icon file exists and can be read.
 */</comment>
<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>ResolveIconNameHelper</name><parameter_list>(<param><decl><type><name>nsILocalFile</name> *</type><name>aFile</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aIconName</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aIconSuffix</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aFile</name>-&gt;<name>Append</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"icons"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>aFile</name>-&gt;<name>Append</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"default"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>aFile</name>-&gt;<name>Append</name></name><argument_list>(<argument><expr><name>aIconName</name> + <name>aIconSuffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>readable</name></decl>;</decl_stmt>
  <return>return <expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>aFile</name>-&gt;<name>IsReadable</name></name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>readable</name></expr>;</return>
}</block></function>

<comment type="block" format="doxygen">/**
 * Resolve the given icon name into a local file object.  This method is
 * intended to be called by subclasses of nsBaseWidget.  aIconSuffix is a
 * platform specific icon file suffix (e.g., ".ico" under Win32).
 *
 * If no file is found matching the given parameters, then null is returned.
 */</comment>
<function><type><name>void</name></type>
<name><name>nsBaseWidget</name>::<name>ResolveIconName</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aIconName</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aIconSuffix</name></decl></param>,
                              <param><decl><type><name>nsILocalFile</name> **</type><name>aResult</name></decl></param>)</parameter_list>
<block>{ 
  <expr_stmt><expr>*<name>aResult</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIProperties</name></expr></argument>&gt;</argument_list></name></type> <name>dirSvc</name> <init>= <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_DIRECTORY_SERVICE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>dirSvc</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <comment type="line">// first check auxilary chrome directories</comment>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISimpleEnumerator</name></expr></argument>&gt;</argument_list></name></type> <name>dirs</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>dirSvc</name>-&gt;<name>Get</name></name><argument_list>(<argument><expr><name>NS_APP_CHROME_DIR_LIST</name></expr></argument>, <argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsISimpleEnumerator</name></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>dirs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>dirs</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRBool</name></type> <name>hasMore</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>dirs</name>-&gt;<name>HasMoreElements</name></name><argument_list>(<argument><expr>&amp;<name>hasMore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>hasMore</name></expr>)</condition> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>element</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>dirs</name>-&gt;<name>GetNext</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>!<name>element</name></expr>)</condition><then>
        <continue>continue;</continue></then></if>
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name></type> <name>file</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>file</name></expr>)</condition><then>
        <continue>continue;</continue></then></if>
      <if>if <condition>(<expr><call><name>ResolveIconNameHelper</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>aIconName</name></expr></argument>, <argument><expr><name>aIconSuffix</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aResult</name> = <name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      }</block></then></if>
    }</block></while>
  }</block></then></if>

  <comment type="line">// then check the main app chrome directory</comment>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name></type> <name>file</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>dirSvc</name>-&gt;<name>Get</name></name><argument_list>(<argument><expr><name>NS_APP_CHROME_DIR</name></expr></argument>, <argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsILocalFile</name></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>file</name> &amp;&amp; <call><name>ResolveIconNameHelper</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>aIconName</name></expr></argument>, <argument><expr><name>aIconSuffix</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aResult</name> = <name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> 
<name><name>nsBaseWidget</name>::<name>BeginResizeDrag</name></name><parameter_list>(<param><decl><type><name>nsGUIEvent</name>*</type> <name>aEvent</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aHorizontal</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aVertical</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>
 
<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////</comment>
<comment type="line">//</comment>
<comment type="line">// Code to sort rectangles for scrolling.</comment>
<comment type="line">//</comment>
<comment type="line">// The algorithm used here is similar to that described at</comment>
<comment type="line">// http://weblogs.mozillazine.org/roc/archives/2009/08/homework_answer.html</comment>
<comment type="line">//</comment>
<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////</comment>

<function><type><name>void</name></type>
<name><name>ScrollRectIterBase</name>::<name>BaseInit</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsIntPoint</name>&amp;</type> <name>aDelta</name></decl></param>, <param><decl><type><name>ScrollRect</name>*</type> <name>aHead</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mHead</name> = <name>aHead</name></expr>;</expr_stmt>
  <comment type="line">// Reflect the coordinate system of the rectangles so that we can assume</comment>
  <comment type="line">// that rectangles are moving in the direction of decreasing x and y.</comment>
  <expr_stmt><expr><call><name>Flip</name><argument_list>(<argument><expr><name>aDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Do an initial sort of the rectangles by y and then reverse-x.</comment>
  <comment type="line">// nsRegion does not guarantee yx-banded rectangles but still tends to</comment>
  <comment type="line">// prefer breaking up rectangles vertically and joining horizontally, so</comment>
  <comment type="line">// tends to have fewer rectangles across x than down y, making this</comment>
  <comment type="line">// algorithm more efficient for rectangles from nsRegion when y is the</comment>
  <comment type="line">// primary sort parameter.</comment>
  <decl_stmt><decl><type><name>ScrollRect</name>*</type> <name>unmovedHead</name></decl>;</decl_stmt> <comment type="line">// chain of unmoved rectangles</comment>
  <block>{
    <decl_stmt><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>ScrollRect</name>*</expr></argument>&gt;</argument_list></name></type> <name>array</name></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>ScrollRect</name>*</type> <name>r</name> <init>= <expr><name>mHead</name></expr></init></decl>;</init> <condition><expr><name>r</name></expr>;</condition> <incr><expr><name>r</name> = <name><name>r</name>-&gt;<name>mNext</name></name></expr></incr>) <block>{
      <expr_stmt><expr><call><name><name>array</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name><name>array</name>.<name>Sort</name></name><argument_list>(<argument><expr><call><name>InitialSortComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ScrollRect</name> *</type><name>next</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr><call><name><name>array</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name>--</expr>;</condition> <incr/>) <block>{
      <expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>mNext</name> = <name>next</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>next</name> = <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>unmovedHead</name> = <name>next</name></expr>;</expr_stmt>
    <comment type="line">// mHead becomes the start of the moved chain.</comment>
    <expr_stmt><expr><name>mHead</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block>

  <comment type="line">// Try to move each rect from an unmoved chain to the moved chain.</comment>
  <expr_stmt><expr><name>mTailLink</name> = &amp;<name>mHead</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>unmovedHead</name></expr>)</condition> <block>{
    <comment type="line">// Move() will check for other rectangles that might need to be moved first</comment>
    <comment type="line">// and move them also.</comment>
    <expr_stmt><expr><call><name>Move</name><argument_list>(<argument><expr>&amp;<name>unmovedHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>

  <comment type="line">// Reflect back to the original coordinate system.</comment>
  <expr_stmt><expr><call><name>Flip</name><argument_list>(<argument><expr><name>aDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name><name>ScrollRectIterBase</name>::<name>Move</name></name><parameter_list>(<param><decl><type><name>ScrollRect</name>**</type> <name>aUnmovedLink</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ScrollRect</name>*</type> <name>rect</name> <init>= <expr>*<name>aUnmovedLink</name></expr></init></decl>;</decl_stmt>
  <comment type="line">// Remove rect from the unmoved chain.</comment>
  <expr_stmt><expr>*<name>aUnmovedLink</name> = <name><name>rect</name>-&gt;<name>mNext</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rect</name>-&gt;<name>mNext</name></name> = <name>nsnull</name></expr>;</expr_stmt>

  <comment type="line">// Check subsequent rectangles that overlap vertically to see whether they</comment>
  <comment type="line">// might need to be moved first.</comment>
  <comment type="line">//</comment>
  <comment type="line">// The overlapping subsequent rectangles that are not moved this time get</comment>
  <comment type="line">// checked for each of their preceding unmoved overlapping rectangles,</comment>
  <comment type="line">// which adds an O(n^2) cost to this algorithm (where n is the number of</comment>
  <comment type="line">// rectangles across x).  The reverse-x ordering from InitialSortComparator</comment>
  <comment type="line">// avoids this for the case when rectangles are aligned in y.</comment>
  <for>for (<init><decl><type><name>ScrollRect</name>**</type> <name>nextLink</name> <init>= <expr><name>aUnmovedLink</name></expr></init></decl>;</init> <condition><expr>*<name>nextLink</name></expr>;</condition> <incr/>) <block>{
    <decl_stmt><decl><type><name>ScrollRect</name>*</type> <name>otherRect</name> <init>= <expr>*<name>nextLink</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name><name>otherRect</name>-&gt;<name>y</name></name> &gt;= <name><name>rect</name>-&gt;<name>y</name></name></expr></argument>, <argument><expr>"Scroll rectangles out of order"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>otherRect</name>-&gt;<name>y</name></name> &gt;= <call><name><name>rect</name>-&gt;<name>YMost</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <comment type="line">// doesn't overlap vertically</comment>
      <break>break;</break></then></if>

    <comment type="line">// This only moves the other rectangle first if it is entirely to the</comment>
    <comment type="line">// left.  No promises are made regarding intersecting rectangles.  Moving</comment>
    <comment type="line">// another intersecting rectangle with merely x &lt; rect-&gt;x (but XMost() &gt;</comment>
    <comment type="line">// rect-&gt;x) can cause more conflicts between rectangles that do not</comment>
    <comment type="line">// intersect each other.</comment>
    <if>if <condition>(<expr><call><name><name>otherRect</name>-&gt;<name>XMost</name></name><argument_list>()</argument_list></call> &lt;= <name><name>rect</name>-&gt;<name>x</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>Move</name><argument_list>(<argument><expr><name>nextLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// *nextLink now points to a subsequent rectangle.</comment>
    }</block></then> <else>else <block>{
      <comment type="line">// Step over otherRect for now.</comment>
      <expr_stmt><expr><name>nextLink</name> = &amp;<name><name>otherRect</name>-&gt;<name>mNext</name></name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></for>

  <comment type="line">// Add rect to the moved chain.</comment>
  <expr_stmt><expr>*<name>mTailLink</name> = <name>rect</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mTailLink</name> = &amp;<name><name>rect</name>-&gt;<name>mNext</name></name></expr>;</expr_stmt>
}</block></function>

<constructor><name><name>BlitRectIter</name>::<name>BlitRectIter</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsIntPoint</name>&amp;</type> <name>aDelta</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsIntRect</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aRects</name></decl></param>)</parameter_list>
    <member_list>: <call><name>mRects</name><argument_list>(<argument><expr><call><name><name>aRects</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
</member_list><block>{
    <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>aRects</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <expr_stmt><expr><call><name><name>mRects</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name><name>aRects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <comment type="line">// Link rectangles into a chain.</comment>
    <decl_stmt><decl><type><name>ScrollRect</name> *</type><name>next</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr><call><name><name>mRects</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name>--</expr>;</condition> <incr/>) <block>{
        <expr_stmt><expr><name><name>mRects</name><index>[<expr><name>i</name></expr>]</index></name>.<name>mNext</name> = <name>next</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>next</name> = &amp;<name><name>mRects</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>BaseInit</name><argument_list>(<argument><expr><name>aDelta</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////</comment>
<comment type="line">//</comment>
<comment type="line">// Convert a GUI event message code to a string.</comment>
<comment type="line">// Makes it a lot easier to debug events.</comment>
<comment type="line">//</comment>
<comment type="line">// See gtk/nsWidget.cpp and windows/nsWindow.cpp</comment>
<comment type="line">// for a DebugPrintEvent() function that uses</comment>
<comment type="line">// this.</comment>
<comment type="line">//</comment>
<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////</comment>
<comment type="block">/* static */</comment> <function><type><name>nsAutoString</name></type>
<name><name>nsBaseWidget</name>::<name>debug_GuiEventToString</name></name><parameter_list>(<param><decl><type><name>nsGUIEvent</name> *</type> <name>aGuiEvent</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>nsnull</name> != <name>aGuiEvent</name></expr></argument>,<argument><expr>"cmon, null gui event."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>eventName</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"UNKNOWN"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ASSIGN_eventName</name><parameter_list>(<param><type><name>_value</name></type></param>,<param><type><name>_name</name></type></param>)</parameter_list></cpp:macro>\
<cpp:value>case _value: eventName.AssignWithConversion(_name) ; break</cpp:value></cpp:define>

  <switch>switch<condition>(<expr><name><name>aGuiEvent</name>-&gt;<name>message</name></name></expr>)</condition>
  <block>{
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_BLUR_CONTENT</name></expr></argument>,<argument><expr>"NS_BLUR_CONTENT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_CREATE</name></expr></argument>,<argument><expr>"NS_CREATE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_DESTROY</name></expr></argument>,<argument><expr>"NS_DESTROY"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_DRAGDROP_GESTURE</name></expr></argument>,<argument><expr>"NS_DND_GESTURE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_DRAGDROP_DROP</name></expr></argument>,<argument><expr>"NS_DND_DROP"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_DRAGDROP_ENTER</name></expr></argument>,<argument><expr>"NS_DND_ENTER"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_DRAGDROP_EXIT</name></expr></argument>,<argument><expr>"NS_DND_EXIT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_DRAGDROP_OVER</name></expr></argument>,<argument><expr>"NS_DND_OVER"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_FOCUS_CONTENT</name></expr></argument>,<argument><expr>"NS_FOCUS_CONTENT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_FORM_SELECTED</name></expr></argument>,<argument><expr>"NS_FORM_SELECTED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_FORM_CHANGE</name></expr></argument>,<argument><expr>"NS_FORM_CHANGE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_FORM_INPUT</name></expr></argument>,<argument><expr>"NS_FORM_INPUT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_FORM_RESET</name></expr></argument>,<argument><expr>"NS_FORM_RESET"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_FORM_SUBMIT</name></expr></argument>,<argument><expr>"NS_FORM_SUBMIT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_IMAGE_ABORT</name></expr></argument>,<argument><expr>"NS_IMAGE_ABORT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_LOAD_ERROR</name></expr></argument>,<argument><expr>"NS_LOAD_ERROR"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_KEY_DOWN</name></expr></argument>,<argument><expr>"NS_KEY_DOWN"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_KEY_PRESS</name></expr></argument>,<argument><expr>"NS_KEY_PRESS"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_KEY_UP</name></expr></argument>,<argument><expr>"NS_KEY_UP"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_MOUSE_ENTER</name></expr></argument>,<argument><expr>"NS_MOUSE_ENTER"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_MOUSE_EXIT</name></expr></argument>,<argument><expr>"NS_MOUSE_EXIT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_MOUSE_BUTTON_DOWN</name></expr></argument>,<argument><expr>"NS_MOUSE_BUTTON_DOWN"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_MOUSE_BUTTON_UP</name></expr></argument>,<argument><expr>"NS_MOUSE_BUTTON_UP"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_MOUSE_CLICK</name></expr></argument>,<argument><expr>"NS_MOUSE_CLICK"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_MOUSE_DOUBLECLICK</name></expr></argument>,<argument><expr>"NS_MOUSE_DBLCLICK"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_MOUSE_MOVE</name></expr></argument>,<argument><expr>"NS_MOUSE_MOVE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_MOVE</name></expr></argument>,<argument><expr>"NS_MOVE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_LOAD</name></expr></argument>,<argument><expr>"NS_LOAD"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_POPSTATE</name></expr></argument>,<argument><expr>"NS_POPSTATE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_PAGE_UNLOAD</name></expr></argument>,<argument><expr>"NS_PAGE_UNLOAD"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_HASHCHANGE</name></expr></argument>,<argument><expr>"NS_HASHCHANGE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_READYSTATECHANGE</name></expr></argument>,<argument><expr>"NS_READYSTATECHANGE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_PAINT</name></expr></argument>,<argument><expr>"NS_PAINT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_XUL_BROADCAST</name></expr></argument>, <argument><expr>"NS_XUL_BROADCAST"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_XUL_COMMAND_UPDATE</name></expr></argument>, <argument><expr>"NS_XUL_COMMAND_UPDATE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_SCROLLBAR_LINE_NEXT</name></expr></argument>,<argument><expr>"NS_SB_LINE_NEXT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_SCROLLBAR_LINE_PREV</name></expr></argument>,<argument><expr>"NS_SB_LINE_PREV"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_SCROLLBAR_PAGE_NEXT</name></expr></argument>,<argument><expr>"NS_SB_PAGE_NEXT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_SCROLLBAR_PAGE_PREV</name></expr></argument>,<argument><expr>"NS_SB_PAGE_PREV"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_SCROLLBAR_POS</name></expr></argument>,<argument><expr>"NS_SB_POS"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_ASSIGN_eventName</name><argument_list>(<argument><expr><name>NS_SIZE</name></expr></argument>,<argument><expr>"NS_SIZE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_ASSIGN_eventName</name></cpp:undef>

  <default>default: 
    <block>{
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>32</expr>]</index></name></decl>;</decl_stmt>
      
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr>"UNKNOWN: %d"</expr></argument>,<argument><expr><name><name>aGuiEvent</name>-&gt;<name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name><name>eventName</name>.<name>AssignWithConversion</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <break>break;</break>
  </default>}</block></switch>
  
  <return>return <expr><call><name>nsAutoString</name><argument_list>(<argument><expr><name>eventName</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////</comment>
<comment type="line">//</comment>
<comment type="line">// Code to deal with paint and event debug prefs.</comment>
<comment type="line">//</comment>
<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////</comment>
<struct>struct <name>PrefPair</name>
<block>{<public type="default">
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>value</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>PrefPair</name></type> <name><name>debug_PrefValues</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><block>{ <expr>"nglayout.debug.crossing_event_dumping"</expr>, <expr><name>PR_FALSE</name></expr> }</block></expr>,
  <expr><block>{ <expr>"nglayout.debug.event_dumping"</expr>, <expr><name>PR_FALSE</name></expr> }</block></expr>,
  <expr><block>{ <expr>"nglayout.debug.invalidate_dumping"</expr>, <expr><name>PR_FALSE</name></expr> }</block></expr>,
  <expr><block>{ <expr>"nglayout.debug.motion_event_dumping"</expr>, <expr><name>PR_FALSE</name></expr> }</block></expr>,
  <expr><block>{ <expr>"nglayout.debug.paint_dumping"</expr>, <expr><name>PR_FALSE</name></expr> }</block></expr>,
  <expr><block>{ <expr>"nglayout.debug.paint_flashing"</expr>, <expr><name>PR_FALSE</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PRUint32</name></type> <name>debug_NumPrefValues</name> <init>= 
  <expr>(<sizeof>sizeof<argument_list>(<argument><expr><name>debug_PrefValues</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name><name>debug_PrefValues</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof>)</expr></init></decl>;</decl_stmt>


<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////</comment>
<function><type><specifier>static</specifier> <name>PRBool</name></type> <name>debug_GetBoolPref</name><parameter_list>(<param><decl><type><name>nsIPrefBranch</name> *</type> <name>aPrefs</name></decl></param>,<param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>aPrefName</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>nsnull</name> != <name>aPrefName</name></expr></argument>,<argument><expr>"cmon, pref name is null."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>nsnull</name> != <name>aPrefs</name></expr></argument>,<argument><expr>"cmon, prefs are null."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>value</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>aPrefs</name></expr>)</condition><then>
  <block>{
    <expr_stmt><expr><call><name><name>aPrefs</name>-&gt;<name>GetBoolPref</name></name><argument_list>(<argument><expr><name>aPrefName</name></expr></argument>,<argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>value</name></expr>;</return>
}</block></function>
<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////</comment>
<function><type><name>PRBool</name></type>
<name><name>nsBaseWidget</name>::<name>debug_GetCachedBoolPref</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>aPrefName</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>nsnull</name> != <name>aPrefName</name></expr></argument>,<argument><expr>"cmon, pref name is null."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>debug_NumPrefValues</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
  <block>{
    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>debug_PrefValues</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr><name>aPrefName</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <return>return <expr><name><name>debug_PrefValues</name><index>[<expr><name>i</name></expr>]</index></name>.<name>value</name></expr>;</return>
    }</block></then></if>
  }</block></for>

  <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>
<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>debug_SetCachedBoolPref</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>aPrefName</name></decl></param>,<param><decl><type><name>PRBool</name></type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>nsnull</name> != <name>aPrefName</name></expr></argument>,<argument><expr>"cmon, pref name is null."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>debug_NumPrefValues</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
  <block>{
    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>debug_PrefValues</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr><name>aPrefName</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>debug_PrefValues</name><index>[<expr><name>i</name></expr>]</index></name>.<name>value</name> = <name>aValue</name></expr>;</expr_stmt>

      <return>return;</return>
    }</block></then></if>
  }</block></for>

  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr>"cmon, this code is not reached dude."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////</comment>
<class>class <name>Debug_PrefObserver</name> <super>: <specifier>public</specifier> <name>nsIObserver</name></super> <block>{<private type="default">
  </private><public>public:
    <macro><name>NS_DECL_ISUPPORTS</name></macro>
    <macro><name>NS_DECL_NSIOBSERVER</name></macro>
</public>}</block>;</class>

<macro><name>NS_IMPL_ISUPPORTS1</name><argument_list>(<argument>Debug_PrefObserver</argument>, <argument>nsIObserver</argument>)</argument_list></macro>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>Debug_PrefObserver</name>::<name>Observe</name></name><parameter_list>(<param><decl><type><name>nsISupports</name>*</type> <name>subject</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>topic</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>PRUnichar</name>*</type> <name>data</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrefBranch</name></expr></argument>&gt;</argument_list></name></type> <name>branch</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>subject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>branch</name></expr></argument>, <argument><expr>"must implement nsIPrefBranch"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>NS_ConvertUTF16toUTF8</name></type> <name>prefName</name><parameter_list>(<param><decl><type><name>data</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>value</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>branch</name>-&gt;<name>GetBoolPref</name></name><argument_list>(<argument><expr><call><name><name>prefName</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>debug_SetCachedBoolPref</name><argument_list>(<argument><expr><call><name><name>prefName</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////</comment>
<comment type="block">/* static */</comment> <function><type><name>void</name></type>
<name>debug_RegisterPrefCallbacks</name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>static</specifier> <name>PRBool</name></type> <name>once</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>once</name></expr>)</condition><then>
  <block>{
    <expr_stmt><expr><name>once</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrefBranch2</name></expr></argument>&gt;</argument_list></name></type> <name>prefs</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_PREFSERVICE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>prefs</name></expr></argument>, <argument><expr>"Prefs services is null."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>prefs</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIObserver</name></expr></argument>&gt;</argument_list></name></type> <name>obs</name><argument_list>(<argument><expr>new <call><name>Debug_PrefObserver</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
      <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>debug_NumPrefValues</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
      <block>{
        <comment type="line">// Initialize the pref values</comment>
        <expr_stmt><expr><name><name>debug_PrefValues</name><index>[<expr><name>i</name></expr>]</index></name>.<name>value</name> = 
          <call><name>debug_GetBoolPref</name><argument_list>(<argument><expr><name>prefs</name></expr></argument>,<argument><expr><name><name>debug_PrefValues</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>obs</name></expr>)</condition><then> <block>{
          <comment type="line">// Register callbacks for when these change</comment>
          <expr_stmt><expr><call><name><name>prefs</name>-&gt;<name>AddObserver</name></name><argument_list>(<argument><expr><name><name>debug_PrefValues</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr><name>obs</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></for>
    }</block></then></if>
  }</block></then></if>
}</block></function>
<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////</comment>
<function><type><specifier>static</specifier> <name>PRInt32</name></type>
<name>_GetPrintCount</name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>static</specifier> <name>PRInt32</name></type> <name>sCount</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  
  <return>return <expr>++<name>sCount</name></expr>;</return>
}</block></function>
<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////</comment>
<comment type="block">/* static */</comment> <function><type><name>PRBool</name></type>
<name><name>nsBaseWidget</name>::<name>debug_WantPaintFlashing</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr><call><name>debug_GetCachedBoolPref</name><argument_list>(<argument><expr>"nglayout.debug.paint_flashing"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////</comment>
<comment type="block">/* static */</comment> <function><type><name>void</name></type>
<name><name>nsBaseWidget</name>::<name>debug_DumpEvent</name></name><parameter_list>(<param><decl><type><name>FILE</name> *</type>                <name>aFileOut</name></decl></param>,
                              <param><decl><type><name>nsIWidget</name> *</type>           <name>aWidget</name></decl></param>,
                              <param><decl><type><name>nsGUIEvent</name> *</type>          <name>aGuiEvent</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>nsCAutoString</name> &amp;</type> <name>aWidgetName</name></decl></param>,
                              <param><decl><type><name>PRInt32</name></type>               <name>aWindowID</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// NS_PAINT is handled by debug_DumpPaintEvent()</comment>
  <if>if <condition>(<expr><name><name>aGuiEvent</name>-&gt;<name>message</name></name> == <name>NS_PAINT</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <if>if <condition>(<expr><name><name>aGuiEvent</name>-&gt;<name>message</name></name> == <name>NS_MOUSE_MOVE</name></expr>)</condition><then>
  <block>{
    <if>if <condition>(<expr>!<call><name>debug_GetCachedBoolPref</name><argument_list>(<argument><expr>"nglayout.debug.motion_event_dumping"</expr></argument>)</argument_list></call></expr>)</condition><then>
      <return>return;</return></then></if>
  }</block></then></if>
  
  <if>if <condition>(<expr><name><name>aGuiEvent</name>-&gt;<name>message</name></name> == <name>NS_MOUSE_ENTER</name> || 
      <name><name>aGuiEvent</name>-&gt;<name>message</name></name> == <name>NS_MOUSE_EXIT</name></expr>)</condition><then>
  <block>{
    <if>if <condition>(<expr>!<call><name>debug_GetCachedBoolPref</name><argument_list>(<argument><expr>"nglayout.debug.crossing_event_dumping"</expr></argument>)</argument_list></call></expr>)</condition><then>
      <return>return;</return></then></if>
  }</block></then></if>

  <if>if <condition>(<expr>!<call><name>debug_GetCachedBoolPref</name><argument_list>(<argument><expr>"nglayout.debug.event_dumping"</expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>tempString</name></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>tempString</name>.<name>AssignWithConversion</name></name><argument_list>(<argument><expr><call><name>debug_GuiEventToString</name><argument_list>(<argument><expr><name>aGuiEvent</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>aFileOut</name></expr></argument>,
          <argument><expr>"%4d %-26s widget=%-8p name=%-12s id=%-8p refpt=%d,%d\n"</expr></argument>,
          <argument><expr><call><name>_GetPrintCount</name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><call><name><name>tempString</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr>(<name>void</name> *) <name>aWidget</name></expr></argument>,
          <argument><expr><call><name><name>aWidgetName</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr>(<name>void</name> *) (<name>aWindowID</name> ? <name>aWindowID</name> : 0x0)</expr></argument>,
          <argument><expr><name><name>aGuiEvent</name>-&gt;<name>refPoint</name>.<name>x</name></name></expr></argument>,
          <argument><expr><name><name>aGuiEvent</name>-&gt;<name>refPoint</name>.<name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////</comment>
<comment type="block">/* static */</comment> <function><type><name>void</name></type>
<name><name>nsBaseWidget</name>::<name>debug_DumpPaintEvent</name></name><parameter_list>(<param><decl><type><name>FILE</name> *</type>                <name>aFileOut</name></decl></param>,
                                   <param><decl><type><name>nsIWidget</name> *</type>           <name>aWidget</name></decl></param>,
                                   <param><decl><type><name>nsPaintEvent</name> *</type>        <name>aPaintEvent</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>nsCAutoString</name> &amp;</type> <name>aWidgetName</name></decl></param>,
                                   <param><decl><type><name>PRInt32</name></type>               <name>aWindowID</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>nsnull</name> != <name>aFileOut</name></expr></argument>,<argument><expr>"cmon, null output FILE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>nsnull</name> != <name>aWidget</name></expr></argument>,<argument><expr>"cmon, the widget is null"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>nsnull</name> != <name>aPaintEvent</name></expr></argument>,<argument><expr>"cmon, the paint event is null"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<call><name>debug_GetCachedBoolPref</name><argument_list>(<argument><expr>"nglayout.debug.paint_dumping"</expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>
  
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>aFileOut</name></expr></argument>,
          <argument><expr>"%4d PAINT      widget=%p name=%-12s id=%-8p rect="</expr></argument>, 
          <argument><expr><call><name>_GetPrintCount</name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr>(<name>void</name> *) <name>aWidget</name></expr></argument>,
          <argument><expr><call><name><name>aWidgetName</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr>(<name>void</name> *) <name>aWindowID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>aFileOut</name></expr></argument>,<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////</comment>
<comment type="block">/* static */</comment> <function><type><name>void</name></type>
<name><name>nsBaseWidget</name>::<name>debug_DumpInvalidate</name></name><parameter_list>(<param><decl><type><name>FILE</name> *</type>                <name>aFileOut</name></decl></param>,
                                   <param><decl><type><name>nsIWidget</name> *</type>           <name>aWidget</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>nsIntRect</name> *</type>     <name>aRect</name></decl></param>,
                                   <param><decl><type><name>PRBool</name></type>                <name>aIsSynchronous</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>nsCAutoString</name> &amp;</type> <name>aWidgetName</name></decl></param>,
                                   <param><decl><type><name>PRInt32</name></type>               <name>aWindowID</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>debug_GetCachedBoolPref</name><argument_list>(<argument><expr>"nglayout.debug.invalidate_dumping"</expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>

  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>nsnull</name> != <name>aFileOut</name></expr></argument>,<argument><expr>"cmon, null output FILE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>nsnull</name> != <name>aWidget</name></expr></argument>,<argument><expr>"cmon, the widget is null"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>aFileOut</name></expr></argument>,
          <argument><expr>"%4d Invalidate widget=%p name=%-12s id=%-8p"</expr></argument>,
          <argument><expr><call><name>_GetPrintCount</name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr>(<name>void</name> *) <name>aWidget</name></expr></argument>,
          <argument><expr><call><name><name>aWidgetName</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr>(<name>void</name> *) <name>aWindowID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>aRect</name></expr>)</condition><then> 
  <block>{
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>aFileOut</name></expr></argument>,
            <argument><expr>" rect=%3d,%-3d %3d,%-3d"</expr></argument>,
            <argument><expr><name><name>aRect</name>-&gt;<name>x</name></name></expr></argument>, 
            <argument><expr><name><name>aRect</name>-&gt;<name>y</name></name></expr></argument>,
            <argument><expr><name><name>aRect</name>-&gt;<name>width</name></name></expr></argument>, 
            <argument><expr><name><name>aRect</name>-&gt;<name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else
  <block>{
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>aFileOut</name></expr></argument>,
            <argument><expr>" rect=%-15s"</expr></argument>,
            <argument><expr>"none"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>aFileOut</name></expr></argument>,
          <argument><expr>" sync=%s"</expr></argument>,
          <argument><expr>(const <name>char</name> *) (<name>aIsSynchronous</name> ? "yes" : "no ")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>aFileOut</name></expr></argument>,<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// DEBUG</comment>

</unit>
