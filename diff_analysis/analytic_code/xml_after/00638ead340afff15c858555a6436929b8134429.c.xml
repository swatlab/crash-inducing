<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="00638ead340afff15c858555a6436929b8134429.c"><comment type="block">/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Netscape Portable Runtime (NSPR).
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998-2000
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<comment type="block">/***********************************************************************
**
** Name: prpoll_err.c
**
** Description: This program tests PR_Poll with sockets.
**              error reporting operation is tested
**
** Modification History:
** 19-May-97 AGarcia- Converted the test to accomodate the debug_mode flag.
**	         The debug mode will print all of the printfs associated with this test.
**			 The regress mode will be the default mode. Since the regress tool limits
**           the output to a one line status:PASS or FAIL,all of the printf statements
**			 have been handled with an if (debug_mode) statement.
** 04-June-97 AGarcia removed the Test_Result function. Regress tool has been updated to
**			recognize the return code from tha main program.
***********************************************************************/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_BEOS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr>"This test is not ported to the BeOS\n"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<comment type="block">/***********************************************************************
** Includes
***********************************************************************/</comment>
<comment type="block">/* Used to get the command line option */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plgetopt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"primpl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>PRIntn</name></type> <name>failed_already</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRIntn</name></type> <name>debug_mode</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ClientThreadFunc</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PRFileDesc</name> *</type><name>badFD</name> <init>= <expr>(<name>PRFileDesc</name> *) <name>arg</name></expr></init></decl>;</decl_stmt>
    <comment type="block">/*
     * Make the fd invalid
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><call><name>PR_FileDesc2NativeHandle</name><argument_list>(<argument><expr><name>badFD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_OS2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><call><name>soclose</name><argument_list>(<argument><expr><call><name>PR_FileDesc2NativeHandle</name><argument_list>(<argument><expr><name>badFD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>WIN16</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><call><name>PR_FileDesc2NativeHandle</name><argument_list>(<argument><expr><name>badFD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> "Unknown architecture"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PRFileDesc</name> *</type><name>listenSock1</name></decl>, *<decl><type ref="prev"/><name>listenSock2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRFileDesc</name> *</type><name>badFD</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint16</name></type> <name>listenPort1</name></decl>, <decl><type ref="prev"/><name>listenPort2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRNetAddr</name></type> <name>addr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>128</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRPollDesc</name></type> <name><name>pds0</name><index>[<expr>10</expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pds1</name><index>[<expr>10</expr>]</index></name></decl>, *<decl><type ref="prev"/><name>pds</name></decl>, *<decl><type ref="prev"/><name>other_pds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRIntn</name></type> <name>npds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>retVal</name></decl>;</decl_stmt>

	<comment type="block">/* The command line argument: -d is used to determine if the test is being run
	in debug mode. The regress tool requires only one line output:PASS or FAIL.
	All of the printfs associated with this test has been handled with a if (debug_mode)
	test.
	Usage: test_name -d
	*/</comment>
	<decl_stmt><decl><type><name>PLOptStatus</name></type> <name>os</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PLOptState</name> *</type><name>opt</name> <init>= <expr><call><name>PL_CreateOptState</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr>"d:"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>PL_OPT_EOL</name> != (<name>os</name> = <call><name>PL_GetNextOpt</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call>)</expr>)</condition>
    <block>{
		<if>if <condition>(<expr><name>PL_OPT_BAD</name> == <name>os</name></expr>)</condition><then> <continue>continue;</continue></then></if>
        <switch>switch <condition>(<expr><name><name>opt</name>-&gt;<name>option</name></name></expr>)</condition>
        <block>{
        <case>case <expr>'d'</expr>:  <comment type="block">/* debug mode */</comment>
			<expr_stmt><expr><name>debug_mode</name> = 1</expr>;</expr_stmt>
            <break>break;</break>
         </case><default>default:
            <break>break;</break>
        </default>}</block></switch>
    }</block></while>
	<expr_stmt><expr><call><name>PL_DestroyOptState</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 <comment type="block">/* main test */</comment>
	
    <expr_stmt><expr><call><name>PR_Init</name><argument_list>(<argument><expr><name>PR_USER_THREAD</name></expr></argument>, <argument><expr><name>PR_PRIORITY_NORMAL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PR_STDIO_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>debug_mode</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"This program tests PR_Poll with sockets.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"error reporting is  tested.\n\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

    <comment type="block">/* Create two listening sockets */</comment>
    <if>if <condition>(<expr>(<name>listenSock1</name> = <call><name>PR_NewTCPSocket</name><argument_list>()</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Can't create a new TCP socket\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>failed_already</name>=1</expr>;</expr_stmt>
	<goto>goto <name>exit_now</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><name><name>addr</name>.<name>inet</name>.<name>family</name></name> = <name>AF_INET</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>addr</name>.<name>inet</name>.<name>ip</name></name> = <call><name>PR_htonl</name><argument_list>(<argument><expr><name>INADDR_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>addr</name>.<name>inet</name>.<name>port</name></name> = <call><name>PR_htons</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>PR_Bind</name><argument_list>(<argument><expr><name>listenSock1</name></expr></argument>, <argument><expr>&amp;<name>addr</name></expr></argument>)</argument_list></call> == <name>PR_FAILURE</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Can't bind socket\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>failed_already</name>=1</expr>;</expr_stmt>
	<goto>goto <name>exit_now</name>;</goto>
    }</block></then></if>
    <if>if <condition>(<expr><call><name>PR_GetSockName</name><argument_list>(<argument><expr><name>listenSock1</name></expr></argument>, <argument><expr>&amp;<name>addr</name></expr></argument>)</argument_list></call> == <name>PR_FAILURE</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"PR_GetSockName failed\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>failed_already</name>=1</expr>;</expr_stmt>
	<goto>goto <name>exit_now</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><name>listenPort1</name> = <call><name>PR_ntohs</name><argument_list>(<argument><expr><name><name>addr</name>.<name>inet</name>.<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>PR_Listen</name><argument_list>(<argument><expr><name>listenSock1</name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == <name>PR_FAILURE</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Can't listen on a socket\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>failed_already</name>=1</expr>;</expr_stmt>
	<goto>goto <name>exit_now</name>;</goto>
    }</block></then></if>

    <if>if <condition>(<expr>(<name>listenSock2</name>  = <call><name>PR_NewTCPSocket</name><argument_list>()</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Can't create a new TCP socket\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>failed_already</name>=1</expr>;</expr_stmt>	
	<goto>goto <name>exit_now</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><name><name>addr</name>.<name>inet</name>.<name>family</name></name> = <name>AF_INET</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>addr</name>.<name>inet</name>.<name>ip</name></name> = <call><name>PR_htonl</name><argument_list>(<argument><expr><name>INADDR_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>addr</name>.<name>inet</name>.<name>port</name></name> = <call><name>PR_htons</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>PR_Bind</name><argument_list>(<argument><expr><name>listenSock2</name></expr></argument>, <argument><expr>&amp;<name>addr</name></expr></argument>)</argument_list></call> == <name>PR_FAILURE</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Can't bind socket\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>failed_already</name>=1</expr>;</expr_stmt>	
	<goto>goto <name>exit_now</name>;</goto>
    }</block></then></if>
    <if>if <condition>(<expr><call><name>PR_GetSockName</name><argument_list>(<argument><expr><name>listenSock2</name></expr></argument>, <argument><expr>&amp;<name>addr</name></expr></argument>)</argument_list></call> == <name>PR_FAILURE</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"PR_GetSockName failed\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>failed_already</name>=1</expr>;</expr_stmt>	
	<goto>goto <name>exit_now</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><name>listenPort2</name> = <call><name>PR_ntohs</name><argument_list>(<argument><expr><name><name>addr</name>.<name>inet</name>.<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>PR_Listen</name><argument_list>(<argument><expr><name>listenSock2</name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == <name>PR_FAILURE</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Can't listen on a socket\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>failed_already</name>=1</expr>;</expr_stmt>	
	<goto>goto <name>exit_now</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><call><name>PR_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
	    <argument><expr>"The server thread is listening on ports %hu and %hu\n\n"</expr></argument>,
	    <argument><expr><name>listenPort1</name></expr></argument>, <argument><expr><name>listenPort2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>debug_mode</name></expr>)</condition><then> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"%s"</expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <comment type="block">/* Set up the poll descriptor array */</comment>
    <expr_stmt><expr><name>pds</name> = <name>pds0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>other_pds</name> = <name>pds1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pds</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pds</name><index>[<expr>0</expr>]</index></name>.<name>fd</name> = <name>listenSock1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pds</name><index>[<expr>0</expr>]</index></name>.<name>in_flags</name> = <name>PR_POLL_READ</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pds</name><index>[<expr>1</expr>]</index></name>.<name>fd</name> = <name>listenSock2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pds</name><index>[<expr>1</expr>]</index></name>.<name>in_flags</name> = <name>PR_POLL_READ</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>npds</name> = 2</expr>;</expr_stmt>


    <comment type="block">/* Testing bad fd */</comment>
    <if>if <condition>(<expr><name>debug_mode</name></expr>)</condition><then> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"PR_Poll should detect a bad file descriptor\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr>(<name>badFD</name> = <call><name>PR_NewTCPSocket</name><argument_list>()</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Can't create a TCP socket\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<goto>goto <name>exit_now</name>;</goto>
    }</block></then></if>

    <expr_stmt><expr><name><name>pds</name><index>[<expr>2</expr>]</index></name>.<name>fd</name> = <name>badFD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pds</name><index>[<expr>2</expr>]</index></name>.<name>in_flags</name> = <name>PR_POLL_READ</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>npds</name> = 3</expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>PR_CreateThread</name><argument_list>(<argument><expr><name>PR_USER_THREAD</name></expr></argument>, <argument><expr><name>ClientThreadFunc</name></expr></argument>,
            <argument><expr><name>badFD</name></expr></argument>, <argument><expr><name>PR_PRIORITY_NORMAL</name></expr></argument>, <argument><expr><name>PR_LOCAL_THREAD</name></expr></argument>,
            <argument><expr><name>PR_UNJOINABLE_THREAD</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"cannot create thread\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>retVal</name> = <call><name>PR_Poll</name><argument_list>(<argument><expr><name>pds</name></expr></argument>, <argument><expr><name>npds</name></expr></argument>, <argument><expr><name>PR_INTERVAL_NO_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>retVal</name> != 1 || (<name>unsigned</name> <name>short</name>) <name><name>pds</name><index>[<expr>2</expr>]</index></name>.<name>out_flags</name> != <name>PR_POLL_NVAL</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Failed to detect the bad fd: "
		"PR_Poll returns %d, out_flags is 0x%hx\n"</expr></argument>,
		<argument><expr><name>retVal</name></expr></argument>, <argument><expr><name><name>pds</name><index>[<expr>2</expr>]</index></name>.<name>out_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>failed_already</name>=1</expr>;</expr_stmt>	
	<goto>goto <name>exit_now</name>;</goto>
    }</block></then></if>
    <if>if <condition>(<expr><name>debug_mode</name></expr>)</condition><then> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"PR_Poll detected the bad fd.  Test passed.\n\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>PR_Cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<goto>goto <name>exit_now</name>;</goto>
<label><name>exit_now</name>:</label>
	<if>if<condition>(<expr><name>failed_already</name></expr>)</condition><then>	
		<return>return <expr>1</expr>;</return></then>
	<else>else
		<return>return <expr>0</expr>;</return></else></if>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* XP_BEOS */</comment>
</unit>
