<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="00565fb268df5eb14560ec49f80b8cc6e43936aa.h"><comment type="block">/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Darin Fisher &lt;darin@netscape.com&gt; (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>nsHttpRequestHead_h__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nsHttpRequestHead_h__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsHttp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsHttpHeaderArray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCRT.h"</cpp:file></cpp:include>

<comment type="line">//-----------------------------------------------------------------------------</comment>
<comment type="line">// nsHttpRequestHead represents the request line and headers from an HTTP</comment>
<comment type="line">// request.</comment>
<comment type="line">//-----------------------------------------------------------------------------</comment>

<decl_stmt><decl><type><name>class</name></type> <name>nsHttpRequestHead</name>
<block>{
<label><name>public</name>:</label>
    <expr_stmt><expr><call><name>nsHttpRequestHead</name><argument_list>()</argument_list></call> : <call><name>mMethod</name><argument_list>(<argument><expr><name>nsHttp</name>::<name>Get</name></expr></argument>)</argument_list></call></expr>, <macro><name>mVersion</name><argument_list>(<argument>NS_HTTP_VERSION_1_1</argument>)</argument_list></macro> <expr><block>{}</block>
   ~<macro><name>nsHttpRequestHead</name><argument_list>()</argument_list></macro> <block>{}</block>

    <name>void</name> <macro><name>SetMethod</name><argument_list>(<argument>nsHttpAtom method</argument>)</argument_list></macro> <block>{ <expr><name>mMethod</name> = <name>method</name></expr>; }</block>
    <name>void</name> <macro><name>SetVersion</name><argument_list>(<argument>nsHttpVersion version</argument>)</argument_list></macro> <block>{ <expr><name>mVersion</name> = <name>version</name></expr>; }</block>
    <name>void</name> <macro><name>SetRequestURI</name><argument_list>(<argument>const nsCSubstring &amp;s</argument>)</argument_list></macro> <block>{ <expr><name>mRequestURI</name> = <name>s</name></expr>; }</block>

    <name>nsHttpHeaderArray</name>  &amp;<macro><name>Headers</name><argument_list>()</argument_list></macro>    <block>{ <return>return <expr><name>mHeaders</name></expr>;</return> }</block></expr></expr_stmt>
    <function><type><name>nsHttpAtom</name></type>          <name>Method</name><parameter_list>()</parameter_list>     <block>{ <return>return <expr><name>mMethod</name></expr>;</return> }</block></function>
    <function><type><name>nsHttpVersion</name></type>       <name>Version</name><parameter_list>()</parameter_list>    <block>{ <return>return <expr><name>mVersion</name></expr>;</return> }</block></function>
    <function><type><specifier>const</specifier> <name>nsCSubstring</name> &amp;</type><name>RequestURI</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>mRequestURI</name></expr>;</return> }</block></function>

    <function><type><specifier>const</specifier> <name>char</name> *</type><name>PeekHeader</name><parameter_list>(<param><decl><type><name>nsHttpAtom</name></type> <name>h</name></decl></param>)</parameter_list>                                     <block>{ <return>return <expr><call><name><name>mHeaders</name>.<name>PeekHeader</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function><type><name>nsresult</name></type> <name>SetHeader</name><parameter_list>(<param><decl><type><name>nsHttpAtom</name></type> <name>h</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsACString</name> &amp;</type><name>v</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>m</name><init>=<expr><name>PR_FALSE</name></expr></init></decl></param>)</parameter_list> <block>{ <return>return <expr><call><name><name>mHeaders</name>.<name>SetHeader</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function><type><name>nsresult</name></type> <name>GetHeader</name><parameter_list>(<param><decl><type><name>nsHttpAtom</name></type> <name>h</name></decl></param>, <param><decl><type><name>nsACString</name> &amp;</type><name>v</name></decl></param>)</parameter_list>                          <block>{ <return>return <expr><call><name><name>mHeaders</name>.<name>GetHeader</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function><type><name>void</name></type> <name>ClearHeader</name><parameter_list>(<param><decl><type><name>nsHttpAtom</name></type> <name>h</name></decl></param>)</parameter_list>                                           <block>{ <expr_stmt><expr><call><name><name>mHeaders</name>.<name>ClearHeader</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
    <function><type><name>void</name></type> <name>ClearHeaders</name><parameter_list>()</parameter_list>                                                      <block>{ <expr_stmt><expr><call><name><name>mHeaders</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></function>

    <function><type><specifier>const</specifier> <name>char</name> *</type><name>FindHeaderValue</name><parameter_list>(<param><decl><type><name>nsHttpAtom</name></type> <name>h</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{ <return>return <expr><call><name><name>mHeaders</name>.<name>FindHeaderValue</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function><type><name>PRBool</name></type>      <name>HasHeaderValue</name><parameter_list>(<param><decl><type><name>nsHttpAtom</name></type> <name>h</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{ <return>return <expr><call><name><name>mHeaders</name>.<name>HasHeaderValue</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

    <function_decl><type><name>void</name></type> <name>Flatten</name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type></decl></param>, <param><decl><type><name>PRBool</name></type> <name>pruneProxyHeaders</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl></param>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
    <decl_stmt><decl><type><name>nsHttpHeaderArray</name></type> <name>mHeaders</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsHttpAtom</name></type>        <name>mMethod</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsHttpVersion</name></type>     <name>mVersion</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsCString</name></type>         <name>mRequestURI</name></decl>;</decl_stmt>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// nsHttpRequestHead_h__</comment>
</unit>
