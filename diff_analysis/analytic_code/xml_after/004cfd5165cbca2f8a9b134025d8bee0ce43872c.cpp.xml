<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="004cfd5165cbca2f8a9b134025d8bee0ce43872c.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Mozilla Corporation
 * Portions created by the Initial Developer are Copyright (C) 2007
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Dave Camp &lt;dcamp@mozilla.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMOfflineResourceList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMClassInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMLists.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefetchService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCPrefetchService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNetUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNetCID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsICacheSession.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsICacheService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIOfflineCacheUpdate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMLoadStatus.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAutoPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIJSContextStack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsEventDispatcher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrivateDOMEvent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIObserverService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptGlobalObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIWebNavigation.h"</cpp:file></cpp:include>

<comment type="line">// Event names</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECKING_STR</name></cpp:macro>    <cpp:value>"checking"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_STR</name></cpp:macro>       <cpp:value>"error"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOUPDATE_STR</name></cpp:macro>    <cpp:value>"noupdate"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOWNLOADING_STR</name></cpp:macro> <cpp:value>"downloading"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROGRESS_STR</name></cpp:macro>    <cpp:value>"progress"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHED_STR</name></cpp:macro>      <cpp:value>"cached"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATEREADY_STR</name></cpp:macro> <cpp:value>"updateready"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBSOLETE_STR</name></cpp:macro>    <cpp:value>"obsolete"</cpp:value></cpp:define>

<comment type="line">// To prevent abuse of the resource list for data storage, the number</comment>
<comment type="line">// of offline urls and their length are limited.</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>kMaxEntriesPref</name><index>[]</index></name> <init>=  <expr>"offline.max_site_resources"</expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_MAX_ENTRIES</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_URI_LENGTH</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>

<comment type="line">//</comment>
<comment type="line">// nsDOMOfflineResourceList</comment>
<comment type="line">//</comment>

<macro><name>NS_IMPL_CYCLE_COLLECTION_CLASS</name><argument_list>(<argument>nsDOMOfflineResourceList</argument>)</argument_list></macro>

<macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN</name><argument_list>(<argument>nsDOMOfflineResourceList</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mWindow</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mCacheUpdate</argument>)</argument_list></macro>

  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMARRAY</name><argument_list>(<argument>mCheckingListeners</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMARRAY</name><argument_list>(<argument>mErrorListeners</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMARRAY</name><argument_list>(<argument>mNoUpdateListeners</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMARRAY</name><argument_list>(<argument>mDownloadingListeners</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMARRAY</name><argument_list>(<argument>mProgressListeners</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMARRAY</name><argument_list>(<argument>mCachedListeners</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMARRAY</name><argument_list>(<argument>mUpdateReadyListeners</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMARRAY</name><argument_list>(<argument>mObsoleteListeners</argument>)</argument_list></macro>

  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mOnCheckingListener</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mOnErrorListener</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mOnNoUpdateListener</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mOnDownloadingListener</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mOnProgressListener</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mOnCachedListener</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mOnUpdateReadyListener</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mOnObsoleteListener</argument>)</argument_list></macro>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>tmp</name>-&gt;<name>mPendingEvents</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
    <expr_stmt><expr><call><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument><expr><name><name>mPendingEvents</name><index>[<expr><name>i</name></expr>]</index></name>.<name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument><expr><name><name>mPendingEvents</name><index>[<expr><name>i</name></expr>]</index></name>.<name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMARRAY</name><argument_list>(<argument><expr><name><name>mPendingEvents</name><index>[<expr><name>i</name></expr>]</index></name>.<name>listeners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

<decl_stmt><decl><type><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END</name></type>

<name>NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN</name><argument_list>(<argument><expr><name>nsDOMOfflineResourceList</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument><expr><name>mWindow</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument><expr><name>mCacheUpdate</name></expr></argument>)</argument_list>

  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMARRAY</name><argument_list>(<argument><expr><name>mCheckingListeners</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMARRAY</name><argument_list>(<argument><expr><name>mErrorListeners</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMARRAY</name><argument_list>(<argument><expr><name>mNoUpdateListeners</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMARRAY</name><argument_list>(<argument><expr><name>mDownloadingListeners</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMARRAY</name><argument_list>(<argument><expr><name>mProgressListeners</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMARRAY</name><argument_list>(<argument><expr><name>mCachedListeners</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMARRAY</name><argument_list>(<argument><expr><name>mUpdateReadyListeners</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMARRAY</name><argument_list>(<argument><expr><name>mObsoleteListeners</name></expr></argument>)</argument_list>

  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument><expr><name>mOnCheckingListener</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument><expr><name>mOnErrorListener</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument><expr><name>mOnNoUpdateListener</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument><expr><name>mOnDownloadingListener</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument><expr><name>mOnProgressListener</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument><expr><name>mOnCachedListener</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument><expr><name>mOnUpdateReadyListener</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument><expr><name>mOnObsoleteListener</name></expr></argument>)</argument_list>

  for <argument_list>(<argument><expr><name>PRUint32</name> <name>i</name> = 0</expr></argument>; <argument><expr><name>i</name> &lt; <call><name><name>tmp</name>-&gt;<name>mPendingEvents</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></argument>; <argument><expr><name>i</name>++</expr></argument>)</argument_list> <argument_list>{
    <argument><expr><call><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument><expr><name><name>mPendingEvents</name><index>[<expr><name>i</name></expr>]</index></name>.<name>event</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument><expr><name><name>mPendingEvents</name><index>[<expr><name>i</name></expr>]</index></name>.<name>listener</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMARRAY</name><argument_list>(<argument><expr><name><name>mPendingEvents</name><index>[<expr><name>i</name></expr>]</index></name>.<name>listeners</name></expr></argument>)</argument_list></call></expr></argument>;
  }</argument_list>

<name>NS_IMPL_CYCLE_COLLECTION_UNLINK_END</name>

<name>NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION</name><argument_list>(<argument><expr><name>nsDOMOfflineResourceList</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY_AMBIGUOUS</name><argument_list>(<argument><expr><name>nsISupports</name></expr></argument>, <argument><expr><name>nsIDOMOfflineResourceList</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsIDOMOfflineResourceList</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsIOfflineCacheUpdateObserver</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsIDOMEventTarget</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsIObserver</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsISupportsWeakReference</name></expr></argument>)</argument_list>
  <name>NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO</name><argument_list>(<argument><expr><name>OfflineResourceList</name></expr></argument>)</argument_list>
<name>NS_INTERFACE_MAP_END</name>

<name>NS_IMPL_CYCLE_COLLECTING_ADDREF</name><argument_list>(<argument><expr><name>nsDOMOfflineResourceList</name></expr></argument>)</argument_list>
<name>NS_IMPL_CYCLE_COLLECTING_RELEASE</name><argument_list>(<argument><expr><name>nsDOMOfflineResourceList</name></expr></argument>)</argument_list>

<name><name>nsDOMOfflineResourceList</name>::<name>nsDOMOfflineResourceList</name></name><argument_list>(<argument><expr><name>nsIURI</name> *<name>aManifestURI</name></expr></argument>,
                                                   <argument><expr><name>nsIURI</name> *<name>aDocumentURI</name></expr></argument>,
                                                   <argument><expr><name>nsIDOMWindow</name> *<name>aWindow</name></expr></argument>)</argument_list>
  <range>: <expr><call><name>mInitialized</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></range>
  , <name>mManifestURI</name><argument_list>(<argument><expr><name>aManifestURI</name></expr></argument>)</argument_list></decl>
  , <decl><type ref="prev"/><name>mDocumentURI</name><argument_list>(<argument><expr><name>aDocumentURI</name></expr></argument>)</argument_list></decl>
  , <decl><type ref="prev"/><name>mCachedKeys</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></decl>
  , <decl><type ref="prev"/><name>mCachedKeysCount</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list>
<argument_list>{
  <argument><expr><name>mWindow</name> = <call><name>do_GetWeakReference</name><argument_list>(<argument><expr><name>aWindow</name></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

<name><name>nsDOMOfflineResourceList</name>::~<name>nsDOMOfflineResourceList</name></name><argument_list>()</argument_list>
<argument_list>{
  <argument><expr><call><name>ClearCachedKeys</name><argument_list>()</argument_list></call></expr></argument>;
}</argument_list>

<name>nsresult</name>
<name><name>nsDOMOfflineResourceList</name>::<name>Init</name></name><argument_list>()</argument_list>
<argument_list>{
  if <argument><expr>(<name>mInitialized</name>) <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></expr></argument>

  <if>if <condition>(<expr>!<name>mManifestURI</name></expr>)</condition><then> <expr_stmt><expr><block>{
    <return>return <expr><name>NS_ERROR_DOM_INVALID_STATE_ERR</name></expr>;</return>
  }</block>

  <call><name><name>mManifestURI</name>-&gt;<name>GetAsciiSpec</name></name><argument_list>(<argument><expr><name>mManifestSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></argument_list></decl></decl_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>GetSecurityManager</name></name><argument_list>()</argument_list></call>-&gt;
                   <call><name>CheckSameOriginURI</name><argument_list>(<argument><expr><name>mManifestURI</name></expr></argument>, <argument><expr><name>mDocumentURI</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Dynamically-managed resources are stored as a separate ownership list</comment>
  <comment type="line">// from the manifest.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>innerURI</name> <init>= <expr><call><name>NS_GetInnermostURI</name><argument_list>(<argument><expr><name>mDocumentURI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>innerURI</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <expr_stmt><expr><name>mApplicationCacheService</name> =
    <call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_APPLICATIONCACHESERVICE_CONTRACTID</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Check for in-progress cache updates</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIOfflineCacheUpdateService</name></expr></argument>&gt;</argument_list></name></type> <name>cacheUpdateService</name> <init>=
    <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_OFFLINECACHEUPDATESERVICE_CONTRACTID</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>numUpdates</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>cacheUpdateService</name>-&gt;<name>GetNumUpdates</name></name><argument_list>(<argument><expr>&amp;<name>numUpdates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>numUpdates</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIOfflineCacheUpdate</name></expr></argument>&gt;</argument_list></name></type> <name>cacheUpdate</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>cacheUpdateService</name>-&gt;<name>GetUpdate</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>cacheUpdate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>UpdateAdded</name><argument_list>(<argument><expr><name>cacheUpdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <comment type="line">// watch for new offline cache updates</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIObserverService</name></expr></argument>&gt;</argument_list></name></type> <name>observerServ</name> <init>=
    <expr><call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/observer-service;1"</expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rv</name> = <call><name><name>observerServ</name>-&gt;<name>AddObserver</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>"offline-cache-update-added"</expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>observerServ</name>-&gt;<name>AddObserver</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>"offline-cache-update-completed"</expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mInitialized</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}

void
<macro><name>nsDOMOfflineResourceList</name></macro><expr_stmt><expr><name>::<name>Disconnect</name></name>()
<block>{
  <expr><call><name><name>mCheckingListeners</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name><name>mErrorListeners</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name><name>mNoUpdateListeners</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name><name>mDownloadingListeners</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name><name>mProgressListeners</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name><name>mCachedListeners</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name><name>mUpdateReadyListeners</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name><name>mObsoleteListeners</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;

  <expr><name>mOnCheckingListener</name> = <name>nsnull</name></expr>;
  <expr><name>mOnErrorListener</name> = <name>nsnull</name></expr>;
  <expr><name>mOnNoUpdateListener</name> = <name>nsnull</name></expr>;
  <expr><name>mOnDownloadingListener</name> = <name>nsnull</name></expr>;
  <expr><name>mOnProgressListener</name> = <name>nsnull</name></expr>;
  <expr><name>mOnCachedListener</name> = <name>nsnull</name></expr>;
  <expr><name>mOnUpdateReadyListener</name> = <name>nsnull</name></expr>;
  <expr><name>mOnObsoleteListener</name> = <name>nsnull</name></expr>;

  <expr><call><name><name>mPendingEvents</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<comment type="line">//</comment>
<comment type="line">// nsDOMOfflineResourceList::nsIDOMOfflineResourceList</comment>
<comment type="line">//</comment>

<name>NS_IMETHODIMP</name>
<macro><name>nsDOMOfflineResourceList</name></macro><name>::<name>GetItems</name></name>(<name>nsIDOMDOMStringList</name> **<name>aItems</name>)
<block>{
  <expr>*<name>aItems</name> = <name>nsnull</name></expr>;

  <expr><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsDOMStringList</name></expr></argument>&gt;</argument_list></name> <name>items</name> = new <call><name>nsDOMStringList</name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// If we are not associated with an application cache, return an</comment>
  <comment type="line">// empty list.</comment>
  <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIApplicationCache</name></expr></argument>&gt;</argument_list></name> <name>appCache</name> = <call><name>GetDocumentAppCache</name><argument_list>()</argument_list></call></expr>;
  <if>if <condition>(<expr>!<name>appCache</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aItems</name> = <name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  <expr_stmt/></block></then></if>}</block>

  <name>nsresult</name> <name>rv</name> = <call><name>Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>length</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> **</type><name>keys</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>appCache</name>-&gt;<name>GatherEntries</name></name><argument_list>(<argument><expr><name><name>nsIApplicationCache</name>::<name>ITEM_DYNAMIC</name></name></expr></argument>,
                               <argument><expr>&amp;<name>length</name></expr></argument>, <argument><expr>&amp;<name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
    <expr_stmt><expr><call><name><name>items</name>-&gt;<name>Add</name></name><argument_list>(<argument><expr><call><name>NS_ConvertUTF8toUTF16</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <expr_stmt><expr><call><name>NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aItems</name> = <name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsDOMOfflineResourceList</name></macro><expr_stmt><expr><name>::<name>HasItem</name></name>(const <name>nsAString</name>&amp; <name>aURI</name>, <name>PRBool</name>* <name>aExists</name>)
<block>{
  <expr><name>nsresult</name> <name>rv</name> = <call><name>Init</name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;

  <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIApplicationCache</name></expr></argument>&gt;</argument_list></name> <name>appCache</name> = <call><name>GetDocumentAppCache</name><argument_list>()</argument_list></call></expr>;
  <if>if <condition>(<expr>!<name>appCache</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_DOM_INVALID_STATE_ERR</name></expr>;</return>
  <expr_stmt/></block></then></if>}</block>

  <name>nsCAutoString</name> <name>key</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name>GetCacheKey</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>types</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>appCache</name>-&gt;<name>GetTypes</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>&amp;<name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>rv</name> == <name>NS_ERROR_CACHE_KEY_NOT_FOUND</name></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aExists</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aExists</name> = ((<name>types</name> &amp; <name><name>nsIApplicationCache</name>::<name>ITEM_DYNAMIC</name></name>) != 0)</expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsDOMOfflineResourceList</name></macro><expr_stmt><expr><name>::<name>GetLength</name></name>(<name>PRUint32</name> *<name>aLength</name>)
<block>{
  <if>if <condition>(<expr>!<name>mManifestURI</name></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aLength</name> = 0</expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  <expr_stmt/></block></then></if>}</block>

  <name>nsresult</name> <name>rv</name> = <call><name>Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rv</name> = <call><name>CacheKeys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aLength</name> = <name>mCachedKeysCount</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsDOMOfflineResourceList</name></macro><expr_stmt><expr><name>::<name>Item</name></name>(<name>PRUint32</name> <name>aIndex</name>, <name>nsAString</name>&amp; <name>aURI</name>)
<block>{
  <expr><name>nsresult</name> <name>rv</name> = <call><name>Init</name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;

  <expr><call><name>SetDOMStringToNull</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>rv</name> = <call><name>CacheKeys</name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;

  <if>if <condition>(<expr><name>aIndex</name> &gt;= <name>mCachedKeysCount</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_NOT_AVAILABLE</name></expr>;</return></then></if>

  <call><name>CopyUTF8toUTF16</name><argument_list>(<argument><expr><name><name>mCachedKeys</name><index>[<expr><name>aIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>aURI</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsDOMOfflineResourceList</name></macro><expr_stmt><expr><name>::<name>Add</name></name>(const <name>nsAString</name>&amp; <name>aURI</name>)
<block>{
  <expr><name>nsresult</name> <name>rv</name> = <call><name>Init</name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;

  <if>if <condition>(<expr>!<call><name><name>nsContentUtils</name>::<name>OfflineAppAllowed</name></name><argument_list>(<argument><expr><name>mDocumentURI</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_DOM_SECURITY_ERR</name></expr>;</return>
  <expr_stmt/></block></then></if>}</block>

  <name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIApplicationCache</name></expr></argument>&gt;</argument_list></name> <name>appCache</name> = <call><name>GetDocumentAppCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>appCache</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_DOM_INVALID_STATE_ERR</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><call><name><name>aURI</name>.<name>Length</name></name><argument_list>()</argument_list></call> &gt; <name>MAX_URI_LENGTH</name></expr>)</condition><then> <return>return <expr><name>NS_ERROR_DOM_BAD_URI</name></expr>;</return></then></if>

  <comment type="line">// this will fail if the URI is not absolute</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>requestedURI</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name>NS_NewURI</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>requestedURI</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>scheme</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>requestedURI</name>-&gt;<name>GetScheme</name></name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>match</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>mManifestURI</name>-&gt;<name>SchemeIs</name></name><argument_list>(<argument><expr><call><name><name>scheme</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>match</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_DOM_SECURITY_ERR</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>length</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name>GetLength</name><argument_list>(<argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>maxEntries</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>GetIntPref</name></name><argument_list>(<argument><expr><name>kMaxEntriesPref</name></expr></argument>,
                                                   <argument><expr><name>DEFAULT_MAX_ENTRIES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>length</name> &gt; <name>maxEntries</name></expr>)</condition><then> <return>return <expr><name>NS_ERROR_NOT_AVAILABLE</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>ClearCachedKeys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIOfflineCacheUpdate</name></expr></argument>&gt;</argument_list></name></type> <name>update</name> <init>=
    <expr><call><name>do_CreateInstance</name><argument_list>(<argument><expr><name>NS_OFFLINECACHEUPDATE_CONTRACTID</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>clientID</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>appCache</name>-&gt;<name>GetClientID</name></name><argument_list>(<argument><expr><name>clientID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rv</name> = <call><name><name>update</name>-&gt;<name>InitPartial</name></name><argument_list>(<argument><expr><name>mManifestURI</name></expr></argument>, <argument><expr><name>clientID</name></expr></argument>, <argument><expr><name>mDocumentURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rv</name> = <call><name><name>update</name>-&gt;<name>AddDynamicURI</name></name><argument_list>(<argument><expr><name>requestedURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rv</name> = <call><name><name>update</name>-&gt;<name>Schedule</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsDOMOfflineResourceList</name></macro><expr_stmt><expr><name>::<name>Remove</name></name>(const <name>nsAString</name>&amp; <name>aURI</name>)
<block>{
  <expr><name>nsresult</name> <name>rv</name> = <call><name>Init</name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;

  <if>if <condition>(<expr>!<call><name><name>nsContentUtils</name>::<name>OfflineAppAllowed</name></name><argument_list>(<argument><expr><name>mDocumentURI</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_DOM_SECURITY_ERR</name></expr>;</return>
  <expr_stmt/></block></then></if>}</block>

  <name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIApplicationCache</name></expr></argument>&gt;</argument_list></name> <name>appCache</name> = <call><name>GetDocumentAppCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>appCache</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_DOM_INVALID_STATE_ERR</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>key</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name>GetCacheKey</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ClearCachedKeys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// XXX: This is a race condition.  remove() is specced to remove</comment>
  <comment type="line">// from the currently associated application cache, but if this</comment>
  <comment type="line">// happens during an update (or after an update, if we haven't</comment>
  <comment type="line">// swapped yet), that remove() will be lost when the next update is</comment>
  <comment type="line">// finished.  Need to bring this issue up.</comment>

  <expr_stmt><expr><name>rv</name> = <call><name><name>appCache</name>-&gt;<name>UnmarkEntry</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>nsIApplicationCache</name>::<name>ITEM_DYNAMIC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsDOMOfflineResourceList</name></macro><expr_stmt><expr><name>::<name>GetStatus</name></name>(<name>PRUint16</name> *<name>aStatus</name>)
<block>{
  <expr><name>nsresult</name> <name>rv</name> = <call><name>Init</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Init may fail with INVALID_STATE_ERR if there is no manifest URI.</comment>
  <comment type="line">// The status attribute should not throw that exception, convert it</comment>
  <comment type="line">// to an UNCACHED.</comment>
  <if>if <condition>(<expr><name>rv</name> == <name>NS_ERROR_DOM_INVALID_STATE_ERR</name> ||
      !<call><name><name>nsContentUtils</name>::<name>OfflineAppAllowed</name></name><argument_list>(<argument><expr><name>mDocumentURI</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aStatus</name> = <name><name>nsIDOMOfflineResourceList</name>::<name>UNCACHED</name></name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  <expr_stmt/></block></then></if>}</block>

  <call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// If there is an update in process, use its status.</comment>
  <if>if <condition>(<expr><name>mCacheUpdate</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rv</name> = <call><name><name>mCacheUpdate</name>-&gt;<name>GetStatus</name></name><argument_list>(<argument><expr><name>aStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aStatus</name> != <name><name>nsIDOMOfflineResourceList</name>::<name>IDLE</name></name></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <comment type="line">// If this object is not associated with a cache, return UNCACHED</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIApplicationCache</name></expr></argument>&gt;</argument_list></name></type> <name>appCache</name> <init>= <expr><call><name>GetDocumentAppCache</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>appCache</name></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aStatus</name> = <name><name>nsIDOMOfflineResourceList</name>::<name>UNCACHED</name></name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIApplicationCache</name></expr></argument>&gt;</argument_list></name></type> <name>activeCache</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>mApplicationCacheService</name>-&gt;<name>GetActiveCache</name></name><argument_list>(<argument><expr><name>mManifestSpec</name></expr></argument>,
                                                <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>activeCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>activeCache</name> == <name>nsnull</name></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aStatus</name> = <name><name>nsIDOMOfflineResourceList</name>::<name>OBSOLETE</name></name></expr>;</expr_stmt>
  }</block></then> <else>else <if>if <condition>(<expr><name>appCache</name> == <name>activeCache</name></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aStatus</name> = <name><name>nsIDOMOfflineResourceList</name>::<name>IDLE</name></name></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr>*<name>aStatus</name> = <name><name>nsIDOMOfflineResourceList</name>::<name>UPDATEREADY</name></name></expr>;</expr_stmt>
  }</block></else></if></else></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsDOMOfflineResourceList</name></macro><expr_stmt><expr><name>::<name>Update</name></name>()
<block>{
  <expr><name>nsresult</name> <name>rv</name> = <call><name>Init</name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;

  <if>if <condition>(<expr>!<call><name><name>nsContentUtils</name>::<name>OfflineAppAllowed</name></name><argument_list>(<argument><expr><name>mDocumentURI</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_DOM_SECURITY_ERR</name></expr>;</return>
  <expr_stmt/></block></then></if>}</block>

  <name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIOfflineCacheUpdateService</name></expr></argument>&gt;</argument_list></name> <name>updateService</name> =
    <call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_OFFLINECACHEUPDATESERVICE_CONTRACTID</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIOfflineCacheUpdate</name></expr></argument>&gt;</argument_list></name></type> <name>update</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>updateService</name>-&gt;<name>ScheduleUpdate</name></name><argument_list>(<argument><expr><name>mManifestURI</name></expr></argument>, <argument><expr><name>mDocumentURI</name></expr></argument>,
                                     <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>update</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsDOMOfflineResourceList</name></macro><expr_stmt><expr><name>::<name>SwapCache</name></name>()
<block>{
  <expr><name>nsresult</name> <name>rv</name> = <call><name>Init</name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;

  <if>if <condition>(<expr>!<call><name><name>nsContentUtils</name>::<name>OfflineAppAllowed</name></name><argument_list>(<argument><expr><name>mDocumentURI</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_DOM_SECURITY_ERR</name></expr>;</return>
  <expr_stmt/></block></then></if>}</block>

  <name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIApplicationCacheService</name></expr></argument>&gt;</argument_list></name> <name>serv</name> =
    <call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_APPLICATIONCACHESERVICE_CONTRACTID</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIApplicationCache</name></expr></argument>&gt;</argument_list></name></type> <name>currentAppCache</name> <init>= <expr><call><name>GetDocumentAppCache</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIApplicationCache</name></expr></argument>&gt;</argument_list></name></type> <name>newAppCache</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>serv</name>-&gt;<name>GetActiveCache</name></name><argument_list>(<argument><expr><name>mManifestSpec</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>newAppCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// In the case of an obsolete cache group, newAppCache might be null.</comment>
  <comment type="line">// We will disassociate from the cache in that case.</comment>

  <if>if <condition>(<expr><name>newAppCache</name> == <name>currentAppCache</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_DOM_INVALID_STATE_ERR</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>ClearCachedKeys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIApplicationCacheContainer</name></expr></argument>&gt;</argument_list></name></type> <name>appCacheContainer</name> <init>=
    <expr><call><name>GetDocumentAppCacheContainer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>appCacheContainer</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rv</name> = <call><name><name>appCacheContainer</name>-&gt;<name>SetApplicationCache</name></name><argument_list>(<argument><expr><name>newAppCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}

<comment type="line">//</comment>
<comment type="line">// nsDOMOfflineResourceList::nsIDOMEventTarget</comment>
<comment type="line">//</comment>

NS_IMETHODIMP
<macro><name>nsDOMOfflineResourceList</name></macro><expr_stmt><expr><name>::<name>GetOnchecking</name></name>(<name>nsIDOMEventListener</name> **<name>aOnchecking</name>)
<block>{
  <expr><name>nsresult</name> <name>rv</name> = <call><name>Init</name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;

  <expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aOnchecking</name></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aOnchecking</name> = <name>mOnCheckingListener</name></expr></argument>)</argument_list></call></expr>;
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>SetOnchecking</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventListener</name> *</type><name>aOnchecking</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>Init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mOnCheckingListener</name> = <name>aOnchecking</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>GetOnerror</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventListener</name> **</type><name>aOnerror</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>Init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aOnerror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aOnerror</name> = <name>mOnErrorListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>SetOnerror</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventListener</name> *</type><name>aOnerror</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>Init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mOnErrorListener</name> = <name>aOnerror</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>GetOnnoupdate</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventListener</name> **</type><name>aOnnoupdate</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>Init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aOnnoupdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aOnnoupdate</name> = <name>mOnNoUpdateListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>SetOnnoupdate</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventListener</name> *</type><name>aOnnoupdate</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>Init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mOnNoUpdateListener</name> = <name>aOnnoupdate</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>GetOndownloading</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventListener</name> **</type><name>aOndownloading</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>Init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aOndownloading</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aOndownloading</name> = <name>mOnDownloadingListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>SetOndownloading</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventListener</name> *</type><name>aOndownloading</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>Init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mOnDownloadingListener</name> = <name>aOndownloading</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>GetOnprogress</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventListener</name> **</type><name>aOnprogress</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>Init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aOnprogress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aOnprogress</name> = <name>mOnProgressListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>SetOnprogress</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventListener</name> *</type><name>aOnprogress</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>Init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mOnProgressListener</name> = <name>aOnprogress</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>GetOnupdateready</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventListener</name> **</type><name>aOnupdateready</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>Init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aOnupdateready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aOnupdateready</name> = <name>mOnUpdateReadyListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>SetOncached</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventListener</name> *</type><name>aOncached</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>Init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mOnCachedListener</name> = <name>aOncached</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>GetOncached</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventListener</name> **</type><name>aOncached</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>Init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aOncached</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aOncached</name> = <name>mOnCachedListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>SetOnupdateready</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventListener</name> *</type><name>aOnupdateready</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>Init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mOnUpdateReadyListener</name> = <name>aOnupdateready</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>GetOnobsolete</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventListener</name> **</type><name>aOnobsolete</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>Init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aOnobsolete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aOnobsolete</name> = <name>mOnObsoleteListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>SetOnobsolete</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventListener</name> *</type><name>aOnobsolete</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>Init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mOnObsoleteListener</name> = <name>aOnobsolete</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>AddEventListener</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aType</name></decl></param>,
                                           <param><decl><type><name>nsIDOMEventListener</name> *</type><name>aListener</name></decl></param>,
                                           <param><decl><type><name>PRBool</name></type> <name>aUseCapture</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>Init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ENSURE_ARG</name><argument_list>(<argument><expr><name>aListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsIDOMEventListener</name></expr></argument>&gt;</argument_list></name> *</type><name>array</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPL_ADD_LISTENER</name><parameter_list>(<param><type><name>_type</name></type></param>, <param><type><name>_member</name></type></param>)</parameter_list></cpp:macro>    \
  <cpp:value>if (aType.EqualsLiteral(_type)) {           \
    array = &amp;(_member);                      \
  } else</cpp:value></cpp:define>

  <macro><name>IMPL_ADD_LISTENER</name><argument_list>(<argument>CHECKING_STR</argument>, <argument>mCheckingListeners</argument>)</argument_list></macro>
  <macro><name>IMPL_ADD_LISTENER</name><argument_list>(<argument>ERROR_STR</argument>, <argument>mErrorListeners</argument>)</argument_list></macro>
  <macro><name>IMPL_ADD_LISTENER</name><argument_list>(<argument>NOUPDATE_STR</argument>, <argument>mNoUpdateListeners</argument>)</argument_list></macro>
  <macro><name>IMPL_ADD_LISTENER</name><argument_list>(<argument>DOWNLOADING_STR</argument>, <argument>mDownloadingListeners</argument>)</argument_list></macro>
  <macro><name>IMPL_ADD_LISTENER</name><argument_list>(<argument>PROGRESS_STR</argument>, <argument>mProgressListeners</argument>)</argument_list></macro>
  <macro><name>IMPL_ADD_LISTENER</name><argument_list>(<argument>CACHED_STR</argument>, <argument>mCachedListeners</argument>)</argument_list></macro>
  <macro><name>IMPL_ADD_LISTENER</name><argument_list>(<argument>UPDATEREADY_STR</argument>, <argument>mUpdateReadyListeners</argument>)</argument_list></macro>
  <macro><name>IMPL_ADD_LISTENER</name><argument_list>(<argument>OBSOLETE_STR</argument>, <argument>mObsoleteListeners</argument>)</argument_list></macro>
  <block>{
    <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return>
  }</block>

  <expr_stmt><expr><call><name><name>array</name>-&gt;<name>AppendObject</name></name><argument_list>(<argument><expr><name>aListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IMPL_ADD_LISTENER</name></cpp:undef>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>RemoveEventListener</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aType</name></decl></param>,
                                              <param><decl><type><name>nsIDOMEventListener</name> *</type><name>aListener</name></decl></param>,
                                              <param><decl><type><name>PRBool</name></type> <name>aUseCapture</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>Init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ENSURE_ARG</name><argument_list>(<argument><expr><name>aListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsIDOMEventListener</name></expr></argument>&gt;</argument_list></name> *</type><name>array</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPL_REMOVE_LISTENER</name><parameter_list>(<param><type><name>_type</name></type></param>, <param><type><name>_member</name></type></param>)</parameter_list></cpp:macro>  \
  <cpp:value>if (aType.EqualsLiteral(_type)) {            \
    array = &amp;(_member);                       \
  } else</cpp:value></cpp:define>

  <macro><name>IMPL_REMOVE_LISTENER</name><argument_list>(<argument>CHECKING_STR</argument>, <argument>mCheckingListeners</argument>)</argument_list></macro>
  <macro><name>IMPL_REMOVE_LISTENER</name><argument_list>(<argument>ERROR_STR</argument>, <argument>mErrorListeners</argument>)</argument_list></macro>
  <macro><name>IMPL_REMOVE_LISTENER</name><argument_list>(<argument>NOUPDATE_STR</argument>, <argument>mNoUpdateListeners</argument>)</argument_list></macro>
  <macro><name>IMPL_REMOVE_LISTENER</name><argument_list>(<argument>DOWNLOADING_STR</argument>, <argument>mDownloadingListeners</argument>)</argument_list></macro>
  <macro><name>IMPL_REMOVE_LISTENER</name><argument_list>(<argument>PROGRESS_STR</argument>, <argument>mProgressListeners</argument>)</argument_list></macro>
  <macro><name>IMPL_REMOVE_LISTENER</name><argument_list>(<argument>CACHED_STR</argument>, <argument>mCachedListeners</argument>)</argument_list></macro>
  <macro><name>IMPL_REMOVE_LISTENER</name><argument_list>(<argument>UPDATEREADY_STR</argument>, <argument>mUpdateReadyListeners</argument>)</argument_list></macro>
  <macro><name>IMPL_REMOVE_LISTENER</name><argument_list>(<argument>OBSOLETE_STR</argument>, <argument>mObsoleteListeners</argument>)</argument_list></macro>
  <block>{
    <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return>
  }</block>

  <comment type="line">// Allow a caller to remove O(N^2) behavior by removing end-to-start.</comment>
  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr><call><name><name>array</name>-&gt;<name>Count</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</init> <condition><expr><name>i</name> != <call><name>PRUint32</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>--<name>i</name></expr></incr>) <block>{
    <if>if <condition>(<expr><call><name><name>array</name>-&gt;<name>ObjectAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> == <name>aListener</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>array</name>-&gt;<name>RemoveObjectAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    }</block></then></if>
  }</block></for>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IMPL_REMOVE_LISTENER</name></cpp:undef>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>DispatchEvent</name></name><parameter_list>(<param><decl><type><name>nsIDOMEvent</name> *</type><name>evt</name></decl></param>, <param><decl><type><name>PRBool</name> *</type><name>_retval</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Ignored</comment>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>NotifyEventListeners</name></name><parameter_list>(<param><decl><type><name>nsIDOMEventListener</name> *</type><name>aListener</name></decl></param>,
                                               <param><decl><type><specifier>const</specifier> <name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsIDOMEventListener</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aListeners</name></decl></param>,
                                               <param><decl><type><name>nsIDOMEvent</name>*</type> <name>aEvent</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// XXXbz wouldn't it be easier to just have an actual nsEventListenerManager</comment>
  <comment type="line">// to work with or something?  I feel like we're duplicating code here...</comment>
  <comment type="line">//</comment>
  <comment type="line">// (and this was duplicated from XMLHttpRequest)</comment>
  <if>if <condition>(<expr>!<name>aEvent</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIJSContextStack</name></expr></argument>&gt;</argument_list></name></type> <name>stack</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScriptGlobalObject</name></expr></argument>&gt;</argument_list></name></type> <name>scriptGlobal</name> <init>= <expr><call><name>do_QueryReferent</name><argument_list>(<argument><expr><name>mWindow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>scriptGlobal</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScriptContext</name></expr></argument>&gt;</argument_list></name></type> <name>context</name> <init>= <expr><call><name><name>scriptGlobal</name>-&gt;<name>GetContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>context</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>stack</name> = <call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/js/xpc/ContextStack;1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>stack</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>cx</name> = (<name>JSContext</name> *)<call><name><name>context</name>-&gt;<name>GetNativeContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>cx</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>stack</name>-&gt;<name>Push</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>

  <if>if <condition>(<expr><name>aListener</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>aListener</name>-&gt;<name>HandleEvent</name></name><argument_list>(<argument><expr><name>aEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>count</name> <init>= <expr><call><name><name>aListeners</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for (<init><decl><type><name>PRInt32</name></type> <name>index</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>index</name> &lt; <name>count</name></expr>;</condition> <incr><expr>++<name>index</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsIDOMEventListener</name>*</type> <name>listener</name> <init>= <expr><name><name>aListeners</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>listener</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>listener</name>-&gt;<name>HandleEvent</name></name><argument_list>(<argument><expr><name>aEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>

  <if>if <condition>(<expr><name>cx</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>stack</name>-&gt;<name>Pop</name></name><argument_list>(<argument><expr>&amp;<name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>FirePendingEvents</name></name><parameter_list>()</parameter_list>
<block>{
  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>mPendingEvents</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>PendingEvent</name> &amp;</type><name>pending</name> <init>= <expr><name><name>mPendingEvents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NotifyEventListeners</name><argument_list>(<argument><expr><name><name>pending</name>.<name>listener</name></name></expr></argument>, <argument><expr><name><name>pending</name>.<name>listeners</name></name></expr></argument>, <argument><expr><name><name>pending</name>.<name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><call><name><name>mPendingEvents</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>SendEvent</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aEventName</name></decl></param>,
                                    <param><decl><type><name>nsIDOMEventListener</name> *</type><name>aListener</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsIDOMEventListener</name></expr></argument>&gt;</argument_list></name> &amp;</type><name>aListeners</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>aListener</name> &amp;&amp; <call><name><name>aListeners</name>.<name>Count</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// Don't send events to closed windows</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsPIDOMWindow</name></expr></argument>&gt;</argument_list></name></type> <name>window</name> <init>= <expr><call><name>do_QueryReferent</name><argument_list>(<argument><expr><name>mWindow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>window</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr>!<call><name><name>window</name>-&gt;<name>GetDocShell</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMEvent</name></expr></argument>&gt;</argument_list></name></type> <name>event</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsEventDispatcher</name>::<name>CreateEvent</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                                               <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"Events"</expr></argument>)</argument_list></call></expr></argument>,
                                               <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrivateDOMEvent</name></expr></argument>&gt;</argument_list></name></type> <name>privevent</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>privevent</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>event</name>-&gt;<name>InitEvent</name></name><argument_list>(<argument><expr><name>aEventName</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>privevent</name>-&gt;<name>SetTarget</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>privevent</name>-&gt;<name>SetCurrentTarget</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>privevent</name>-&gt;<name>SetOriginalTarget</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// We assume anyone that managed to call SendEvent is trusted</comment>
  <expr_stmt><expr><call><name><name>privevent</name>-&gt;<name>SetTrusted</name></name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// If the window is frozen or we're still catching up on events that were</comment>
  <comment type="line">// queued while frozen, save the event for later.</comment>
  <if>if <condition>(<expr><call><name><name>window</name>-&gt;<name>IsFrozen</name></name><argument_list>()</argument_list></call> || <call><name><name>mPendingEvents</name>.<name>Length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PendingEvent</name> *</type><name>pending</name> <init>= <expr><call><name><name>mPendingEvents</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pending</name>-&gt;<name>event</name></name> = <name>event</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pending</name>-&gt;<name>listener</name></name> = <name>aListener</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pending</name>-&gt;<name>listeners</name>.<name>SetCapacity</name></name><argument_list>(<argument><expr><call><name><name>aListeners</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pending</name>-&gt;<name>listeners</name>.<name>AppendObjects</name></name><argument_list>(<argument><expr><name>aListeners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>NotifyEventListeners</name><argument_list>(<argument><expr><name>aListener</name></expr></argument>, <argument><expr><name>aListeners</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<comment type="line">//</comment>
<comment type="line">// nsDOMOfflineResourceList::nsIObserver</comment>
<comment type="line">//</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>Observe</name></name><parameter_list>(<param><decl><type><name>nsISupports</name> *</type><name>aSubject</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aTopic</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>aData</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>aTopic</name></expr></argument>, <argument><expr>"offline-cache-update-added"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIOfflineCacheUpdate</name></expr></argument>&gt;</argument_list></name></type> <name>update</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aSubject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>update</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>UpdateAdded</name><argument_list>(<argument><expr><name>update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>aTopic</name></expr></argument>, <argument><expr>"offline-cache-update-completed"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIOfflineCacheUpdate</name></expr></argument>&gt;</argument_list></name></type> <name>update</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aSubject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>update</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>UpdateCompleted</name><argument_list>(<argument><expr><name>update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if></else></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">//</comment>
<comment type="line">// nsDOMOfflineResourceList::nsIOfflineCacheUpdateObserver</comment>
<comment type="line">//</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>Error</name></name><parameter_list>(<param><decl><type><name>nsIOfflineCacheUpdate</name> *</type><name>aUpdate</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SendEvent</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr><name>ERROR_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mOnErrorListener</name></expr></argument>, <argument><expr><name>mErrorListeners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>Checking</name></name><parameter_list>(<param><decl><type><name>nsIOfflineCacheUpdate</name> *</type><name>aUpdate</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SendEvent</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr><name>CHECKING_STR</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>mOnCheckingListener</name></expr></argument>, <argument><expr><name>mCheckingListeners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>NoUpdate</name></name><parameter_list>(<param><decl><type><name>nsIOfflineCacheUpdate</name> *</type><name>aUpdate</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SendEvent</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr><name>NOUPDATE_STR</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>mOnNoUpdateListener</name></expr></argument>, <argument><expr><name>mNoUpdateListeners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>Downloading</name></name><parameter_list>(<param><decl><type><name>nsIOfflineCacheUpdate</name> *</type><name>aUpdate</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SendEvent</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr><name>DOWNLOADING_STR</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>mOnDownloadingListener</name></expr></argument>, <argument><expr><name>mDownloadingListeners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>ItemStarted</name></name><parameter_list>(<param><decl><type><name>nsIOfflineCacheUpdate</name> *</type><name>aUpdate</name></decl></param>,
                                      <param><decl><type><name>nsIDOMLoadStatus</name> *</type><name>aItem</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SendEvent</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr><name>PROGRESS_STR</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>mOnProgressListener</name></expr></argument>, <argument><expr><name>mProgressListeners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>ItemCompleted</name></name><parameter_list>(<param><decl><type><name>nsIOfflineCacheUpdate</name> *</type><name>aUpdate</name></decl></param>,
                                        <param><decl><type><name>nsIDOMLoadStatus</name> *</type><name>aItem</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>Obsolete</name></name><parameter_list>(<param><decl><type><name>nsIOfflineCacheUpdate</name> *</type><name>aUpdate</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SendEvent</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr><name>OBSOLETE_STR</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>mOnObsoleteListener</name></expr></argument>, <argument><expr><name>mObsoleteListeners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>GetCacheKey</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aURI</name></decl></param>, <param><decl><type><name>nsCString</name> &amp;</type><name>aKey</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>requestedURI</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_NewURI</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>requestedURI</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>GetCacheKey</name><argument_list>(<argument><expr><name>requestedURI</name></expr></argument>, <argument><expr><name>aKey</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>UpdateAdded</name></name><parameter_list>(<param><decl><type><name>nsIOfflineCacheUpdate</name> *</type><name>aUpdate</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Ignore partial updates.</comment>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>partial</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>aUpdate</name>-&gt;<name>GetPartial</name></name><argument_list>(<argument><expr>&amp;<name>partial</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>partial</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>updateURI</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>aUpdate</name>-&gt;<name>GetManifestURI</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>updateURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>equals</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>updateURI</name>-&gt;<name>Equals</name></name><argument_list>(<argument><expr><name>mManifestURI</name></expr></argument>, <argument><expr>&amp;<name>equals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>equals</name></expr>)</condition><then> <block>{
    <comment type="line">// This update doesn't belong to us</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr>!<name>mCacheUpdate</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// We don't need to emit signals here.  Updates are either added</comment>
  <comment type="line">// when they are scheduled (in which case they are always IDLE) or</comment>
  <comment type="line">// they are added when the applicationCache object is initialized, so there</comment>
  <comment type="line">// are no listeners to accept signals anyway.</comment>

  <expr_stmt><expr><name>mCacheUpdate</name> = <name>aUpdate</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mCacheUpdate</name>-&gt;<name>AddObserver</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsIApplicationCacheContainer</name></expr></argument>&gt;</argument_list></name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>GetDocumentAppCacheContainer</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMWindow</name></expr></argument>&gt;</argument_list></name></type> <name>window</name> <init>= <expr><call><name>do_QueryReferent</name><argument_list>(<argument><expr><name>mWindow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>window</name></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIWebNavigation</name></expr></argument>&gt;</argument_list></name></type> <name>webnav</name> <init>= <expr><call><name>do_GetInterface</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>webnav</name></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIApplicationCacheContainer</name></expr></argument>&gt;</argument_list></name></type> <name>appCacheContainer</name> <init>=
    <expr><call><name>do_GetInterface</name><argument_list>(<argument><expr><name>webnav</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>appCacheContainer</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsIApplicationCache</name></expr></argument>&gt;</argument_list></name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>GetDocumentAppCache</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIApplicationCacheContainer</name></expr></argument>&gt;</argument_list></name></type> <name>appCacheContainer</name> <init>=
    <expr><call><name>GetDocumentAppCacheContainer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>appCacheContainer</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIApplicationCache</name></expr></argument>&gt;</argument_list></name></type> <name>applicationCache</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>appCacheContainer</name>-&gt;<name>GetApplicationCache</name></name><argument_list>(
      <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>applicationCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>applicationCache</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>nsnull</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>UpdateCompleted</name></name><parameter_list>(<param><decl><type><name>nsIOfflineCacheUpdate</name> *</type><name>aUpdate</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aUpdate</name> != <name>mCacheUpdate</name></expr>)</condition><then> <block>{
    <comment type="line">// This isn't the update we're watching.</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>partial</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mCacheUpdate</name>-&gt;<name>GetPartial</name></name><argument_list>(<argument><expr>&amp;<name>partial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>isUpgrade</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mCacheUpdate</name>-&gt;<name>GetIsUpgrade</name></name><argument_list>(<argument><expr>&amp;<name>isUpgrade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>succeeded</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>mCacheUpdate</name>-&gt;<name>GetSucceeded</name></name><argument_list>(<argument><expr>&amp;<name>succeeded</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>mCacheUpdate</name>-&gt;<name>RemoveObserver</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mCacheUpdate</name> = <name>nsnull</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; <name>succeeded</name> &amp;&amp; !<name>partial</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>isUpgrade</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>SendEvent</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr><name>UPDATEREADY_STR</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>mOnUpdateReadyListener</name></expr></argument>, <argument><expr><name>mUpdateReadyListeners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>SendEvent</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr><name>CACHED_STR</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>mOnCachedListener</name></expr></argument>, <argument><expr><name>mCachedListeners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>GetCacheKey</name></name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>, <param><decl><type><name>nsCString</name> &amp;</type><name>aKey</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>aURI</name>-&gt;<name>GetAsciiSpec</name></name><argument_list>(<argument><expr><name>aKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// url fragments aren't used in cache keys</comment>
  <decl_stmt><decl><type><name><name>nsCAutoString</name>::<name>const_iterator</name></name></type> <name>specStart</name></decl>, <decl><type ref="prev"/><name>specEnd</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aKey</name>.<name>BeginReading</name></name><argument_list>(<argument><expr><name>specStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>aKey</name>.<name>EndReading</name></name><argument_list>(<argument><expr><name>specEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>FindCharInReadable</name><argument_list>(<argument><expr>'#'</expr></argument>, <argument><expr><name>specStart</name></expr></argument>, <argument><expr><name>specEnd</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>aKey</name>.<name>BeginReading</name></name><argument_list>(<argument><expr><name>specEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>aKey</name> = <call><name>Substring</name><argument_list>(<argument><expr><name>specEnd</name></expr></argument>, <argument><expr><name>specStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>CacheKeys</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mCachedKeys</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIApplicationCache</name></expr></argument>&gt;</argument_list></name></type> <name>appCache</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mApplicationCacheService</name>-&gt;<name>GetActiveCache</name></name><argument_list>(<argument><expr><name>mManifestSpec</name></expr></argument>,
                                           <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>appCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>appCache</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_DOM_INVALID_STATE_ERR</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name><name>appCache</name>-&gt;<name>GatherEntries</name></name><argument_list>(<argument><expr><name><name>nsIApplicationCache</name>::<name>ITEM_DYNAMIC</name></name></expr></argument>,
                                 <argument><expr>&amp;<name>mCachedKeysCount</name></expr></argument>, <argument><expr>&amp;<name>mCachedKeys</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDOMOfflineResourceList</name>::<name>ClearCachedKeys</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mCachedKeys</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY</name><argument_list>(<argument><expr><name>mCachedKeysCount</name></expr></argument>, <argument><expr><name>mCachedKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mCachedKeys</name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mCachedKeysCount</name> = 0</expr>;</expr_stmt>
  }</block></then></if>
}</block></function>



</unit>
