<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="00712937506a73b85dcd20ecc9e9976bceb32e71.h"><comment type="block">/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: set ts=4 sw=4 et tw=99:
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla SpiderMonkey JavaScript 1.9 code, released
 * May 28, 2008.
 *
 * The Initial Developer of the Original Code is
 *   Brendan Eich &lt;brendan@mozilla.org&gt;
 *
 * Contributor(s):
 *   David Anderson &lt;danderson@mozilla.com&gt;
 *   David Mandelin &lt;dmandelin@mozilla.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>jslogic_h__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jslogic_h__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"MethodJIT.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>js</name> <block>{
<decl_stmt><decl><type><name>namespace</name></type> <name>mjit</name> <block>{
<decl_stmt><decl><type><name>namespace</name></type> <name>stubs</name> <block>{

<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>This</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>JSObject</name> * <name>JS_FASTCALL</name></type> <name>NewInitArray</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>JSObject</name> * <name>JS_FASTCALL</name></type> <name>NewInitObject</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>empty</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>JSObject</name> * <name>JS_FASTCALL</name></type> <name>NewArray</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>Interrupt</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>InitElem</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>last</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>InitProp</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>JSAtom</name> *</type><name>atom</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>EndInit</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>JSString</name> * <name>JS_FASTCALL</name></type> <name>ConcatN</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>argc</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> * <name>JS_FASTCALL</name></type> <name>Call</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>argc</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> * <name>JS_FASTCALL</name></type> <name>New</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>argc</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> * <name>JS_FASTCALL</name></type> <name>Return</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>Throw</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>JSObject</name> * <name>JS_FASTCALL</name></type> <name>BindName</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>SetName</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>index</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>Name</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>index</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>GetProp</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>GetElem</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>CallElem</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>SetElem</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>Length</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>CallName</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>index</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>GetUpvar</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>index</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>NameInc</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>JSAtom</name> *</type><name>atom</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>NameDec</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>JSAtom</name> *</type><name>atom</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>IncName</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>JSAtom</name> *</type><name>atom</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>DecName</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>JSAtom</name> *</type><name>atom</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>PropInc</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>JSAtom</name> *</type><name>atom</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>PropDec</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>JSAtom</name> *</type><name>atom</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>IncProp</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>JSAtom</name> *</type><name>atom</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>DecProp</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>JSAtom</name> *</type><name>atom</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>CallProp</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>JSAtom</name> *</type><name>atom</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>DefFun</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>index</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>JSObject</name> * <name>JS_FASTCALL</name></type> <name>DefLocalFun</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>JSFunction</name> *</type><name>fun</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>JSObject</name> * <name>JS_FASTCALL</name></type> <name>RegExp</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>regex</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>JSObject</name> * <name>JS_FASTCALL</name></type> <name>Lambda</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>JSFunction</name> *</type><name>fun</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>JSObject</name> * <name>JS_FASTCALL</name></type> <name>FlatLambda</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>JSFunction</name> *</type><name>fun</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>Arguments</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>VpInc</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>Value</name> *</type><name>vp</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>VpDec</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>Value</name> *</type><name>vp</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>DecVp</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>Value</name> *</type><name>vp</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>IncVp</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>Value</name> *</type><name>vp</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>JSBool</name> <name>JS_FASTCALL</name></type> <name>LessThan</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>JSBool</name> <name>JS_FASTCALL</name></type> <name>LessEqual</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>JSBool</name> <name>JS_FASTCALL</name></type> <name>GreaterThan</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>JSBool</name> <name>JS_FASTCALL</name></type> <name>GreaterEqual</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>JSBool</name> <name>JS_FASTCALL</name></type> <name>Equal</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>JSBool</name> <name>JS_FASTCALL</name></type> <name>NotEqual</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>BitOr</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>BitXor</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>BitAnd</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>BitNot</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>Lsh</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>Rsh</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>Ursh</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>Add</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>Sub</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>Mul</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>Div</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>Mod</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>Neg</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>ObjToStr</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>Not</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>JSBool</name> <name>JS_FASTCALL</name></type> <name>StrictEq</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>JSBool</name> <name>JS_FASTCALL</name></type> <name>StrictNe</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>Iter</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>flags</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>IterNext</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>JSBool</name> <name>JS_FASTCALL</name></type> <name>IterMore</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>EndIter</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>JS_FASTCALL</name></type> <name>ForName</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>, <param><decl><type><name>JSAtom</name> *</type><name>atom</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>JSBool</name> <name>JS_FASTCALL</name></type> <name>ValueToBoolean</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>JSString</name> * <name>JS_FASTCALL</name></type> <name>TypeOf</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>JSBool</name> <name>JS_FASTCALL</name></type> <name>InstanceOf</name><parameter_list>(<param><decl><type><name>VMFrame</name> &amp;</type><name>f</name></decl></param>)</parameter_list>;</function_decl>

}</block></decl></decl_stmt>}</block></decl></decl_stmt>}</block></decl></decl_stmt> <comment type="block">/* namespace stubs,mjit,js */</comment>

<extern>extern "C" <decl_stmt><decl><type><name>void</name> *</type>
<name>js_InternalThrow</name><argument_list>(<argument><expr><name>js</name>::<name>VMFrame</name> &amp;<name>f</name></expr></argument>)</argument_list></decl>;</decl_stmt></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* jslogic_h__ */</comment>

</unit>
