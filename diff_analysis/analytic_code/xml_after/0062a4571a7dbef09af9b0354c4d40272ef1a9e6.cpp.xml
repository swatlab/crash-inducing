<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0062a4571a7dbef09af9b0354c4d40272ef1a9e6.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Corporation code.
 *
 * The Initial Developer of the Original Code is Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Bas Schouten &lt;bschouten@mozilla.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"LayerManagerD3D9.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ThebesLayerD3D9.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ContainerLayerD3D9.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ImageLayerD3D9.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ColorLayerD3D9.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CanvasLayerD3D9.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIServiceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gfxWindowsPlatform.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CAIRO_HAS_D2D_SURFACE</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gfxD2DSurface.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<namespace>namespace <name>mozilla</name> <block>{
<namespace>namespace <name>layers</name> <block>{

<decl_stmt><decl><type><name>DeviceManagerD3D9</name> *</type><name><name>LayerManagerD3D9</name>::<name>mDeviceManager</name></name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

<constructor><name><name>LayerManagerD3D9</name>::<name>LayerManagerD3D9</name></name><parameter_list>(<param><decl><type><name>nsIWidget</name> *</type><name>aWidget</name></decl></param>)</parameter_list>
  <member_list>: <call><name>mIs3DEnabled</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>
</member_list><block>{
    <expr_stmt><expr><name>mWidget</name> = <name>aWidget</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mCurrentCallbackInfo</name>.<name>Callback</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mCurrentCallbackInfo</name>.<name>CallbackData</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>LayerManagerD3D9</name>::~<name>LayerManagerD3D9</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="block">/* Important to release this first since it also holds a reference to the
   * device manager
   */</comment>
  <expr_stmt><expr><name>mSwapChain</name> = <name>nsnull</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>mDeviceManager</name> &amp;&amp; <call><name><name>mDeviceManager</name>-&gt;<name>Release</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mDeviceManager</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>
}</block></destructor>

<function><type><name>PRBool</name></type>
<name><name>LayerManagerD3D9</name>::<name>Initialize</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="block">/* Check the user preference for whether 3d video is enabled or not */</comment> 
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrefBranch</name></expr></argument>&gt;</argument_list></name></type> <name>prefs</name> <init>= <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_PREFSERVICE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
  <expr_stmt><expr><call><name><name>prefs</name>-&gt;<name>GetBoolPref</name></name><argument_list>(<argument><expr>"gfx.3d_video.enabled"</expr></argument>, <argument><expr>&amp;<name>mIs3DEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

  <if>if <condition>(<expr>!<name>mDeviceManager</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mDeviceManager</name> = new <name>DeviceManagerD3D9</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mDeviceManager</name>-&gt;<name>AddRef</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name><name>mDeviceManager</name>-&gt;<name>Init</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mDeviceManager</name>-&gt;<name>Release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>mDeviceManager</name> = <name>nsnull</name></expr>;</expr_stmt>
      <return>return <expr><name>PR_FALSE</name></expr>;</return>
    }</block></then></if>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name><name>mDeviceManager</name>-&gt;<name>AddRef</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <expr_stmt><expr><name>mSwapChain</name> = <call><name><name>mDeviceManager</name>-&gt;
    <name>CreateSwapChain</name></name><argument_list>(<argument><expr>(<name>HWND</name>)<call><name><name>mWidget</name>-&gt;<name>GetNativeData</name></name><argument_list>(<argument><expr><name>NS_NATIVE_WINDOW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>mSwapChain</name></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>LayerManagerD3D9</name>::<name>SetClippingRegion</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsIntRegion</name> &amp;</type><name>aClippingRegion</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mClippingRegion</name> = <name>aClippingRegion</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>LayerManagerD3D9</name>::<name>BeginTransaction</name></name><parameter_list>()</parameter_list>
<block>{
}</block></function>

<function><type><name>void</name></type>
<name><name>LayerManagerD3D9</name>::<name>BeginTransactionWithTarget</name></name><parameter_list>(<param><decl><type><name>gfxContext</name> *</type><name>aTarget</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mTarget</name> = <name>aTarget</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>LayerManagerD3D9</name>::<name>EndConstruction</name></name><parameter_list>()</parameter_list>
<block>{
}</block></function>

<function><type><name>void</name></type>
<name><name>LayerManagerD3D9</name>::<name>EndTransaction</name></name><parameter_list>(<param><decl><type><name>DrawThebesLayerCallback</name></type> <name>aCallback</name></decl></param>,
                                 <param><decl><type><name>void</name>*</type> <name>aCallbackData</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name><name>mCurrentCallbackInfo</name>.<name>Callback</name></name> = <name>aCallback</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mCurrentCallbackInfo</name>.<name>CallbackData</name></name> = <name>aCallbackData</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Render</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Clean this out for sanity */</comment>
  <expr_stmt><expr><name><name>mCurrentCallbackInfo</name>.<name>Callback</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mCurrentCallbackInfo</name>.<name>CallbackData</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <comment type="line">// Clear mTarget, next transaction could have no target</comment>
  <expr_stmt><expr><name>mTarget</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>LayerManagerD3D9</name>::<name>SetRoot</name></name><parameter_list>(<param><decl><type><name>Layer</name> *</type><name>aLayer</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mRoot</name> = <name>aLayer</name></expr>;</expr_stmt>
}</block></function>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>ThebesLayer</name></expr></argument>&gt;</argument_list></name></type>
<name><name>LayerManagerD3D9</name>::<name>CreateThebesLayer</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>ThebesLayer</name></expr></argument>&gt;</argument_list></name></type> <name>layer</name> <init>= <expr>new <call><name>ThebesLayerD3D9</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>layer</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>ContainerLayer</name></expr></argument>&gt;</argument_list></name></type>
<name><name>LayerManagerD3D9</name>::<name>CreateContainerLayer</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>ContainerLayer</name></expr></argument>&gt;</argument_list></name></type> <name>layer</name> <init>= <expr>new <call><name>ContainerLayerD3D9</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>layer</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>ImageLayer</name></expr></argument>&gt;</argument_list></name></type>
<name><name>LayerManagerD3D9</name>::<name>CreateImageLayer</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>ImageLayer</name></expr></argument>&gt;</argument_list></name></type> <name>layer</name> <init>= <expr>new <call><name>ImageLayerD3D9</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>layer</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>ColorLayer</name></expr></argument>&gt;</argument_list></name></type>
<name><name>LayerManagerD3D9</name>::<name>CreateColorLayer</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>ColorLayer</name></expr></argument>&gt;</argument_list></name></type> <name>layer</name> <init>= <expr>new <call><name>ColorLayerD3D9</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>layer</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>CanvasLayer</name></expr></argument>&gt;</argument_list></name></type>
<name><name>LayerManagerD3D9</name>::<name>CreateCanvasLayer</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>CanvasLayer</name></expr></argument>&gt;</argument_list></name></type> <name>layer</name> <init>= <expr>new <call><name>CanvasLayerD3D9</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>layer</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>ImageContainer</name></expr></argument>&gt;</argument_list></name></type>
<name><name>LayerManagerD3D9</name>::<name>CreateImageContainer</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>ImageContainer</name></expr></argument>&gt;</argument_list></name></type> <name>container</name> <init>= <expr>new <call><name>ImageContainerD3D9</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>container</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>cairo_user_data_key_t</name></type> <name>gKeyD3D9Texture</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>ReleaseTexture</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>texture</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>IDirect3DTexture9</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call>-&gt;<call><name>Release</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>gfxASurface</name></expr></argument>&gt;</argument_list></name></type>
<name><name>LayerManagerD3D9</name>::<name>CreateOptimalSurface</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>gfxIntSize</name> &amp;</type><name>aSize</name></decl></param>,
                                   <param><decl><type><name><name>gfxASurface</name>::<name>gfxImageFormat</name></name></type> <name>aFormat</name></decl></param>)</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CAIRO_HAS_D2D_SURFACE</name></cpp:ifdef>
  <if>if <condition>(<expr>(<name>aFormat</name> != <name><name>gfxASurface</name>::<name>ImageFormatRGB24</name></name> &amp;&amp;
       <name>aFormat</name> != <name><name>gfxASurface</name>::<name>ImageFormatARGB32</name></name>) ||
      <call><name><name>gfxWindowsPlatform</name>::<name>GetPlatform</name></name><argument_list>()</argument_list></call>-&gt;<call><name>GetRenderMode</name><argument_list>()</argument_list></call> !=
        <name><name>gfxWindowsPlatform</name>::<name>RENDER_DIRECT2D</name></name> ||
      !<call><name>deviceManager</name><argument_list>()</argument_list></call>-&gt;<call><name>IsD3D9Ex</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><call><name><name>LayerManager</name>::<name>CreateOptimalSurface</name></name><argument_list>(<argument><expr><name>aSize</name></expr></argument>, <argument><expr><name>aFormat</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>IDirect3DTexture9</name></expr></argument>&gt;</argument_list></name></type> <name>texture</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>HANDLE</name></type> <name>sharedHandle</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>device</name><argument_list>()</argument_list></call>-&gt;<call><name>CreateTexture</name><argument_list>(<argument><expr><name><name>aSize</name>.<name>width</name></name></expr></argument>, <argument><expr><name><name>aSize</name>.<name>height</name></name></expr></argument>, <argument><expr>1</expr></argument>,
                          <argument><expr><name>D3DUSAGE_RENDERTARGET</name></expr></argument>, <argument><expr><name>D3DFMT_A8R8G8B8</name></expr></argument>,
                          <argument><expr><name>D3DPOOL_DEFAULT</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>sharedHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>gfxD2DSurface</name></expr></argument>&gt;</argument_list></name></type> <name>surface</name> <init>=
    <expr>new <call><name>gfxD2DSurface</name><argument_list>(<argument><expr><name>sharedHandle</name></expr></argument>, <argument><expr><name>aFormat</name> == <name><name>gfxASurface</name>::<name>ImageFormatRGB24</name></name> ?
      <name><name>gfxASurface</name>::<name>CONTENT_COLOR</name></name> : <name><name>gfxASurface</name>::<name>CONTENT_COLOR_ALPHA</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>surface</name> || <call><name><name>surface</name>-&gt;<name>CairoStatus</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><call><name><name>LayerManager</name>::<name>CreateOptimalSurface</name></name><argument_list>(<argument><expr><name>aSize</name></expr></argument>, <argument><expr><name>aFormat</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>surface</name>-&gt;<name>SetData</name></name><argument_list>(<argument><expr>&amp;<name>gKeyD3D9Texture</name></expr></argument>,
                   <argument><expr><call><name><name>texture</name>.<name>forget</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>,
                   <argument><expr><name>ReleaseTexture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>surface</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name><name>LayerManager</name>::<name>CreateOptimalSurface</name></name><argument_list>(<argument><expr><name>aSize</name></expr></argument>, <argument><expr><name>aFormat</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name>void</name></type>
<name><name>LayerManagerD3D9</name>::<name>Render</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name><name>mSwapChain</name>-&gt;<name>PrepareForRendering</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>deviceManager</name><argument_list>()</argument_list></call>-&gt;<call><name>SetupRenderState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SetupPipeline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>nsIntRect</name></type> <name>rect</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mWidget</name>-&gt;<name>GetClientBounds</name></name><argument_list>(<argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>device</name><argument_list>()</argument_list></call>-&gt;<call><name>Clear</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>D3DCLEAR_TARGET</name></expr></argument>, <argument><expr>0x00000000</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>device</name><argument_list>()</argument_list></call>-&gt;<call><name>BeginScene</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>mRoot</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsIntRect</name> *</type><name>clipRect</name> <init>= <expr><call><name><name>mRoot</name>-&gt;<name>GetClipRect</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RECT</name></type> <name>r</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>clipRect</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>r</name>.<name>left</name></name> = (<name>LONG</name>)<name><name>clipRect</name>-&gt;<name>x</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>r</name>.<name>top</name></name> = (<name>LONG</name>)<name><name>clipRect</name>-&gt;<name>y</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>r</name>.<name>right</name></name> = <call>(<name>LONG</name>)<argument_list>(<argument><expr><name><name>clipRect</name>-&gt;<name>x</name></name> + <name><name>clipRect</name>-&gt;<name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>r</name>.<name>bottom</name></name> = <call>(<name>LONG</name>)<argument_list>(<argument><expr><name><name>clipRect</name>-&gt;<name>y</name></name> + <name><name>clipRect</name>-&gt;<name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name><name>r</name>.<name>left</name></name> = <name><name>r</name>.<name>top</name></name> = 0</expr>;</expr_stmt>
      <expr_stmt><expr><name><name>r</name>.<name>right</name></name> = <name><name>rect</name>.<name>width</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>r</name>.<name>bottom</name></name> = <name><name>rect</name>.<name>height</name></name></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>device</name><argument_list>()</argument_list></call>-&gt;<call><name>SetScissorRect</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>LayerD3D9</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>mRoot</name>-&gt;<name>ImplData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>-&gt;<call><name>RenderLayer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name>device</name><argument_list>()</argument_list></call>-&gt;<call><name>EndScene</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>mTarget</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsIntRect</name> *</type><name>r</name></decl>;</decl_stmt>
    <for>for (<init><expr><name>nsIntRegionRectIterator</name> <call><name>iter</name><argument_list>(<argument><expr><name>mClippingRegion</name></expr></argument>)</argument_list></call></expr>;</init>
         <condition><expr>(<name>r</name> = <call><name><name>iter</name>.<name>Next</name></name><argument_list>()</argument_list></call>) != <name>nsnull</name></expr>;</condition><incr/>) <block>{
      <expr_stmt><expr><call><name><name>mSwapChain</name>-&gt;<name>Present</name></name><argument_list>(<argument><expr>*<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name>PaintToTarget</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>LayerManagerD3D9</name>::<name>SetupPipeline</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIntRect</name></type> <name>rect</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mWidget</name>-&gt;<name>GetClientBounds</name></name><argument_list>(<argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>float</name></type> <name><name>viewMatrix</name><index>[<expr>4</expr>]</index><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
  <comment type="block">/*
   * Matrix to transform to viewport space ( &lt;-1.0, 1.0&gt; topleft,
   * &lt;1.0, -1.0&gt; bottomright)
   */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>viewMatrix</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>viewMatrix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>viewMatrix</name><index>[<expr>0</expr>]</index><index>[<expr>0</expr>]</index></name> = 2.0f / <name><name>rect</name>.<name>width</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>viewMatrix</name><index>[<expr>1</expr>]</index><index>[<expr>1</expr>]</index></name> = -2.0f / <name><name>rect</name>.<name>height</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>viewMatrix</name><index>[<expr>2</expr>]</index><index>[<expr>2</expr>]</index></name> = 1.0f</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>viewMatrix</name><index>[<expr>3</expr>]</index><index>[<expr>0</expr>]</index></name> = -1.0f</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>viewMatrix</name><index>[<expr>3</expr>]</index><index>[<expr>1</expr>]</index></name> = 1.0f</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>viewMatrix</name><index>[<expr>3</expr>]</index><index>[<expr>3</expr>]</index></name> = 1.0f</expr>;</expr_stmt>

  <decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>device</name><argument_list>()</argument_list></call>-&gt;<call><name>SetVertexShaderConstantF</name><argument_list>(<argument><expr>8</expr></argument>, <argument><expr>&amp;<name><name>viewMatrix</name><index>[<expr>0</expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"Failed to set projection shader constant!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>LayerManagerD3D9</name>::<name>PaintToTarget</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>IDirect3DSurface9</name></expr></argument>&gt;</argument_list></name></type> <name>backBuff</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>IDirect3DSurface9</name></expr></argument>&gt;</argument_list></name></type> <name>destSurf</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>device</name><argument_list>()</argument_list></call>-&gt;<call><name>GetRenderTarget</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>backBuff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>D3DSURFACE_DESC</name></type> <name>desc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>backBuff</name>-&gt;<name>GetDesc</name></name><argument_list>(<argument><expr>&amp;<name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>device</name><argument_list>()</argument_list></call>-&gt;<call><name>CreateOffscreenPlainSurface</name><argument_list>(<argument><expr><name><name>desc</name>.<name>Width</name></name></expr></argument>, <argument><expr><name><name>desc</name>.<name>Height</name></name></expr></argument>,
                                       <argument><expr><name>D3DFMT_A8R8G8B8</name></expr></argument>, <argument><expr><name>D3DPOOL_SYSTEMMEM</name></expr></argument>,
                                       <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>destSurf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>device</name><argument_list>()</argument_list></call>-&gt;<call><name>GetRenderTargetData</name><argument_list>(<argument><expr><name>backBuff</name></expr></argument>, <argument><expr><name>destSurf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>D3DLOCKED_RECT</name></type> <name>rect</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>destSurf</name>-&gt;<name>LockRect</name></name><argument_list>(<argument><expr>&amp;<name>rect</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>D3DLOCK_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>gfxImageSurface</name></expr></argument>&gt;</argument_list></name></type> <name>imageSurface</name> <init>=
    <expr>new <call><name>gfxImageSurface</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>char</name>*)<name><name>rect</name>.<name>pBits</name></name></expr></argument>,
                        <argument><expr><call><name>gfxIntSize</name><argument_list>(<argument><expr><name><name>desc</name>.<name>Width</name></name></expr></argument>, <argument><expr><name><name>desc</name>.<name>Height</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>rect</name>.<name>Pitch</name></name></expr></argument>,
                        <argument><expr><name><name>gfxASurface</name>::<name>ImageFormatARGB32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>mTarget</name>-&gt;<name>SetSource</name></name><argument_list>(<argument><expr><name>imageSurface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mTarget</name>-&gt;<name>SetOperator</name></name><argument_list>(<argument><expr><name><name>gfxContext</name>::<name>OPERATOR_OVER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mTarget</name>-&gt;<name>Paint</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>destSurf</name>-&gt;<name>UnlockRect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<constructor><name><name>LayerD3D9</name>::<name>LayerD3D9</name></name><parameter_list>(<param><decl><type><name>LayerManagerD3D9</name> *</type><name>aManager</name></decl></param>)</parameter_list>
  <member_list>: <call><name>mD3DManager</name><argument_list>(<argument><expr><name>aManager</name></expr></argument>)</argument_list></call>
</member_list><block>{
}</block></constructor>

}</block></namespace> <comment type="block">/* namespace layers */</comment>
}</block></namespace> <comment type="block">/* namespace mozilla */</comment>
</unit>
