<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="007f6311aeffba0a1353c42a51b8dcf08e03c97e.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: set ts=8 sw=4 et tw=99:
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tests.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_IS_FALSE</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((JSVAL_IS_BOOLEAN(x)) &amp;&amp; !(JSVAL_TO_BOOLEAN(x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSVAL_IS_TRUE</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>((JSVAL_IS_BOOLEAN(x)) &amp;&amp; (JSVAL_TO_BOOLEAN(x)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>stringToId</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><name>jsid</name> *</type><name>idp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>buf</name> <init>= <expr><call><name>JS_strdup</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>buf</name></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>

    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name> <init>= <expr><call><name>JS_NewString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>

    <return>return <expr><call><name>JS_ValueToId</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<macro><name>BEGIN_TEST</name><argument_list>(<argument>testGetPropertyDefault_bug594060</argument>)</argument_list></macro>
<block>{
    <block>{
        <comment type="line">// Check JS_GetPropertyDefault</comment>

        <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name> <init>= <expr><call><name>JS_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>jsval</name></type> <name>v0</name> <init>= <expr><name>JSVAL_TRUE</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>JS_SetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>"here"</expr></argument>, <argument><expr>&amp;<name>v0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>jsval</name></type> <name>v1</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>JS_GetPropertyDefault</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>"here"</expr></argument>, <argument><expr><name>JSVAL_FALSE</name></expr></argument>, <argument><expr>&amp;<name>v1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>JSVAL_IS_TRUE</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>jsval</name></type> <name>v2</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>JS_GetPropertyDefault</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>"nothere"</expr></argument>, <argument><expr><name>JSVAL_FALSE</name></expr></argument>, <argument><expr>&amp;<name>v2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>JSVAL_IS_FALSE</name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <block>{
        <comment type="line">// Check JS_GetPropertyByIdDefault</comment>

        <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name> <init>= <expr><call><name>JS_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>jsid</name></type> <name>hereid</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>stringToId</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"here"</expr></argument>, <argument><expr>&amp;<name>hereid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>jsid</name></type> <name>nothereid</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>stringToId</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"nothere"</expr></argument>, <argument><expr>&amp;<name>nothereid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>jsval</name></type> <name>v0</name> <init>= <expr><name>JSVAL_TRUE</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>JS_SetPropertyById</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>hereid</name></expr></argument>, <argument><expr>&amp;<name>v0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>jsval</name></type> <name>v1</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>JS_GetPropertyByIdDefault</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>hereid</name></expr></argument>, <argument><expr><name>JSVAL_FALSE</name></expr></argument>, <argument><expr>&amp;<name>v1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>JSVAL_IS_TRUE</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>jsval</name></type> <name>v2</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>JS_GetPropertyByIdDefault</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>nothereid</name></expr></argument>, <argument><expr><name>JSVAL_FALSE</name></expr></argument>, <argument><expr>&amp;<name>v2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>JSVAL_IS_FALSE</name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <return>return <expr>true</expr>;</return>
}</block>
<macro><name>END_TEST</name><argument_list>(<argument>testGetPropertyDefault_bug594060</argument>)</argument_list></macro>
</unit>
