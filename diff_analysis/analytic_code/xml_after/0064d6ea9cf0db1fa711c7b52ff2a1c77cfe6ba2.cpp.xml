<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0064d6ea9cf0db1fa711c7b52ff2a1c77cfe6ba2.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org Code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Scott MacGregor &lt;mscott@netscape.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIconURI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNetUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIIOService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIURL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prprf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plstr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_IMAGE_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANE_FILE_NAME_LEN</name></cpp:macro> <cpp:value>MAX_PATH</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANE_FILE_NAME_LEN</name></cpp:macro> <cpp:value>PATH_MAX</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANE_FILE_NAME_LEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// helper function for parsing out attributes like size, and contentType</comment>
<comment type="line">// from the icon url.</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extractAttributeValue</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>searchString</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>attributeName</name></decl></param>, <param><decl><type><name>nsCString</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>;</function_decl>
 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>kSizeStrings</name><index>[]</index></name> <init>=
<expr><block>{
  <expr>"button"</expr>,
  <expr>"toolbar"</expr>,
  <expr>"toolbarsmall"</expr>,
  <expr>"menu"</expr>,
  <expr>"dnd"</expr>,
  <expr>"dialog"</expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>kStateStrings</name><index>[]</index></name> <init>=
<expr><block>{
  <expr>"normal"</expr>,
  <expr>"disabled"</expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
 
<constructor><name><name>nsMozIconURI</name>::<name>nsMozIconURI</name></name><parameter_list>()</parameter_list>
  <member_list>: <call><name>mSize</name><argument_list>(<argument><expr><name>DEFAULT_IMAGE_SIZE</name></expr></argument>)</argument_list></call>,
    <call><name>mIconSize</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call>,
    <call><name>mIconState</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call>
</member_list><block>{
}</block></constructor>
 
<destructor><name><name>nsMozIconURI</name>::~<name>nsMozIconURI</name></name><parameter_list>()</parameter_list>
<block>{
}</block></destructor>

<macro><name>NS_IMPL_THREADSAFE_ISUPPORTS2</name><argument_list>(<argument>nsMozIconURI</argument>, <argument>nsIMozIconURI</argument>, <argument>nsIURI</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOZICON_SCHEME</name></cpp:macro> <cpp:value>"moz-icon:"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOZICON_SCHEME_LEN</name></cpp:macro> <cpp:value>(sizeof(MOZICON_SCHEME) - 1)</cpp:value></cpp:define>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// nsURI methods:</comment>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>GetSpec</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>aSpec</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>aSpec</name> = <name>MOZICON_SCHEME</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>mIconURL</name></expr>)</condition><then>
  <block>{
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>fileIconSpec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>mIconURL</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>fileIconSpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>aSpec</name> += <name>fileIconSpec</name></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr>!<call><name><name>mStockIcon</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
  <block>{
    <expr_stmt><expr><name>aSpec</name> += "//stock/"</expr>;</expr_stmt>
    <expr_stmt><expr><name>aSpec</name> += <name>mStockIcon</name></expr>;</expr_stmt>
  }</block></then>
  <else>else
  <block>{
    <expr_stmt><expr><name>aSpec</name> += "//"</expr>;</expr_stmt>
    <expr_stmt><expr><name>aSpec</name> += <name>mFileName</name></expr>;</expr_stmt>
  }</block></else></if></else></if>

  <expr_stmt><expr><name>aSpec</name> += "?size="</expr>;</expr_stmt>
  <if>if <condition>(<expr><name>mIconSize</name> &gt;= 0</expr>)</condition><then>
  <block>{
    <expr_stmt><expr><name>aSpec</name> += <name><name>kSizeStrings</name><index>[<expr><name>mIconSize</name></expr>]</index></name></expr>;</expr_stmt>
  }</block></then>
  <else>else
  <block>{
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>20</expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>PR_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr><name>mSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aSpec</name>.<name>Append</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <if>if <condition>(<expr><name>mIconState</name> &gt;= 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>aSpec</name> += "&amp;state="</expr>;</expr_stmt>
    <expr_stmt><expr><name>aSpec</name> += <name><name>kStateStrings</name><index>[<expr><name>mIconState</name></expr>]</index></name></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr>!<call><name><name>mContentType</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
  <block>{
    <expr_stmt><expr><name>aSpec</name> += "&amp;contentType="</expr>;</expr_stmt>
    <expr_stmt><expr><name>aSpec</name> += <call><name><name>mContentType</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// takes a string like ?size=32&amp;contentType=text/html and returns a new string </comment>
<comment type="line">// containing just the attribute value. i.e you could pass in this string with</comment>
<comment type="line">// an attribute name of 'size=', this will return 32</comment>
<comment type="line">// Assumption: attribute pairs in the string are separated by '&amp;'.</comment>
<function><type><name>void</name></type> <name>extractAttributeValue</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>searchString</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>attributeName</name></decl></param>, <param><decl><type><name>nsCString</name>&amp;</type> <name>result</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">//NS_ENSURE_ARG_POINTER(extractAttributeValue);</comment>

  <expr_stmt><expr><call><name><name>result</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>searchString</name> &amp;&amp; <name>attributeName</name></expr>)</condition><then>
  <block>{
    <comment type="line">// search the string for attributeName</comment>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>attributeNameSize</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>attributeName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>startOfAttribute</name> <init>= <expr><call><name>PL_strcasestr</name><argument_list>(<argument><expr><name>searchString</name></expr></argument>, <argument><expr><name>attributeName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>startOfAttribute</name> &amp;&amp;
       ( *(<name>startOfAttribute</name>-1) == '?' || *(<name>startOfAttribute</name>-1) == '&amp;')</expr> )</condition><then>
    <block>{
      <expr_stmt><expr><name>startOfAttribute</name> += <name>attributeNameSize</name></expr>;</expr_stmt> <comment type="line">// skip over the attributeName</comment>
      <if>if <condition>(<expr>*<name>startOfAttribute</name></expr>)</condition><then> <comment type="line">// is there something after the attribute name</comment>
      <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>endofAttribute</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>startOfAttribute</name></expr></argument>, <argument><expr>'&amp;'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>endofAttribute</name></expr>)</condition><then>
          <expr_stmt><expr><call><name><name>result</name>.<name>Assign</name></name><argument_list>(<argument><expr><call><name>Substring</name><argument_list>(<argument><expr><name>startOfAttribute</name></expr></argument>, <argument><expr><name>endofAttribute</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
          <expr_stmt><expr><call><name><name>result</name>.<name>Assign</name></name><argument_list>(<argument><expr><name>startOfAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
      }</block></then></if> <comment type="line">// if we have a attribute value</comment>
    }</block></then></if> <comment type="line">// if we have a attribute name</comment>
  }</block></then></if> <comment type="line">// if we got non-null search string and attribute name values</comment>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>SetSpec</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name> &amp;</type><name>aSpec</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Reset everything to default values.</comment>
  <expr_stmt><expr><name>mIconURL</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mSize</name> = <name>DEFAULT_IMAGE_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mContentType</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mFileName</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mStockIcon</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mIconSize</name> = -1</expr>;</expr_stmt>
  <expr_stmt><expr><name>mIconState</name> = -1</expr>;</expr_stmt>

  <function_decl><type><name>nsCAutoString</name></type> <name>iconSpec</name><parameter_list>(<param><decl><type><name>aSpec</name></type></decl></param>)</parameter_list>;</function_decl>
  <if>if <condition>(<expr>!<call><name>Substring</name><argument_list>(<argument><expr><name>iconSpec</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>MOZICON_SCHEME_LEN</name></expr></argument>)</argument_list></call>.<call><name>EqualsLiteral</name><argument_list>(<argument><expr><name>MOZICON_SCHEME</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_MALFORMED_URI</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>questionMarkPos</name> <init>= <expr><call><name><name>iconSpec</name>.<name>Find</name></name><argument_list>(<argument><expr>"?"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>questionMarkPos</name> != -1 &amp;&amp; <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PRInt32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>iconSpec</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> &gt; (<name>questionMarkPos</name> + 1)</expr>)</condition><then>
  <block>{
    <expr_stmt><expr><call><name>extractAttributeValue</name><argument_list>(<argument><expr><call><name><name>iconSpec</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"contentType="</expr></argument>, <argument><expr><name>mContentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>sizeString</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>extractAttributeValue</name><argument_list>(<argument><expr><call><name><name>iconSpec</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"size="</expr></argument>, <argument><expr><name>sizeString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name><name>sizeString</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{      
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sizeStr</name> <init>= <expr><call><name><name>sizeString</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name>NS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>kSizeStrings</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
      <block>{
        <if>if <condition>(<expr><call><name>PL_strcasecmp</name><argument_list>(<argument><expr><name>sizeStr</name></expr></argument>, <argument><expr><name><name>kSizeStrings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>mIconSize</name> = <name>i</name></expr>;</expr_stmt>
          <break>break;</break>
        }</block></then></if>
      }</block></for>

      <decl_stmt><decl><type><name>PRInt32</name></type> <name>sizeValue</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><call><name><name>sizeString</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>sizeValue</name></expr>)</condition><then>
        <expr_stmt><expr><name>mSize</name> = <name>sizeValue</name></expr>;</expr_stmt></then></if>
    }</block></then></if>

    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>stateString</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>extractAttributeValue</name><argument_list>(<argument><expr><call><name><name>iconSpec</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"state="</expr></argument>, <argument><expr><name>stateString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name><name>stateString</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>stateStr</name> <init>= <expr><call><name><name>stateString</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name>NS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>kStateStrings</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
      <block>{
        <if>if <condition>(<expr><call><name>PL_strcasecmp</name><argument_list>(<argument><expr><name>stateStr</name></expr></argument>, <argument><expr><name><name>kStateStrings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>mIconState</name> = <name>i</name></expr>;</expr_stmt>
          <break>break;</break>
        }</block></then></if>
      }</block></for>
    }</block></then></if>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>pathLength</name> <init>= <expr><call><name><name>iconSpec</name>.<name>Length</name></name><argument_list>()</argument_list></call> - <name>MOZICON_SCHEME_LEN</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>questionMarkPos</name> != -1</expr>)</condition><then>
    <expr_stmt><expr><name>pathLength</name> = <name>questionMarkPos</name> - <name>MOZICON_SCHEME_LEN</name></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>pathLength</name> &lt; 3</expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_MALFORMED_URI</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>iconPath</name><argument_list>(<argument><expr><call><name>Substring</name><argument_list>(<argument><expr><name>iconSpec</name></expr></argument>, <argument><expr><name>MOZICON_SCHEME_LEN</name></expr></argument>, <argument><expr><name>pathLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Icon URI path can have three forms:</comment>
  <comment type="line">// (1) //stock/&lt;icon-identifier&gt;</comment>
  <comment type="line">// (2) //&lt;some dummy file with an extension&gt;</comment>
  <comment type="line">// (3) a valid URL</comment>

  <if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr>"//stock/"</expr></argument>, <argument><expr><call><name><name>iconPath</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>)</condition><then>
  <block>{
    <expr_stmt><expr><call><name><name>mStockIcon</name>.<name>Assign</name></name><argument_list>(<argument><expr><call><name>Substring</name><argument_list>(<argument><expr><name>iconPath</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><call><name>StringBeginsWith</name><argument_list>(<argument><expr><name>iconPath</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"//"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
  <block>{
    <comment type="line">// Sanity check this supposed dummy file name.</comment>
    <if>if <condition>(<expr><call><name><name>iconPath</name>.<name>Length</name></name><argument_list>()</argument_list></call> &gt; <name>SANE_FILE_NAME_LEN</name></expr>)</condition><then>
      <return>return <expr><name>NS_ERROR_MALFORMED_URI</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name><name>iconPath</name>.<name>Cut</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mFileName</name>.<name>Assign</name></name><argument_list>(<argument><expr><name>iconPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIIOService</name></expr></argument>&gt;</argument_list></name></type> <name>ioService</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_IOSERVICE_CONTRACTID</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>ioService</name>-&gt;<name>NewURI</name></name><argument_list>(<argument><expr><name>iconPath</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mIconURL</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>mIconURL</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>mFileName</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name><name>mFileName</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_MALFORMED_URI</name></expr>;</return></then></if></else></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>GetPrePath</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>prePath</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>prePath</name> = <name>MOZICON_SCHEME</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>GetScheme</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>aScheme</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>aScheme</name> = "moz-icon"</expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>SetScheme</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name> &amp;</type><name>aScheme</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// doesn't make sense to set the scheme of a moz-icon URL</comment>
  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>GetUsername</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>aUsername</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>SetUsername</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name> &amp;</type><name>aUsername</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>GetPassword</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>aPassword</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>SetPassword</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name> &amp;</type><name>aPassword</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>GetUserPass</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>aUserPass</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>SetUserPass</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name> &amp;</type><name>aUserPass</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>GetHostPort</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>aHostPort</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>SetHostPort</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name> &amp;</type><name>aHostPort</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>GetHost</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>aHost</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>SetHost</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name> &amp;</type><name>aHost</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>GetPort</name></name><parameter_list>(<param><decl><type><name>PRInt32</name> *</type><name>aPort</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>
 
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>SetPort</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aPort</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>GetPath</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>aPath</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aPath</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>SetPath</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name> &amp;</type><name>aPath</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>Equals</name></name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type><name>other</name></decl></param>, <param><decl><type><name>PRBool</name> *</type><name>result</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"null pointer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>spec1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>spec2</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>other</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>spec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GetSpec</name><argument_list>(<argument><expr><name>spec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<call><name>PL_strcasecmp</name><argument_list>(<argument><expr><call><name><name>spec1</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>spec2</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr>*<name>result</name> = <name>PR_TRUE</name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr>*<name>result</name> = <name>PR_FALSE</name></expr>;</expr_stmt></else></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>SchemeIs</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>i_Scheme</name></decl></param>, <param><decl><type><name>PRBool</name> *</type><name>o_Equals</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>o_Equals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>i_Scheme</name></expr>)</condition><then> <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return></then></if>
  
  <expr_stmt><expr>*<name>o_Equals</name> = <call><name>PL_strcasecmp</name><argument_list>(<argument><expr>"moz-icon"</expr></argument>, <argument><expr><name>i_Scheme</name></expr></argument>)</argument_list></call> ? <name>PR_FALSE</name> : <name>PR_TRUE</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>Clone</name></name><parameter_list>(<param><decl><type><name>nsIURI</name> **</type><name>result</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURL</name></expr></argument>&gt;</argument_list></name></type> <name>newIconURL</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>mIconURL</name></expr>)</condition><then>
  <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>newURI</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>mIconURL</name>-&gt;<name>Clone</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>newURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <return>return <expr><name>rv</name></expr>;</return></then></if>
    <expr_stmt><expr><name>newIconURL</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>newURI</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <return>return <expr><name>rv</name></expr>;</return></then></if>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsMozIconURI</name> *</type><name>uri</name> <init>= <expr>new <call><name>nsMozIconURI</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>uri</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>
 
  <expr_stmt><expr><call><name><name>newIconURL</name>.<name>swap</name></name><argument_list>(<argument><expr><name><name>uri</name>-&gt;<name>mIconURL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uri</name>-&gt;<name>mSize</name></name> = <name>mSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uri</name>-&gt;<name>mContentType</name></name> = <name>mContentType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uri</name>-&gt;<name>mFileName</name></name> = <name>mFileName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uri</name>-&gt;<name>mStockIcon</name></name> = <name>mStockIcon</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uri</name>-&gt;<name>mIconSize</name></name> = <name>mIconSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uri</name>-&gt;<name>mIconState</name></name> = <name>mIconState</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>result</name> = <name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>Resolve</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name> &amp;</type><name>relativePath</name></decl></param>, <param><decl><type><name>nsACString</name> &amp;</type><name>result</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>GetAsciiSpec</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>aSpecA</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetSpec</name><argument_list>(<argument><expr><name>aSpecA</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>GetAsciiHost</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>aHostA</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetHost</name><argument_list>(<argument><expr><name>aHostA</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>GetOriginCharset</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>result</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>result</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// nsIIconUri methods:</comment>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>GetIconURL</name></name><parameter_list>(<param><decl><type><name>nsIURL</name>* *</type> <name>aFileUrl</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aFileUrl</name> = <name>mIconURL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aFileUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>SetIconURL</name></name><parameter_list>(<param><decl><type><name>nsIURL</name>*</type> <name>aFileUrl</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// this isn't called anywhere, needs to go through SetSpec parsing</comment>
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>GetImageSize</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type> <name>aImageSize</name></decl></param>)</parameter_list>  <comment type="line">// measured by # of pixels in a row. defaults to 16.</comment>
<block>{
  <expr_stmt><expr>*<name>aImageSize</name> = <name>mSize</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>SetImageSize</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aImageSize</name></decl></param>)</parameter_list>  <comment type="line">// measured by # of pixels in a row. defaults to 16.</comment>
<block>{
  <expr_stmt><expr><name>mSize</name> = <name>aImageSize</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>GetContentType</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>aContentType</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>aContentType</name> = <name>mContentType</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>SetContentType</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name> &amp;</type><name>aContentType</name></decl></param>)</parameter_list> 
<block>{
  <expr_stmt><expr><name>mContentType</name> = <name>aContentType</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>GetFileExtension</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>aFileExtension</name></decl></param>)</parameter_list>  
<block>{
  <comment type="line">// First, try to get the extension from mIconURL if we have one</comment>
  <if>if <condition>(<expr><name>mIconURL</name></expr>)</condition><then>
  <block>{
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>fileExt</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>mIconURL</name>-&gt;<name>GetFileExtension</name></name><argument_list>(<argument><expr><name>fileExt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr>!<call><name><name>fileExt</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
      <block>{
        <comment type="line">// unfortunately, this code doesn't give us the required '.' in front of the extension</comment>
        <comment type="line">// so we have to do it ourselves..</comment>
        <expr_stmt><expr><call><name><name>aFileExtension</name>.<name>Assign</name></name><argument_list>(<argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>aFileExtension</name>.<name>Append</name></name><argument_list>(<argument><expr><name>fileExt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr>!<call><name><name>mFileName</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
  <block>{
    <comment type="line">// truncate the extension out of the file path...</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>chFileName</name> <init>= <expr><call><name><name>mFileName</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// get the underlying buffer</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>fileExt</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>chFileName</name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>fileExt</name></expr>)</condition><then>
      <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
    <expr_stmt><expr><name>aFileExtension</name> = <name>fileExt</name></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>GetStockIcon</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>aStockIcon</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>aStockIcon</name> = <name>mStockIcon</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>GetIconSize</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>aSize</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mIconSize</name> &gt;= 0</expr>)</condition><then>
    <expr_stmt><expr><name>aSize</name> = <name><name>kSizeStrings</name><index>[<expr><name>mIconSize</name></expr>]</index></name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name><name>aSize</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMozIconURI</name>::<name>GetIconState</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>aState</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mIconState</name> &gt;= 0</expr>)</condition><then>
    <expr_stmt><expr><name>aState</name> = <name><name>kStateStrings</name><index>[<expr><name>mIconState</name></expr>]</index></name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name><name>aState</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
</unit>
