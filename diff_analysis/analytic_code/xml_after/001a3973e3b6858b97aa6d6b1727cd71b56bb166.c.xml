<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="001a3973e3b6858b97aa6d6b1727cd71b56bb166.c"><comment type="block">/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code, released
 * March 31, 1998.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * This Original Code has been modified by IBM Corporation. Modifications made
 * by IBM described herein are Copyright (c) International Business Machines
 * Corporation, 2000.
 * Modifications to Mozilla code or documentation identified per MPL Section 3.3
 *
 * Date             Modified by     Description of modification
 * 04/20/2000       IBM Corp.      OS/2 VisualAge build.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<comment type="block">/*
 * This file is part of the Java-vendor-neutral implementation of LiveConnect
 *
 * It contains the native code implementation of JS's JavaObject class.
 *
 * An instance of JavaObject is the JavaScript reflection of a Java object.
 *
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsobj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsj_private.h"</cpp:file></cpp:include>      <comment type="block">/* LiveConnect internals */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsj_hash.h"</cpp:file></cpp:include>         <comment type="block">/* Hash table with Java object as key */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSJ_THREADSAFE</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prmon.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * This is a hash table that maps from Java objects to JS objects.
 * It is used to ensure that the same JS object is obtained when a Java
 * object is reflected more than once, so that JS object equality tests
 * work in the expected manner, i.e. the "==" and "===" operators.
 *
 * The table entry keys are Java objects (of type jobject) and the entry values
 * are JSObject pointers.  Because the jobject type is an opaque handle and
 * not necessarily a pointer, the hashing and key comparison functions must
 * invoke the appropriate JVM functions.
 *
 * When the corresponding JS object instance is finalized, the entry is
 * removed from the table, and a Java GC root for the Java object is removed.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>JSJHashTable</name> *</type><name>java_obj_reflections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSJ_THREADSAFE</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PRMonitor</name> *</type><name>java_obj_reflections_monitor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>java_obj_reflections_mutation_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>JSBool</name></type> <name>installed_GC_callback</name> <init>= <expr><name>JS_FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>JSGCCallback</name></type> <name>old_GC_callback</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>JavaObjectWrapper</name>*</type> <name>deferred_wrappers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>JSBool</name> <name>JS_DLL_CALLBACK</name></type> <name>jsj_GC_callback</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSGCStatus</name></type> <name>status</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>status</name> == <name>JSGC_END</name> &amp;&amp; <name>deferred_wrappers</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>JNIEnv</name> *</type><name>jEnv</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JSJavaThreadState</name> *</type><name>jsj_env</name> <init>= <expr><call><name>jsj_EnterJava</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>jEnv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>jEnv</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>JavaObjectWrapper</name>*</type> <name>java_wrapper</name> <init>= <expr><name>deferred_wrappers</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>java_wrapper</name></expr>)</condition> <block>{
                <expr_stmt><expr><name>deferred_wrappers</name> = <name><name>java_wrapper</name>-&gt;<name>u</name>.<name>next</name></name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>java_wrapper</name>-&gt;<name>java_obj</name></name></expr>)</condition><then>
                    <expr_stmt><expr><call><name>(*<name>jEnv</name>)-&gt;<name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name><name>java_wrapper</name>-&gt;<name>java_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><call><name>jsj_ReleaseJavaClassDescriptor</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name><name>java_wrapper</name>-&gt;<name>class_descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>java_wrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>java_wrapper</name> = <name>deferred_wrappers</name></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name>jsj_ExitJava</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <comment type="block">/* always chain to old GC callback if non-null. */</comment>
    <return>return <expr><name>old_GC_callback</name> ? <call><name>old_GC_callback</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call> : <name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>JSBool</name></type>
<name>jsj_InitJavaObjReflectionsTable</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name>java_obj_reflections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>java_obj_reflections</name> =
        <call><name>JSJ_NewHashTable</name><argument_list>(<argument><expr>512</expr></argument>, <argument><expr><name>jsj_HashJavaObject</name></expr></argument>, <argument><expr><name>jsj_JavaObjectComparator</name></expr></argument>,
                         <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>java_obj_reflections</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSJ_THREADSAFE</name></cpp:ifdef>
    <expr_stmt><expr><name>java_obj_reflections_monitor</name> = (struct <name>PRMonitor</name> *) <call><name>PR_NewMonitor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>java_obj_reflections_monitor</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JSJ_HashTableDestroy</name><argument_list>(<argument><expr><name>java_obj_reflections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>jsj_WrapJavaObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>,
                   <param><decl><type><name>JNIEnv</name> *</type><name>jEnv</name></decl></param>,
                   <param><decl><type><name>jobject</name></type> <name>java_obj</name></decl></param>,
                   <param><decl><type><name>jclass</name></type> <name>java_class</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSJHashNumber</name></type> <name>hash_code</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSClass</name> *</type><name>js_class</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>js_wrapper_obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JavaObjectWrapper</name> *</type><name>java_wrapper</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JavaClassDescriptor</name> *</type><name>class_descriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSJHashEntry</name> *</type><name>he</name></decl>, **<decl><type ref="prev"/><name>hep</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSJ_THREADSAFE</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int</name></type> <name>mutation_count</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>js_wrapper_obj</name> = <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>hash_code</name> = <call><name>jsj_HashJavaObject</name><argument_list>(<argument><expr>(<name>void</name>*)<name>java_obj</name></expr></argument>, <argument><expr>(<name>void</name>*)<name>jEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSJ_THREADSAFE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>PR_EnterMonitor</name><argument_list>(<argument><expr><name>java_obj_reflections_monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr>!<name>installed_GC_callback</name></expr>)</condition><then> <block>{
        <comment type="block">/*
         * Hook into GC callback mechanism, so we can defer deleting global
         * references until it's safe.
         */</comment>
        <expr_stmt><expr><name>old_GC_callback</name> =  <call><name>JS_SetGCCallback</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jsj_GC_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>installed_GC_callback</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>hep</name> = <call><name>JSJ_HashTableRawLookup</name><argument_list>(<argument><expr><name>java_obj_reflections</name></expr></argument>,
                                 <argument><expr><name>hash_code</name></expr></argument>, <argument><expr><name>java_obj</name></expr></argument>, <argument><expr>(<name>void</name>*)<name>jEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>he</name> = *<name>hep</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSJ_THREADSAFE</name></cpp:ifdef>
    <comment type="block">/* Track mutations to hash table */</comment>
    <expr_stmt><expr><name>mutation_count</name> = <name>java_obj_reflections_mutation_count</name></expr>;</expr_stmt>

    <comment type="block">/* We must temporarily release this monitor so as to avoid
       deadlocks with the JS GC.  See Bugsplat #354852 */</comment>
    <expr_stmt><expr><call><name>PR_ExitMonitor</name><argument_list>(<argument><expr><name>java_obj_reflections_monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr><name>he</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>js_wrapper_obj</name> = (<name>JSObject</name> *)<name><name>he</name>-&gt;<name>value</name></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>js_wrapper_obj</name></expr>)</condition><then>
            <return>return <expr><name>js_wrapper_obj</name></expr>;</return></then></if>
    }</block></then></if>

    <comment type="block">/* No existing reflection found.  Construct a new one */</comment>
    <expr_stmt><expr><name>class_descriptor</name> = <call><name>jsj_GetJavaClassDescriptor</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name>java_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>class_descriptor</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name><name>class_descriptor</name>-&gt;<name>type</name></name> == <name>JAVA_SIGNATURE_ARRAY</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>js_class</name> = &amp;<name>JavaArray_class</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>IS_OBJECT_TYPE</name><argument_list>(<argument><expr><name><name>class_descriptor</name>-&gt;<name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>js_class</name> = &amp;<name>JavaObject_class</name></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="block">/* Create new JS object to reflect Java object */</comment>
    <expr_stmt><expr><name>js_wrapper_obj</name> = <call><name>JS_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_class</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>js_wrapper_obj</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <comment type="block">/* Create private, native portion of JavaObject */</comment>
    <expr_stmt><expr><name>java_wrapper</name> =
        (<name>JavaObjectWrapper</name> *)<call><name>JS_malloc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JavaObjectWrapper</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>java_wrapper</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>jsj_ReleaseJavaClassDescriptor</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name>class_descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>JS_SetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_wrapper_obj</name></expr></argument>, <argument><expr><name>java_wrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>java_wrapper</name>-&gt;<name>class_descriptor</name></name> = <name>class_descriptor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>java_wrapper</name>-&gt;<name>java_obj</name></name> = <name>NULL</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSJ_THREADSAFE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>PR_EnterMonitor</name><argument_list>(<argument><expr><name>java_obj_reflections_monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* We may need to do the hash table lookup again, since some other
       thread may have updated it while the lock wasn't being held. */</comment>
    <if>if <condition>(<expr><name>mutation_count</name> != <name>java_obj_reflections_mutation_count</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>hep</name> = <call><name>JSJ_HashTableRawLookup</name><argument_list>(<argument><expr><name>java_obj_reflections</name></expr></argument>,
                                     <argument><expr><name>hash_code</name></expr></argument>, <argument><expr><name>java_obj</name></expr></argument>, <argument><expr>(<name>void</name>*)<name>jEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>he</name> = *<name>hep</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>he</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>js_wrapper_obj</name> = (<name>JSObject</name> *)<name><name>he</name>-&gt;<name>value</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>js_wrapper_obj</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PR_ExitMonitor</name><argument_list>(<argument><expr><name>java_obj_reflections_monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>js_wrapper_obj</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><name>java_obj_reflections_mutation_count</name>++</expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>java_obj</name> = <call><name>(*<name>jEnv</name>)-&gt;<name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name>java_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>java_wrapper</name>-&gt;<name>java_obj</name></name> = <name>java_obj</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>java_obj</name></expr>)</condition><then>
        <goto>goto <name>out_of_memory</name>;</goto></then></if>

    <comment type="block">/* cache the hash code for all time. */</comment>
    <expr_stmt><expr><name><name>java_wrapper</name>-&gt;<name>u</name>.<name>hash_code</name></name> = <name>hash_code</name></expr>;</expr_stmt>

    <comment type="block">/* Add the JavaObject to the hash table */</comment>
    <expr_stmt><expr><name>he</name> = <call><name>JSJ_HashTableRawAdd</name><argument_list>(<argument><expr><name>java_obj_reflections</name></expr></argument>, <argument><expr><name>hep</name></expr></argument>, <argument><expr><name>hash_code</name></expr></argument>,
                             <argument><expr><name>java_obj</name></expr></argument>, <argument><expr><name>js_wrapper_obj</name></expr></argument>, <argument><expr>(<name>void</name>*)<name>jEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSJ_THREADSAFE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>PR_ExitMonitor</name><argument_list>(<argument><expr><name>java_obj_reflections_monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr>!<name>he</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>(*<name>jEnv</name>)-&gt;<name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name>java_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>out_of_memory</name>;</goto>
    }</block></then></if>

    <return>return <expr><name>js_wrapper_obj</name></expr>;</return>

<label><name>out_of_memory</name>:</label>
    <comment type="block">/* No need to free js_wrapper_obj, as it will be finalized by GC. */</comment>
    <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>remove_java_obj_reflection_from_hashtable</name><parameter_list>(<param><decl><type><name>jobject</name></type> <name>java_obj</name></decl></param>, <param><decl><type><name>JSJHashNumber</name></type> <name>hash_code</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSJHashEntry</name> *</type><name>he</name></decl>, **<decl><type ref="prev"/><name>hep</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSJ_THREADSAFE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>PR_EnterMonitor</name><argument_list>(<argument><expr><name>java_obj_reflections_monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>hep</name> = <call><name>JSJ_HashTableRawLookup</name><argument_list>(<argument><expr><name>java_obj_reflections</name></expr></argument>, <argument><expr><name>hash_code</name></expr></argument>,
                                 <argument><expr><name>java_obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>he</name> = *<name>hep</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>he</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>he</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JSJ_HashTableRawRemove</name><argument_list>(<argument><expr><name>java_obj_reflections</name></expr></argument>, <argument><expr><name>hep</name></expr></argument>, <argument><expr><name>he</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSJ_THREADSAFE</name></cpp:ifdef>
    <expr_stmt><expr><name>java_obj_reflections_mutation_count</name>++</expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PR_ExitMonitor</name><argument_list>(<argument><expr><name>java_obj_reflections_monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<macro><name>JS_EXPORT_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>JavaObject_finalize</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JavaObjectWrapper</name> *</type><name>java_wrapper</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jobject</name></type> <name>java_obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JNIEnv</name> *</type><name>jEnv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSJavaThreadState</name> *</type><name>jsj_env</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>java_wrapper</name> = <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>java_wrapper</name></expr>)</condition><then>
        <return>return;</return></then></if>
    <expr_stmt><expr><name>java_obj</name> = <name><name>java_wrapper</name>-&gt;<name>java_obj</name></name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>java_obj</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>remove_java_obj_reflection_from_hashtable</name><argument_list>(<argument><expr><name>java_obj</name></expr></argument>, <argument><expr><name><name>java_wrapper</name>-&gt;<name>u</name>.<name>hash_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* defer releasing global refs until it is safe to do so. */</comment>
        <expr_stmt><expr><name><name>java_wrapper</name>-&gt;<name>u</name>.<name>next</name></name> = <name>deferred_wrappers</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>deferred_wrappers</name> = <name>java_wrapper</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>jsj_env</name> = <call><name>jsj_EnterJava</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>jEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>jEnv</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>jsj_ReleaseJavaClassDescriptor</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name><name>java_wrapper</name>-&gt;<name>class_descriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>java_wrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>jsj_ExitJava</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>java_wrapper</name>-&gt;<name>u</name>.<name>next</name></name> = <name>deferred_wrappers</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>deferred_wrappers</name> = <name>java_wrapper</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>
}</block>

<comment type="block">/* Trivial helper for jsj_DiscardJavaObjReflections(), below */</comment>
<function><type><specifier>static</specifier> <name>JSIntn</name></type>
<name>enumerate_remove_java_obj</name><parameter_list>(<param><decl><type><name>JSJHashEntry</name> *</type><name>he</name></decl></param>, <param><decl><type><name>JSIntn</name></type> <name>i</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSJavaThreadState</name> *</type><name>jsj_env</name> <init>= <expr>(<name>JSJavaThreadState</name> *)<name>arg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JNIEnv</name> *</type><name>jEnv</name> <init>= <expr><name><name>jsj_env</name>-&gt;<name>jEnv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jobject</name></type> <name>java_obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JavaObjectWrapper</name> *</type><name>java_wrapper</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>java_wrapper_obj</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>java_wrapper_obj</name> = (<name>JSObject</name> *)<name><name>he</name>-&gt;<name>value</name></name></expr>;</expr_stmt>

    <comment type="block">/* Warning: NULL argument may cause assertion in JS engine, but it's actually OK */</comment>
    <expr_stmt><expr><name>java_wrapper</name> = <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name><name>jsj_env</name>-&gt;<name>cx</name></name></expr></argument>, <argument><expr><name>java_wrapper_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>java_obj</name> = <name><name>java_wrapper</name>-&gt;<name>java_obj</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>(*<name>jEnv</name>)-&gt;<name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name>java_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>java_wrapper</name>-&gt;<name>java_obj</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>HT_ENUMERATE_REMOVE</name></expr>;</return>
}</block></function>

<comment type="block">/* This shutdown routine discards all JNI references to Java objects
   that have been reflected into JS, even if there are still references
   to them from JS. */</comment>
<function><type><name>void</name></type>
<name>jsj_DiscardJavaObjReflections</name><parameter_list>(<param><decl><type><name>JNIEnv</name> *</type><name>jEnv</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSJavaThreadState</name> *</type><name>jsj_env</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>err_msg</name></decl>;</decl_stmt>

    <comment type="block">/* Get the per-thread state corresponding to the current Java thread */</comment>
    <expr_stmt><expr><name>jsj_env</name> = <call><name>jsj_MapJavaThreadToJSJavaThreadState</name><argument_list>(<argument><expr><name>jEnv</name></expr></argument>, <argument><expr>&amp;<name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>jsj_env</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>err_msg</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>jsj_LogError</name><argument_list>(<argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_smprintf_free</name><argument_list>(<argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>java_obj_reflections</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JSJ_HashTableEnumerateEntries</name><argument_list>(<argument><expr><name>java_obj_reflections</name></expr></argument>,
                                      <argument><expr><name>enumerate_remove_java_obj</name></expr></argument>,
                                      <argument><expr>(<name>void</name>*)<name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JSJ_HashTableDestroy</name><argument_list>(<argument><expr><name>java_obj_reflections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>java_obj_reflections</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>JSBool</name> <name>JS_DLL_CALLBACK</name></type>
<name>JavaObject_convert</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>JSType</name></type> <name>type</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JavaObjectWrapper</name> *</type><name>java_wrapper</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JavaClassDescriptor</name> *</type><name>class_descriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jobject</name></type> <name>java_obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JNIEnv</name> *</type><name>jEnv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSJavaThreadState</name> *</type><name>jsj_env</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>java_wrapper</name> = <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>java_wrapper</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>type</name> == <name>JSTYPE_OBJECT</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_TRUE</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jsj_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><name>JSJMSG_BAD_OP_JOBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>java_obj</name> = <name><name>java_wrapper</name>-&gt;<name>java_obj</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>class_descriptor</name> = <name><name>java_wrapper</name>-&gt;<name>class_descriptor</name></name></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
    <case>case <expr><name>JSTYPE_OBJECT</name></expr>:
        <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>

    </case><case>case <expr><name>JSTYPE_FUNCTION</name></expr>:
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jsj_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><name>JSJMSG_CONVERT_TO_FUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>

    </case><case>case <expr><name>JSTYPE_VOID</name></expr>:
    </case><case>case <expr><name>JSTYPE_STRING</name></expr>:
        <comment type="block">/* Get the Java per-thread environment pointer for this JSContext */</comment>
        <expr_stmt><expr><name>jsj_env</name> = <call><name>jsj_EnterJava</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>jEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>jEnv</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

        <comment type="block">/* Either extract a C-string from the java.lang.String object
           or call the Java toString() method */</comment>
        <expr_stmt><expr><name>result</name> = <call><name>jsj_ConvertJavaObjectToJSString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name>class_descriptor</name></expr></argument>, <argument><expr><name>java_obj</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>jsj_ExitJava</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>

    </case><case>case <expr><name>JSTYPE_NUMBER</name></expr>:
        <comment type="block">/* Get the Java per-thread environment pointer for this JSContext */</comment>
        <expr_stmt><expr><name>jsj_env</name> = <call><name>jsj_EnterJava</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>jEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>jEnv</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

        <comment type="block">/* Call Java doubleValue() method, if applicable */</comment>
        <expr_stmt><expr><name>result</name> = <call><name>jsj_ConvertJavaObjectToJSNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name>class_descriptor</name></expr></argument>, <argument><expr><name>java_obj</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>jsj_ExitJava</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>

    </case><case>case <expr><name>JSTYPE_BOOLEAN</name></expr>:
        <comment type="block">/* Get the Java per-thread environment pointer for this JSContext */</comment>
        <expr_stmt><expr><name>jsj_env</name> = <call><name>jsj_EnterJava</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>jEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>jEnv</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

        <comment type="block">/* Call booleanValue() method, if applicable */</comment>
        <expr_stmt><expr><name>result</name> = <call><name>jsj_ConvertJavaObjectToJSBoolean</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name>class_descriptor</name></expr></argument>, <argument><expr><name>java_obj</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>jsj_ExitJava</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>

    </case><default>default:
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    </default>}</block></switch>
}</block></function>

<comment type="block">/*
 * Get a property from the prototype object of a native ECMA object, i.e.
 * return &lt;js_constructor_name&gt;.prototype.&lt;member_name&gt;
 * This is used to allow Java objects to inherit methods from Array.prototype
 * and String.prototype.
 */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>inherit_props_from_JS_natives</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>js_constructor_name</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>member_name</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>global_obj</name></decl>, *<decl><type ref="prev"/><name>constructor_obj</name></decl>, *<decl><type ref="prev"/><name>prototype_obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>constructor_val</name></decl>, <decl><type ref="prev"/><name>prototype_val</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>global_obj</name> = <call><name>JS_GetGlobalObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>global_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>global_obj</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>JS_GetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>global_obj</name></expr></argument>, <argument><expr><name>js_constructor_name</name></expr></argument>, <argument><expr>&amp;<name>constructor_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_OBJECT</name><argument_list>(<argument><expr><name>constructor_val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>constructor_obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>constructor_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>JS_GetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>constructor_obj</name></expr></argument>, <argument><expr>"prototype"</expr></argument>, <argument><expr>&amp;<name>prototype_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_OBJECT</name><argument_list>(<argument><expr><name>prototype_val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>prototype_obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>prototype_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>JS_GetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prototype_obj</name></expr></argument>, <argument><expr><name>member_name</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>vp</name> != <name>JSVAL_VOID</name></expr>;</return>
}</block></function>

<struct>struct <name>JSJPropertyInfo</name> <block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>wantProp</name></decl>;</decl_stmt>            <comment type="block">/* input param tells whether prop is returned */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>name</name></decl>;</decl_stmt>           <comment type="block">/* output param, name of property (XXX ASCII) */</comment>
    <decl_stmt><decl><type><name>uintN</name></type> <name>attributes</name></decl>;</decl_stmt>           <comment type="block">/* output param, attributes of property */</comment>
    <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>           <comment type="block">/* output param, if wantProp, held pointer that
                                   must be released via OBJ_DROP_PROPERTY */</comment>
}</block>;</struct>
<typedef>typedef <type>struct <name>JSJPropertyInfo</name></type> <name>JSJPropertyInfo</name>;</typedef>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>lookup_member_by_id</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JNIEnv</name> *</type><name>jEnv</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>,
                    <param><decl><type><name>JavaObjectWrapper</name> **</type><name>java_wrapperp</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>,
                    <param><decl><type><name>JavaMemberDescriptor</name> **</type><name>member_descriptorp</name></decl></param>,
                    <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>, <param><decl><type><name>JSObject</name> **</type><name>proto_chainp</name></decl></param>,
                    <param><decl><type><name>JSJPropertyInfo</name> *</type><name>prop_infop</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>idval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JavaObjectWrapper</name> *</type><name>java_wrapper</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JavaMemberDescriptor</name> *</type><name>member_descriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>member_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JavaClassDescriptor</name> *</type><name>class_descriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>proto_chain</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>found_in_proto</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>found_in_proto</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>member_descriptor</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>java_wrapper</name> = <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Handle accesses to prototype object */</comment>
    <if>if <condition>(<expr>!<name>java_wrapper</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>JS_IdToValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>idval</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>idval</name></expr></argument>)</argument_list></call> &amp;&amp;
            (<name>member_name</name> = <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>idval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>member_name</name></expr></argument>, <argument><expr>"constructor"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <goto>goto <name>done</name>;</goto></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jsj_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSJMSG_BAD_OP_JOBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>class_descriptor</name> = <name><name>java_wrapper</name>-&gt;<name>class_descriptor</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>IS_REFERENCE_TYPE</name><argument_list>(<argument><expr><name><name>class_descriptor</name>-&gt;<name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>member_descriptor</name> = <call><name>jsj_LookupJavaMemberDescriptorById</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name>class_descriptor</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>member_descriptor</name></expr>)</condition><then>
        <goto>goto <name>done</name>;</goto></then></if>

    <comment type="block">/* Instances can reference static methods and fields */</comment>
    <expr_stmt><expr><name>member_descriptor</name> = <call><name>jsj_LookupJavaStaticMemberDescriptorById</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name>class_descriptor</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>member_descriptor</name></expr>)</condition><then>
        <goto>goto <name>done</name>;</goto></then></if>

    <comment type="block">/* Ensure that the property we're searching for is string-valued. */</comment>
    <expr_stmt><expr><call><name>JS_IdToValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>idval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>idval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jsj_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSJMSG_BAD_JOBJECT_EXPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>member_name</name> = <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>idval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * A little LC3 feature magic:
     *   + Instances of java.lang.String "inherit" the standard ECMA string methods
     *     of String.prototype.  All of the ECMA string methods convert the Java
     *     string to a JS string before performing the string operation.  For example,
     *         s = new java.lang.String("foobar");
     *         return s.slice(2);
     *   + Similarly, instances of Java arrays "inherit" the standard ECMA array
     *     methods of Array.prototype.  (Not all of these methods work properly
     *     on JavaArray objects, however, since the 'length' property is read-only.)
     */</comment>
    <if>if <condition>(<expr><name>vp</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>(<name><name>class_descriptor</name>-&gt;<name>type</name></name> == <name>JAVA_SIGNATURE_JAVA_LANG_STRING</name>) &amp;&amp;
            <call><name>inherit_props_from_JS_natives</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"String"</expr></argument>, <argument><expr><name>member_name</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>done</name>;</goto></then></if>
        <if>if <condition>(<expr>(<name><name>class_descriptor</name>-&gt;<name>type</name></name> == <name>JAVA_SIGNATURE_ARRAY</name>) &amp;&amp;
            <call><name>inherit_props_from_JS_natives</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"Array"</expr></argument>, <argument><expr><name>member_name</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>done</name>;</goto></then></if>
    }</block></then></if>

    <comment type="block">/* Check for access to magic prototype chain property */</comment>
    <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>member_name</name></expr></argument>, <argument><expr>"__proto__"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>proto_chain</name> = <call><name>JS_GetPrototype</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>vp</name></expr>)</condition><then>
            <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>proto_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <goto>goto <name>done</name>;</goto>
    }</block></then></if>

    <comment type="block">/*
     * See if the property looks like the explicit resolution of an
     * overloaded method, e.g. "max(double,double)", first as an instance method,
     * then as a static method.  If we find such a method, it will be cached
     * so future accesses won't run this code.
     */</comment>
    <expr_stmt><expr><name>member_descriptor</name> = <call><name>jsj_ResolveExplicitMethod</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name>class_descriptor</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>member_descriptor</name></expr>)</condition><then>
        <goto>goto <name>done</name>;</goto></then></if>
    <expr_stmt><expr><name>member_descriptor</name> = <call><name>jsj_ResolveExplicitMethod</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name>class_descriptor</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>member_descriptor</name></expr>)</condition><then>
        <goto>goto <name>done</name>;</goto></then></if>

    <comment type="block">/* Is the property defined in the prototype chain? */</comment>
    <if>if <condition>(<expr><name>proto_chainp</name> &amp;&amp; <name>prop_infop</name></expr>)</condition><then> <block>{
        <comment type="block">/* If so, follow __proto__ link to search prototype chain */</comment>
        <expr_stmt><expr><name>proto_chain</name> = <call><name>JS_GetPrototype</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Use OBJ_LOOKUP_PROPERTY to determine if and where the property
           actually exists in the prototype chain. */</comment>
        <if>if <condition>(<expr><name>proto_chain</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name>OBJ_LOOKUP_PROPERTY</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>proto_chain</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>proto_chainp</name></expr></argument>,
                                     <argument><expr>&amp;<name><name>prop_infop</name>-&gt;<name>prop</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>JS_FALSE</name></expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><name><name>prop_infop</name>-&gt;<name>prop</name></name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>!<call><name>OBJ_GET_ATTRIBUTES</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>proto_chainp</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>prop_infop</name>-&gt;<name>prop</name></name></expr></argument>,
                                        <argument><expr>&amp;<name><name>prop_infop</name>-&gt;<name>attributes</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>OBJ_DROP_PROPERTY</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>proto_chainp</name></expr></argument>, <argument><expr><name><name>prop_infop</name>-&gt;<name>prop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return>
                }</block></then></if>
                <if>if <condition>(<expr>!<name><name>prop_infop</name>-&gt;<name>wantProp</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>OBJ_DROP_PROPERTY</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>proto_chainp</name></expr></argument>, <argument><expr><name><name>prop_infop</name>-&gt;<name>prop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>prop_infop</name>-&gt;<name>prop</name></name> = <name>NULL</name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name><name>prop_infop</name>-&gt;<name>name</name></name> = <name>member_name</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>found_in_proto</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
                <goto>goto <name>done</name>;</goto>
            }</block></then></if>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/* Report lack of Java member with the given property name */</comment>
    <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jsj_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSJMSG_NO_INSTANCE_NAME</name></expr></argument>,
                         <argument><expr><name><name>class_descriptor</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>member_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_FALSE</name></expr>;</return>

<label><name>done</name>:</label>
    <comment type="block">/* Success.  Handle the multiple return values */</comment>
    <if>if <condition>(<expr><name>java_wrapperp</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>java_wrapperp</name> = <name>java_wrapper</name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>member_descriptorp</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>member_descriptorp</name> = <name>member_descriptor</name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>proto_chainp</name> &amp;&amp; !<name>found_in_proto</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>proto_chainp</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<macro><name>JS_EXPORT_API</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JavaObject_getPropertyById</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>jobject</name></type> <name>java_obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JavaMemberDescriptor</name> *</type><name>member_descriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JavaObjectWrapper</name> *</type><name>java_wrapper</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JNIEnv</name> *</type><name>jEnv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>funobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>field_val</name></decl>, <decl><type ref="prev"/><name>method_val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>success</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSJavaThreadState</name> *</type><name>jsj_env</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>proto_chain</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSJPropertyInfo</name></type> <name>prop_info</name></decl>;</decl_stmt>

    <comment type="block">/* printf("In JavaObject_getProperty\n"); */</comment>

    <comment type="block">/* Get the Java per-thread environment pointer for this JSContext */</comment>
    <expr_stmt><expr><name>jsj_env</name> = <call><name>jsj_EnterJava</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>jEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>jEnv</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>vp</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>vp</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name><name>prop_info</name>.<name>wantProp</name></name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>lookup_member_by_id</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name>java_wrapper</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>member_descriptor</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>,
                             <argument><expr>&amp;<name>proto_chain</name></expr></argument>, <argument><expr>&amp;<name>prop_info</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>jsj_ExitJava</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Handle access to special, non-Java properties of JavaObjects, e.g. the
       "constructor" property of the prototype object */</comment>
    <if>if <condition>(<expr>!<name>member_descriptor</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>jsj_ExitJava</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>proto_chain</name></expr>)</condition><then>
            <return>return <expr><call><name>JS_GetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>proto_chain</name></expr></argument>, <argument><expr><name><name>prop_info</name>.<name>name</name></name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>java_obj</name> = <name><name>java_wrapper</name>-&gt;<name>java_obj</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>field_val</name> = <name>method_val</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>jaApplet</name> &amp;&amp; <call><name>(*<name>jEnv</name>)-&gt;<name>IsInstanceOf</name></name><argument_list>(<argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name>java_obj</name></expr></argument>, <argument><expr><name>jaApplet</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>jsj_JSIsCallingApplet</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* If a field member, get the value of the field */</comment>
    <if>if <condition>(<expr><name><name>member_descriptor</name>-&gt;<name>field</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>success</name> = <call><name>jsj_GetJavaFieldValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name><name>member_descriptor</name>-&gt;<name>field</name></name></expr></argument>, <argument><expr><name>java_obj</name></expr></argument>, <argument><expr>&amp;<name>field_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>success</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>jsj_ExitJava</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/* If a method member, build a wrapper around the Java method */</comment>
    <if>if <condition>(<expr><name><name>member_descriptor</name>-&gt;<name>methods</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* Create a function object with this JavaObject as its parent, so that
           JSFUN_BOUND_METHOD binds it as the default 'this' for the function. */</comment>
        <expr_stmt><expr><name>funobj</name> = <call><name>JS_CloneFunctionObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>member_descriptor</name>-&gt;<name>invoke_func_obj</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>funobj</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>jsj_ExitJava</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>method_val</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>funobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEST_JAVAMEMBER</name></expr></cpp:if>
    <comment type="block">/* Always create a JavaMember object, even though it's inefficient */</comment>
    <expr_stmt><expr><name>obj</name> = <call><name>jsj_CreateJavaMember</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>method_val</name></expr></argument>, <argument><expr><name>field_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>jsj_ExitJava</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>   <comment type="block">/* !TEST_JAVAMEMBER */</comment>

    <if>if <condition>(<expr><name><name>member_descriptor</name>-&gt;<name>field</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<name><name>member_descriptor</name>-&gt;<name>methods</name></name></expr>)</condition><then> <block>{
            <comment type="block">/* Return value of Java field */</comment>
            <expr_stmt><expr>*<name>vp</name> = <name>field_val</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="block">/* Handle special case of access to a property that could refer
               to either a Java field or a method that share the same name.
               In Java, such ambiguity is not possible because the compiler
               can statically determine which is being accessed. */</comment>
            <expr_stmt><expr><name>obj</name> = <call><name>jsj_CreateJavaMember</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>method_val</name></expr></argument>, <argument><expr><name>field_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>jsj_ExitJava</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>JS_FALSE</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

    }</block></then> <else>else <block>{
        <comment type="block">/* Return wrapper around Java method */</comment>
        <expr_stmt><expr>*<name>vp</name> = <name>method_val</name></expr>;</expr_stmt>
    }</block></else></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* !TEST_JAVAMEMBER */</comment>

    <expr_stmt><expr><call><name>jsj_ExitJava</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block>

<macro><name>JS_STATIC_DLL_CALLBACK</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JavaObject_setPropertyById</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>jobject</name></type> <name>java_obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>member_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JavaObjectWrapper</name> *</type><name>java_wrapper</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JavaClassDescriptor</name> *</type><name>class_descriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JavaMemberDescriptor</name> *</type><name>member_descriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>idval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JNIEnv</name> *</type><name>jEnv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSJavaThreadState</name> *</type><name>jsj_env</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>proto_chain</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSJPropertyInfo</name></type> <name>prop_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>result</name></decl>;</decl_stmt>

    <comment type="block">/* printf("In JavaObject_setProperty\n"); */</comment>

    <comment type="block">/* Get the Java per-thread environment pointer for this JSContext */</comment>
    <expr_stmt><expr><name>jsj_env</name> = <call><name>jsj_EnterJava</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>jEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>jEnv</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name><name>prop_info</name>.<name>wantProp</name></name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>lookup_member_by_id</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name>java_wrapper</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>member_descriptor</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr>&amp;<name>proto_chain</name></expr></argument>, <argument><expr>&amp;<name>prop_info</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>jsj_ExitJava</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Could be assignment to magic JS __proto__ property rather than a Java field */</comment>
    <if>if <condition>(<expr>!<name>member_descriptor</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>proto_chain</name> &amp;&amp; (<name><name>prop_info</name>.<name>attributes</name></name> &amp; <name>JSPROP_SHARED</name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_SetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>proto_chain</name></expr></argument>, <argument><expr><name><name>prop_info</name>.<name>name</name></name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>JS_IdToValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>idval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>idval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <goto>goto <name>no_such_field</name>;</goto></then></if>
            <expr_stmt><expr><name>member_name</name> = <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>idval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>member_name</name></expr></argument>, <argument><expr>"__proto__"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <goto>goto <name>no_such_field</name>;</goto></then></if>
            <if>if <condition>(<expr>!<call><name>JSVAL_IS_OBJECT</name><argument_list>(<argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jsj_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr><name>JSJMSG_BAD_PROTO_ASSIGNMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>jsj_ExitJava</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>JS_FALSE</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><call><name>JS_SetPrototype</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>jsj_ExitJava</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Check for the case where there is a method with the given name, but no field
       with that name */</comment>
    <if>if <condition>(<expr>!<name><name>member_descriptor</name>-&gt;<name>field</name></name></expr>)</condition><then>
        <goto>goto <name>no_such_field</name>;</goto></then></if>

    <comment type="block">/* Silently fail if field value is final (immutable), as required by ECMA spec */</comment>
    <if>if <condition>(<expr><name><name>member_descriptor</name>-&gt;<name>field</name>-&gt;<name>modifiers</name></name> &amp; <name>ACC_FINAL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>jsj_ExitJava</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>java_obj</name> = <name><name>java_wrapper</name>-&gt;<name>java_obj</name></name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>jaApplet</name> &amp;&amp; <call><name>(*<name>jEnv</name>)-&gt;<name>IsInstanceOf</name></name><argument_list>(<argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name>java_obj</name></expr></argument>, <argument><expr><name>jaApplet</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>jsj_JSIsCallingApplet</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>result</name> = <call><name>jsj_SetJavaFieldValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name><name>member_descriptor</name>-&gt;<name>field</name></name></expr></argument>, <argument><expr><name>java_obj</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>jsj_ExitJava</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>

<label><name>no_such_field</name>:</label>
    <expr_stmt><expr><call><name>JS_IdToValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>idval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>member_name</name> = <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>idval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>class_descriptor</name> = <name><name>java_wrapper</name>-&gt;<name>class_descriptor</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jsj_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                         <argument><expr><name>JSJMSG_NO_NAME_IN_CLASS</name></expr></argument>,
                         <argument><expr><name>member_name</name></expr></argument>, <argument><expr><name><name>class_descriptor</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>jsj_ExitJava</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_FALSE</name></expr>;</return>
}</block>

<macro><name>JS_STATIC_DLL_CALLBACK</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JavaObject_lookupProperty</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>,
                         <argument>JSObject **objp</argument>, <argument>JSProperty **propp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JNIEnv</name> *</type><name>jEnv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSErrorReporter</name></type> <name>old_reporter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>dummy_val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>proto_chain</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSJPropertyInfo</name></type> <name>prop_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSJavaThreadState</name> *</type><name>jsj_env</name></decl>;</decl_stmt>

    <comment type="block">/* printf("In JavaObject_lookupProperty()\n"); */</comment>

    <comment type="block">/* Get the Java per-thread environment pointer for this JSContext */</comment>
    <expr_stmt><expr><name>jsj_env</name> = <call><name>jsj_EnterJava</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>jEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>jEnv</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>old_reporter</name> = <call><name>JS_SetErrorReporter</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>prop_info</name>.<name>wantProp</name></name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>lookup_member_by_id</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>dummy_val</name></expr></argument>,
                            <argument><expr>&amp;<name>proto_chain</name></expr></argument>, <argument><expr>&amp;<name>prop_info</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* signify that the property is in the prototype chain or the object itself. */</comment>
        <if>if <condition>(<expr><name>proto_chain</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>objp</name> = <name>proto_chain</name></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>propp</name> = <name><name>prop_info</name>.<name>prop</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr>*<name>objp</name> = <name>obj</name></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>propp</name> = (<name>JSProperty</name>*)1</expr>;</expr_stmt>
        }</block></else></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr>*<name>objp</name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>propp</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name>JS_SetErrorReporter</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>old_reporter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>jsj_ExitJava</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block>

<macro><name>JS_STATIC_DLL_CALLBACK</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JavaObject_defineProperty</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>, <argument>jsval value</argument>,
                         <argument>JSPropertyOp getter</argument>, <argument>JSPropertyOp setter</argument>,
                         <argument>uintN attrs</argument>, <argument>JSProperty **propp</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jsj_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                         <argument><expr><name>JSJMSG_JOBJECT_PROP_DEFINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_FALSE</name></expr>;</return>
}</block>

<macro><name>JS_STATIC_DLL_CALLBACK</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JavaObject_getAttributes</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>,
                        <argument>JSProperty *prop</argument>, <argument>uintN *attrsp</argument>)</argument_list></macro>
<block>{
    <comment type="block">/* We don't maintain JS property attributes for Java class members */</comment>
    <expr_stmt><expr>*<name>attrsp</name> = <name>JSPROP_PERMANENT</name>|<name>JSPROP_ENUMERATE</name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block>

<macro><name>JS_STATIC_DLL_CALLBACK</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JavaObject_setAttributes</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>,
                        <argument>JSProperty *prop</argument>, <argument>uintN *attrsp</argument>)</argument_list></macro>
<block>{
    <comment type="block">/* We don't maintain JS property attributes for Java class members */</comment>
    <if>if <condition>(<expr>*<name>attrsp</name> != (<name>JSPROP_PERMANENT</name>|<name>JSPROP_ENUMERATE</name>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Silently ignore all setAttribute attempts */</comment>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block>

<macro><name>JS_STATIC_DLL_CALLBACK</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JavaObject_deleteProperty</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSVersion</name></type> <name>version</name> <init>= <expr><call><name>JS_GetVersion</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr>*<name>vp</name> = <name>JSVAL_FALSE</name></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>JSVERSION_IS_ECMA</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jsj_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                        <argument><expr><name>JSJMSG_JOBJECT_PROP_DELETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then> <else>else <block>{
        <comment type="block">/* Attempts to delete permanent properties are silently ignored
           by ECMAScript. */</comment>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></else></if>
}</block>

<macro><name>JS_STATIC_DLL_CALLBACK</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JavaObject_defaultValue</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>JSType type</argument>, <argument>jsval *vp</argument>)</argument_list></macro>
<block>{
    <comment type="block">/* printf("In JavaObject_defaultValue()\n"); */</comment>
    <return>return <expr><call><name>JavaObject_convert</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>JS_STATIC_DLL_CALLBACK</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JavaObject_newEnumerate</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>JSIterateOp enum_op</argument>,
                        <argument>jsval *statep</argument>, <argument>jsid *idp</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JavaObjectWrapper</name> *</type><name>java_wrapper</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JavaMemberDescriptor</name> *</type><name>member_descriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JavaClassDescriptor</name> *</type><name>class_descriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JNIEnv</name> *</type><name>jEnv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSJavaThreadState</name> *</type><name>jsj_env</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>java_wrapper</name> = <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Check for prototype object */</comment>
    <if>if <condition>(<expr>!<name>java_wrapper</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>statep</name> = <name>JSVAL_NULL</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>idp</name></expr>)</condition><then>
            <expr_stmt><expr>*<name>idp</name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>class_descriptor</name> = <name><name>java_wrapper</name>-&gt;<name>class_descriptor</name></name></expr>;</expr_stmt>

    <switch>switch<condition>(<expr><name>enum_op</name></expr>)</condition> <block>{
    <case>case <expr><name>JSENUMERATE_INIT</name></expr>:

        <comment type="block">/* Get the Java per-thread environment pointer for this JSContext */</comment>
        <expr_stmt><expr><name>jsj_env</name> = <call><name>jsj_EnterJava</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>jEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>jEnv</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

        <expr_stmt><expr><name>member_descriptor</name> = <call><name>jsj_GetClassInstanceMembers</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jEnv</name></expr></argument>, <argument><expr><name>class_descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>statep</name> = <call><name>PRIVATE_TO_JSVAL</name><argument_list>(<argument><expr><name>member_descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>idp</name></expr>)</condition><then>
            <expr_stmt><expr>*<name>idp</name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>class_descriptor</name>-&gt;<name>num_instance_members</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name>jsj_ExitJava</name><argument_list>(<argument><expr><name>jsj_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>

    </case><case>case <expr><name>JSENUMERATE_NEXT</name></expr>:
        <expr_stmt><expr><name>member_descriptor</name> = <call><name>JSVAL_TO_PRIVATE</name><argument_list>(<argument><expr>*<name>statep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>member_descriptor</name></expr>)</condition><then> <block>{

            <comment type="block">/* Don't enumerate explicit-signature methods, i.e. enumerate toValue,
               but not toValue(int), toValue(double), etc. */</comment>
            <while>while <condition>(<expr><name><name>member_descriptor</name>-&gt;<name>methods</name></name> &amp;&amp; <name><name>member_descriptor</name>-&gt;<name>methods</name>-&gt;<name>is_alias</name></name></expr>)</condition> <block>{
                <expr_stmt><expr><name>member_descriptor</name> = <name><name>member_descriptor</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>member_descriptor</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr>*<name>statep</name> = <name>JSVAL_NULL</name></expr>;</expr_stmt>
                    <return>return <expr><name>JS_TRUE</name></expr>;</return>
                }</block></then></if>
            }</block></while>

            <expr_stmt><expr>*<name>idp</name> = <name><name>member_descriptor</name>-&gt;<name>id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>statep</name> = <call><name>PRIVATE_TO_JSVAL</name><argument_list>(<argument><expr><name><name>member_descriptor</name>-&gt;<name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_TRUE</name></expr>;</return>
        }</block></then></if>

        <comment type="block">/* Fall through ... */</comment>

    </case><case>case <expr><name>JSENUMERATE_DESTROY</name></expr>:
        <expr_stmt><expr>*<name>statep</name> = <name>JSVAL_NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>

    </case><default>default:
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    </default>}</block></switch>
}</block>

<macro><name>JS_STATIC_DLL_CALLBACK</name><argument_list>(<argument>JSBool</argument>)</argument_list></macro>
<macro><name>JavaObject_checkAccess</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *obj</argument>, <argument>jsid id</argument>,
                      <argument>JSAccessMode mode</argument>, <argument>jsval *vp</argument>, <argument>uintN *attrsp</argument>)</argument_list></macro>
<block>{
    <switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{
    <case>case <expr><name>JSACC_WATCH</name></expr>:
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jsj_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><name>JSJMSG_JOBJECT_PROP_WATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>

    </case><default>default:
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    </default>}</block></switch>
}</block>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSJ_SLOT_COUNT</name></cpp:macro> <cpp:value>(JSSLOT_PRIVATE+1)</cpp:value></cpp:define>

<function><type><name>JSObjectMap</name> * <name>JS_DLL_CALLBACK</name></type>
<name>jsj_wrapper_newObjectMap</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsrefcount</name></type> <name>nrefs</name></decl></param>, <param><decl><type><name>JSObjectOps</name> *</type><name>ops</name></decl></param>,
                         <param><decl><type><name>JSClass</name> *</type><name>clasp</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObjectMap</name> *</type> <name>map</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>map</name> = (<name>JSObjectMap</name> *) <call><name>JS_malloc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JSObjectMap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>map</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>map</name>-&gt;<name>nrefs</name></name> = <name>nrefs</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>map</name>-&gt;<name>ops</name></name> = <name>ops</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>map</name>-&gt;<name>freeslot</name></name> = <name>JSJ_SLOT_COUNT</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>map</name></expr>;</return>
}</block></function>

<function><type><name>void</name> <name>JS_DLL_CALLBACK</name></type>
<name>jsj_wrapper_destroyObjectMap</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObjectMap</name> *</type><name>map</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>jsval</name> <name>JS_DLL_CALLBACK</name></type>
<name>jsj_wrapper_getRequiredSlot</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>slot</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <name>JSJ_SLOT_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name>-&gt;<name>map</name>-&gt;<name>freeslot</name></name> == <name>JSJ_SLOT_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>STOBJ_GET_SLOT</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>JSBool</name> <name>JS_DLL_CALLBACK</name></type>
<name>jsj_wrapper_setRequiredSlot</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>slot</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <name>JSJ_SLOT_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name>-&gt;<name>map</name>-&gt;<name>freeslot</name></name> == <name>JSJ_SLOT_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STOBJ_SET_SLOT</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>JSObjectOps</name></type> <name>JavaObject_ops</name> <init>= <expr><block>{
    <comment type="block">/* Mandatory non-null function pointer members. */</comment>
    <expr><name>jsj_wrapper_newObjectMap</name></expr>,       <comment type="block">/* newObjectMap */</comment>
    <expr><name>jsj_wrapper_destroyObjectMap</name></expr>,   <comment type="block">/* destroyObjectMap */</comment>
    <expr><name>JavaObject_lookupProperty</name></expr>,
    <expr><name>JavaObject_defineProperty</name></expr>,
    <expr><name>JavaObject_getPropertyById</name></expr>,     <comment type="block">/* getProperty */</comment>
    <expr><name>JavaObject_setPropertyById</name></expr>,     <comment type="block">/* setProperty */</comment>
    <expr><name>JavaObject_getAttributes</name></expr>,
    <expr><name>JavaObject_setAttributes</name></expr>,
    <expr><name>JavaObject_deleteProperty</name></expr>,
    <expr><name>JavaObject_defaultValue</name></expr>,
    <expr><name>JavaObject_newEnumerate</name></expr>,
    <expr><name>JavaObject_checkAccess</name></expr>,

    <comment type="block">/* Optionally non-null members start here. */</comment>
    <expr><name>NULL</name></expr>,                           <comment type="block">/* thisObject */</comment>
    <expr><name>NULL</name></expr>,                           <comment type="block">/* dropProperty */</comment>
    <expr><name>NULL</name></expr>,                           <comment type="block">/* call */</comment>
    <expr><name>NULL</name></expr>,                           <comment type="block">/* construct */</comment>
    <expr><name>NULL</name></expr>,                           <comment type="block">/* xdrObject */</comment>
    <expr><name>NULL</name></expr>,                           <comment type="block">/* hasInstance */</comment>
    <expr><name>NULL</name></expr>,                           <comment type="block">/* setProto */</comment>
    <expr><name>NULL</name></expr>,                           <comment type="block">/* setParent */</comment>
    <expr><name>NULL</name></expr>,                           <comment type="block">/* mark */</comment>
    <expr><name>NULL</name></expr>,                           <comment type="block">/* clear */</comment>
    <expr><name>jsj_wrapper_getRequiredSlot</name></expr>,    <comment type="block">/* getRequiredSlot */</comment>
    <expr><name>jsj_wrapper_setRequiredSlot</name></expr>     <comment type="block">/* setRequiredSlot */</comment>
}</block></expr></init></decl>;</decl_stmt>

<macro><name>JS_STATIC_DLL_CALLBACK</name><argument_list>(<argument>JSObjectOps *</argument>)</argument_list></macro>
<macro><name>JavaObject_getObjectOps</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSClass *clazz</argument>)</argument_list></macro>
<block>{
    <return>return <expr>&amp;<name>JavaObject_ops</name></expr>;</return>
}</block>

<decl_stmt><decl><type><name>JSClass</name></type> <name>JavaObject_class</name> <init>= <expr><block>{
    <expr>"JavaObject"</expr>, <expr><name>JSCLASS_HAS_PRIVATE</name></expr>,
    <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
    <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>JavaObject_convert</name></expr>, <expr><name>JavaObject_finalize</name></expr>,

    <comment type="block">/* Optionally non-null members start here. */</comment>
    <expr><name>JavaObject_getObjectOps</name></expr>,
    <expr><name>NULL</name></expr>,                       <comment type="block">/* checkAccess */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* call */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* construct */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* xdrObject */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* hasInstance */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* mark */</comment>
    <expr>0</expr>,                          <comment type="block">/* spare */</comment>
}</block></expr></init></decl>;</decl_stmt>

<extern>extern JS_IMPORT_DATA(JSObjectOps</extern>) <expr_stmt><expr><name>js_ObjectOps</name></expr>;</expr_stmt>

<function><type><name>JSBool</name></type>
<name>jsj_init_JavaObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>global_obj</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>JS_InitClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>global_obj</name></expr></argument>,
                        <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>JavaObject_class</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                        <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
                        <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> != 0</expr>;</return>
}</block></function>
</unit>
