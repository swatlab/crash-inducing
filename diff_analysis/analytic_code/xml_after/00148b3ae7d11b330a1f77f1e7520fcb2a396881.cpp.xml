<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="00148b3ae7d11b330a1f77f1e7520fcb2a396881.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * mozilla.org.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Stuart Parmenter &lt;pavlov@pavlov.net&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsThebesFontMetrics.h"</cpp:file></cpp:include>    
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsFont.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gfxTextRunCache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gfxPlatform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gfxUserFontSet.h"</cpp:file></cpp:include>

<macro><name>NS_IMPL_ISUPPORTS1</name><argument_list>(<argument>nsThebesFontMetrics</argument>, <argument>nsIFontMetrics</argument>)</argument_list></macro>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<constructor><name><name>nsThebesFontMetrics</name>::<name>nsThebesFontMetrics</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>mFontStyle</name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mFontGroup</name> = <name>nsnull</name></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>nsThebesFontMetrics</name>::~<name>nsThebesFontMetrics</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr>delete <name>mFontStyle</name></expr>;</expr_stmt>
    <comment type="line">//delete mFontGroup;</comment>
}</block></destructor>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>Init</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsFont</name>&amp;</type> <name>aFont</name></decl></param>, <param><decl><type><name>nsIAtom</name>*</type> <name>aLangGroup</name></decl></param>,
                          <param><decl><type><name>nsIDeviceContext</name> *</type><name>aContext</name></decl></param>, 
                          <param><decl><type><name>gfxUserFontSet</name> *</type><name>aUserFontSet</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>mFont</name> = <name>aFont</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mLangGroup</name> = <name>aLangGroup</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mDeviceContext</name> = (<name>nsThebesDeviceContext</name>*)<name>aContext</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mP2A</name> = <call><name><name>mDeviceContext</name>-&gt;<name>AppUnitsPerDevPixel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mIsRightToLeft</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mTextRunRTL</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>gfxFloat</name></type> <name>size</name> <init>= <expr><call><name>gfxFloat</name><argument_list>(<argument><expr><name><name>aFont</name>.<name>size</name></name></expr></argument>)</argument_list></call> / <name>mP2A</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>nsCString</name></type> <name>langGroup</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>aLangGroup</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>lg</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mLangGroup</name>-&gt;<name>GetUTF8String</name></name><argument_list>(<argument><expr>&amp;<name>lg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>langGroup</name>.<name>Assign</name></name><argument_list>(<argument><expr><name>lg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>PRBool</name></type> <name>printerFont</name> <init>= <expr><call><name><name>mDeviceContext</name>-&gt;<name>IsPrinterSurface</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>mFontStyle</name> = new <call><name>gfxFontStyle</name><argument_list>(<argument><expr><name><name>aFont</name>.<name>style</name></name></expr></argument>, <argument><expr><name><name>aFont</name>.<name>weight</name></name></expr></argument>, <argument><expr><name><name>aFont</name>.<name>stretch</name></name></expr></argument>,
                                  <argument><expr><name>size</name></expr></argument>, <argument><expr><name>langGroup</name></expr></argument>,
                                  <argument><expr><name><name>aFont</name>.<name>sizeAdjust</name></name></expr></argument>, <argument><expr><name><name>aFont</name>.<name>systemFont</name></name></expr></argument>,
                                  <argument><expr><name><name>aFont</name>.<name>familyNameQuirks</name></name></expr></argument>,
                                  <argument><expr><name>printerFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>mFontGroup</name> =
        <call><name><name>gfxPlatform</name>::<name>GetPlatform</name></name><argument_list>()</argument_list></call>-&gt;<call><name>CreateFontGroup</name><argument_list>(<argument><expr><name><name>aFont</name>.<name>name</name></name></expr></argument>, <argument><expr><name>mFontStyle</name></expr></argument>, 
                                                    <argument><expr><name>aUserFontSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name><name>mFontGroup</name>-&gt;<name>FontListLength</name></name><argument_list>()</argument_list></call> &lt; 1</expr>)</condition><then> 
        <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>Destroy</name></name><parameter_list>()</parameter_list>
<block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// XXXTODO get rid of this macro</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND_TO_TWIPS</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(nscoord)floor(((x) * mP2A) + 0.5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CEIL_TO_TWIPS</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(nscoord)NS_ceil((x) * mP2A)</cpp:value></cpp:define>

<function><type><specifier>const</specifier> <name><name>gfxFont</name>::<name>Metrics</name></name>&amp;</type> <name><name>nsThebesFontMetrics</name>::<name>GetMetrics</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
    <return>return <expr><call><name><name>mFontGroup</name>-&gt;<name>GetFontAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>-&gt;<call><name>GetMetrics</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetXHeight</name></name><parameter_list>(<param><decl><type><name>nscoord</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>aResult</name> = <call><name>ROUND_TO_TWIPS</name><argument_list>(<argument><expr><call><name>GetMetrics</name><argument_list>()</argument_list></call>.<name>xHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetSuperscriptOffset</name></name><parameter_list>(<param><decl><type><name>nscoord</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>aResult</name> = <call><name>ROUND_TO_TWIPS</name><argument_list>(<argument><expr><call><name>GetMetrics</name><argument_list>()</argument_list></call>.<name>superscriptOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetSubscriptOffset</name></name><parameter_list>(<param><decl><type><name>nscoord</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>aResult</name> = <call><name>ROUND_TO_TWIPS</name><argument_list>(<argument><expr><call><name>GetMetrics</name><argument_list>()</argument_list></call>.<name>subscriptOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetStrikeout</name></name><parameter_list>(<param><decl><type><name>nscoord</name>&amp;</type> <name>aOffset</name></decl></param>, <param><decl><type><name>nscoord</name>&amp;</type> <name>aSize</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>aOffset</name> = <call><name>ROUND_TO_TWIPS</name><argument_list>(<argument><expr><call><name>GetMetrics</name><argument_list>()</argument_list></call>.<name>strikeoutOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>aSize</name> = <call><name>ROUND_TO_TWIPS</name><argument_list>(<argument><expr><call><name>GetMetrics</name><argument_list>()</argument_list></call>.<name>strikeoutSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetUnderline</name></name><parameter_list>(<param><decl><type><name>nscoord</name>&amp;</type> <name>aOffset</name></decl></param>, <param><decl><type><name>nscoord</name>&amp;</type> <name>aSize</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>aOffset</name> = <call><name>ROUND_TO_TWIPS</name><argument_list>(<argument><expr><call><name><name>mFontGroup</name>-&gt;<name>GetUnderlineOffset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>aSize</name> = <call><name>ROUND_TO_TWIPS</name><argument_list>(<argument><expr><call><name>GetMetrics</name><argument_list>()</argument_list></call>.<name>underlineSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// GetHeight/GetMaxAscent/GetMaxDescent/GetMaxHeight must contain the</comment>
<comment type="line">// text-decoration lines drawable area. See bug 421353.</comment>
<comment type="line">// BE CAREFUL for rounding each values. The logic MUST be same as</comment>
<comment type="line">// nsCSSRendering::GetTextDecorationRectInternal's.</comment>

<function><type><specifier>static</specifier> <name>gfxFloat</name></type> <name>ComputeMaxDescent</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name><name>gfxFont</name>::<name>Metrics</name></name>&amp;</type> <name>aMetrics</name></decl></param>,
                                  <param><decl><type><name>gfxFontGroup</name>*</type> <name>aFontGroup</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>gfxFloat</name></type> <name>offset</name> <init>= <expr><call><name>NS_floor</name><argument_list>(<argument><expr>-<call><name><name>aFontGroup</name>-&gt;<name>GetUnderlineOffset</name></name><argument_list>()</argument_list></call> + 0.5</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gfxFloat</name></type> <name>size</name> <init>= <expr><call><name>NS_round</name><argument_list>(<argument><expr><name><name>aMetrics</name>.<name>underlineSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gfxFloat</name></type> <name>minDescent</name> <init>= <expr><call><name>NS_floor</name><argument_list>(<argument><expr><name>offset</name> + <name>size</name> + 0.5</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>PR_MAX</name><argument_list>(<argument><expr><name>minDescent</name></expr></argument>, <argument><expr><name><name>aMetrics</name>.<name>maxDescent</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>gfxFloat</name></type> <name>ComputeMaxAscent</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name><name>gfxFont</name>::<name>Metrics</name></name>&amp;</type> <name>aMetrics</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>NS_floor</name><argument_list>(<argument><expr><name><name>aMetrics</name>.<name>maxAscent</name></name> + 0.5</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetHeight</name></name><parameter_list>(<param><decl><type><name>nscoord</name> &amp;</type><name>aHeight</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>aHeight</name> = <call><name>CEIL_TO_TWIPS</name><argument_list>(<argument><expr><call><name>ComputeMaxAscent</name><argument_list>(<argument><expr><call><name>GetMetrics</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> +
        <call><name>CEIL_TO_TWIPS</name><argument_list>(<argument><expr><call><name>ComputeMaxDescent</name><argument_list>(<argument><expr><call><name>GetMetrics</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mFontGroup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetInternalLeading</name></name><parameter_list>(<param><decl><type><name>nscoord</name> &amp;</type><name>aLeading</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>aLeading</name> = <call><name>ROUND_TO_TWIPS</name><argument_list>(<argument><expr><call><name>GetMetrics</name><argument_list>()</argument_list></call>.<name>internalLeading</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetExternalLeading</name></name><parameter_list>(<param><decl><type><name>nscoord</name> &amp;</type><name>aLeading</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>aLeading</name> = <call><name>ROUND_TO_TWIPS</name><argument_list>(<argument><expr><call><name>GetMetrics</name><argument_list>()</argument_list></call>.<name>externalLeading</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetEmHeight</name></name><parameter_list>(<param><decl><type><name>nscoord</name> &amp;</type><name>aHeight</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>aHeight</name> = <call><name>ROUND_TO_TWIPS</name><argument_list>(<argument><expr><call><name>GetMetrics</name><argument_list>()</argument_list></call>.<name>emHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetEmAscent</name></name><parameter_list>(<param><decl><type><name>nscoord</name> &amp;</type><name>aAscent</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>aAscent</name> = <call><name>ROUND_TO_TWIPS</name><argument_list>(<argument><expr><call><name>GetMetrics</name><argument_list>()</argument_list></call>.<name>emAscent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetEmDescent</name></name><parameter_list>(<param><decl><type><name>nscoord</name> &amp;</type><name>aDescent</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>aDescent</name> = <call><name>ROUND_TO_TWIPS</name><argument_list>(<argument><expr><call><name>GetMetrics</name><argument_list>()</argument_list></call>.<name>emDescent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetMaxHeight</name></name><parameter_list>(<param><decl><type><name>nscoord</name> &amp;</type><name>aHeight</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>aHeight</name> = <call><name>CEIL_TO_TWIPS</name><argument_list>(<argument><expr><call><name>ComputeMaxAscent</name><argument_list>(<argument><expr><call><name>GetMetrics</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> +
        <call><name>CEIL_TO_TWIPS</name><argument_list>(<argument><expr><call><name>ComputeMaxDescent</name><argument_list>(<argument><expr><call><name>GetMetrics</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mFontGroup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetMaxAscent</name></name><parameter_list>(<param><decl><type><name>nscoord</name> &amp;</type><name>aAscent</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>aAscent</name> = <call><name>CEIL_TO_TWIPS</name><argument_list>(<argument><expr><call><name>ComputeMaxAscent</name><argument_list>(<argument><expr><call><name>GetMetrics</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetMaxDescent</name></name><parameter_list>(<param><decl><type><name>nscoord</name> &amp;</type><name>aDescent</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>aDescent</name> = <call><name>CEIL_TO_TWIPS</name><argument_list>(<argument><expr><call><name>ComputeMaxDescent</name><argument_list>(<argument><expr><call><name>GetMetrics</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mFontGroup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetMaxAdvance</name></name><parameter_list>(<param><decl><type><name>nscoord</name> &amp;</type><name>aAdvance</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>aAdvance</name> = <call><name>CEIL_TO_TWIPS</name><argument_list>(<argument><expr><call><name>GetMetrics</name><argument_list>()</argument_list></call>.<name>maxAdvance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetLangGroup</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name>**</type> <name>aLangGroup</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>aLangGroup</name> = <name>mLangGroup</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aLangGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetFontHandle</name></name><parameter_list>(<param><decl><type><name>nsFontHandle</name> &amp;</type><name>aHandle</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetAveCharWidth</name></name><parameter_list>(<param><decl><type><name>nscoord</name>&amp;</type> <name>aAveCharWidth</name></decl></param>)</parameter_list>
<block>{
    <comment type="line">// Use CEIL instead of ROUND for consistency with GetMaxAdvance</comment>
    <expr_stmt><expr><name>aAveCharWidth</name> = <call><name>CEIL_TO_TWIPS</name><argument_list>(<argument><expr><call><name>GetMetrics</name><argument_list>()</argument_list></call>.<name>aveCharWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetSpaceWidth</name></name><parameter_list>(<param><decl><type><name>nscoord</name>&amp;</type> <name>aSpaceCharWidth</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>aSpaceCharWidth</name> = <call><name>CEIL_TO_TWIPS</name><argument_list>(<argument><expr><call><name>GetMetrics</name><argument_list>()</argument_list></call>.<name>spaceWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>PRInt32</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetMaxStringLength</name></name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>gfxFont</name>::<name>Metrics</name></name>&amp;</type> <name>m</name> <init>= <expr><call><name>GetMetrics</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>x</name> <init>= <expr>32767.0 / <name><name>m</name>.<name>maxAdvance</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>len</name> <init>= <expr>(<name>PRInt32</name>)<call><name>floor</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>PR_MAX</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<class>class <name>StubPropertyProvider</name> <super>: <specifier>public</specifier> <name><name>gfxTextRun</name>::<name>PropertyProvider</name></name></super> <block>{<private type="default">
</private><public>public:
    <function><type><specifier>virtual</specifier> <name>void</name></type> <name>GetHyphenationBreaks</name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aStart</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLength</name></decl></param>,
                                      <param><decl><type><name>PRPackedBool</name>*</type> <name>aBreakBefore</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"This shouldn't be called because we never call BreakAndMeasureText"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>virtual</specifier> <name>gfxFloat</name></type> <name>GetHyphenWidth</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"This shouldn't be called because we never enable hyphens"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
    }</block></function>
    <function><type><specifier>virtual</specifier> <name>void</name></type> <name>GetSpacing</name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aStart</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLength</name></decl></param>,
                            <param><decl><type><name>Spacing</name>*</type> <name>aSpacing</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"This shouldn't be called because we never enable spacing"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
</public>}</block>;</class>

<function><type><name>nsresult</name></type> 
<name><name>nsThebesFontMetrics</name>::<name>GetWidth</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>aString</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLength</name></decl></param>, <param><decl><type><name>nscoord</name>&amp;</type> <name>aWidth</name></decl></param>,
                              <param><decl><type><name>nsThebesRenderingContext</name> *</type><name>aContext</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>aLength</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>aWidth</name> = 0</expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// callers that hit this should not be so stupid</comment>
    <if>if <condition>(<expr>(<name>aLength</name> == 1) &amp;&amp; (<name><name>aString</name><index>[<expr>0</expr>]</index></name> == ' ')</expr>)</condition><then>
        <return>return <expr><call><name>GetSpaceWidth</name><argument_list>(<argument><expr><name>aWidth</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <decl_stmt><decl><type><name>StubPropertyProvider</name></type> <name>provider</name></decl>;</decl_stmt>
    <function_decl><type><name>AutoTextRun</name></type> <name>textRun</name><parameter_list>(<param><decl><type><name>this</name></type></decl></param>, <param><decl><type><name>aContext</name></type></decl></param>, <param><decl><type><name>aString</name></type></decl></param>, <param><decl><type><name>aLength</name></type></decl></param>)</parameter_list>;</function_decl>
    <if>if <condition>(<expr>!<call><name><name>textRun</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>aWidth</name> = <call><name>NSToCoordRound</name><argument_list>(<argument><expr><call><name><name>textRun</name>-&gt;<name>GetAdvanceWidth</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>aLength</name></expr></argument>, <argument><expr>&amp;<name>provider</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetWidth</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUnichar</name>*</type> <name>aString</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLength</name></decl></param>,
                              <param><decl><type><name>nscoord</name>&amp;</type> <name>aWidth</name></decl></param>, <param><decl><type><name>PRInt32</name> *</type><name>aFontID</name></decl></param>,
                              <param><decl><type><name>nsThebesRenderingContext</name> *</type><name>aContext</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>aLength</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>aWidth</name> = 0</expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// callers that hit this should not be so stupid</comment>
    <if>if <condition>(<expr>(<name>aLength</name> == 1) &amp;&amp; (<name><name>aString</name><index>[<expr>0</expr>]</index></name> == ' ')</expr>)</condition><then>
        <return>return <expr><call><name>GetSpaceWidth</name><argument_list>(<argument><expr><name>aWidth</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <decl_stmt><decl><type><name>StubPropertyProvider</name></type> <name>provider</name></decl>;</decl_stmt>
    <function_decl><type><name>AutoTextRun</name></type> <name>textRun</name><parameter_list>(<param><decl><type><name>this</name></type></decl></param>, <param><decl><type><name>aContext</name></type></decl></param>, <param><decl><type><name>aString</name></type></decl></param>, <param><decl><type><name>aLength</name></type></decl></param>)</parameter_list>;</function_decl>
    <if>if <condition>(<expr>!<call><name><name>textRun</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>aWidth</name> = <call><name>NSToCoordRound</name><argument_list>(<argument><expr><call><name><name>textRun</name>-&gt;<name>GetAdvanceWidth</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>aLength</name></expr></argument>, <argument><expr>&amp;<name>provider</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// Get the text dimensions for this string</comment>
<function><type><name>nsresult</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetTextDimensions</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUnichar</name>*</type> <name>aString</name></decl></param>,
                                    <param><decl><type><name>PRUint32</name></type> <name>aLength</name></decl></param>,
                                    <param><decl><type><name>nsTextDimensions</name>&amp;</type> <name>aDimensions</name></decl></param>, 
                                    <param><decl><type><name>PRInt32</name>*</type> <name>aFontID</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetTextDimensions</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type>         <name>aString</name></decl></param>,
                                   <param><decl><type><name>PRInt32</name></type>             <name>aLength</name></decl></param>,
                                   <param><decl><type><name>PRInt32</name></type>             <name>aAvailWidth</name></decl></param>,
                                   <param><decl><type><name>PRInt32</name>*</type>            <name>aBreaks</name></decl></param>,
                                   <param><decl><type><name>PRInt32</name></type>             <name>aNumBreaks</name></decl></param>,
                                   <param><decl><type><name>nsTextDimensions</name>&amp;</type>   <name>aDimensions</name></decl></param>,
                                   <param><decl><type><name>PRInt32</name>&amp;</type>            <name>aNumCharsFit</name></decl></param>,
                                   <param><decl><type><name>nsTextDimensions</name>&amp;</type>   <name>aLastWordDimensions</name></decl></param>,
                                   <param><decl><type><name>PRInt32</name>*</type>            <name>aFontID</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
<function><type><name>nsresult</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetTextDimensions</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUnichar</name>*</type>    <name>aString</name></decl></param>,
                                   <param><decl><type><name>PRInt32</name></type>             <name>aLength</name></decl></param>,
                                   <param><decl><type><name>PRInt32</name></type>             <name>aAvailWidth</name></decl></param>,
                                   <param><decl><type><name>PRInt32</name>*</type>            <name>aBreaks</name></decl></param>,
                                   <param><decl><type><name>PRInt32</name></type>             <name>aNumBreaks</name></decl></param>,
                                   <param><decl><type><name>nsTextDimensions</name>&amp;</type>   <name>aDimensions</name></decl></param>,
                                   <param><decl><type><name>PRInt32</name>&amp;</type>            <name>aNumCharsFit</name></decl></param>,
                                   <param><decl><type><name>nsTextDimensions</name>&amp;</type>   <name>aLastWordDimensions</name></decl></param>,
                                   <param><decl><type><name>PRInt32</name>*</type>            <name>aFontID</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// Draw a string using this font handle on the surface passed in.  </comment>
<function><type><name>nsresult</name></type>
<name><name>nsThebesFontMetrics</name>::<name>DrawString</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aString</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLength</name></decl></param>,
                                <param><decl><type><name>nscoord</name></type> <name>aX</name></decl></param>, <param><decl><type><name>nscoord</name></type> <name>aY</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>nscoord</name>*</type> <name>aSpacing</name></decl></param>,
                                <param><decl><type><name>nsThebesRenderingContext</name> *</type><name>aContext</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>aLength</name> == 0</expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>aSpacing</name></expr></argument>, <argument><expr>"Spacing not supported here"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>StubPropertyProvider</name></type> <name>provider</name></decl>;</decl_stmt>
    <function_decl><type><name>AutoTextRun</name></type> <name>textRun</name><parameter_list>(<param><decl><type><name>this</name></type></decl></param>, <param><decl><type><name>aContext</name></type></decl></param>, <param><decl><type><name>aString</name></type></decl></param>, <param><decl><type><name>aLength</name></type></decl></param>)</parameter_list>;</function_decl>
    <if>if <condition>(<expr>!<call><name><name>textRun</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
    <function_decl><type><name>gfxPoint</name></type> <name>pt</name><parameter_list>(<param><decl><type><name>aX</name></type></decl></param>, <param><decl><type><name>aY</name></type></decl></param>)</parameter_list>;</function_decl>
    <if>if <condition>(<expr><name>mTextRunRTL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>pt</name>.<name>x</name></name> += <call><name><name>textRun</name>-&gt;<name>GetAdvanceWidth</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>aLength</name></expr></argument>, <argument><expr>&amp;<name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>textRun</name>-&gt;<name>Draw</name></name><argument_list>(<argument><expr><call><name><name>aContext</name>-&gt;<name>ThebesContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>aLength</name></expr></argument>,
                  <argument><expr><name>nsnull</name></expr></argument>, <argument><expr>&amp;<name>provider</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsThebesFontMetrics</name>::<name>DrawString</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUnichar</name>*</type> <name>aString</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLength</name></decl></param>,
                                <param><decl><type><name>nscoord</name></type> <name>aX</name></decl></param>, <param><decl><type><name>nscoord</name></type> <name>aY</name></decl></param>,
                                <param><decl><type><name>PRInt32</name></type> <name>aFontID</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>nscoord</name>*</type> <name>aSpacing</name></decl></param>,
                                <param><decl><type><name>nsThebesRenderingContext</name> *</type><name>aContext</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>aLength</name> == 0</expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>aSpacing</name></expr></argument>, <argument><expr>"Spacing not supported here"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>StubPropertyProvider</name></type> <name>provider</name></decl>;</decl_stmt>
    <function_decl><type><name>AutoTextRun</name></type> <name>textRun</name><parameter_list>(<param><decl><type><name>this</name></type></decl></param>, <param><decl><type><name>aContext</name></type></decl></param>, <param><decl><type><name>aString</name></type></decl></param>, <param><decl><type><name>aLength</name></type></decl></param>)</parameter_list>;</function_decl>
    <if>if <condition>(<expr>!<call><name><name>textRun</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
    <function_decl><type><name>gfxPoint</name></type> <name>pt</name><parameter_list>(<param><decl><type><name>aX</name></type></decl></param>, <param><decl><type><name>aY</name></type></decl></param>)</parameter_list>;</function_decl>
    <if>if <condition>(<expr><name>mTextRunRTL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>pt</name>.<name>x</name></name> += <call><name><name>textRun</name>-&gt;<name>GetAdvanceWidth</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>aLength</name></expr></argument>, <argument><expr>&amp;<name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>textRun</name>-&gt;<name>Draw</name></name><argument_list>(<argument><expr><call><name><name>aContext</name>-&gt;<name>ThebesContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>aLength</name></expr></argument>,
                  <argument><expr><name>nsnull</name></expr></argument>, <argument><expr>&amp;<name>provider</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_MATHML</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>GetTextRunBoundingMetrics</name><parameter_list>(<param><decl><type><name>gfxTextRun</name> *</type><name>aTextRun</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aStart</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLength</name></decl></param>,
                          <param><decl><type><name>nsThebesRenderingContext</name> *</type><name>aContext</name></decl></param>,
                          <param><decl><type><name>nsBoundingMetrics</name> &amp;</type><name>aBoundingMetrics</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>StubPropertyProvider</name></type> <name>provider</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>gfxTextRun</name>::<name>Metrics</name></name></type> <name>theMetrics</name> <init>=
        <expr><call><name><name>aTextRun</name>-&gt;<name>MeasureText</name></name><argument_list>(<argument><expr><name>aStart</name></expr></argument>, <argument><expr><name>aLength</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><call><name><name>aContext</name>-&gt;<name>ThebesContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>provider</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>aBoundingMetrics</name>.<name>leftBearing</name></name> = <call><name>NSToCoordFloor</name><argument_list>(<argument><expr><call><name><name>theMetrics</name>.<name>mBoundingBox</name>.<name>X</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aBoundingMetrics</name>.<name>rightBearing</name></name> = <call><name>NSToCoordCeil</name><argument_list>(<argument><expr><call><name><name>theMetrics</name>.<name>mBoundingBox</name>.<name>XMost</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aBoundingMetrics</name>.<name>width</name></name> = <call><name>NSToCoordRound</name><argument_list>(<argument><expr><name><name>theMetrics</name>.<name>mAdvanceWidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aBoundingMetrics</name>.<name>ascent</name></name> = <call><name>NSToCoordCeil</name><argument_list>(<argument><expr>- <call><name><name>theMetrics</name>.<name>mBoundingBox</name>.<name>Y</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aBoundingMetrics</name>.<name>descent</name></name> = <call><name>NSToCoordCeil</name><argument_list>(<argument><expr><call><name><name>theMetrics</name>.<name>mBoundingBox</name>.<name>YMost</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetBoundingMetrics</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aString</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLength</name></decl></param>,
                                        <param><decl><type><name>nsThebesRenderingContext</name> *</type><name>aContext</name></decl></param>,
                                        <param><decl><type><name>nsBoundingMetrics</name> &amp;</type><name>aBoundingMetrics</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>aLength</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>aBoundingMetrics</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <function_decl><type><name>AutoTextRun</name></type> <name>textRun</name><parameter_list>(<param><decl><type><name>this</name></type></decl></param>, <param><decl><type><name>aContext</name></type></decl></param>, <param><decl><type><name>aString</name></type></decl></param>, <param><decl><type><name>aLength</name></type></decl></param>)</parameter_list>;</function_decl>
    <if>if <condition>(<expr>!<call><name><name>textRun</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>GetTextRunBoundingMetrics</name><argument_list>(<argument><expr><call><name><name>textRun</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>aLength</name></expr></argument>, <argument><expr><name>aContext</name></expr></argument>, <argument><expr><name>aBoundingMetrics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetBoundingMetrics</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>aString</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLength</name></decl></param>,
                                        <param><decl><type><name>nsThebesRenderingContext</name> *</type><name>aContext</name></decl></param>,
                                        <param><decl><type><name>nsBoundingMetrics</name> &amp;</type><name>aBoundingMetrics</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>aLength</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>aBoundingMetrics</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <function_decl><type><name>AutoTextRun</name></type> <name>textRun</name><parameter_list>(<param><decl><type><name>this</name></type></decl></param>, <param><decl><type><name>aContext</name></type></decl></param>, <param><decl><type><name>aString</name></type></decl></param>, <param><decl><type><name>aLength</name></type></decl></param>)</parameter_list>;</function_decl>
    <if>if <condition>(<expr>!<call><name><name>textRun</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>GetTextRunBoundingMetrics</name><argument_list>(<argument><expr><call><name><name>textRun</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>aLength</name></expr></argument>, <argument><expr><name>aContext</name></expr></argument>, <argument><expr><name>aBoundingMetrics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MOZ_MATHML */</comment>

<comment type="line">// Set the direction of the text rendering</comment>
<function><type><name>nsresult</name></type>
<name><name>nsThebesFontMetrics</name>::<name>SetRightToLeftText</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aIsRTL</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>mIsRightToLeft</name> = <name>aIsRTL</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// Set the direction of the text rendering</comment>
<function><type><name>PRBool</name></type>
<name><name>nsThebesFontMetrics</name>::<name>GetRightToLeftText</name></name><parameter_list>()</parameter_list>
<block>{
    <return>return <expr><name>mIsRightToLeft</name></expr>;</return>
}</block></function>

<comment type="block">/* virtual */</comment> <function><type><name>gfxUserFontSet</name>*</type>
<name><name>nsThebesFontMetrics</name>::<name>GetUserFontSet</name></name><parameter_list>()</parameter_list>
<block>{
    <return>return <expr><call><name><name>mFontGroup</name>-&gt;<name>GetUserFontSet</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>
</unit>
