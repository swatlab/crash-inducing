<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0018763ddd44e64c62225281be35d393589722c0.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIsIndexFrame.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIContent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prtypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIAtom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPresContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGkAtoms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPresState.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsWidgetsCID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIComponentManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsHTMLParts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLInputElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsINameSpaceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPresShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLInputElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIStatefulFrame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsXPCOM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISupportsPrimitives.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIComponentManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsHTMLParts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsLinebreakConverter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsILinkHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIHTMLDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsXPIDLString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsReadableUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNetUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsICharsetConverterManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsEscape.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMKeyListener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMKeyEvent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFormControlFrame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsINodeInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMEventTarget.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentCID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNodeInfoManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentCreatorFunctions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsLayoutErrors.h"</cpp:file></cpp:include>

<function><type><name>nsIFrame</name>*</type>
<name>NS_NewIsIndexFrame</name><parameter_list>(<param><decl><type><name>nsIPresShell</name>*</type> <name>aPresShell</name></decl></param>, <param><decl><type><name>nsStyleContext</name>*</type> <name>aContext</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr>new (<name>aPresShell</name>) <call><name>nsIsIndexFrame</name><argument_list>(<argument><expr><name>aContext</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<macro><name>NS_IMPL_FRAMEARENA_HELPERS</name><argument_list>(<argument>nsIsIndexFrame</argument>)</argument_list></macro>

<constructor><name><name>nsIsIndexFrame</name>::<name>nsIsIndexFrame</name></name><parameter_list>(<param><decl><type><name>nsStyleContext</name>*</type> <name>aContext</name></decl></param>)</parameter_list> <member_list>:
  <call><name>nsBlockFrame</name><argument_list>(<argument><expr><name>aContext</name></expr></argument>)</argument_list></call>
</member_list><block>{
  <expr_stmt><expr><call><name>SetFlags</name><argument_list>(<argument><expr><name>NS_BLOCK_FLOAT_MGR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>nsIsIndexFrame</name>::~<name>nsIsIndexFrame</name></name><parameter_list>()</parameter_list>
<block>{
}</block></destructor>

<function><type><name>void</name></type>
<name><name>nsIsIndexFrame</name>::<name>DestroyFrom</name></name><parameter_list>(<param><decl><type><name>nsIFrame</name>*</type> <name>aDestructRoot</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// remove ourself as a listener of the text control (bug 40533)</comment>
  <if>if <condition>(<expr><name>mInputContent</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>mListener</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mInputContent</name>-&gt;<name>RemoveEventListenerByIID</name></name><argument_list>(<argument><expr><name>mListener</name></expr></argument>, <argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsIDOMKeyListener</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>DestroyAnonymousContent</name></name><argument_list>(<argument><expr>&amp;<name>mInputContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>DestroyAnonymousContent</name></name><argument_list>(<argument><expr>&amp;<name>mTextContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>DestroyAnonymousContent</name></name><argument_list>(<argument><expr>&amp;<name>mPreHr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>DestroyAnonymousContent</name></name><argument_list>(<argument><expr>&amp;<name>mPostHr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>nsBlockFrame</name>::<name>DestroyFrom</name></name><argument_list>(<argument><expr><name>aDestructRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line">// REVIEW: We don't need to override BuildDisplayList, nsBlockFrame will honour</comment>
<comment type="line">// our visibility setting</comment>

<function><type><name>nsresult</name></type>
<name><name>nsIsIndexFrame</name>::<name>UpdatePromptLabel</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mTextContent</name></expr>)</condition><then> <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>result</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Get the text from the "prompt" attribute.</comment>
  <comment type="line">// If it is zero length, set it to a default value (localized)</comment>
  <decl_stmt><decl><type><name>nsXPIDLString</name></type> <name>prompt</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>mContent</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>mContent</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>prompt</name></name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><call><name><name>prompt</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// Generate localized label.</comment>
    <comment type="line">// We can't make any assumption as to what the default would be</comment>
    <comment type="line">// because the value is localized for non-english platforms, thus</comment>
    <comment type="line">// it might not be the string "This is a searchable index. Enter search keywords: "</comment>
    <expr_stmt><expr><name>result</name> =
      <call><name><name>nsContentUtils</name>::<name>GetLocalizedString</name></name><argument_list>(<argument><expr><name><name>nsContentUtils</name>::<name>eFORMS_PROPERTIES</name></name></expr></argument>,
                                         <argument><expr>"IsIndexPromptWithSpace"</expr></argument>, <argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>mTextContent</name>-&gt;<name>SetText</name></name><argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsIsIndexFrame</name>::<name>GetInputFrame</name></name><parameter_list>(<param><decl><type><name>nsIFormControlFrame</name>**</type> <name>oFrame</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mInputContent</name></expr>)</condition><then> <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"null content - cannot restore state"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>mInputContent</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsIFrame</name> *</type><name>frame</name> <init>= <expr><call><name><name>mInputContent</name>-&gt;<name>GetPrimaryFrame</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>frame</name></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>oFrame</name> = <call><name>do_QueryFrame</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr>*<name>oFrame</name> ? <name>NS_OK</name> : <name>NS_NOINTERFACE</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIsIndexFrame</name>::<name>GetInputValue</name></name><parameter_list>(<param><decl><type><name>nsString</name>&amp;</type> <name>oString</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITextControlElement</name></expr></argument>&gt;</argument_list></name></type> <name>txtCtrl</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mInputContent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>txtCtrl</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>txtCtrl</name>-&gt;<name>GetTextEditorValue</name></name><argument_list>(<argument><expr><name>oString</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIsIndexFrame</name>::<name>SetInputValue</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsString</name>&amp;</type> <name>aString</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITextControlElement</name></expr></argument>&gt;</argument_list></name></type> <name>txtCtrl</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mInputContent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>txtCtrl</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>txtCtrl</name>-&gt;<name>SetTextEditorValue</name></name><argument_list>(<argument><expr><name>aString</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type> 
<name><name>nsIsIndexFrame</name>::<name>SetFocus</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aOn</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aRepaint</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIFormControlFrame</name>*</type> <name>frame</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetInputFrame</name><argument_list>(<argument><expr>&amp;<name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>frame</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>frame</name>-&gt;<name>SetFocus</name></name><argument_list>(<argument><expr><name>aOn</name></expr></argument>, <argument><expr><name>aRepaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsIsIndexFrame</name>::<name>CreateAnonymousContent</name></name><parameter_list>(<param><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsIContent</name>*</expr></argument>&gt;</argument_list></name>&amp;</type> <name>aElements</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Get the node info manager (used to create hr's and input's)</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></type> <name>doc</name> <init>= <expr><call><name><name>mContent</name>-&gt;<name>GetDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsNodeInfoManager</name> *</type><name>nimgr</name> <init>= <expr><call><name><name>doc</name>-&gt;<name>NodeInfoManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// Create an hr</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name></type> <name>hrInfo</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>hrInfo</name> = <call><name><name>nimgr</name>-&gt;<name>GetNodeInfo</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>hr</name></name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>kNameSpaceID_XHTML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_NewHTMLElement</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mPreHr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>hrInfo</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>mPreHr</name> || !<call><name><name>aElements</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>mPreHr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <comment type="line">// Add a child text content node for the label</comment>
  <expr_stmt><expr><call><name>NS_NewTextNode</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mTextContent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nimgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>mTextContent</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <comment type="line">// set the value of the text node and add it to the child list</comment>
  <expr_stmt><expr><call><name>UpdatePromptLabel</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<call><name><name>aElements</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>mTextContent</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <comment type="line">// Create text input field</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name></type> <name>inputInfo</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>inputInfo</name> = <call><name><name>nimgr</name>-&gt;<name>GetNodeInfo</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>input</name></name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>kNameSpaceID_XHTML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_NewHTMLElement</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mInputContent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>inputInfo</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>mInputContent</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name><name>mInputContent</name>-&gt;<name>SetAttr</name></name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>type</name></name></expr></argument>,
                         <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"text"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<call><name><name>aElements</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>mInputContent</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <comment type="line">// Register as an event listener to submit on Enter press</comment>
  <expr_stmt><expr><name>mListener</name> = new <call><name><name>nsIsIndexFrame</name>::<name>KeyListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mInputContent</name>-&gt;<name>AddEventListenerByIID</name></name><argument_list>(<argument><expr><name>mListener</name></expr></argument>, <argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsIDOMKeyListener</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Create an hr</comment>
  <expr_stmt><expr><name>hrInfo</name> = <call><name><name>nimgr</name>-&gt;<name>GetNodeInfo</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>hr</name></name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>kNameSpaceID_XHTML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_NewHTMLElement</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mPostHr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>hrInfo</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>mPostHr</name> || !<call><name><name>aElements</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>mPostHr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIsIndexFrame</name>::<name>AppendAnonymousContentTo</name></name><parameter_list>(<param><decl><type><name>nsBaseContentList</name>&amp;</type> <name>aElements</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aElements</name>.<name>MaybeAppendElement</name></name><argument_list>(<argument><expr><name>mTextContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>aElements</name>.<name>MaybeAppendElement</name></name><argument_list>(<argument><expr><name>mInputContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<macro><name>NS_QUERYFRAME_HEAD</name><argument_list>(<argument>nsIsIndexFrame</argument>)</argument_list></macro>
  <macro><name>NS_QUERYFRAME_ENTRY</name><argument_list>(<argument>nsIAnonymousContentCreator</argument>)</argument_list></macro>
  <macro><name>NS_QUERYFRAME_ENTRY</name><argument_list>(<argument>nsIStatefulFrame</argument>)</argument_list></macro>
<macro><name>NS_QUERYFRAME_TAIL_INHERITING</name><argument_list>(<argument>nsBlockFrame</argument>)</argument_list></macro>

<macro><name>NS_IMPL_ISUPPORTS2</name><argument_list>(<argument>nsIsIndexFrame::KeyListener</argument>,
                   <argument>nsIDOMKeyListener</argument>,
                   <argument>nsIDOMEventListener</argument>)</argument_list></macro>

<function><type><name>nscoord</name></type>
<name><name>nsIsIndexFrame</name>::<name>GetMinWidth</name></name><parameter_list>(<param><decl><type><name>nsIRenderingContext</name> *</type><name>aRenderingContext</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nscoord</name></type> <name>result</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>DISPLAY_MIN_WIDTH</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Our min width is our pref width; the rest of our reflow is</comment>
  <comment type="line">// happily handled by nsBlockFrame</comment>
  <expr_stmt><expr><name>result</name> = <call><name>GetPrefWidth</name><argument_list>(<argument><expr><name>aRenderingContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsIsIndexFrame</name>::<name>IsLeaf</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsIsIndexFrame</name>::<name>AttributeChanged</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type>         <name>aNameSpaceID</name></decl></param>,
                                 <param><decl><type><name>nsIAtom</name>*</type>        <name>aAttribute</name></decl></param>,
                                 <param><decl><type><name>PRInt32</name></type>         <name>aModType</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name><name>nsGkAtoms</name>::<name>prompt</name></name> == <name>aAttribute</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rv</name> = <call><name>UpdatePromptLabel</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><name>rv</name> = <call><name><name>nsBlockFrame</name>::<name>AttributeChanged</name></name><argument_list>(<argument><expr><name>aNameSpaceID</name></expr></argument>, <argument><expr><name>aAttribute</name></expr></argument>, <argument><expr><name>aModType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type> 
<name><name>nsIsIndexFrame</name>::<name>KeyListener</name>::<name>KeyPress</name></name><parameter_list>(<param><decl><type><name>nsIDOMEvent</name>*</type> <name>aEvent</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>mOwner</name>-&gt;<name>KeyPress</name></name><argument_list>(<argument><expr><name>aEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIsIndexFrame</name>::<name>KeyPress</name></name><parameter_list>(<param><decl><type><name>nsIDOMEvent</name>*</type> <name>aEvent</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMKeyEvent</name></expr></argument>&gt;</argument_list></name></type> <name>keyEvent</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aEvent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>keyEvent</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>code</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>keyEvent</name>-&gt;<name>GetKeyCode</name></name><argument_list>(<argument><expr>&amp;<name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>code</name> == 0</expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>keyEvent</name>-&gt;<name>GetCharCode</name></name><argument_list>(<argument><expr>&amp;<name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>nsIDOMKeyEvent</name>::<name>DOM_VK_RETURN</name></name> == <name>code</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>OnSubmit</name><argument_list>(<argument><expr><call><name>PresContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>aEvent</name>-&gt;<name>PreventDefault</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// XXX Needed?</comment>
    }</block></then></if>
  }</block></then></if>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NS_DEBUG</name></cpp:ifdef>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsIsIndexFrame</name>::<name>GetFrameName</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><call><name>MakeFrameName</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"IsIndex"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// submission</comment>
<comment type="line">// much of this is cut and paste from nsFormFrame::OnSubmit</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsIsIndexFrame</name>::<name>OnSubmit</name></name><parameter_list>(<param><decl><type><name>nsPresContext</name>*</type> <name>aPresContext</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mContent</name> || !<name>mInputContent</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><call><name><name>mContent</name>-&gt;<name>IsEditable</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>result</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Begin ProcessAsURLEncoded</comment>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>data</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIUnicodeEncoder</name></expr></argument>&gt;</argument_list></name></type> <name>encoder</name></decl>;</decl_stmt>
  <if>if<condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name>GetEncoder</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>  <comment type="line">// Non-fatal error</comment>
     <expr_stmt><expr><name>encoder</name> = <name>nsnull</name></expr>;</expr_stmt></then></if>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>value</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetInputValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>URLEncode</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// End ProcessAsURLEncoded</comment>

  <comment type="line">// make the url string</comment>
  <decl_stmt><decl><type><name>nsILinkHandler</name> *</type><name>handler</name> <init>= <expr><call><name><name>aPresContext</name>-&gt;<name>GetLinkHandler</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>href</name></decl>;</decl_stmt>

  <comment type="line">// Get the document.</comment>
  <comment type="line">// We'll need it now to form the URL we're submitting to.</comment>
  <comment type="line">// We'll also need it later to get the DOM window when notifying form submit observers (bug 33203)</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></type> <name>document</name> <init>= <expr><call><name><name>mContent</name>-&gt;<name>GetDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>document</name></expr>)</condition><then> <return>return <expr><name>NS_OK</name></expr>;</return></then></if> <comment type="line">// No doc means don't submit, see Bug 28988</comment>

  <comment type="line">// Resolve url to an absolute url</comment>
  <decl_stmt><decl><type><name>nsIURI</name> *</type><name>baseURI</name> <init>= <expr><call><name><name>document</name>-&gt;<name>GetDocBaseURI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>baseURI</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"No Base URL found in Form Submit!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return> <comment type="line">// No base URL -&gt; exit early, see Bug 30721</comment>
  }</block></then></if>

  <comment type="line">// If an action is not specified and we are inside </comment>
  <comment type="line">// a HTML document then reload the URL. This makes us</comment>
  <comment type="line">// compatible with 4.x browsers.</comment>
  <comment type="line">// If we are in some other type of document such as XML or</comment>
  <comment type="line">// XUL, do nothing. This prevents undesirable reloading of</comment>
  <comment type="line">// a document inside XUL.</comment>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIHTMLDocument</name></expr></argument>&gt;</argument_list></name></type> <name>htmlDoc</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>htmlDoc</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{   
    <comment type="line">// Must be a XML, XUL or other non-HTML document type</comment>
    <comment type="line">// so do nothing.</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if> 

  <comment type="line">// Necko's MakeAbsoluteURI doesn't reuse the baseURL's rel path if it is</comment>
  <comment type="line">// passed a zero length rel path.</comment>
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>relPath</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>baseURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>relPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<call><name><name>relPath</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>CopyUTF8toUTF16</name><argument_list>(<argument><expr><name>relPath</name></expr></argument>, <argument><expr><name>href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If re-using the same URL, chop off old query string (bug 25330)</comment>
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>queryStart</name> <init>= <expr><call><name><name>href</name>.<name>FindChar</name></name><argument_list>(<argument><expr>'?'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>kNotFound</name> != <name>queryStart</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>href</name>.<name>Truncate</name></name><argument_list>(<argument><expr><name>queryStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Rel path couldn't be formed in form submit!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></else></if>

  <comment type="line">// Add the URI encoded form values to the URI</comment>
  <comment type="line">// Get the scheme of the URI.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>actionURL</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsXPIDLCString</name></type> <name>scheme</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>isJSURL</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsACString</name> &amp;</type><name>docCharset</name> <init>= <expr><call><name><name>document</name>-&gt;<name>GetDocumentCharacterSet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsPromiseFlatCString</name>&amp;</type> <name>flatDocCharset</name> <init>= <expr><call><name>PromiseFlatCString</name><argument_list>(<argument><expr><name>docCharset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>result</name> = <call><name>NS_NewURI</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>actionURL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>href</name></expr></argument>,
                                      <argument><expr><call><name><name>flatDocCharset</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
                                      <argument><expr><name>baseURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>result</name> = <call><name><name>actionURL</name>-&gt;<name>SchemeIs</name></name><argument_list>(<argument><expr>"javascript"</expr></argument>, <argument><expr>&amp;<name>isJSURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <comment type="line">// Append the URI encoded variable/value pairs for GET's</comment>
  <if>if <condition>(<expr>!<name>isJSURL</name></expr>)</condition><then> <block>{ <comment type="line">// Not for JS URIs, see bug 26917</comment>
    <if>if <condition>(<expr><call><name><name>href</name>.<name>FindChar</name></name><argument_list>(<argument><expr>'?'</expr></argument>)</argument_list></call> == <name>kNotFound</name></expr>)</condition><then> <block>{ <comment type="line">// Add a ? if needed</comment>
      <expr_stmt><expr><call><name><name>href</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name>PRUnichar</name><argument_list>(<argument><expr>'?'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{                              <comment type="line">// Adding to existing query string</comment>
      <if>if <condition>(<expr><call><name><name>href</name>.<name>Last</name></name><argument_list>()</argument_list></call> != '&amp;' &amp;&amp; <call><name><name>href</name>.<name>Last</name></name><argument_list>()</argument_list></call> != '?'</expr>)</condition><then> <block>{   <comment type="line">// Add a &amp; if needed</comment>
        <expr_stmt><expr><call><name><name>href</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name>PRUnichar</name><argument_list>(<argument><expr>'&amp;'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></else></if>
    <expr_stmt><expr><call><name><name>href</name>.<name>Append</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>result</name> = <call><name>NS_NewURI</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>href</name></expr></argument>,
                     <argument><expr><call><name><name>flatDocCharset</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>baseURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>result</name></expr>;</return></then></if>

  <comment type="line">// Now pass on absolute url to the click handler</comment>
  <if>if <condition>(<expr><name>handler</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>handler</name>-&gt;<name>OnLinkClick</name></name><argument_list>(<argument><expr><name>mContent</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name><name>nsIsIndexFrame</name>::<name>GetSubmitCharset</name></name><parameter_list>(<param><decl><type><name>nsCString</name>&amp;</type> <name>oCharset</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>oCharset</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"UTF-8"</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// default to utf-8</comment>
  <comment type="line">// XXX</comment>
  <comment type="line">// We may want to get it from the HTML 4 Accept-Charset attribute first</comment>
  <comment type="line">// see 17.3 The FORM element in HTML 4 for details</comment>

  <comment type="line">// Get the charset from document</comment>
  <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>doc</name> <init>= <expr><call><name><name>mContent</name>-&gt;<name>GetDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>doc</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>oCharset</name> = <call><name><name>doc</name>-&gt;<name>GetDocumentCharacterSet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsIsIndexFrame</name>::<name>GetEncoder</name></name><parameter_list>(<param><decl><type><name>nsIUnicodeEncoder</name>**</type> <name>encoder</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>encoder</name> = <name>nsnull</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>charset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetSubmitCharset</name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="line">// Get Charset, get the encoder.</comment>
  <decl_stmt><decl><type><name>nsICharsetConverterManager</name> *</type> <name>ccm</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name>CallGetService</name><argument_list>(<argument><expr><name>NS_CHARSETCONVERTERMANAGER_CONTRACTID</name></expr></argument>, <argument><expr>&amp;<name>ccm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>nsnull</name> != <name>ccm</name>)</expr>)</condition><then> <block>{
     <expr_stmt><expr><name>rv</name> = <call><name><name>ccm</name>-&gt;<name>GetUnicodeEncoderRaw</name></name><argument_list>(<argument><expr><call><name><name>charset</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name>ccm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <if>if <condition>(<expr>!*<name>encoder</name></expr>)</condition><then> <block>{
       <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt>
     }</block></then></if>
     <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
       <expr_stmt><expr><name>rv</name> = <call><name>(*<name>encoder</name>)-&gt;<name>SetOutputErrorBehavior</name></name><argument_list>(<argument><expr><name><name>nsIUnicodeEncoder</name>::<name>kOnError_Replace</name></name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr>(<name>PRUnichar</name>)'?'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
     }</block></then></if>
  }</block></then></if>
  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<comment type="line">// XXX i18n helper routines</comment>
<function><type><name>char</name>*</type>
<name><name>nsIsIndexFrame</name>::<name>UnicodeToNewBytes</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUnichar</name>*</type> <name>aSrc</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLen</name></decl></param>, <param><decl><type><name>nsIUnicodeEncoder</name>*</type> <name>encoder</name></decl></param>)</parameter_list>
<block>{
   <decl_stmt><decl><type><name>char</name>*</type> <name>res</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
   <if>if<condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>encoder</name>-&gt;<name>Reset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
   <block>{
      <decl_stmt><decl><type><name>PRInt32</name></type> <name>maxByteLen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
      <if>if<condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>encoder</name>-&gt;<name>GetMaxLength</name></name><argument_list>(<argument><expr><name>aSrc</name></expr></argument>, <argument><expr>(<name>PRInt32</name>) <name>aLen</name></expr></argument>, <argument><expr>&amp;<name>maxByteLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> 
      <block>{
          <expr_stmt><expr><name>res</name> = new <name><name>char</name><index>[<expr><name>maxByteLen</name>+1</expr>]</index></name></expr>;</expr_stmt>
          <if>if<condition>(<expr><name>nsnull</name> != <name>res</name></expr>)</condition><then> 
          <block>{
             <decl_stmt><decl><type><name>PRInt32</name></type> <name>reslen</name> <init>= <expr><name>maxByteLen</name></expr></init></decl>;</decl_stmt>
             <decl_stmt><decl><type><name>PRInt32</name></type> <name>reslen2</name></decl> ;</decl_stmt>
             <decl_stmt><decl><type><name>PRInt32</name></type> <name>srclen</name> <init>= <expr><name>aLen</name></expr></init></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>encoder</name>-&gt;<name>Convert</name></name><argument_list>(<argument><expr><name>aSrc</name></expr></argument>, <argument><expr>&amp;<name>srclen</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr>&amp;<name>reslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><name>reslen2</name> = <name>maxByteLen</name>-<name>reslen</name></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>encoder</name>-&gt;<name>Finish</name></name><argument_list>(<argument><expr><name>res</name>+<name>reslen</name></expr></argument>, <argument><expr>&amp;<name>reslen2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><name><name>res</name><index>[<expr><name>reslen</name>+<name>reslen2</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
          }</block></then></if>
      }</block></then></if>

   }</block></then></if>
   <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<comment type="line">// XXX i18n helper routines</comment>
<function><type><name>void</name></type>
<name><name>nsIsIndexFrame</name>::<name>URLEncode</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsString</name>&amp;</type> <name>aString</name></decl></param>, <param><decl><type><name>nsIUnicodeEncoder</name>*</type> <name>encoder</name></decl></param>, <param><decl><type><name>nsString</name>&amp;</type> <name>oString</name></decl></param>)</parameter_list> 
<block>{
  <decl_stmt><decl><type><name>char</name>*</type> <name>inBuf</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <if>if<condition>(<expr><name>encoder</name></expr>)</condition><then>
    <expr_stmt><expr><name>inBuf</name>  = <call><name>UnicodeToNewBytes</name><argument_list>(<argument><expr><call><name><name>aString</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>aString</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if<condition>(<expr><name>nsnull</name> == <name>inBuf</name></expr>)</condition><then>
    <expr_stmt><expr><name>inBuf</name>  = <call><name>ToNewCString</name><argument_list>(<argument><expr><name>aString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="line">// convert to CRLF breaks</comment>
  <decl_stmt><decl><type><name>char</name>*</type> <name>convertedBuf</name> <init>= <expr><call><name><name>nsLinebreakConverter</name>::<name>ConvertLineBreaks</name></name><argument_list>(<argument><expr><name>inBuf</name></expr></argument>,
                           <argument><expr><name><name>nsLinebreakConverter</name>::<name>eLinebreakAny</name></name></expr></argument>, <argument><expr><name><name>nsLinebreakConverter</name>::<name>eLinebreakNet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr>delete <index>[]</index> <name>inBuf</name></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>char</name>*</type> <name>outBuf</name> <init>= <expr><call><name>nsEscape</name><argument_list>(<argument><expr><name>convertedBuf</name></expr></argument>, <argument><expr><name>url_XPAlphas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>oString</name>.<name>AssignASCII</name></name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>nsMemory</name>::<name>Free</name></name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>nsMemory</name>::<name>Free</name></name><argument_list>(<argument><expr><name>convertedBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line">//----------------------------------------------------------------------</comment>
<comment type="line">// nsIStatefulFrame</comment>
<comment type="line">//----------------------------------------------------------------------</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsIsIndexFrame</name>::<name>SaveState</name></name><parameter_list>(<param><decl><type><name>SpecialStateID</name></type> <name>aStateID</name></decl></param>, <param><decl><type><name>nsPresState</name>**</type> <name>aState</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Get the value string</comment>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>stateString</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetInputValue</name><argument_list>(<argument><expr><name>stateString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>res</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>! <call><name><name>stateString</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{

    <comment type="line">// Construct a pres state and store value in it.</comment>
    <expr_stmt><expr>*<name>aState</name> = new <call><name>nsPresState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!*<name>aState</name></expr>)</condition><then>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupportsString</name></expr></argument>&gt;</argument_list></name></type> <name>state</name>
      <argument_list>(<argument><expr><call><name>do_CreateInstance</name><argument_list>(<argument><expr><name>NS_SUPPORTS_STRING_CONTRACTID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>state</name></expr>)</condition><then>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name><name>state</name>-&gt;<name>SetData</name></name><argument_list>(<argument><expr><name>stateString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>(*<name>aState</name>)-&gt;<name>SetStateProperty</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsIsIndexFrame</name>::<name>RestoreState</name></name><parameter_list>(<param><decl><type><name>nsPresState</name>*</type> <name>aState</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Set the value to the stored state.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupportsString</name></expr></argument>&gt;</argument_list></name></type> <name>stateString</name>
    <argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name><name>aState</name>-&gt;<name>GetStateProperty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>data</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>stateString</name>-&gt;<name>GetData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SetInputValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
</unit>
