<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="0036044d090c0eb3dc12cd5dfbfaf7a32a8a54e2.h"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* vim: set ts=2 sw=2 et tw=78: */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Pierre Phaneuf &lt;pp@ludusdesign.com&gt;
 *   Henri Sivonen &lt;hsivonen@iki.fi&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentErrors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPresShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsEvent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGUIEvent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsEventDispatcher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNodeUtils.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_HTML5_TREE_DEPTH_LIMIT</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>

<decl_stmt><decl><type><name>class</name></type> <name>nsPresContext</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nsHtml5TreeBuilder</name>::<call><name>nsHtml5TreeBuilder</name><argument_list>(<argument><expr><name>nsAHtml5TreeOpSink</name>* <name>aOpSink</name></expr></argument>,
                                       <argument><expr><name>nsHtml5TreeOpStage</name>* <name>aStage</name></expr></argument>)</argument_list></call>
  : <call><name>scriptingEnabled</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>
  , <expr><call><name>fragment</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>
  , <expr><call><name>contextNode</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>
  , <expr><call><name>formPointer</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>
  , <expr><call><name>headPointer</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>
  , <expr><call><name>mOpSink</name><argument_list>(<argument><expr><name>aOpSink</name></expr></argument>)</argument_list></call></expr>
  , <macro><name>mHandles</name><argument_list>(<argument>new nsIContent*[NS_HTML5_TREE_BUILDER_HANDLE_ARRAY_LENGTH]</argument>)</argument_list></macro>
  , <expr><call><name>mHandlesUsed</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>
  , <expr><call><name>mSpeculativeLoadStage</name><argument_list>(<argument><expr><name>aStage</name></expr></argument>)</argument_list></call></expr>
  , <expr><call><name>mCurrentHtmlScriptIsAsyncOrDefer</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  , <macro><name>mActive</name><argument_list>(<argument>PR_FALSE</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{
  <expr><call><name>MOZ_COUNT_CTOR</name><argument_list>(<argument><expr><name>nsHtml5TreeBuilder</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>nsHtml5TreeBuilder</name>::~<macro><name>nsHtml5TreeBuilder</name><argument_list>()</argument_list></macro>
<block>{
  <expr><call><name>MOZ_COUNT_DTOR</name><argument_list>(<argument><expr><name>nsHtml5TreeBuilder</name></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>mActive</name></expr></argument>, <argument><expr>"nsHtml5TreeBuilder deleted without ever calling end() on it!"</expr></argument>)</argument_list></call></expr>;
  <expr><call><name><name>mOpQueue</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<name>nsIContent</name>**
<name>nsHtml5TreeBuilder</name>::<macro><name>createElement</name><argument_list>(<argument>PRInt32 aNamespace</argument>, <argument>nsIAtom* aName</argument>, <argument>nsHtml5HtmlAttributes* aAttributes</argument>)</argument_list></macro>
<block>{
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aAttributes</name></expr></argument>, <argument><expr>"Got null attributes."</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aName</name></expr></argument>, <argument><expr>"Got null name."</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aNamespace</name> == <name>kNameSpaceID_XHTML</name> || 
                  <name>aNamespace</name> == <name>kNameSpaceID_SVG</name> || 
                  <name>aNamespace</name> == <name>kNameSpaceID_MathML</name></expr></argument>,
                  <argument><expr>"Bogus namespace."</expr></argument>)</argument_list></call></expr>;

  <expr><name>nsIContent</name>** <name>content</name> = <call><name>AllocateContentHandle</name><argument_list>()</argument_list></call></expr>;
  <expr><name>nsHtml5TreeOperation</name>* <name>treeOp</name> = <call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;
  <expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>aNamespace</name></expr></argument>,
               <argument><expr><name>aName</name></expr></argument>,
               <argument><expr><name>aAttributes</name></expr></argument>,
               <argument><expr><name>content</name></expr></argument>,
               <argument><expr>!!<name>mSpeculativeLoadStage</name></expr></argument>)</argument_list></call></expr>;
  <comment type="line">// mSpeculativeLoadStage is non-null only in the off-the-main-thread</comment>
  <comment type="line">// tree builder, which handles the network stream</comment>
  
  <comment type="line">// Start wall of code for speculative loading and line numbers</comment>
  
  <if>if <condition>(<expr><name>mSpeculativeLoadStage</name></expr>)</condition><then> <block>{
    <switch>switch <condition>(<expr><name>aNamespace</name></expr>)</condition> <block>{
      <case>case <expr><name>kNameSpaceID_XHTML</name></expr>:
        <if>if <condition>(<expr><name>nsHtml5Atoms</name>::<name>img</name> == <name>aName</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>nsString</name>*</type> <name>url</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>getValue</name></name><argument_list>(<argument><expr><name>nsHtml5AttributeName</name>::<name>ATTR_SRC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>url</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mSpeculativeLoadQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call>-&gt;<call><name>InitImage</name><argument_list>(<argument><expr>*<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt/></block></then></if></block></then></if></case></block></switch></block></then></if>}</block></expr></expr_stmt>
        } else <if>if <condition>(<expr><name>nsHtml5Atoms</name>::<name>script</name> == <name>aName</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpSetScriptLineNumberAndFreeze</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><call><name><name>tokenizer</name>-&gt;<name>getLineNumber</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <decl_stmt><decl><type><name>nsString</name>*</type> <name>url</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>getValue</name></name><argument_list>(<argument><expr><name>nsHtml5AttributeName</name>::<name>ATTR_SRC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>url</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>nsString</name>*</type> <name>charset</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>getValue</name></name><argument_list>(<argument><expr><name>nsHtml5AttributeName</name>::<name>ATTR_CHARSET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>nsString</name>*</type> <name>type</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>getValue</name></name><argument_list>(<argument><expr><name>nsHtml5AttributeName</name>::<name>ATTR_TYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mSpeculativeLoadQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call>-&gt;<call><name>InitScript</name><argument_list>(<argument><expr>*<name>url</name></expr></argument>,
                                                   <argument><expr>(<name>charset</name>) ? *<name>charset</name> : <call><name>EmptyString</name><argument_list>()</argument_list></call></expr></argument>,
                                                   <argument><expr>(<name>type</name>) ? *<name>type</name> : <call><name>EmptyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mCurrentHtmlScriptIsAsyncOrDefer</name> = 
              <call><name><name>aAttributes</name>-&gt;<name>contains</name></name><argument_list>(<argument><expr><name>nsHtml5AttributeName</name>::<name>ATTR_ASYNC</name></expr></argument>)</argument_list></call> ||
              <call><name><name>aAttributes</name>-&gt;<name>contains</name></name><argument_list>(<argument><expr><name>nsHtml5AttributeName</name>::<name>ATTR_DEFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then> <else>else <if>if <condition>(<expr><name>nsHtml5Atoms</name>::<name>link</name> == <name>aName</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>nsString</name>*</type> <name>rel</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>getValue</name></name><argument_list>(<argument><expr><name>nsHtml5AttributeName</name>::<name>ATTR_REL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <comment type="line">// Not splitting on space here is bogus but the old parser didn't even</comment>
          <comment type="line">// do a case-insensitive check.</comment>
          <if>if <condition>(<expr><name>rel</name> &amp;&amp; <call><name><name>rel</name>-&gt;<name>LowerCaseEqualsASCII</name></name><argument_list>(<argument><expr>"stylesheet"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>nsString</name>*</type> <name>url</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>getValue</name></name><argument_list>(<argument><expr><name>nsHtml5AttributeName</name>::<name>ATTR_HREF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>url</name></expr>)</condition><then> <block>{
              <decl_stmt><decl><type><name>nsString</name>*</type> <name>charset</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>getValue</name></name><argument_list>(<argument><expr><name>nsHtml5AttributeName</name>::<name>ATTR_CHARSET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name><name>mSpeculativeLoadQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call>-&gt;<call><name>InitStyle</name><argument_list>(<argument><expr>*<name>url</name></expr></argument>,
                                                    <argument><expr>(<name>charset</name>) ? *<name>charset</name> : <call><name>EmptyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
          }</block></then></if>
        }</block></then> <else>else <if>if <condition>(<expr><name>nsHtml5Atoms</name>::<name>video</name> == <name>aName</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>nsString</name>*</type> <name>url</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>getValue</name></name><argument_list>(<argument><expr><name>nsHtml5AttributeName</name>::<name>ATTR_POSTER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>url</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mSpeculativeLoadQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call>-&gt;<call><name>InitImage</name><argument_list>(<argument><expr>*<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then> <else>else <if>if <condition>(<expr><name>nsHtml5Atoms</name>::<name>style</name> == <name>aName</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpSetStyleLineNumber</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><call><name><name>tokenizer</name>-&gt;<name>getLineNumber</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>nsHtml5Atoms</name>::<name>html</name> == <name>aName</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>nsString</name>*</type> <name>url</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>getValue</name></name><argument_list>(<argument><expr><name>nsHtml5AttributeName</name>::<name>ATTR_MANIFEST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>url</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mSpeculativeLoadQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call>-&gt;<call><name>InitManifest</name><argument_list>(<argument><expr>*<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then></if></else></if></else></if></else></if></else></if>
        <break>break;</break>
      <case>case <expr><name>kNameSpaceID_SVG</name></expr>:
        <if>if <condition>(<expr><name>nsHtml5Atoms</name>::<name>image</name> == <name>aName</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>nsString</name>*</type> <name>url</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>getValue</name></name><argument_list>(<argument><expr><name>nsHtml5AttributeName</name>::<name>ATTR_XLINK_HREF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>url</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mSpeculativeLoadQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call>-&gt;<call><name>InitImage</name><argument_list>(<argument><expr>*<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then> <else>else <if>if <condition>(<expr><name>nsHtml5Atoms</name>::<name>script</name> == <name>aName</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpSetScriptLineNumberAndFreeze</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><call><name><name>tokenizer</name>-&gt;<name>getLineNumber</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <decl_stmt><decl><type><name>nsString</name>*</type> <name>url</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>getValue</name></name><argument_list>(<argument><expr><name>nsHtml5AttributeName</name>::<name>ATTR_XLINK_HREF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>url</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>nsString</name>*</type> <name>type</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>getValue</name></name><argument_list>(<argument><expr><name>nsHtml5AttributeName</name>::<name>ATTR_TYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mSpeculativeLoadQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call>-&gt;<call><name>InitScript</name><argument_list>(<argument><expr>*<name>url</name></expr></argument>,
                                                   <argument><expr><call><name>EmptyString</name><argument_list>()</argument_list></call></expr></argument>,
                                                   <argument><expr>(<name>type</name>) ? *<name>type</name> : <call><name>EmptyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then> <else>else <if>if <condition>(<expr><name>nsHtml5Atoms</name>::<name>style</name> == <name>aName</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpSetStyleLineNumber</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><call><name><name>tokenizer</name>-&gt;<name>getLineNumber</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <decl_stmt><decl><type><name>nsString</name>*</type> <name>url</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>getValue</name></name><argument_list>(<argument><expr><name>nsHtml5AttributeName</name>::<name>ATTR_XLINK_HREF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>url</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mSpeculativeLoadQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call>-&gt;<call><name>InitStyle</name><argument_list>(<argument><expr>*<name>url</name></expr></argument>, <argument><expr><call><name>EmptyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then></if></else></if></else></if>        
        <break>break;</break>
    </case>}
  } <else>else <if>if <condition>(<expr><name>aNamespace</name> != <name>kNameSpaceID_MathML</name></expr>)</condition><then> <block>{
    <comment type="line">// No speculative loader--just line numbers and defer/async check</comment>
    <if>if <condition>(<expr><name>nsHtml5Atoms</name>::<name>style</name> == <name>aName</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpSetStyleLineNumber</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><call><name><name>tokenizer</name>-&gt;<name>getLineNumber</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>nsHtml5Atoms</name>::<name>script</name> == <name>aName</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpSetScriptLineNumberAndFreeze</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><call><name><name>tokenizer</name>-&gt;<name>getLineNumber</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>aNamespace</name> == <name>kNameSpaceID_XHTML</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>mCurrentHtmlScriptIsAsyncOrDefer</name> = 
          <call><name><name>aAttributes</name>-&gt;<name>contains</name></name><argument_list>(<argument><expr><name>nsHtml5AttributeName</name>::<name>ATTR_SRC</name></expr></argument>)</argument_list></call> &amp;&amp;
          (<call><name><name>aAttributes</name>-&gt;<name>contains</name></name><argument_list>(<argument><expr><name>nsHtml5AttributeName</name>::<name>ATTR_ASYNC</name></expr></argument>)</argument_list></call> ||
           <call><name><name>aAttributes</name>-&gt;<name>contains</name></name><argument_list>(<argument><expr><name>nsHtml5AttributeName</name>::<name>ATTR_DEFER</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
      }</block></then></if>
    }</block></then> <else>else <if>if <condition>(<expr><name>aNamespace</name> == <name>kNameSpaceID_XHTML</name> &amp;&amp; <name>nsHtml5Atoms</name>::<name>html</name> == <name>aName</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsString</name>*</type> <name>url</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>getValue</name></name><argument_list>(<argument><expr><name>nsHtml5AttributeName</name>::<name>ATTR_MANIFEST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>url</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpProcessOfflineManifest</name></expr></argument>, <argument><expr>*<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if></else></if></else></if>
  }</block></then></if></else>

  <comment type="line">// End wall of code for speculative loading</comment>
  
  <return>return <expr><name>content</name></expr>;</return>
}

nsIContent<expr_stmt><expr>**
<name>nsHtml5TreeBuilder</name>::<macro><name>createElement</name><argument_list>(<argument>PRInt32 aNamespace</argument>, <argument>nsIAtom* aName</argument>, <argument>nsHtml5HtmlAttributes* aAttributes</argument>, <argument>nsIContent** aFormElement</argument>)</argument_list></macro>
<block>{
  <expr><name>nsIContent</name>** <name>content</name> = <call><name>createElement</name><argument_list>(<argument><expr><name>aNamespace</name></expr></argument>, <argument><expr><name>aName</name></expr></argument>, <argument><expr><name>aAttributes</name></expr></argument>)</argument_list></call></expr>;
  <if>if <condition>(<expr><name>aFormElement</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpSetFormElement</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>aFormElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt/></block></then></if>}</block></expr></expr_stmt>
  <return>return <expr><name>content</name></expr>;</return>
}

nsIContent<expr_stmt><expr>**
<name>nsHtml5TreeBuilder</name>::<macro><name>createHtmlElementSetAsRoot</name><argument_list>(<argument>nsHtml5HtmlAttributes* aAttributes</argument>)</argument_list></macro>
<block>{
  <expr><name>nsIContent</name>** <name>content</name> = <call><name>createElement</name><argument_list>(<argument><expr><name>kNameSpaceID_XHTML</name></expr></argument>, <argument><expr><name>nsHtml5Atoms</name>::<name>html</name></expr></argument>, <argument><expr><name>aAttributes</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>nsHtml5TreeOperation</name>* <name>treeOp</name> = <call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;
  <expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpAppendToDocument</name></expr></argument>, <argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;
  <return>return <expr><name>content</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>void</name>
<name>nsHtml5TreeBuilder</name>::<macro><name>detachFromParent</name><argument_list>(<argument>nsIContent** aElement</argument>)</argument_list></macro>
<block>{
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aElement</name></expr></argument>, <argument><expr>"Null element"</expr></argument>)</argument_list></call></expr>;

  <expr><name>nsHtml5TreeOperation</name>* <name>treeOp</name> = <call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;
  <expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpDetach</name></expr></argument>, <argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name>
<name>nsHtml5TreeBuilder</name>::<macro><name>appendElement</name><argument_list>(<argument>nsIContent** aChild</argument>, <argument>nsIContent** aParent</argument>)</argument_list></macro>
<block>{
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aChild</name></expr></argument>, <argument><expr>"Null child"</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aParent</name></expr></argument>, <argument><expr>"Null parent"</expr></argument>)</argument_list></call></expr>;
  <if>if <condition>(<expr><name>mDeepTreeSurrogateParent</name></expr>)</condition><then> <block>{
    <return>return;</return>
  <expr_stmt/></block></then></if>}</block>
  <name>nsHtml5TreeOperation</name>* <name>treeOp</name> = <call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpAppend</name></expr></argument>, <argument><expr><name>aChild</name></expr></argument>, <argument><expr><name>aParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

void
<expr_stmt><expr><name>nsHtml5TreeBuilder</name>::<macro><name>appendChildrenToNewParent</name><argument_list>(<argument>nsIContent** aOldParent</argument>, <argument>nsIContent** aNewParent</argument>)</argument_list></macro>
<block>{
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aOldParent</name></expr></argument>, <argument><expr>"Null old parent"</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aNewParent</name></expr></argument>, <argument><expr>"Null new parent"</expr></argument>)</argument_list></call></expr>;

  <expr><name>nsHtml5TreeOperation</name>* <name>treeOp</name> = <call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;
  <expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpAppendChildrenToNewParent</name></expr></argument>, <argument><expr><name>aOldParent</name></expr></argument>, <argument><expr><name>aNewParent</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name>
<name>nsHtml5TreeBuilder</name>::<macro><name>insertFosterParentedCharacters</name><argument_list>(<argument>PRUnichar* aBuffer</argument>, <argument>PRInt32 aStart</argument>, <argument>PRInt32 aLength</argument>, <argument>nsIContent** aTable</argument>, <argument>nsIContent** aStackParent</argument>)</argument_list></macro>
<block>{
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aBuffer</name></expr></argument>, <argument><expr>"Null buffer"</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aTable</name></expr></argument>, <argument><expr>"Null table"</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aStackParent</name></expr></argument>, <argument><expr>"Null stack parent"</expr></argument>)</argument_list></call></expr>;

  <expr><name>PRUnichar</name>* <name>bufferCopy</name> = <name>new</name> <name><name>PRUnichar</name><index>[<expr><name>aLength</name></expr>]</index></name></expr>;
  <expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bufferCopy</name></expr></argument>, <argument><expr><name>aBuffer</name></expr></argument>, <argument><expr><name>aLength</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>PRUnichar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;
  
  <expr><name>nsHtml5TreeOperation</name>* <name>treeOp</name> = <call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;
  <expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpFosterParentText</name></expr></argument>, <argument><expr><name>bufferCopy</name></expr></argument>, <argument><expr><name>aLength</name></expr></argument>, <argument><expr><name>aStackParent</name></expr></argument>, <argument><expr><name>aTable</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name>
<name>nsHtml5TreeBuilder</name>::<macro><name>insertFosterParentedChild</name><argument_list>(<argument>nsIContent** aChild</argument>, <argument>nsIContent** aTable</argument>, <argument>nsIContent** aStackParent</argument>)</argument_list></macro>
<block>{
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aChild</name></expr></argument>, <argument><expr>"Null child"</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aTable</name></expr></argument>, <argument><expr>"Null table"</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aStackParent</name></expr></argument>, <argument><expr>"Null stack parent"</expr></argument>)</argument_list></call></expr>;

  <expr><name>nsHtml5TreeOperation</name>* <name>treeOp</name> = <call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;
  <expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpFosterParent</name></expr></argument>, <argument><expr><name>aChild</name></expr></argument>, <argument><expr><name>aStackParent</name></expr></argument>, <argument><expr><name>aTable</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name>
<name>nsHtml5TreeBuilder</name>::<macro><name>appendCharacters</name><argument_list>(<argument>nsIContent** aParent</argument>, <argument>PRUnichar* aBuffer</argument>, <argument>PRInt32 aStart</argument>, <argument>PRInt32 aLength</argument>)</argument_list></macro>
<block>{
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aBuffer</name></expr></argument>, <argument><expr>"Null buffer"</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aParent</name></expr></argument>, <argument><expr>"Null parent"</expr></argument>)</argument_list></call></expr>;

  <expr><name>PRUnichar</name>* <name>bufferCopy</name> = <name>new</name> <name><name>PRUnichar</name><index>[<expr><name>aLength</name></expr>]</index></name></expr>;
  <expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bufferCopy</name></expr></argument>, <argument><expr><name>aBuffer</name></expr></argument>, <argument><expr><name>aLength</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>PRUnichar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;
  
  <expr><name>nsHtml5TreeOperation</name>* <name>treeOp</name> = <call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;
  <expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpAppendText</name></expr></argument>, <argument><expr><name>bufferCopy</name></expr></argument>, <argument><expr><name>aLength</name></expr></argument>,
      <argument><expr><name>mDeepTreeSurrogateParent</name> ? <name>mDeepTreeSurrogateParent</name> : <name>aParent</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name>
<name>nsHtml5TreeBuilder</name>::<macro><name>appendIsindexPrompt</name><argument_list>(<argument>nsIContent** aParent</argument>)</argument_list></macro>
<block>{
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aParent</name></expr></argument>, <argument><expr>"Null parent"</expr></argument>)</argument_list></call></expr>;

  <expr><name>nsHtml5TreeOperation</name>* <name>treeOp</name> = <call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;
  <expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpAppendIsindexPrompt</name></expr></argument>, <argument><expr><name>aParent</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name>
<name>nsHtml5TreeBuilder</name>::<macro><name>appendComment</name><argument_list>(<argument>nsIContent** aParent</argument>, <argument>PRUnichar* aBuffer</argument>, <argument>PRInt32 aStart</argument>, <argument>PRInt32 aLength</argument>)</argument_list></macro>
<block>{
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aBuffer</name></expr></argument>, <argument><expr>"Null buffer"</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aParent</name></expr></argument>, <argument><expr>"Null parent"</expr></argument>)</argument_list></call></expr>;
  <if>if <condition>(<expr><name>mDeepTreeSurrogateParent</name></expr>)</condition><then> <block>{
    <return>return;</return>
  <expr_stmt/></block></then></if>}</block>

  <name>PRUnichar</name>* <name>bufferCopy</name> = <name>new</name> <name><name>PRUnichar</name><index>[<expr><name>aLength</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bufferCopy</name></expr></argument>, <argument><expr><name>aBuffer</name></expr></argument>, <argument><expr><name>aLength</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>PRUnichar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpAppendComment</name></expr></argument>, <argument><expr><name>bufferCopy</name></expr></argument>, <argument><expr><name>aLength</name></expr></argument>, <argument><expr><name>aParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

void
<expr_stmt><expr><name>nsHtml5TreeBuilder</name>::<macro><name>appendCommentToDocument</name><argument_list>(<argument>PRUnichar* aBuffer</argument>, <argument>PRInt32 aStart</argument>, <argument>PRInt32 aLength</argument>)</argument_list></macro>
<block>{
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aBuffer</name></expr></argument>, <argument><expr>"Null buffer"</expr></argument>)</argument_list></call></expr>;

  <expr><name>PRUnichar</name>* <name>bufferCopy</name> = <name>new</name> <name><name>PRUnichar</name><index>[<expr><name>aLength</name></expr>]</index></name></expr>;
  <expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bufferCopy</name></expr></argument>, <argument><expr><name>aBuffer</name></expr></argument>, <argument><expr><name>aLength</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>PRUnichar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;
  
  <expr><name>nsHtml5TreeOperation</name>* <name>treeOp</name> = <call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;
  <expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpAppendCommentToDocument</name></expr></argument>, <argument><expr><name>bufferCopy</name></expr></argument>, <argument><expr><name>aLength</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name>
<name>nsHtml5TreeBuilder</name>::<macro><name>addAttributesToElement</name><argument_list>(<argument>nsIContent** aElement</argument>, <argument>nsHtml5HtmlAttributes* aAttributes</argument>)</argument_list></macro>
<block>{
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aElement</name></expr></argument>, <argument><expr>"Null element"</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aAttributes</name></expr></argument>, <argument><expr>"Null attributes"</expr></argument>)</argument_list></call></expr>;

  <if>if <condition>(<expr><name>aAttributes</name> == <name>nsHtml5HtmlAttributes</name>::<name>EMPTY_ATTRIBUTES</name></expr>)</condition><then> <block>{
    <return>return;</return>
  <expr_stmt/></block></then></if>}</block>
  <name>nsHtml5TreeOperation</name>* <name>treeOp</name> = <call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>aElement</name></expr></argument>, <argument><expr><name>aAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

void
<expr_stmt><expr><name>nsHtml5TreeBuilder</name>::<macro><name>markMalformedIfScript</name><argument_list>(<argument>nsIContent** aElement</argument>)</argument_list></macro>
<block>{
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aElement</name></expr></argument>, <argument><expr>"Null element"</expr></argument>)</argument_list></call></expr>;

  <expr><name>nsHtml5TreeOperation</name>* <name>treeOp</name> = <call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;
  <expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpMarkMalformedIfScript</name></expr></argument>, <argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name>
<name>nsHtml5TreeBuilder</name>::<macro><name>start</name><argument_list>(<argument>PRBool fragment</argument>)</argument_list></macro>
<block>{
  <expr><name>mCurrentHtmlScriptIsAsyncOrDefer</name> = <name>PR_FALSE</name></expr>;
  <expr><name>mDeepTreeSurrogateParent</name> = <name>nsnull</name></expr>;
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <expr><name>mActive</name> = <name>PR_TRUE</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>

<name>void</name>
<name>nsHtml5TreeBuilder</name>::<macro><name>end</name><argument_list>()</argument_list></macro>
<block>{
  <expr><call><name><name>mOpQueue</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <expr><name>mActive</name> = <name>PR_FALSE</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>

<name>void</name>
<name>nsHtml5TreeBuilder</name>::<macro><name>appendDoctypeToDocument</name><argument_list>(<argument>nsIAtom* aName</argument>, <argument>nsString* aPublicId</argument>, <argument>nsString* aSystemId</argument>)</argument_list></macro>
<block>{
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aName</name></expr></argument>, <argument><expr>"Null name"</expr></argument>)</argument_list></call></expr>;

  <expr><name>nsHtml5TreeOperation</name>* <name>treeOp</name> = <call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;
  <expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>aName</name></expr></argument>, <argument><expr>*<name>aPublicId</name></expr></argument>, <argument><expr>*<name>aSystemId</name></expr></argument>)</argument_list></call></expr>;
  <comment type="line">// nsXMLContentSink can flush here, but what's the point?</comment>
  <comment type="line">// It can also interrupt here, but we can't.</comment>
}</block>

<name>void</name>
<name>nsHtml5TreeBuilder</name>::<macro><name>elementPushed</name><argument_list>(<argument>PRInt32 aNamespace</argument>, <argument>nsIAtom* aName</argument>, <argument>nsIContent** aElement</argument>)</argument_list></macro>
<block>{
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aNamespace</name> == <name>kNameSpaceID_XHTML</name> || <name>aNamespace</name> == <name>kNameSpaceID_SVG</name> || <name>aNamespace</name> == <name>kNameSpaceID_MathML</name></expr></argument>, <argument><expr>"Element isn't HTML, SVG or MathML!"</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aName</name></expr></argument>, <argument><expr>"Element doesn't have local name!"</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aElement</name></expr></argument>, <argument><expr>"No element!"</expr></argument>)</argument_list></call></expr>;
  <comment type="block">/*
   * The frame constructor uses recursive algorithms, so it can't deal with
   * arbitrarily deep trees. This is especially a problem on Windows where
   * the permitted depth of the runtime stack is rather small.
   *
   * The following is a protection against author incompetence--not against
   * malice. There are other ways to make the DOM deep anyway.
   *
   * The basic idea is that when the tree builder stack gets too deep,
   * append operations no longer append to the node that the HTML parsing
   * algorithm says they should but instead text nodes are append to the last
   * element that was seen before a magic tree builder stack threshold was
   * reached and element and comment nodes aren't appended to the DOM at all.
   *
   * However, for security reasons, non-child descendant text nodes inside an
   * SVG script or style element should not become children. Also, non-cell
   * table elements shouldn't be used as surrogate parents for user experience
   * reasons.
   */</comment>
  <if>if <condition>(<expr>!<name>mDeepTreeSurrogateParent</name> &amp;&amp; <name>currentPtr</name> &gt;= <name>NS_HTML5_TREE_DEPTH_LIMIT</name> &amp;&amp;
      !(<name>aName</name> == <name>nsHtml5Atoms</name>::<name>script</name> ||
        <name>aName</name> == <name>nsHtml5Atoms</name>::<name>table</name> ||
        <name>aName</name> == <name>nsHtml5Atoms</name>::<name>thead</name> ||
        <name>aName</name> == <name>nsHtml5Atoms</name>::<name>tfoot</name> ||
        <name>aName</name> == <name>nsHtml5Atoms</name>::<name>tbody</name> ||
        <name>aName</name> == <name>nsHtml5Atoms</name>::<name>tr</name> ||
        <name>aName</name> == <name>nsHtml5Atoms</name>::<name>colgroup</name> ||
        <name>aName</name> == <name>nsHtml5Atoms</name>::<name>style</name>)</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mDeepTreeSurrogateParent</name> = <name>aElement</name></expr>;</expr_stmt>
  <expr_stmt/></block></then></if>}</block></expr></expr_stmt>
  <if>if <condition>(<expr><name>aNamespace</name> != <name>kNameSpaceID_XHTML</name></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>
  <if>if <condition>(<expr><name>aName</name> == <name>nsHtml5Atoms</name>::<name>body</name> || <name>aName</name> == <name>nsHtml5Atoms</name>::<name>frameset</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpStartLayout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>
}

void
<expr_stmt><expr><name>nsHtml5TreeBuilder</name>::<macro><name>elementPopped</name><argument_list>(<argument>PRInt32 aNamespace</argument>, <argument>nsIAtom* aName</argument>, <argument>nsIContent** aElement</argument>)</argument_list></macro>
<block>{
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aNamespace</name> == <name>kNameSpaceID_XHTML</name> || <name>aNamespace</name> == <name>kNameSpaceID_SVG</name> || <name>aNamespace</name> == <name>kNameSpaceID_MathML</name></expr></argument>, <argument><expr>"Element isn't HTML, SVG or MathML!"</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aName</name></expr></argument>, <argument><expr>"Element doesn't have local name!"</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aElement</name></expr></argument>, <argument><expr>"No element!"</expr></argument>)</argument_list></call></expr>;
  <if>if <condition>(<expr><name>mDeepTreeSurrogateParent</name> &amp;&amp; <name>currentPtr</name> &lt;= <name>NS_HTML5_TREE_DEPTH_LIMIT</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mDeepTreeSurrogateParent</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt/></block></then></if>}</block></expr></expr_stmt>
  <if>if <condition>(<expr><name>aNamespace</name> == <name>kNameSpaceID_MathML</name></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>
  <comment type="line">// we now have only SVG and HTML</comment>
  <if>if <condition>(<expr><name>aName</name> == <name>nsHtml5Atoms</name>::<name>script</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>mCurrentHtmlScriptIsAsyncOrDefer</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aNamespace</name> == <name>kNameSpaceID_XHTML</name></expr></argument>, 
                   <argument><expr>"Only HTML scripts may be async/defer."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpRunScriptAsyncDefer</name></expr></argument>, <argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
      <expr_stmt><expr><name>mCurrentHtmlScriptIsAsyncOrDefer</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>requestSuspension</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>InitScript</name></name><argument_list>(<argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>
  <if>if <condition>(<expr><name>aName</name> == <name>nsHtml5Atoms</name>::<name>title</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpDoneAddingChildren</name></expr></argument>, <argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>
  <if>if <condition>(<expr><name>aName</name> == <name>nsHtml5Atoms</name>::<name>style</name> || (<name>aNamespace</name> == <name>kNameSpaceID_XHTML</name> &amp;&amp; <name>aName</name> == <name>nsHtml5Atoms</name>::<name>link</name>)</expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpUpdateStyleSheet</name></expr></argument>, <argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>
  <if>if <condition>(<expr><name>aNamespace</name> == <name>kNameSpaceID_SVG</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
    if (aElement-&gt;HasAttr(kNameSpaceID_None, nsHtml5Atoms::onload)) {
      nsEvent event(PR_TRUE, NS_SVG_LOAD);
      event.eventStructType = NS_SVG_EVENT;
      event.flags |= NS_EVENT_FLAG_CANT_BUBBLE;
      <comment type="line">// Do we care about forcing presshell creation if it hasn't happened yet?</comment>
      <comment type="line">// That is, should this code flush or something?  Does it really matter?</comment>
      <comment type="line">// For that matter, do we really want to try getting the prescontext?  Does</comment>
      <comment type="line">// this event ever want one?</comment>
      nsRefPtr&lt;nsPresContext&gt; ctx;
      nsCOMPtr&lt;nsIPresShell&gt; shell = parser-&gt;GetDocument()-&gt;GetShell();
      if (shell) {
        ctx = shell-&gt;GetPresContext();
      }
      nsEventDispatcher::Dispatch(aElement, ctx, &amp;event);
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="line">// TODO soft flush the op queue every now and then</comment>
    <return>return;</return>
  }</block></then></if>
  <comment type="line">// we now have only HTML</comment>
  <comment type="line">// Some HTML nodes need DoneAddingChildren() called to initialize</comment>
  <comment type="line">// properly (e.g. form state restoration).</comment>
  <comment type="line">// XXX expose ElementName group here and do switch</comment>
  <if>if <condition>(<expr><name>aName</name> == <name>nsHtml5Atoms</name>::<name>video</name> ||
      <name>aName</name> == <name>nsHtml5Atoms</name>::<name>audio</name> ||
      <name>aName</name> == <name>nsHtml5Atoms</name>::<name>object</name> ||
      <name>aName</name> == <name>nsHtml5Atoms</name>::<name>applet</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpDoneAddingChildren</name></expr></argument>, <argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>
  <if>if <condition>(<expr><name>aName</name> == <name>nsHtml5Atoms</name>::<name>select</name> || 
      <name>aName</name> == <name>nsHtml5Atoms</name>::<name>textarea</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr>!<name>formPointer</name></expr>)</condition><then> <block>{
      <comment type="line">// If form inputs don't belong to a form, their state preservation</comment>
      <comment type="line">// won't work right without an append notification flush at this </comment>
      <comment type="line">// point. See bug 497861 and bug 539895.</comment>
      <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpFlushPendingAppendNotifications</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpDoneAddingChildren</name></expr></argument>, <argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>
  <if>if <condition>(<expr><name>aName</name> == <name>nsHtml5Atoms</name>::<name>input</name> ||
      <name>aName</name> == <name>nsHtml5Atoms</name>::<name>button</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr>!<name>formPointer</name></expr>)</condition><then> <block>{
      <comment type="line">// If form inputs don't belong to a form, their state preservation</comment>
      <comment type="line">// won't work right without an append notification flush at this </comment>
      <comment type="line">// point. See bug 497861.</comment>
      <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpFlushPendingAppendNotifications</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpDoneCreatingElement</name></expr></argument>, <argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>
  <if>if <condition>(<expr><name>aName</name> == <name>nsHtml5Atoms</name>::<name>meta</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpProcessMeta</name></expr></argument>, <argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>
  <return>return;</return>
}

void
<expr_stmt><expr><name>nsHtml5TreeBuilder</name>::<macro><name>accumulateCharacters</name><argument_list>(<argument>const PRUnichar* aBuf</argument>, <argument>PRInt32 aStart</argument>, <argument>PRInt32 aLength</argument>)</argument_list></macro>
<block>{
  <expr><name>PRInt32</name> <name>newFillLen</name> = <name>charBufferLen</name> + <name>aLength</name></expr>;
  <if>if <condition>(<expr><name>newFillLen</name> &gt; <name><name>charBuffer</name>.<name>length</name></name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>newAllocLength</name> <init>= <expr><name>newFillLen</name> + (<name>newFillLen</name> &gt;&gt; 1)</expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>jArray</name>&lt;<name>PRUnichar</name></expr>,<expr><name>PRInt32</name>&gt; <call><name>newBuf</name><argument_list>(<argument><expr><name>newAllocLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newBuf</name></expr></argument>, <argument><expr><name>charBuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PRUnichar</name></expr></argument>)</argument_list></sizeof> * <name>charBufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>charBuffer</name>.<name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>charBuffer</name> = <name>newBuf</name></expr>;</expr_stmt>
  <expr_stmt/></block></then></if>}</block>
  <call><name>memcpy</name><argument_list>(<argument><expr><name>charBuffer</name> + <name>charBufferLen</name></expr></argument>, <argument><expr><name>aBuf</name> + <name>aStart</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PRUnichar</name></expr></argument>)</argument_list></sizeof> * <name>aLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>charBufferLen</name> = <name>newFillLen</name></expr>;</expr_stmt>
}

nsIContent<expr_stmt><expr>**
<name>nsHtml5TreeBuilder</name>::<macro><name>AllocateContentHandle</name><argument_list>()</argument_list></macro>
<block>{
  <if>if <condition>(<expr><name>mHandlesUsed</name> == <name>NS_HTML5_TREE_BUILDER_HANDLE_ARRAY_LENGTH</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mOldHandles</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><call><name><name>mHandles</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mHandles</name> = <name>new</name> <name><name>nsIContent</name>*<index>[<expr><name>NS_HTML5_TREE_BUILDER_HANDLE_ARRAY_LENGTH</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mHandlesUsed</name> = 0</expr>;</expr_stmt>
  <expr_stmt/></block></then></if>}</block>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <name><name>mHandles</name><index>[<expr><name>mHandlesUsed</name></expr>]</index></name> = (<name>nsIContent</name>*)0xC0DEDBAD</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr>&amp;<name><name>mHandles</name><index>[<expr><name>mHandlesUsed</name>++</expr>]</index></name></expr>;</return>
}

PRBool
<expr_stmt><expr><name>nsHtml5TreeBuilder</name>::<macro><name>HasScript</name><argument_list>()</argument_list></macro>
<block>{
  <expr><name>PRUint32</name> <name>len</name> = <call><name><name>mOpQueue</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;
  <if>if <condition>(<expr>!<name>len</name></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  <expr_stmt/></block></then></if>}</block></expr></expr_stmt>
  <return>return <expr><call><name><name>mOpQueue</name>.<name>ElementAt</name></name><argument_list>(<argument><expr><name>len</name> - 1</expr></argument>)</argument_list></call>.<call><name>IsRunScript</name><argument_list>()</argument_list></call></expr>;</return>
}

PRBool
<expr_stmt><expr><name>nsHtml5TreeBuilder</name>::<macro><name>Flush</name><argument_list>()</argument_list></macro>
<block>{
  <expr><call><name>flushCharacters</name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>FlushLoads</name><argument_list>()</argument_list></call></expr>;
  <expr><name>PRBool</name> <name>hasOps</name> = !<call><name><name>mOpQueue</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>;
  <if>if <condition>(<expr><name>hasOps</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mOpSink</name>-&gt;<name>MoveOpsFrom</name></name><argument_list>(<argument><expr><name>mOpQueue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt/></block></then></if>}</block></expr></expr_stmt>
  <return>return <expr><name>hasOps</name></expr>;</return>
}

void
<expr_stmt><expr><name>nsHtml5TreeBuilder</name>::<macro><name>FlushLoads</name><argument_list>()</argument_list></macro>
<block>{
  <if>if <condition>(<expr>!<call><name><name>mSpeculativeLoadQueue</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mSpeculativeLoadStage</name>-&gt;<name>MoveSpeculativeLoadsFrom</name></name><argument_list>(<argument><expr><name>mSpeculativeLoadQueue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt/></block></then></if>}</block></expr></expr_stmt>
}

void
<expr_stmt><expr><name>nsHtml5TreeBuilder</name>::<macro><name>SetDocumentCharset</name><argument_list>(<argument>nsACString&amp; aCharset</argument>, 
                                       <argument>PRInt32 aCharsetSource</argument>)</argument_list></macro>
<block>{
  <expr><name>nsHtml5TreeOperation</name>* <name>treeOp</name> = <call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;
  <expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpSetDocumentCharset</name></expr></argument>, <argument><expr><name>aCharset</name></expr></argument>, <argument><expr><name>aCharsetSource</name></expr></argument>)</argument_list></call></expr>;  
}</block>

<name>void</name>
<name>nsHtml5TreeBuilder</name>::<macro><name>StreamEnded</name><argument_list>()</argument_list></macro>
<block>{
  <comment type="line">// The fragment mode calls DidBuildModel from nsHtml5Parser. </comment>
  <comment type="line">// Letting DidBuildModel be called from the executor in the fragment case</comment>
  <comment type="line">// confuses the EndLoad logic of nsHTMLDocument, since nsHTMLDocument</comment>
  <comment type="line">// thinks it is dealing with document.written content as opposed to </comment>
  <comment type="line">// innerHTML content.</comment>
  <if>if <condition>(<expr>!<name>fragment</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsHtml5TreeOperation</name>*</type> <name>treeOp</name> <init>= <expr><call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpStreamEnded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt/></block></then></if>}</block></expr></expr_stmt>
}

void
<expr_stmt><expr><name>nsHtml5TreeBuilder</name>::<macro><name>NeedsCharsetSwitchTo</name><argument_list>(<argument>const nsACString&amp; aCharset</argument>)</argument_list></macro>
<block>{
  <expr><name>nsHtml5TreeOperation</name>* <name>treeOp</name> = <call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;
  <expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>eTreeOpNeedsCharsetSwitchTo</name></expr></argument>, <argument><expr><name>aCharset</name></expr></argument>)</argument_list></call></expr>;  
}</block>

<name>void</name>
<name>nsHtml5TreeBuilder</name>::<macro><name>AddSnapshotToScript</name><argument_list>(<argument>nsAHtml5TreeBuilderState* aSnapshot</argument>, <argument>PRInt32 aLine</argument>)</argument_list></macro>
<block>{
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><call><name>HasScript</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"No script to add a snapshot to!"</expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aSnapshot</name></expr></argument>, <argument><expr>"Got null snapshot."</expr></argument>)</argument_list></call></expr>;
  <expr><call><name><name>mOpQueue</name>.<name>ElementAt</name></name><argument_list>(<argument><expr><call><name><name>mOpQueue</name>.<name>Length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call>.<call><name>SetSnapshot</name><argument_list>(<argument><expr><name>aSnapshot</name></expr></argument>, <argument><expr><name>aLine</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>PRBool</name> 
<name>nsHtml5TreeBuilder</name>::<macro><name>IsDiscretionaryFlushSafe</name><argument_list>()</argument_list></macro>
<block>{
  <return>return <expr>!(<name>charBufferLen</name> &amp;&amp; 
           <name>currentPtr</name> &gt;= 0 &amp;&amp; 
           <name><name>stack</name><index>[<expr><name>currentPtr</name></expr>]</index></name>-&gt;<name>fosterParenting</name>)</expr>;</return>
}</block></expr></expr_stmt>

<comment type="line">// DocumentModeHandler</comment>
<expr_stmt><expr><name>void</name>
<name>nsHtml5TreeBuilder</name>::<macro><name>documentMode</name><argument_list>(<argument>nsHtml5DocumentMode m</argument>)</argument_list></macro>
<block>{
  <expr><name>nsHtml5TreeOperation</name>* <name>treeOp</name> = <call><name><name>mOpQueue</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>treeOp</name></expr></argument>, <argument><expr>"Tree op allocation failed."</expr></argument>)</argument_list></call></expr>;
  <expr><call><name><name>treeOp</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></expr_stmt>
</unit>
