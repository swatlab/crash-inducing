<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="0053818c625beda16d39773901d301a0ed08fdeb.h"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   David Hyatt &lt;hyatt@netscape.com&gt;
 *   Pierre Phaneuf &lt;pp@ludusdesign.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<comment type="block">/* the interface (to internal code) for retrieving computed style data */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_nsStyleContext_h_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_nsStyleContext_h_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsRuleNode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIAtom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCSSPseudoElements.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>nsPresContext</name></decl>;</decl_stmt>

<comment type="block">/**
 * An nsStyleContext represents the computed style data for an element.
 * The computed style data are stored in a set of structs (see
 * nsStyleStruct.h) that are cached either on the style context or in
 * the rule tree (see nsRuleNode.h for a description of this caching and
 * how the cached structs are shared).
 *
 * Since the data in |nsIStyleRule|s and |nsRuleNode|s are immutable
 * (with a few exceptions, like system color changes), the data in an
 * nsStyleContext are also immutable (with the additional exception of
 * GetUniqueStyleData).  When style data change,
 * nsFrameManager::ReResolveStyleContext creates a new style context.
 *
 * Style contexts are reference counted.  References are generally held
 * by:
 *  1. the |nsIFrame|s that are using the style context and
 *  2. any *child* style contexts (this might be the reverse of
 *     expectation, but it makes sense in this case)
 * Style contexts participate in the mark phase of rule node garbage
 * collection.
 */</comment>

<decl_stmt><decl><type><name>class</name></type> <name>nsStyleContext</name>
<block>{
<label><name>public</name>:</label>
  <macro><name>nsStyleContext</name><argument_list>(<argument>nsStyleContext* aParent</argument>, <argument>nsIAtom* aPseudoTag</argument>,
                 <argument>nsCSSPseudoElements::Type aPseudoType</argument>,
                 <argument>nsRuleNode* aRuleNode</argument>, <argument>nsPresContext* aPresContext</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr>~<call><name>nsStyleContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name>* <name>operator</name></type> <name>new</name><argument_list>(<argument><expr><name>size_t</name> <name>sz</name></expr></argument>, <argument><expr><name>nsPresContext</name>* <name>aPresContext</name></expr></argument>)</argument_list> <name>CPP_THROW_NEW</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>Destroy</name><parameter_list>()</parameter_list>;</function_decl>

  <function><type><name>nsrefcnt</name></type> <name>AddRef</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>mRefCnt</name> == <name>PR_UINT32_MAX</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"refcount overflow, leaking object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>mRefCnt</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr>++<name>mRefCnt</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_LOG_ADDREF</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>mRefCnt</name></expr></argument>, <argument><expr>"nsStyleContext"</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nsStyleContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>mRefCnt</name></expr>;</return>
  }</block></function>

  <function><type><name>nsrefcnt</name></type> <name>Release</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>mRefCnt</name> == <name>PR_UINT32_MAX</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"refcount overflow, leaking object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>mRefCnt</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr>--<name>mRefCnt</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_LOG_RELEASE</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>mRefCnt</name></expr></argument>, <argument><expr>"nsStyleContext"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>mRefCnt</name> == 0</expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>Destroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return <expr>0</expr>;</return>
    }</block></then></if>
    <return>return <expr><name>mRefCnt</name></expr>;</return>
  }</block></function>

  <expr_stmt><expr><name>nsPresContext</name>* <macro><name>PresContext</name><argument_list>()</argument_list></macro> const <block>{ <return>return <expr><call><name><name>mRuleNode</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

  <expr_stmt><expr><name>nsStyleContext</name>* <macro><name>GetParent</name><argument_list>()</argument_list></macro> const <block>{ <return>return <expr><name>mParent</name></expr>;</return> }</block></expr></expr_stmt>

  <expr_stmt><expr><name>nsIAtom</name>* <macro><name>GetPseudo</name><argument_list>()</argument_list></macro> const <block>{ <return>return <expr><name>mPseudoTag</name></expr>;</return> }</block></expr></expr_stmt>
  <expr_stmt><expr><name>nsCSSPseudoElements</name>::<name>Type</name> <macro><name>GetPseudoType</name><argument_list>()</argument_list></macro> const <block>{
    <return>return <expr><name>static_cast</name>&lt;<name>nsCSSPseudoElements</name>::<name>Type</name>&gt;(<name>mBits</name> &gt;&gt;
                                                  <name>NS_STYLE_CONTEXT_TYPE_SHIFT</name>)</expr>;</return>
  }</block></expr></expr_stmt>

  <comment type="line">// Find, if it already exists *and is easily findable* (i.e., near the</comment>
  <comment type="line">// start of the child list), a style context whose:</comment>
  <comment type="line">//  * GetPseudo() matches aPseudoTag</comment>
  <comment type="line">//  * GetRuleNode() matches aRules</comment>
  <comment type="line">//  * !GetStyleIfVisited() == !aRulesIfVisited, and, if they're</comment>
  <comment type="line">//    non-null, GetStyleIfVisited()-&gt;GetRuleNode() == aRulesIfVisited</comment>
  <comment type="line">//  * RelevantLinkVisited() == aRelevantLinkVisited</comment>
  <expr_stmt><expr><name>already_AddRefed</name>&lt;<name>nsStyleContext</name>&gt;
  <macro><name>FindChildWithRules</name><argument_list>(<argument>const nsIAtom* aPseudoTag</argument>, <argument>nsRuleNode* aRules</argument>,
                     <argument>nsRuleNode* aRulesIfVisited</argument>,
                     <argument>PRBool aRelevantLinkVisited</argument>)</argument_list></macro></expr>;</expr_stmt>

  <comment type="line">// Does this style context or any of its ancestors have text</comment>
  <comment type="line">// decorations?</comment>
  <expr_stmt><expr><name>PRBool</name> <macro><name>HasTextDecorations</name><argument_list>()</argument_list></macro> const
    <block>{ <return>return <expr>!!(<name>mBits</name> &amp; <name>NS_STYLE_HAS_TEXT_DECORATIONS</name>)</expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Does this style context represent the style for a pseudo-element or</comment>
  <comment type="line">// inherit data from such a style context?  Whether this returns true</comment>
  <comment type="line">// is equivalent to whether it or any of its ancestors returns</comment>
  <comment type="line">// non-null for GetPseudo.</comment>
  <expr_stmt><expr><name>PRBool</name> <macro><name>HasPseudoElementData</name><argument_list>()</argument_list></macro> const
    <block>{ <return>return <expr>!!(<name>mBits</name> &amp; <name>NS_STYLE_HAS_PSEUDO_ELEMENT_DATA</name>)</expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Is the only link whose visitedness is allowed to influence the</comment>
  <comment type="line">// style of the node this style context is for (which is that element</comment>
  <comment type="line">// or its nearest ancestor that is a link) visited?</comment>
  <expr_stmt><expr><name>PRBool</name> <macro><name>RelevantLinkVisited</name><argument_list>()</argument_list></macro> const
    <block>{ <return>return <expr>!!(<name>mBits</name> &amp; <name>NS_STYLE_RELEVANT_LINK_VISITED</name>)</expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Is this a style context for a link?</comment>
  <expr_stmt><expr><name>PRBool</name> <macro><name>IsLinkContext</name><argument_list>()</argument_list></macro> const <block>{
    <return>return
      <expr><call><name>GetStyleIfVisited</name><argument_list>()</argument_list></call> &amp;&amp; <call><name>GetStyleIfVisited</name><argument_list>()</argument_list></call>-&gt;<call><name>GetParent</name><argument_list>()</argument_list></call> == <call><name>GetParent</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>

  <comment type="line">// Is this style context the GetStyleIfVisited() for some other style</comment>
  <comment type="line">// context?</comment>
  <expr_stmt><expr><name>PRBool</name> <macro><name>IsStyleIfVisited</name><argument_list>()</argument_list></macro> const
    <block>{ <return>return <expr>!!(<name>mBits</name> &amp; <name>NS_STYLE_IS_STYLE_IF_VISITED</name>)</expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Tells this style context that it should return true from</comment>
  <comment type="line">// IsStyleIfVisited.</comment>
  <function><type><name>void</name></type> <name>SetIsStyleIfVisited</name><parameter_list>()</parameter_list>
    <block>{ <expr_stmt><expr><name>mBits</name> |= <name>NS_STYLE_IS_STYLE_IF_VISITED</name></expr>;</expr_stmt> }</block></function>

  <comment type="line">// Return the style context whose style data should be used for the R,</comment>
  <comment type="line">// G, and B components of color, background-color, and border-*-color</comment>
  <comment type="line">// if RelevantLinkIsVisited().</comment>
  <comment type="line">//</comment>
  <comment type="line">// GetPseudo() and GetPseudoType() on this style context return the</comment>
  <comment type="line">// same as on |this|, and its depth in the tree (number of GetParent()</comment>
  <comment type="line">// calls until null is returned) is the same as |this|, since its</comment>
  <comment type="line">// parent is either |this|'s parent or |this|'s parent's</comment>
  <comment type="line">// style-if-visited.</comment>
  <comment type="line">//</comment>
  <comment type="line">// Structs on this context should never be examined without also</comment>
  <comment type="line">// examining the corresponding struct on |this|.  Doing so will likely</comment>
  <comment type="line">// both (1) lead to a privacy leak and (2) lead to dynamic change bugs</comment>
  <comment type="line">// related to the Peek code in nsStyleContext::CalcStyleDifference.</comment>
  <expr_stmt><expr><name>nsStyleContext</name>* <macro><name>GetStyleIfVisited</name><argument_list>()</argument_list></macro> const
    <block>{ <return>return <expr><name>mStyleIfVisited</name></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// To be called only from nsStyleSet.</comment>
  <decl_stmt><decl><type><name>void</name></type> <name>SetStyleIfVisited</name><argument_list>(<argument><expr><name>already_AddRefed</name>&lt;<name>nsStyleContext</name>&gt; <name>aStyleIfVisited</name></expr></argument>)</argument_list>
  <block>{
    <expr_stmt><expr><call><name>NS_ABORT_IF_FALSE</name><argument_list>(<argument><expr>!<call><name>IsStyleIfVisited</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"this context is not visited data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ABORT_IF_FALSE</name><argument_list>(<argument><expr><call><name><name>aStyleIfVisited</name>.<name>get</name></name><argument_list>()</argument_list></call>-&gt;<call><name>IsStyleIfVisited</name><argument_list>()</argument_list></call></expr></argument>,
                      <argument><expr>"other context is visited data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ABORT_IF_FALSE</name><argument_list>(<argument><expr>!<call><name><name>aStyleIfVisited</name>.<name>get</name></name><argument_list>()</argument_list></call>-&gt;<call><name>GetStyleIfVisited</name><argument_list>()</argument_list></call></expr></argument>,
                      <argument><expr>"other context does not have visited data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>mStyleIfVisited</name></expr></argument>, <argument><expr>"should only be set once"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mStyleIfVisited</name> = <name>aStyleIfVisited</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>GetStyleIfVisited</name><argument_list>()</argument_list></call>-&gt;<call><name>GetPseudo</name><argument_list>()</argument_list></call> == <call><name>GetPseudo</name><argument_list>()</argument_list></call></expr></argument>,
                 <argument><expr>"pseudo tag mismatch"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>GetParent</name><argument_list>()</argument_list></call> &amp;&amp; <call><name>GetParent</name><argument_list>()</argument_list></call>-&gt;<call><name>GetStyleIfVisited</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>GetStyleIfVisited</name><argument_list>()</argument_list></call>-&gt;<call><name>GetParent</name><argument_list>()</argument_list></call> ==
                     <call><name>GetParent</name><argument_list>()</argument_list></call>-&gt;<call><name>GetStyleIfVisited</name><argument_list>()</argument_list></call> ||
                   <call><name>GetStyleIfVisited</name><argument_list>()</argument_list></call>-&gt;<call><name>GetParent</name><argument_list>()</argument_list></call> == <call><name>GetParent</name><argument_list>()</argument_list></call></expr></argument>,
                   <argument><expr>"parent mismatch"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>GetStyleIfVisited</name><argument_list>()</argument_list></call>-&gt;<call><name>GetParent</name><argument_list>()</argument_list></call> == <call><name>GetParent</name><argument_list>()</argument_list></call></expr></argument>,
                   <argument><expr>"parent mismatch"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></decl></decl_stmt>

  <comment type="line">// Tell this style context to cache aStruct as the struct for aSID</comment>
  <function_decl><type><name>void</name></type> <name>SetStyle</name><parameter_list>(<param><decl><type><name>nsStyleStructID</name></type> <name>aSID</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aStruct</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// Setters for inherit structs only, since rulenode only sets those eagerly.</comment>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_STRUCT_INHERITED</name><parameter_list>(<param><type><name>name_</name></type></param>, <param><type><name>checkdata_cb_</name></type></param>, <param><type><name>ctor_args_</name></type></param>)</parameter_list></cpp:macro>          \
    <cpp:value>void SetStyle##name_ (nsStyle##name_ * aStruct) {                       \
      NS_ASSERTION(!mCachedInheritedData.m##name_##Data ||                  \
                   (mBits &amp;                                                 \
                    nsCachedStyleData::GetBitForSID(eStyleStruct_##name_)), \
                   "Going to leak styledata");                              \
      mCachedInheritedData.m##name_##Data = aStruct;                        \
    }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_STRUCT_RESET</name><parameter_list>(<param><type><name>name_</name></type></param>, <param><type><name>checkdata_cb_</name></type></param>, <param><type><name>ctor_args_</name></type></param>)</parameter_list></cpp:macro></cpp:define> <comment type="block">/* nothing */</comment>
  <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStyleStructList.h"</cpp:file></cpp:include>
  <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STYLE_STRUCT_RESET</name></cpp:undef>
  <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STYLE_STRUCT_INHERITED</name></cpp:undef>

  <function><type><name>nsRuleNode</name>*</type> <name>GetRuleNode</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>mRuleNode</name></expr>;</return> }</block></function>
  <function><type><name>void</name></type> <name>AddStyleBit</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUint32</name>&amp;</type> <name>aBit</name></decl></param>)</parameter_list> <block>{ <expr_stmt><expr><name>mBits</name> |= <name>aBit</name></expr>;</expr_stmt> }</block></function>

  <comment type="block">/*
   * Mark this style context's rule node (and its ancestors) to prevent
   * it from being garbage collected.
   */</comment>
  <function_decl><type><name>void</name></type> <name>Mark</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="block">/*
   * Get the style data for a style struct.  This is the most important
   * member function of nsIStyleContext.  It fills in a const pointer
   * to a style data struct that is appropriate for the style context's
   * frame.  This struct may be shared with other contexts (either in
   * the rule tree or the style context tree), so it should not be
   * modified.
   *
   * This function will NOT return null (even when out of memory) when
   * given a valid style struct ID, so the result does not need to be
   * null-checked.
   *
   * The typesafe functions below are preferred to the use of this
   * function, bothe because they're easier to read and  because they're
   * faster.
   */</comment>
  <function_decl><type><specifier>const</specifier> <name>void</name>* <name>NS_FASTCALL</name></type> <name>GetStyleData</name><parameter_list>(<param><decl><type><name>nsStyleStructID</name></type> <name>aSID</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/**
   * Define typesafe getter functions for each style struct by
   * preprocessing the list of style structs.  These functions are the
   * preferred way to get style data.  The macro creates functions like:
   *   const nsStyleBorder* GetStyleBorder();
   *   const nsStyleColor* GetStyleColor();
   */</comment>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_STRUCT</name><parameter_list>(<param><type><name>name_</name></type></param>, <param><type><name>checkdata_cb_</name></type></param>, <param><type><name>ctor_args_</name></type></param>)</parameter_list></cpp:macro>  \
    <cpp:value>const nsStyle##name_ * GetStyle##name_() {            \
      return DoGetStyle##name_(PR_TRUE);                  \
    }</cpp:value></cpp:define>
  <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStyleStructList.h"</cpp:file></cpp:include>
  <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STYLE_STRUCT</name></cpp:undef>

  <comment type="block">/**
   * PeekStyle* is like GetStyle* but doesn't trigger style
   * computation if the data is not cached on either the style context
   * or the rule node.
   *
   * Perhaps this shouldn't be a public nsStyleContext API.
   */</comment>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_STRUCT</name><parameter_list>(<param><type><name>name_</name></type></param>, <param><type><name>checkdata_cb_</name></type></param>, <param><type><name>ctor_args_</name></type></param>)</parameter_list></cpp:macro>  \
    <cpp:value>const nsStyle##name_ * PeekStyle##name_() {           \
      return DoGetStyle##name_(PR_FALSE);                 \
    }</cpp:value></cpp:define>
  <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStyleStructList.h"</cpp:file></cpp:include>
  <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STYLE_STRUCT</name></cpp:undef>

  <function_decl><type><name>void</name>*</type> <name>GetUniqueStyleData</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsStyleStructID</name>&amp;</type> <name>aSID</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>nsChangeHint</name></type> <name>CalcStyleDifference</name><parameter_list>(<param><decl><type><name>nsStyleContext</name>*</type> <name>aOther</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/**
   * Get a color that depends on link-visitedness using this and
   * this-&gt;GetStyleIfVisited().
   *
   * aProperty must be a color-valued property that nsStyleAnimation
   * knows how to extract.  It must also be a property that we know to
   * do change handling for in nsStyleContext::CalcDifference.
   *
   * Note that if aProperty is eCSSProperty_border_*_color, this
   * function handles -moz-use-text-color.
   */</comment>
  <function_decl><type><name>nscolor</name></type> <name>GetVisitedDependentColor</name><parameter_list>(<param><decl><type><name>nsCSSProperty</name></type> <name>aProperty</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/**
   * aColors should be a two element array of nscolor in which the first
   * color is the unvisited color and the second is the visited color.
   *
   * Combine the R, G, and B components of whichever of aColors should
   * be used based on aLinkIsVisited with the A component of aColors[0].
   */</comment>
  <function_decl><type><specifier>static</specifier> <name>nscolor</name></type> <name>CombineVisitedColors</name><parameter_list>(<param><decl><type><name>nscolor</name> *</type><name>aColors</name></decl></param>,
                                      <param><decl><type><name>PRBool</name></type> <name>aLinkIsVisited</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/**
   * Allocate a chunk of memory that is scoped to the lifetime of this
   * style context, i.e., memory that will automatically be freed when
   * this style context is destroyed.  This is intended for allocations
   * that are stored on this style context or its style structs.  (Use
   * on style structs is fine since any style context to which this
   * context's style structs are shared will be a descendant of this
   * style context and thus keep it alive.)
   *
   * This currently allocates the memory out of the pres shell arena.
   *
   * It would be relatively straightforward to write a Free method
   * for the underlying implementation, but we don't need it (or the
   * overhead of making a doubly-linked list or other structure to
   * support it).
   *
   * WARNING: Memory allocated using this method cannot be stored in the
   * rule tree, since rule nodes may outlive the style context.
   */</comment>
  <function_decl><type><name>void</name>*</type> <name>Alloc</name><parameter_list>(<param><decl><type><name>size_t</name></type> <name>aSize</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <function_decl><type><name>void</name></type> <name>List</name><parameter_list>(<param><decl><type><name>FILE</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aIndent</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>protected</name>:</label>
  <function_decl><type><name>void</name></type> <name>AddChild</name><parameter_list>(<param><decl><type><name>nsStyleContext</name>*</type> <name>aChild</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>RemoveChild</name><parameter_list>(<param><decl><type><name>nsStyleContext</name>*</type> <name>aChild</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>void</name></type> <name>ApplyStyleFixups</name><parameter_list>(<param><decl><type><name>nsPresContext</name>*</type> <name>aPresContext</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>void</name></type> <name>FreeAllocations</name><parameter_list>(<param><decl><type><name>nsPresContext</name>*</type> <name>aPresContext</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// Helper function that GetStyleData and GetUniqueStyleData use.  Only</comment>
  <comment type="line">// returns the structs we cache ourselves; never consults the ruletree.</comment>
  <function_decl><type><specifier>inline</specifier> <specifier>const</specifier> <name>void</name>*</type> <name>GetCachedStyleData</name><parameter_list>(<param><decl><type><name>nsStyleStructID</name></type> <name>aSID</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// Helper functions for GetStyle* and PeekStyle*</comment>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_STRUCT_INHERITED</name><parameter_list>(<param><type><name>name_</name></type></param>, <param><type><name>checkdata_cb_</name></type></param>, <param><type><name>ctor_args_</name></type></param>)</parameter_list></cpp:macro>      \
    <cpp:value>const nsStyle##name_ * DoGetStyle##name_(PRBool aComputeData) {     \
      const nsStyle##name_ * cachedData =                               \
        mCachedInheritedData.m##name_##Data;                            \
      if (cachedData) <comment type="block">/* Have it cached already, yay */</comment>                 \
        return cachedData;                                              \
      <comment type="block">/* Have the rulenode deal */</comment>                                      \
      return mRuleNode-&gt;GetStyle##name_(this, aComputeData);            \
    }</cpp:value></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_STRUCT_RESET</name><parameter_list>(<param><type><name>name_</name></type></param>, <param><type><name>checkdata_cb_</name></type></param>, <param><type><name>ctor_args_</name></type></param>)</parameter_list></cpp:macro>          \
    <cpp:value>const nsStyle##name_ * DoGetStyle##name_(PRBool aComputeData) {     \
      const nsStyle##name_ * cachedData =                               \
        mCachedResetData ? mCachedResetData-&gt;m##name_##Data : nsnull;   \
      if (cachedData) <comment type="block">/* Have it cached already, yay */</comment>                 \
        return cachedData;                                              \
      <comment type="block">/* Have the rulenode deal */</comment>                                      \
      return mRuleNode-&gt;GetStyle##name_(this, aComputeData);            \
    }</cpp:value></cpp:define>
  <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStyleStructList.h"</cpp:file></cpp:include>
  <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STYLE_STRUCT_RESET</name></cpp:undef>
  <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STYLE_STRUCT_INHERITED</name></cpp:undef>

  <decl_stmt><decl><type><name>nsStyleContext</name>* <specifier>const</specifier></type> <name>mParent</name></decl>;</decl_stmt> <comment type="line">// STRONG</comment>

  <comment type="line">// Children are kept in two circularly-linked lists.  The list anchor</comment>
  <comment type="line">// is not part of the list (null for empty), and we point to the first</comment>
  <comment type="line">// child.</comment>
  <comment type="line">// mEmptyChild for children whose rule node is the root rule node, and</comment>
  <comment type="line">// mChild for other children.  The order of children is not</comment>
  <comment type="line">// meaningful.</comment>
  <decl_stmt><decl><type><name>nsStyleContext</name>*</type> <name>mChild</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsStyleContext</name>*</type> <name>mEmptyChild</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsStyleContext</name>*</type> <name>mPrevSibling</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsStyleContext</name>*</type> <name>mNextSibling</name></decl>;</decl_stmt>

  <comment type="line">// Style to be used instead for the R, G, and B components of color,</comment>
  <comment type="line">// background-color, and border-*-color if the nearest ancestor link</comment>
  <comment type="line">// element is visited (see RelevantLinkVisited()).</comment>
  <expr_stmt><expr><name>nsRefPtr</name>&lt;<name>nsStyleContext</name>&gt; <name>mStyleIfVisited</name></expr>;</expr_stmt>

  <comment type="line">// If this style context is for a pseudo-element or anonymous box,</comment>
  <comment type="line">// the relevant atom.</comment>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIAtom</name>&gt; <name>mPseudoTag</name></expr>;</expr_stmt>

  <comment type="line">// The rule node is the node in the lexicographic tree of rule nodes</comment>
  <comment type="line">// (the "rule tree") that indicates which style rules are used to</comment>
  <comment type="line">// compute the style data, and in what cascading order.  The least</comment>
  <comment type="line">// specific rule matched is the one whose rule node is a child of the</comment>
  <comment type="line">// root of the rule tree, and the most specific rule matched is the</comment>
  <comment type="line">// |mRule| member of |mRuleNode|.</comment>
  <decl_stmt><decl><type><name>nsRuleNode</name>* <specifier>const</specifier></type>       <name>mRuleNode</name></decl>;</decl_stmt>

  <comment type="line">// Private to nsStyleContext::Alloc and FreeAllocations.</comment>
  <struct>struct <name>AllocationHeader</name> <block>{
    <decl_stmt><decl><type><name>AllocationHeader</name>*</type> <name>mNext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>mSize</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>void</name>*</type> <name>mStorageStart</name></decl>;</decl_stmt> <comment type="line">// ensure the storage is at least pointer-aligned</comment>
  }</block>;</struct>
  <decl_stmt><decl><type><name>AllocationHeader</name>*</type>       <name>mAllocations</name></decl>;</decl_stmt>

  <comment type="line">// mCachedInheritedData and mCachedResetData point to both structs that</comment>
  <comment type="line">// are owned by this style context and structs that are owned by one of</comment>
  <comment type="line">// this style context's ancestors (which are indirectly owned since this</comment>
  <comment type="line">// style context owns a reference to its parent).  If the bit in |mBits|</comment>
  <comment type="line">// is set for a struct, that means that the pointer for that struct is</comment>
  <comment type="line">// owned by an ancestor or by mRuleNode rather than by this style context.</comment>
  <comment type="line">// Since style contexts typically have some inherited data but only sometimes</comment>
  <comment type="line">// have reset data, we always allocate the mCachedInheritedData, but only</comment>
  <comment type="line">// sometimes allocate the mCachedResetData.</comment>
  <decl_stmt><decl><type><name>nsResetStyleData</name>*</type>       <name>mCachedResetData</name></decl>;</decl_stmt> <comment type="line">// Cached reset style data.</comment>
  <decl_stmt><decl><type><name>nsInheritedStyleData</name></type>    <name>mCachedInheritedData</name></decl>;</decl_stmt> <comment type="line">// Cached inherited style data</comment>
  <decl_stmt><decl><type><name>PRUint32</name></type>                <name>mBits</name></decl>;</decl_stmt> <comment type="line">// Which structs are inherited from the</comment>
                                 <comment type="line">// parent context or owned by mRuleNode.</comment>
  <decl_stmt><decl><type><name>PRUint32</name></type>                <name>mRefCnt</name></decl>;</decl_stmt>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>already_AddRefed</name>&lt;<name>nsStyleContext</name>&gt;
<macro><name>NS_NewStyleContext</name><argument_list>(<argument>nsStyleContext* aParentContext</argument>,
                   <argument>nsIAtom* aPseudoTag</argument>,
                   <argument>nsCSSPseudoElements::Type aPseudoType</argument>,
                   <argument>nsRuleNode* aRuleNode</argument>,
                   <argument>nsPresContext* aPresContext</argument>)</argument_list></macro></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
