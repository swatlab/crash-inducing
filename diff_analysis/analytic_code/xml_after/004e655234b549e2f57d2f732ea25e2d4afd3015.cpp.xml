<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="004e655234b549e2f57d2f732ea25e2d4afd3015.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Jungshik Shin &lt;jshin@mailaps.org&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsMediaDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGkAtoms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsRect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPresContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPresShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScrollable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIViewManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsITextToSubURI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIURL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPrintfCString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIContentViewer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIMarkupDocumentViewer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIParser.h"</cpp:file></cpp:include> <comment type="line">// kCharsetFrom* macro definition</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocumentCharsetInfo.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNodeInfoManager.h"</cpp:file></cpp:include>

<constructor><name><name>nsMediaDocumentStreamListener</name>::<name>nsMediaDocumentStreamListener</name></name><parameter_list>(<param><decl><type><name>nsMediaDocument</name> *</type><name>aDocument</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mDocument</name> = <name>aDocument</name></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>nsMediaDocumentStreamListener</name>::~<name>nsMediaDocumentStreamListener</name></name><parameter_list>()</parameter_list>
<block>{
}</block></destructor>


<macro><name>NS_IMPL_THREADSAFE_ISUPPORTS2</name><argument_list>(<argument>nsMediaDocumentStreamListener</argument>,
                              <argument>nsIRequestObserver</argument>,
                              <argument>nsIStreamListener</argument>)</argument_list></macro>


<function><type><name>void</name></type>
<name><name>nsMediaDocumentStreamListener</name>::<name>SetStreamListener</name></name><parameter_list>(<param><decl><type><name>nsIStreamListener</name> *</type><name>aListener</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mNextStream</name> = <name>aListener</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMediaDocumentStreamListener</name>::<name>OnStartRequest</name></name><parameter_list>(<param><decl><type><name>nsIRequest</name>*</type> <name>request</name></decl></param>, <param><decl><type><name>nsISupports</name> *</type><name>ctxt</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mDocument</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>mDocument</name>-&gt;<name>StartLayout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>mNextStream</name></expr>)</condition><then> <block>{
    <return>return <expr><call><name><name>mNextStream</name>-&gt;<name>OnStartRequest</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMediaDocumentStreamListener</name>::<name>OnStopRequest</name></name><parameter_list>(<param><decl><type><name>nsIRequest</name>*</type> <name>request</name></decl></param>,
                                             <param><decl><type><name>nsISupports</name> *</type><name>ctxt</name></decl></param>,
                                             <param><decl><type><name>nsresult</name></type> <name>status</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>mNextStream</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rv</name> = <call><name><name>mNextStream</name>-&gt;<name>OnStopRequest</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// No more need for our document so clear our reference and prevent leaks</comment>
  <expr_stmt><expr><name>mDocument</name> = <name>nsnull</name></expr>;</expr_stmt>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsMediaDocumentStreamListener</name>::<name>OnDataAvailable</name></name><parameter_list>(<param><decl><type><name>nsIRequest</name>*</type> <name>request</name></decl></param>,
                                               <param><decl><type><name>nsISupports</name> *</type><name>ctxt</name></decl></param>,
                                               <param><decl><type><name>nsIInputStream</name> *</type><name>inStr</name></decl></param>,
                                               <param><decl><type><name>PRUint32</name></type> <name>sourceOffset</name></decl></param>,
                                               <param><decl><type><name>PRUint32</name></type> <name>count</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mNextStream</name></expr>)</condition><then> <block>{
    <return>return <expr><call><name><name>mNextStream</name>-&gt;<name>OnDataAvailable</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>inStr</name></expr></argument>, <argument><expr><name>sourceOffset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// default format names for nsMediaDocument. </comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>* <specifier>const</specifier></type> <name><name>nsMediaDocument</name>::<name>sFormatNames</name><index>[<expr>4</expr>]</index></name> <init>= 
<expr><block>{
  <expr>"MediaTitleWithNoInfo"</expr>,    <comment type="line">// eWithNoInfo</comment>
  <expr>"MediaTitleWithFile"</expr>,      <comment type="line">// eWithFile</comment>
  <expr>""</expr>,                        <comment type="line">// eWithDim</comment>
  <expr>""</expr>                         <comment type="line">// eWithDimAndFile</comment>
}</block></expr></init></decl>;</decl_stmt>

<constructor><name><name>nsMediaDocument</name>::<name>nsMediaDocument</name></name><parameter_list>()</parameter_list>
<block>{
}</block></constructor>
<destructor><name><name>nsMediaDocument</name>::~<name>nsMediaDocument</name></name><parameter_list>()</parameter_list>
<block>{
}</block></destructor>

<function><type><name>nsresult</name></type>
<name><name>nsMediaDocument</name>::<name>Init</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsHTMLDocument</name>::<name>Init</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Create a bundle for the localization</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIStringBundleService</name></expr></argument>&gt;</argument_list></name></type> <name>stringService</name><argument_list>(
    <argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_STRINGBUNDLE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>stringService</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>stringService</name>-&gt;<name>CreateBundle</name></name><argument_list>(<argument><expr><name>NSMEDIADOCUMENT_PROPERTIES_URI</name></expr></argument>,
                                <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mStringBundle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsMediaDocument</name>::<name>StartDocumentLoad</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type>         <name>aCommand</name></decl></param>,
                                   <param><decl><type><name>nsIChannel</name>*</type>         <name>aChannel</name></decl></param>,
                                   <param><decl><type><name>nsILoadGroup</name>*</type>       <name>aLoadGroup</name></decl></param>,
                                   <param><decl><type><name>nsISupports</name>*</type>        <name>aContainer</name></decl></param>,
                                   <param><decl><type><name>nsIStreamListener</name>**</type> <name>aDocListener</name></decl></param>,
                                   <param><decl><type><name>PRBool</name></type>              <name>aReset</name></decl></param>,
                                   <param><decl><type><name>nsIContentSink</name>*</type>     <name>aSink</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsDocument</name>::<name>StartDocumentLoad</name></name><argument_list>(<argument><expr><name>aCommand</name></expr></argument>, <argument><expr><name>aChannel</name></expr></argument>, <argument><expr><name>aLoadGroup</name></expr></argument>,
                                              <argument><expr><name>aContainer</name></expr></argument>, <argument><expr><name>aDocListener</name></expr></argument>, <argument><expr><name>aReset</name></expr></argument>,
                                              <argument><expr><name>aSink</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// We try to set the charset of the current document to that of the </comment>
  <comment type="line">// 'genuine' (as opposed to an intervening 'chrome') parent document </comment>
  <comment type="line">// that may be in a different window/tab. Even if we fail here,</comment>
  <comment type="line">// we just return NS_OK because another attempt is made in </comment>
  <comment type="line">// |UpdateTitleAndCharset| and the worst thing possible is a mangled </comment>
  <comment type="line">// filename in the titlebar and the file picker.</comment>

  <comment type="line">// When this document is opened in the window/tab of the referring </comment>
  <comment type="line">// document (by a simple link-clicking), |prevDocCharacterSet| contains </comment>
  <comment type="line">// the charset of the referring document. On the other hand, if the</comment>
  <comment type="line">// document is opened in a new window, it is |defaultCharacterSet| of |muCV| </comment>
  <comment type="line">// where the charset of our interest is stored. In case of openining </comment>
  <comment type="line">// in a new tab, we get the charset from |documentCharsetInfo|. Note that we </comment>
  <comment type="line">// exclude UTF-8 as 'invalid' because UTF-8 is likely to be the charset </comment>
  <comment type="line">// of a chrome document that has nothing to do with the actual content </comment>
  <comment type="line">// whose charset we want to know. Even if "the actual content" is indeed </comment>
  <comment type="line">// in UTF-8, we don't lose anything because the default empty value is </comment>
  <comment type="line">// considered synonymous with UTF-8. </comment>
    
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocShell</name></expr></argument>&gt;</argument_list></name></type> <name>docShell</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aContainer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// not being able to set the charset is not critical.</comment>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>docShell</name></expr></argument>, <argument><expr><name>NS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocumentCharsetInfo</name></expr></argument>&gt;</argument_list></name></type> <name>dcInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>charset</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>docShell</name>-&gt;<name>GetDocumentCharsetInfo</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>dcInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>dcInfo</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAtom</name></expr></argument>&gt;</argument_list></name></type> <name>csAtom</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>dcInfo</name>-&gt;<name>GetParentCharset</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>csAtom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>csAtom</name></expr>)</condition><then> <block>{   <comment type="line">// opening in a new tab</comment>
      <expr_stmt><expr><call><name><name>csAtom</name>-&gt;<name>ToUTF8String</name></name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <if>if <condition>(<expr><call><name><name>charset</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call> || <call><name><name>charset</name>.<name>Equals</name></name><argument_list>(<argument><expr>"UTF-8"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContentViewer</name></expr></argument>&gt;</argument_list></name></type> <name>cv</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>docShell</name>-&gt;<name>GetContentViewer</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>cv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// not being able to set the charset is not critical.</comment>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>cv</name></expr></argument>, <argument><expr><name>NS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIMarkupDocumentViewer</name></expr></argument>&gt;</argument_list></name></type> <name>muCV</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>cv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>muCV</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>muCV</name>-&gt;<name>GetPrevDocCharacterSet</name></name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line">// opening in the same window/tab</comment>
      <if>if <condition>(<expr><call><name><name>charset</name>.<name>Equals</name></name><argument_list>(<argument><expr>"UTF-8"</expr></argument>)</argument_list></call> || <call><name><name>charset</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>muCV</name>-&gt;<name>GetDefaultCharacterSet</name></name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// opening in a new window</comment>
      }</block></then></if>
    }</block></then></if> 
  }</block></then></if>

  <if>if <condition>(<expr>!<call><name><name>charset</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>charset</name>.<name>Equals</name></name><argument_list>(<argument><expr>"UTF-8"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>SetDocumentCharacterSet</name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mCharacterSetSource</name> = <name>kCharsetFromUserDefault</name></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsMediaDocument</name>::<name>CreateSyntheticDocument</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// Synthesize an empty html document</comment>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name></type> <name>nodeInfo</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>nodeInfo</name> = <call><name><name>mNodeInfoManager</name>-&gt;<name>GetNodeInfo</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>html</name></name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                                           <argument><expr><name>kNameSpaceID_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>nodeInfo</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsGenericHTMLElement</name></expr></argument>&gt;</argument_list></name></type> <name>root</name> <init>= <expr><call><name>NS_NewHTMLHtmlElement</name><argument_list>(<argument><expr><name>nodeInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>root</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>GetChildCount</name><argument_list>()</argument_list></call> == 0</expr></argument>, <argument><expr>"Shouldn't have any kids"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name>AppendChildTo</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>nodeInfo</name> = <call><name><name>mNodeInfoManager</name>-&gt;<name>GetNodeInfo</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>head</name></name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                                           <argument><expr><name>kNameSpaceID_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>nodeInfo</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Create a &lt;head&gt; so our title has somewhere to live</comment>
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsGenericHTMLElement</name></expr></argument>&gt;</argument_list></name></type> <name>head</name> <init>= <expr><call><name>NS_NewHTMLHeadElement</name><argument_list>(<argument><expr><name>nodeInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>head</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>root</name>-&gt;<name>AppendChildTo</name></name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>nodeInfo</name> = <call><name><name>mNodeInfoManager</name>-&gt;<name>GetNodeInfo</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>body</name></name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                                           <argument><expr><name>kNameSpaceID_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>nodeInfo</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsGenericHTMLElement</name></expr></argument>&gt;</argument_list></name></type> <name>body</name> <init>= <expr><call><name>NS_NewHTMLBodyElement</name><argument_list>(<argument><expr><name>nodeInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>body</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>root</name>-&gt;<name>AppendChildTo</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsMediaDocument</name>::<name>StartLayout</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><name>mMayStartLayout</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  <function_decl><type><name>nsPresShellIterator</name></type> <name>iter</name><parameter_list>(<param><decl><type><name>this</name></type></decl></param>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>shell</name></decl>;</decl_stmt>
  <while>while <condition>(<expr>(<name>shell</name> = <call><name><name>iter</name>.<name>GetNextShell</name></name><argument_list>()</argument_list></call>)</expr>)</condition> <block>{
    <decl_stmt><decl><type><name>nsRect</name></type> <name>visibleArea</name> <init>= <expr><call><name><name>shell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call>-&gt;<call><name>GetVisibleArea</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>shellGrip</name> <init>= <expr><name>shell</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>shell</name>-&gt;<name>InitialReflow</name></name><argument_list>(<argument><expr><name><name>visibleArea</name>.<name>width</name></name></expr></argument>, <argument><expr><name><name>visibleArea</name>.<name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Now trigger a refresh.  vm might be null if the presshell got</comment>
    <comment type="line">// Destroy() called already.</comment>
    <decl_stmt><decl><type><name>nsIViewManager</name>*</type> <name>vm</name> <init>= <expr><call><name><name>shell</name>-&gt;<name>GetViewManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>vm</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>vm</name>-&gt;<name>EnableRefresh</name></name><argument_list>(<argument><expr><name>NS_VMREFRESH_IMMEDIATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></while>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> 
<name><name>nsMediaDocument</name>::<name>UpdateTitleAndCharset</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aTypeStr</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name>* <specifier>const</specifier>*</type> <name>aFormatNames</name></decl></param>,
                                       <param><decl><type><name>PRInt32</name></type> <name>aWidth</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aHeight</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aStatus</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsXPIDLString</name></type> <name>fileStr</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>mDocumentURI</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>fileName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURL</name></expr></argument>&gt;</argument_list></name></type> <name>url</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mDocumentURI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>url</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>url</name>-&gt;<name>GetFileName</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>docCharset</name></decl>;</decl_stmt>

    <comment type="line">// Now that the charset is set in |StartDocumentLoad| to the charset of</comment>
    <comment type="line">// the document viewer instead of a bogus value ("ISO-8859-1" set in</comment>
    <comment type="line">// |nsDocument|'s ctor), the priority is given to the current charset. </comment>
    <comment type="line">// This is necessary to deal with a media document being opened in a new </comment>
    <comment type="line">// window or a new tab, in which case |originCharset| of |nsIURI| is not </comment>
    <comment type="line">// reliable.</comment>
    <if>if <condition>(<expr><name>mCharacterSetSource</name> != <name>kCharsetUninitialized</name></expr>)</condition><then> <block>{  
      <expr_stmt><expr><name>docCharset</name> = <name>mCharacterSet</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{  
      <comment type="line">// resort to |originCharset|</comment>
      <expr_stmt><expr><call><name><name>mDocumentURI</name>-&gt;<name>GetOriginCharset</name></name><argument_list>(<argument><expr><name>docCharset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SetDocumentCharacterSet</name><argument_list>(<argument><expr><name>docCharset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <if>if <condition>(<expr>!<call><name><name>fileName</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITextToSubURI</name></expr></argument>&gt;</argument_list></name></type> <name>textToSubURI</name> <init>= 
        <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_ITEXTTOSUBURI_CONTRACTID</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <comment type="line">// UnEscapeURIForUI always succeeds</comment>
        <expr_stmt><expr><call><name><name>textToSubURI</name>-&gt;<name>UnEscapeURIForUI</name></name><argument_list>(<argument><expr><name>docCharset</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>fileStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else 
        <expr_stmt><expr><call><name>CopyUTF8toUTF16</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>fileStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then></if>
  }</block></then></if>


  <function_decl><type><name>NS_ConvertASCIItoUTF16</name></type> <name>typeStr</name><parameter_list>(<param><decl><type><name>aTypeStr</name></type></decl></param>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>nsXPIDLString</name></type> <name>title</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>mStringBundle</name></expr>)</condition><then> <block>{
    <comment type="line">// if we got a valid size (not all media have a size)</comment>
    <if>if <condition>(<expr><name>aWidth</name> != 0 &amp;&amp; <name>aHeight</name> != 0</expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsAutoString</name></type> <name>widthStr</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>nsAutoString</name></type> <name>heightStr</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>widthStr</name>.<name>AppendInt</name></name><argument_list>(<argument><expr><name>aWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>heightStr</name>.<name>AppendInt</name></name><argument_list>(<argument><expr><name>aHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// If we got a filename, display it</comment>
      <if>if <condition>(<expr>!<call><name><name>fileStr</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name><name>formatStrings</name><index>[<expr>4</expr>]</index></name>  <init>= <expr><block>{<expr><call><name><name>fileStr</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>, <expr><call><name><name>typeStr</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>, 
          <expr><call><name><name>widthStr</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>, <macro><name>heightStr</name></macro><expr>.<macro><name>get</name><argument_list>()</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
        <function_decl><type><name>NS_ConvertASCIItoUTF16</name></type> <name>fmtName</name><parameter_list>(<param><decl><type><name><name>aFormatNames</name><index>[<expr><name>eWithDimAndFile</name></expr>]</index></name></type></decl></param>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name><name>mStringBundle</name>-&gt;<name>FormatStringFromName</name></name><argument_list>(<argument><expr><call><name><name>fmtName</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>formatStrings</name></expr></argument>, <argument><expr>4</expr></argument>,
                                            <argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> 
      <else>else <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name><name>formatStrings</name><index>[<expr>3</expr>]</index></name>  <init>= <expr><block>{<expr><call><name><name>typeStr</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>, <expr><call><name><name>widthStr</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>, 
          <macro><name>heightStr</name></macro><expr>.<macro><name>get</name><argument_list>()</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
        <function_decl><type><name>NS_ConvertASCIItoUTF16</name></type> <name>fmtName</name><parameter_list>(<param><decl><type><name><name>aFormatNames</name><index>[<expr><name>eWithDim</name></expr>]</index></name></type></decl></param>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name><name>mStringBundle</name>-&gt;<name>FormatStringFromName</name></name><argument_list>(<argument><expr><call><name><name>fmtName</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>formatStrings</name></expr></argument>, <argument><expr>3</expr></argument>,
                                            <argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then> 
    <else>else <block>{
    <comment type="line">// If we got a filename, display it</comment>
      <if>if <condition>(<expr>!<call><name><name>fileStr</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name><name>formatStrings</name><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{<expr><call><name><name>fileStr</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>, <macro><name>typeStr</name></macro><expr>.<macro><name>get</name><argument_list>()</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
        <function_decl><type><name>NS_ConvertASCIItoUTF16</name></type> <name>fmtName</name><parameter_list>(<param><decl><type><name><name>aFormatNames</name><index>[<expr><name>eWithFile</name></expr>]</index></name></type></decl></param>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name><name>mStringBundle</name>-&gt;<name>FormatStringFromName</name></name><argument_list>(<argument><expr><call><name><name>fmtName</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>formatStrings</name></expr></argument>, <argument><expr>2</expr></argument>,
                                            <argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then>
      <else>else <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name><name>formatStrings</name><index>[<expr>1</expr>]</index></name> <init>= <expr><block>{<macro><name>typeStr</name></macro><expr>.<macro><name>get</name><argument_list>()</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
        <function_decl><type><name>NS_ConvertASCIItoUTF16</name></type> <name>fmtName</name><parameter_list>(<param><decl><type><name><name>aFormatNames</name><index>[<expr><name>eWithNoInfo</name></expr>]</index></name></type></decl></param>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name><name>mStringBundle</name>-&gt;<name>FormatStringFromName</name></name><argument_list>(<argument><expr><call><name><name>fmtName</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>formatStrings</name></expr></argument>, <argument><expr>1</expr></argument>,
                                            <argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></else></if>
  }</block></then></if> 

  <comment type="line">// set it on the document</comment>
  <if>if <condition>(<expr><call><name><name>aStatus</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>SetTitle</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <decl_stmt><decl><type><name>nsXPIDLString</name></type> <name>titleWithStatus</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsPromiseFlatString</name>&amp;</type> <name>status</name> <init>= <expr><call><name>PromiseFlatString</name><argument_list>(<argument><expr><name>aStatus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name><name>formatStrings</name><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{<expr><call><name><name>title</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>, <macro><name>status</name></macro><expr>.<macro><name>get</name><argument_list>()</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_NAMED_LITERAL_STRING</name><argument_list>(<argument><expr><name>fmtName</name></expr></argument>, <argument><expr>"TitleWithStatus"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mStringBundle</name>-&gt;<name>FormatStringFromName</name></name><argument_list>(<argument><expr><call><name><name>fmtName</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>formatStrings</name></expr></argument>, <argument><expr>2</expr></argument>,
                                        <argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>titleWithStatus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetTitle</name><argument_list>(<argument><expr><name>titleWithStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>
</unit>
