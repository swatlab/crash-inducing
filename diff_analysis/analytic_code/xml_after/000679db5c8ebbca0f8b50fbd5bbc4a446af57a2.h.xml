<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="000679db5c8ebbca0f8b50fbd5bbc4a446af57a2.h"><comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2002
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Jonas Sicking &lt;sicking@bigfoot.com&gt; (Original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>
 
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>nsIDocumentTransformer_h__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nsIDocumentTransformer_h__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISupports.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>nsIDOMDocument</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>nsIDOMNode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>nsILoadGroup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>nsIURI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>nsIPrincipal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>nsString</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ITRANSFORMOBSERVER_IID</name></cpp:macro> \
<cpp:value>{ 0x04b2d17c, 0xe98d, 0x45f5, \
  { 0x9a, 0x67, 0xb7, 0x01, 0x19, 0x59, 0x7d, 0xe7 } }</cpp:value></cpp:define>

<expr_stmt><expr><name>class</name> <name>nsITransformObserver</name> : <name>public</name> <name>nsISupports</name>
<block>{
<expr><name>public</name>: 

  <macro><name>NS_DECLARE_STATIC_IID_ACCESSOR</name><argument_list>(<argument>NS_ITRANSFORMOBSERVER_IID</argument>)</argument_list></macro>

  <name>NS_IMETHOD</name> <call><name>OnDocumentCreated</name><argument_list>(<argument><expr><name>nsIDocument</name> *<name>aResultDocument</name></expr></argument>)</argument_list></call> = 0</expr>;

  <expr><name>NS_IMETHOD</name> <macro><name>OnTransformDone</name><argument_list>(<argument>nsresult aResult</argument>,
                             <argument>nsIDocument *aResultDocument</argument>)</argument_list></macro> = 0</expr>;

}</block></expr>;</expr_stmt>

<macro><name>NS_DEFINE_STATIC_IID_ACCESSOR</name><argument_list>(<argument>nsITransformObserver</argument>, <argument>NS_ITRANSFORMOBSERVER_IID</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_IDOCUMENTTRANSFORMER_IID</name></cpp:macro> \
  <cpp:value>{0x17c83d91, 0xac2f, 0x4658, \
    { 0x91, 0x6c, 0xcb, 0xc4, 0xd2, 0xb5, 0x2c, 0xe }}</cpp:value></cpp:define>

<expr_stmt><expr><name>class</name> <name>nsIDocumentTransformer</name> : <name>public</name> <name>nsISupports</name>
<block>{
<expr><name>public</name>: 

  <macro><name>NS_DECLARE_STATIC_IID_ACCESSOR</name><argument_list>(<argument>NS_IDOCUMENTTRANSFORMER_IID</argument>)</argument_list></macro>

  <name>NS_IMETHOD</name> <call><name>Init</name><argument_list>(<argument><expr><name>nsIPrincipal</name>* <name>aPrincipal</name></expr></argument>)</argument_list></call> = 0</expr>;
  <expr><name>NS_IMETHOD</name> <call><name>SetTransformObserver</name><argument_list>(<argument><expr><name>nsITransformObserver</name>* <name>aObserver</name></expr></argument>)</argument_list></call> = 0</expr>;
  <expr><name>NS_IMETHOD</name> <call><name>LoadStyleSheet</name><argument_list>(<argument><expr><name>nsIURI</name>* <name>aUri</name></expr></argument>, <argument><expr><name>nsILoadGroup</name>* <name>aLoadGroup</name></expr></argument>)</argument_list></call> = 0</expr>;
  <expr><name>NS_IMETHOD</name> <call><name>SetSourceContentModel</name><argument_list>(<argument><expr><name>nsIDOMNode</name>* <name>aSource</name></expr></argument>)</argument_list></call> = 0</expr>;
  <expr><name>NS_IMETHOD</name> <call><name>CancelLoads</name><argument_list>()</argument_list></call> = 0</expr>;

  <expr><name>NS_IMETHOD</name> <call><name>AddXSLTParamNamespace</name><argument_list>(<argument><expr>const <name>nsString</name>&amp; <name>aPrefix</name></expr></argument>,
                                   <argument><expr>const <name>nsString</name>&amp; <name>aNamespace</name></expr></argument>)</argument_list></call> = 0</expr>;
  <expr><name>NS_IMETHOD</name> <call><name>AddXSLTParam</name><argument_list>(<argument><expr>const <name>nsString</name>&amp; <name>aName</name></expr></argument>,
                          <argument><expr>const <name>nsString</name>&amp; <name>aNamespace</name></expr></argument>,
                          <argument><expr>const <name>nsString</name>&amp; <name>aValue</name></expr></argument>,
                          <argument><expr>const <name>nsString</name>&amp; <name>aSelect</name></expr></argument>,
                          <argument><expr><name>nsIDOMNode</name>* <name>aContextNode</name></expr></argument>)</argument_list></call> = 0</expr>;
}</block></expr>;</expr_stmt>

<macro><name>NS_DEFINE_STATIC_IID_ACCESSOR</name><argument_list>(<argument>nsIDocumentTransformer</argument>,
                              <argument>NS_IDOCUMENTTRANSFORMER_IID</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//nsIDocumentTransformer_h__</comment>
</unit>
