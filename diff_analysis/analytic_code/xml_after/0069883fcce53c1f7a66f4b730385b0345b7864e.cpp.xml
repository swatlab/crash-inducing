<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0069883fcce53c1f7a66f4b730385b0345b7864e.cpp"><comment type="block">/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: set ts=8 sw=4 et tw=99:
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code, released
 * March 31, 1998.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__STDC_LIMIT_MACROS</name></cpp:macro></cpp:define>

<comment type="block">/*
 * JS shell.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jstypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsstdint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsarena.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsprf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jswrapper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsarray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsatom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsbuiltins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jscntxt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsdate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsdbgapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsemit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsfun.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsgc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsiter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jslock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsobj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsparse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsreflect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsscope.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsscript.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jstracer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jstypedarray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsxml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsperf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prmjtime.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSDEBUGGER</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsdebug.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSDEBUGGER_JAVA_UI</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsdjava.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JSDEBUGGER_JAVA_UI */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSDEBUGGER_C_UI</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsdb.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JSDEBUGGER_C_UI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JSDEBUGGER */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsworkers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsinterpinlines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsobjinlines.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsscriptinlines.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_WIN</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>XP_OS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>     <comment type="block">/* for isatty() */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_WIN</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jswin.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<using>using namespace <name>js</name>;</using>

<typedef>typedef <type><enum>enum <name>JSShellExitCode</name> <block>{
    <decl><name>EXITCODE_RUNTIME_ERROR</name>      <init>= <expr>3</expr></init></decl>,
    <decl><name>EXITCODE_FILE_NOT_FOUND</name>     <init>= <expr>4</expr></init></decl>,
    <decl><name>EXITCODE_OUT_OF_MEMORY</name>      <init>= <expr>5</expr></init></decl>,
    <decl><name>EXITCODE_TIMEOUT</name>            <init>= <expr>6</expr></init></decl>
}</block></enum></type> <name>JSShellExitCode</name>;</typedef>

<decl_stmt><decl><type><name>size_t</name></type> <name>gStackChunkSize</name> <init>= <expr>8192</expr></init></decl>;</decl_stmt>

<comment type="block">/* Assume that we can not use more than 5e5 bytes of C stack by default. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_CC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Sun compiler uses larger stack space for js_Interpret() with debug
   Use a bigger gMaxStackSize to make "make check" happy. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_MAX_STACK_SIZE</name></cpp:macro> <cpp:value>5000000</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_MAX_STACK_SIZE</name></cpp:macro> <cpp:value>500000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>size_t</name></type> <name>gMaxStackSize</name> <init>= <expr><name>DEFAULT_MAX_STACK_SIZE</name></expr></init></decl>;</decl_stmt>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PRUintn</name></type> <name>gStackBaseThreadIndex</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>jsuword</name></type> <name>gStackBase</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>gScriptStackQuota</name> <init>= <expr><name>JS_DEFAULT_SCRIPT_STACK_QUOTA</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Limit the timeout to 30 minutes to prevent an overflow on platfoms
 * that represent the time internally in microseconds using 32-bit int.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>jsdouble</name></type> <name>MAX_TIMEOUT_INTERVAL</name> <init>= <expr>1800.0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>jsdouble</name></type> <name>gTimeoutInterval</name> <init>= <expr>-1.0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>bool</name></type> <name>gCanceled</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>enableTraceJit</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>enableMethodJit</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>enableProfiling</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>printTiming</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>JSBool</name></type>
<name>SetTimeoutValue</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsdouble</name></type> <name>t</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type>
<name>InitWatchdog</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>KillWatchdog</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type>
<name>ScheduleWatchdog</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>, <param><decl><type><name>jsdouble</name></type> <name>t</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>CancelExecution</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Watchdog thread state.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>

<decl_stmt><decl><type><specifier>static</specifier> <name>PRLock</name> *</type><name>gWatchdogLock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PRCondVar</name> *</type><name>gWatchdogWakeup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PRThread</name> *</type><name>gWatchdogThread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>gWatchdogHasTimeout</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PRIntervalTime</name></type> <name>gWatchdogTimeout</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PRCondVar</name> *</type><name>gSleepWakeup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <name>JSRuntime</name> *</type><name>gRuntime</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>gExitCode</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JSBool</name></type> <name>gQuitting</name> <init>= <expr><name>JS_FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> *</type><name>gErrFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> *</type><name>gOutFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
<decl_stmt><decl><type><name>JSObject</name> *</type><name>gWorkers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>js</name>::<name>workers</name>::<name>ThreadPool</name></name> *</type><name>gWorkerThreadPool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>JSBool</name></type> <name>reportWarnings</name> <init>= <expr><name>JS_TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>JSBool</name></type> <name>compileOnly</name> <init>= <expr><name>JS_FALSE</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <name>JSShellErrNum</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_DEF</name><parameter_list>(<param><type><name>name</name></type></param>, <param><type><name>number</name></type></param>, <param><type><name>count</name></type></param>, <param><type><name>exception</name></type></param>, <param><type><name>format</name></type></param>)</parameter_list></cpp:macro> \
    <cpp:value>name = number,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsshell.msg"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MSG_DEF</name></cpp:undef>
    <decl><name>JSShellErr_Limit</name></decl>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MSGDEF</name></cpp:undef>
}</block></enum></type> <name>JSShellErrNum</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>JSContext</name> *</type>
<name>NewContext</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>DestroyContext</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>bool</name></type> <name>withGC</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>JSErrorFormatString</name> *</type>
<name>my_GetErrorMessage</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>userRef</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>locale</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>uintN</name></type> <name>errorNumber</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>JSObject</name> *</type>
<name>split_setup</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSBool</name></type> <name>evalcx</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EDITLINE</name></cpp:ifdef>
<decl_stmt><decl><type><name>JS_BEGIN_EXTERN_C</name></type>
<name>JS_EXTERN_API</name><argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list>    *<name>readline</name><argument_list>(<argument><expr>const <name>char</name> *<name>prompt</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<macro><name>JS_EXTERN_API</name><argument_list>(<argument>void</argument>)</argument_list></macro>     <expr_stmt><expr><call><name>add_history</name><argument_list>(<argument><expr><name>char</name> *<name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>JS_END_EXTERN_C</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<specifier>static</specifier> <name>void</name></type>
<name>ReportException</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><call><name>JS_IsExceptionPending</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name>JS_ReportPendingException</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>JS_ClearPendingException</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>
}</block></function>

<class>class <name>ToString</name> <block>{<private type="default">
</private><public>public:
    <constructor><name>ToString</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>aCx</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>, <param><decl><type><name>JSBool</name></type> <name>aThrow</name> <init>= <expr><name>JS_FALSE</name></expr></init></decl></param>)</parameter_list>
    <member_list>: <call><name>cx</name><argument_list>(<argument><expr><name>aCx</name></expr></argument>)</argument_list></call>
    , <call><name>mThrow</name><argument_list>(<argument><expr><name>aThrow</name></expr></argument>)</argument_list></call>
    </member_list><block>{
        <expr_stmt><expr><name>mStr</name> = <call><name>JS_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>aThrow</name> &amp;&amp; !<name>mStr</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>ReportException</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name>JS_AddNamedStringRoot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>mStr</name></expr></argument>, <argument><expr>"Value ToString helper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <destructor><name>~<name>ToString</name></name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>JS_RemoveStringRoot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>mStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></destructor>
    <function><type><name>JSBool</name></type> <name>threw</name><parameter_list>()</parameter_list> <block>{ <return>return <expr>!<name>mStr</name></expr>;</return> }</block></function>
    <function><type><name>jsval</name></type> <name>getJSVal</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>mStr</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function><type><specifier>const</specifier> <name>char</name> *</type><name>getBytes</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mStr</name> ? <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><name>mStr</name></expr></argument>)</argument_list></call> : "(error converting value)"</expr>;</return>
    }</block></function>
</public><private>private:
    <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>mStr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>mThrow</name></decl>;</decl_stmt>
</private>}</block>;</class>

<class>class <name>IdToString</name> <super>: <specifier>public</specifier> <name>ToString</name></super> <block>{<private type="default">
</private><public>public:
    <constructor><name>IdToString</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>JSBool</name></type> <name>aThrow</name> <init>= <expr><name>JS_FALSE</name></expr></init></decl></param>)</parameter_list>
    <member_list>: <call><name>ToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>IdToJsval</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aThrow</name></expr></argument>)</argument_list></call>
    </member_list><block>{ }</block></constructor>
</public>}</block>;</class>

<function><type><specifier>static</specifier> <name>char</name> *</type>
<name>GetLine</name><parameter_list>(<param><decl><type><name>FILE</name> *</type><name>file</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>prompt</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>buffer</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EDITLINE</name></cpp:ifdef>
    <comment type="block">/*
     * Use readline only if file is stdin, because there's no way to specify
     * another handle.  Are other filehandles interactive?
     */</comment>
    <if>if <condition>(<expr><name>file</name> == <name>stdin</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name> *</type><name>linep</name> <init>= <expr><call><name>readline</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block">/*
         * We set it to zero to avoid complaining about inappropriate ioctl
         * for device in the case of EOF. Looks like errno == 251 if line is
         * finished with EOF and errno == 25 (EINVAL on Mac) if there is
         * nothing left to read.
         */</comment>
        <if>if <condition>(<expr><name>errno</name> == 251 || <name>errno</name> == 25 || <name>errno</name> == <name>EINVAL</name></expr>)</condition><then>
            <expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr>!<name>linep</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <if>if <condition>(<expr><name><name>linep</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then>
            <expr_stmt><expr><call><name>add_history</name><argument_list>(<argument><expr><name>linep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><name>linep</name></expr>;</return>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>*<name>prompt</name> != '\0'</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>size</name> = 80</expr>;</expr_stmt>
    <expr_stmt><expr><name>buffer</name> = (<name>char</name> *) <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>buffer</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <decl_stmt><decl><type><name>char</name> *</type><name>current</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>size</name> - <name>len</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
        <expr_stmt><expr><name>len</name> += <call><name>strlen</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name> *</type><name>t</name> <init>= <expr><name>buffer</name> + <name>len</name> - 1</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>*<name>t</name> == '\n'</expr>)</condition><then> <block>{
            <comment type="block">/* Line was read. We remove '\n' and exit. */</comment>
            <expr_stmt><expr>*<name>t</name> = '\0'</expr>;</expr_stmt>
            <return>return <expr><name>buffer</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>len</name> + 1 == <name>size</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>size</name> = <name>size</name> * 2</expr>;</expr_stmt>
            <decl_stmt><decl><type><name>char</name> *</type><name>tmp</name> <init>= <expr>(<name>char</name> *) <call><name>realloc</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name>tmp</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>buffer</name> = <name>tmp</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>current</name> = <name>buffer</name> + <name>len</name></expr>;</expr_stmt>
    }</block></while>
    <if>if <condition>(<expr><name>len</name> &amp;&amp; !<call><name>ferror</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>buffer</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * State to store as JSContext private.
 *
 * We declare such timestamp as volatile as they are updated in the operation
 * callback without taking any locks. Any possible race can only lead to more
 * frequent callback calls. This is safe as the callback does everything based
 * on timing.
 */</comment>
<struct>struct <name>JSShellContextData</name> <block>{<public type="default">
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>JSIntervalTime</name></type> <name>startTime</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<function><type><specifier>static</specifier> <name>JSShellContextData</name> *</type>
<name>NewContextData</name><parameter_list>()</parameter_list>
<block>{
    <comment type="block">/* Prevent creation of new contexts after we have been canceled. */</comment>
    <if>if <condition>(<expr><name>gCanceled</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>JSShellContextData</name> *</type><name>data</name> <init>= <expr>(<name>JSShellContextData</name> *)
                               <call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JSShellContextData</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>data</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>data</name>-&gt;<name>startTime</name></name> = <call><name>js_IntervalNow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>data</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>JSShellContextData</name> *</type>
<name>GetContextData</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSShellContextData</name> *</type><name>data</name> <init>= <expr>(<name>JSShellContextData</name> *) <call><name>JS_GetContextPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>data</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>ShellOperationCallback</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>gCanceled</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>JS_ClearPendingException</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_FALSE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SetContextOptions</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>JS_SetNativeStackQuota</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>gMaxStackSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_SetScriptStackQuota</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>gScriptStackQuota</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_SetOperationCallback</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ShellOperationCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINCE</name></cpp:ifdef>
<decl_stmt><decl><type><name>int</name></type> <name>errno</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>Process</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>char</name> *</type><name>filename</name></decl></param>, <param><decl><type><name>JSBool</name></type> <name>forceTTY</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>, <decl><type ref="prev"/><name>hitEOF</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScript</name> *</type><name>script</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>buffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>startline</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> *</type><name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>oldopts</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>forceTTY</name> || !<name>filename</name> || <call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>file</name> = <name>stdin</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>file</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr>"r"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>file</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>my_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><name>JSSMSG_CANT_OPEN</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>gExitCode</name> = <name>EXITCODE_FILE_NOT_FOUND</name></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
    }</block></else></if>

    <expr_stmt><expr><call><name>SetContextOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WINCE</name></cpp:ifndef>
    <comment type="block">/* windows mobile (and possibly other os's) does not have a TTY */</comment>
    <if>if <condition>(<expr>!<name>forceTTY</name> &amp;&amp; !<call><name>isatty</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{
        <comment type="block">/*
         * It's not interactive - just execute it.
         *
         * Support the UNIX #! shell hack; gobble the first line if it starts
         * with '#'.  TODO - this isn't quite compatible with sharp variables,
         * as a legal js program (using sharp variables) might start with '#'.
         * But that would require multi-character lookahead.
         */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><call><name>fgetc</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ch</name> == '#'</expr>)</condition><then> <block>{
            <while>while<condition>(<expr>(<name>ch</name> = <call><name>fgetc</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call>) != <name>EOF</name></expr>)</condition> <block>{
                <if>if <condition>(<expr><name>ch</name> == '\n' || <name>ch</name> == '\r'</expr>)</condition><then>
                    <break>break;</break></then></if>
            }</block></while>
        }</block></then></if>
        <expr_stmt><expr><call><name>ungetc</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int64</name></type> <name>t1</name> <init>= <expr><call><name>PRMJ_Now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>oldopts</name> = <call><name>JS_GetOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_SetOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>oldopts</name> | <name>JSOPTION_COMPILE_N_GO</name> | <name>JSOPTION_NO_SCRIPT_RVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>script</name> = <call><name>JS_CompileFileHandle</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_SetOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>oldopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>script</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<name>compileOnly</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>(<name>void</name>)<call><name>JS_ExecuteScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int64</name></type> <name>t2</name> <init>= <expr><call><name>PRMJ_Now</name><argument_list>()</argument_list></call> - <name>t1</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>printTiming</name></expr>)</condition><then>
                    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"runtime = %.3f ms\n"</expr></argument>, <argument><expr><call><name>double</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call> / <name>PRMJ_USEC_PER_MSEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then></if>
            <expr_stmt><expr><call><name>JS_DestroyScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>file</name> != <name>stdin</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return;</return>
    }</block></then></if>

    <comment type="block">/* It's an interactive filehandle; drop into read-eval-print loop. */</comment>
    <expr_stmt><expr><name>lineno</name> = 1</expr>;</expr_stmt>
    <expr_stmt><expr><name>hitEOF</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>buffer</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> = 0</expr>;</expr_stmt>           <comment type="block">/* assign here to avoid warnings */</comment>
    <do>do <block>{
        <comment type="block">/*
         * Accumulate lines until we get a 'compilable unit' - one that either
         * generates an error (before running out of source) or that compiles
         * cleanly.  This should be whenever we get a complete statement that
         * coincides with the end of a line.
         */</comment>
        <expr_stmt><expr><name>startline</name> = <name>lineno</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt> <comment type="block">/* initialize to avoid warnings */</comment>
        <do>do <block>{
            <expr_stmt><expr><call><name>ScheduleWatchdog</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>gCanceled</name> = false</expr>;</expr_stmt>
            <expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>

            <decl_stmt><decl><type><name>char</name> *</type><name>line</name></decl>;</decl_stmt>
            <block>{
                <function_decl><type><name>JSAutoSuspendRequest</name></type> <name>suspended</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>)</parameter_list>;</function_decl>
                <expr_stmt><expr><name>line</name> = <call><name>GetLine</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>startline</name> == <name>lineno</name> ? "js&gt; " : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <if>if <condition>(<expr>!<name>line</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>errno</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                }</block></then></if>
                <expr_stmt><expr><name>hitEOF</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
            <if>if <condition>(<expr>!<name>buffer</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>buffer</name> = <name>line</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>size</name> = <name>len</name> + 1</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <comment type="block">/*
                 * len + 1 is required to store '\n' in the end of line.
                 */</comment>
                <decl_stmt><decl><type><name>size_t</name></type> <name>newlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> + (<name>len</name> ? <name>len</name> + 1 : 0)</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>newlen</name> + 1 &gt; <name>size</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>size</name> = <name>newlen</name> + 1 &gt; <name>size</name> * 2 ? <name>newlen</name> + 1 : <name>size</name> * 2</expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>char</name> *</type><name>newBuf</name> <init>= <expr>(<name>char</name> *) <call><name>realloc</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr>!<name>newBuf</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return;</return>
                    }</block></then></if>
                    <expr_stmt><expr><name>buffer</name> = <name>newBuf</name></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>char</name> *</type><name>current</name> <init>= <expr><name>buffer</name> + <name>len</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>startline</name> != <name>lineno</name></expr>)</condition><then>
                    <expr_stmt><expr>*<name>current</name>++ = '\n'</expr>;</expr_stmt></then></if>
                <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>len</name> = <name>newlen</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>lineno</name>++</expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name>ScheduleWatchdog</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>, <argument><expr><name>gTimeoutInterval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>hitEOF</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block> while <condition>(<expr>!<call><name>JS_BufferIsCompilableUnit</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

        <if>if <condition>(<expr><name>hitEOF</name> &amp;&amp; !<name>buffer</name></expr>)</condition><then>
            <break>break;</break></then></if>

        <comment type="block">/* Clear any pending exception from previous failed compiles. */</comment>
        <expr_stmt><expr><call><name>JS_ClearPendingException</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Even though we're interactive, we have a compile-n-go opportunity. */</comment>
        <expr_stmt><expr><name>oldopts</name> = <call><name>JS_GetOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>compileOnly</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>JS_SetOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>oldopts</name> | <name>JSOPTION_COMPILE_N_GO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name>script</name> = <call><name>JS_CompileScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr>"typein"</expr></argument>,
                                  <argument><expr><name>startline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>compileOnly</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>JS_SetOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>oldopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <if>if <condition>(<expr><name>script</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<name>compileOnly</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ok</name> = <call><name>JS_ExecuteScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>ok</name> &amp;&amp; !<call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>str</name> = <call><name>JS_ValueToSource</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>str</name></expr>)</condition><then>
                        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>, <argument><expr><call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                    <else>else
                        <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt></else></if>
                }</block></then></if>
            }</block></then></if>
            <expr_stmt><expr><call><name>JS_DestroyScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr>*<name>buffer</name> = '\0'</expr>;</expr_stmt>
    }</block> while <condition>(<expr>!<name>hitEOF</name> &amp;&amp; !<name>gQuitting</name></expr>)</condition>;</do>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>file</name> != <name>stdin</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>usage</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gErrFile</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>, <argument><expr><call><name>JS_GetImplementationVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gErrFile</name></expr></argument>, <argument><expr>"usage: js [options] [scriptfile] [scriptarg...]\n"
                      "Options:\n"
                      "  -h            Display this information\n"
                      "  -z            Create a split global object\n"
                      "                Warning: this option is probably not useful\n"
                      "  -P            Deeply freeze the global object prototype\n"
                      "  -s            Toggle JSOPTION_STRICT flag\n"
                      "  -w            Report strict warnings\n"
                      "  -W            Do not report strict warnings\n"
                      "  -x            Toggle JSOPTION_XML flag\n"
                      "  -C            Compile-only; do not execute\n"
                      "  -i            Enable interactive read-eval-print loop\n"
                      "  -j            Enable the TraceMonkey tracing JIT\n"
                      "  -m            Enable the JaegerMonkey method JIT\n"
                      "  -p            Enable loop profiling for TraceMonkey\n"
                      "  -d            Enable debug mode\n"
                      "  -b            Print timing statistics\n"
                      "  -t &lt;timeout&gt;  Interrupt long-running execution after &lt;timeout&gt; seconds, where\n"
                      "                &lt;timeout&gt; &lt;= 1800.0. Negative values indicate no timeout (default).\n"
                      "  -c &lt;size&gt;     Suggest stack chunk size of &lt;size&gt; bytes. Default is 8192.\n"
                      "                Warning: this option is currently ignored.\n"
                      "  -o &lt;option&gt;   Enable a context option flag by name\n"
                      "                Possible values:\n"
                      "                  anonfunfix:  JSOPTION_ANONFUNFIX\n"
                      "                  atline:      JSOPTION_ATLINE\n"
                      "                  tracejit:    JSOPTION_JIT\n"
                      "                  methodjit:   JSOPTION_METHODJIT\n"
                      "                  relimit:     JSOPTION_RELIMIT\n"
                      "                  strict:      JSOPTION_STRICT\n"
                      "                  werror:      JSOPTION_WERROR\n"
                      "                  xml:         JSOPTION_XML\n"
                      "  -v &lt;version&gt;  Set the JavaScript language version\n"
                      "                Possible values:\n"
                      "                  150:  JavaScript 1.5\n"
                      "                  160:  JavaScript 1.6\n"
                      "                  170:  JavaScript 1.7\n"
                      "                  180:  JavaScript 1.8\n"
                      "                  185:  JavaScript 1.8.5 (default)\n"
                      "  -f &lt;file&gt;     Load and execute JavaScript source &lt;file&gt;\n"
                      "                Note: this option switches to non-interactive mode.\n"
                      "  -e &lt;source&gt;   Execute JavaScript &lt;source&gt;\n"
                      "                Note: this option switches to non-interactive mode.\n"
                      "  -S &lt;size&gt;     Set the maximum size of the stack to &lt;size&gt; bytes\n"
                      "                Default is %u.\n"</expr></argument>, <argument><expr><name>DEFAULT_MAX_STACK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gErrFile</name></expr></argument>, <argument><expr>"  -g &lt;n&gt;        Sleep for &lt;n&gt; seconds before starting (default: 0)\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_GC_ZEAL</name></cpp:ifdef>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gErrFile</name></expr></argument>, <argument><expr>"  -Z &lt;n&gt;        Toggle GC zeal: low if &lt;n&gt; is 0 (default), high if non-zero\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SHARK</name></cpp:ifdef>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gErrFile</name></expr></argument>, <argument><expr>"  -k  Connect to Shark\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_TRACEVIS</name></cpp:ifdef>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gErrFile</name></expr></argument>, <argument><expr>"  -T  Start TraceVis\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr>2</expr>;</return>
}</block></function>

<comment type="block">/*
 * JSContext option name to flag map. The option names are in alphabetical
 * order for better reporting.
 */</comment>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{<public type="default">
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>  *</type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>      <name>flag</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>js_options</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"anonfunfix"</expr>,      <expr><name>JSOPTION_ANONFUNFIX</name></expr>}</block></expr>,
    <expr><block>{<expr>"atline"</expr>,          <expr><name>JSOPTION_ATLINE</name></expr>}</block></expr>,
    <expr><block>{<expr>"tracejit"</expr>,        <expr><name>JSOPTION_JIT</name></expr>}</block></expr>,
    <expr><block>{<expr>"methodjit"</expr>,       <expr><name>JSOPTION_METHODJIT</name></expr>}</block></expr>,
    <expr><block>{<expr>"jitprofiling"</expr>,    <expr><name>JSOPTION_PROFILING</name></expr>}</block></expr>,
    <expr><block>{<expr>"relimit"</expr>,         <expr><name>JSOPTION_RELIMIT</name></expr>}</block></expr>,
    <expr><block>{<expr>"strict"</expr>,          <expr><name>JSOPTION_STRICT</name></expr>}</block></expr>,
    <expr><block>{<expr>"werror"</expr>,          <expr><name>JSOPTION_WERROR</name></expr>}</block></expr>,
    <expr><block>{<expr>"xml"</expr>,             <expr><name>JSOPTION_XML</name></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>MapContextOptionNameToFlag</name><parameter_list>(<param><decl><type><name>JSContext</name>*</type> <name>cx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>name</name></decl></param>)</parameter_list>
<block>{
    <for>for (<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> != <call><name>JS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>js_options</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>js_options</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <return>return <expr><name><name>js_options</name><index>[<expr><name>i</name></expr>]</index></name>.<name>flag</name></expr>;</return></then></if>
    }</block></for>

    <decl_stmt><decl><type><name>char</name>*</type> <name>msg</name> <init>= <expr><call><name>JS_sprintf_append</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
                                  <argument><expr>"unknown option name '%s'."
                                  " The valid names are "</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> != <call><name>JS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>js_options</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <if>if <condition>(<expr>!<name>msg</name></expr>)</condition><then>
            <break>break;</break></then></if>
        <expr_stmt><expr><name>msg</name> = <call><name>JS_sprintf_append</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>"%s%s"</expr></argument>, <argument><expr><name><name>js_options</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>,
                                <argument><expr>(<name>i</name> + 2 &lt; <call><name>JS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>js_options</name></expr></argument>)</argument_list></call>
                                 ? ", "
                                 : <name>i</name> + 2 == <call><name>JS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>js_options</name></expr></argument>)</argument_list></call>
                                 ? " and "
                                 : ".")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <if>if <condition>(<expr>!<name>msg</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr>0</expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <name>JSClass</name></type> <name>global_class</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JS_TRACER</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<namespace>namespace <name>js</name> <block>{
    <decl_stmt><decl><type><specifier>extern</specifier> struct <name>JSClass</name></type> <name>jitstats_class</name></decl>;</decl_stmt>
    <function_decl><type><name>void</name></type> <name>InitJITStatsClass</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>glob</name></decl></param>)</parameter_list>;</function_decl>
}</block></namespace>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ProcessArgs</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>, <param><decl><type><name>int</name></type> <name>argc</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>argsObj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>isInteractive</name> <init>= <expr><name>JS_TRUE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>forceTTY</name> <init>= <expr><name>JS_FALSE</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Scan past all optional arguments so we can create the arguments object
     * before processing any -f options, which must interleave properly with
     * -v and -w options.  This requires two passes, and without getopt, we'll
     * have to keep the option logic here and in the second for loop in sync.
     */</comment>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name> != '-' || <name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
            <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
        <switch>switch <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr>)</condition> <block>{
          <case>case <expr>'c'</expr>:
          </case><case>case <expr>'f'</expr>:
          </case><case>case <expr>'e'</expr>:
          </case><case>case <expr>'v'</expr>:
          </case><case>case <expr>'S'</expr>:
          </case><case>case <expr>'t'</expr>:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_GC_ZEAL</name></cpp:ifdef>
          </case><case>case <expr>'Z'</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_TRACEVIS</name></cpp:ifdef>
          </case><case>case <expr>'T'</expr>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          </case><case>case <expr>'g'</expr>:
            <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
            <break>break;</break>
          </case><default>default:<empty_stmt>;</empty_stmt>
        </default>}</block></switch>
    }</block></for>

    <comment type="block">/*
     * Create arguments early and define it to root it, so it's safe from any
     * GC calls nested below, and so it is available to -f &lt;file&gt; arguments.
     */</comment>
    <expr_stmt><expr><name>argsObj</name> = <call><name>JS_NewArrayObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>argsObj</name></expr>)</condition><then>
        <return>return <expr>1</expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>JS_DefineProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>"arguments"</expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>argsObj</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr>1</expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>length</name> = <name>argc</name> - <name>i</name></expr>;</expr_stmt>
    <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name> <init>= <expr><call><name>JS_NewStringCopyZ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name>++</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
            <return>return <expr>1</expr>;</return></then></if>
        <if>if <condition>(<expr>!<call><name>JS_DefineElement</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>argsObj</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSPROP_ENUMERATE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>1</expr>;</return>
        }</block></then></if>
    }</block></for>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name> != '-' || <name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>filename</name> = <name><name>argv</name><index>[<expr><name>i</name>++</expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>isInteractive</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>

        <switch>switch <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr>)</condition> <block>{
        <case>case <expr>'v'</expr>:
            <if>if <condition>(<expr>++<name>i</name> == <name>argc</name></expr>)</condition><then>
                <return>return <expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</return></then></if>

            <expr_stmt><expr><call><name>JS_SetVersion</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>JSVersion</name>) <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_GC_ZEAL</name></cpp:ifdef>
        </case><case>case <expr>'Z'</expr>:
            <if>if <condition>(<expr>++<name>i</name> == <name>argc</name></expr>)</condition><then>
                <return>return <expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</return></then></if>
            <expr_stmt><expr><call><name>JS_SetGCZeal</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>!!(<call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        </case><case>case <expr>'w'</expr>:
            <expr_stmt><expr><name>reportWarnings</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr>'W'</expr>:
            <expr_stmt><expr><name>reportWarnings</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr>'s'</expr>:
            <expr_stmt><expr><call><name>JS_ToggleOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSOPTION_STRICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr>'E'</expr>:
            <expr_stmt><expr><call><name>JS_ToggleOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSOPTION_RELIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr>'x'</expr>:
            <expr_stmt><expr><call><name>JS_ToggleOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSOPTION_XML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr>'b'</expr>:
            <expr_stmt><expr><name>printTiming</name> = true</expr>;</expr_stmt>
            <break>break;</break>
            
        </case><case>case <expr>'j'</expr>:
            <expr_stmt><expr><name>enableTraceJit</name> = !<name>enableTraceJit</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_ToggleOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSOPTION_JIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JS_TRACER</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><call><name><name>js</name>::<name>InitJITStatsClass</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JS_GetGlobalObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_DefineObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JS_GetGlobalObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"tracemonkey"</expr></argument>,
                            <argument><expr>&amp;<name><name>js</name>::<name>jitstats_class</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <break>break;</break>

        </case><case>case <expr>'m'</expr>:
            <expr_stmt><expr><name>enableMethodJit</name> = !<name>enableMethodJit</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_ToggleOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSOPTION_METHODJIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr>'p'</expr>:
            <expr_stmt><expr><name>enableProfiling</name> = !<name>enableProfiling</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_ToggleOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSOPTION_PROFILING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
           
        </case><case>case <expr>'o'</expr>:
          <block>{
            <if>if <condition>(<expr>++<name>i</name> == <name>argc</name></expr>)</condition><then>
                <return>return <expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</return></then></if>

            <decl_stmt><decl><type><name>uint32</name></type> <name>flag</name> <init>= <expr><call><name>MapContextOptionNameToFlag</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>flag</name> == 0</expr>)</condition><then>
                <return>return <expr><name>gExitCode</name></expr>;</return></then></if>
            <expr_stmt><expr><call><name>JS_ToggleOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          }</block>
        </case><case>case <expr>'P'</expr>:
            <if>if <condition>(<expr><call><name>JS_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JS_GetPrototype</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != &amp;<name>global_class</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>JSObject</name> *</type><name>gobj</name></decl>;</decl_stmt>

                <if>if <condition>(<expr>!<call><name>JS_DeepFreezeObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
                <expr_stmt><expr><name>gobj</name> = <call><name>JS_NewGlobalObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>global_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>gobj</name></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
                <if>if <condition>(<expr>!<call><name>JS_SetPrototype</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>gobj</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
                <expr_stmt><expr><call><name>JS_SetParent</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>gobj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>JS_SetGlobalObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>gobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>obj</name> = <name>gobj</name></expr>;</expr_stmt>
            }</block></then></if>
            <break>break;</break>

        </case><case>case <expr>'t'</expr>:
            <if>if <condition>(<expr>++<name>i</name> == <name>argc</name></expr>)</condition><then>
                <return>return <expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</return></then></if>

            <if>if <condition>(<expr>!<call><name>SetTimeoutValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>atof</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

            <break>break;</break>

        </case><case>case <expr>'c'</expr>:
            <comment type="block">/* set stack chunk size */</comment>
            <expr_stmt><expr><name>gStackChunkSize</name> = <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>++<name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr>'f'</expr>:
            <if>if <condition>(<expr>++<name>i</name> == <name>argc</name></expr>)</condition><then>
                <return>return <expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</return></then></if>

            <expr_stmt><expr><call><name>Process</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>gExitCode</name> != 0</expr>)</condition><then>
                <return>return <expr><name>gExitCode</name></expr>;</return></then></if>

            <comment type="block">/*
             * XXX: js -f foo.js should interpret foo.js and then
             * drop into interactive mode, but that breaks the test
             * harness. Just execute foo.js for now.
             */</comment>
            <expr_stmt><expr><name>isInteractive</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr>'e'</expr>:
        <block>{
            <decl_stmt><decl><type><name>jsval</name></type> <name>rval</name></decl>;</decl_stmt>

            <if>if <condition>(<expr>++<name>i</name> == <name>argc</name></expr>)</condition><then>
                <return>return <expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</return></then></if>

            <comment type="block">/* Pass a filename of -e to imitate PERL */</comment>
            <expr_stmt><expr><call><name>JS_EvaluateScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr>"-e"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>isInteractive</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
            <break>break;</break>

        }</block>
        </case><case>case <expr>'C'</expr>:
            <expr_stmt><expr><name>compileOnly</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>isInteractive</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr>'i'</expr>:
            <expr_stmt><expr><name>isInteractive</name> = <name>forceTTY</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr>'S'</expr>:
            <if>if <condition>(<expr>++<name>i</name> == <name>argc</name></expr>)</condition><then>
                <return>return <expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</return></then></if>

            <comment type="block">/* Set maximum stack size. */</comment>
            <expr_stmt><expr><name>gMaxStackSize</name> = <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr>'d'</expr>:
            <expr_stmt><expr><call><name>js_SetDebugMode</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        </case><case>case <expr>'z'</expr>:
            <expr_stmt><expr><name>obj</name> = <call><name>split_setup</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
                <return>return <expr><name>gExitCode</name></expr>;</return></then></if>
            <break>break;</break>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SHARK</name></cpp:ifdef>
        </case><case>case <expr>'k'</expr>:
            <expr_stmt><expr><call><name>JS_ConnectShark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_TRACEVIS</name></cpp:ifdef>
        </case><case>case <expr>'T'</expr>:
            <if>if <condition>(<expr>++<name>i</name> == <name>argc</name></expr>)</condition><then>
                <return>return <expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</return></then></if>

            <expr_stmt><expr><call><name>StartTraceVis</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
        </case><case>case <expr>'g'</expr>:
            <if>if <condition>(<expr>++<name>i</name> == <name>argc</name></expr>)</condition><then>
                <return>return <expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</return></then></if>

            <expr_stmt><expr><call><name>PR_Sleep</name><argument_list>(<argument><expr><call><name>PR_SecondsToInterval</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        </case><default>default:
            <return>return <expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</return>
        </default>}</block></switch>
    }</block></for>

    <if>if <condition>(<expr><name>filename</name> || <name>isInteractive</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>Process</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>forceTTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>gExitCode</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Version</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name> *</type><name>argv</name> <init>= <expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>argc</name> &gt; 0 &amp;&amp; <call><name>JSVAL_IS_INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr>*<name>vp</name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><call><name>JS_SetVersion</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>JSVersion</name>) <call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr>*<name>vp</name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><call><name>JS_GetVersion</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>RevertVersion</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>js_RevertVersion</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Options</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uint32</name></type> <name>optset</name></decl>, <decl><type ref="prev"/><name>flag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>opt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>names</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>found</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>optset</name> = 0</expr>;</expr_stmt>
    <decl_stmt><decl><type><name>jsval</name> *</type><name>argv</name> <init>= <expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>uintN</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>str</name> = <call><name>JS_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>opt</name> = <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>opt</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>flag</name> = <call><name>MapContextOptionNameToFlag</name><argument_list>(<argument><expr><name>cx</name></expr></argument>,  <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>flag</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>optset</name> |= <name>flag</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>optset</name> = <call><name>JS_ToggleOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>optset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>names</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>found</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    <for>for (<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> != <call><name>JS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>js_options</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr><name><name>js_options</name><index>[<expr><name>i</name></expr>]</index></name>.<name>flag</name> &amp; <name>optset</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>found</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>names</name> = <call><name>JS_sprintf_append</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr>"%s%s"</expr></argument>,
                                      <argument><expr><name>names</name> ? "," : ""</expr></argument>, <argument><expr><name><name>js_options</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>names</name></expr>)</condition><then>
                <break>break;</break></then></if>
        }</block></then></if>
    }</block></for>
    <if>if <condition>(<expr>!<name>found</name></expr>)</condition><then>
        <expr_stmt><expr><name>names</name> = <call><name>strdup</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr>!<name>names</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>str</name> = <call><name>JS_NewString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>names</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr>*<name>vp</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Load</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uintN</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScript</name> *</type><name>script</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>oldopts</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>JSObject</name> *</type><name>thisobj</name> <init>= <expr><call><name>JS_THIS_OBJECT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>thisobj</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>jsval</name> *</type><name>argv</name> <init>= <expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>str</name> = <call><name>JS_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>filename</name> = <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name>oldopts</name> = <call><name>JS_GetOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_SetOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>oldopts</name> | <name>JSOPTION_COMPILE_N_GO</name> | <name>JSOPTION_NO_SCRIPT_RVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>script</name> = <call><name>JS_CompileFile</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>thisobj</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_SetOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>oldopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>script</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>ok</name> = !<name>compileOnly</name>
                 ? <call><name>JS_ExecuteScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>thisobj</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
                 : <name>JS_TRUE</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_DestroyScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></for>

    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * function readline()
 * Provides a hook for scripts to read a line from stdin.
 */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>ReadLine</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFSIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>FILE</name> *</type><name>from</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>, *<decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bufsize</name></decl>, <decl><type ref="prev"/><name>buflength</name></decl>, <decl><type ref="prev"/><name>gotlength</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>sawNewline</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>from</name> = <name>stdin</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>buflength</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>bufsize</name> = <name>BUFSIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf</name> = (<name>char</name> *) <call><name>JS_malloc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>buf</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>sawNewline</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    <while>while <condition>(<expr>(<name>gotlength</name> =
            <call><name>js_fgets</name><argument_list>(<argument><expr><name>buf</name> + <name>buflength</name></expr></argument>, <argument><expr><name>bufsize</name> - <name>buflength</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call>) &gt; 0</expr>)</condition> <block>{
        <expr_stmt><expr><name>buflength</name> += <name>gotlength</name></expr>;</expr_stmt>

        <comment type="block">/* Are we done? */</comment>
        <if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>buflength</name> - 1</expr>]</index></name> == '\n'</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>buf</name><index>[<expr><name>buflength</name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
            <expr_stmt><expr><name>sawNewline</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then> <else>else <if>if <condition>(<expr><name>buflength</name> &lt; <name>bufsize</name> - 1</expr>)</condition><then> <block>{
            <break>break;</break>
        }</block></then></if></else></if>

        <comment type="block">/* Else, grow our buffer for another pass. */</comment>
        <expr_stmt><expr><name>bufsize</name> *= 2</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>bufsize</name> &gt; <name>buflength</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>tmp</name> = (<name>char</name> *) <call><name>JS_realloc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tmp</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr>!<name>tmp</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>buf</name> = <name>tmp</name></expr>;</expr_stmt>
    }</block></while>

    <comment type="block">/* Treat the empty string specially. */</comment>
    <if>if <condition>(<expr><name>buflength</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>vp</name> = <call><name>feof</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call> ? <name>JSVAL_NULL</name> : <call><name>JS_GetEmptyStringValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Shrink the buffer to the real size. */</comment>
    <expr_stmt><expr><name>tmp</name> = (<name>char</name> *) <call><name>JS_realloc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>tmp</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>buf</name> = <name>tmp</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Turn buf into a JSString. Note that buflength includes the trailing null
     * character.
     */</comment>
    <expr_stmt><expr><name>str</name> = <call><name>JS_NewString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sawNewline</name> ? <name>buflength</name> - 1 : <name>buflength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr>*<name>vp</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>PutStr</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name> *</type><name>argv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>bytes</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>argc</name> != 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>argv</name> = <call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>str</name> = <call><name>JS_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>bytes</name> = <call><name>JS_EncodeString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>bytes</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>gOutFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Now</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsdouble</name></type> <name>now</name> <init>= <expr><call><name>PRMJ_Now</name><argument_list>()</argument_list></call> / <call><name>double</name><argument_list>(<argument><expr><name>PRMJ_USEC_PER_MSEC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><call><name>DOUBLE_TO_JSVAL</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Print</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name> *</type><name>argv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uintN</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>bytes</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>argv</name> = <call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>str</name> = <call><name>JS_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>bytes</name> = <call><name>JS_EncodeString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>bytes</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"%s%s"</expr></argument>, <argument><expr><name>i</name> ? " " : ""</expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr>'\n'</expr></argument>, <argument><expr><name>gOutFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function_decl><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Help</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Quit</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>JS_ConvertArguments</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"/ i"</expr></argument>, <argument><expr>&amp;<name>gExitCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>gQuitting</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <if>if <condition>(<expr><name>gWorkerThreadPool</name></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>js</name>::<name>workers</name>::<name>terminateAll</name></name><argument_list>(<argument><expr><call><name>JS_GetRuntime</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gWorkerThreadPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>JS_FALSE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>ToSource</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name> <init>= <expr><call><name>JS_ValueToSource</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>str</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>vp</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>JS_ClearPendingException</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>"&lt;&lt;error converting value to string&gt;&gt;"</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>AssertEq</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!(<name>argc</name> == 2 || (<name>argc</name> == 3 &amp;&amp; <call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>2</expr>]</index></expr></argument>)</argument_list></call>))</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>my_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr>(<name>argc</name> &lt; 2)
                             ? <name>JSSMSG_NOT_ENOUGH_ARGS</name>
                             : (<name>argc</name> == 3)
                             ? <name>JSSMSG_INVALID_ARGS</name>
                             : <name>JSSMSG_TOO_MANY_ARGS</name></expr></argument>,
                             <argument><expr>"assertEq"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>jsval</name> *</type><name>argv</name> <init>= <expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>JS_SameValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>actual</name> <init>= <expr><call><name>ToSource</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expected</name> <init>= <expr><call><name>ToSource</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>argc</name> == 2</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>my_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSSMSG_ASSERT_EQ_FAILED</name></expr></argument>,
                                 <argument><expr><name>actual</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>my_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSSMSG_ASSERT_EQ_FAILED_MSG</name></expr></argument>,
                                 <argument><expr><name>actual</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>AssertJit</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_METHODJIT</name></cpp:ifdef>
    <if>if <condition>(<expr><call><name>JS_GetOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call> &amp; <name>JSOPTION_METHODJIT</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name><name>cx</name>-&gt;<name>fp</name></name><argument_list>()</argument_list></call>-&gt;<call><name>script</name><argument_list>()</argument_list></call>-&gt;<call><name>getJIT</name><argument_list>(<argument><expr><call><name><name>cx</name>-&gt;<name>fp</name></name><argument_list>()</argument_list></call>-&gt;<call><name>isConstructing</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>my_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSSMSG_ASSERT_JIT_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>GC</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>preBytes</name> <init>= <expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>gcBytes</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_GC</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"before %lu, after %lu, break %08lx\n"</expr></argument>,
                <argument><expr>(<name>unsigned</name> <name>long</name>)<name>preBytes</name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>long</name>)<name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>gcBytes</name></name></expr></argument>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SBRK</name></cpp:ifdef>
                <argument><expr>(<name>unsigned</name> <name>long</name>)<call><name>sbrk</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                0</expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>vp</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><call><name>JS_NewStringCopyZ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_GCMETER</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>GCStats</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>js_DumpGCStats</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>vp</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>GCParameter</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>paramName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSGCParamKey</name></type> <name>param</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>value</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>argc</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>str</name> = <call><name>JS_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>str</name> = <call><name>JS_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>vp</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>vp</name><index>[<expr>2</expr>]</index></name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name>paramName</name> = <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>paramName</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>paramName</name></expr></argument>, <argument><expr>"maxBytes"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>param</name> = <name>JSGC_MAX_BYTES</name></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>paramName</name></expr></argument>, <argument><expr>"maxMallocBytes"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>param</name> = <name>JSGC_MAX_MALLOC_BYTES</name></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>paramName</name></expr></argument>, <argument><expr>"gcStackpoolLifespan"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>param</name> = <name>JSGC_STACKPOOL_LIFESPAN</name></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>paramName</name></expr></argument>, <argument><expr>"gcBytes"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>param</name> = <name>JSGC_BYTES</name></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>paramName</name></expr></argument>, <argument><expr>"gcNumber"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>param</name> = <name>JSGC_NUMBER</name></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>paramName</name></expr></argument>, <argument><expr>"gcTriggerFactor"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>param</name> = <name>JSGC_TRIGGER_FACTOR</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>,
                       <argument><expr>"the first argument argument must be maxBytes, "
                       "maxMallocBytes, gcStackpoolLifespan, gcBytes, "
                       "gcNumber or gcTriggerFactor"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></else></if></else></if></else></if></else></if></else></if></else></if>

    <if>if <condition>(<expr><name>argc</name> == 1</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>value</name> = <call><name>JS_GetGCParameter</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>JS_NewNumberValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr>&amp;<name><name>vp</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>param</name> == <name>JSGC_NUMBER</name> ||
        <name>param</name> == <name>JSGC_BYTES</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"Attempt to change read-only parameter %s"</expr></argument>,
                       <argument><expr><name>paramName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name>JS_ValueToECMAUint32</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>vp</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>,
                       <argument><expr>"the second argument must be convertable to uint32 "
                       "with non-zero value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>param</name> == <name>JSGC_TRIGGER_FACTOR</name> &amp;&amp; <name>value</name> &lt; 100</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>,
                       <argument><expr>"the gcTriggerFactor value must be &gt;= 100"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>JS_SetGCParameter</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>vp</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_GC_ZEAL</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>GCZeal</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uint32</name></type> <name>zeal</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>JS_ValueToECMAUint32</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>argc</name> == 0 ? <name>JSVAL_VOID</name> : <name><name>vp</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>zeal</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>JS_SetGCZeal</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>uint8</name>)<name>zeal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>vp</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JS_GC_ZEAL */</comment>

<typedef>typedef <type>struct <name>JSCountHeapNode</name></type> <name>JSCountHeapNode</name>;</typedef>

<struct>struct <name>JSCountHeapNode</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>void</name>                *</type><name>thing</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>               <name>kind</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSCountHeapNode</name>     *</type><name>next</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<typedef>typedef <type><struct>struct <name>JSCountHeapTracer</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>JSTracer</name></type>            <name>base</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSDHashTable</name></type>        <name>visited</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type>              <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSCountHeapNode</name>     *</type><name>traceList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSCountHeapNode</name>     *</type><name>recycleList</name></decl>;</decl_stmt>
</public>}</block></struct></type> <name>JSCountHeapTracer</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>CountHeapNotify</name><parameter_list>(<param><decl><type><name>JSTracer</name> *</type><name>trc</name></decl></param>, <param><decl><type><name>void</name> *</type><name>thing</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>kind</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSCountHeapTracer</name> *</type><name>countTracer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSDHashEntryStub</name> *</type><name>entry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSCountHeapNode</name> *</type><name>node</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>trc</name>-&gt;<name>callback</name></name> == <name>CountHeapNotify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>countTracer</name> = (<name>JSCountHeapTracer</name> *)<name>trc</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>countTracer</name>-&gt;<name>ok</name></name></expr>)</condition><then>
        <return>return;</return></then></if>

    <expr_stmt><expr><name>entry</name> = (<name>JSDHashEntryStub</name> *)
            <call><name>JS_DHashTableOperate</name><argument_list>(<argument><expr>&amp;<name><name>countTracer</name>-&gt;<name>visited</name></name></expr></argument>, <argument><expr><name>thing</name></expr></argument>, <argument><expr><name>JS_DHASH_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name><name>trc</name>-&gt;<name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>countTracer</name>-&gt;<name>ok</name></name> = <name>JS_FALSE</name></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>key</name></name></expr>)</condition><then>
        <return>return;</return></then></if>
    <expr_stmt><expr><name><name>entry</name>-&gt;<name>key</name></name> = <name>thing</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>node</name> = <name><name>countTracer</name>-&gt;<name>recycleList</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>node</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>countTracer</name>-&gt;<name>recycleList</name></name> = <name><name>node</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>node</name> = (<name>JSCountHeapNode</name> *) <call><name>JS_malloc</name><argument_list>(<argument><expr><name><name>trc</name>-&gt;<name>context</name></name></expr></argument>, <argument><expr>sizeof *<name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>node</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>countTracer</name>-&gt;<name>ok</name></name> = <name>JS_FALSE</name></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
    }</block></else></if>
    <expr_stmt><expr><name><name>node</name>-&gt;<name>thing</name></name> = <name>thing</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name>-&gt;<name>kind</name></name> = <name>kind</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name>-&gt;<name>next</name></name> = <name><name>countTracer</name>-&gt;<name>traceList</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>countTracer</name>-&gt;<name>traceList</name></name> = <name>node</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>CountHeap</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>void</name>*</type> <name>startThing</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>startTraceKind</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>traceKind</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>bytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSCountHeapTracer</name></type> <name>countTracer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSCountHeapNode</name> *</type><name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>counter</name></decl>;</decl_stmt>

    <struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{<public type="default">
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>       *</type><name>name</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32</name></type>             <name>kind</name></decl>;</decl_stmt>
    </public>}</block> <decl><name><name>traceKindNames</name><index>[]</index></name> <init>= <expr><block>{
        <expr><block>{ <expr>"all"</expr>,        <expr>-1</expr>                  }</block></expr>,
        <expr><block>{ <expr>"object"</expr>,     <expr><name>JSTRACE_OBJECT</name></expr>      }</block></expr>,
        <expr><block>{ <expr>"string"</expr>,     <expr><name>JSTRACE_STRING</name></expr>      }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_XML_SUPPORT</name></expr></cpp:if>
        <expr><block>{ <expr>"xml"</expr>,        <expr><name>JSTRACE_XML</name></expr>         }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></expr></init></decl>;</struct>

    <expr_stmt><expr><name>startThing</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>startTraceKind</name> = 0</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>argc</name> &gt; 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>v</name> = <call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>JSVAL_IS_TRACEABLE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>startThing</name> = <call><name>JSVAL_TO_TRACEABLE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>startTraceKind</name> = <call><name>JSVAL_TRACE_KIND</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr>!<call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>,
                           <argument><expr>"the first argument is not null or a heap-allocated "
                           "thing"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if></else></if>
    }</block></then></if>

    <expr_stmt><expr><name>traceKind</name> = -1</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>argc</name> &gt; 1</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>str</name> = <call><name>JS_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>1</expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>bytes</name> = <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>bytes</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition>;</condition><incr/>) <block>{
            <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name><name>traceKindNames</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>traceKind</name> = <name><name>traceKindNames</name><index>[<expr><name>i</name></expr>]</index></name>.<name>kind</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
            <if>if <condition>(<expr>++<name>i</name> == <call><name>JS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>traceKindNames</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"trace kind name '%s' is unknown"</expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>JS_FALSE</name></expr>;</return>
            }</block></then></if>
        }</block></for>
    }</block></then></if>

    <expr_stmt><expr><call><name>JS_TRACER_INIT</name><argument_list>(<argument><expr>&amp;<name><name>countTracer</name>.<name>base</name></name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>CountHeapNotify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JS_DHashTableInit</name><argument_list>(<argument><expr>&amp;<name><name>countTracer</name>.<name>visited</name></name></expr></argument>, <argument><expr><call><name>JS_DHashGetStubOps</name><argument_list>()</argument_list></call></expr></argument>,
                           <argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JSDHashEntryStub</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                           <argument><expr><call><name>JS_DHASH_DEFAULT_CAPACITY</name><argument_list>(<argument><expr>100</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>countTracer</name>.<name>ok</name></name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>countTracer</name>.<name>traceList</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>countTracer</name>.<name>recycleList</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name>startThing</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_TraceRuntime</name><argument_list>(<argument><expr>&amp;<name><name>countTracer</name>.<name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>JS_SET_TRACING_NAME</name><argument_list>(<argument><expr>&amp;<name><name>countTracer</name>.<name>base</name></name></expr></argument>, <argument><expr>"root"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_CallTracer</name><argument_list>(<argument><expr>&amp;<name><name>countTracer</name>.<name>base</name></name></expr></argument>, <argument><expr><name>startThing</name></expr></argument>, <argument><expr><name>startTraceKind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name>counter</name> = 0</expr>;</expr_stmt>
    <while>while <condition>(<expr>(<name>node</name> = <name><name>countTracer</name>.<name>traceList</name></name>) != <name>NULL</name></expr>)</condition> <block>{
        <if>if <condition>(<expr><name>traceKind</name> == -1 || <name><name>node</name>-&gt;<name>kind</name></name> == <name>traceKind</name></expr>)</condition><then>
            <expr_stmt><expr><name>counter</name>++</expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name><name>countTracer</name>.<name>traceList</name></name> = <name><name>node</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>node</name>-&gt;<name>next</name></name> = <name><name>countTracer</name>.<name>recycleList</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>countTracer</name>.<name>recycleList</name></name> = <name>node</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_TraceChildren</name><argument_list>(<argument><expr>&amp;<name><name>countTracer</name>.<name>base</name></name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>thing</name></name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <while>while <condition>(<expr>(<name>node</name> = <name><name>countTracer</name>.<name>recycleList</name></name>) != <name>NULL</name></expr>)</condition> <block>{
        <expr_stmt><expr><name><name>countTracer</name>.<name>recycleList</name></name> = <name><name>node</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><call><name>JS_DHashTableFinish</name><argument_list>(<argument><expr>&amp;<name><name>countTracer</name>.<name>visited</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name><name>countTracer</name>.<name>ok</name></name> &amp;&amp; <call><name>JS_NewNumberValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>jsdouble</name>) <name>counter</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>jsrefcount</name></type> <name>finalizeCount</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>finalize_counter_finalize</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>JS_ATOMIC_INCREMENT</name><argument_list>(<argument><expr>&amp;<name>finalizeCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>JSClass</name></type> <name>FinalizeCounterClass</name> <init>= <expr><block>{
    <expr>"FinalizeCounter"</expr>, <expr><name>JSCLASS_IS_ANONYMOUS</name></expr>,
    <expr><name>JS_PropertyStub</name></expr>,   <comment type="block">/* addProperty */</comment>
    <expr><name>JS_PropertyStub</name></expr>,   <comment type="block">/* delProperty */</comment>
    <expr><name>JS_PropertyStub</name></expr>,   <comment type="block">/* getProperty */</comment>
    <expr><name>JS_PropertyStub</name></expr>,   <comment type="block">/* setProperty */</comment>
    <expr><name>JS_EnumerateStub</name></expr>,
    <expr><name>JS_ResolveStub</name></expr>,
    <expr><name>JS_ConvertStub</name></expr>,
    <expr><name>finalize_counter_finalize</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>MakeFinalizeObserver</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name> <init>= <expr><call><name>JS_NewObjectWithGivenProto</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>FinalizeCounterClass</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                               <argument><expr><call><name>JS_GetGlobalObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>
    <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>FinalizeCount</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>vp</name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name>finalizeCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSScript</name> *</type>
<name>ValueToScript</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSScript</name> *</type><name>script</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name> <init>= <expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JSClass</name> *</type><name>clasp</name> <init>= <expr><call><name>JS_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>clasp</name> == <call><name>Jsvalify</name><argument_list>(<argument><expr>&amp;<name>js_ScriptClass</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>script</name> = (<name>JSScript</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>clasp</name> == <call><name>Jsvalify</name><argument_list>(<argument><expr>&amp;<name>js_GeneratorClass</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>JSGenerator</name> *</type><name>gen</name> <init>= <expr>(<name>JSGenerator</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>fun</name> = <call><name><name>gen</name>-&gt;<name>floatingFrame</name></name><argument_list>()</argument_list></call>-&gt;<call><name>fun</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>script</name> = <call><name>FUN_SCRIPT</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
    }</block></then></if>

    <if>if <condition>(<expr>!<name>script</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>fun</name> = <call><name>JS_ValueToFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>fun</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name>script</name> = <call><name>FUN_SCRIPT</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>script</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>my_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><name>JSSMSG_SCRIPTS_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <return>return <expr><name>script</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>SetDebug</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name> *</type><name>argv</name> <init>= <expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>argc</name> == 0 || !<call><name>JSVAL_IS_BOOLEAN</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>my_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><name>JSSMSG_NOT_ENOUGH_ARGS</name></expr></argument>, <argument><expr>"setDebug"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><call><name>js_SetDebugMode</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_BOOLEAN</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>GetTrapArgs</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>JSScript</name> **</type><name>scriptp</name></decl></param>,
            <param><decl><type><name>int32</name> *</type><name>ip</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uintN</name></type> <name>intarg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScript</name> *</type><name>script</name></decl>;</decl_stmt>

    <expr_stmt><expr>*<name>scriptp</name> = <call><name>JS_GetScriptedCaller</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>-&gt;<call><name>script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>ip</name> = 0</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>argc</name> != 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>v</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>intarg</name> = 0</expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> &amp;&amp;
            (<call><name>JS_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == <call><name>Jsvalify</name><argument_list>(<argument><expr>&amp;<name>js_FunctionClass</name></expr></argument>)</argument_list></call> ||
             <call><name>JS_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == <call><name>Jsvalify</name><argument_list>(<argument><expr>&amp;<name>js_ScriptClass</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>script</name> = <call><name>ValueToScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>script</name></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <expr_stmt><expr>*<name>scriptp</name> = <name>script</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>intarg</name>++</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>argc</name> &gt; <name>intarg</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name>JS_ValueToInt32</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>intarg</name></expr>]</index></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        }</block></then></if>
    }</block></then></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSTrapStatus</name></type>
<name>TrapHandler</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSScript</name> *</type><name>script</name></decl></param>, <param><decl><type><name>jsbytecode</name> *</type><name>pc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>,
            <param><decl><type><name>jsval</name></type> <name>closure</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name> <init>= <expr><call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSStackFrame</name> *</type><name>caller</name> <init>= <expr><call><name>JS_GetScriptedCaller</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>JS_EvaluateUCInStackFrame</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>caller</name></expr></argument>,
                                   <argument><expr><call><name>JS_GetStringChars</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>JS_GetStringLength</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><call><name><name>caller</name>-&gt;<name>script</name></name><argument_list>()</argument_list></call>-&gt;<name>filename</name></expr></argument>,
                                   <argument><expr><call><name><name>caller</name>-&gt;<name>script</name></name><argument_list>()</argument_list></call>-&gt;<name>lineno</name></expr></argument>,
                                   <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>JSTRAP_ERROR</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr>*<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JSTRAP_RETURN</name></expr>;</return></then></if>
    <return>return <expr><name>JSTRAP_CONTINUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Trap</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScript</name> *</type><name>script</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>i</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>jsval</name> *</type><name>argv</name> <init>= <expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>argc</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>my_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSSMSG_TRAP_USAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>argc</name>--</expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name> = <call><name>JS_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>GetTrapArgs</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr>&amp;<name>script</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>JS_SetTrap</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name><name>script</name>-&gt;<name>code</name></name> + <name>i</name></expr></argument>, <argument><expr><name>TrapHandler</name></expr></argument>, <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Untrap</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSScript</name> *</type><name>script</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>i</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>GetTrapArgs</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>script</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>JS_ClearTrap</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name><name>script</name>-&gt;<name>code</name></name> + <name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSTrapStatus</name></type>
<name>DebuggerAndThrowHandler</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSScript</name> *</type><name>script</name></decl></param>, <param><decl><type><name>jsbytecode</name> *</type><name>pc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>closure</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>TrapHandler</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr>(<name>JSString</name> *)<name>closure</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>SetDebuggerHandler</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>argc</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>my_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><name>JSSMSG_NOT_ENOUGH_ARGS</name></expr></argument>, <argument><expr>"setDebuggerHandler"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>str</name> = <call><name>JS_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>JS_SetDebuggerHandler</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>, <argument><expr><name>DebuggerAndThrowHandler</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>SetThrowHook</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>argc</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>my_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><name>JSSMSG_NOT_ENOUGH_ARGS</name></expr></argument>, <argument><expr>"setThrowHook"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>str</name> = <call><name>JS_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>JS_SetThrowHook</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>, <argument><expr><name>DebuggerAndThrowHandler</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>LineToPC</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSScript</name> *</type><name>script</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uintN</name></type> <name>lineno</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsbytecode</name> *</type><name>pc</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>argc</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>my_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSSMSG_LINE2PC_USAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>script</name> = <call><name>JS_GetScriptedCaller</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>-&gt;<call><name>script</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>GetTrapArgs</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>script</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>lineno</name> = (<name>i</name> == 0) ? <name><name>script</name>-&gt;<name>lineno</name></name> : (<name>uintN</name>)<name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pc</name> = <call><name>JS_LineNumberToPC</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>pc</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>vp</name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name>pc</name> - <name><name>script</name>-&gt;<name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>PCToLine</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSScript</name> *</type><name>script</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uintN</name></type> <name>lineno</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>GetTrapArgs</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>script</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>lineno</name> = <call><name>JS_PCToLineNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name><name>script</name>-&gt;<name>code</name></name> + <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>lineno</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>vp</name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>UpdateSwitchTableBounds</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSScript</name> *</type><name>script</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>offset</name></decl></param>,
                        <param><decl><type><name>uintN</name> *</type><name>start</name></decl></param>, <param><decl><type><name>uintN</name> *</type><name>end</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsbytecode</name> *</type><name>pc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSOp</name></type> <name>op</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>jmplen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsint</name></type> <name>low</name></decl>, <decl><type ref="prev"/><name>high</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>pc</name> = <name><name>script</name>-&gt;<name>code</name></name> + <name>offset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>op</name> = <call><name>js_GetOpcode</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{
      <case>case <expr><name>JSOP_TABLESWITCHX</name></expr>:
        <expr_stmt><expr><name>jmplen</name> = <name>JUMPX_OFFSET_LEN</name></expr>;</expr_stmt>
        <goto>goto <name>jump_table</name>;</goto>
      </case><case>case <expr><name>JSOP_TABLESWITCH</name></expr>:
        <expr_stmt><expr><name>jmplen</name> = <name>JUMP_OFFSET_LEN</name></expr>;</expr_stmt>
      <label><name>jump_table</name>:</label>
        <expr_stmt><expr><name>pc</name> += <name>jmplen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>low</name> = <call><name>GET_JUMP_OFFSET</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pc</name> += <name>JUMP_OFFSET_LEN</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>high</name> = <call><name>GET_JUMP_OFFSET</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pc</name> += <name>JUMP_OFFSET_LEN</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> = <name>high</name> - <name>low</name> + 1</expr>;</expr_stmt>
        <break>break;</break>

      </case><case>case <expr><name>JSOP_LOOKUPSWITCHX</name></expr>:
        <expr_stmt><expr><name>jmplen</name> = <name>JUMPX_OFFSET_LEN</name></expr>;</expr_stmt>
        <goto>goto <name>lookup_table</name>;</goto>
      </case><case>case <expr><name>JSOP_LOOKUPSWITCH</name></expr>:
        <expr_stmt><expr><name>jmplen</name> = <name>JUMP_OFFSET_LEN</name></expr>;</expr_stmt>
      <label><name>lookup_table</name>:</label>
        <expr_stmt><expr><name>pc</name> += <name>jmplen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> = <call><name>GET_INDEX</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pc</name> += <name>INDEX_LEN</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>jmplen</name> += <name>JUMP_OFFSET_LEN</name></expr>;</expr_stmt>
        <break>break;</break>

      </case><default>default:
        <comment type="block">/* [condswitch] switch does not have any jump or lookup tables. */</comment>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>op</name> == <name>JSOP_CONDSWITCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </default>}</block></switch>

    <expr_stmt><expr>*<name>start</name> = <call>(<name>uintN</name>)<argument_list>(<argument><expr><name>pc</name> - <name><name>script</name>-&gt;<name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>end</name> = *<name>start</name> + <call>(<name>uintN</name>)<argument_list>(<argument><expr><name>n</name> * <name>jmplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SrcNotes</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSScript</name> *</type><name>script</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uintN</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>caseOff</name></decl>, <decl><type ref="prev"/><name>switchTableStart</name></decl>, <decl><type ref="prev"/><name>switchTableEnd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jssrcnote</name> *</type><name>notes</name></decl>, *<decl><type ref="prev"/><name>sn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSSrcNoteType</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"\nSource notes:\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>notes</name> = <call><name><name>script</name>-&gt;<name>notes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>switchTableEnd</name> = <name>switchTableStart</name> = 0</expr>;</expr_stmt>
    <for>for (<init><expr><name>sn</name> = <name>notes</name></expr>;</init> <condition><expr>!<call><name>SN_IS_TERMINATOR</name><argument_list>(<argument><expr><name>sn</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>sn</name> = <call><name>SN_NEXT</name><argument_list>(<argument><expr><name>sn</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
        <expr_stmt><expr><name>delta</name> = <call><name>SN_DELTA</name><argument_list>(<argument><expr><name>sn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>offset</name> += <name>delta</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>type</name> = (<name>JSSrcNoteType</name>) <call><name>SN_TYPE</name><argument_list>(<argument><expr><name>sn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>name</name> = <name><name>js_SrcNoteSpec</name><index>[<expr><name>type</name></expr>]</index></name>.<name>name</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>type</name> == <name>SRC_LABEL</name></expr>)</condition><then> <block>{
            <comment type="block">/* Check if the source note is for a switch case. */</comment>
            <if>if <condition>(<expr><name>switchTableStart</name> &lt;= <name>offset</name> &amp;&amp; <name>offset</name> &lt; <name>switchTableEnd</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>name</name> = "case"</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>js_GetOpcode</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name><name>script</name>-&gt;<name>code</name></name> + <name>offset</name></expr></argument>)</argument_list></call> == <name>JSOP_NOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"%3u: %5u [%4u] %-8s"</expr></argument>,
                <argument><expr><call>(<name>uintN</name>) <argument_list>(<argument><expr><name>sn</name> - <name>notes</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
          <case>case <expr><name>SRC_SETLINE</name></expr>:
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>" lineno %u"</expr></argument>, <argument><expr>(<name>uintN</name>) <call><name>js_GetSrcNoteOffset</name><argument_list>(<argument><expr><name>sn</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </case><case>case <expr><name>SRC_FOR</name></expr>:
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>" cond %u update %u tail %u"</expr></argument>,
                   <argument><expr>(<name>uintN</name>) <call><name>js_GetSrcNoteOffset</name><argument_list>(<argument><expr><name>sn</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr>(<name>uintN</name>) <call><name>js_GetSrcNoteOffset</name><argument_list>(<argument><expr><name>sn</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr>(<name>uintN</name>) <call><name>js_GetSrcNoteOffset</name><argument_list>(<argument><expr><name>sn</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </case><case>case <expr><name>SRC_IF_ELSE</name></expr>:
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>" else %u elseif %u"</expr></argument>,
                   <argument><expr>(<name>uintN</name>) <call><name>js_GetSrcNoteOffset</name><argument_list>(<argument><expr><name>sn</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr>(<name>uintN</name>) <call><name>js_GetSrcNoteOffset</name><argument_list>(<argument><expr><name>sn</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </case><case>case <expr><name>SRC_COND</name></expr>:
          </case><case>case <expr><name>SRC_WHILE</name></expr>:
          </case><case>case <expr><name>SRC_PCBASE</name></expr>:
          </case><case>case <expr><name>SRC_PCDELTA</name></expr>:
          </case><case>case <expr><name>SRC_DECL</name></expr>:
          </case><case>case <expr><name>SRC_BRACE</name></expr>:
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>" offset %u"</expr></argument>, <argument><expr>(<name>uintN</name>) <call><name>js_GetSrcNoteOffset</name><argument_list>(<argument><expr><name>sn</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </case><case>case <expr><name>SRC_LABEL</name></expr>:
          </case><case>case <expr><name>SRC_LABELBRACE</name></expr>:
          </case><case>case <expr><name>SRC_BREAK2LABEL</name></expr>:
          </case><case>case <expr><name>SRC_CONT2LABEL</name></expr>:
            <expr_stmt><expr><name>index</name> = <call><name>js_GetSrcNoteOffset</name><argument_list>(<argument><expr><name>sn</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_GET_SCRIPT_ATOM</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>str</name> = <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>" atom %u ("</expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>js_FileEscapedString</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr>')'</expr></argument>, <argument><expr><name>gOutFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </case><case>case <expr><name>SRC_FUNCDEF</name></expr>: <block>{
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bytes</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>index</name> = <call><name>js_GetSrcNoteOffset</name><argument_list>(<argument><expr><name>sn</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>obj</name> = <call><name><name>script</name>-&gt;<name>getObject</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fun</name> = (<name>JSFunction</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>str</name> = <call><name>JS_DecompileFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr><name>JS_DONT_PRETTY_PRINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>str</name></expr>)</condition><then> <block>{
              <expr_stmt><expr><name>bytes</name> = <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
              <expr_stmt><expr><call><name>ReportException</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>bytes</name> = "N/A"</expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>" function %u (%s)"</expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          }</block>
          </case><case>case <expr><name>SRC_SWITCH</name></expr>:
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>" length %u"</expr></argument>, <argument><expr>(<name>uintN</name>) <call><name>js_GetSrcNoteOffset</name><argument_list>(<argument><expr><name>sn</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>caseOff</name> = (<name>uintN</name>) <call><name>js_GetSrcNoteOffset</name><argument_list>(<argument><expr><name>sn</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>caseOff</name></expr>)</condition><then>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>" first case offset %u"</expr></argument>, <argument><expr><name>caseOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name>UpdateSwitchTableBounds</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
                                    <argument><expr>&amp;<name>switchTableStart</name></expr></argument>, <argument><expr>&amp;<name>switchTableEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </case><case>case <expr><name>SRC_CATCH</name></expr>:
            <expr_stmt><expr><name>delta</name> = (<name>uintN</name>) <call><name>js_GetSrcNoteOffset</name><argument_list>(<argument><expr><name>sn</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>delta</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>script</name>-&gt;<name>main</name><index>[<expr><name>offset</name></expr>]</index></name> == <name>JSOP_LEAVEBLOCK</name></expr>)</condition><then>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>" stack depth %u"</expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                <else>else
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>" guard delta %u"</expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
            }</block></then></if>
            <break>break;</break>
          </case><default>default:<empty_stmt>;</empty_stmt>
        </default>}</block></switch>
        <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr>'\n'</expr></argument>, <argument><expr><name>gOutFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Notes</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uintN</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScript</name> *</type><name>script</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>jsval</name> *</type><name>argv</name> <init>= <expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>script</name> = <call><name>ValueToScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>script</name></expr>)</condition><then>
            <continue>continue;</continue></then></if>

        <expr_stmt><expr><call><name>SrcNotes</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<expr_stmt><expr><call><name>JS_STATIC_ASSERT</name><argument_list>(<argument><expr><name>JSTRY_CATCH</name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>JS_STATIC_ASSERT</name><argument_list>(<argument><expr><name>JSTRY_FINALLY</name> == 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>JS_STATIC_ASSERT</name><argument_list>(<argument><expr><name>JSTRY_ITER</name> == 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>* <specifier>const</specifier></type> <name><name>TryNoteNames</name><index>[]</index></name> <init>= <expr><block>{ <expr>"catch"</expr>, <expr>"finally"</expr>, <expr>"iter"</expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>TryNotes</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSScript</name> *</type><name>script</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSTryNote</name> *</type><name>tn</name></decl>, *<decl><type ref="prev"/><name>tnlimit</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>script</name>-&gt;<name>trynotesOffset</name></name> == 0</expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>tn</name> = <call><name><name>script</name>-&gt;<name>trynotes</name></name><argument_list>()</argument_list></call>-&gt;<name>vector</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tnlimit</name> = <name>tn</name> + <call><name><name>script</name>-&gt;<name>trynotes</name></name><argument_list>()</argument_list></call>-&gt;<name>length</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"\nException table:\n"
            "kind      stack    start      end\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <do>do <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>tn</name>-&gt;<name>kind</name></name> &lt; <call><name>JS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>TryNoteNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>" %-7s %6u %8u %8u\n"</expr></argument>,
                <argument><expr><name><name>TryNoteNames</name><index>[<expr><name><name>tn</name>-&gt;<name>kind</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tn</name>-&gt;<name>stackDepth</name></name></expr></argument>,
                <argument><expr><name><name>tn</name>-&gt;<name>start</name></name></expr></argument>, <argument><expr><name><name>tn</name>-&gt;<name>start</name></name> + <name><name>tn</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> while <condition>(<expr>++<name>tn</name> != <name>tnlimit</name></expr>)</condition>;</do>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>DisassembleValue</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>, <param><decl><type><name>bool</name></type> <name>lines</name></decl></param>, <param><decl><type><name>bool</name></type> <name>recursive</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSScript</name> *</type><name>script</name> <init>= <expr><call><name>ValueToScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>script</name></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>
    <if>if <condition>(<expr><call><name>VALUE_IS_FUNCTION</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name> <init>= <expr><call><name>JS_ValueToFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>fun</name> &amp;&amp; (<name><name>fun</name>-&gt;<name>flags</name></name> &amp; ~7U)</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>uint16</name></type> <name>flags</name> <init>= <expr><name><name>fun</name>-&gt;<name>flags</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr>"flags:"</expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHOW_FLAG</name><parameter_list>(<param><type><name>flag</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if (flags &amp; JSFUN_##flag) fputs(" " #flag, stdout);</cpp:value></cpp:define>

            <expr_stmt><expr><call><name>SHOW_FLAG</name><argument_list>(<argument><expr><name>LAMBDA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SHOW_FLAG</name><argument_list>(<argument><expr><name>HEAVYWEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SHOW_FLAG</name><argument_list>(<argument><expr><name>PRIMITIVE_THIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SHOW_FLAG</name><argument_list>(<argument><expr><name>EXPR_CLOSURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SHOW_FLAG</name><argument_list>(<argument><expr><name>TRCINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SHOW_FLAG</name></cpp:undef>

            <if>if <condition>(<expr><call><name>FUN_INTERPRETED</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name>FUN_NULL_CLOSURE</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr>" NULL_CLOSURE"</expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                <else>else <if>if <condition>(<expr><call><name>FUN_FLAT_CLOSURE</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr>" FLAT_CLOSURE"</expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>

                <if>if <condition>(<expr><name><name>fun</name>-&gt;<name>u</name>.<name>i</name>.<name>nupvars</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr>"\nupvars: {\n"</expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>void</name> *</type><name>mark</name> <init>= <expr><call><name>JS_ARENA_MARK</name><argument_list>(<argument><expr>&amp;<name><name>cx</name>-&gt;<name>tempPool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>jsuword</name> *</type><name>localNames</name> <init>= <expr><call><name><name>fun</name>-&gt;<name>getLocalNameArray</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>cx</name>-&gt;<name>tempPool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr>!<name>localNames</name></expr>)</condition><then>
                        <return>return <expr>false</expr>;</return></then></if>

                    <decl_stmt><decl><type><name>JSUpvarArray</name> *</type><name>uva</name> <init>= <expr><call><name><name>fun</name>-&gt;<name>u</name>.<name>i</name>.<name>script</name>-&gt;<name>upvars</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>uintN</name></type> <name>upvar_base</name> <init>= <expr><call><name><name>fun</name>-&gt;<name>countArgsAndVars</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <for>for (<init><decl><type><name>uint32</name></type> <name>i</name> <init>= <expr>0</expr></init>, <name>n</name> <init>= <expr><name><name>uva</name>-&gt;<name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                        <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name> <init>= <expr><call><name>JS_LOCAL_NAME_TO_ATOM</name><argument_list>(<argument><expr><name><name>localNames</name><index>[<expr><name>upvar_base</name> + <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>UpvarCookie</name></type> <name>cookie</name> <init>= <expr><name><name>uva</name>-&gt;<name>vector</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"  %s: {skip:%u, slot:%u},\n"</expr></argument>,
                               <argument><expr><call><name>js_AtomToPrintableString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cookie</name>.<name>level</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cookie</name>.<name>slot</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>

                    <expr_stmt><expr><call><name>JS_ARENA_RELEASE</name><argument_list>(<argument><expr>&amp;<name><name>cx</name>-&gt;<name>tempPool</name></name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr>'}'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr>'\n'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name>js_Disassemble</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>
    <expr_stmt><expr><call><name>SrcNotes</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TryNotes</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>recursive</name> &amp;&amp; <name><name>script</name>-&gt;<name>objectsOffset</name></name> != 0</expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>JSObjectArray</name> *</type><name>objects</name> <init>= <expr><call><name><name>script</name>-&gt;<name>objects</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>uintN</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> != <name><name>objects</name>-&gt;<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name> <init>= <expr><name><name>objects</name>-&gt;<name>vector</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>obj</name>-&gt;<name>isFunction</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr>'\n'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<call><name>DisassembleValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>recursive</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr>false</expr>;</return>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
    }</block></then></if>
    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Disassemble</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>lines</name> <init>= <expr>false</expr></init>, <name>recursive</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>jsval</name> *</type><name>argv</name> <init>= <expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>argc</name> &gt; 0 &amp;&amp; <call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bytes</name> <init>= <expr><call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>lines</name> = !<call><name>strcmp</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr>"-l"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>recursive</name> = !<call><name>strcmp</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr>"-r"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>lines</name> &amp;&amp; !<name>recursive</name></expr>)</condition><then>
            <break>break;</break></then></if>
        <expr_stmt><expr><name>argv</name>++</expr>, <expr><name>argc</name>--</expr>;</expr_stmt>
    }</block></while>

    <for>for (<init><decl><type><name>uintN</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr>!<call><name>DisassembleValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>recursive</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>DisassFile</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScript</name> *</type><name>script</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>oldopts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name> *</type><name>argv</name> <init>= <expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>argc</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>JSObject</name> *</type><name>thisobj</name> <init>= <expr><call><name>JS_THIS_OBJECT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>thisobj</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>str</name> = <call><name>JS_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>filename</name> = <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>oldopts</name> = <call><name>JS_GetOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_SetOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>oldopts</name> | <name>JSOPTION_COMPILE_N_GO</name> | <name>JSOPTION_NO_SCRIPT_RVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>script</name> = <call><name>JS_CompileFile</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>thisobj</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_SetOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>oldopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>script</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name><name>script</name>-&gt;<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name> <init>= <expr><call><name>JS_NewScriptObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* I like to root it, root it. */</comment>
    <expr_stmt><expr><name>ok</name> = <call><name>Disassemble</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* gross, but works! */</comment>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>DisassWithSrc</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_BUF_LEN</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>uintN</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>line1</name></decl>, <decl><type ref="prev"/><name>line2</name></decl>, <decl><type ref="prev"/><name>bupline</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScript</name> *</type><name>script</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> *</type><name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>linebuf</name><index>[<expr><name>LINE_BUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsbytecode</name> *</type><name>pc</name></decl>, *<decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sep</name><index>[]</index></name> <init>= <expr>";-------------------------"</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>jsval</name> *</type><name>argv</name> <init>= <expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>ok</name> &amp;&amp; <name>i</name> &lt; <name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>script</name> = <call><name>ValueToScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>script</name></expr>)</condition><then>
           <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

        <if>if <condition>(<expr>!<name><name>script</name>-&gt;<name>filename</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>my_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><name>JSSMSG_FILE_SCRIPTS_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>file</name> = <call><name>fopen</name><argument_list>(<argument><expr><name><name>script</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>"r"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>file</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>my_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><name>JSSMSG_CANT_OPEN</name></expr></argument>, <argument><expr><name><name>script</name>-&gt;<name>filename</name></name></expr></argument>,
                                 <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>pc</name> = <name><name>script</name>-&gt;<name>code</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>end</name> = <name>pc</name> + <name><name>script</name>-&gt;<name>length</name></name></expr>;</expr_stmt>

        <comment type="block">/* burn the leading lines */</comment>
        <expr_stmt><expr><name>line2</name> = <call><name>JS_PCToLineNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><expr><name>line1</name> = 0</expr>;</init> <condition><expr><name>line1</name> &lt; <name>line2</name> - 1</expr>;</condition> <incr><expr><name>line1</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>char</name> *</type><name>tmp</name> <init>= <expr><call><name>fgets</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>, <argument><expr><name>LINE_BUF_LEN</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name>tmp</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"failed to read %s fully"</expr></argument>,
                               <argument><expr><name><name>script</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
                <goto>goto <name>bail</name>;</goto>
            }</block></then></if>
        }</block></for>

        <expr_stmt><expr><name>bupline</name> = 0</expr>;</expr_stmt>
        <while>while <condition>(<expr><name>pc</name> &lt; <name>end</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>line2</name> = <call><name>JS_PCToLineNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>line2</name> &lt; <name>line1</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>bupline</name> != <name>line2</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>bupline</name> = <name>line2</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"%s %3u: BACKUP\n"</expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><name>bupline</name> &amp;&amp; <name>line1</name> == <name>line2</name></expr>)</condition><then>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"%s %3u: RESTORE\n"</expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><name>bupline</name> = 0</expr>;</expr_stmt>
                <while>while <condition>(<expr><name>line1</name> &lt; <name>line2</name></expr>)</condition> <block>{
                    <if>if <condition>(<expr>!<call><name>fgets</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>, <argument><expr><name>LINE_BUF_LEN</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>my_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                             <argument><expr><name>JSSMSG_UNEXPECTED_EOF</name></expr></argument>,
                                             <argument><expr><name><name>script</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
                        <goto>goto <name>bail</name>;</goto>
                    }</block></then></if>
                    <expr_stmt><expr><name>line1</name>++</expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"%s %3u: %s"</expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>line1</name></expr></argument>, <argument><expr><name>linebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block></else></if>

            <expr_stmt><expr><name>len</name> = <call><name>js_Disassemble1</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>,
                                  <argument><expr><name>pc</name> - <name><name>script</name>-&gt;<name>code</name></name></expr></argument>,
                                  <argument><expr><name>JS_TRUE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>len</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
                <goto>goto <name>bail</name>;</goto>
            }</block></then></if>
            <expr_stmt><expr><name>pc</name> += <name>len</name></expr>;</expr_stmt>
        }</block></while>

      <label><name>bail</name>:</label>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LINE_BUF_LEN</name></cpp:undef>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Tracing</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>FILE</name> *</type><name>file</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>argc</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>vp</name> = <call><name>BOOLEAN_TO_JSVAL</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>tracefp</name></name> != 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>jsval</name> *</type><name>argv</name> <init>= <expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><call><name>JS_TypeOfValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
      <case>case <expr><name>JSTYPE_NUMBER</name></expr>:
      </case><case>case <expr><name>JSTYPE_BOOLEAN</name></expr>: <block>{
        <decl_stmt><decl><type><name>JSBool</name></type> <name>bval</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>JS_ValueToBoolean</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>bval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>file</name> = <name>bval</name> ? <name>stderr</name> : <name>NULL</name></expr>;</expr_stmt>
        <break>break;</break>
      }</block>
      </case><case>case <expr><name>JSTYPE_STRING</name></expr>: <block>{
        <decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>file</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"w"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>file</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"tracing: couldn't open output file %s: %s"</expr></argument>, 
                           <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>
        <break>break;</break>
      }</block>
      </case><default>default:
          <goto>goto <name>bad_argument</name>;</goto>
    </default>}</block></switch>
    <if>if <condition>(<expr><name><name>cx</name>-&gt;<name>tracefp</name></name> &amp;&amp; <name><name>cx</name>-&gt;<name>tracefp</name></name> != <name>stderr</name></expr>)</condition><then>
      <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr>(<name>FILE</name> *)<name><name>cx</name>-&gt;<name>tracefp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>tracefp</name></name> = <name>file</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>tracePrevPc</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>

 <label><name>bad_argument</name>:</label>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name> <init>= <expr><call><name>JS_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"tracing: illegal argument %s"</expr></argument>,
                   <argument><expr><call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_FALSE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DumpScope</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>FILE</name> *</type><name>fp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uintN</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>JSScopeProperty</name> *</type><name>sprop</name> <init>= <expr><name>NULL</name></expr></init></decl>;</init> <condition><expr><call><name>JS_PropertyIterator</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name>sprop</name></expr></argument>)</argument_list></call></expr>;</condition><incr/>) <block>{
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"%3u %p "</expr></argument>, <argument><expr><name>i</name>++</expr></argument>, <argument><expr>(<name>void</name> *) <name>sprop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>((<name>Shape</name> *) <name>sprop</name>)-&gt;<call><name>dump</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>DumpStats</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uintN</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsid</name></type> <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Value</name></type> <name>value</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>jsval</name> *</type><name>argv</name> <init>= <expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>str</name> = <call><name>JS_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bytes</name> = <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr>"arena"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_ARENAMETER</name></cpp:ifdef>
            <expr_stmt><expr><call><name>JS_DumpArenaStats</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr>"atom"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>js_DumpAtoms</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>gOutFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr>"global"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>DumpScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>cx</name>-&gt;<name>globalObject</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr>!<call><name>JS_ValueToId</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name>js_FindProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>obj</name></expr></argument>, <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <if>if <condition>(<expr><name>prop</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>getProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            }</block></then></if>
            <if>if <condition>(<expr>!<name>prop</name> || !<call><name><name>value</name>.<name>isObjectOrNull</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gErrFile</name></expr></argument>, <argument><expr>"js: invalid stats argument %s\n"</expr></argument>,
                        <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <expr_stmt><expr><name>obj</name> = <call><name><name>value</name>.<name>toObjectOrNull</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>obj</name></expr>)</condition><then>
                <expr_stmt><expr><call><name>DumpScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></else></if></else></if></else></if>
    }</block></for>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>DumpHeap</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>fileName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>*</type> <name>startThing</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>startTraceKind</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>badTraceArg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> *</type><name>thingToFind</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>maxDepth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> *</type><name>thingToIgnore</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> *</type><name>dumpFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>fileName</name> = <name>NULL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>argc</name> &gt; 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>v</name> = <call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>str</name> = <call><name>JS_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <expr_stmt><expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fileName</name> = <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><name>startThing</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>startTraceKind</name> = 0</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>argc</name> &gt; 1</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>v</name> = <call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>1</expr>]</index></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>JSVAL_IS_TRACEABLE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>startThing</name> = <call><name>JSVAL_TO_TRACEABLE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>startTraceKind</name> = <call><name>JSVAL_TRACE_KIND</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr>!<call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>badTraceArg</name> = "start"</expr>;</expr_stmt>
            <goto>goto <name>not_traceable_arg</name>;</goto>
        }</block></then></if></else></if>
    }</block></then></if>

    <expr_stmt><expr><name>thingToFind</name> = <name>NULL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>argc</name> &gt; 2</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>v</name> = <call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>2</expr>]</index></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>JSVAL_IS_TRACEABLE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>thingToFind</name> = <call><name>JSVAL_TO_TRACEABLE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr>!<call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>badTraceArg</name> = "toFind"</expr>;</expr_stmt>
            <goto>goto <name>not_traceable_arg</name>;</goto>
        }</block></then></if></else></if>
    }</block></then></if>

    <expr_stmt><expr><name>maxDepth</name> = (<name>size_t</name>)-1</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>argc</name> &gt; 3</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>v</name> = <call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>3</expr>]</index></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>uint32</name></type> <name>depth</name></decl>;</decl_stmt>

            <if>if <condition>(<expr>!<call><name>JS_ValueToECMAUint32</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr>&amp;<name>depth</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <expr_stmt><expr><name>maxDepth</name> = <name>depth</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><name>thingToIgnore</name> = <name>NULL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>argc</name> &gt; 4</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>v</name> = <call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>4</expr>]</index></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>JSVAL_IS_TRACEABLE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>thingToIgnore</name> = <call><name>JSVAL_TO_TRACEABLE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr>!<call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>badTraceArg</name> = "toIgnore"</expr>;</expr_stmt>
            <goto>goto <name>not_traceable_arg</name>;</goto>
        }</block></then></if></else></if>
    }</block></then></if>

    <if>if <condition>(<expr>!<name>fileName</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>dumpFile</name> = <name>stdout</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>dumpFile</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr>"w"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>dumpFile</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"can't open %s: %s"</expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>
    }</block></else></if>

    <expr_stmt><expr><name>ok</name> = <call><name>JS_DumpHeap</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>dumpFile</name></expr></argument>, <argument><expr><name>startThing</name></expr></argument>, <argument><expr><name>startTraceKind</name></expr></argument>, <argument><expr><name>thingToFind</name></expr></argument>,
                     <argument><expr><name>maxDepth</name></expr></argument>, <argument><expr><name>thingToIgnore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>dumpFile</name> != <name>stdout</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>dumpFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>ok</name></expr>;</return>

  <label><name>not_traceable_arg</name>:</label>
    <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"argument '%s' is not null or a heap-allocated thing"</expr></argument>,
                   <argument><expr><name>badTraceArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_FALSE</name></expr>;</return>
}</block></function>

<function><type><name>JSBool</name></type>
<name>DumpObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>arg0</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>JS_ConvertArguments</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"o"</expr></argument>, <argument><expr>&amp;<name>arg0</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>js_DumpObject</name><argument_list>(<argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DEBUG */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CVTARGS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>EscapeWideString</name><parameter_list>(<param><decl><type><name>jschar</name> *</type><name>w</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>enuf</name><index>[<expr>80</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>hex</name><index>[]</index></name> <init>= <expr>"0123456789abcdef"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jschar</name></type> <name>u</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>w</name></expr>)</condition><then>
        <return>return <expr>""</expr>;</return></then></if>
    <for>for (<init><expr><name>i</name> = <name>j</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; sizeof <name>enuf</name> - 1</expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>j</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>u</name> = <name><name>w</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>u</name> == 0</expr>)</condition><then>
            <break>break;</break></then></if>
        <expr_stmt><expr><name>b</name> = <call>(<name>unsigned</name> <name>char</name>)<argument_list>(<argument><expr><name>u</name> &gt;&gt; 8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> = <call>(<name>unsigned</name> <name>char</name>)<argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>b</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>i</name> &gt;= sizeof <name>enuf</name> - 6</expr>)</condition><then>
                <break>break;</break></then></if>
            <expr_stmt><expr><name><name>enuf</name><index>[<expr><name>i</name>++</expr>]</index></name> = '\\'</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>enuf</name><index>[<expr><name>i</name>++</expr>]</index></name> = 'u'</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>enuf</name><index>[<expr><name>i</name>++</expr>]</index></name> = <name><name>hex</name><index>[<expr><name>b</name> &gt;&gt; 4</expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>enuf</name><index>[<expr><name>i</name>++</expr>]</index></name> = <name><name>hex</name><index>[<expr><name>b</name> &amp; 15</expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>enuf</name><index>[<expr><name>i</name>++</expr>]</index></name> = <name><name>hex</name><index>[<expr><name>c</name> &gt;&gt; 4</expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>enuf</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>hex</name><index>[<expr><name>c</name> &amp; 15</expr>]</index></name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr>!<call><name>isprint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>i</name> &gt;= sizeof <name>enuf</name> - 4</expr>)</condition><then>
                <break>break;</break></then></if>
            <expr_stmt><expr><name><name>enuf</name><index>[<expr><name>i</name>++</expr>]</index></name> = '\\'</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>enuf</name><index>[<expr><name>i</name>++</expr>]</index></name> = 'x'</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>enuf</name><index>[<expr><name>i</name>++</expr>]</index></name> = <name><name>hex</name><index>[<expr><name>c</name> &gt;&gt; 4</expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>enuf</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>hex</name><index>[<expr><name>c</name> &amp; 15</expr>]</index></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>enuf</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>char</name>)<name>c</name></expr>;</expr_stmt>
        }</block></else></if></else></if>
    }</block></for>
    <expr_stmt><expr><name><name>enuf</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt>
    <return>return <expr><name>enuf</name></expr>;</return>
}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>ZZ_formatter</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>format</name></decl></param>, <param><decl><type><name>JSBool</name></type> <name>fromJS</name></decl></param>, <param><decl><type><name>jsval</name> **</type><name>vpp</name></decl></param>,
             <param><decl><type><name>va_list</name> *</type><name>app</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name> *</type><name>vp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsdouble</name></type> <name>re</name></decl>, <decl><type ref="prev"/><name>im</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"entering ZZ_formatter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vp</name> = *<name>vpp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ap</name> = *<name>app</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>fromJS</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name>JS_ValueToNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>vp</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>re</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <if>if <condition>(<expr>!<call><name>JS_ValueToNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>vp</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>im</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>jsdouble</name> *</expr></argument>)</argument_list></call> = <name>re</name></expr>;</expr_stmt>
        <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>jsdouble</name> *</expr></argument>)</argument_list></call> = <name>im</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>re</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>jsdouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>im</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>jsdouble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>JS_NewNumberValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr>&amp;<name><name>vp</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <if>if <condition>(<expr>!<call><name>JS_NewNumberValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>im</name></expr></argument>, <argument><expr>&amp;<name><name>vp</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></else></if>
    <expr_stmt><expr>*<name>vpp</name> = <name>vp</name> + 2</expr>;</expr_stmt>
    <expr_stmt><expr>*<name>app</name> = <name>ap</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"leaving ZZ_formatter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>ConvertArgs</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>b</name> <init>= <expr><name>JS_FALSE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jschar</name></type> <name>c</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>i</name> <init>= <expr>0</expr></init>, <name>j</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>u</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsdouble</name></type> <name>d</name> <init>= <expr>0</expr></init>, <name>I</name> <init>= <expr>0</expr></init>, <name>re</name> <init>= <expr>0</expr></init>, <name>im</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jschar</name> *</type><name>w</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name> <init>= <expr><name>JSVAL_VOID</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>JS_AddArgumentFormatter</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"ZZ"</expr></argument>, <argument><expr><name>ZZ_formatter</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>ok</name> = <call><name>JS_ConvertArguments</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"b/ciujdIsSWofvZZ*"</expr></argument>,
                             <argument><expr>&amp;<name>b</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>, <argument><expr>&amp;<name>u</name></expr></argument>, <argument><expr>&amp;<name>j</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>, <argument><expr>&amp;<name>I</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>w</name></expr></argument>, <argument><expr>&amp;<name>obj2</name></expr></argument>,
                             <argument><expr>&amp;<name>fun</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>, <argument><expr>&amp;<name>re</name></expr></argument>, <argument><expr>&amp;<name>im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_RemoveArgumentFormatter</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"ZZ"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>,
            <argument><expr>"b %u, c %x (%c), i %ld, u %lu, j %ld\n"</expr></argument>,
            <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>(<name>char</name>)<name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>ToString</name></type> <name>obj2string</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>obj2</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>ToString</name></type> <name>valueString</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>v</name></type></decl></param>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>tmpstr</name> <init>= <expr><call><name>JS_DecompileFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>func</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>tmpstr</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>func</name> = <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><name>tmpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>ReportException</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>func</name> = "error decompiling fun"</expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>,
            <argument><expr>"d %g, I %g, s %s, S %s, W %s, obj %s, fun %s\n"
            "v %s, re %g, im %g\n"</expr></argument>,
            <argument><expr><name>d</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>str</name> ? <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> : ""</expr></argument>, <argument><expr><call><name>EscapeWideString</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>obj2string</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><name>fun</name> ? <name>func</name> : ""</expr></argument>,
            <argument><expr><call><name><name>valueString</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>BuildDate</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name></type> <name><name>version</name><index>[<expr>20</expr>]</index></name> <init>= <expr>"\n"</expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_VERSION</name> &lt; 150</expr></cpp:if>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr>" for version %d\n"</expr></argument>, <argument><expr><name>JS_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"built on %s at %s%s"</expr></argument>, <argument><expr><name>__DATE__</name></expr></argument>, <argument><expr><name>__TIME__</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>vp</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Clear</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>argc</name> != 0 &amp;&amp; !<call><name>JS_ValueToObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index></expr></argument>, <argument><expr>&amp;<name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>JS_ClearScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Intern</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>str</name> = <call><name>JS_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>argc</name> == 0 ? <name>JSVAL_VOID</name> : <name><name>vp</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>JS_InternUCStringN</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JS_GetStringChars</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name>JS_GetStringLength</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr>*<name>vp</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Clone</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>funobj</name></decl>, *<decl><type ref="prev"/><name>parent</name></decl>, *<decl><type ref="prev"/><name>clone</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>argc</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>jsval</name> *</type><name>argv</name> <init>= <expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>VALUE_IS_FUNCTION</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>funobj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name> <init>= <expr><call><name>JS_ValueToFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>fun</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>funobj</name> = <call><name>JS_GetFunctionObject</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <if>if <condition>(<expr><name>argc</name> &gt; 1</expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name>JS_ValueToObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>parent</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>parent</name> = <call><name>JS_GetParent</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>funobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name>clone</name> = <call><name>JS_CloneFunctionObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>funobj</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>clone</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>GetPDA</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>vobj</name></decl>, *<decl><type ref="prev"/><name>aobj</name></decl>, *<decl><type ref="prev"/><name>pdobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSPropertyDescArray</name></type> <name>pda</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSPropertyDesc</name> *</type><name>pd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>JS_ValueToObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>argc</name> == 0 ? <name>JSVAL_VOID</name> : <name><name>vp</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>vobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<name>vobj</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>vp</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>aobj</name> = <call><name>JS_NewArrayObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>aobj</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>aobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ok</name> = <call><name>JS_GetPropertyDescArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vobj</name></expr></argument>, <argument><expr>&amp;<name>pda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>pd</name> = <name><name>pda</name>.<name>array</name></name></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>pda</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>pd</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>pdobj</name> = <call><name>JS_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>pdobj</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>

        <comment type="block">/* Protect pdobj from GC by setting it as an element of aobj now */</comment>
        <expr_stmt><expr><name>v</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>pdobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ok</name> = <call><name>JS_SetElement</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>aobj</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
            <break>break;</break></then></if>

        <expr_stmt><expr><name>ok</name> = <call><name>JS_SetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pdobj</name></expr></argument>, <argument><expr>"id"</expr></argument>, <argument><expr>&amp;<name><name>pd</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call> &amp;&amp;
             <call><name>JS_SetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pdobj</name></expr></argument>, <argument><expr>"value"</expr></argument>, <argument><expr>&amp;<name><name>pd</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call> &amp;&amp;
             (<name>v</name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>pd</name>-&gt;<name>flags</name></name></expr></argument>)</argument_list></call>,
              <call><name>JS_SetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pdobj</name></expr></argument>, <argument><expr>"flags"</expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call>) &amp;&amp;
             (<name>v</name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>pd</name>-&gt;<name>slot</name></name></expr></argument>)</argument_list></call>,
              <call><name>JS_SetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pdobj</name></expr></argument>, <argument><expr>"slot"</expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call>) &amp;&amp;
             <call><name>JS_SetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pdobj</name></expr></argument>, <argument><expr>"alias"</expr></argument>, <argument><expr>&amp;<name><name>pd</name>-&gt;<name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
            <break>break;</break></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>JS_PutPropertyDescArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>pda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>GetSLX</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSScript</name> *</type><name>script</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>script</name> = <call><name>ValueToScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>argc</name> == 0 ? <name>JSVAL_VOID</name> : <name><name>vp</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>script</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>vp</name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><call><name>js_GetScriptLineExtent</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>ToInt32</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int32</name></type> <name>i</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>JS_ValueToInt32</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>argc</name> == 0 ? <name>JSVAL_VOID</name> : <name><name>vp</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <return>return <expr><call><name>JS_NewNumberValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>StringsAreUTF8</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>vp</name> = <call><name>JS_CStringsAreUTF8</name><argument_list>()</argument_list></call> ? <name>JSVAL_TRUE</name> : <name>JSVAL_FALSE</name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>StackQuota</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uint32</name></type> <name>n</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>argc</name> == 0</expr>)</condition><then>
        <return>return <expr><call><name>JS_NewNumberValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>double</name>) <name>gScriptStackQuota</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>JS_ValueToECMAUint32</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>gScriptStackQuota</name> = <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_SetScriptStackQuota</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>gScriptStackQuota</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name>badUTF8</name> <init>= <expr>"...\xC0..."</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name>bigUTF8</name> <init>= <expr>"...\xFB\xBF\xBF\xBF\xBF..."</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>jschar</name></type> <name><name>badSurrogate</name><index>[]</index></name> <init>= <expr><block>{ <expr>'A'</expr>, <expr>'B'</expr>, <expr>'C'</expr>, <expr>0xDEEE</expr>, <expr>'D'</expr>, <expr>'E'</expr>, <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>TestUTF8</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int32</name></type> <name>mode</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jschar</name></type> <name><name>chars</name><index>[<expr>20</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>charsLength</name> <init>= <expr>5</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>bytes</name><index>[<expr>20</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bytesLength</name> <init>= <expr>20</expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>argc</name> &amp;&amp; !<call><name>JS_ValueToInt32</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <comment type="block">/* The following throw errors if compiled with UTF-8. */</comment>
    <switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{
      <comment type="block">/* mode 1: malformed UTF-8 string. */</comment>
      <case>case <expr>1</expr>:
        <expr_stmt><expr><call><name>JS_NewStringCopyZ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>badUTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <comment type="block">/* mode 2: big UTF-8 character. */</comment>
      </case><case>case <expr>2</expr>:
        <expr_stmt><expr><call><name>JS_NewStringCopyZ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>bigUTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <comment type="block">/* mode 3: bad surrogate character. */</comment>
      </case><case>case <expr>3</expr>:
        <expr_stmt><expr><call><name>JS_EncodeCharacters</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>badSurrogate</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>&amp;<name>bytesLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <comment type="block">/* mode 4: use a too small buffer. */</comment>
      </case><case>case <expr>4</expr>:
        <expr_stmt><expr><call><name>JS_DecodeBytes</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"1234567890"</expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr>&amp;<name>charsLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </case><default>default:
        <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"invalid mode parameter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    </default>}</block></switch>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>!<call><name>JS_IsExceptionPending</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>ThrowError</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"This is an error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_FALSE</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAZY_STANDARD_CLASSES</name></cpp:macro></cpp:define>

<comment type="block">/* A class for easily testing the inner/outer object callbacks. */</comment>
<typedef>typedef <type><struct>struct <name>ComplexObject</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>JSBool</name></type> <name>isInner</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>frozen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>inner</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>outer</name></decl>;</decl_stmt>
</public>}</block></struct></type> <name>ComplexObject</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>JSObject</name> *</type>
<name>split_create_outer</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>JSObject</name> *</type>
<name>split_create_inner</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>outer</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ComplexObject</name> *</type>
<name>split_get_private</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>split_addProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ComplexObject</name> *</type><name>cpx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cpx</name> = <call><name>split_get_private</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>cpx</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<name><name>cpx</name>-&gt;<name>isInner</name></name> &amp;&amp; <name><name>cpx</name>-&gt;<name>inner</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* Make sure to define this property on the inner object. */</comment>
        <return>return <expr><call><name>JS_DefinePropertyById</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>cpx</name>-&gt;<name>inner</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSPROP_ENUMERATE</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>split_getProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ComplexObject</name> *</type><name>cpx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cpx</name> = <call><name>split_get_private</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>cpx</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name>JSID_IS_ATOM</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> &amp;&amp;
        !<call><name>strcmp</name><argument_list>(<argument><expr><call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><call><name>JSID_TO_STRING</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"isInner"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>vp</name> = <call><name>BOOLEAN_TO_JSVAL</name><argument_list>(<argument><expr><name><name>cpx</name>-&gt;<name>isInner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<name><name>cpx</name>-&gt;<name>isInner</name></name> &amp;&amp; <name><name>cpx</name>-&gt;<name>inner</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>JSID_IS_ATOM</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>str</name> = <call><name>JSID_TO_STRING</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>JS_GetUCProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>cpx</name>-&gt;<name>inner</name></name></expr></argument>, <argument><expr><call><name>JS_GetStringChars</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name>JS_GetStringLength</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>JSID_IS_INT</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><call><name>JS_GetElement</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>cpx</name>-&gt;<name>inner</name></name></expr></argument>, <argument><expr><call><name>JSID_TO_INT</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>split_setProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ComplexObject</name> *</type><name>cpx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cpx</name> = <call><name>split_get_private</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>cpx</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<name><name>cpx</name>-&gt;<name>isInner</name></name> &amp;&amp; <name><name>cpx</name>-&gt;<name>inner</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>JSID_IS_ATOM</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>str</name> = <call><name>JSID_TO_STRING</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>JS_SetUCProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>cpx</name>-&gt;<name>inner</name></name></expr></argument>, <argument><expr><call><name>JS_GetStringChars</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name>JS_GetStringLength</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>JSID_IS_INT</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><call><name>JS_SetElement</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>cpx</name>-&gt;<name>inner</name></name></expr></argument>, <argument><expr><call><name>JSID_TO_INT</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>split_delProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ComplexObject</name> *</type><name>cpx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsid</name></type> <name>asId</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cpx</name> = <call><name>split_get_private</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>cpx</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<name><name>cpx</name>-&gt;<name>isInner</name></name> &amp;&amp; <name><name>cpx</name>-&gt;<name>inner</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* Make sure to define this property on the inner object. */</comment>
        <if>if <condition>(<expr>!<call><name>JS_ValueToId</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>, <argument><expr>&amp;<name>asId</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <return>return <expr><call><name><name>cpx</name>-&gt;<name>inner</name>-&gt;<name>deleteProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>asId</name></expr></argument>, <argument><expr><call><name>Valueify</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>split_enumerate</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>JSIterateOp</name></type> <name>enum_op</name></decl></param>,
                <param><decl><type><name>jsval</name> *</type><name>statep</name></decl></param>, <param><decl><type><name>jsid</name> *</type><name>idp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ComplexObject</name> *</type><name>cpx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>iterator</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>enum_op</name></expr>)</condition> <block>{
      <case>case <expr><name>JSENUMERATE_INIT</name></expr>:
      </case><case>case <expr><name>JSENUMERATE_INIT_ALL</name></expr>:
        <expr_stmt><expr><name>cpx</name> = (<name>ComplexObject</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<name><name>cpx</name>-&gt;<name>isInner</name></name> &amp;&amp; <name><name>cpx</name>-&gt;<name>inner</name></name></expr>)</condition><then>
            <expr_stmt><expr><name>obj</name> = <name><name>cpx</name>-&gt;<name>inner</name></name></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><name>iterator</name> = <call><name>JS_NewPropertyIterator</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>iterator</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

        <expr_stmt><expr>*<name>statep</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>idp</name></expr>)</condition><then>
            <expr_stmt><expr>*<name>idp</name> = <call><name>INT_TO_JSID</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <break>break;</break>

      </case><case>case <expr><name>JSENUMERATE_NEXT</name></expr>:
        <expr_stmt><expr><name>iterator</name> = (<name>JSObject</name>*)<call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr>*<name>statep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>JS_NextProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

        <if>if <condition>(<expr>!<call><name>JSID_IS_VOID</name><argument_list>(<argument><expr>*<name>idp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <break>break;</break></then></if>
        <comment type="block">/* Fall through. */</comment>

      </case><case>case <expr><name>JSENUMERATE_DESTROY</name></expr>:
        <comment type="block">/* Let GC at our iterator object. */</comment>
        <expr_stmt><expr>*<name>statep</name> = <name>JSVAL_NULL</name></expr>;</expr_stmt>
        <break>break;</break>
    </case>}</block></switch>

    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>ResolveClass</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>JSBool</name> *</type><name>resolved</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<call><name>JS_ResolveStandardClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>resolved</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!*<name>resolved</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>JSID_IS_ATOM</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><call><name>CLASS_ATOM</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>Reflect</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name>js_InitReflectClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <expr_stmt><expr>*<name>resolved</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>split_resolve</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>flags</name></decl></param>, <param><decl><type><name>JSObject</name> **</type><name>objp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ComplexObject</name> *</type><name>cpx</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>JSID_IS_ATOM</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> &amp;&amp;
        !<call><name>strcmp</name><argument_list>(<argument><expr><call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><call><name>JSID_TO_STRING</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"isInner"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>objp</name> = <name>obj</name></expr>;</expr_stmt>
        <return>return <expr><call><name>JS_DefineProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>"isInner"</expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><name>JSPROP_SHARED</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>cpx</name> = <call><name>split_get_private</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>cpx</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<name><name>cpx</name>-&gt;<name>isInner</name></name> &amp;&amp; <name><name>cpx</name>-&gt;<name>inner</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>
        <return>return <expr><call><name><name>cpx</name>-&gt;<name>inner</name>-&gt;<name>lookupProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>objp</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LAZY_STANDARD_CLASSES</name></cpp:ifdef>
    <if>if <condition>(<expr>!(<name>flags</name> &amp; <name>JSRESOLVE_ASSIGNING</name>)</expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>JSBool</name></type> <name>resolved</name></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<call><name>ResolveClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>resolved</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

        <if>if <condition>(<expr><name>resolved</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>objp</name> = <name>obj</name></expr>;</expr_stmt>
            <return>return <expr><name>JS_TRUE</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* XXX For additional realism, let's resolve some random property here. */</comment>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>split_finalize</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>split_mark</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ComplexObject</name> *</type><name>cpx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cpx</name> = (<name>ComplexObject</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name><name>cpx</name>-&gt;<name>isInner</name></name> &amp;&amp; <name><name>cpx</name>-&gt;<name>inner</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* Mark the inner object. */</comment>
        <expr_stmt><expr><call><name>JS_MarkGCThing</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>cpx</name>-&gt;<name>inner</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"ComplexObject.inner"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSObject</name> *</type>
<name>split_outerObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ComplexObject</name> *</type><name>cpx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cpx</name> = (<name>ComplexObject</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>cpx</name>-&gt;<name>isInner</name></name> ? <name><name>cpx</name>-&gt;<name>outer</name></name> : <name>obj</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSObject</name> *</type>
<name>split_thisObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>OBJ_TO_OUTER_OBJECT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><name>obj</name></expr>;</return>
}</block></function>


<function_decl><type><specifier>static</specifier> <name>JSBool</name></type>
<name>split_equality</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>jsval</name> *</type><name>v</name></decl></param>, <param><decl><type><name>JSBool</name> *</type><name>bp</name></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>JSObject</name> *</type>
<name>split_innerObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ComplexObject</name> *</type><name>cpx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cpx</name> = (<name>ComplexObject</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>cpx</name>-&gt;<name>frozen</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name><name>cpx</name>-&gt;<name>isInner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>obj</name></expr>;</return>
    }</block></then></if>
    <return>return <expr>!<name><name>cpx</name>-&gt;<name>isInner</name></name> ? <name><name>cpx</name>-&gt;<name>inner</name></name> : <name>obj</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>Class</name></type> <name>split_global_class</name> <init>= <expr><block>{
    <expr>"split_global"</expr>,
    <expr><name>JSCLASS_NEW_RESOLVE</name> | <name>JSCLASS_NEW_ENUMERATE</name> | <name>JSCLASS_HAS_PRIVATE</name> | <name>JSCLASS_GLOBAL_FLAGS</name></expr>,
    <expr><call><name>Valueify</name><argument_list>(<argument><expr><name>split_addProperty</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Valueify</name><argument_list>(<argument><expr><name>split_delProperty</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Valueify</name><argument_list>(<argument><expr><name>split_getProperty</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Valueify</name><argument_list>(<argument><expr><name>split_setProperty</name></expr></argument>)</argument_list></call></expr>,
    <expr>(<name>JSEnumerateOp</name>)<name>split_enumerate</name></expr>,
    <expr>(<name>JSResolveOp</name>)<name>split_resolve</name></expr>,
    <expr><name>ConvertStub</name></expr>,
    <expr><name>split_finalize</name></expr>,
    <expr><name>NULL</name></expr>,           <comment type="block">/* reserved0   */</comment>
    <expr><name>NULL</name></expr>,           <comment type="block">/* checkAccess */</comment>
    <expr><name>NULL</name></expr>,           <comment type="block">/* call        */</comment>
    <expr><name>NULL</name></expr>,           <comment type="block">/* construct   */</comment>
    <expr><name>NULL</name></expr>,           <comment type="block">/* xdrObject   */</comment>
    <expr><name>NULL</name></expr>,           <comment type="block">/* hasInstance */</comment>
    <expr><name>split_mark</name></expr>,
    <expr><block>{
        <expr><call><name>Valueify</name><argument_list>(<argument><expr><name>split_equality</name></expr></argument>)</argument_list></call></expr>,
        <expr><name>split_outerObject</name></expr>,
        <expr><name>split_innerObject</name></expr>,
        <expr><name>NULL</name></expr>, <comment type="block">/* iteratorObject */</comment>
        <expr><name>NULL</name></expr>, <comment type="block">/* wrappedObject  */</comment>
    }</block></expr>,
    <expr><block>{
        <expr><name>NULL</name></expr>, <comment type="block">/* lookupProperty */</comment>
        <expr><name>NULL</name></expr>, <comment type="block">/* defineProperty */</comment>
        <expr><name>NULL</name></expr>, <comment type="block">/* getProperty    */</comment>
        <expr><name>NULL</name></expr>, <comment type="block">/* setProperty    */</comment>
        <expr><name>NULL</name></expr>, <comment type="block">/* getAttributes  */</comment>
        <expr><name>NULL</name></expr>, <comment type="block">/* setAttributes  */</comment>
        <expr><name>NULL</name></expr>, <comment type="block">/* deleteProperty */</comment>
        <expr><name>NULL</name></expr>, <comment type="block">/* enumerate      */</comment>
        <expr><name>NULL</name></expr>, <comment type="block">/* typeOf         */</comment>
        <expr><name>NULL</name></expr>, <comment type="block">/* trace          */</comment>
        <expr><name>NULL</name></expr>, <comment type="block">/* fix            */</comment>
        <expr><name>split_thisObject</name></expr>,
        <expr><name>NULL</name></expr>, <comment type="block">/* clear          */</comment>
    }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>split_equality</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>jsval</name> *</type><name>v</name></decl></param>, <param><decl><type><name>JSBool</name> *</type><name>bp</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>bp</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr>*<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj2</name> <init>= <expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr>*<name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>obj2</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call> != &amp;<name>split_global_class</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>ComplexObject</name> *</type><name>cpx</name> <init>= <expr>(<name>ComplexObject</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name><name>cpx</name>-&gt;<name>isInner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ComplexObject</name> *</type><name>ourCpx</name> <init>= <expr>(<name>ComplexObject</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name><name>ourCpx</name>-&gt;<name>isInner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr>*<name>bp</name> = (<name>cpx</name> == <name>ourCpx</name>)</expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>split_create_outer</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ComplexObject</name> *</type><name>cpx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cpx</name> = (<name>ComplexObject</name> *) <call><name>JS_malloc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>sizeof *<name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>cpx</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>cpx</name>-&gt;<name>isInner</name></name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cpx</name>-&gt;<name>frozen</name></name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cpx</name>-&gt;<name>inner</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cpx</name>-&gt;<name>outer</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>obj</name> = <call><name>JS_NewGlobalObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>Jsvalify</name><argument_list>(<argument><expr>&amp;<name>split_global_class</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cpx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name>JS_SetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>cpx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cpx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>obj</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSObject</name> *</type>
<name>split_create_inner</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>outer</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ComplexObject</name> *</type><name>cpx</name></decl>, *<decl><type ref="prev"/><name>outercpx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name><name>outer</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call> == &amp;<name>split_global_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cpx</name> = (<name>ComplexObject</name> *) <call><name>JS_malloc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>sizeof *<name>cpx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>cpx</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>cpx</name>-&gt;<name>isInner</name></name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cpx</name>-&gt;<name>frozen</name></name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cpx</name>-&gt;<name>inner</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cpx</name>-&gt;<name>outer</name></name> = <name>outer</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>obj</name> = <call><name>JS_NewGlobalObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>Jsvalify</name><argument_list>(<argument><expr>&amp;<name>split_global_class</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name> || !<call><name>JS_SetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>cpx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cpx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>outercpx</name> = (<name>ComplexObject</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>outercpx</name>-&gt;<name>inner</name></name> = <name>obj</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>outercpx</name>-&gt;<name>frozen</name></name> = <name>JS_FALSE</name></expr>;</expr_stmt>

    <return>return <expr><name>obj</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>ComplexObject</name> *</type>
<name>split_get_private</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <do>do <block>{
        <if>if <condition>(<expr><call><name><name>obj</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call> == &amp;<name>split_global_class</name></expr>)</condition><then>
            <return>return <expr>(<name>ComplexObject</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        <expr_stmt><expr><name>obj</name> = <call><name>JS_GetParent</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> while <condition>(<expr><name>obj</name></expr>)</condition>;</do>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>sandbox_enumerate</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>b</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>JS_GetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>"lazy"</expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>JS_ValueToBoolean</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr>&amp;<name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>!<name>b</name> || <call><name>JS_EnumerateStandardClasses</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>sandbox_resolve</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>flags</name></decl></param>,
                <param><decl><type><name>JSObject</name> **</type><name>objp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>resolved</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>JS_GetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>"lazy"</expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>JS_ValueToBoolean</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr>&amp;<name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>b</name> &amp;&amp; (<name>flags</name> &amp; <name>JSRESOLVE_ASSIGNING</name>) == 0</expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name>ResolveClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>resolved</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <if>if <condition>(<expr><name>resolved</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>objp</name> = <name>obj</name></expr>;</expr_stmt>
            <return>return <expr><name>JS_TRUE</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>
    <expr_stmt><expr>*<name>objp</name> = <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>JSClass</name></type> <name>sandbox_class</name> <init>= <expr><block>{
    <expr>"sandbox"</expr>,
    <expr><name>JSCLASS_NEW_RESOLVE</name> | <name>JSCLASS_GLOBAL_FLAGS</name></expr>,
    <expr><name>JS_PropertyStub</name></expr>,   <expr><name>JS_PropertyStub</name></expr>,
    <expr><name>JS_PropertyStub</name></expr>,   <expr><name>JS_PropertyStub</name></expr>,
    <expr><name>sandbox_enumerate</name></expr>, <expr>(<name>JSResolveOp</name>)<name>sandbox_resolve</name></expr>,
    <expr><name>JS_ConvertStub</name></expr>,    <expr><name>NULL</name></expr>,
    <expr><name>JSCLASS_NO_OPTIONAL_MEMBERS</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>JSObject</name> *</type>
<name>NewSandbox</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>bool</name></type> <name>lazy</name></decl></param>, <param><decl><type><name>bool</name></type> <name>split</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name> <init>= <expr><call><name>JS_NewCompartmentAndGlobalObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>sandbox_class</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <block>{
        <decl_stmt><decl><type><name>JSAutoEnterCompartment</name></type> <name>ac</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>ac</name>.<name>enter</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>

        <if>if <condition>(<expr><name>split</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>obj</name> = <call><name>split_setup</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>lazy</name> &amp;&amp; !<call><name>JS_InitStandardClasses</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>

        <decl_stmt><decl><type><name>AutoValueRooter</name></type> <name>root</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>BooleanValue</name><argument_list>(<argument><expr><name>lazy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name>JS_SetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>"lazy"</expr></argument>, <argument><expr><call><name><name>root</name>.<name>jsval_addr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>

        <if>if <condition>(<expr><name>split</name></expr>)</condition><then>
            <expr_stmt><expr><name>obj</name> = <call><name>split_outerObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block>

    <function_decl><type><name>AutoObjectRooter</name></type> <name>objroot</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>obj</name></type></decl></param>)</parameter_list>;</function_decl>
    <if>if <condition>(<expr>!<call><name><name>cx</name>-&gt;<name>compartment</name>-&gt;<name>wrap</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name><name>objroot</name>.<name>addr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><call><name><name>objroot</name>.<name>object</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>EvalInContext</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>sobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>JS_ConvertArguments</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"S / o"</expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>sobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>

    <decl_stmt><decl><type><specifier>const</specifier> <name>jschar</name> *</type><name>src</name> <init>= <expr><call><name>JS_GetStringChars</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>srclen</name> <init>= <expr><call><name>JS_GetStringLength</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>split</name> <init>= <expr>false</expr></init>, <name>lazy</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>srclen</name> == 4</expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>src</name><index>[<expr>0</expr>]</index></name> == 'l' &amp;&amp; <name><name>src</name><index>[<expr>1</expr>]</index></name> == 'a' &amp;&amp; <name><name>src</name><index>[<expr>2</expr>]</index></name> == 'z' &amp;&amp; <name><name>src</name><index>[<expr>3</expr>]</index></name> == 'y'</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>lazy</name> = true</expr>;</expr_stmt>
            <expr_stmt><expr><name>srclen</name> = 0</expr>;</expr_stmt>
        }</block></then></if>
    }</block></then> <else>else <if>if <condition>(<expr><name>srclen</name> == 5</expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>src</name><index>[<expr>0</expr>]</index></name> == 's' &amp;&amp; <name><name>src</name><index>[<expr>1</expr>]</index></name> == 'p' &amp;&amp; <name><name>src</name><index>[<expr>2</expr>]</index></name> == 'l' &amp;&amp; <name><name>src</name><index>[<expr>3</expr>]</index></name> == 'i' &amp;&amp; <name><name>src</name><index>[<expr>4</expr>]</index></name> == 't'</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>split</name> = <name>lazy</name> = true</expr>;</expr_stmt>
            <expr_stmt><expr><name>srclen</name> = 0</expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if></else></if>

    <if>if <condition>(<expr>!<name>sobj</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>sobj</name> = <call><name>NewSandbox</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>lazy</name></expr></argument>, <argument><expr><name>split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>sobj</name></expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
    }</block></then></if>

    <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>sobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>srclen</name> == 0</expr>)</condition><then>
        <return>return <expr>true</expr>;</return></then></if>

    <decl_stmt><decl><type><name>JSStackFrame</name> *</type><name>fp</name> <init>= <expr><call><name>JS_GetScriptedCaller</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <block>{
        <decl_stmt><decl><type><name>JSAutoEnterCompartment</name></type> <name>ac</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>JSCrossCompartmentWrapper</name>::<name>isCrossCompartmentWrapper</name></name><argument_list>(<argument><expr><name>sobj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>sobj</name> = <call><name><name>sobj</name>-&gt;<name>unwrap</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name><name>ac</name>.<name>enter</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>sobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr>false</expr>;</return></then></if>
        }</block></then></if>

        <expr_stmt><expr><call><name>OBJ_TO_INNER_OBJECT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>sobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>sobj</name></expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>
        <if>if <condition>(<expr>!(<call><name><name>sobj</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call>-&gt;<name>flags</name> &amp; <name>JSCLASS_IS_GLOBAL</name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"Invalid scope argument to evalcx"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>JS_EvaluateUCScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>sobj</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srclen</name></expr></argument>,
                                 <argument><expr><call><name><name>fp</name>-&gt;<name>script</name></name><argument_list>()</argument_list></call>-&gt;<name>filename</name></expr></argument>,
                                 <argument><expr><call><name>JS_PCToLineNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name><name>fp</name>-&gt;<name>script</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>fp</name>-&gt;<name>pc</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
    }</block>
    <return>return <expr><call><name><name>cx</name>-&gt;<name>compartment</name>-&gt;<name>wrap</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>Valueify</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>EvalInFrame</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name> *</type><name>argv</name> <init>= <expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>argc</name> &lt; 2 ||
        !<call><name>JSVAL_IS_INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call> ||
        !<call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"Invalid arguments to evalInFrame"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>uint32</name></type> <name>upCount</name> <init>= <expr><call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name> <init>= <expr><call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>saveCurrent</name> <init>= <expr>(<name>argc</name> &gt;= 3 &amp;&amp; <call><name>JSVAL_IS_BOOLEAN</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call>)
                        ? !!(<call><name>JSVAL_TO_BOOLEAN</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call>)
                        : false</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name><name>cx</name>-&gt;<name>hasfp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>FrameRegsIter</name></type> <name>fi</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>)</parameter_list>;</function_decl>
    <for>for (<init><decl><type><name>uint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>upCount</name></expr>;</condition> <incr><expr>++<name>i</name></expr>, <expr>++<name>fi</name></expr></incr>) <block>{
        <if>if <condition>(<expr>!<call><name><name>fi</name>.<name>fp</name></name><argument_list>()</argument_list></call>-&gt;<call><name>prev</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <break>break;</break></then></if>
    }</block></for>

    <decl_stmt><decl><type><name>JSStackFrame</name> *<specifier>const</specifier></type> <name>fp</name> <init>= <expr><call><name><name>fi</name>.<name>fp</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>JS_IsScriptFrame</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"cannot eval in non-script frame"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>JSStackFrame</name> *</type><name>oldfp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>saveCurrent</name></expr>)</condition><then>
        <expr_stmt><expr><name>oldfp</name> = <call><name>JS_SaveFrameChain</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name> <init>= <expr><call><name>JS_EvaluateUCInStackFrame</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><call><name><name>str</name>-&gt;<name>chars</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>str</name>-&gt;<name>length</name></name><argument_list>()</argument_list></call></expr></argument>,
                                          <argument><expr><call><name><name>fp</name>-&gt;<name>script</name></name><argument_list>()</argument_list></call>-&gt;<name>filename</name></expr></argument>,
                                          <argument><expr><call><name>JS_PCToLineNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name><name>fp</name>-&gt;<name>script</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                            <argument><expr><call><name><name>fi</name>.<name>pc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                          <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>saveCurrent</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_RestoreFrameChain</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>oldfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <return>return <expr><name>ok</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>ShapeOf</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name> <init>= <expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"shapeOf: object expected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name> <init>= <expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>vp</name> = <name>JSVAL_ZERO</name></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>isNative</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>vp</name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name>JS_NewNumberValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name><name>obj</name>-&gt;<name>shape</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>

<comment type="block">/*
 * Check that t1 comes strictly before t2. The function correctly deals with
 * PRIntervalTime wrap-around between t2 and t1 assuming that t2 and t1 stays
 * within INT32_MAX from each other. We use MAX_TIMEOUT_INTERVAL to enforce
 * this restriction.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>IsBefore</name><parameter_list>(<param><decl><type><name>PRIntervalTime</name></type> <name>t1</name></decl></param>, <param><decl><type><name>PRIntervalTime</name></type> <name>t2</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>int32</name><argument_list>(<argument><expr><name>t1</name> - <name>t2</name></expr></argument>)</argument_list></call> &lt; 0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Sleep_fn</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PRIntervalTime</name></type> <name>t_ticks</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>argc</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>t_ticks</name> = 0</expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name>jsdouble</name></type> <name>t_secs</name></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<call><name>JS_ValueToNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>argc</name> == 0 ? <name>JSVAL_VOID</name> : <name><name>vp</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>t_secs</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

        <comment type="block">/* NB: The next condition also filter out NaNs. */</comment>
        <if>if <condition>(<expr>!(<name>t_secs</name> &lt;= <name>MAX_TIMEOUT_INTERVAL</name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"Excessive sleep interval"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>t_ticks</name> = (<name>t_secs</name> &lt;= 0.0)
                  ? 0
                  : <call><name>PRIntervalTime</name><argument_list>(<argument><expr><call><name>PR_TicksPerSecond</name><argument_list>()</argument_list></call> * <name>t_secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <if>if <condition>(<expr><name>t_ticks</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_YieldRequest</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <function_decl><type><name>JSAutoSuspendRequest</name></type> <name>suspended</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name>PR_Lock</name><argument_list>(<argument><expr><name>gWatchdogLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PRIntervalTime</name></type> <name>to_wakeup</name> <init>= <expr><call><name>PR_IntervalNow</name><argument_list>()</argument_list></call> + <name>t_ticks</name></expr></init></decl>;</decl_stmt>
        <for>for (<init>;</init><condition>;</condition><incr/>) <block>{
            <expr_stmt><expr><call><name>PR_WaitCondVar</name><argument_list>(<argument><expr><name>gSleepWakeup</name></expr></argument>, <argument><expr><name>t_ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>gCanceled</name></expr>)</condition><then>
                <break>break;</break></then></if>
            <decl_stmt><decl><type><name>PRIntervalTime</name></type> <name>now</name> <init>= <expr><call><name>PR_IntervalNow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name>IsBefore</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>to_wakeup</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <break>break;</break></then></if>
            <expr_stmt><expr><name>t_ticks</name> = <name>to_wakeup</name> - <name>now</name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>PR_Unlock</name><argument_list>(<argument><expr><name>gWatchdogLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr>!<name>gCanceled</name></expr>;</return>
}</block></function>

<typedef>typedef <type>struct <name>ScatterThreadData</name></type> <name>ScatterThreadData</name>;</typedef>
<typedef>typedef <type>struct <name>ScatterData</name></type> <name>ScatterData</name>;</typedef>

<typedef>typedef <type><enum>enum <name>ScatterStatus</name> <block>{
    <decl><name>SCATTER_WAIT</name></decl>,
    <decl><name>SCATTER_GO</name></decl>,
    <decl><name>SCATTER_CANCEL</name></decl>
}</block></enum></type> <name>ScatterStatus</name>;</typedef>

<struct>struct <name>ScatterData</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>ScatterThreadData</name>   *</type><name>threads</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name>               *</type><name>results</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRLock</name>              *</type><name>lock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRCondVar</name>           *</type><name>cvar</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScatterStatus</name></type>       <name>status</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<struct>struct <name>ScatterThreadData</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>jsint</name></type>               <name>index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScatterData</name>         *</type><name>shared</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRThread</name>            *</type><name>thr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSContext</name>           *</type><name>cx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type>               <name>fn</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DoScatteredWork</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>ScatterThreadData</name> *</type><name>td</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name> *</type><name>rval</name> <init>= <expr>&amp;<name><name>td</name>-&gt;<name>shared</name>-&gt;<name>results</name><index>[<expr><name><name>td</name>-&gt;<name>index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>JS_CallFunctionValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>td</name>-&gt;<name>fn</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>rval</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_GetPendingException</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ClearPendingException</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>RunScatterThread</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>stackDummy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScatterThreadData</name> *</type><name>td</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScatterStatus</name></type> <name>st</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>PR_FAILURE</name> == <call><name>PR_SetThreadPrivate</name><argument_list>(<argument><expr><name>gStackBaseThreadIndex</name></expr></argument>, <argument><expr>&amp;<name>stackDummy</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return;</return></then></if>

    <expr_stmt><expr><name>td</name> = (<name>ScatterThreadData</name> *)<name>arg</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cx</name> = <name><name>td</name>-&gt;<name>cx</name></name></expr>;</expr_stmt>

    <comment type="block">/* Wait for our signal. */</comment>
    <expr_stmt><expr><call><name>PR_Lock</name><argument_list>(<argument><expr><name><name>td</name>-&gt;<name>shared</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr>(<name>st</name> = <name><name>td</name>-&gt;<name>shared</name>-&gt;<name>status</name></name>) == <name>SCATTER_WAIT</name></expr>)</condition>
        <expr_stmt><expr><call><name>PR_WaitCondVar</name><argument_list>(<argument><expr><name><name>td</name>-&gt;<name>shared</name>-&gt;<name>cvar</name></name></expr></argument>, <argument><expr><name>PR_INTERVAL_NO_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
    <expr_stmt><expr><call><name>PR_Unlock</name><argument_list>(<argument><expr><name><name>td</name>-&gt;<name>shared</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>st</name> == <name>SCATTER_CANCEL</name></expr>)</condition><then>
        <return>return;</return></then></if>

    <comment type="block">/* We are good to go. */</comment>
    <expr_stmt><expr><call><name>JS_SetContextThread</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_SetNativeStackQuota</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>gMaxStackSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_BeginRequest</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DoScatteredWork</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_EndRequest</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ClearContextThread</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * scatter(fnArray) - Call each function in `fnArray` without arguments, each
 * in a different thread. When all threads have finished, return an array: the
 * return values. Errors are not propagated; if any of the function calls
 * fails, the corresponding element in the results array gets the exception
 * object, if any, else (undefined).
 */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Scatter</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsuint</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsuint</name></type> <name>n</name></decl>;</decl_stmt>  <comment type="block">/* number of threads */</comment>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>inArr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>arr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>global</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScatterData</name></type> <name>sd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>sd</name>.<name>lock</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sd</name>.<name>cvar</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sd</name>.<name>results</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sd</name>.<name>threads</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sd</name>.<name>status</name></name> = <name>SCATTER_WAIT</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>argc</name> == 0 || <call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"the first argument must be an object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>fail</name>;</goto>
    }</block></then></if>

    <expr_stmt><expr><name>inArr</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>JS_GetArrayLength</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>inArr</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <goto>goto <name>out</name>;</goto></then></if>
    <if>if <condition>(<expr><name>n</name> == 0</expr>)</condition><then>
        <goto>goto <name>success</name>;</goto></then></if>

    <expr_stmt><expr><name><name>sd</name>.<name>lock</name></name> = <call><name>PR_NewLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>sd</name>.<name>lock</name></name></expr>)</condition><then>
        <goto>goto <name>fail</name>;</goto></then></if>

    <expr_stmt><expr><name><name>sd</name>.<name>cvar</name></name> = <call><name>PR_NewCondVar</name><argument_list>(<argument><expr><name><name>sd</name>.<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>sd</name>.<name>cvar</name></name></expr>)</condition><then>
        <goto>goto <name>fail</name>;</goto></then></if>

    <expr_stmt><expr><name><name>sd</name>.<name>results</name></name> = (<name>jsval</name> *) <call><name>malloc</name><argument_list>(<argument><expr><name>n</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>jsval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>sd</name>.<name>results</name></name></expr>)</condition><then>
        <goto>goto <name>fail</name>;</goto></then></if>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name><name>sd</name>.<name>results</name><index>[<expr><name>i</name></expr>]</index></name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ok</name> = <call><name>JS_AddValueRoot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>sd</name>.<name>results</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then> <block>{
            <while>while <condition>(<expr><name>i</name>-- &gt; 0</expr>)</condition>
                <expr_stmt><expr><call><name>JS_RemoveValueRoot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>sd</name>.<name>results</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sd</name>.<name>results</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sd</name>.<name>results</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <goto>goto <name>fail</name>;</goto>
        }</block></then></if>
    }</block></for>

    <expr_stmt><expr><name><name>sd</name>.<name>threads</name></name> = (<name>ScatterThreadData</name> *) <call><name>malloc</name><argument_list>(<argument><expr><name>n</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>ScatterThreadData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>sd</name>.<name>threads</name></name></expr>)</condition><then>
        <goto>goto <name>fail</name>;</goto></then></if>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name><name>sd</name>.<name>threads</name><index>[<expr><name>i</name></expr>]</index></name>.<name>index</name> = <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sd</name>.<name>threads</name><index>[<expr><name>i</name></expr>]</index></name>.<name>shared</name> = &amp;<name>sd</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sd</name>.<name>threads</name><index>[<expr><name>i</name></expr>]</index></name>.<name>thr</name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sd</name>.<name>threads</name><index>[<expr><name>i</name></expr>]</index></name>.<name>cx</name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sd</name>.<name>threads</name><index>[<expr><name>i</name></expr>]</index></name>.<name>fn</name> = <name>JSVAL_NULL</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>ok</name> = <call><name>JS_AddValueRoot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>sd</name>.<name>threads</name><index>[<expr><name>i</name></expr>]</index></name>.<name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>ok</name> &amp;&amp; !<call><name>JS_GetElement</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>inArr</name></expr></argument>, <argument><expr>(<name>jsint</name>) <name>i</name></expr></argument>, <argument><expr>&amp;<name><name>sd</name>.<name>threads</name><index>[<expr><name>i</name></expr>]</index></name>.<name>fn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_RemoveValueRoot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>sd</name>.<name>threads</name><index>[<expr><name>i</name></expr>]</index></name>.<name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then> <block>{
            <while>while <condition>(<expr><name>i</name>-- &gt; 0</expr>)</condition>
                <expr_stmt><expr><call><name>JS_RemoveValueRoot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>sd</name>.<name>threads</name><index>[<expr><name>i</name></expr>]</index></name>.<name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sd</name>.<name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sd</name>.<name>threads</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <goto>goto <name>fail</name>;</goto>
        }</block></then></if>
    }</block></for>

    <expr_stmt><expr><name>global</name> = <call><name>JS_GetGlobalObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>JSContext</name> *</type><name>newcx</name> <init>= <expr><call><name>NewContext</name><argument_list>(<argument><expr><call><name>JS_GetRuntime</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>newcx</name></expr>)</condition><then>
            <goto>goto <name>fail</name>;</goto></then></if>

        <block>{
            <function_decl><type><name>JSAutoRequest</name></type> <name>req</name><parameter_list>(<param><decl><type><name>newcx</name></type></decl></param>)</parameter_list>;</function_decl>
            <expr_stmt><expr><call><name>JS_SetGlobalObject</name><argument_list>(<argument><expr><name>newcx</name></expr></argument>, <argument><expr><name>global</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <expr_stmt><expr><call><name>JS_ClearContextThread</name><argument_list>(<argument><expr><name>newcx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sd</name>.<name>threads</name><index>[<expr><name>i</name></expr>]</index></name>.<name>cx</name> = <name>newcx</name></expr>;</expr_stmt>
    }</block></for>

    <for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>PRThread</name> *</type><name>t</name> <init>= <expr><call><name>PR_CreateThread</name><argument_list>(<argument><expr><name>PR_USER_THREAD</name></expr></argument>,
                                      <argument><expr><name>RunScatterThread</name></expr></argument>,
                                      <argument><expr>&amp;<name><name>sd</name>.<name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                      <argument><expr><name>PR_PRIORITY_NORMAL</name></expr></argument>,
                                      <argument><expr><name>PR_GLOBAL_THREAD</name></expr></argument>,
                                      <argument><expr><name>PR_JOINABLE_THREAD</name></expr></argument>,
                                      <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>t</name></expr>)</condition><then> <block>{
            <comment type="block">/* Failed to start thread. */</comment>
            <expr_stmt><expr><call><name>PR_Lock</name><argument_list>(<argument><expr><name><name>sd</name>.<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sd</name>.<name>status</name></name> = <name>SCATTER_CANCEL</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PR_NotifyAllCondVar</name><argument_list>(<argument><expr><name><name>sd</name>.<name>cvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PR_Unlock</name><argument_list>(<argument><expr><name><name>sd</name>.<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><name>i</name>-- &gt; 1</expr>)</condition>
                <expr_stmt><expr><call><name>PR_JoinThread</name><argument_list>(<argument><expr><name><name>sd</name>.<name>threads</name><index>[<expr><name>i</name></expr>]</index></name>.<name>thr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
            <goto>goto <name>fail</name>;</goto>
        }</block></then></if>

        <expr_stmt><expr><name><name>sd</name>.<name>threads</name><index>[<expr><name>i</name></expr>]</index></name>.<name>thr</name> = <name>t</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>PR_Lock</name><argument_list>(<argument><expr><name><name>sd</name>.<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sd</name>.<name>status</name></name> = <name>SCATTER_GO</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PR_NotifyAllCondVar</name><argument_list>(<argument><expr><name><name>sd</name>.<name>cvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PR_Unlock</name><argument_list>(<argument><expr><name><name>sd</name>.<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>DoScatteredWork</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>sd</name>.<name>threads</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block>{
        <function_decl><type><name>JSAutoSuspendRequest</name></type> <name>suspended</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>)</parameter_list>;</function_decl>
        <for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>PR_JoinThread</name><argument_list>(<argument><expr><name><name>sd</name>.<name>threads</name><index>[<expr><name>i</name></expr>]</index></name>.<name>thr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block>

<label><name>success</name>:</label>
    <expr_stmt><expr><name>arr</name> = <call><name>JS_NewArrayObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>sd</name>.<name>results</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>arr</name></expr>)</condition><then>
        <goto>goto <name>fail</name>;</goto></then></if>
    <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>

<label><name>out</name>:</label>
    <if>if <condition>(<expr><name><name>sd</name>.<name>threads</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>JSContext</name> *</type><name>acx</name></decl>;</decl_stmt>

        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>JS_RemoveValueRoot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>sd</name>.<name>threads</name><index>[<expr><name>i</name></expr>]</index></name>.<name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>acx</name> = <name><name>sd</name>.<name>threads</name><index>[<expr><name>i</name></expr>]</index></name>.<name>cx</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>acx</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>JS_SetContextThread</name><argument_list>(<argument><expr><name>acx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>DestroyContext</name><argument_list>(<argument><expr><name>acx</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sd</name>.<name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>sd</name>.<name>results</name></name></expr>)</condition><then> <block>{
        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <expr_stmt><expr><call><name>JS_RemoveValueRoot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>sd</name>.<name>results</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sd</name>.<name>results</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>sd</name>.<name>cvar</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>PR_DestroyCondVar</name><argument_list>(<argument><expr><name><name>sd</name>.<name>cvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name><name>sd</name>.<name>lock</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>PR_DestroyLock</name><argument_list>(<argument><expr><name><name>sd</name>.<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <return>return <expr><name>ok</name></expr>;</return>

<label><name>fail</name>:</label>
    <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    <goto>goto <name>out</name>;</goto>
}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>InitWatchdog</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name>gWatchdogThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gWatchdogLock</name> = <call><name>PR_NewLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>gWatchdogLock</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>gWatchdogWakeup</name> = <call><name>PR_NewCondVar</name><argument_list>(<argument><expr><name>gWatchdogLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>gWatchdogWakeup</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>gSleepWakeup</name> = <call><name>PR_NewCondVar</name><argument_list>(<argument><expr><name>gWatchdogLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>gSleepWakeup</name></expr>)</condition><then>
                <return>return <expr>true</expr>;</return></then></if>
            <expr_stmt><expr><call><name>PR_DestroyCondVar</name><argument_list>(<argument><expr><name>gWatchdogWakeup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>PR_DestroyLock</name><argument_list>(<argument><expr><name>gWatchdogLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr>false</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>KillWatchdog</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PRThread</name> *</type><name>thread</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>PR_Lock</name><argument_list>(<argument><expr><name>gWatchdogLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>thread</name> = <name>gWatchdogThread</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>thread</name></expr>)</condition><then> <block>{
        <comment type="block">/*
         * The watchdog thread is running, tell it to terminate waking it up
         * if necessary.
         */</comment>
        <expr_stmt><expr><name>gWatchdogThread</name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PR_NotifyCondVar</name><argument_list>(<argument><expr><name>gWatchdogWakeup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>PR_Unlock</name><argument_list>(<argument><expr><name>gWatchdogLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>thread</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>PR_JoinThread</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>PR_DestroyCondVar</name><argument_list>(<argument><expr><name>gSleepWakeup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PR_DestroyCondVar</name><argument_list>(<argument><expr><name>gWatchdogWakeup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PR_DestroyLock</name><argument_list>(<argument><expr><name>gWatchdogLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>WatchdogMain</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSRuntime</name> *</type><name>rt</name> <init>= <expr>(<name>JSRuntime</name> *) <name>arg</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>PR_Lock</name><argument_list>(<argument><expr><name>gWatchdogLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>gWatchdogThread</name></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>PRIntervalTime</name></type> <name>now</name> <init>= <expr><call><name>PR_IntervalNow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
         <if>if <condition>(<expr><name>gWatchdogHasTimeout</name> &amp;&amp; !<call><name>IsBefore</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>gWatchdogTimeout</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="block">/*
             * The timeout has just expired. Trigger the operation callback
             * outside the lock.
             */</comment>
            <expr_stmt><expr><name>gWatchdogHasTimeout</name> = false</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PR_Unlock</name><argument_list>(<argument><expr><name>gWatchdogLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CancelExecution</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PR_Lock</name><argument_list>(<argument><expr><name>gWatchdogLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Wake up any threads doing sleep. */</comment>
            <expr_stmt><expr><call><name>PR_NotifyAllCondVar</name><argument_list>(<argument><expr><name>gSleepWakeup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>PRIntervalTime</name></type> <name>sleepDuration</name> <init>= <expr><name>gWatchdogHasTimeout</name>
                                           ? <name>gWatchdogTimeout</name> - <name>now</name>
                                           : <name>PR_INTERVAL_NO_TIMEOUT</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
            <decl_stmt><decl><type><name>PRStatus</name></type> <name>status</name> <init>=
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <expr><call><name>PR_WaitCondVar</name><argument_list>(<argument><expr><name>gWatchdogWakeup</name></expr></argument>, <argument><expr><name>sleepDuration</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>status</name> == <name>PR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><call><name>PR_Unlock</name><argument_list>(<argument><expr><name>gWatchdogLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ScheduleWatchdog</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>, <param><decl><type><name>jsdouble</name></type> <name>t</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>t</name> &lt;= 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PR_Lock</name><argument_list>(<argument><expr><name>gWatchdogLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>gWatchdogHasTimeout</name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PR_Unlock</name><argument_list>(<argument><expr><name>gWatchdogLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>PRIntervalTime</name></type> <name>interval</name> <init>= <expr><call><name>PRIntervalTime</name><argument_list>(<argument><expr><call><name>ceil</name><argument_list>(<argument><expr><name>t</name> * <call><name>PR_TicksPerSecond</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRIntervalTime</name></type> <name>timeout</name> <init>= <expr><call><name>PR_IntervalNow</name><argument_list>()</argument_list></call> + <name>interval</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>PR_Lock</name><argument_list>(<argument><expr><name>gWatchdogLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>gWatchdogThread</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name>gWatchdogHasTimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>gWatchdogThread</name> = <call><name>PR_CreateThread</name><argument_list>(<argument><expr><name>PR_USER_THREAD</name></expr></argument>,
                                          <argument><expr><name>WatchdogMain</name></expr></argument>,
                                          <argument><expr><name>rt</name></expr></argument>,
                                          <argument><expr><name>PR_PRIORITY_NORMAL</name></expr></argument>,
                                          <argument><expr><name>PR_LOCAL_THREAD</name></expr></argument>,
                                          <argument><expr><name>PR_JOINABLE_THREAD</name></expr></argument>,
                                          <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>gWatchdogThread</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PR_Unlock</name><argument_list>(<argument><expr><name>gWatchdogLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
    }</block></then> <else>else <if>if <condition>(<expr>!<name>gWatchdogHasTimeout</name> || <call><name>IsBefore</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>gWatchdogTimeout</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
         <expr_stmt><expr><call><name>PR_NotifyCondVar</name><argument_list>(<argument><expr><name>gWatchdogWakeup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>
    <expr_stmt><expr><name>gWatchdogHasTimeout</name> = true</expr>;</expr_stmt>
    <expr_stmt><expr><name>gWatchdogTimeout</name> = <name>timeout</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PR_Unlock</name><argument_list>(<argument><expr><name>gWatchdogLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !JS_THREADSAFE */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_WIN</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>gTimerHandle</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

<function><type><name>VOID</name> <name>CALLBACK</name></type>
<name>TimerCallback</name><parameter_list>(<param><decl><type><name>PVOID</name></type> <name>lpParameter</name></decl></param>, <param><decl><type><name>BOOLEAN</name></type> <name>TimerOrWaitFired</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>CancelExecution</name><argument_list>(<argument><expr>(<name>JSRuntime</name> *) <name>lpParameter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>AlarmHandler</name><parameter_list>(<param><decl><type><name>int</name></type> <name>sig</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>CancelExecution</name><argument_list>(<argument><expr><name>gRuntime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>InitWatchdog</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>gRuntime</name> = <name>rt</name></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>KillWatchdog</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ScheduleWatchdog</name><argument_list>(<argument><expr><name>gRuntime</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ScheduleWatchdog</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>, <param><decl><type><name>jsdouble</name></type> <name>t</name></decl></param>)</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_WIN</name></cpp:ifdef>
    <if>if <condition>(<expr><name>gTimerHandle</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>DeleteTimerQueueTimer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>gTimerHandle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>gTimerHandle</name> = 0</expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>t</name> &gt; 0 &amp;&amp;
        !<call><name>CreateTimerQueueTimer</name><argument_list>(<argument><expr>&amp;<name>gTimerHandle</name></expr></argument>,
                               <argument><expr><name>NULL</name></expr></argument>,
                               <argument><expr>(<name>WAITORTIMERCALLBACK</name>)<name>TimerCallback</name></expr></argument>,
                               <argument><expr><name>rt</name></expr></argument>,
                               <argument><expr><call><name>DWORD</name><argument_list>(<argument><expr><call><name>ceil</name><argument_list>(<argument><expr><name>t</name> * 1000.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr>0</expr></argument>,
                               <argument><expr><name>WT_EXECUTEINTIMERTHREAD</name> | <name>WT_EXECUTEONLYONCE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>gTimerHandle</name> = 0</expr>;</expr_stmt>
        <return>return <expr>false</expr>;</return>
    }</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* FIXME: use setitimer when available for sub-second resolution. */</comment>
    <if>if <condition>(<expr><name>t</name> &lt;= 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>AlarmHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* set the Alarm signal capture */</comment>
        <expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><call><name>ceil</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr>true</expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !JS_THREADSAFE */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>CancelExecution</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>gCanceled</name> = true</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>gExitCode</name> == 0</expr>)</condition><then>
        <expr_stmt><expr><name>gExitCode</name> = <name>EXITCODE_TIMEOUT</name></expr>;</expr_stmt></then></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <if>if <condition>(<expr><name>gWorkerThreadPool</name></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>js</name>::<name>workers</name>::<name>terminateAll</name></name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>gWorkerThreadPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>JS_TriggerAllOperationCallbacks</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>msg</name><index>[]</index></name> <init>= <expr>"Script runs for too long, terminating.\n"</expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_UNIX</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>JS_THREADSAFE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* It is not safe to call fputs from signals. */</comment>
    <comment type="block">/* Dummy assignment avoids GCC warning on "attribute warn_unused_result" */</comment>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>dummy</name> <init>= <expr><call><name>write</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr>(<name>void</name>)<name>dummy</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>SetTimeoutValue</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsdouble</name></type> <name>t</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* NB: The next condition also filter out NaNs. */</comment>
    <if>if <condition>(<expr>!(<name>t</name> &lt;= <name>MAX_TIMEOUT_INTERVAL</name>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"Excessive timeout value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>gTimeoutInterval</name> = <name>t</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>ScheduleWatchdog</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"Failed to create the watchdog"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Timeout</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>argc</name> == 0</expr>)</condition><then>
        <return>return <expr><call><name>JS_NewNumberValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>gTimeoutInterval</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr><name>argc</name> &gt; 1</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"Wrong number of arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>jsdouble</name></type> <name>t</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>JS_ValueToNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index></expr></argument>, <argument><expr>&amp;<name>t</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr>*<name>vp</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
    <return>return <expr><call><name>SetTimeoutValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Elapsed</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>argc</name> == 0</expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JSShellContextData</name> *</type><name>data</name> <init>= <expr><call><name>GetContextData</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>data</name></expr>)</condition><then>
            <expr_stmt><expr><name>d</name> = <call><name>js_IntervalNow</name><argument_list>()</argument_list></call> - <name><name>data</name>-&gt;<name>startTime</name></name></expr>;</expr_stmt></then></if>
        <return>return <expr><call><name>JS_NewNumberValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"Wrong number of arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_FALSE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Parent</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>argc</name> != 1</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"Wrong number of arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name> <init>= <expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"Only objects have parents!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>JSObject</name> *</type><name>parent</name> <init>= <expr><call><name>JS_GetParent</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Outerize if necessary.  Embrace the ugliness! */</comment>
    <if>if <condition>(<expr><name>parent</name></expr>)</condition><then> <block>{
        <if>if <condition>(<decl><type><name>JSObjectOp</name></type> <name>op</name> <init>= <expr><call><name><name>parent</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call>-&gt;<name><name>ext</name>.<name>outerObject</name></name></expr></init></decl>)</condition><then>
            <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><call><name>op</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_UNIX</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
 * Returns a JS_malloc'd string (that the caller needs to JS_free)
 * containing the directory (non-leaf) part of |from| prepended to |leaf|.
 * If |from| is empty or a leaf, MakeAbsolutePathname returns a copy of leaf.
 * Returns NULL to indicate an error.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> *</type>
<name>MakeAbsolutePathname</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>leaf</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>dirlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>dir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>slash</name> <init>= <expr><name>NULL</name></expr></init>, *<name>cp</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cp</name> = <name>from</name></expr>;</expr_stmt>
    <while>while <condition>(<expr>*<name>cp</name></expr>)</condition> <block>{
        <if>if <condition>(<expr>*<name>cp</name> == '/'</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>slash</name> = <name>cp</name></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr>++<name>cp</name></expr>;</expr_stmt>
    }</block></while>

    <if>if <condition>(<expr>!<name>slash</name></expr>)</condition><then> <block>{
        <comment type="block">/* We were given a leaf or |from| was empty. */</comment>
        <return>return <expr><call><name>JS_strdup</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Else, we were given a real pathname, return that + the leaf. */</comment>
    <expr_stmt><expr><name>dirlen</name> = <name>slash</name> - <name>from</name> + 1</expr>;</expr_stmt>
    <expr_stmt><expr><name>dir</name> = (<name>char</name>*) <call><name>JS_malloc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>dirlen</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>leaf</name></expr></argument>)</argument_list></call> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>dir</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>dirlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dir</name> + <name>dirlen</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Note: we can't use strcat here. */</comment>

    <return>return <expr><name>dir</name></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// XP_UNIX</comment>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Compile</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>argc</name> &lt; 1</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSMSG_MORE_ARGS_NEEDED</name></expr></argument>,
                             <argument><expr>"compile"</expr></argument>, <argument><expr>"0"</expr></argument>, <argument><expr>"s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>jsval</name></type> <name>arg0</name> <init>= <expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>typeName</name> <init>= <expr><call><name>JS_GetTypeName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JS_TypeOfValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"expected string to compile, got %s"</expr></argument>, <argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>JSString</name> *</type><name>scriptContents</name> <init>= <expr><call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScript</name> *</type><name>result</name> <init>= <expr><call><name>JS_CompileUCScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>JS_GetStringCharsZ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>scriptContents</name></expr></argument>)</argument_list></call></expr></argument>,
                                          <argument><expr><call><name>JS_GetStringLength</name><argument_list>(<argument><expr><name>scriptContents</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"&lt;string&gt;"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>JS_DestroyScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Parse</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>argc</name> &lt; 1</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSMSG_MORE_ARGS_NEEDED</name></expr></argument>,
                             <argument><expr>"compile"</expr></argument>, <argument><expr>"0"</expr></argument>, <argument><expr>"s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>jsval</name></type> <name>arg0</name> <init>= <expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>typeName</name> <init>= <expr><call><name>JS_GetTypeName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JS_TypeOfValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"expected string to parse, got %s"</expr></argument>, <argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>JSString</name> *</type><name>scriptContents</name> <init>= <expr><call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name><name>js</name>::<name>Parser</name></name></type> <name>parser</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name><name>parser</name>.<name>init</name></name><argument_list>(<argument><expr><call><name>JS_GetStringCharsZ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>scriptContents</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>JS_GetStringLength</name><argument_list>(<argument><expr><name>scriptContents</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"&lt;string&gt;"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name><name>parser</name>.<name>parse</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Snarf</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pathname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSStackFrame</name> *</type><name>fp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>cc</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> *</type><name>file</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>argc</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>str</name> = <call><name>JS_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>filename</name> = <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Get the currently executing script's name. */</comment>
    <expr_stmt><expr><name>fp</name> = <call><name>JS_GetScriptedCaller</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>fp</name> &amp;&amp; <call><name><name>fp</name>-&gt;<name>script</name></name><argument_list>()</argument_list></call>-&gt;<name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_UNIX</name></cpp:ifdef>
    <expr_stmt><expr><name>pathname</name> = <call><name>MakeAbsolutePathname</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name><name>fp</name>-&gt;<name>script</name></name><argument_list>()</argument_list></call>-&gt;<name>filename</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>pathname</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>pathname</name> = <name>filename</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>buf</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>file</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr>"rb"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>file</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"can't open %s: %s"</expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call> == <name>EOF</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"can't seek end of %s"</expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>len</name> = <call><name>ftell</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> == <name>EOF</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"can't seek start of %s"</expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>buf</name> = (<name>char</name>*) <call><name>JS_malloc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>len</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>buf</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>cc</name> = <call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>cc</name> != <name>len</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"can't read %s: %s"</expr></argument>, <argument><expr><name>pathname</name></expr></argument>,
                                       <argument><expr>(<call><name>ptrdiff_t</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call> &lt; 0) ? <call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call> : "short read"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>len</name> = (<name>size_t</name>)<name>cc</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
            }</block></else></if>
        }</block></else></if>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>void</name>*)<name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ok</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name> = <call><name>JS_NewString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr>*<name>vp</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>JSBool</name></type>
<name>Wrap</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name> <init>= <expr><name>argc</name> &gt; 0 ? <call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index> : <name>JSVAL_VOID</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name> <init>= <expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>wrapped</name> <init>= <expr><call><name><name>JSWrapper</name>::<name>New</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name><name>obj</name>-&gt;<name>getProto</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>obj</name>-&gt;<name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>,
                                       <argument><expr>&amp;<name><name>JSWrapper</name>::<name>singleton</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>wrapped</name></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>

    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>wrapped</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><name>JSBool</name></type>
<name>Serialize</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name> <init>= <expr><name>argc</name> &gt; 0 ? <call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index> : <name>JSVAL_VOID</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64</name> *</type><name>datap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>nbytes</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>JS_WriteStructuredClone</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr>&amp;<name>datap</name></expr></argument>, <argument><expr>&amp;<name>nbytes</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>

    <decl_stmt><decl><type><name>JSObject</name> *</type><name>arrayobj</name> <init>= <expr><call><name>js_CreateTypedArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>TypedArray</name>::<name>TYPE_UINT8</name></name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>arrayobj</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>datap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>false</expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>TypedArray</name> *</type><name>array</name> <init>= <expr><call><name><name>TypedArray</name>::<name>fromJSObject</name></name><argument_list>(<argument><expr><name>arrayobj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>(<call><name>uintptr_t</name><argument_list>(<argument><expr><name><name>array</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call> &amp; 7) == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>array</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>datap</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>datap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>arrayobj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><name>JSBool</name></type>
<name>Deserialize</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name> <init>= <expr><name>argc</name> &gt; 0 ? <call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index> : <name>JSVAL_VOID</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> || !<call><name>js_IsTypedArray</name><argument_list>(<argument><expr>(<name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>my_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSSMSG_INVALID_ARGS</name></expr></argument>, <argument><expr>"deserialize"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>false</expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>TypedArray</name> *</type><name>array</name> <init>= <expr><call><name><name>TypedArray</name>::<name>fromJSObject</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>(<call><name>uintptr_t</name><argument_list>(<argument><expr><name><name>array</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call> &amp; 7) != 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>my_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSSMSG_BAD_ALIGNMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>false</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name>JS_ReadStructuredClone</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>uint64</name> *) <name><name>array</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>array</name>-&gt;<name>byteLength</name></name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>

<comment type="block">/* We use a mix of JS_FS and JS_FN to test both kinds of natives. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>JSFunctionSpec</name></type> <name><name>shell_functions</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"version"</expr></argument>,        <argument><expr><name>Version</name></expr></argument>,        <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"revertVersion"</expr></argument>,  <argument><expr><name>RevertVersion</name></expr></argument>,  <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"options"</expr></argument>,        <argument><expr><name>Options</name></expr></argument>,        <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"load"</expr></argument>,           <argument><expr><name>Load</name></expr></argument>,           <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"readline"</expr></argument>,       <argument><expr><name>ReadLine</name></expr></argument>,       <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"print"</expr></argument>,          <argument><expr><name>Print</name></expr></argument>,          <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"putstr"</expr></argument>,         <argument><expr><name>PutStr</name></expr></argument>,         <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"dateNow"</expr></argument>,        <argument><expr><name>Now</name></expr></argument>,            <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"help"</expr></argument>,           <argument><expr><name>Help</name></expr></argument>,           <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"quit"</expr></argument>,           <argument><expr><name>Quit</name></expr></argument>,           <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"assertEq"</expr></argument>,       <argument><expr><name>AssertEq</name></expr></argument>,       <argument><expr>2</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"assertJit"</expr></argument>,      <argument><expr><name>AssertJit</name></expr></argument>,      <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"gc"</expr></argument>,             <argument><expr><name>::<name>GC</name></name></expr></argument>,           <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_GCMETER</name></cpp:ifdef>
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"gcstats"</expr></argument>,        <argument><expr><name>GCStats</name></expr></argument>,        <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"gcparam"</expr></argument>,        <argument><expr><name>GCParameter</name></expr></argument>,    <argument><expr>2</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"countHeap"</expr></argument>,      <argument><expr><name>CountHeap</name></expr></argument>,      <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"makeFinalizeObserver"</expr></argument>, <argument><expr><name>MakeFinalizeObserver</name></expr></argument>, <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"finalizeCount"</expr></argument>,  <argument><expr><name>FinalizeCount</name></expr></argument>, <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_GC_ZEAL</name></cpp:ifdef>
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"gczeal"</expr></argument>,         <argument><expr><name>GCZeal</name></expr></argument>,         <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"setDebug"</expr></argument>,       <argument><expr><name>SetDebug</name></expr></argument>,       <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"setDebuggerHandler"</expr></argument>, <argument><expr><name>SetDebuggerHandler</name></expr></argument>, <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"setThrowHook"</expr></argument>,   <argument><expr><name>SetThrowHook</name></expr></argument>,   <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"trap"</expr></argument>,           <argument><expr><name>Trap</name></expr></argument>,           <argument><expr>3</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"untrap"</expr></argument>,         <argument><expr><name>Untrap</name></expr></argument>,         <argument><expr>2</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"line2pc"</expr></argument>,        <argument><expr><name>LineToPC</name></expr></argument>,       <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"pc2line"</expr></argument>,        <argument><expr><name>PCToLine</name></expr></argument>,       <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"stackQuota"</expr></argument>,     <argument><expr><name>StackQuota</name></expr></argument>,     <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"stringsAreUTF8"</expr></argument>, <argument><expr><name>StringsAreUTF8</name></expr></argument>, <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"testUTF8"</expr></argument>,       <argument><expr><name>TestUTF8</name></expr></argument>,       <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"throwError"</expr></argument>,     <argument><expr><name>ThrowError</name></expr></argument>,     <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"dis"</expr></argument>,            <argument><expr><name>Disassemble</name></expr></argument>,    <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"disfile"</expr></argument>,        <argument><expr><name>DisassFile</name></expr></argument>,     <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"dissrc"</expr></argument>,         <argument><expr><name>DisassWithSrc</name></expr></argument>,  <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"dumpHeap"</expr></argument>,       <argument><expr><name>DumpHeap</name></expr></argument>,       <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"dumpObject"</expr></argument>,     <argument><expr><name>DumpObject</name></expr></argument>,     <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"notes"</expr></argument>,          <argument><expr><name>Notes</name></expr></argument>,          <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"tracing"</expr></argument>,        <argument><expr><name>Tracing</name></expr></argument>,        <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"stats"</expr></argument>,          <argument><expr><name>DumpStats</name></expr></argument>,      <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CVTARGS</name></cpp:ifdef>
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"cvtargs"</expr></argument>,        <argument><expr><name>ConvertArgs</name></expr></argument>,    <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"build"</expr></argument>,          <argument><expr><name>BuildDate</name></expr></argument>,      <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"clear"</expr></argument>,          <argument><expr><name>Clear</name></expr></argument>,          <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"intern"</expr></argument>,         <argument><expr><name>Intern</name></expr></argument>,         <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"clone"</expr></argument>,          <argument><expr><name>Clone</name></expr></argument>,          <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"getpda"</expr></argument>,         <argument><expr><name>GetPDA</name></expr></argument>,         <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"getslx"</expr></argument>,         <argument><expr><name>GetSLX</name></expr></argument>,         <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"toint32"</expr></argument>,        <argument><expr><name>ToInt32</name></expr></argument>,        <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"evalcx"</expr></argument>,         <argument><expr><name>EvalInContext</name></expr></argument>,  <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"evalInFrame"</expr></argument>,    <argument><expr><name>EvalInFrame</name></expr></argument>,    <argument><expr>2</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"shapeOf"</expr></argument>,        <argument><expr><name>ShapeOf</name></expr></argument>,        <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SHARK</name></cpp:ifdef>
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"startShark"</expr></argument>,     <argument><expr><name>js_StartShark</name></expr></argument>,      <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"stopShark"</expr></argument>,      <argument><expr><name>js_StopShark</name></expr></argument>,       <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"connectShark"</expr></argument>,   <argument><expr><name>js_ConnectShark</name></expr></argument>,    <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"disconnectShark"</expr></argument>,<argument><expr><name>js_DisconnectShark</name></expr></argument>, <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_CALLGRIND</name></cpp:ifdef>
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"startCallgrind"</expr></argument>, <argument><expr><name>js_StartCallgrind</name></expr></argument>,  <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"stopCallgrind"</expr></argument>,  <argument><expr><name>js_StopCallgrind</name></expr></argument>,   <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"dumpCallgrind"</expr></argument>,  <argument><expr><name>js_DumpCallgrind</name></expr></argument>,   <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_VTUNE</name></cpp:ifdef>
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"startVtune"</expr></argument>,     <argument><expr><name>js_StartVtune</name></expr></argument>,    <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"stopVtune"</expr></argument>,      <argument><expr><name>js_StopVtune</name></expr></argument>,     <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"pauseVtune"</expr></argument>,     <argument><expr><name>js_PauseVtune</name></expr></argument>,    <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"resumeVtune"</expr></argument>,    <argument><expr><name>js_ResumeVtune</name></expr></argument>,   <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_TRACEVIS</name></cpp:ifdef>
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"startTraceVis"</expr></argument>,  <argument><expr><name>StartTraceVisNative</name></expr></argument>, <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"stopTraceVis"</expr></argument>,   <argument><expr><name>StopTraceVisNative</name></expr></argument>,  <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_ARRAYS</name></cpp:ifdef>
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"arrayInfo"</expr></argument>,      <argument><expr><name>js_ArrayInfo</name></expr></argument>,   <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"sleep"</expr></argument>,          <argument><expr><name>Sleep_fn</name></expr></argument>,       <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"scatter"</expr></argument>,        <argument><expr><name>Scatter</name></expr></argument>,        <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"snarf"</expr></argument>,          <argument><expr><name>Snarf</name></expr></argument>,          <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"read"</expr></argument>,           <argument><expr><name>Snarf</name></expr></argument>,          <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"compile"</expr></argument>,        <argument><expr><name>Compile</name></expr></argument>,        <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"parse"</expr></argument>,          <argument><expr><name>Parse</name></expr></argument>,          <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"timeout"</expr></argument>,        <argument><expr><name>Timeout</name></expr></argument>,        <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"elapsed"</expr></argument>,        <argument><expr><name>Elapsed</name></expr></argument>,        <argument><expr>0</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"parent"</expr></argument>,         <argument><expr><name>Parent</name></expr></argument>,         <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"wrap"</expr></argument>,           <argument><expr><name>Wrap</name></expr></argument>,           <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"serialize"</expr></argument>,      <argument><expr><name>Serialize</name></expr></argument>,      <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>JS_FN</name><argument_list>(<argument><expr>"deserialize"</expr></argument>,    <argument><expr><name>Deserialize</name></expr></argument>,    <argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><name>JS_FS_END</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>shell_help_header</name><index>[]</index></name> <init>=
<expr>"Command                  Description\n"
"=======                  ===========\n"</expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name><name>shell_help_messages</name><index>[]</index></name> <init>= <expr><block>{
<expr>"version([number])        Get or force a script compilation version number"</expr>,
<expr>"revertVersion()          Revert previously set version number"</expr>,
<expr>"options([option ...])    Get or toggle JavaScript options"</expr>,
<expr>"load(['foo.js' ...])     Load files named by string arguments"</expr>,
<expr>"readline()               Read a single line from stdin"</expr>,
<expr>"print([exp ...])         Evaluate and print expressions"</expr>,
<expr>"putstr([exp])            Evaluate and print expression without newline"</expr>,
<expr>"dateNow()                    Return the current time with sub-ms precision"</expr>,
<expr>"help([name ...])         Display usage and help messages"</expr>,
<expr>"quit()                   Quit the shell"</expr>,
<expr>"assertEq(actual, expected[, msg])\n"
"  Throw if the first two arguments are not the same (both +0 or both -0,\n"
"  both NaN, or non-zero and ===)"</expr>,
<expr>"assertJit()              Throw if the calling function failed to JIT\n"</expr>,
<expr>"gc()                     Run the garbage collector"</expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_GCMETER</name></cpp:ifdef>
<expr>"gcstats()                Print garbage collector statistics"</expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr>"gcparam(name, value)\n"
"  Wrapper for JS_SetGCParameter. The name must be either 'maxBytes' or\n"
"  'maxMallocBytes' and the value must be convertable to a positive uint32"</expr>,
<expr>"countHeap([start[, kind]])\n"
"  Count the number of live GC things in the heap or things reachable from\n"
"  start when it is given and is not null. kind is either 'all' (default) to\n"
"  count all things or one of 'object', 'double', 'string', 'function',\n"
"  'qname', 'namespace', 'xml' to count only things of that kind"</expr>,
<expr>"makeFinalizeObserver()\n"
"  get a special object whose finalization increases the counter returned\n"
"  by the finalizeCount function"</expr>,
<expr>"finalizeCount()\n"
"  return the current value of the finalization counter that is incremented\n"
"  each time an object returned by the makeFinalizeObserver is finalized"</expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_GC_ZEAL</name></cpp:ifdef>
<expr>"gczeal(level)            How zealous the garbage collector should be"</expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr>"setDebug(debug)          Set debug mode"</expr>,
<expr>"setDebuggerHandler(f)    Set handler for debugger keyword to f"</expr>,
<expr>"setThrowHook(f)          Set throw hook to f"</expr>,
<expr>"trap([fun, [pc,]] exp)   Trap bytecode execution"</expr>,
<expr>"untrap(fun[, pc])        Remove a trap"</expr>,
<expr>"line2pc([fun,] line)     Map line number to PC"</expr>,
<expr>"pc2line(fun[, pc])       Map PC to line number"</expr>,
<expr>"stackQuota([number])     Query/set script stack quota"</expr>,
<expr>"stringsAreUTF8()         Check if strings are UTF-8 encoded"</expr>,
<expr>"testUTF8(mode)           Perform UTF-8 tests (modes are 1 to 4)"</expr>,
<expr>"throwError()             Throw an error from JS_ReportError"</expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<expr>"dis([fun])               Disassemble functions into bytecodes\n"
"dis('-r', fun)           Disassembles recursively"</expr>,
<expr>"disfile('foo.js')        Disassemble script file into bytecodes"</expr>,
<expr>"dissrc([fun])            Disassemble functions with source lines"</expr>,
<expr>"dumpHeap([fileName[, start[, toFind[, maxDepth[, toIgnore]]]]])\n"
"  Interface to JS_DumpHeap with output sent to file"</expr>,
<expr>"dumpObject()             Dump an internal representation of an object"</expr>,
<expr>"notes([fun])             Show source notes for functions"</expr>,
<expr>"tracing([true|false|filename]) Turn bytecode execution tracing on/off.\n"
"                         With filename, send to file.\n"</expr>,
<expr>"stats([string ...])      Dump 'arena', 'atom', 'global' stats"</expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CVTARGS</name></cpp:ifdef>
<expr>"cvtargs(arg1..., arg12)  Test argument formatter"</expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr>"build()                  Show build date and time"</expr>,
<expr>"clear([obj])             Clear properties of object"</expr>,
<expr>"intern(str)              Internalize str in the atom table"</expr>,
<expr>"clone(fun[, scope])      Clone function object"</expr>,
<expr>"getpda(obj)              Get the property descriptors for obj"</expr>,
<expr>"getslx(obj)              Get script line extent"</expr>,
<expr>"toint32(n)               Testing hook for JS_ValueToInt32"</expr>,
<expr>"evalcx(s[, o])\n"
"  Evaluate s in optional sandbox object o\n"
"  if (s == '' &amp;&amp; !o) return new o with eager standard classes\n"
"  if (s == 'lazy' &amp;&amp; !o) return new o with lazy standard classes\n"
"  if (s == 'split' &amp;&amp; !o) return new split-object o with lazy standard classes"</expr>,
<expr>"evalInFrame(n,str,save)  Evaluate 'str' in the nth up frame.\n"
"                         If 'save' (default false), save the frame chain"</expr>,
<expr>"shapeOf(obj)             Get the shape of obj (an implementation detail)"</expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SHARK</name></cpp:ifdef>
<expr>"startShark()             Start a Shark session.\n"
"                         Shark must be running with programatic sampling"</expr>,
<expr>"stopShark()              Stop a running Shark session"</expr>,
<expr>"connectShark()           Connect to Shark.\n"
"                         The -k switch does this automatically"</expr>,
<expr>"disconnectShark()        Disconnect from Shark"</expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_CALLGRIND</name></cpp:ifdef>
<expr>"startCallgrind()         Start callgrind instrumentation"</expr>,
<expr>"stopCallgrind()          Stop callgrind instrumentation"</expr>,
<expr>"dumpCallgrind([name])    Dump callgrind counters"</expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_VTUNE</name></cpp:ifdef>
<expr>"startVtune([filename])   Start vtune instrumentation"</expr>,
<expr>"stopVtune()              Stop vtune instrumentation"</expr>,
<expr>"pauseVtune()             Pause vtune collection"</expr>,
<expr>"resumeVtune()            Resume vtune collection"</expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_TRACEVIS</name></cpp:ifdef>
<expr>"startTraceVis(filename)  Start TraceVis recording (stops any current recording)"</expr>,
<expr>"stopTraceVis()           Stop TraceVis recording"</expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_ARRAYS</name></cpp:ifdef>
<expr>"arrayInfo(a1, a2, ...)   Report statistics about arrays"</expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
<expr>"sleep(dt)                Sleep for dt seconds"</expr>,
<expr>"scatter(fns)             Call functions concurrently (ignoring errors)"</expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr>"snarf(filename)          Read filename into returned string"</expr>,
<expr>"read(filename)           Synonym for snarf"</expr>,
<expr>"compile(code)            Compiles a string to bytecode, potentially throwing"</expr>,
<expr>"parse(code)              Parses a string, potentially throwing"</expr>,
<expr>"timeout([seconds])\n"
"  Get/Set the limit in seconds for the execution time for the current context.\n"
"  A negative value (default) means that the execution time is unlimited."</expr>,
<expr>"elapsed()                Execution time elapsed for the current context."</expr>,
<expr>"parent(obj)              Returns the parent of obj.\n"</expr>,
<expr>"wrap(obj)                Wrap an object into a noop wrapper.\n"</expr>,
<expr>"serialize(sd)            Serialize sd using JS_WriteStructuredClone. Returns a TypedArray.\n"</expr>,
<expr>"deserialize(a)           Deserialize data generated by serialize.\n"</expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Help messages must match shell functions. */</comment>
<expr_stmt><expr><call><name>JS_STATIC_ASSERT</name><argument_list>(<argument><expr><call><name>JS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>shell_help_messages</name></expr></argument>)</argument_list></call> + 1 ==
                 <call><name>JS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>shell_functions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CheckHelpMessages</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *<specifier>const</specifier> *</type><name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lp</name></decl>;</decl_stmt>

    <comment type="block">/* Each message must begin with "function_name(" prefix. */</comment>
    <for>for (<init><expr><name>m</name> = <name>shell_help_messages</name></expr>;</init> <condition><expr><name>m</name> != <call><name>JS_ARRAY_END</name><argument_list>(<argument><expr><name>shell_help_messages</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>m</name></expr></incr>) <block>{
        <expr_stmt><expr><name>lp</name> = <call><name>strchr</name><argument_list>(<argument><expr>*<name>m</name></expr></argument>, <argument><expr>'('</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>shell_functions</name><index>[<expr><name>m</name> - <name>shell_help_messages</name></expr>]</index></name>.<name>name</name></expr></argument>,
                         <argument><expr>*<name>m</name></expr></argument>, <argument><expr><name>lp</name> - *<name>m</name></expr></argument>)</argument_list></call> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>CheckHelpMessages</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>((void) 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Help</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uintN</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>did_header</name></decl>, <decl><type ref="prev"/><name>did_something</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSType</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bytes</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>, <argument><expr><call><name>JS_GetImplementationVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>argc</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>shell_help_header</name></expr></argument>, <argument><expr><name>gOutFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>shell_functions</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>, <argument><expr><name><name>shell_help_messages</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>did_header</name> = 0</expr>;</expr_stmt>
        <decl_stmt><decl><type><name>jsval</name> *</type><name>argv</name> <init>= <expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>did_something</name> = 0</expr>;</expr_stmt>
            <expr_stmt><expr><name>type</name> = <call><name>JS_TypeOfValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>type</name> == <name>JSTYPE_FUNCTION</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>fun</name> = <call><name>JS_ValueToFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>str</name> = <name><name>fun</name>-&gt;<name>atom</name></name> ? <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name><name>fun</name>-&gt;<name>atom</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>type</name> == <name>JSTYPE_STRING</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>str</name> = <call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>str</name> = <name>NULL</name></expr>;</expr_stmt>
            }</block></else></if></else></if>
            <if>if <condition>(<expr><name>str</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>bytes</name> = <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name><name>shell_functions</name><index>[<expr><name>j</name></expr>]</index></name>.<name>name</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                    <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name><name>shell_functions</name><index>[<expr><name>j</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr>!<name>did_header</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>did_header</name> = 1</expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>shell_help_header</name></expr></argument>, <argument><expr><name>gOutFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <expr_stmt><expr><name>did_something</name> = 1</expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>, <argument><expr><name><name>shell_help_messages</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>
            }</block></then></if>
            <if>if <condition>(<expr>!<name>did_something</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>str</name> = <call><name>JS_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gErrFile</name></expr></argument>, <argument><expr>"Sorry, no help for %s\n"</expr></argument>,
                        <argument><expr><call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></else></if>
    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSObject</name> *</type>
<name>split_setup</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSBool</name></type> <name>evalcx</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>outer</name></decl>, *<decl><type ref="prev"/><name>inner</name></decl>, *<decl><type ref="prev"/><name>arguments</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>outer</name> = <call><name>split_create_outer</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>outer</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <function_decl><type><name>AutoObjectRooter</name></type> <name>root</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>outer</name></type></decl></param>)</parameter_list>;</function_decl>
    <if>if <condition>(<expr>!<name>evalcx</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_SetGlobalObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name>inner</name> = <call><name>split_create_inner</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>inner</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<name>evalcx</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name>JS_DefineFunctions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>, <argument><expr><name>shell_functions</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>

        <comment type="block">/* Create a dummy arguments object. */</comment>
        <expr_stmt><expr><name>arguments</name> = <call><name>JS_NewArrayObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>arguments</name> ||
            !<call><name>JS_DefineProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>, <argument><expr>"arguments"</expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>arguments</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>JS_ClearScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LAZY_STANDARD_CLASSES</name></cpp:ifndef>
    <if>if <condition>(<expr>!<call><name>JS_InitStandardClasses</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><name>inner</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Define a JS object called "it".  Give it class operations that printf why
 * they're being called for tutorial purposes.
 */</comment>
<enum>enum <name>its_tinyid</name> <block>{
    <decl><name>ITS_COLOR</name></decl>, <decl><name>ITS_HEIGHT</name></decl>, <decl><name>ITS_WIDTH</name></decl>, <decl><name>ITS_FUNNY</name></decl>, <decl><name>ITS_ARRAY</name></decl>, <decl><name>ITS_RDONLY</name></decl>,
    <decl><name>ITS_CUSTOM</name></decl>, <decl><name>ITS_CUSTOMRDONLY</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>its_getter</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>jsval</name> *</type><name>val</name> <init>= <expr>(<name>jsval</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr>*<name>vp</name> = <name>val</name> ? *<name>val</name> : <name>JSVAL_VOID</name></expr>;</expr_stmt>
  <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>its_setter</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>jsval</name> *</type><name>val</name> <init>= <expr>(<name>jsval</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>val</name></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>val</name> = *<name>vp</name></expr>;</expr_stmt>
      <return>return <expr><name>JS_TRUE</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>val</name> = new <name>jsval</name></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>val</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>JS_FALSE</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr>!<call><name>JS_AddValueRoot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>
      <return>return <expr><name>JS_FALSE</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr>!<call><name>JS_SetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>void</name>*)<name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>JS_RemoveValueRoot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>
      <return>return <expr><name>JS_FALSE</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr>*<name>val</name> = *<name>vp</name></expr>;</expr_stmt>
  <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>JSPropertySpec</name></type> <name><name>its_props</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"color"</expr>,           <expr><name>ITS_COLOR</name></expr>,      <expr><name>JSPROP_ENUMERATE</name></expr>,       <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr>"height"</expr>,          <expr><name>ITS_HEIGHT</name></expr>,     <expr><name>JSPROP_ENUMERATE</name></expr>,       <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr>"width"</expr>,           <expr><name>ITS_WIDTH</name></expr>,      <expr><name>JSPROP_ENUMERATE</name></expr>,       <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr>"funny"</expr>,           <expr><name>ITS_FUNNY</name></expr>,      <expr><name>JSPROP_ENUMERATE</name></expr>,       <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr>"array"</expr>,           <expr><name>ITS_ARRAY</name></expr>,      <expr><name>JSPROP_ENUMERATE</name></expr>,       <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr>"rdonly"</expr>,          <expr><name>ITS_RDONLY</name></expr>,     <expr><name>JSPROP_READONLY</name></expr>,        <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr>"custom"</expr>,          <expr><name>ITS_CUSTOM</name></expr>,     <expr><name>JSPROP_ENUMERATE</name></expr>,
                        <expr><name>its_getter</name></expr>,     <expr><name>its_setter</name></expr>}</block></expr>,
    <expr><block>{<expr>"customRdOnly"</expr>,    <expr><name>ITS_CUSTOMRDONLY</name></expr>, <expr><name>JSPROP_ENUMERATE</name> | <name>JSPROP_READONLY</name></expr>,
                        <expr><name>its_getter</name></expr>,     <expr><name>its_setter</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>,<expr>0</expr>,<expr>0</expr>,<expr><name>NULL</name></expr>,<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>its_bindMethod</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>method</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>JSObject</name> *</type><name>thisobj</name> <init>= <expr><call><name>JS_THIS_OBJECT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>JS_ConvertArguments</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"so"</expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr>&amp;<name>method</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>JS_TypeOfValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>)</argument_list></call> != <name>JSTYPE_FUNCTION</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>JSString</name> *</type><name>valstr</name> <init>= <expr><call><name>JS_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>valstr</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"can't bind method %s to non-callable object %s"</expr></argument>,
                           <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><name>valstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name>JS_DefineProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>thisobj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSPROP_ENUMERATE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <return>return <expr><call><name>JS_SetParent</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><name>thisobj</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>JSFunctionSpec</name></type> <name><name>its_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"bindMethod"</expr>,      <expr><name>its_bindMethod</name></expr>, <expr>2</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>,<expr><name>NULL</name></expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSD_LOWLEVEL_SOURCE</name></cpp:ifdef>
<comment type="block">/*
 * This facilitates sending source to JSD (the debugger system) in the shell
 * where the source is loaded using the JSFILE hack in jsscan. The function
 * below is used as a callback for the jsdbgapi JS_SetSourceHandler hook.
 * A more normal embedding (e.g. mozilla) loads source itself and can send
 * source directly to JSD without using this hook scheme.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>SendSourceToJSDebugger</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>lineno</name></decl></param>,
                       <param><decl><type><name>jschar</name> *</type><name>str</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>length</name></decl></param>,
                       <param><decl><type><name>void</name> **</type><name>listenerTSData</name></decl></param>, <param><decl><type><name>JSDContext</name>*</type> <name>jsdc</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSDSourceText</name> *</type><name>jsdsrc</name> <init>= <expr>(<name>JSDSourceText</name> *) *<name>listenerTSData</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>jsdsrc</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<name>filename</name></expr>)</condition><then>
            <expr_stmt><expr><name>filename</name> = "typein"</expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr>1 == <name>lineno</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>jsdsrc</name> = <call><name>JSD_NewSourceText</name><argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>jsdsrc</name> = <call><name>JSD_FindSourceForURL</name><argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>jsdsrc</name> &amp;&amp; <name>JSD_SOURCE_PARTIAL</name> !=
                <call><name>JSD_GetSourceStatus</name><argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>jsdsrc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>jsdsrc</name> = <name>NULL</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
    }</block></then></if>
    <if>if <condition>(<expr><name>jsdsrc</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>jsdsrc</name> = <call><name>JSD_AppendUCSourceText</name><argument_list>(<argument><expr><name>jsdc</name></expr></argument>,<argument><expr><name>jsdsrc</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,
                                        <argument><expr><name>JSD_SOURCE_PARTIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr>*<name>listenerTSData</name> = <name>jsdsrc</name></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JSD_LOWLEVEL_SOURCE */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>JSBool</name></type> <name>its_noisy</name></decl>;</decl_stmt>    <comment type="block">/* whether to be noisy when finalizing it */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>JSBool</name></type> <name>its_enum_fail</name></decl>;</decl_stmt><comment type="block">/* whether to fail when enumerating it */</comment>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>its_addProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>its_noisy</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <function_decl><type><name>IdToString</name></type> <name>idString</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>id</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"adding its property %s,"</expr></argument>, <argument><expr><call><name><name>idString</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ToString</name></type> <name>valueString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>" initial value %s\n"</expr></argument>, <argument><expr><call><name><name>valueString</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>its_delProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>its_noisy</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <function_decl><type><name>IdToString</name></type> <name>idString</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>id</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"deleting its property %s,"</expr></argument>, <argument><expr><call><name><name>idString</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ToString</name></type> <name>valueString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>" initial value %s\n"</expr></argument>, <argument><expr><call><name><name>valueString</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>its_getProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>its_noisy</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <function_decl><type><name>IdToString</name></type> <name>idString</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>id</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"getting its property %s,"</expr></argument>, <argument><expr><call><name><name>idString</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ToString</name></type> <name>valueString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>" initial value %s\n"</expr></argument>, <argument><expr><call><name><name>valueString</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>its_setProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <function_decl><type><name>IdToString</name></type> <name>idString</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>id</name></type></decl></param>)</parameter_list>;</function_decl>
    <if>if <condition>(<expr><name>its_noisy</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"setting its property %s,"</expr></argument>, <argument><expr><call><name><name>idString</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ToString</name></type> <name>valueString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>" new value %s\n"</expr></argument>, <argument><expr><call><name><name>valueString</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name>JSID_IS_ATOM</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><call><name><name>idString</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"noisy"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_ValueToBoolean</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>, <argument><expr>&amp;<name>its_noisy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><call><name><name>idString</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"enum_fail"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_ValueToBoolean</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>, <argument><expr>&amp;<name>its_enum_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>

    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Its enumerator, implemented using the "new" enumerate API,
 * see class flags.
 */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>its_enumerate</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>JSIterateOp</name></type> <name>enum_op</name></decl></param>,
              <param><decl><type><name>jsval</name> *</type><name>statep</name></decl></param>, <param><decl><type><name>jsid</name> *</type><name>idp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>iterator</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>enum_op</name></expr>)</condition> <block>{
      <case>case <expr><name>JSENUMERATE_INIT</name></expr>:
      </case><case>case <expr><name>JSENUMERATE_INIT_ALL</name></expr>:
        <if>if <condition>(<expr><name>its_noisy</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"enumerate its properties\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><name>iterator</name> = <call><name>JS_NewPropertyIterator</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>iterator</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

        <expr_stmt><expr>*<name>statep</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>idp</name></expr>)</condition><then>
            <expr_stmt><expr>*<name>idp</name> = <call><name>INT_TO_JSID</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <break>break;</break>

      </case><case>case <expr><name>JSENUMERATE_NEXT</name></expr>:
        <if>if <condition>(<expr><name>its_enum_fail</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"its enumeration failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>iterator</name> = (<name>JSObject</name> *) <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr>*<name>statep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>JS_NextProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

        <if>if <condition>(<expr>!<call><name>JSID_IS_VOID</name><argument_list>(<argument><expr>*<name>idp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <break>break;</break></then></if>
        <comment type="block">/* Fall through. */</comment>

      </case><case>case <expr><name>JSENUMERATE_DESTROY</name></expr>:
        <comment type="block">/* Allow our iterator object to be GC'd. */</comment>
        <expr_stmt><expr>*<name>statep</name> = <name>JSVAL_NULL</name></expr>;</expr_stmt>
        <break>break;</break>
    </case>}</block></switch>

    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>its_resolve</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>flags</name></decl></param>,
            <param><decl><type><name>JSObject</name> **</type><name>objp</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>its_noisy</name></expr>)</condition><then> <block>{
        <function_decl><type><name>IdToString</name></type> <name>idString</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>id</name></type></decl></param>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"resolving its property %s, flags {%s,%s,%s}\n"</expr></argument>,
               <argument><expr><call><name><name>idString</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>,
               <argument><expr>(<name>flags</name> &amp; <name>JSRESOLVE_QUALIFIED</name>) ? "qualified" : ""</expr></argument>,
               <argument><expr>(<name>flags</name> &amp; <name>JSRESOLVE_ASSIGNING</name>) ? "assigning" : ""</expr></argument>,
               <argument><expr>(<name>flags</name> &amp; <name>JSRESOLVE_DETECTING</name>) ? "detecting" : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>its_convert</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>JSType</name></type> <name>type</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>its_noisy</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"converting it to %s type\n"</expr></argument>, <argument><expr><call><name>JS_GetTypeName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>its_finalize</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name> *</type><name>rootedVal</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>its_noisy</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gOutFile</name></expr></argument>, <argument><expr>"finalizing it\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name>rootedVal</name> = (<name>jsval</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rootedVal</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>JS_RemoveValueRoot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rootedVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>JS_SetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>rootedVal</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>JSClass</name></type> <name>its_class</name> <init>= <expr><block>{
    <expr>"It"</expr>, <expr><name>JSCLASS_NEW_RESOLVE</name> | <name>JSCLASS_NEW_ENUMERATE</name> | <name>JSCLASS_HAS_PRIVATE</name></expr>,
    <expr><name>its_addProperty</name></expr>,  <expr><name>its_delProperty</name></expr>,  <expr><name>its_getProperty</name></expr>,  <expr><name>its_setProperty</name></expr>,
    <expr>(<name>JSEnumerateOp</name>)<name>its_enumerate</name></expr>, <expr>(<name>JSResolveOp</name>)<name>its_resolve</name></expr>,
    <expr><name>its_convert</name></expr>,      <expr><name>its_finalize</name></expr>,
    <expr><name>JSCLASS_NO_OPTIONAL_MEMBERS</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JSErrorFormatString</name></type> <name><name>jsShell_ErrorFormatString</name><index>[<expr><name>JSErr_Limit</name></expr>]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_DEF</name><parameter_list>(<param><type><name>name</name></type></param>, <param><type><name>number</name></type></param>, <param><type><name>count</name></type></param>, <param><type><name>exception</name></type></param>, <param><type><name>format</name></type></param>)</parameter_list></cpp:macro> \
    <cpp:value>{ format, count, JSEXN_ERR } ,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsshell.msg"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MSG_DEF</name></cpp:undef>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>JSErrorFormatString</name> *</type>
<name>my_GetErrorMessage</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>userRef</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>locale</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>uintN</name></type> <name>errorNumber</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>(<name>errorNumber</name> &gt; 0) &amp;&amp; (<name>errorNumber</name> &lt; <name>JSShellErr_Limit</name>)</expr>)</condition><then>
        <return>return <expr>&amp;<name><name>jsShell_ErrorFormatString</name><index>[<expr><name>errorNumber</name></expr>]</index></name></expr>;</return></then></if>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>my_ErrorReporter</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>, <param><decl><type><name>JSErrorReport</name> *</type><name>report</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>prefix</name></decl>, *<decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ctmp</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>report</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gErrFile</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>

    <comment type="block">/* Conditionally ignore reported warnings. */</comment>
    <if>if <condition>(<expr><call><name>JSREPORT_IS_WARNING</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>flags</name></name></expr></argument>)</argument_list></call> &amp;&amp; !<name>reportWarnings</name></expr>)</condition><then>
        <return>return;</return></then></if>

    <expr_stmt><expr><name>prefix</name> = <name>NULL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>report</name>-&gt;<name>filename</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>prefix</name> = <call><name>JS_smprintf</name><argument_list>(<argument><expr>"%s:"</expr></argument>, <argument><expr><name><name>report</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name><name>report</name>-&gt;<name>lineno</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>tmp</name> = <name>prefix</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>prefix</name> = <call><name>JS_smprintf</name><argument_list>(<argument><expr>"%s%u: "</expr></argument>, <argument><expr><name>tmp</name> ? <name>tmp</name> : ""</expr></argument>, <argument><expr><name><name>report</name>-&gt;<name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><call><name>JSREPORT_IS_WARNING</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>tmp</name> = <name>prefix</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>prefix</name> = <call><name>JS_smprintf</name><argument_list>(<argument><expr>"%s%swarning: "</expr></argument>,
                             <argument><expr><name>tmp</name> ? <name>tmp</name> : ""</expr></argument>,
                             <argument><expr><call><name>JSREPORT_IS_STRICT</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>flags</name></name></expr></argument>)</argument_list></call> ? "strict " : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* embedded newlines -- argh! */</comment>
    <while>while <condition>(<expr>(<name>ctmp</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr>'\n'</expr></argument>)</argument_list></call>) != 0</expr>)</condition> <block>{
        <expr_stmt><expr><name>ctmp</name>++</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>prefix</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>gErrFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>ctmp</name> - <name>message</name></expr></argument>, <argument><expr><name>gErrFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>message</name> = <name>ctmp</name></expr>;</expr_stmt>
    }</block></while>

    <comment type="block">/* If there were no filename or lineno, the prefix might be empty */</comment>
    <if>if <condition>(<expr><name>prefix</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>gErrFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>gErrFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name><name>report</name>-&gt;<name>linebuf</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr>'\n'</expr></argument>, <argument><expr><name>gErrFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>out</name>;</goto>
    }</block></then></if>

    <comment type="block">/* report-&gt;linebuf usually ends with a newline. */</comment>
    <expr_stmt><expr><name>n</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>gErrFile</name></expr></argument>, <argument><expr>":\n%s%s%s%s"</expr></argument>,
            <argument><expr><name>prefix</name></expr></argument>,
            <argument><expr><name><name>report</name>-&gt;<name>linebuf</name></name></expr></argument>,
            <argument><expr>(<name>n</name> &gt; 0 &amp;&amp; <name><name>report</name>-&gt;<name>linebuf</name><index>[<expr><name>n</name>-1</expr>]</index></name> == '\n') ? "" : "\n"</expr></argument>,
            <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> = <name><name>report</name>-&gt;<name>tokenptr</name></name> - <name><name>report</name>-&gt;<name>linebuf</name></name></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = <name>j</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr><name><name>report</name>-&gt;<name>linebuf</name><index>[<expr><name>i</name></expr>]</index></name> == '\t'</expr>)</condition><then> <block>{
            <for>for (<init><expr><name>k</name> = (<name>j</name> + 8) &amp; ~7</expr>;</init> <condition><expr><name>j</name> &lt; <name>k</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr><name>gErrFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr><name>gErrFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name>++</expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr>"^\n"</expr></argument>, <argument><expr><name>gErrFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <label><name>out</name>:</label>
    <if>if <condition>(<expr>!<call><name>JSREPORT_IS_WARNING</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>report</name>-&gt;<name>errorNumber</name></name> == <name>JSMSG_OUT_OF_MEMORY</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>gExitCode</name> = <name>EXITCODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>gExitCode</name> = <name>EXITCODE_RUNTIME_ERROR</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>
    <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHELL_HACK</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>XP_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Exec</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>, **<decl><type ref="prev"/><name>nargv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uintN</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nargc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_SET_RVAL</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>fun</name> = <call><name>JS_ValueToFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>vp</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>fun</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<name><name>fun</name>-&gt;<name>atom</name></name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>name</name> = <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name><name>fun</name>-&gt;<name>atom</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nargc</name> = 1 + <name>argc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nargv</name> = <call><name>JS_malloc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>nargc</name> + 1) * <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>nargv</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>nargv</name><index>[<expr>0</expr>]</index></name> = <name>name</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>jsval</name> *</type><name>argv</name> <init>= <expr><call><name>JS_ARGV</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name>nargc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>str</name> = <call><name>JS_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name><name>nargv</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>nargv</name><index>[<expr><name>nargc</name></expr>]</index></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>pid</name> = <call><name>fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>pid</name></expr>)</condition> <block>{
      <case>case <expr>-1</expr>:
        <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"js"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </case><case>case <expr>0</expr>:
        <expr_stmt><expr>(<name>void</name>) <call><name>execvp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>(<name>char</name> **)<name>nargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"js"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>127</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </case><default>default:
        <while>while <condition>(<expr><call><name>waitpid</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0 &amp;&amp; <name>errno</name> == <name>EINTR</name></expr>)</condition>
            <continue>continue;</continue></while>
        <break>break;</break>
    </default>}</block></switch>
    <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>global_enumerate</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LAZY_STANDARD_CLASSES</name></cpp:ifdef>
    <return>return <expr><call><name>JS_EnumerateStandardClasses</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>global_resolve</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>flags</name></decl></param>,
               <param><decl><type><name>JSObject</name> **</type><name>objp</name></decl></param>)</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LAZY_STANDARD_CLASSES</name></cpp:ifdef>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>resolved</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>ResolveClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>resolved</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name>resolved</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>objp</name> = <name>obj</name></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHELL_HACK</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>XP_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if>if <condition>(<expr>!(<name>flags</name> &amp; <name>JSRESOLVE_QUALIFIED</name>)</expr>)</condition><then> <block>{
        <comment type="block">/*
         * Do this expensive hack only for unoptimized Unix builds, which are
         * not used for benchmarking.
         */</comment>
        <decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>, *<decl><type ref="prev"/><name>comp</name></decl>, *<decl><type ref="prev"/><name>full</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>, <decl><type ref="prev"/><name>found</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>path</name> = <call><name>getenv</name><argument_list>(<argument><expr>"PATH"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>path</name></expr>)</condition><then>
            <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>path</name> = <call><name>JS_strdup</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>path</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>name</name> = <call><name>JS_GetStringBytes</name><argument_list>(<argument><expr><call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
        <for>for (<init><expr><name>comp</name> = <call><name>strtok</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>":"</expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>comp</name></expr>;</condition> <incr><expr><name>comp</name> = <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>":"</expr></argument>)</argument_list></call></expr></incr>) <block>{
            <if>if <condition>(<expr>*<name>comp</name> != '\0'</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>full</name> = <call><name>JS_smprintf</name><argument_list>(<argument><expr>"%s/%s"</expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>full</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>full</name> = (<name>char</name> *)<name>name</name></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>found</name> = (<call><name>access</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>X_OK</name></expr></argument>)</argument_list></call> == 0)</expr>;</expr_stmt>
            <if>if <condition>(<expr>*<name>comp</name> != '\0'</expr>)</condition><then>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <if>if <condition>(<expr><name>found</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>fun</name> = <call><name>JS_DefineFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>Exec</name></expr></argument>, <argument><expr>0</expr></argument>,
                                        <argument><expr><name>JSPROP_ENUMERATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ok</name> = (<name>fun</name> != <name>NULL</name>)</expr>;</expr_stmt>
                <if>if <condition>(<expr><name>ok</name></expr>)</condition><then>
                    <expr_stmt><expr>*<name>objp</name> = <name>obj</name></expr>;</expr_stmt></then></if>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ok</name></expr>;</return>
    }</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<decl_stmt><decl><type><name>JSClass</name></type> <name>global_class</name> <init>= <expr><block>{
    <expr>"global"</expr>, <expr><name>JSCLASS_NEW_RESOLVE</name> | <name>JSCLASS_GLOBAL_FLAGS</name> | <name>JSCLASS_HAS_PRIVATE</name></expr>,
    <expr><name>JS_PropertyStub</name></expr>,  <expr><name>JS_PropertyStub</name></expr>,
    <expr><name>JS_PropertyStub</name></expr>,  <expr><name>JS_PropertyStub</name></expr>,
    <expr><name>global_enumerate</name></expr>, <expr>(<name>JSResolveOp</name>) <name>global_resolve</name></expr>,
    <expr><name>JS_ConvertStub</name></expr>,   <expr><name>its_finalize</name></expr>,
    <expr><name>JSCLASS_NO_OPTIONAL_MEMBERS</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>env_setProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
<comment type="block">/* XXX porting may be easy, but these don't seem to supply setenv by default */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>defined</name> <name>XP_BEOS</name> &amp;&amp; !<name>defined</name> <name>XP_OS2</name> &amp;&amp; !<name>defined</name> <name>SOLARIS</name></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

    <function_decl><type><name>IdToString</name></type> <name>idstr</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>id</name></type></decl></param>, <param><decl><type><name>JS_TRUE</name></type></decl></param>)</parameter_list>;</function_decl>
    <if>if <condition>(<expr><call><name><name>idstr</name>.<name>threw</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <decl_stmt><decl><type><name>ToString</name></type> <name>valstr</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>valstr</name>.<name>threw</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>XP_WIN</name> || <name>defined</name> <name>HPUX</name> || <name>defined</name> <name>OSF1</name> || <name>defined</name> <name>IRIX</name></expr></cpp:if>
    <block>{
        <decl_stmt><decl><type><name>char</name> *</type><name>waste</name> <init>= <expr><call><name>JS_smprintf</name><argument_list>(<argument><expr>"%s=%s"</expr></argument>, <argument><expr><call><name><name>idstr</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>valstr</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>waste</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>rv</name> = <call><name>putenv</name><argument_list>(<argument><expr><name>waste</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_WIN</name></cpp:ifdef>
        <comment type="block">/*
         * HPUX9 at least still has the bad old non-copying putenv.
         *
         * Per mail from &lt;s.shanmuganathan@digital.com&gt;, OSF1 also has a putenv
         * that will crash if you pass it an auto char array (so it must place
         * its argument directly in the char *environ[] array).
         */</comment>
        <expr_stmt><expr><call><name>JS_smprintf_free</name><argument_list>(<argument><expr><name>waste</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>rv</name> = <call><name>setenv</name><argument_list>(<argument><expr><call><name><name>idstr</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>valstr</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if>if <condition>(<expr><name>rv</name> &lt; 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"can't set env variable %s to %s"</expr></argument>, <argument><expr><call><name><name>idstr</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>valstr</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr>*<name>vp</name> = <call><name><name>valstr</name>.<name>getJSVal</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined XP_BEOS &amp;&amp; !defined XP_OS2 &amp;&amp; !defined SOLARIS */</comment>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>env_enumerate</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>JSBool</name></type> <name>reflected</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> **</type><name>evp</name></decl>, *<decl><type ref="prev"/><name>name</name></decl>, *<decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>valstr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>reflected</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <for>for (<init><expr><name>evp</name> = (<name>char</name> **)<call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr>(<name>name</name> = *<name>evp</name>) != <name>NULL</name></expr>;</condition> <incr><expr><name>evp</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>value</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then>
            <continue>continue;</continue></then></if>
        <expr_stmt><expr>*<name>value</name>++ = '\0'</expr>;</expr_stmt>
        <expr_stmt><expr><name>valstr</name> = <call><name>JS_NewStringCopyZ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>valstr</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>ok</name> = <call><name>JS_DefineProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>valstr</name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSPROP_ENUMERATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name><name>value</name><index>[<expr>-1</expr>]</index></name> = '='</expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></for>

    <expr_stmt><expr><name>reflected</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>env_resolve</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>flags</name></decl></param>,
            <param><decl><type><name>JSObject</name> **</type><name>objp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSString</name> *</type><name>valstr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>, *<decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>flags</name> &amp; <name>JSRESOLVE_ASSIGNING</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <function_decl><type><name>IdToString</name></type> <name>idstr</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>, <param><decl><type><name>id</name></type></decl></param>, <param><decl><type><name>JS_TRUE</name></type></decl></param>)</parameter_list>;</function_decl>
    <if>if <condition>(<expr><call><name><name>idstr</name>.<name>threw</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>name</name> = <call><name><name>idstr</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>value</name> = <call><name>getenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>value</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>valstr</name> = <call><name>JS_NewStringCopyZ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>valstr</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <if>if <condition>(<expr>!<call><name>JS_DefineProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>valstr</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSPROP_ENUMERATE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr>*<name>objp</name> = <name>obj</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>JSClass</name></type> <name>env_class</name> <init>= <expr><block>{
    <expr>"environment"</expr>, <expr><name>JSCLASS_HAS_PRIVATE</name> | <name>JSCLASS_NEW_RESOLVE</name></expr>,
    <expr><name>JS_PropertyStub</name></expr>,  <expr><name>JS_PropertyStub</name></expr>,
    <expr><name>JS_PropertyStub</name></expr>,  <expr><name>env_setProperty</name></expr>,
    <expr><name>env_enumerate</name></expr>, <expr>(<name>JSResolveOp</name>) <name>env_resolve</name></expr>,
    <expr><name>JS_ConvertStub</name></expr>,   <expr><name>NULL</name></expr>,
    <expr><name>JSCLASS_NO_OPTIONAL_MEMBERS</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Avoid a reentrancy hazard.
 *
 * The non-JS_THREADSAFE shell uses a signal handler to implement timeout().
 * The JS engine is not really reentrant, but JS_TriggerAllOperationCallbacks
 * is mostly safe--the only danger is that we might interrupt JS_NewContext or
 * JS_DestroyContext while the context list is being modified. Therefore we
 * disable the signal handler around calls to those functions.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>WITH_SIGNALS_DISABLED</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>x</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>WITH_SIGNALS_DISABLED</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro>                                               \
    <cpp:value>JS_BEGIN_MACRO                                                              \
        ScheduleWatchdog(gRuntime, -1);                                         \
        x;                                                                      \
        ScheduleWatchdog(gRuntime, gTimeoutInterval);                           \
    JS_END_MACRO</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>JSContext</name> *</type>
<name>NewContext</name><parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>WITH_SIGNALS_DISABLED</name><argument_list>(<argument><expr><name>cx</name> = <call><name>JS_NewContext</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>gStackChunkSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>cx</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>JSShellContextData</name> *</type><name>data</name> <init>= <expr><call><name>NewContextData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>data</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>DestroyContext</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>JS_SetContextPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_SetErrorReporter</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>my_ErrorReporter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_SetVersion</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSVERSION_LATEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetContextOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>enableTraceJit</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_ToggleOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSOPTION_JIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>enableMethodJit</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_ToggleOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSOPTION_METHODJIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>cx</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DestroyContext</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>bool</name></type> <name>withGC</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSShellContextData</name> *</type><name>data</name> <init>= <expr><call><name>GetContextData</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_SetContextPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>WITH_SIGNALS_DISABLED</name><argument_list>(<argument><expr><name>withGC</name> ? <call><name>JS_DestroyContext</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call> : <call><name>JS_DestroyContextNoGC</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>JSObject</name> *</type>
<name>NewGlobalObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>glob</name> <init>= <expr><call><name>JS_NewCompartmentAndGlobalObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>global_class</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>glob</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>JSAutoEnterCompartment</name></type> <name>ac</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name><name>ac</name>.<name>enter</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>glob</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LAZY_STANDARD_CLASSES</name></cpp:ifdef>
    <expr_stmt><expr><call><name>JS_SetGlobalObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>glob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if>if <condition>(<expr>!<call><name>JS_InitStandardClasses</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>glob</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_HAS_CTYPES</name></cpp:ifdef>
    <if>if <condition>(<expr>!<call><name>JS_InitCTypesClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>glob</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if>if <condition>(<expr>!<call><name><name>JS</name>::<name>RegisterPerfMeasurement</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>glob</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>JS_DefineFunctions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>glob</name></expr></argument>, <argument><expr><name>shell_functions</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>JSObject</name> *</type><name>it</name> <init>= <expr><call><name>JS_DefineObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>glob</name></expr></argument>, <argument><expr>"it"</expr></argument>, <argument><expr>&amp;<name>its_class</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>it</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>JS_DefineProperties</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>its_props</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>JS_DefineFunctions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>its_methods</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<call><name>JS_DefineProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>glob</name></expr></argument>, <argument><expr>"custom"</expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>, <argument><expr><name>its_getter</name></expr></argument>,
                           <argument><expr><name>its_setter</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>JS_DefineProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>glob</name></expr></argument>, <argument><expr>"customRdOnly"</expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>, <argument><expr><name>its_getter</name></expr></argument>,
                           <argument><expr><name>its_setter</name></expr></argument>, <argument><expr><name>JSPROP_READONLY</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <return>return <expr><name>glob</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>Shell</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>, <param><decl><type><name>char</name> **</type><name>envp</name></decl></param>)</parameter_list>
<block>{
    <function_decl><type><name>JSAutoRequest</name></type> <name>ar</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>)</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name>JSObject</name> *</type><name>glob</name> <init>= <expr><call><name>NewGlobalObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>glob</name></expr>)</condition><then>
        <return>return <expr>1</expr>;</return></then></if>

    <decl_stmt><decl><type><name>JSAutoEnterCompartment</name></type> <name>ac</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name><name>ac</name>.<name>enter</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>glob</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr>1</expr>;</return></then></if>

    <decl_stmt><decl><type><name>JSObject</name> *</type><name>envobj</name> <init>= <expr><call><name>JS_DefineObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>glob</name></expr></argument>, <argument><expr>"environment"</expr></argument>, <argument><expr>&amp;<name>env_class</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>envobj</name> || !<call><name>JS_SetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>envobj</name></expr></argument>, <argument><expr><name>envp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr>1</expr>;</return></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSDEBUGGER</name></cpp:ifdef>
    <comment type="block">/*
    * XXX A command line option to enable debugging (or not) would be good
    */</comment>
    <expr_stmt><expr><name>jsdc</name> = <call><name>JSD_DebuggerOnForUser</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>jsdc</name></expr>)</condition><then>
        <return>return <expr>1</expr>;</return></then></if>
    <expr_stmt><expr><call><name>JSD_JSContextInUse</name><argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSD_LOWLEVEL_SOURCE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>JS_SetSourceHandler</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>SendSourceToJSDebugger</name></expr></argument>, <argument><expr><name>jsdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JSD_LOWLEVEL_SOURCE */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSDEBUGGER_JAVA_UI</name></cpp:ifdef>
    <expr_stmt><expr><name>jsdjc</name> = <call><name>JSDJ_CreateContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>! <name>jsdjc</name></expr>)</condition><then>
        <return>return <expr>1</expr>;</return></then></if>
    <expr_stmt><expr><call><name>JSDJ_SetJSDContext</name><argument_list>(<argument><expr><name>jsdjc</name></expr></argument>, <argument><expr><name>jsdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>java_env</name> = <call><name>JSDJ_CreateJavaVMAndStartDebugger</name><argument_list>(<argument><expr><name>jsdjc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
    * XXX This would be the place to wait for the debugger to start.
    * Waiting would be nice in general, but especially when a js file
    * is passed on the cmd line.
    */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JSDEBUGGER_JAVA_UI */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSDEBUGGER_C_UI</name></cpp:ifdef>
    <expr_stmt><expr><name>jsdbc</name> = <call><name>JSDB_InitDebugger</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>jsdc</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JSDEBUGGER_C_UI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JSDEBUGGER */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <class>class <name>ShellWorkerHooks</name> <super>: <specifier>public</specifier> <name><name>js</name>::<name>workers</name>::<name>WorkerHooks</name></name></super> <block>{<private type="default">
    </private><public>public:
        <function><type><name>JSObject</name> *</type><name>newGlobalObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><call><name>NewGlobalObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    </public>}</block>;</class>
    <decl_stmt><decl><type><name>ShellWorkerHooks</name></type> <name>hooks</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>JS_AddNamedObjectRoot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>gWorkers</name></expr></argument>, <argument><expr>"Workers"</expr></argument>)</argument_list></call> ||
        (<name>gWorkerThreadPool</name> = <call><name><name>js</name>::<name>workers</name>::<name>init</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>hooks</name></expr></argument>, <argument><expr><name>glob</name></expr></argument>, <argument><expr>&amp;<name>gWorkers</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr>1</expr>;</return>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>ProcessArgs</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>glob</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <expr_stmt><expr><call><name><name>js</name>::<name>workers</name>::<name>finish</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>gWorkerThreadPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_RemoveObjectRoot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>gWorkers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>result</name> == 0</expr>)</condition><then>
        <expr_stmt><expr><name>result</name> = <name>gExitCode</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSDEBUGGER</name></cpp:ifdef>
    <if>if <condition>(<expr><name>jsdc</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSDEBUGGER_C_UI</name></cpp:ifdef>
        <if>if <condition>(<expr><name>jsdbc</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>JSDB_TermDebugger</name><argument_list>(<argument><expr><name>jsdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JSDEBUGGER_C_UI */</comment>
        <expr_stmt><expr><call><name>JSD_DebuggerOff</name><argument_list>(<argument><expr><name>jsdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* JSDEBUGGER */</comment>

    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>MaybeOverrideOutFileFromEnv</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>* <specifier>const</specifier></type> <name>envVar</name></decl></param>,
                            <param><decl><type><name>FILE</name>*</type> <name>defaultOut</name></decl></param>,
                            <param><decl><type><name>FILE</name>**</type> <name>outFile</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>outPath</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><name>envVar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>outPath</name> || !*<name>outPath</name> || !(*<name>outFile</name> = <call><name>fopen</name><argument_list>(<argument><expr><name>outPath</name></expr></argument>, <argument><expr>"w"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>outFile</name> = <name>defaultOut</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>, <param><decl><type><name>char</name> **</type><name>envp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>stackDummy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSDEBUGGER</name></cpp:ifdef>
    <decl_stmt><decl><type><name>JSDContext</name> *</type><name>jsdc</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSDEBUGGER_JAVA_UI</name></cpp:ifdef>
    <decl_stmt><decl><type><name>JNIEnv</name> *</type><name>java_env</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSDJContext</name> *</type><name>jsdjc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSDEBUGGER_C_UI</name></cpp:ifdef>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>jsdbc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JSDEBUGGER_C_UI */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JSDEBUGGER */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_WIN</name></cpp:ifdef>
    <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>crash_option</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr>"XRE_NO_WINDOWS_CRASH_DIALOG"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>crash_option</name> &amp;&amp; <call><name>strncmp</name><argument_list>(<argument><expr><name>crash_option</name></expr></argument>, <argument><expr>"1"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>DWORD</name></type> <name>oldmode</name> <init>= <expr><call><name>SetErrorMode</name><argument_list>(<argument><expr><name>SEM_NOGPFAULTERRORBOX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>SetErrorMode</name><argument_list>(<argument><expr><name>oldmode</name> | <name>SEM_NOGPFAULTERRORBOX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>CheckHelpMessages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SETLOCALE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_THREADSAFE</name></cpp:ifdef>
    <if>if <condition>(<expr><name>PR_FAILURE</name> == <call><name>PR_NewThreadPrivateIndex</name><argument_list>(<argument><expr>&amp;<name>gStackBaseThreadIndex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> ||
        <name>PR_FAILURE</name> == <call><name>PR_SetThreadPrivate</name><argument_list>(<argument><expr><name>gStackBaseThreadIndex</name></expr></argument>, <argument><expr>&amp;<name>stackDummy</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr>1</expr>;</return>
    }</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>gStackBase</name> = (<name>jsuword</name>) &amp;<name>stackDummy</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_OS2</name></cpp:ifdef>
   <comment type="block">/* these streams are normally line buffered on OS/2 and need a \n, *
    * so we need to unbuffer then to get a reasonable prompt          */</comment>
    <expr_stmt><expr><call><name>setbuf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setbuf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>MaybeOverrideOutFileFromEnv</name><argument_list>(<argument><expr>"JS_STDERR"</expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr>&amp;<name>gErrFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MaybeOverrideOutFileFromEnv</name><argument_list>(<argument><expr>"JS_STDOUT"</expr></argument>, <argument><expr><name>stdout</name></expr></argument>, <argument><expr>&amp;<name>gOutFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>argc</name>--</expr>;</expr_stmt>
    <expr_stmt><expr><name>argv</name>++</expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_WIN</name></cpp:ifdef>
    <comment type="line">// Set the timer calibration delay count to 0 so we get high</comment>
    <comment type="line">// resolution right away, which we need for precise benchmarking.</comment>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>CALIBRATION_DELAY_COUNT</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>CALIBRATION_DELAY_COUNT</name> = 0</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>rt</name> = <call><name>JS_NewRuntime</name><argument_list>(<argument><expr>160L * 1024L * 1024L</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>rt</name></expr>)</condition><then>
        <return>return <expr>1</expr>;</return></then></if>

    <if>if <condition>(<expr>!<call><name>InitWatchdog</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr>1</expr>;</return></then></if>

    <expr_stmt><expr><name>cx</name> = <call><name>NewContext</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>cx</name></expr>)</condition><then>
        <return>return <expr>1</expr>;</return></then></if>

    <expr_stmt><expr><call><name>JS_SetOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JS_GetOptions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call> | <name>JSOPTION_ANONFUNFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_SetGCParameterForThread</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSGC_MAX_CODE_CACHE_BYTES</name></expr></argument>, <argument><expr>16 * 1024 * 1024</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> = <call><name>Shell</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>DestroyContext</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>KillWatchdog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>JS_DestroyRuntime</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ShutDown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>
</unit>
