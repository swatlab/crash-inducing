<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="00820490ccf6398c6126d8a6a7870ca5d2d3f0f5.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* vim: set ts=2 sw=2 et tw=80: */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLScriptElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMNSHTMLScriptElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMEventTarget.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGenericHTMLElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGkAtoms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStyleConsts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsScriptElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIURI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNetUtil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsUnicharUtils.h"</cpp:file></cpp:include>  <comment type="line">// for nsCaseInsensitiveStringComparator()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptGlobalObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIXPConnect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsServiceManagerUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptEventHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentErrors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIArray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsTArray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMJSUtils.h"</cpp:file></cpp:include>

<comment type="line">//</comment>
<comment type="line">// Helper class used to support &lt;SCRIPT FOR=object EVENT=handler ...&gt;</comment>
<comment type="line">// style script tags...</comment>
<comment type="line">//</comment>
<class>class <name>nsHTMLScriptEventHandler</name> <super>: <specifier>public</specifier> <name>nsIScriptEventHandler</name></super>
<block>{<private type="default">
</private><public>public:
  <constructor_decl><name>nsHTMLScriptEventHandler</name><parameter_list>(<param><decl><type><name>nsIDOMHTMLScriptElement</name> *</type><name>aOuter</name></decl></param>)</parameter_list>;</constructor_decl>
  <destructor><specifier>virtual</specifier> <name>~<name>nsHTMLScriptEventHandler</name></name><parameter_list>()</parameter_list> <block>{}</block></destructor>

  <comment type="line">// nsISupports</comment>
  <function_decl><type><name>NS_DECL_ISUPPORTS</name>

  <comment type="line">// nsIScriptEventHandler interface...</comment>
  <name>NS_DECL_NSISCRIPTEVENTHANDLER</name>

  <comment type="line">// Helper method called by nsHTMLScriptElement</comment>
  <name>nsresult</name></type> <name>ParseEventString</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aValue</name></decl></param>)</parameter_list>;</function_decl>

</public><protected>protected:
  <comment type="line">// WEAK reference to outer object.</comment>
  <decl_stmt><decl><type><name>nsIDOMHTMLScriptElement</name> *</type><name>mOuter</name></decl>;</decl_stmt>

  <comment type="line">// Javascript argument names must be ASCII...</comment>
  <decl_stmt><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsCString</name></expr></argument>&gt;</argument_list></name></type> <name>mArgNames</name></decl>;</decl_stmt>

  <comment type="line">// The event name is kept UCS2 for 'quick comparisions'...</comment>
  <decl_stmt><decl><type><name>nsString</name></type> <name>mEventName</name></decl>;</decl_stmt>
</protected>}</block>;</class>


<constructor><name><name>nsHTMLScriptEventHandler</name>::<name>nsHTMLScriptEventHandler</name></name><parameter_list>(<param><decl><type><name>nsIDOMHTMLScriptElement</name> *</type><name>aOuter</name></decl></param>)</parameter_list>
<block>{

  <comment type="line">// Weak reference...</comment>
  <expr_stmt><expr><name>mOuter</name> = <name>aOuter</name></expr>;</expr_stmt>
}</block></constructor>

<comment type="line">//</comment>
<comment type="line">// nsISupports Implementation</comment>
<comment type="line">//</comment>
<macro><name>NS_IMPL_ADDREF</name> <argument_list>(<argument>nsHTMLScriptEventHandler</argument>)</argument_list></macro>
<macro><name>NS_IMPL_RELEASE</name><argument_list>(<argument>nsHTMLScriptEventHandler</argument>)</argument_list></macro>

<macro><name>NS_INTERFACE_MAP_BEGIN</name><argument_list>(<argument>nsHTMLScriptEventHandler</argument>)</argument_list></macro>
<comment type="line">// All interfaces are delegated to the outer object...</comment>
<macro><name>NS_INTERFACE_MAP_END_AGGREGATED</name><argument_list>(<argument>mOuter</argument>)</argument_list></macro>


<comment type="line">//</comment>
<comment type="line">// Parse the EVENT attribute into an array of argument names...</comment>
<comment type="line">//</comment>
<function><type><name>nsresult</name></type> <name><name>nsHTMLScriptEventHandler</name>::<name>ParseEventString</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aValue</name></decl></param>)</parameter_list>
<block>{
  <function_decl><type><name>nsAutoString</name></type> <name>eventSig</name><parameter_list>(<param><decl><type><name>aValue</name></type></decl></param>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name><name>nsAutoString</name>::<name>const_iterator</name></name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>next</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

  <comment type="line">// Clear out the arguments array...</comment>
  <expr_stmt><expr><call><name><name>mArgNames</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Eliminate all whitespace.</comment>
  <expr_stmt><expr><call><name><name>eventSig</name>.<name>StripWhitespace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Parse out the event name from the signature...</comment>
  <expr_stmt><expr><call><name><name>eventSig</name>.<name>BeginReading</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>eventSig</name>.<name>EndReading</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>next</name> = <name>start</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>FindCharInReadable</name><argument_list>(<argument><expr>'('</expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mEventName</name> = <call><name>Substring</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <comment type="line">// There is no opening parenthesis...</comment>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></else></if>

  <expr_stmt><expr>++<name>next</name></expr>;</expr_stmt>  <comment type="line">// skip over the '('</comment>
  <expr_stmt><expr>--<name>end</name></expr>;</expr_stmt>   <comment type="line">// Move back 1 character -- hopefully to the ')'</comment>
  <if>if <condition>(<expr>*<name>end</name> != ')'</expr>)</condition><then> <block>{
    <comment type="line">// The arguments are not enclosed in parentheses...</comment>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// Javascript expects all argument names to be ASCII.</comment>
  <decl_stmt><decl><type><name>NS_LossyConvertUTF16toASCII</name></type> <name>sig</name><argument_list>(<argument><expr><call><name>Substring</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Store each (comma separated) argument in mArgNames</comment>
  <expr_stmt><expr><call><name>ParseString</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr>','</expr></argument>, <argument><expr><name>mArgNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLScriptEventHandler</name>::<name>IsSameEvent</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aObjectName</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aEventName</name></decl></param>,
                                      <param><decl><type><name>PRUint32</name></type> <name>aArgCount</name></decl></param>,
                                      <param><decl><type><name>PRBool</name> *</type><name>aResult</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aResult</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

  <comment type="line">// First compare the event name.</comment>
  <comment type="line">// Currently, both the case and number of arguments associated with the</comment>
  <comment type="line">// event are ignored...</comment>
  <if>if <condition>(<expr><call><name><name>aEventName</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>mEventName</name></expr></argument>, <argument><expr><call><name>nsCaseInsensitiveStringComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>id</name></decl>;</decl_stmt>

    <comment type="line">// Next compare the target object...</comment>
    <expr_stmt><expr><call><name><name>mOuter</name>-&gt;<name>GetHtmlFor</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name><name>aObjectName</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>aResult</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLScriptEventHandler</name>::<name>Invoke</name></name><parameter_list>(<param><decl><type><name>nsISupports</name> *</type><name>aTargetObject</name></decl></param>,
                                 <param><decl><type><name>void</name> *</type><name>aArgs</name></decl></param>,
                                 <param><decl><type><name>PRUint32</name></type> <name>aArgCount</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>scriptBody</name></decl>;</decl_stmt>

  <comment type="line">// Initial sanity checking</comment>
  <comment type="line">//</comment>
  <comment type="line">// It's 'ok' for aArgCount to be different from mArgNames.Count().</comment>
  <comment type="line">// This just means that the number of args being passed in is</comment>
  <comment type="line">// different from the number it is compiled with...</comment>
  <if>if <condition>(<expr>!<name>aTargetObject</name> || (<name>aArgCount</name> &amp;&amp; !<name>aArgs</name>)</expr> )</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// Get the text of the script to execute...</comment>
  <expr_stmt><expr><name>rv</name> = <call><name><name>mOuter</name>-&gt;<name>GetText</name></name><argument_list>(<argument><expr><name>scriptBody</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// Get the line number of the script (used when compiling)</comment>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>lineNumber</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScriptElement</name></expr></argument>&gt;</argument_list></name></type> <name>sele</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mOuter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>sele</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>lineNumber</name> = <call><name><name>sele</name>-&gt;<name>GetScriptLineNumber</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// Get the script context...</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocument</name></expr></argument>&gt;</argument_list></name></type> <name>domdoc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScriptContext</name></expr></argument>&gt;</argument_list></name></type> <name>scriptContext</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsIScriptGlobalObject</name> *</type><name>sgo</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>mOuter</name>-&gt;<name>GetOwnerDocument</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>domdoc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></type> <name>doc</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>domdoc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>doc</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>sgo</name> = <call><name><name>doc</name>-&gt;<name>GetScriptGlobalObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>sgo</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>scriptContext</name> = <call><name><name>sgo</name>-&gt;<name>GetContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
  <comment type="line">// Fail if is no script context is available...</comment>
  <if>if <condition>(<expr>!<name>scriptContext</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// wrap the target object...</comment>
  <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name> <init>= <expr>(<name>JSContext</name> *)<call><name><name>scriptContext</name>-&gt;<name>GetNativeContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JSObject</name> *</type><name>scope</name> <init>= <expr><call><name><name>sgo</name>-&gt;<name>GetGlobalJSObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXPConnectJSObjectHolder</name></expr></argument>&gt;</argument_list></name></type> <name>holder</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>nsContentUtils</name>::<name>WrapNative</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>, <argument><expr><name>aTargetObject</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>,
                                  <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Build up the array of argument names...</comment>
  <comment type="line">//</comment>
  <comment type="line">// Since this array is temporary (and const) the 'argument name' strings</comment>
  <comment type="line">// are NOT copied.  Instead each element points into the underlying buffer</comment>
  <comment type="line">// of the corresponding element in the mArgNames array...</comment>
  <comment type="line">//</comment>
  <comment type="line">// Remember, this is the number of arguments to compile the function with...</comment>
  <comment type="line">// So, use mArgNames.Count()</comment>
  <comment type="line">//</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kMaxArgsOnStack</name> <init>= <expr>10</expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>argc</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>**</type> <name>args</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type>  <name><name>stackArgs</name><index>[<expr><name>kMaxArgsOnStack</name></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><name>args</name> = <name>stackArgs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>argc</name> = <call><name>PRInt32</name><argument_list>(<argument><expr><call><name><name>mArgNames</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// If there are too many arguments then allocate the array from the heap</comment>
  <comment type="line">// otherwise build it up on the stack...</comment>
  <if>if <condition>(<expr><name>argc</name> &gt;= <name>kMaxArgsOnStack</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>args</name> = new const <name>char</name>*<index>[<expr><name>argc</name>+1</expr>]</index></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>args</name></expr>)</condition><then> <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>
  }</block></then></if>

  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
    <expr_stmt><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>mArgNames</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <comment type="line">// Null terminate for good luck ;-)</comment>
  <expr_stmt><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name> = <name>nsnull</name></expr>;</expr_stmt>

  <comment type="line">// Compile the event handler script...</comment>
  <decl_stmt><decl><type><name>void</name>*</type> <name>funcObject</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_NAMED_LITERAL_CSTRING</name><argument_list>(<argument><expr><name>funcName</name></expr></argument>, <argument><expr>"anonymous"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rv</name> = <call><name><name>scriptContext</name>-&gt;<name>CompileFunction</name></name><argument_list>(<argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>funcName</name></expr></argument>,   <comment type="line">// method name</comment>
                                      <argument><expr><name>argc</name></expr></argument>,       <comment type="line">// no of arguments</comment>
                                      <argument><expr><name>args</name></expr></argument>,       <comment type="line">// argument names</comment>
                                      <argument><expr><name>scriptBody</name></expr></argument>, <comment type="line">// script text</comment>
                                      <argument><expr><name>nsnull</name></expr></argument>,     <comment type="line">// XXX: URL</comment>
                                      <argument><expr><name>lineNumber</name></expr></argument>, <comment type="line">// line no (for errors)</comment>
                                      <argument><expr><name>JSVERSION_DEFAULT</name></expr></argument>, <comment type="line">// Default for now?</comment>
                                      <argument><expr><name>PR_FALSE</name></expr></argument>,   <comment type="line">// shared ?</comment>
                                      <argument><expr>&amp;<name>funcObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Free the argument names array if it was heap allocated...</comment>
  <if>if <condition>(<expr><name>args</name> != <name>stackArgs</name></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <index>[]</index> <name>args</name></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// Fail if there was an error compiling the script.</comment>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// Create an nsIArray for the args (the JS context will efficiently</comment>
  <comment type="line">// re-fetch the jsvals from this object)</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIArray</name></expr></argument>&gt;</argument_list></name></type> <name>argarray</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name>NS_CreateJSArgv</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>aArgCount</name></expr></argument>, <argument><expr>(<name>jsval</name> *)<name>aArgs</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>argarray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <comment type="line">// Invoke the event handler script...</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIVariant</name></expr></argument>&gt;</argument_list></name></type> <name>ret</name></decl>;</decl_stmt>
  <return>return <expr><call><name><name>scriptContext</name>-&gt;<name>CallEventHandler</name></name><argument_list>(<argument><expr><name>aTargetObject</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>, <argument><expr><name>funcObject</name></expr></argument>,
                                         <argument><expr><name>argarray</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<class>class <name>nsHTMLScriptElement</name> <super>: <specifier>public</specifier> <name>nsGenericHTMLElement</name>,
                            <specifier>public</specifier> <name>nsIDOMHTMLScriptElement</name>,
                            <specifier>public</specifier> <name>nsIDOMNSHTMLScriptElement</name>,
                            <specifier>public</specifier> <name>nsScriptElement</name></super>
<block>{<private type="default">
</private><public>public:
  <constructor_decl><name>nsHTMLScriptElement</name><parameter_list>(<param><decl><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name></type> <name>aNodeInfo</name></decl></param>,
                      <param><decl><type><name>PRUint32</name></type> <name>aFromParser</name></decl></param>)</parameter_list>;</constructor_decl>
  <destructor_decl><specifier>virtual</specifier> <name>~<name>nsHTMLScriptElement</name></name><parameter_list>()</parameter_list>;</destructor_decl>

  <comment type="line">// nsISupports</comment>
  <decl_stmt><decl><type><name>NS_DECL_ISUPPORTS_INHERITED</name></type>

  <comment type="line">// nsIDOMNode</comment>
  <name>NS_FORWARD_NSIDOMNODE</name><argument_list>(<argument><expr><name><name>nsGenericHTMLElement</name>::</name></expr></argument>)</argument_list>

  <comment type="line">// nsIDOMElement</comment>
  <name>NS_FORWARD_NSIDOMELEMENT</name><argument_list>(<argument><expr><name><name>nsGenericHTMLElement</name>::</name></expr></argument>)</argument_list>

  <comment type="line">// nsIDOMHTMLElement</comment>
  <name>NS_FORWARD_NSIDOMHTMLELEMENT</name><argument_list>(<argument><expr><name><name>nsGenericHTMLElement</name>::</name></expr></argument>)</argument_list>

  <name>NS_DECL_NSIDOMHTMLSCRIPTELEMENT</name>
  <name>NS_DECL_NSIDOMNSHTMLSCRIPTELEMENT</name>

  <comment type="line">// nsIScriptElement</comment>
  virtual <name>void</name> <name>GetScriptType</name><argument_list>(<argument><expr><name>nsAString</name>&amp; <name>type</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>GetScriptText</name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>text</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>GetScriptCharset</name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>charset</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>FreezeUriAsyncDefer</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// nsIContent</comment>
  <function_decl><type><specifier>virtual</specifier> <name>nsresult</name></type> <name>BindToTree</name><parameter_list>(<param><decl><type><name>nsIDocument</name>*</type> <name>aDocument</name></decl></param>, <param><decl><type><name>nsIContent</name>*</type> <name>aParent</name></decl></param>,
                              <param><decl><type><name>nsIContent</name>*</type> <name>aBindingParent</name></decl></param>,
                              <param><decl><type><name>PRBool</name></type> <name>aCompileEventHandlers</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>virtual</specifier> <name>nsresult</name></type> <name>GetInnerHTML</name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aInnerHTML</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>nsresult</name></type> <name>SetInnerHTML</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aInnerHTML</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>nsresult</name></type> <name>DoneAddingChildren</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aHaveNotified</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>PRBool</name></type> <name>IsDoneAddingChildren</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>virtual</specifier> <name>nsresult</name></type> <name>Clone</name><parameter_list>(<param><decl><type><name>nsINodeInfo</name> *</type><name>aNodeInfo</name></decl></param>, <param><decl><type><name>nsINode</name> **</type><name>aResult</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

  <function_decl><type><specifier>virtual</specifier> <name>nsXPCClassInfo</name>*</type> <name>GetClassInfo</name><parameter_list>()</parameter_list>;</function_decl>
</public><protected>protected:
  <function_decl><type><name>PRBool</name></type> <name>IsOnloadEventForWindow</name><parameter_list>()</parameter_list>;</function_decl>


  <comment type="line">// Pointer to the script handler helper object (OWNING reference)</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsHTMLScriptEventHandler</name></expr></argument>&gt;</argument_list></name></type> <name>mScriptEventHandler</name></decl>;</decl_stmt>

  <comment type="line">// nsScriptElement</comment>
  <function_decl><type><specifier>virtual</specifier> <name>PRBool</name></type> <name>HasScriptContent</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>nsresult</name></type> <name>MaybeProcessScript</name><parameter_list>()</parameter_list>;</function_decl>
</protected>}</block>;</class>


<macro><name>NS_IMPL_NS_NEW_HTML_ELEMENT_CHECK_PARSER</name><argument_list>(<argument>Script</argument>)</argument_list></macro>


<constructor><name><name>nsHTMLScriptElement</name>::<name>nsHTMLScriptElement</name></name><parameter_list>(<param><decl><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name></type> <name>aNodeInfo</name></decl></param>,
                                         <param><decl><type><name>PRUint32</name></type> <name>aFromParser</name></decl></param>)</parameter_list>
  <member_list>: <call><name>nsGenericHTMLElement</name><argument_list>(<argument><expr><name>aNodeInfo</name></expr></argument>)</argument_list></call>
</member_list><block>{
  <expr_stmt><expr><name>mDoneAddingChildren</name> = !<name>aFromParser</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMutationObserver</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>nsHTMLScriptElement</name>::~<name>nsHTMLScriptElement</name></name><parameter_list>()</parameter_list>
<block>{
}</block></destructor>


<macro><name>NS_IMPL_ADDREF_INHERITED</name><argument_list>(<argument>nsHTMLScriptElement</argument>, <argument>nsGenericElement</argument>)</argument_list></macro>
<macro><name>NS_IMPL_RELEASE_INHERITED</name><argument_list>(<argument>nsHTMLScriptElement</argument>, <argument>nsGenericElement</argument>)</argument_list></macro>

<macro><name>DOMCI_NODE_DATA</name><argument_list>(<argument>HTMLScriptElement</argument>, <argument>nsHTMLScriptElement</argument>)</argument_list></macro>

<comment type="line">// QueryInterface implementation for nsHTMLScriptElement</comment>
<macro><name>NS_INTERFACE_TABLE_HEAD</name><argument_list>(<argument>nsHTMLScriptElement</argument>)</argument_list></macro>
  <macro><name>NS_HTML_CONTENT_INTERFACE_TABLE5</name><argument_list>(<argument>nsHTMLScriptElement</argument>,
                                   <argument>nsIDOMHTMLScriptElement</argument>,
                                   <argument>nsIScriptLoaderObserver</argument>,
                                   <argument>nsIScriptElement</argument>,
                                   <argument>nsIDOMNSHTMLScriptElement</argument>,
                                   <argument>nsIMutationObserver</argument>)</argument_list></macro>
  <macro><name>NS_HTML_CONTENT_INTERFACE_TABLE_TO_MAP_SEGUE</name><argument_list>(<argument>nsHTMLScriptElement</argument>,
                                               <argument>nsGenericHTMLElement</argument>)</argument_list></macro>
  <if>if <condition>(<expr><name>mScriptEventHandler</name> &amp;&amp; <call><name><name>aIID</name>.<name>Equals</name></name><argument_list>(<argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsIScriptEventHandler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><name>foundInterface</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIScriptEventHandler</name>*</expr></argument>&gt;</argument_list></name>
                                <argument_list>(<argument><expr><name>mScriptEventHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
  <macro><name>NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO</name><argument_list>(<argument>HTMLScriptElement</argument>)</argument_list></macro>
<function><type><name>NS_HTML_CONTENT_INTERFACE_MAP_END</name>


<name>nsresult</name></type>
<name><name>nsHTMLScriptElement</name>::<name>BindToTree</name></name><parameter_list>(<param><decl><type><name>nsIDocument</name>*</type> <name>aDocument</name></decl></param>, <param><decl><type><name>nsIContent</name>*</type> <name>aParent</name></decl></param>,
                                <param><decl><type><name>nsIContent</name>*</type> <name>aBindingParent</name></decl></param>,
                                <param><decl><type><name>PRBool</name></type> <name>aCompileEventHandlers</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsGenericHTMLElement</name>::<name>BindToTree</name></name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>, <argument><expr><name>aParent</name></expr></argument>,
                                                 <argument><expr><name>aBindingParent</name></expr></argument>,
                                                 <argument><expr><name>aCompileEventHandlers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>aDocument</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>MaybeProcessScript</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function></else></if>

<function><type><name>nsresult</name></type>
<name><name>nsHTMLScriptElement</name>::<name>Clone</name></name><parameter_list>(<param><decl><type><name>nsINodeInfo</name> *</type><name>aNodeInfo</name></decl></param>, <param><decl><type><name>nsINode</name> **</type><name>aResult</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <expr_stmt><expr>*<name>aResult</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name></type> <name>ni</name> <init>= <expr><name>aNodeInfo</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsHTMLScriptElement</name>*</type> <name>it</name> <init>= <expr>new <call><name>nsHTMLScriptElement</name><argument_list>(<argument><expr><call><name><name>ni</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>it</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINode</name></expr></argument>&gt;</argument_list></name></type> <name>kungFuDeathGrip</name> <init>= <expr><name>it</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>CopyInnerTo</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// The clone should be marked evaluated if we are.</comment>
  <expr_stmt><expr><name><name>it</name>-&gt;<name>mIsEvaluated</name></name> = <name>mIsEvaluated</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>it</name>-&gt;<name>mLineNumber</name></name> = <name>mLineNumber</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>it</name>-&gt;<name>mMalformed</name></name> = <name>mMalformed</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>kungFuDeathGrip</name>.<name>swap</name></name><argument_list>(<argument><expr>*<name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLScriptElement</name>::<name>GetText</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>GetNodeTextContent</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLScriptElement</name>::<name>SetText</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsContentUtils</name>::<name>SetNodeTextContent</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<macro><name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument>nsHTMLScriptElement</argument>, <argument>Charset</argument>, <argument>charset</argument>)</argument_list></macro>
<macro><name>NS_IMPL_BOOL_ATTR</name><argument_list>(<argument>nsHTMLScriptElement</argument>, <argument>Defer</argument>, <argument>defer</argument>)</argument_list></macro>
<macro><name>NS_IMPL_BOOL_ATTR</name><argument_list>(<argument>nsHTMLScriptElement</argument>, <argument>Async</argument>, <argument>async</argument>)</argument_list></macro>
<macro><name>NS_IMPL_URI_ATTR</name><argument_list>(<argument>nsHTMLScriptElement</argument>, <argument>Src</argument>, <argument>src</argument>)</argument_list></macro>
<macro><name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument>nsHTMLScriptElement</argument>, <argument>Type</argument>, <argument>type</argument>)</argument_list></macro>
<macro><name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument>nsHTMLScriptElement</argument>, <argument>HtmlFor</argument>, <argument>_for</argument>)</argument_list></macro>
<macro><name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument>nsHTMLScriptElement</argument>, <argument>Event</argument>, <argument>event</argument>)</argument_list></macro>

<function><type><name>nsresult</name></type>
<name><name>nsHTMLScriptElement</name>::<name>GetInnerHTML</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aInnerHTML</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>GetNodeTextContent</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>aInnerHTML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsHTMLScriptElement</name>::<name>SetInnerHTML</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aInnerHTML</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>nsContentUtils</name>::<name>SetNodeTextContent</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aInnerHTML</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsHTMLScriptElement</name>::<name>DoneAddingChildren</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aHaveNotified</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mDoneAddingChildren</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>MaybeProcessScript</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>mIsEvaluated</name></expr>)</condition><then> <block>{
    <comment type="line">// Need to thaw the script uri here to allow another script to cause</comment>
    <comment type="line">// execution later.</comment>
    <expr_stmt><expr><name>mFrozen</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mUri</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsHTMLScriptElement</name>::<name>IsDoneAddingChildren</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr><name>mDoneAddingChildren</name></expr>;</return>
}</block></function>

<comment type="line">// variation of this code in nsSVGScriptElement - check if changes</comment>
<comment type="line">// need to be transfered when modifying</comment>

<function><type><name>void</name></type>
<name><name>nsHTMLScriptElement</name>::<name>GetScriptType</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>type</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>GetType</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsHTMLScriptElement</name>::<name>GetScriptText</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>text</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>GetText</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsHTMLScriptElement</name>::<name>GetScriptCharset</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>charset</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>GetCharset</name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsHTMLScriptElement</name>::<name>FreezeUriAsyncDefer</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mFrozen</name></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>
  
  <comment type="line">// variation of this code in nsSVGScriptElement - check if changes</comment>
  <comment type="line">// need to be transfered when modifying</comment>
  <if>if <condition>(<expr><call><name>HasAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>src</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>src</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetSrc</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_NewURI</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mUri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PRBool</name></type> <name>defer</name></decl>, <decl><type ref="prev"/><name>async</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetAsync</name><argument_list>(<argument><expr>&amp;<name>async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetDefer</name><argument_list>(<argument><expr>&amp;<name>defer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>mDefer</name> = !<name>async</name> &amp;&amp; <name>defer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mAsync</name> = <name>async</name></expr>;</expr_stmt>
  }</block></then></if>
  
  <expr_stmt><expr><name>mFrozen</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsHTMLScriptElement</name>::<name>HasScriptContent</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr>(<name>mFrozen</name> ? !!<name>mUri</name> : <call><name>HasAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>src</name></name></expr></argument>)</argument_list></call>) ||
         <call><name><name>nsContentUtils</name>::<name>HasNonEmptyTextContent</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsHTMLScriptElement</name>::<name>MaybeProcessScript</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsScriptElement</name>::<name>MaybeProcessScript</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>rv</name> == <name>NS_CONTENT_SCRIPT_IS_EVENTHANDLER</name></expr>)</condition><then> <block>{
    <comment type="line">// Don't return NS_CONTENT_SCRIPT_IS_EVENTHANDLER since callers can't deal</comment>
    <expr_stmt><expr><name>rv</name> = <name>NS_OK</name></expr>;</expr_stmt>

    <comment type="line">// We tried to evaluate the script but realized it was an eventhandler</comment>
    <comment type="line">// mEvaluated will already be set at this point</comment>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>mIsEvaluated</name></expr></argument>, <argument><expr>"should have set mIsEvaluated already"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>mScriptEventHandler</name></expr></argument>, <argument><expr>"how could we have an SEH already?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>mScriptEventHandler</name> = new <call><name>nsHTMLScriptEventHandler</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mScriptEventHandler</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>event_val</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>event</name></name></expr></argument>, <argument><expr><name>event_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mScriptEventHandler</name>-&gt;<name>ParseEventString</name></name><argument_list>(<argument><expr><name>event_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>
</unit>
