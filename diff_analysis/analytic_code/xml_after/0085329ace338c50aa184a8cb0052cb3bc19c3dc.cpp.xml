<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0085329ace338c50aa184a8cb0052cb3bc19c3dc.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 *   Mozilla Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Vladimir Vukicevic &lt;vladimir@pobox.com&gt; (original author)
 *   Mark Steele &lt;mwsteele@gmail.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"WebGLContext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIConsoleService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsServiceManagerUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIClassInfoImpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIXPConnect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMError.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gfxContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gfxPattern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gfxUtils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CanvasUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"NativeJSContext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GLContextProvider.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SVG</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsSVGEffects.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prenv.h"</cpp:file></cpp:include>

<using>using namespace <name>mozilla</name>;</using>
<using>using namespace <name><name>mozilla</name>::<name>gl</name></name>;</using>

<function_decl><type><name>nsresult</name></type> <name>NS_NewCanvasRenderingContextWebGL</name><parameter_list>(<param><decl><type><name>nsICanvasRenderingContextWebGL</name>**</type> <name>aResult</name></decl></param>)</parameter_list>;</function_decl>

<function><type><name>nsresult</name></type>
<name>NS_NewCanvasRenderingContextWebGL</name><parameter_list>(<param><decl><type><name>nsICanvasRenderingContextWebGL</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nsICanvasRenderingContextWebGL</name>*</type> <name>ctx</name> <init>= <expr>new <call><name>WebGLContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aResult</name> = <name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<constructor><name><name>WebGLContext</name>::<name>WebGLContext</name></name><parameter_list>()</parameter_list>
    <member_list>: <call><name>mCanvasElement</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>,
      <call><name>gl</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>
</member_list><block>{
    <expr_stmt><expr><name>mWidth</name> = <name>mHeight</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>mGeneration</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>mInvalidated</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mResetLayer</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>mActiveTexture</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>mSynthesizedGLError</name> = <name>LOCAL_GL_NO_ERROR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mPixelStoreFlipY</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mPixelStorePremultiplyAlpha</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>mShaderValidation</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>mMapBuffers</name>.<name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mMapTextures</name>.<name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mMapPrograms</name>.<name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mMapShaders</name>.<name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mMapFramebuffers</name>.<name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mMapRenderbuffers</name>.<name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>WebGLContext</name>::~<name>WebGLContext</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>DestroyResourcesAndContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>DeleteTextureFunction</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUint32</name>&amp;</type> <name>aKey</name></decl></param>, <param><decl><type><name>WebGLTexture</name> *</type><name>aValue</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aData</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>gl</name>::<name>GLContext</name></name> *</type><name>gl</name> <init>= <expr>(<name><name>gl</name>::<name>GLContext</name></name> *) <name>aData</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<call><name><name>aValue</name>-&gt;<name>Deleted</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"Texture is still in mMapTextures, but is deleted?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GLuint</name></type> <name>name</name> <init>= <expr><call><name><name>aValue</name>-&gt;<name>GLName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>gl</name>-&gt;<name>fDeleteTextures</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>Delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>DeleteBufferFunction</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUint32</name>&amp;</type> <name>aKey</name></decl></param>, <param><decl><type><name>WebGLBuffer</name> *</type><name>aValue</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aData</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>gl</name>::<name>GLContext</name></name> *</type><name>gl</name> <init>= <expr>(<name><name>gl</name>::<name>GLContext</name></name> *) <name>aData</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<call><name><name>aValue</name>-&gt;<name>Deleted</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"Buffer is still in mMapBuffers, but is deleted?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GLuint</name></type> <name>name</name> <init>= <expr><call><name><name>aValue</name>-&gt;<name>GLName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>gl</name>-&gt;<name>fDeleteBuffers</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>Delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>DeleteFramebufferFunction</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUint32</name>&amp;</type> <name>aKey</name></decl></param>, <param><decl><type><name>WebGLFramebuffer</name> *</type><name>aValue</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aData</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>gl</name>::<name>GLContext</name></name> *</type><name>gl</name> <init>= <expr>(<name><name>gl</name>::<name>GLContext</name></name> *) <name>aData</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<call><name><name>aValue</name>-&gt;<name>Deleted</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"Framebuffer is still in mMapFramebuffers, but is deleted?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GLuint</name></type> <name>name</name> <init>= <expr><call><name><name>aValue</name>-&gt;<name>GLName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>gl</name>-&gt;<name>fDeleteFramebuffers</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>Delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>DeleteRenderbufferFunction</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUint32</name>&amp;</type> <name>aKey</name></decl></param>, <param><decl><type><name>WebGLRenderbuffer</name> *</type><name>aValue</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aData</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>gl</name>::<name>GLContext</name></name> *</type><name>gl</name> <init>= <expr>(<name><name>gl</name>::<name>GLContext</name></name> *) <name>aData</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<call><name><name>aValue</name>-&gt;<name>Deleted</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"Renderbuffer is still in mMapRenderbuffers, but is deleted?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GLuint</name></type> <name>name</name> <init>= <expr><call><name><name>aValue</name>-&gt;<name>GLName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>gl</name>-&gt;<name>fDeleteRenderbuffers</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>Delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>DeleteProgramFunction</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUint32</name>&amp;</type> <name>aKey</name></decl></param>, <param><decl><type><name>WebGLProgram</name> *</type><name>aValue</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aData</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>gl</name>::<name>GLContext</name></name> *</type><name>gl</name> <init>= <expr>(<name><name>gl</name>::<name>GLContext</name></name> *) <name>aData</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<call><name><name>aValue</name>-&gt;<name>Deleted</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"Program is still in mMapPrograms, but is deleted?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GLuint</name></type> <name>name</name> <init>= <expr><call><name><name>aValue</name>-&gt;<name>GLName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>gl</name>-&gt;<name>fDeleteProgram</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>Delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>DeleteShaderFunction</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUint32</name>&amp;</type> <name>aKey</name></decl></param>, <param><decl><type><name>WebGLShader</name> *</type><name>aValue</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aData</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>gl</name>::<name>GLContext</name></name> *</type><name>gl</name> <init>= <expr>(<name><name>gl</name>::<name>GLContext</name></name> *) <name>aData</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<call><name><name>aValue</name>-&gt;<name>Deleted</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"Shader is still in mMapShaders, but is deleted?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GLuint</name></type> <name>name</name> <init>= <expr><call><name><name>aValue</name>-&gt;<name>GLName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>gl</name>-&gt;<name>fDeleteShader</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>Delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>WebGLContext</name>::<name>DestroyResourcesAndContext</name></name><parameter_list>()</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>gl</name></expr>)</condition><then>
        <return>return;</return></then></if>

    <expr_stmt><expr><call><name><name>gl</name>-&gt;<name>MakeCurrent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>mMapTextures</name>.<name>EnumerateRead</name></name><argument_list>(<argument><expr><name>DeleteTextureFunction</name></expr></argument>, <argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mMapTextures</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>mMapBuffers</name>.<name>EnumerateRead</name></name><argument_list>(<argument><expr><name>DeleteBufferFunction</name></expr></argument>, <argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mMapBuffers</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>mMapPrograms</name>.<name>EnumerateRead</name></name><argument_list>(<argument><expr><name>DeleteProgramFunction</name></expr></argument>, <argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mMapPrograms</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>mMapShaders</name>.<name>EnumerateRead</name></name><argument_list>(<argument><expr><name>DeleteShaderFunction</name></expr></argument>, <argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mMapShaders</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>mMapFramebuffers</name>.<name>EnumerateRead</name></name><argument_list>(<argument><expr><name>DeleteFramebufferFunction</name></expr></argument>, <argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mMapFramebuffers</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>mMapRenderbuffers</name>.<name>EnumerateRead</name></name><argument_list>(<argument><expr><name>DeleteRenderbufferFunction</name></expr></argument>, <argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mMapRenderbuffers</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// We just got rid of everything, so the context had better</comment>
    <comment type="line">// have been going away.</comment>
    <expr_stmt><expr><call><name>printf_stderr</name><argument_list>(<argument><expr>"--- WebGL context destroyed: %p\n"</expr></argument>, <argument><expr><call><name><name>gl</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>gl</name> = <name>nsnull</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>WebGLContext</name>::<name>Invalidate</name></name><parameter_list>()</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>mCanvasElement</name></expr>)</condition><then>
        <return>return;</return></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SVG</name></cpp:ifdef>
    <expr_stmt><expr><call><name><name>nsSVGEffects</name>::<name>InvalidateDirectRenderingObservers</name></name><argument_list>(<argument><expr><call><name>HTMLCanvasElement</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr><name>mInvalidated</name></expr>)</condition><then>
        <return>return;</return></then></if>

    <expr_stmt><expr><name>mInvalidated</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HTMLCanvasElement</name><argument_list>()</argument_list></call>-&gt;<call><name>InvalidateFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* readonly attribute nsIDOMHTMLCanvasElement canvas; */</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>WebGLContext</name>::<name>GetCanvas</name></name><parameter_list>(<param><decl><type><name>nsIDOMHTMLCanvasElement</name> **</type><name>canvas</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>canvas</name> = <name>mCanvasElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">//</comment>
<comment type="line">// nsICanvasRenderingContextInternal</comment>
<comment type="line">//</comment>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>WebGLContext</name>::<name>SetCanvasElement</name></name><parameter_list>(<param><decl><type><name>nsHTMLCanvasElement</name>*</type> <name>aParentCanvas</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>aParentCanvas</name> &amp;&amp; !<call><name>SafeToCreateCanvas3DContext</name><argument_list>(<argument><expr><name>aParentCanvas</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>mCanvasElement</name> = <name>aParentCanvas</name></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>WebGLContext</name>::<name>SetDimensions</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>width</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>height</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>mWidth</name> == <name>width</name> &amp;&amp; <name>mHeight</name> == <name>height</name></expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

    <comment type="line">// If we already have a gl context, then we just need to resize</comment>
    <comment type="line">// FB0.</comment>
    <if>if <condition>(<expr><name>gl</name> &amp;&amp;
        <call><name><name>gl</name>-&gt;<name>ResizeOffscreen</name></name><argument_list>(<argument><expr><call><name>gfxIntSize</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <comment type="line">// everything's good, we're done here</comment>
        <expr_stmt><expr><name>mWidth</name> = <name>width</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mHeight</name> = <name>height</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mResetLayer</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// We're going to create an entirely new context.  If our</comment>
    <comment type="line">// generation is not 0 right now (that is, if this isn't the first</comment>
    <comment type="line">// context we're creating), we may have to dispatch a context lost</comment>
    <comment type="line">// event.</comment>

    <comment type="line">// If incrementing the generation would cause overflow,</comment>
    <comment type="line">// don't allow it.  Allowing this would allow us to use</comment>
    <comment type="line">// resource handles created from older context generations.</comment>
    <if>if <condition>(<expr>!(<name>mGeneration</name>+1).<call><name>valid</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if> <comment type="line">// exit without changing the value of mGeneration</comment>

    <comment type="line">// We're going to recreate our context, so make sure we clean up</comment>
    <comment type="line">// after ourselves.</comment>
    <expr_stmt><expr><call><name>DestroyResourcesAndContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name><name>gl</name>::<name>ContextFormat</name></name></type> <name>format</name><parameter_list>(<param><decl><type><name><name>gl</name>::<name>ContextFormat</name>::<name>BasicRGBA32</name></name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name><name>format</name>.<name>depth</name></name> = 16</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>format</name>.<name>minDepth</name></name> = 1</expr>;</expr_stmt>

    
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_WIN</name></cpp:ifdef>
    <comment type="line">// On Windows, we may have a choice of backends, including straight</comment>
    <comment type="line">// OpenGL, D3D through ANGLE via EGL, or straight EGL/GLES2.</comment>
    <comment type="line">// We don't differentiate the latter two yet, but we allow for</comment>
    <comment type="line">// a env var to try EGL first, instead of last.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>preferEGL</name> <init>= <expr><call><name>PR_GetEnv</name><argument_list>(<argument><expr>"MOZ_WEBGL_PREFER_EGL"</expr></argument>)</argument_list></call> != <name>nsnull</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// if we want EGL, try it first</comment>
    <if>if <condition>(<expr>!<name>gl</name> &amp;&amp; <name>preferEGL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>gl</name> = <call><name><name>gl</name>::<name>GLContextProviderEGL</name>::<name>CreateOffscreen</name></name><argument_list>(<argument><expr><call><name>gfxIntSize</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>gl</name> &amp;&amp; !<call><name>InitAndValidateGL</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>gl</name> = <name>nsnull</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <comment type="line">// if it failed, then try the default provider, whatever that is</comment>
    <if>if <condition>(<expr>!<name>gl</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>gl</name> = <call><name><name>gl</name>::<name>GLContextProvider</name>::<name>CreateOffscreen</name></name><argument_list>(<argument><expr><call><name>gfxIntSize</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>gl</name> &amp;&amp; !<call><name>InitAndValidateGL</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>gl</name> = <name>nsnull</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <comment type="line">// if that failed, and we weren't already preferring EGL, try it now.</comment>
    <if>if <condition>(<expr>!<name>gl</name> &amp;&amp; !<name>preferEGL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>gl</name> = <call><name><name>gl</name>::<name>GLContextProviderEGL</name>::<name>CreateOffscreen</name></name><argument_list>(<argument><expr><call><name>gfxIntSize</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>gl</name> &amp;&amp; !<call><name>InitAndValidateGL</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>gl</name> = <name>nsnull</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="line">// other platforms just use whatever the default is</comment>
    <if>if <condition>(<expr>!<name>gl</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>gl</name> = <call><name><name>gl</name>::<name>GLContextProvider</name>::<name>CreateOffscreen</name></name><argument_list>(<argument><expr><call><name>gfxIntSize</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>gl</name> &amp;&amp; !<call><name>InitAndValidateGL</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>gl</name> = <name>nsnull</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// last chance, try OSMesa</comment>
    <if>if <condition>(<expr>!<name>gl</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>gl</name> = <call><name><name>gl</name>::<name>GLContextProviderOSMesa</name>::<name>CreateOffscreen</name></name><argument_list>(<argument><expr><call><name>gfxIntSize</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>gl</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name>InitAndValidateGL</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>gl</name> = <name>nsnull</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <comment type="line">// make sure we notify always in this case, because it's likely going to be</comment>
                <comment type="line">// painfully slow</comment>
                <expr_stmt><expr><call><name>LogMessage</name><argument_list>(<argument><expr>"WebGL: Using software rendering via OSMesa"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr>!<name>gl</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessage</name><argument_list>(<argument><expr>"WebGL: Can't get a usable OpenGL context."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>printf_stderr</name> <argument_list>(<argument><expr>"--- WebGL context created: %p\n"</expr></argument>, <argument><expr><call><name><name>gl</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>mWidth</name> = <name>width</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mHeight</name> = <name>height</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mResetLayer</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

    <comment type="line">// increment the generation number</comment>
    <expr_stmt><expr>++<name>mGeneration</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
    if (mGeneration &gt; 0) {
        <comment type="line">// XXX dispatch context lost event</comment>
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>MakeContextCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure that we clear this out, otherwise</comment>
    <comment type="line">// we'll end up displaying random memory</comment>
    <expr_stmt><expr><call><name><name>gl</name>-&gt;<name>fBindFramebuffer</name></name><argument_list>(<argument><expr><name>LOCAL_GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><call><name><name>gl</name>-&gt;<name>GetOffscreenFBO</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gl</name>-&gt;<name>fViewport</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>mWidth</name></expr></argument>, <argument><expr><name>mHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gl</name>-&gt;<name>fClearColor</name></name><argument_list>(<argument><expr>0.0f</expr></argument>, <argument><expr>0.0f</expr></argument>, <argument><expr>0.0f</expr></argument>, <argument><expr>0.0f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gl</name>-&gt;<name>fClearDepth</name></name><argument_list>(<argument><expr>1.0f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gl</name>-&gt;<name>fClearStencil</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gl</name>-&gt;<name>fClear</name></name><argument_list>(<argument><expr><name>LOCAL_GL_COLOR_BUFFER_BIT</name> | <name>LOCAL_GL_DEPTH_BUFFER_BIT</name> | <name>LOCAL_GL_STENCIL_BUFFER_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>WebGLContext</name>::<name>Render</name></name><parameter_list>(<param><decl><type><name>gfxContext</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name><name>gfxPattern</name>::<name>GraphicsFilter</name></name></type> <name>f</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>gl</name></expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>gfxImageSurface</name></expr></argument>&gt;</argument_list></name></type> <name>surf</name> <init>= <expr>new <call><name>gfxImageSurface</name><argument_list>(<argument><expr><call><name>gfxIntSize</name><argument_list>(<argument><expr><name>mWidth</name></expr></argument>, <argument><expr><name>mHeight</name></expr></argument>)</argument_list></call></expr></argument>,
                                                         <argument><expr><name><name>gfxASurface</name>::<name>ImageFormatARGB32</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>surf</name>-&gt;<name>CairoStatus</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>MakeContextCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gl</name>-&gt;<name>fReadPixels</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>mWidth</name></expr></argument>, <argument><expr><name>mHeight</name></expr></argument>,
                    <argument><expr><name>LOCAL_GL_BGRA</name></expr></argument>,
                    <argument><expr><name>LOCAL_GL_UNSIGNED_INT_8_8_8_8_REV</name></expr></argument>,
                    <argument><expr><call><name><name>surf</name>-&gt;<name>Data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>gfxUtils</name>::<name>PremultiplyImageSurface</name></name><argument_list>(<argument><expr><name>surf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>gfxPattern</name></expr></argument>&gt;</argument_list></name></type> <name>pat</name> <init>= <expr>new <call><name>gfxPattern</name><argument_list>(<argument><expr><name>surf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pat</name>-&gt;<name>SetFilter</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ctx</name>-&gt;<name>NewPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ctx</name>-&gt;<name>PixelSnappedRectangleAndSetPattern</name></name><argument_list>(<argument><expr><call><name>gfxRect</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>mWidth</name></expr></argument>, <argument><expr><name>mHeight</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ctx</name>-&gt;<name>Fill</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>WebGLContext</name>::<name>GetInputStream</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>aMimeType</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>PRUnichar</name>*</type> <name>aEncoderOptions</name></decl></param>,
                             <param><decl><type><name>nsIInputStream</name> **</type><name>aStream</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>

    <comment type="line">// XXX fix this</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
    if (!mGLPbuffer ||
        !mGLPbuffer-&gt;ThebesSurface())
        return NS_ERROR_FAILURE;

    nsresult rv;
    const char encoderPrefix[] = "@mozilla.org/image/encoder;2?type=";
    nsAutoArrayPtr&lt;char&gt; conid(new (std::nothrow) char[strlen(encoderPrefix) + strlen(aMimeType) + 1]);

    if (!conid)
        return NS_ERROR_OUT_OF_MEMORY;

    strcpy(conid, encoderPrefix);
    strcat(conid, aMimeType);

    nsCOMPtr&lt;imgIEncoder&gt; encoder = do_CreateInstance(conid);
    if (!encoder)
        return NS_ERROR_FAILURE;

    nsAutoArrayPtr&lt;PRUint8&gt; imageBuffer(new (std::nothrow) PRUint8[mWidth * mHeight * 4]);
    if (!imageBuffer)
        return NS_ERROR_OUT_OF_MEMORY;

    nsRefPtr&lt;gfxImageSurface&gt; imgsurf = new gfxImageSurface(imageBuffer.get(),
                                                            gfxIntSize(mWidth, mHeight),
                                                            mWidth * 4,
                                                            gfxASurface::ImageFormatARGB32);

    if (!imgsurf || imgsurf-&gt;CairoStatus())
        return NS_ERROR_FAILURE;

    nsRefPtr&lt;gfxContext&gt; ctx = new gfxContext(imgsurf);

    if (!ctx || ctx-&gt;HasError())
        return NS_ERROR_FAILURE;

    nsRefPtr&lt;gfxASurface&gt; surf = mGLPbuffer-&gt;ThebesSurface();
    nsRefPtr&lt;gfxPattern&gt; pat = CanvasGLThebes::CreatePattern(surf);
    gfxMatrix m;
    m.Translate(gfxPoint(0.0, mGLPbuffer-&gt;Height()));
    m.Scale(1.0, -1.0);
    pat-&gt;SetMatrix(m);

    <comment type="line">// XXX I don't want to use PixelSnapped here, but layout doesn't guarantee</comment>
    <comment type="line">// pixel alignment for this stuff!</comment>
    ctx-&gt;NewPath();
    ctx-&gt;PixelSnappedRectangleAndSetPattern(gfxRect(0, 0, mWidth, mHeight), pat);
    ctx-&gt;SetOperator(gfxContext::OPERATOR_SOURCE);
    ctx-&gt;Fill();

    rv = encoder-&gt;InitFromData(imageBuffer.get(),
                               mWidth * mHeight * 4, mWidth, mHeight, mWidth * 4,
                               imgIEncoder::INPUT_FORMAT_HOSTARGB,
                               nsDependentString(aEncoderOptions));
    NS_ENSURE_SUCCESS(rv, rv);

    return CallQueryInterface(encoder, aStream);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>WebGLContext</name>::<name>GetThebesSurface</name></name><parameter_list>(<param><decl><type><name>gfxASurface</name> **</type><name>surface</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name>NS_ERROR_NOT_AVAILABLE</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PRUint8</name></type> <name>gWebGLLayerUserData</name></decl>;</decl_stmt>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name><name>layers</name>::<name>CanvasLayer</name></name></expr></argument>&gt;</argument_list></name></type>
<name><name>WebGLContext</name>::<name>GetCanvasLayer</name></name><parameter_list>(<param><decl><type><name>CanvasLayer</name> *</type><name>aOldLayer</name></decl></param>,
                             <param><decl><type><name>LayerManager</name> *</type><name>aManager</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>mResetLayer</name> &amp;&amp; <name>aOldLayer</name> &amp;&amp;
        <call><name><name>aOldLayer</name>-&gt;<name>GetUserData</name></name><argument_list>()</argument_list></call> == &amp;<name>gWebGLLayerUserData</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name>aOldLayer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mInvalidated</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>aOldLayer</name>-&gt;<name>Updated</name></name><argument_list>(<argument><expr><call><name>nsIntRect</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>mWidth</name></expr></argument>, <argument><expr><name>mHeight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mInvalidated</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>aOldLayer</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>CanvasLayer</name></expr></argument>&gt;</argument_list></name></type> <name>canvasLayer</name> <init>= <expr><call><name><name>aManager</name>-&gt;<name>CreateCanvasLayer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>canvasLayer</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"CreateCanvasLayer returned null!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>nsnull</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>canvasLayer</name>-&gt;<name>SetUserData</name></name><argument_list>(<argument><expr>&amp;<name>gWebGLLayerUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>CanvasLayer</name>::<name>Data</name></name></type> <name>data</name></decl>;</decl_stmt>

    <comment type="line">// the gl context may either provide a native PBuffer, in which case we want to initialize</comment>
    <comment type="line">// data with the gl context directly, or may provide a surface to which it renders (this is the case</comment>
    <comment type="line">// of OSMesa contexts), in which case we want to initialize data with that surface.</comment>

    <decl_stmt><decl><type><name>void</name>*</type> <name>native_surface</name> <init>= <expr><call><name><name>gl</name>-&gt;<name>GetNativeData</name></name><argument_list>(<argument><expr><name><name>gl</name>::<name>GLContext</name>::<name>NativeImageSurface</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>native_surface</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>data</name>.<name>mSurface</name></name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>gfxASurface</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>native_surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name><name>data</name>.<name>mGLContext</name></name> = <call><name><name>gl</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name><name>data</name>.<name>mSize</name></name> = <call><name>nsIntSize</name><argument_list>(<argument><expr><name>mWidth</name></expr></argument>, <argument><expr><name>mHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name>.<name>mGLBufferIsPremultiplied</name></name> = <name>PR_FALSE</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>canvasLayer</name>-&gt;<name>Initialize</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>canvasLayer</name>-&gt;<name>SetIsOpaqueContent</name></name><argument_list>(<argument><expr><call><name><name>gl</name>-&gt;<name>CreationFormat</name></name><argument_list>()</argument_list></call>.<name>alpha</name> == 0 ? <name>PR_TRUE</name> : <name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>canvasLayer</name>-&gt;<name>Updated</name></name><argument_list>(<argument><expr><call><name>nsIntRect</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>mWidth</name></expr></argument>, <argument><expr><name>mHeight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>mInvalidated</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mResetLayer</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

    <return>return <expr><call><name><name>canvasLayer</name>.<name>forget</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">//</comment>
<comment type="line">// XPCOM goop</comment>
<comment type="line">//</comment>

<macro><name>NS_IMPL_CYCLE_COLLECTING_ADDREF_AMBIGUOUS</name><argument_list>(<argument>WebGLContext</argument>, <argument>nsICanvasRenderingContextWebGL</argument>)</argument_list></macro>
<macro><name>NS_IMPL_CYCLE_COLLECTING_RELEASE_AMBIGUOUS</name><argument_list>(<argument>WebGLContext</argument>, <argument>nsICanvasRenderingContextWebGL</argument>)</argument_list></macro>

<macro><name>NS_IMPL_CYCLE_COLLECTION_CLASS</name><argument_list>(<argument>WebGLContext</argument>)</argument_list></macro>
<macro><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN</name><argument_list>(<argument>WebGLContext</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument>mCanvasElement</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_END</name></type>
<name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN</name><argument_list>(<argument><expr><name>WebGLContext</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument><expr><name>mCanvasElement</name></expr></argument>)</argument_list>
<name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END</name>

<name>DOMCI_DATA</name><argument_list>(<argument><expr><name>CanvasRenderingContextWebGL</name></expr></argument>, <argument><expr><name>WebGLContext</name></expr></argument>)</argument_list>

<name>NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION</name><argument_list>(<argument><expr><name>WebGLContext</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsICanvasRenderingContextWebGL</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsICanvasRenderingContextInternal</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsISupportsWeakReference</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY_AMBIGUOUS</name><argument_list>(<argument><expr><name>nsISupports</name></expr></argument>, <argument><expr><name>nsICanvasRenderingContextWebGL</name></expr></argument>)</argument_list>
  <name>NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO</name><argument_list>(<argument><expr><name>CanvasRenderingContextWebGL</name></expr></argument>)</argument_list>
<name>NS_INTERFACE_MAP_END</name>

<name>NS_IMPL_ADDREF</name><argument_list>(<argument><expr><name>WebGLBuffer</name></expr></argument>)</argument_list>
<name>NS_IMPL_RELEASE</name><argument_list>(<argument><expr><name>WebGLBuffer</name></expr></argument>)</argument_list>

<name>DOMCI_DATA</name><argument_list>(<argument><expr><name>WebGLBuffer</name></expr></argument>, <argument><expr><name>WebGLBuffer</name></expr></argument>)</argument_list>

<name>NS_INTERFACE_MAP_BEGIN</name><argument_list>(<argument><expr><name>WebGLBuffer</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>WebGLBuffer</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsIWebGLBuffer</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsISupports</name></expr></argument>)</argument_list>
  <name>NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO</name><argument_list>(<argument><expr><name>WebGLBuffer</name></expr></argument>)</argument_list>
<name>NS_INTERFACE_MAP_END</name>

<name>NS_IMPL_ADDREF</name><argument_list>(<argument><expr><name>WebGLTexture</name></expr></argument>)</argument_list>
<name>NS_IMPL_RELEASE</name><argument_list>(<argument><expr><name>WebGLTexture</name></expr></argument>)</argument_list>

<name>DOMCI_DATA</name><argument_list>(<argument><expr><name>WebGLTexture</name></expr></argument>, <argument><expr><name>WebGLTexture</name></expr></argument>)</argument_list>

<name>NS_INTERFACE_MAP_BEGIN</name><argument_list>(<argument><expr><name>WebGLTexture</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>WebGLTexture</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsIWebGLTexture</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsISupports</name></expr></argument>)</argument_list>
  <name>NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO</name><argument_list>(<argument><expr><name>WebGLTexture</name></expr></argument>)</argument_list>
<name>NS_INTERFACE_MAP_END</name>

<name>NS_IMPL_ADDREF</name><argument_list>(<argument><expr><name>WebGLProgram</name></expr></argument>)</argument_list>
<name>NS_IMPL_RELEASE</name><argument_list>(<argument><expr><name>WebGLProgram</name></expr></argument>)</argument_list>

<name>DOMCI_DATA</name><argument_list>(<argument><expr><name>WebGLProgram</name></expr></argument>, <argument><expr><name>WebGLProgram</name></expr></argument>)</argument_list>

<name>NS_INTERFACE_MAP_BEGIN</name><argument_list>(<argument><expr><name>WebGLProgram</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>WebGLProgram</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsIWebGLProgram</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsISupports</name></expr></argument>)</argument_list>
  <name>NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO</name><argument_list>(<argument><expr><name>WebGLProgram</name></expr></argument>)</argument_list>
<name>NS_INTERFACE_MAP_END</name>

<name>NS_IMPL_ADDREF</name><argument_list>(<argument><expr><name>WebGLShader</name></expr></argument>)</argument_list>
<name>NS_IMPL_RELEASE</name><argument_list>(<argument><expr><name>WebGLShader</name></expr></argument>)</argument_list>

<name>DOMCI_DATA</name><argument_list>(<argument><expr><name>WebGLShader</name></expr></argument>, <argument><expr><name>WebGLShader</name></expr></argument>)</argument_list>

<name>NS_INTERFACE_MAP_BEGIN</name><argument_list>(<argument><expr><name>WebGLShader</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>WebGLShader</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsIWebGLShader</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsISupports</name></expr></argument>)</argument_list>
  <name>NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO</name><argument_list>(<argument><expr><name>WebGLShader</name></expr></argument>)</argument_list>
<name>NS_INTERFACE_MAP_END</name>

<name>NS_IMPL_ADDREF</name><argument_list>(<argument><expr><name>WebGLFramebuffer</name></expr></argument>)</argument_list>
<name>NS_IMPL_RELEASE</name><argument_list>(<argument><expr><name>WebGLFramebuffer</name></expr></argument>)</argument_list>

<name>DOMCI_DATA</name><argument_list>(<argument><expr><name>WebGLFramebuffer</name></expr></argument>, <argument><expr><name>WebGLFramebuffer</name></expr></argument>)</argument_list>

<name>NS_INTERFACE_MAP_BEGIN</name><argument_list>(<argument><expr><name>WebGLFramebuffer</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>WebGLFramebuffer</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsIWebGLFramebuffer</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsISupports</name></expr></argument>)</argument_list>
  <name>NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO</name><argument_list>(<argument><expr><name>WebGLFramebuffer</name></expr></argument>)</argument_list>
<name>NS_INTERFACE_MAP_END</name>

<name>NS_IMPL_ADDREF</name><argument_list>(<argument><expr><name>WebGLRenderbuffer</name></expr></argument>)</argument_list>
<name>NS_IMPL_RELEASE</name><argument_list>(<argument><expr><name>WebGLRenderbuffer</name></expr></argument>)</argument_list>

<name>DOMCI_DATA</name><argument_list>(<argument><expr><name>WebGLRenderbuffer</name></expr></argument>, <argument><expr><name>WebGLRenderbuffer</name></expr></argument>)</argument_list>

<name>NS_INTERFACE_MAP_BEGIN</name><argument_list>(<argument><expr><name>WebGLRenderbuffer</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>WebGLRenderbuffer</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsIWebGLRenderbuffer</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsISupports</name></expr></argument>)</argument_list>
  <name>NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO</name><argument_list>(<argument><expr><name>WebGLRenderbuffer</name></expr></argument>)</argument_list>
<name>NS_INTERFACE_MAP_END</name>

<name>NS_IMPL_ADDREF</name><argument_list>(<argument><expr><name>WebGLUniformLocation</name></expr></argument>)</argument_list>
<name>NS_IMPL_RELEASE</name><argument_list>(<argument><expr><name>WebGLUniformLocation</name></expr></argument>)</argument_list>

<name>DOMCI_DATA</name><argument_list>(<argument><expr><name>WebGLUniformLocation</name></expr></argument>, <argument><expr><name>WebGLUniformLocation</name></expr></argument>)</argument_list>

<name>NS_INTERFACE_MAP_BEGIN</name><argument_list>(<argument><expr><name>WebGLUniformLocation</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>WebGLUniformLocation</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsIWebGLUniformLocation</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument><expr><name>nsISupports</name></expr></argument>)</argument_list>
  <name>NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO</name><argument_list>(<argument><expr><name>WebGLUniformLocation</name></expr></argument>)</argument_list>
<name>NS_INTERFACE_MAP_END</name>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_NOT_SUPPORTED</name><parameter_list>(<param><type><name>base</name></type></param>)</parameter_list></cpp:macro> \
<cpp:value>NS_IMETHODIMP base::GetName(WebGLuint *aName) \
{ return NS_ERROR_NOT_IMPLEMENTED; } \
NS_IMETHODIMP base::SetName(WebGLuint aName) \
{ return NS_ERROR_NOT_IMPLEMENTED; }</cpp:value></cpp:define>

<name>NAME_NOT_SUPPORTED</name><argument_list>(<argument><expr><name>WebGLTexture</name></expr></argument>)</argument_list>
<name>NAME_NOT_SUPPORTED</name><argument_list>(<argument><expr><name>WebGLBuffer</name></expr></argument>)</argument_list>
<name>NAME_NOT_SUPPORTED</name><argument_list>(<argument><expr><name>WebGLProgram</name></expr></argument>)</argument_list>
<name>NAME_NOT_SUPPORTED</name><argument_list>(<argument><expr><name>WebGLShader</name></expr></argument>)</argument_list>
<name>NAME_NOT_SUPPORTED</name><argument_list>(<argument><expr><name>WebGLFramebuffer</name></expr></argument>)</argument_list>
<name>NAME_NOT_SUPPORTED</name><argument_list>(<argument><expr><name>WebGLRenderbuffer</name></expr></argument>)</argument_list>

<comment type="block">/* [noscript] attribute WebGLint location; */</comment>
<name>NS_IMETHODIMP</name> <name><name>WebGLUniformLocation</name>::<name>GetLocation</name></name><argument_list>(<argument><expr><name>WebGLint</name> *<name>aLocation</name></expr></argument>)</argument_list>
<argument_list>{
    return <argument><expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr></argument>;
}</argument_list>
<name>NS_IMETHODIMP</name> <name><name>WebGLUniformLocation</name>::<name>SetLocation</name></name><argument_list>(<argument><expr><name>WebGLint</name> <name>aLocation</name></expr></argument>)</argument_list>
<argument_list>{
    return <argument><expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr></argument>;
}</argument_list></decl></decl_stmt>
</unit>
