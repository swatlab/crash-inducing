<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="000a137ee8e53106bba7931eddfae70da3127369.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Robert Ginda, &lt;rginda@netscape.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsdbgapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsd_xpc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIXPConnect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozilla/ModuleUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIServiceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptGlobalObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIObserver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIObserverService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsICategoryManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIJSRuntimeService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIThreadInternal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsThreadUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsMemory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsdebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsReadableUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCRT.h"</cpp:file></cpp:include>

<comment type="block">/* XXX DOM dependency */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIJSContextStack.h"</cpp:file></cpp:include>

<comment type="block">/*
 * defining CAUTIOUS_SCRIPTHOOK makes jsds disable GC while calling out to the
 * script hook.  This was a hack to avoid some js engine problems that should
 * be fixed now (see Mozilla bug 77636).
 */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CAUTIOUS_SCRIPTHOOK</name></cpp:undef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_verbose</name></cpp:ifdef>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_COUNT</name><parameter_list>(<param><type><name>name</name></type></param>, <param><type><name>count</name></type></param>)</parameter_list></cpp:macro>                                             \
        <cpp:value>{ if ((count % 10) == 0) printf (name ": %i\n", count); }</cpp:value></cpp:define>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_CREATE</name><parameter_list>(<param><type><name>name</name></type></param>, <param><type><name>count</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{count++; DEBUG_COUNT ("+++++ "name,count)}</cpp:value></cpp:define>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_DESTROY</name><parameter_list>(<param><type><name>name</name></type></param>, <param><type><name>count</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{count--; DEBUG_COUNT ("----- "name,count)}</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_CREATE</name><parameter_list>(<param><type><name>name</name></type></param>, <param><type><name>count</name></type></param>)</parameter_list></cpp:macro></cpp:define> 
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_DESTROY</name><parameter_list>(<param><type><name>name</name></type></param>, <param><type><name>count</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_VALID_CONTEXT</name></cpp:macro>   <cpp:value>{ if (!mCx) return NS_ERROR_NOT_AVAILABLE; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_VALID_EPHEMERAL</name></cpp:macro> <cpp:value>{ if (!mValid) return NS_ERROR_NOT_AVAILABLE; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSDSERVICE_CID</name></cpp:macro>                               \
<cpp:value>{ <comment type="block">/* f1299dc2-1dd1-11b2-a347-ee6b7660e048 */</comment>         \
     0xf1299dc2,                                     \
     0x1dd1,                                         \
     0x11b2,                                         \
    {0xa3, 0x47, 0xee, 0x6b, 0x76, 0x60, 0xe0, 0x48} \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSDASO_CID</name></cpp:macro>                                   \
<cpp:value>{ <comment type="block">/* 2fd6b7f6-eb8c-4f32-ad26-113f2c02d0fe */</comment>         \
     0x2fd6b7f6,                                     \
     0xeb8c,                                         \
     0x4f32,                                         \
    {0xad, 0x26, 0x11, 0x3f, 0x2c, 0x02, 0xd0, 0xfe} \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSDS_MAJOR_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSDS_MINOR_VERSION</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_CATMAN_CTRID</name></cpp:macro>   <cpp:value>"@mozilla.org/categorymanager;1"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_JSRT_CTRID</name></cpp:macro>     <cpp:value>"@mozilla.org/js/xpc/RuntimeService;1"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTOREG_CATEGORY</name></cpp:macro>  <cpp:value>"xpcom-autoregistration"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPSTART_CATEGORY</name></cpp:macro> <cpp:value>"app-startup"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSD_AUTOREG_ENTRY</name></cpp:macro> <cpp:value>"JSDebugger Startup Observer"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSD_STARTUP_ENTRY</name></cpp:macro> <cpp:value>"JSDebugger Startup Observer"</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>JSBool</name></type>
<name>jsds_GCCallbackProc</name> <parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSGCStatus</name></type> <name>status</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/*******************************************************************************
 * global vars
 ******************************************************************************/</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>implementationString</name><index>[]</index></name> <init>= <expr>"Mozilla JavaScript Debugger Service"</expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>jsdServiceCtrID</name><index>[]</index></name> <init>= <expr>"@mozilla.org/js/jsd/debugger-service;1"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>jsdARObserverCtrID</name><index>[]</index></name> <init>= <expr>"@mozilla.org/js/jsd/app-start-observer;2"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>jsdASObserverCtrID</name><index>[]</index></name> <init>= <expr>"service,@mozilla.org/js/jsd/app-start-observer;2"</expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_verbose</name></cpp:ifdef>
<decl_stmt><decl><type><name>PRUint32</name></type> <name>gScriptCount</name>   <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRUint32</name></type> <name>gValueCount</name>    <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRUint32</name></type> <name>gPropertyCount</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRUint32</name></type> <name>gContextCount</name>  <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRUint32</name></type> <name>gFrameCount</name>  <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>jsdService</name>   *</type><name>gJsds</name>       <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>JSGCCallback</name></type>  <name>gLastGCProc</name> <init>= <expr><name>jsds_GCCallbackProc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>JSGCStatus</name></type>    <name>gGCStatus</name>   <init>= <expr><name>JSGC_END</name></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> struct <name>DeadScript</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>PRCList</name></type>     <name>links</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSDContext</name> *</type><name>jsdc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsdIScript</name> *</type><name>script</name></decl>;</decl_stmt>
</public>}</block> <decl>*<name>gDeadScripts</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</struct>

<enum>enum <name>PatternType</name> <block>{
    <decl><name>ptIgnore</name>     <init>= <expr>0U</expr></init></decl>,
    <decl><name>ptStartsWith</name> <init>= <expr>1U</expr></init></decl>,
    <decl><name>ptEndsWith</name>   <init>= <expr>2U</expr></init></decl>,
    <decl><name>ptContains</name>   <init>= <expr>3U</expr></init></decl>,
    <decl><name>ptEquals</name>     <init>= <expr>4U</expr></init></decl>
}</block>;</enum>

<struct><specifier>static</specifier> struct <name>FilterRecord</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>PRCList</name></type>      <name>links</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsdIFilter</name>  *</type><name>filterObject</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>        *</type><name>glob</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsCString</name></type>    <name>urlPattern</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PatternType</name></type>  <name>patternType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type>     <name>startLine</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type>     <name>endLine</name></decl>;</decl_stmt>
</public>}</block> <decl>*<name>gFilters</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> struct <name>LiveEphemeral</name> *</type><name>gLiveValues</name>      <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>LiveEphemeral</name> *</type><name>gLiveProperties</name>  <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>LiveEphemeral</name> *</type><name>gLiveContexts</name>    <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>LiveEphemeral</name> *</type><name>gLiveStackFrames</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/*******************************************************************************
 * utility functions for ephemeral lists
 *******************************************************************************/</comment>
<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>jsdIEphemeral</name></expr></argument>&gt;</argument_list></name></type>
<name>jsds_FindEphemeral</name> <parameter_list>(<param><decl><type><name>LiveEphemeral</name> **</type><name>listHead</name></decl></param>, <param><decl><type><name>void</name> *</type><name>key</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!*<name>listHead</name></expr>)</condition><then>
        <return>return <expr><name>nsnull</name></expr>;</return></then></if>
    
    <decl_stmt><decl><type><name>LiveEphemeral</name> *</type><name>lv_record</name> <init>= 
        <expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>LiveEphemeral</name> *</expr></argument>&gt;</argument_list></name>
                        <argument_list>(<argument><expr><call><name>PR_NEXT_LINK</name><argument_list>(<argument><expr>&amp;<name>(*<name>listHead</name>)-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <do>do
    <block>{
        <if>if <condition>(<expr><name><name>lv_record</name>-&gt;<name>key</name></name> == <name>key</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr><name><name>lv_record</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name><name>lv_record</name>-&gt;<name>value</name></name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>lv_record</name> = <call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>LiveEphemeral</name> *</expr></argument>&gt;</argument_list></name>
                                    <argument_list>(<argument><expr><call><name>PR_NEXT_LINK</name><argument_list>(<argument><expr>&amp;<name><name>lv_record</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    while <condition>(<expr><name>lv_record</name> != *<name>listHead</name></expr>)</condition>;</do>

    <return>return <expr><name>nsnull</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name>jsds_InvalidateAllEphemerals</name> <parameter_list>(<param><decl><type><name>LiveEphemeral</name> **</type><name>listHead</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>LiveEphemeral</name> *</type><name>lv_record</name> <init>= 
        <expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>LiveEphemeral</name> *</expr></argument>&gt;</argument_list></name>
                        <argument_list>(<argument><expr><call><name>PR_NEXT_LINK</name><argument_list>(<argument><expr>&amp;<name>(*<name>listHead</name>)-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr>*<name>listHead</name></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>LiveEphemeral</name> *</type><name>next</name> <init>=
            <expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>LiveEphemeral</name> *</expr></argument>&gt;</argument_list></name>
                            <argument_list>(<argument><expr><call><name>PR_NEXT_LINK</name><argument_list>(<argument><expr>&amp;<name><name>lv_record</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lv_record</name>-&gt;<name>value</name>-&gt;<name>Invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lv_record</name> = <name>next</name></expr>;</expr_stmt>
    }</block></while>
}</block></function>

<function><type><name>void</name></type>
<name>jsds_InsertEphemeral</name> <parameter_list>(<param><decl><type><name>LiveEphemeral</name> **</type><name>listHead</name></decl></param>, <param><decl><type><name>LiveEphemeral</name> *</type><name>item</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>*<name>listHead</name></expr>)</condition><then> <block>{
        <comment type="block">/* if the list exists, add to it */</comment>
        <expr_stmt><expr><call><name>PR_APPEND_LINK</name><argument_list>(<argument><expr>&amp;<name><name>item</name>-&gt;<name>links</name></name></expr></argument>, <argument><expr>&amp;<name>(*<name>listHead</name>)-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <comment type="block">/* otherwise create the list */</comment>
        <expr_stmt><expr><call><name>PR_INIT_CLIST</name><argument_list>(<argument><expr>&amp;<name><name>item</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>listHead</name> = <name>item</name></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<function><type><name>void</name></type>
<name>jsds_RemoveEphemeral</name> <parameter_list>(<param><decl><type><name>LiveEphemeral</name> **</type><name>listHead</name></decl></param>, <param><decl><type><name>LiveEphemeral</name> *</type><name>item</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>LiveEphemeral</name> *</type><name>next</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>LiveEphemeral</name> *</expr></argument>&gt;</argument_list></name>
                                          <argument_list>(<argument><expr><call><name>PR_NEXT_LINK</name><argument_list>(<argument><expr>&amp;<name><name>item</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>next</name> == <name>item</name></expr>)</condition><then>
    <block>{
        <comment type="block">/* if the current item is also the next item, we're the only element,
         * null out the list head */</comment>
        <expr_stmt><expr><call><name>NS_ASSERTION</name> <argument_list>(<argument><expr>*<name>listHead</name> == <name>item</name></expr></argument>,
                      <argument><expr>"How could we not be the head of a one item list?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>listHead</name> = <name>nsnull</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>item</name> == *<name>listHead</name></expr>)</condition><then>
    <block>{
        <comment type="block">/* otherwise, if we're currently the list head, change it */</comment>
        <expr_stmt><expr>*<name>listHead</name> = <name>next</name></expr>;</expr_stmt>
    }</block></then></if></else></if>
    
    <expr_stmt><expr><call><name>PR_REMOVE_AND_INIT_LINK</name><argument_list>(<argument><expr>&amp;<name><name>item</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block" format="doxygen">/*******************************************************************************
 * utility functions for filters
 *******************************************************************************/</comment>
<function><type><name>void</name></type>
<name>jsds_FreeFilter</name> <parameter_list>(<param><decl><type><name>FilterRecord</name> *</type><name>rec</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_IF_RELEASE</name> <argument_list>(<argument><expr><name><name>rec</name>-&gt;<name>filterObject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PR_Free</name> <argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* copies appropriate |filter| attributes into |rec|.
 * False return indicates failure, the contents of |rec| will not be changed.
 */</comment>
<function><type><name>PRBool</name></type>
<name>jsds_SyncFilter</name> <parameter_list>(<param><decl><type><name>FilterRecord</name> *</type><name>rec</name></decl></param>, <param><decl><type><name>jsdIFilter</name> *</type><name>filter</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ASSERTION</name> <argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr>"jsds_SyncFilter without rec"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name> <argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr>"jsds_SyncFilter without filter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>glob_proper</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>glob</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>filter</name>-&gt;<name>GetGlobalObject</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>glob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name>glob</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScriptGlobalObject</name></expr></argument>&gt;</argument_list></name></type> <name>nsiglob</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>glob</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>nsiglob</name></expr>)</condition><then>
            <expr_stmt><expr><name>glob_proper</name> = <call><name><name>nsiglob</name>-&gt;<name>GetGlobalJSObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>
    
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>startLine</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>filter</name>-&gt;<name>GetStartLine</name></name><argument_list>(<argument><expr>&amp;<name>startLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>PRUint32</name></type> <name>endLine</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>filter</name>-&gt;<name>GetStartLine</name></name><argument_list>(<argument><expr>&amp;<name>endLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>    

    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>urlPattern</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>filter</name>-&gt;<name>GetUrlPattern</name></name> <argument_list>(<argument><expr><name>urlPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>
    
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>len</name> <init>= <expr><call><name><name>urlPattern</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>len</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>urlPattern</name><index>[<expr>0</expr>]</index></name> == '*'</expr>)</condition><then> <block>{
            <comment type="block">/* pattern starts with a *, shift all chars once to the left,
             * including the trailing null. */</comment>
            <expr_stmt><expr><name>urlPattern</name> = <call><name>Substring</name><argument_list>(<argument><expr><name>urlPattern</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name><name>urlPattern</name><index>[<expr><name>len</name> - 2</expr>]</index></name> == '*'</expr>)</condition><then> <block>{
                <comment type="block">/* pattern is in the format "*foo*", overwrite the final * with
                 * a null. */</comment>
                <expr_stmt><expr><call><name><name>urlPattern</name>.<name>Truncate</name></name><argument_list>(<argument><expr><name>len</name> - 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>rec</name>-&gt;<name>patternType</name></name> = <name>ptContains</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <comment type="block">/* pattern is in the format "*foo", just make a note of the
                 * new length. */</comment>
                <expr_stmt><expr><name><name>rec</name>-&gt;<name>patternType</name></name> = <name>ptEndsWith</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <if>if <condition>(<expr><name><name>urlPattern</name><index>[<expr><name>len</name> - 1</expr>]</index></name> == '*'</expr>)</condition><then> <block>{
            <comment type="block">/* pattern is in the format "foo*", overwrite the final * with a 
             * null. */</comment>
            <expr_stmt><expr><call><name><name>urlPattern</name>.<name>Truncate</name></name><argument_list>(<argument><expr><name>len</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>rec</name>-&gt;<name>patternType</name></name> = <name>ptStartsWith</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="block">/* pattern is in the format "foo". */</comment>
            <expr_stmt><expr><name><name>rec</name>-&gt;<name>patternType</name></name> = <name>ptEquals</name></expr>;</expr_stmt>
        }</block></else></if></else></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name><name>rec</name>-&gt;<name>patternType</name></name> = <name>ptIgnore</name></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="block">/* we got everything we need without failing, now copy it into rec. */</comment>

    <if>if <condition>(<expr><name><name>rec</name>-&gt;<name>filterObject</name></name> != <name>filter</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_IF_RELEASE</name><argument_list>(<argument><expr><name><name>rec</name>-&gt;<name>filterObject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rec</name>-&gt;<name>filterObject</name></name> = <name>filter</name></expr>;</expr_stmt>
    }</block></then></if>
    
    <expr_stmt><expr><name><name>rec</name>-&gt;<name>glob</name></name> = <name>glob_proper</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>rec</name>-&gt;<name>startLine</name></name>     = <name>startLine</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rec</name>-&gt;<name>endLine</name></name>       = <name>endLine</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>rec</name>-&gt;<name>urlPattern</name></name> = <name>urlPattern</name></expr>;</expr_stmt>

    <return>return <expr><name>PR_TRUE</name></expr>;</return>
            
}</block></function>

<function><type><name>FilterRecord</name> *</type>
<name>jsds_FindFilter</name> <parameter_list>(<param><decl><type><name>jsdIFilter</name> *</type><name>filter</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>gFilters</name></expr>)</condition><then>
        <return>return <expr><name>nsnull</name></expr>;</return></then></if>
    
    <decl_stmt><decl><type><name>FilterRecord</name> *</type><name>current</name> <init>= <expr><name>gFilters</name></expr></init></decl>;</decl_stmt>
    
    <do>do <block>{
        <if>if <condition>(<expr><name><name>current</name>-&gt;<name>filterObject</name></name> == <name>filter</name></expr>)</condition><then>
            <return>return <expr><name>current</name></expr>;</return></then></if>
        <expr_stmt><expr><name>current</name> = <call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>FilterRecord</name> *</expr></argument>&gt;</argument_list></name>
                                  <argument_list>(<argument><expr><call><name>PR_NEXT_LINK</name><argument_list>(<argument><expr>&amp;<name><name>current</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> while <condition>(<expr><name>current</name> != <name>gFilters</name></expr>)</condition>;</do>
    
    <return>return <expr><name>nsnull</name></expr>;</return>
}</block></function>

<comment type="block">/* returns true if the hook should be executed. */</comment>
<function><type><name>PRBool</name></type>
<name>jsds_FilterHook</name> <parameter_list>(<param><decl><type><name>JSDContext</name> *</type><name>jsdc</name></decl></param>, <param><decl><type><name>JSDThreadState</name> *</type><name>state</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name> <init>= <expr><call><name>JSD_GetJSContext</name> <argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> *</type><name>glob</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>void</name> *</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>JS_GetGlobalObject</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>glob</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"No global in threadstate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>PR_FALSE</name></expr>;</return>
    }</block></then></if>
    
    <decl_stmt><decl><type><name>JSDStackFrameInfo</name> *</type><name>frame</name> <init>= <expr><call><name>JSD_GetStackFrame</name> <argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>frame</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"No frame in threadstate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>PR_FALSE</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>JSDScript</name> *</type><name>script</name> <init>= <expr><call><name>JSD_GetScriptForStackFrame</name> <argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>script</name></expr>)</condition><then>
        <return>return <expr><name>PR_TRUE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>jsuword</name></type> <name>pc</name> <init>= <expr><call><name>JSD_GetPCForStackFrame</name> <argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>nsDependentCString</name></type> <name>url</name><argument_list>(<argument><expr><call><name>JSD_GetScriptFilename</name> <argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>url</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_WARNING</name> <argument_list>(<argument><expr>"Script with no filename"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>PR_FALSE</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<name>gFilters</name></expr>)</condition><then>
        <return>return <expr><name>PR_TRUE</name></expr>;</return></then></if>    

    <decl_stmt><decl><type><name>PRUint32</name></type> <name>currentLine</name> <init>= <expr><call><name>JSD_GetClosestLine</name> <argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FilterRecord</name> *</type><name>currentFilter</name> <init>= <expr><name>gFilters</name></expr></init></decl>;</decl_stmt>
    <do>do <block>{
        <decl_stmt><decl><type><name>PRUint32</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>currentFilter</name>-&gt;<name>filterObject</name>-&gt;<name>GetFlags</name></name><argument_list>(<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"Error getting flags for filter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>flags</name> &amp; <name><name>jsdIFilter</name>::<name>FLAG_ENABLED</name></name></expr>)</condition><then> <block>{
            <comment type="block">/* if there is no glob, or the globs match */</comment>
            <if>if <condition>(<expr>(!<name><name>currentFilter</name>-&gt;<name>glob</name></name> || <name><name>currentFilter</name>-&gt;<name>glob</name></name> == <name>glob</name>) &amp;&amp;
                <comment type="block">/* and there is no start line, or the start line is before 
                 * or equal to the current */</comment>
                (!<name><name>currentFilter</name>-&gt;<name>startLine</name></name> || 
                 <name><name>currentFilter</name>-&gt;<name>startLine</name></name> &lt;= <name>currentLine</name>) &amp;&amp;
                <comment type="block">/* and there is no end line, or the end line is after
                 * or equal to the current */</comment>
                (!<name><name>currentFilter</name>-&gt;<name>endLine</name></name> ||
                 <name><name>currentFilter</name>-&gt;<name>endLine</name></name> &gt;= <name>currentLine</name>)</expr>)</condition><then> <block>{
                <comment type="block">/* then we're going to have to compare the url. */</comment>
                <if>if <condition>(<expr><name><name>currentFilter</name>-&gt;<name>patternType</name></name> == <name>ptIgnore</name></expr>)</condition><then>
                    <return>return <expr>!!(<name>flags</name> &amp; <name><name>jsdIFilter</name>::<name>FLAG_PASS</name></name>)</expr>;</return></then></if>

                <if>if <condition>(<expr>!<name>len</name></expr>)</condition><then>
                    <expr_stmt><expr><name>len</name> = <call><name><name>url</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
                <decl_stmt><decl><type><name>nsCString</name></type> <name>urlPattern</name> <init>= <expr><name><name>currentFilter</name>-&gt;<name>urlPattern</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PRUint32</name></type> <name>patternLength</name> <init>= <expr><call><name><name>urlPattern</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>len</name> &gt;= <name>patternLength</name></expr>)</condition><then> <block>{
                    <switch>switch <condition>(<expr><name><name>currentFilter</name>-&gt;<name>patternType</name></name></expr>)</condition> <block>{
                        <case>case <expr><name>ptEquals</name></expr>:
                            <if>if <condition>(<expr><call><name><name>urlPattern</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                                <return>return <expr>!!(<name>flags</name> &amp; <name><name>jsdIFilter</name>::<name>FLAG_PASS</name></name>)</expr>;</return></then></if>
                            <break>break;</break>
                        </case><case>case <expr><name>ptStartsWith</name></expr>:
                            <if>if <condition>(<expr><call><name><name>urlPattern</name>.<name>Equals</name></name><argument_list>(<argument><expr><call><name>Substring</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>patternLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                                <return>return <expr>!!(<name>flags</name> &amp; <name><name>jsdIFilter</name>::<name>FLAG_PASS</name></name>)</expr>;</return></then></if>
                            <break>break;</break>
                        </case><case>case <expr><name>ptEndsWith</name></expr>:
                            <if>if <condition>(<expr><call><name><name>urlPattern</name>.<name>Equals</name></name><argument_list>(<argument><expr><call><name>Substring</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>len</name> - <name>patternLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                                <return>return <expr>!!(<name>flags</name> &amp; <name><name>jsdIFilter</name>::<name>FLAG_PASS</name></name>)</expr>;</return></then></if>
                            <break>break;</break>
                        </case><case>case <expr><name>ptContains</name></expr>:
                            <block>{
                                <decl_stmt><decl><type><name><name>nsACString</name>::<name>const_iterator</name></name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name><name>url</name>.<name>BeginReading</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>url</name>.<name>EndReading</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><call><name>FindInReadable</name><argument_list>(<argument><expr><name><name>currentFilter</name>-&gt;<name>urlPattern</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                                    <return>return <expr>!!(<name>flags</name> &amp; <name><name>jsdIFilter</name>::<name>FLAG_PASS</name></name>)</expr>;</return></then></if>
                            }</block>
                            <break>break;</break>
                        </case><default>default:
                            <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Invalid pattern type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </default>}</block></switch>
                }</block></then></if>                
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><name>currentFilter</name> = <call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>FilterRecord</name> *</expr></argument>&gt;</argument_list></name>
                                        <argument_list>(<argument><expr><call><name>PR_NEXT_LINK</name><argument_list>(<argument><expr>&amp;<name><name>currentFilter</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> while <condition>(<expr><name>currentFilter</name> != <name>gFilters</name></expr>)</condition>;</do>

    <return>return <expr><name>PR_TRUE</name></expr>;</return>
    
}</block></function>

<comment type="block" format="doxygen">/*******************************************************************************
 * c callbacks
 *******************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>jsds_NotifyPendingDeadScripts</name> <parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>)</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CAUTIOUS_SCRIPTHOOK</name></cpp:ifdef>
    <decl_stmt><decl><type><name>JSRuntime</name> *</type><name>rt</name> <init>= <expr><call><name>JS_GetRuntime</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>jsdService</name> *</type><name>jsds</name> <init>= <expr><name>gJsds</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>jsdIScriptHook</name></expr></argument>&gt;</argument_list></name></type> <name>hook</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>jsds</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name>jsds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>jsds</name>-&gt;<name>GetScriptHook</name></name> <argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>jsds</name>-&gt;<name>Pause</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>DeadScript</name> *</type><name>deadScripts</name> <init>= <expr><name>gDeadScripts</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>gDeadScripts</name> = <name>nsnull</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>deadScripts</name></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>DeadScript</name> *</type><name>ds</name> <init>= <expr><name>deadScripts</name></expr></init></decl>;</decl_stmt>
        <comment type="block">/* get next deleted script */</comment>
        <expr_stmt><expr><name>deadScripts</name> = <call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>DeadScript</name> *</expr></argument>&gt;</argument_list></name>
                                       <argument_list>(<argument><expr><call><name>PR_NEXT_LINK</name><argument_list>(<argument><expr>&amp;<name><name>ds</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>deadScripts</name> == <name>ds</name></expr>)</condition><then>
            <expr_stmt><expr><name>deadScripts</name> = <name>nsnull</name></expr>;</expr_stmt></then></if>

        <if>if <condition>(<expr><name>hook</name></expr>)</condition><then>
        <block>{
            <comment type="block">/* tell the user this script has been destroyed */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CAUTIOUS_SCRIPTHOOK</name></cpp:ifdef>
            <expr_stmt><expr><call><name>JS_UNKEEP_ATOMS</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name><name>hook</name>-&gt;<name>OnScriptDestroyed</name></name> <argument_list>(<argument><expr><name><name>ds</name>-&gt;<name>script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CAUTIOUS_SCRIPTHOOK</name></cpp:ifdef>
            <expr_stmt><expr><call><name>JS_KEEP_ATOMS</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        }</block></then></if>

        <comment type="block">/* take it out of the circular list */</comment>
        <expr_stmt><expr><call><name>PR_REMOVE_LINK</name><argument_list>(<argument><expr>&amp;<name><name>ds</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* addref came from the FromPtr call in jsds_ScriptHookProc */</comment>
        <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name><name>ds</name>-&gt;<name>script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* free the struct! */</comment>
        <expr_stmt><expr><call><name>PR_Free</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <if>if <condition>(<expr><name>jsds</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>jsds</name>-&gt;<name>UnPause</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name>jsds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>jsds_GCCallbackProc</name> <parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSGCStatus</name></type> <name>status</name></decl></param>)</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_verbose</name></cpp:ifdef>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr>"new gc status is %i\n"</expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if>if <condition>(<expr><name>status</name> == <name>JSGC_END</name></expr>)</condition><then> <block>{
        <comment type="block">/* just to guard against reentering. */</comment>
        <expr_stmt><expr><name>gGCStatus</name> = <name>JSGC_BEGIN</name></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>gDeadScripts</name></expr>)</condition>
            <expr_stmt><expr><call><name>jsds_NotifyPendingDeadScripts</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
    }</block></then></if>

    <expr_stmt><expr><name>gGCStatus</name> = <name>status</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>gLastGCProc</name></expr>)</condition><then>
        <return>return <expr><call><name>gLastGCProc</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>uintN</name></type>
<name>jsds_ErrorHookProc</name> <parameter_list>(<param><decl><type><name>JSDContext</name> *</type><name>jsdc</name></decl></param>, <param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>,
                    <param><decl><type><name>JSErrorReport</name> *</type><name>report</name></decl></param>, <param><decl><type><name>void</name> *</type><name>callerdata</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <name>PRBool</name></type> <name>running</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>jsdIErrorHook</name></expr></argument>&gt;</argument_list></name></type> <name>hook</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>GetErrorHook</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>hook</name></expr>)</condition><then>
        <return>return <expr><name>JSD_ERROR_REPORTER_PASS_ALONG</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>running</name></expr>)</condition><then>
        <return>return <expr><name>JSD_ERROR_REPORTER_PASS_ALONG</name></expr>;</return></then></if>
    
    <expr_stmt><expr><name>running</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>jsdIValue</name></expr></argument>&gt;</argument_list></name></type> <name>val</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>JS_IsExceptionPending</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>jsval</name></type> <name>jv</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>JS_GetPendingException</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>jv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>JSDValue</name> *</type><name>jsdv</name> <init>= <expr><call><name>JSD_NewValue</name> <argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>jv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>val</name> = <call><name>getter_AddRefs</name><argument_list>(<argument><expr><call><name><name>jsdValue</name>::<name>FromPtr</name></name><argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>jsdv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>fileName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type>    <name>line</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type>    <name>pos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type>    <name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type>    <name>errnum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRBool</name></type>      <name>rval</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>report</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>fileName</name>.<name>Assign</name></name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>line</name> = <name><name>report</name>-&gt;<name>lineno</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> = <name><name>report</name>-&gt;<name>tokenptr</name></name> - <name><name>report</name>-&gt;<name>linebuf</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>flags</name> = <name><name>report</name>-&gt;<name>flags</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>errnum</name> = <name><name>report</name>-&gt;<name>errorNumber</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><name>line</name>     = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name>      = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name>flags</name>    = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name>errnum</name>   = 0</expr>;</expr_stmt>
    }</block></else></if>
    
    <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>Pause</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hook</name>-&gt;<name>OnError</name></name> <argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>errnum</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>UnPause</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>running</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>rval</name></expr>)</condition><then>
        <return>return <expr><name>JSD_ERROR_REPORTER_DEBUG</name></expr>;</return></then></if>
    
    <return>return <expr><name>JSD_ERROR_REPORTER_PASS_ALONG</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>jsds_CallHookProc</name> <parameter_list>(<param><decl><type><name>JSDContext</name>*</type> <name>jsdc</name></decl></param>, <param><decl><type><name>JSDThreadState</name>*</type> <name>jsdthreadstate</name></decl></param>,
                   <param><decl><type><name>uintN</name></type> <name>type</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>callerdata</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>jsdICallHook</name></expr></argument>&gt;</argument_list></name></type> <name>hook</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
    <block>{
        <case>case <expr><name>JSD_HOOK_TOPLEVEL_START</name></expr>:
        </case><case>case <expr><name>JSD_HOOK_TOPLEVEL_END</name></expr>:
            <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>GetTopLevelHook</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
            
        </case><case>case <expr><name>JSD_HOOK_FUNCTION_CALL</name></expr>:
        </case><case>case <expr><name>JSD_HOOK_FUNCTION_RETURN</name></expr>:
            <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>GetFunctionHook</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        </case><default>default:
            <expr_stmt><expr><call><name>NS_ASSERTION</name> <argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"Unknown hook type."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </default>}</block></switch>
    
    <if>if <condition>(<expr>!<name>hook</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<call><name>jsds_FilterHook</name> <argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>jsdthreadstate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>JSDStackFrameInfo</name> *</type><name>native_frame</name> <init>= <expr><call><name>JSD_GetStackFrame</name> <argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>jsdthreadstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>jsdIStackFrame</name></expr></argument>&gt;</argument_list></name></type> <name>frame</name> <init>=
        <expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><call><name><name>jsdStackFrame</name>::<name>FromPtr</name></name><argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>jsdthreadstate</name></expr></argument>,
                                              <argument><expr><name>native_frame</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>Pause</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hook</name>-&gt;<name>OnCall</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>UnPause</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>jsdStackFrame</name>::<name>InvalidateAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PRUint32</name></type>
<name>jsds_ExecutionHookProc</name> <parameter_list>(<param><decl><type><name>JSDContext</name>*</type> <name>jsdc</name></decl></param>, <param><decl><type><name>JSDThreadState</name>*</type> <name>jsdthreadstate</name></decl></param>,
                        <param><decl><type><name>uintN</name></type> <name>type</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>callerdata</name></decl></param>, <param><decl><type><name>jsval</name>*</type> <name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>jsdIExecutionHook</name></expr></argument>&gt;</argument_list></name></type> <name>hook</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>hook_rv</name> <init>= <expr><name>JSD_HOOK_RETURN_CONTINUE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>jsdIValue</name></expr></argument>&gt;</argument_list></name></type> <name>js_rv</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
    <block>{
        <case>case <expr><name>JSD_HOOK_INTERRUPTED</name></expr>:
            <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>GetInterruptHook</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>JSD_HOOK_DEBUG_REQUESTED</name></expr>:
            <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>GetDebugHook</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>JSD_HOOK_DEBUGGER_KEYWORD</name></expr>:
            <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>GetDebuggerHook</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>JSD_HOOK_BREAKPOINT</name></expr>:
            <block>{
                <comment type="block">/* we can't pause breakpoints the way we pause the other
                 * execution hooks (at least, not easily.)  Instead we bail
                 * here if the service is paused. */</comment>
                <decl_stmt><decl><type><name>PRUint32</name></type> <name>level</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>GetPauseDepth</name></name><argument_list>(<argument><expr>&amp;<name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>level</name></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>GetBreakpointHook</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block>
            <break>break;</break>
        </case><case>case <expr><name>JSD_HOOK_THROW</name></expr>:
        <block>{
            <expr_stmt><expr><name>hook_rv</name> = <name>JSD_HOOK_RETURN_CONTINUE_THROW</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>GetThrowHook</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>hook</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>JSDValue</name> *</type><name>jsdv</name> <init>= <expr><call><name>JSD_GetException</name> <argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>jsdthreadstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>js_rv</name> = <call><name>getter_AddRefs</name><argument_list>(<argument><expr><call><name><name>jsdValue</name>::<name>FromPtr</name></name> <argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>jsdv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <break>break;</break>
        }</block>
        </case><default>default:
            <expr_stmt><expr><call><name>NS_ASSERTION</name> <argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"Unknown hook type."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </default>}</block></switch>

    <if>if <condition>(<expr>!<name>hook</name></expr>)</condition><then>
        <return>return <expr><name>hook_rv</name></expr>;</return></then></if>
    
    <if>if <condition>(<expr>!<call><name>jsds_FilterHook</name> <argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>jsdthreadstate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JSD_HOOK_RETURN_CONTINUE</name></expr>;</return></then></if>
    
    <decl_stmt><decl><type><name>JSDStackFrameInfo</name> *</type><name>native_frame</name> <init>= <expr><call><name>JSD_GetStackFrame</name> <argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>jsdthreadstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>jsdIStackFrame</name></expr></argument>&gt;</argument_list></name></type> <name>frame</name> <init>=
        <expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><call><name><name>jsdStackFrame</name>::<name>FromPtr</name></name><argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>jsdthreadstate</name></expr></argument>,
                                              <argument><expr><name>native_frame</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>Pause</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>jsdIValue</name> *</type><name>inout_rv</name> <init>= <expr><name>js_rv</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr><name>inout_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hook</name>-&gt;<name>OnExecute</name></name> <argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr>&amp;<name>inout_rv</name></expr></argument>, <argument><expr>&amp;<name>hook_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>js_rv</name> = <name>inout_rv</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_IF_RELEASE</name><argument_list>(<argument><expr><name>inout_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>UnPause</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>jsdStackFrame</name>::<name>InvalidateAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
    <if>if <condition>(<expr><name>hook_rv</name> == <name>JSD_HOOK_RETURN_RET_WITH_VAL</name> ||
        <name>hook_rv</name> == <name>JSD_HOOK_RETURN_THROW_WITH_VAL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>rval</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>js_rv</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>JSDValue</name> *</type><name>jsdv</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>js_rv</name>-&gt;<name>GetJSDValue</name></name> <argument_list>(<argument><expr>&amp;<name>jsdv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr>*<name>rval</name> = <call><name>JSD_GetValueWrappedJSVal</name><argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>jsdv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if>
    }</block></then></if>
    
    <return>return <expr><name>hook_rv</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>jsds_ScriptHookProc</name> <parameter_list>(<param><decl><type><name>JSDContext</name>*</type> <name>jsdc</name></decl></param>, <param><decl><type><name>JSDScript</name>*</type> <name>jsdscript</name></decl></param>, <param><decl><type><name>JSBool</name></type> <name>creating</name></decl></param>,
                     <param><decl><type><name>void</name>*</type> <name>callerdata</name></decl></param>)</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CAUTIOUS_SCRIPTHOOK</name></cpp:ifdef>
    <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name> <init>= <expr><call><name>JSD_GetDefaultJSContext</name><argument_list>(<argument><expr><name>jsdc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSRuntime</name> *</type><name>rt</name> <init>= <expr><call><name>JS_GetRuntime</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr><name>creating</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>jsdIScriptHook</name></expr></argument>&gt;</argument_list></name></type> <name>hook</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>GetScriptHook</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* a script is being created */</comment>
        <if>if <condition>(<expr>!<name>hook</name></expr>)</condition><then> <block>{
            <comment type="block">/* nobody cares, just exit */</comment>
            <return>return;</return>
        }</block></then></if>
            
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>jsdIScript</name></expr></argument>&gt;</argument_list></name></type> <name>script</name> <init>= 
            <expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><call><name><name>jsdScript</name>::<name>FromPtr</name></name><argument_list>(<argument><expr><name>jsdc</name></expr></argument>, <argument><expr><name>jsdscript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CAUTIOUS_SCRIPTHOOK</name></cpp:ifdef>
        <expr_stmt><expr><call><name>JS_UNKEEP_ATOMS</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>Pause</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hook</name>-&gt;<name>OnScriptCreated</name></name> <argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>UnPause</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CAUTIOUS_SCRIPTHOOK</name></cpp:ifdef>
        <expr_stmt><expr><call><name>JS_KEEP_ATOMS</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then> <else>else <block>{
        <comment type="block">/* a script is being destroyed.  even if there is no registered hook
         * we'll still need to invalidate the jsdIScript record, in order
         * to remove the reference held in the JSDScript private data. */</comment>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>jsdIScript</name></expr></argument>&gt;</argument_list></name></type> <name>jsdis</name> <init>= 
            <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>jsdIScript</name> *</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>JSD_GetScriptPrivate</name><argument_list>(<argument><expr><name>jsdscript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>jsdis</name></expr>)</condition><then>
            <return>return;</return></then></if>

        <expr_stmt><expr><call><name><name>jsdis</name>-&gt;<name>Invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>gGCStatus</name> == <name>JSGC_END</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>jsdIScriptHook</name></expr></argument>&gt;</argument_list></name></type> <name>hook</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>GetScriptHook</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>hook</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>hook</name></expr>)</condition><then>
                <return>return;</return></then></if>

            <comment type="block">/* if GC *isn't* running, we can tell the user about the script
             * delete now. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CAUTIOUS_SCRIPTHOOK</name></cpp:ifdef>
            <expr_stmt><expr><call><name>JS_UNKEEP_ATOMS</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                
            <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>Pause</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>hook</name>-&gt;<name>OnScriptDestroyed</name></name> <argument_list>(<argument><expr><name>jsdis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>gJsds</name>-&gt;<name>UnPause</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CAUTIOUS_SCRIPTHOOK</name></cpp:ifdef>
            <expr_stmt><expr><call><name>JS_KEEP_ATOMS</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        }</block></then> <else>else <block>{
            <comment type="block">/* if a GC *is* running, we've got to wait until it's done before
             * we can execute any JS, so we queue the notification in a PRCList
             * until GC tells us it's done. See jsds_GCCallbackProc(). */</comment>
            <decl_stmt><decl><type><name>DeadScript</name> *</type><name>ds</name> <init>= <expr><call><name>PR_NEW</name><argument_list>(<argument><expr><name>DeadScript</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name>ds</name></expr>)</condition><then>
                <return>return;</return></then></if> <comment type="block">/* NS_ERROR_OUT_OF_MEMORY */</comment>
        
            <expr_stmt><expr><name><name>ds</name>-&gt;<name>jsdc</name></name> = <name>jsdc</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ds</name>-&gt;<name>script</name></name> = <name>jsdis</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name><name>ds</name>-&gt;<name>script</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>gDeadScripts</name></expr>)</condition><then>
                <comment type="block">/* if the queue exists, add to it */</comment>
                <expr_stmt><expr><call><name>PR_APPEND_LINK</name><argument_list>(<argument><expr>&amp;<name><name>ds</name>-&gt;<name>links</name></name></expr></argument>, <argument><expr>&amp;<name><name>gDeadScripts</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <block>{
                <comment type="block">/* otherwise create the queue */</comment>
                <expr_stmt><expr><call><name>PR_INIT_CLIST</name><argument_list>(<argument><expr>&amp;<name><name>ds</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>gDeadScripts</name> = <name>ds</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></else></if>            
}</block></function>

<comment type="block" format="doxygen">/*******************************************************************************
 * reflected jsd data structures
 *******************************************************************************/</comment>

<comment type="block">/* Contexts */</comment>
<comment type="block">/*
NS_IMPL_THREADSAFE_ISUPPORTS2(jsdContext, jsdIContext, jsdIEphemeral);

NS_IMETHODIMP
jsdContext::GetJSDContext(JSDContext **_rval)
{
    *_rval = mCx;
    return NS_OK;
}
*/</comment>

<comment type="block">/* Objects */</comment>
<macro><name>NS_IMPL_THREADSAFE_ISUPPORTS1</name><argument_list>(<argument>jsdObject</argument>, <argument>jsdIObject</argument>)</argument_list></macro>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdObject</name>::<name>GetJSDContext</name></name><parameter_list>(<param><decl><type><name>JSDContext</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>_rval</name> = <name>mCx</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdObject</name>::<name>GetJSDObject</name></name><parameter_list>(<param><decl><type><name>JSDObject</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>_rval</name> = <name>mObject</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdObject</name>::<name>GetCreatorURL</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>_rval</name>.<name>Assign</name></name><argument_list>(<argument><expr><call><name>JSD_GetObjectNewURL</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mObject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdObject</name>::<name>GetCreatorLine</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_GetObjectNewLineNumber</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdObject</name>::<name>GetConstructorURL</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>_rval</name>.<name>Assign</name></name><argument_list>(<argument><expr><call><name>JSD_GetObjectConstructorURL</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mObject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdObject</name>::<name>GetConstructorLine</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_GetObjectConstructorLineNumber</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdObject</name>::<name>GetValue</name></name><parameter_list>(<param><decl><type><name>jsdIValue</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSDValue</name> *</type><name>jsdv</name> <init>= <expr><call><name>JSD_GetValueForObject</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>jsdValue</name>::<name>FromPtr</name></name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsdv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* Properties */</comment>
<macro><name>NS_IMPL_THREADSAFE_ISUPPORTS2</name><argument_list>(<argument>jsdProperty</argument>, <argument>jsdIProperty</argument>, <argument>jsdIEphemeral</argument>)</argument_list></macro>

<constructor><name><name>jsdProperty</name>::<name>jsdProperty</name></name> <parameter_list>(<param><decl><type><name>JSDContext</name> *</type><name>aCx</name></decl></param>, <param><decl><type><name>JSDProperty</name> *</type><name>aProperty</name></decl></param>)</parameter_list> <member_list>:
    <call><name>mCx</name><argument_list>(<argument><expr><name>aCx</name></expr></argument>)</argument_list></call>, <call><name>mProperty</name><argument_list>(<argument><expr><name>aProperty</name></expr></argument>)</argument_list></call>
</member_list><block>{
    <expr_stmt><expr><call><name>DEBUG_CREATE</name> <argument_list>(<argument><expr>"jsdProperty"</expr></argument>, <argument><expr><name>gPropertyCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mValid</name> = (<name>aCx</name> &amp;&amp; <name>aProperty</name>)</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mLiveListEntry</name>.<name>value</name></name> = <name>this</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>jsds_InsertEphemeral</name> <argument_list>(<argument><expr>&amp;<name>gLiveProperties</name></expr></argument>, <argument><expr>&amp;<name>mLiveListEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>jsdProperty</name>::~<name>jsdProperty</name></name> <parameter_list>()</parameter_list> 
<block>{
    <expr_stmt><expr><call><name>DEBUG_DESTROY</name> <argument_list>(<argument><expr>"jsdProperty"</expr></argument>, <argument><expr><name>gPropertyCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>mValid</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>Invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
}</block></destructor>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdProperty</name>::<name>Invalidate</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mValid</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>jsds_RemoveEphemeral</name> <argument_list>(<argument><expr>&amp;<name>gLiveProperties</name></expr></argument>, <argument><expr>&amp;<name>mLiveListEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JSD_DropProperty</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>jsdProperty</name>::<name>InvalidateAll</name></name><parameter_list>()</parameter_list>
<block>{
    <if>if <condition>(<expr><name>gLiveProperties</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>jsds_InvalidateAllEphemerals</name> <argument_list>(<argument><expr>&amp;<name>gLiveProperties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdProperty</name>::<name>GetJSDContext</name></name><parameter_list>(<param><decl><type><name>JSDContext</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>_rval</name> = <name>mCx</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdProperty</name>::<name>GetJSDProperty</name></name><parameter_list>(<param><decl><type><name>JSDProperty</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>_rval</name> = <name>mProperty</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdProperty</name>::<name>GetIsValid</name></name><parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>_rval</name> = <name>mValid</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdProperty</name>::<name>GetAlias</name></name><parameter_list>(<param><decl><type><name>jsdIValue</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSDValue</name> *</type><name>jsdv</name> <init>= <expr><call><name>JSD_GetPropertyValue</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mProperty</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>jsdValue</name>::<name>FromPtr</name></name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsdv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdProperty</name>::<name>GetFlags</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_GetPropertyFlags</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdProperty</name>::<name>GetName</name></name><parameter_list>(<param><decl><type><name>jsdIValue</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSDValue</name> *</type><name>jsdv</name> <init>= <expr><call><name>JSD_GetPropertyName</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mProperty</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>jsdValue</name>::<name>FromPtr</name></name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsdv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdProperty</name>::<name>GetValue</name></name><parameter_list>(<param><decl><type><name>jsdIValue</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSDValue</name> *</type><name>jsdv</name> <init>= <expr><call><name>JSD_GetPropertyValue</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mProperty</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>jsdValue</name>::<name>FromPtr</name></name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsdv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdProperty</name>::<name>GetVarArgSlot</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_GetPropertyVarArgSlot</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* Scripts */</comment>
<macro><name>NS_IMPL_THREADSAFE_ISUPPORTS2</name><argument_list>(<argument>jsdScript</argument>, <argument>jsdIScript</argument>, <argument>jsdIEphemeral</argument>)</argument_list></macro>

<constructor><name><name>jsdScript</name>::<name>jsdScript</name></name> <parameter_list>(<param><decl><type><name>JSDContext</name> *</type><name>aCx</name></decl></param>, <param><decl><type><name>JSDScript</name> *</type><name>aScript</name></decl></param>)</parameter_list> <member_list>: <call><name>mValid</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>,
                                                             <call><name>mTag</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>,
                                                             <call><name>mCx</name><argument_list>(<argument><expr><name>aCx</name></expr></argument>)</argument_list></call>,
                                                             <call><name>mScript</name><argument_list>(<argument><expr><name>aScript</name></expr></argument>)</argument_list></call>,
                                                             <call><name>mFileName</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>, 
                                                             <call><name>mFunctionName</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>,
                                                             <call><name>mBaseLineNumber</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>,
                                                             <call><name>mLineExtent</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>,
                                                             <call><name>mPPLineMap</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>,
                                                             <call><name>mFirstValidPC</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>,
                                                             <call><name>mFirstPC</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>,
                                                             <call><name>mEndPC</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>
</member_list><block>{
    <expr_stmt><expr><call><name>DEBUG_CREATE</name> <argument_list>(<argument><expr>"jsdScript"</expr></argument>, <argument><expr><name>gScriptCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>mScript</name></expr>)</condition><then> <block>{
        <comment type="block">/* copy the script's information now, so we have it later, when it
         * gets destroyed. */</comment>
        <expr_stmt><expr><call><name>JSD_LockScriptSubsystem</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mFileName</name> = new <call><name>nsCString</name><argument_list>(<argument><expr><call><name>JSD_GetScriptFilename</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mFunctionName</name> =
            new <call><name>nsCString</name><argument_list>(<argument><expr><call><name>JSD_GetScriptFunctionName</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mBaseLineNumber</name> = <call><name>JSD_GetScriptBaseLineNumber</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mLineExtent</name> = <call><name>JSD_GetScriptLineExtent</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mFirstPC</name> = <call><name>JSD_GetClosestPC</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mFirstValidPC</name> = <call><name>JSD_GetFirstValidPC</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mEndPC</name> = <call><name>JSD_GetEndPC</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JSD_UnlockScriptSubsystem</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>mValid</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></constructor>

<destructor><name><name>jsdScript</name>::~<name>jsdScript</name></name> <parameter_list>()</parameter_list> 
<block>{
    <expr_stmt><expr><call><name>DEBUG_DESTROY</name> <argument_list>(<argument><expr>"jsdScript"</expr></argument>, <argument><expr><name>gScriptCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>mFileName</name></expr>)</condition><then>
        <expr_stmt><expr>delete <name>mFileName</name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>mFunctionName</name></expr>)</condition><then>
        <expr_stmt><expr>delete <name>mFunctionName</name></expr>;</expr_stmt></then></if>

    <if>if <condition>(<expr><name>mPPLineMap</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>PR_Free</name><argument_list>(<argument><expr><name>mPPLineMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <comment type="block">/* Invalidate() needs to be called to release an owning reference to
     * ourselves, so if we got here without being invalidated, something
     * has gone wrong with our ref count. */</comment>
    <expr_stmt><expr><call><name>NS_ASSERTION</name> <argument_list>(<argument><expr>!<name>mValid</name></expr></argument>, <argument><expr>"Script destroyed without being invalidated."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<comment type="block">/*
 * This method populates a line &lt;-&gt; pc map for a pretty printed version of this
 * script.  It does this by decompiling, and then recompiling the script.  The
 * resulting script is scanned for the line map, and then left as GC fodder.
 */</comment>
<function><type><name>PCMapEntry</name> *</type>
<name><name>jsdScript</name>::<name>CreatePPLineMap</name></name><parameter_list>()</parameter_list>
<block>{    
    <decl_stmt><decl><type><name>JSContext</name>  *</type><name>cx</name>  <init>= <expr><call><name>JSD_GetDefaultJSContext</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>JSAutoRequest</name></type> <name>ar</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>JSObject</name>   *</type><name>obj</name> <init>= <expr><call><name>JS_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name> <init>= <expr><call><name>JSD_GetJSFunction</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScript</name>   *</type><name>script</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type>    <name>baseLine</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRBool</name></type>      <name>scriptOwner</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
    
    <if>if <condition>(<expr><name>fun</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>uintN</name></type> <name>nargs</name> <init>= <expr><call><name>JS_GetFunctionArgumentCount</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>nargs</name> &gt; 12</expr>)</condition><then>
            <return>return <expr><name>nsnull</name></expr>;</return></then></if>
        <decl_stmt><decl><type><name>JSString</name> *</type><name>jsstr</name> <init>= <expr><call><name>JS_DecompileFunctionBody</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>jsstr</name></expr>)</condition><then>
            <return>return <expr><name>nsnull</name></expr>;</return></then></if>
    
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>argnames</name><index>[]</index></name> <init>= <expr><block>{<expr>"arg1"</expr>, <expr>"arg2"</expr>, <expr>"arg3"</expr>, <expr>"arg4"</expr>, 
                                  <expr>"arg5"</expr>, <expr>"arg6"</expr>, <expr>"arg7"</expr>, <expr>"arg8"</expr>,
                                  <expr>"arg9"</expr>, <expr>"arg10"</expr>, <expr>"arg11"</expr>, <expr>"arg12"</expr> }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>fun</name> = <call><name>JS_CompileUCFunction</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>"ppfun"</expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>argnames</name></expr></argument>,
                                    <argument><expr><call><name>JS_GetStringChars</name><argument_list>(<argument><expr><name>jsstr</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name>JS_GetStringLength</name><argument_list>(<argument><expr><name>jsstr</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr>"x-jsd:ppbuffer?type=function"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>fun</name> || !(<name>script</name> = <call><name>JS_GetFunctionScript</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
            <return>return <expr><name>nsnull</name></expr>;</return></then></if>
        <expr_stmt><expr><name>baseLine</name> = 3</expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name>JSString</name> *</type><name>jsstr</name> <init>= <expr><call><name>JS_DecompileScript</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSD_GetJSScript</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr></argument>,
                                              <argument><expr>"ppscript"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>jsstr</name></expr>)</condition><then>
            <return>return <expr><name>nsnull</name></expr>;</return></then></if>

        <expr_stmt><expr><name>script</name> = <call><name>JS_CompileUCScript</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,
                                     <argument><expr><call><name>JS_GetStringChars</name><argument_list>(<argument><expr><name>jsstr</name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><call><name>JS_GetStringLength</name><argument_list>(<argument><expr><name>jsstr</name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr>"x-jsd:ppbuffer?type=script"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>script</name></expr>)</condition><then>
            <return>return <expr><name>nsnull</name></expr>;</return></then></if>
        <expr_stmt><expr><name>scriptOwner</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>baseLine</name> = 1</expr>;</expr_stmt>
    }</block></else></if>

    <decl_stmt><decl><type><name>PRUint32</name></type> <name>scriptExtent</name> <init>= <expr><call><name>JS_GetScriptLineExtent</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsbytecode</name>*</type> <name>firstPC</name> <init>= <expr><call><name>JS_LineNumberToPC</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block">/* allocate worst case size of map (number of lines in script + 1
     * for our 0 record), we'll shrink it with a realloc later. */</comment>
    <decl_stmt><decl><type><name>PCMapEntry</name> *</type><name>lineMap</name> <init>=
        <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PCMapEntry</name> *</expr></argument>&gt;</argument_list></name>
                   <argument_list>(<argument><expr><call><name>PR_Malloc</name><argument_list>(<argument><expr>(<name>scriptExtent</name> + 1) * <sizeof>sizeof <argument_list>(<argument><expr><name>PCMapEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>lineMapSize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>lineMap</name></expr>)</condition><then> <block>{
        <for>for (<init><decl><type><name>PRUint32</name></type> <name>line</name> <init>= <expr><name>baseLine</name></expr></init></decl>;</init> <condition><expr><name>line</name> &lt; <name>scriptExtent</name> + <name>baseLine</name></expr>;</condition> <incr><expr>++<name>line</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>jsbytecode</name>*</type> <name>pc</name> <init>= <expr><call><name>JS_LineNumberToPC</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>line</name> == <call><name>JS_PCToLineNumber</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>lineMap</name><index>[<expr><name>lineMapSize</name></expr>]</index></name>.<name>line</name> = <name>line</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>lineMap</name><index>[<expr><name>lineMapSize</name></expr>]</index></name>.<name>pc</name> = <name>pc</name> - <name>firstPC</name></expr>;</expr_stmt>
                <expr_stmt><expr>++<name>lineMapSize</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <if>if <condition>(<expr><name>scriptExtent</name> != <name>lineMapSize</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>lineMap</name> =
                <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PCMapEntry</name> *</expr></argument>&gt;</argument_list></name>
                           <argument_list>(<argument><expr><call><name>PR_Realloc</name><argument_list>(<argument><expr><name>mPPLineMap</name> = <name>lineMap</name></expr></argument>,
                                       <argument><expr><name>lineMapSize</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>PCMapEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>lineMap</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PR_Free</name><argument_list>(<argument><expr><name>mPPLineMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>lineMapSize</name> = 0</expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>scriptOwner</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_DestroyScript</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name>mPCMapSize</name> = <name>lineMapSize</name></expr>;</expr_stmt>
    <return>return <expr><name>mPPLineMap</name> = <name>lineMap</name></expr>;</return>
}</block></function>

<function><type><name>PRUint32</name></type>
<name><name>jsdScript</name>::<name>PPPcToLine</name></name> <parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aPC</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>mPPLineMap</name> &amp;&amp; !<call><name>CreatePPLineMap</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <return>return <expr>0</expr>;</return></then></if>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name>mPCMapSize</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <if>if <condition>(<expr><name><name>mPPLineMap</name><index>[<expr><name>i</name></expr>]</index></name>.<name>pc</name> &gt; <name>aPC</name></expr>)</condition><then>
            <return>return <expr><name><name>mPPLineMap</name><index>[<expr><name>i</name> - 1</expr>]</index></name>.<name>line</name></expr>;</return></then></if>            
    }</block></for>

    <return>return <expr><name><name>mPPLineMap</name><index>[<expr><name>mPCMapSize</name> - 1</expr>]</index></name>.<name>line</name></expr>;</return>
}</block></function>

<function><type><name>PRUint32</name></type>
<name><name>jsdScript</name>::<name>PPLineToPc</name></name> <parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aLine</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>mPPLineMap</name> &amp;&amp; !<call><name>CreatePPLineMap</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <return>return <expr>0</expr>;</return></then></if>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name>mPCMapSize</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <if>if <condition>(<expr><name><name>mPPLineMap</name><index>[<expr><name>i</name></expr>]</index></name>.<name>line</name> &gt; <name>aLine</name></expr>)</condition><then>
            <return>return <expr><name><name>mPPLineMap</name><index>[<expr><name>i</name> - 1</expr>]</index></name>.<name>pc</name></expr>;</return></then></if>
    }</block></for>

    <return>return <expr><name><name>mPPLineMap</name><index>[<expr><name>mPCMapSize</name> - 1</expr>]</index></name>.<name>pc</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetJSDContext</name></name><parameter_list>(<param><decl><type><name>JSDContext</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <name>mCx</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetJSDScript</name></name><parameter_list>(<param><decl><type><name>JSDScript</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <name>mScript</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetVersion</name></name> <parameter_list>(<param><decl><type><name>PRInt32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name> <init>= <expr><call><name>JSD_GetDefaultJSContext</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScript</name> *</type><name>script</name> <init>= <expr><call><name>JSD_GetJSScript</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PRInt32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>JS_GetScriptVersion</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetTag</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>mTag</name></expr>)</condition><then>
        <expr_stmt><expr><name>mTag</name> = ++<name><name>jsdScript</name>::<name>LastTag</name></name></expr>;</expr_stmt></then></if>
    
    <expr_stmt><expr>*<name>_rval</name> = <name>mTag</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>Invalidate</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mValid</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    
    <comment type="block">/* release the addref we do in FromPtr */</comment>
    <decl_stmt><decl><type><name>jsdIScript</name> *</type><name>script</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>jsdIScript</name> *</expr></argument>&gt;</argument_list></name>
                                    <argument_list>(<argument><expr><call><name>JSD_GetScriptPrivate</name><argument_list>(<argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name> <argument_list>(<argument><expr><name>script</name> == <name>this</name></expr></argument>, <argument><expr>"That's not my script!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JSD_SetScriptPrivate</name><argument_list>(<argument><expr><name>mScript</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>jsdScript</name>::<name>InvalidateAll</name></name> <parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSDContext</name> *</type><name>cx</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name><name>gJsds</name>-&gt;<name>GetJSDContext</name></name> <argument_list>(<argument><expr>&amp;<name>cx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return;</return></then></if>

    <decl_stmt><decl><type><name>JSDScript</name> *</type><name>script</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSDScript</name> *</type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>JSD_LockScriptSubsystem</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr>(<name>script</name> = <call><name>JSD_IterateScripts</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>iter</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>jsdIScript</name></expr></argument>&gt;</argument_list></name></type> <name>jsdis</name> <init>= 
            <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>jsdIScript</name> *</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>JSD_GetScriptPrivate</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>jsdis</name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>jsdis</name>-&gt;<name>Invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></while>
    <expr_stmt><expr><call><name>JSD_UnlockScriptSubsystem</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetIsValid</name></name><parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>_rval</name> = <name>mValid</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>SetFlags</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>flags</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JSD_SetScriptFlags</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetFlags</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_GetScriptFlags</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetFileName</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>_rval</name>.<name>Assign</name></name><argument_list>(<argument><expr>*<name>mFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetFunctionName</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>_rval</name>.<name>Assign</name></name><argument_list>(<argument><expr>*<name>mFunctionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetParameterNames</name></name><parameter_list>(<param><decl><type><name>PRUint32</name>*</type> <name>count</name></decl></param>, <param><decl><type><name>PRUnichar</name>***</type> <name>paramNames</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name> <init>= <expr><call><name>JSD_GetDefaultJSContext</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>cx</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"No default context !?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name> <init>= <expr><call><name>JSD_GetJSFunction</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function_decl><type><name>JSAutoRequest</name></type> <name>ar</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>)</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name>uintN</name></type> <name>nargs</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>fun</name> ||
        !<call><name>JS_FunctionHasLocalNames</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call> ||
        (<name>nargs</name> = <call><name>JS_GetFunctionArgumentCount</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call>) == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>count</name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr>*<name>paramNames</name> = <name>nsnull</name></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>PRUnichar</name> **</type><name>ret</name> <init>=
        <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PRUnichar</name>**</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>NS_Alloc</name><argument_list>(<argument><expr><name>nargs</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>PRUnichar</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>ret</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>void</name> *</type><name>mark</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsuword</name> *</type><name>names</name> <init>= <expr><call><name>JS_GetFunctionLocalNameArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr>&amp;<name>mark</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>names</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_Free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>uintN</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>nargs</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name> <init>= <expr><call><name>JS_LocalNameToAtom</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>ret</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name> <init>= <expr><call><name>JS_AtomKey</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>ret</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>NS_strndup</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>PRUnichar</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>JS_GetStringChars</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name>JS_GetStringLength</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name><name>ret</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></else></if>
    }</block></for>
    <expr_stmt><expr><call><name>JS_ReleaseFunctionLocalNameArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>count</name> = <name>nargs</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>paramNames</name> = <name>ret</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetFunctionObject</name></name><parameter_list>(<param><decl><type><name>jsdIValue</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name> <init>= <expr><call><name>JSD_GetJSFunction</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>fun</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_NOT_AVAILABLE</name></expr>;</return></then></if>
    
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name> <init>= <expr><call><name>JS_GetFunctionObject</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>JSDContext</name> *</type><name>cx</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name><name>gJsds</name>-&gt;<name>GetJSDContext</name></name> <argument_list>(<argument><expr>&amp;<name>cx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_NOT_INITIALIZED</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>JSDValue</name> *</type><name>jsdv</name> <init>= <expr><call><name>JSD_NewValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>jsdv</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>jsdValue</name>::<name>FromPtr</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jsdv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!*<name>_rval</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JSD_DropValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>jsdv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetFunctionSource</name></name><parameter_list>(<param><decl><type><name>nsAString</name> &amp;</type> <name>aFunctionSource</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name> <init>= <expr><call><name>JSD_GetDefaultJSContext</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>cx</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"No default context !?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name> <init>= <expr><call><name>JSD_GetJSFunction</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function_decl><type><name>JSAutoRequest</name></type> <name>ar</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>)</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name>JSString</name> *</type><name>jsstr</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>fun</name></expr>)</condition><then>
        <expr_stmt><expr><name>jsstr</name> = <call><name>JS_DecompileFunction</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <block>{
        <decl_stmt><decl><type><name>JSScript</name> *</type><name>script</name> <init>= <expr><call><name>JSD_GetJSScript</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>jsstr</name> = <call><name>JS_DecompileScript</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr>"ppscript"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <if>if <condition>(<expr>!<name>jsstr</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>aFunctionSource</name> =
        <call><name>nsDependentString</name><argument_list>(
            <argument><expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>PRUnichar</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>JS_GetStringChars</name><argument_list>(<argument><expr><name>jsstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>JS_GetStringLength</name><argument_list>(<argument><expr><name>jsstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetBaseLineNumber</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>_rval</name> = <name>mBaseLineNumber</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetLineExtent</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>_rval</name> = <name>mLineExtent</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetCallCount</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_GetScriptCallCount</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetMaxRecurseDepth</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_GetScriptMaxRecurseDepth</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetMinExecutionTime</name></name><parameter_list>(<param><decl><type><name>double</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_GetScriptMinExecutionTime</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetMaxExecutionTime</name></name><parameter_list>(<param><decl><type><name>double</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_GetScriptMaxExecutionTime</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetTotalExecutionTime</name></name><parameter_list>(<param><decl><type><name>double</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_GetScriptTotalExecutionTime</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetMinOwnExecutionTime</name></name><parameter_list>(<param><decl><type><name>double</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_GetScriptMinOwnExecutionTime</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetMaxOwnExecutionTime</name></name><parameter_list>(<param><decl><type><name>double</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_GetScriptMaxOwnExecutionTime</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetTotalOwnExecutionTime</name></name><parameter_list>(<param><decl><type><name>double</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_GetScriptTotalOwnExecutionTime</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>ClearProfileData</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JSD_ClearScriptProfileData</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>PcToLine</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aPC</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aPcmap</name></decl></param>, <param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>aPcmap</name> == <name>PCMAP_SOURCETEXT</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_GetClosestLine</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>, <argument><expr><name>mFirstPC</name> + <name>aPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>aPcmap</name> == <name>PCMAP_PRETTYPRINT</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>_rval</name> = <call><name>PPPcToLine</name><argument_list>(<argument><expr><name>aPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return>
    }</block></else></if></else></if>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>LineToPc</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aLine</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aPcmap</name></decl></param>, <param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>aPcmap</name> == <name>PCMAP_SOURCETEXT</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>jsuword</name></type> <name>pc</name> <init>= <expr><call><name>JSD_GetClosestPC</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>, <argument><expr><name>aLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr>*<name>_rval</name> = <name>pc</name> - <name>mFirstPC</name></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>aPcmap</name> == <name>PCMAP_PRETTYPRINT</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>_rval</name> = <call><name>PPLineToPc</name><argument_list>(<argument><expr><name>aLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return>
    }</block></else></if></else></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>IsLineExecutable</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aLine</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aPcmap</name></decl></param>, <param><decl><type><name>PRBool</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>aPcmap</name> == <name>PCMAP_SOURCETEXT</name></expr>)</condition><then> <block>{    
        <decl_stmt><decl><type><name>jsuword</name></type> <name>pc</name> <init>= <expr><call><name>JSD_GetClosestPC</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>, <argument><expr><name>aLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr>*<name>_rval</name> = (<name>aLine</name> == <call><name>JSD_GetClosestLine</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>aPcmap</name> == <name>PCMAP_PRETTYPRINT</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<name>mPPLineMap</name> &amp;&amp; !<call><name>CreatePPLineMap</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>
        <expr_stmt><expr>*<name>_rval</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>mPCMapSize</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>mPPLineMap</name><index>[<expr><name>i</name></expr>]</index></name>.<name>line</name> &gt;= <name>aLine</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>_rval</name> = (<name><name>mPPLineMap</name><index>[<expr><name>i</name></expr>]</index></name>.<name>line</name> == <name>aLine</name>)</expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
    }</block></then> <else>else <block>{
        <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return>
    }</block></else></if></else></if>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetFirstValidPC</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>PRUint32</name><argument_list>(<argument><expr><name>mFirstValidPC</name> - <name>mFirstPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>GetEndValidPC</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>PRUint32</name><argument_list>(<argument><expr><name>mEndPC</name> - <name>mFirstPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>SetBreakpoint</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aPC</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>jsuword</name></type> <name>pc</name> <init>= <expr><name>mFirstPC</name> + <name>aPC</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JSD_SetExecutionHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>jsds_ExecutionHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>ClearBreakpoint</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aPC</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>    
    <decl_stmt><decl><type><name>jsuword</name></type> <name>pc</name> <init>= <expr><name>mFirstPC</name> + <name>aPC</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JSD_ClearExecutionHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdScript</name>::<name>ClearAllBreakpoints</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JSD_LockScriptSubsystem</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JSD_ClearAllExecutionHooksForScript</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JSD_UnlockScriptSubsystem</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* Contexts */</comment>
<macro><name>NS_IMPL_THREADSAFE_ISUPPORTS2</name><argument_list>(<argument>jsdContext</argument>, <argument>jsdIContext</argument>, <argument>jsdIEphemeral</argument>)</argument_list></macro>

<function><type><name>jsdIContext</name> *</type>
<name><name>jsdContext</name>::<name>FromPtr</name></name> <parameter_list>(<param><decl><type><name>JSDContext</name> *</type><name>aJSDCx</name></decl></param>, <param><decl><type><name>JSContext</name> *</type><name>aJSCx</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>aJSDCx</name> || !<name>aJSCx</name></expr>)</condition><then>
        <return>return <expr><name>nsnull</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>jsdIContext</name></expr></argument>&gt;</argument_list></name></type> <name>jsdicx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>jsdIEphemeral</name></expr></argument>&gt;</argument_list></name></type> <name>eph</name> <init>= 
        <expr><call><name>jsds_FindEphemeral</name> <argument_list>(<argument><expr>&amp;<name>gLiveContexts</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>void</name> *</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aJSCx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>eph</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>jsdicx</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>eph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>iscx</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>JS_GetOptions</name><argument_list>(<argument><expr><name>aJSCx</name></expr></argument>)</argument_list></call> &amp; <name>JSOPTION_PRIVATE_IS_NSISUPPORTS</name></expr>)</condition><then>
            <expr_stmt><expr><name>iscx</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsISupports</name> *</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>JS_GetContextPrivate</name><argument_list>(<argument><expr><name>aJSCx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name>jsdicx</name> = new <call><name>jsdContext</name> <argument_list>(<argument><expr><name>aJSDCx</name></expr></argument>, <argument><expr><name>aJSCx</name></expr></argument>, <argument><expr><name>iscx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <decl_stmt><decl><type><name>jsdIContext</name> *</type><name>ctx</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>jsdicx</name>.<name>swap</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ctx</name></expr>;</return>
}</block></function>

<constructor><name><name>jsdContext</name>::<name>jsdContext</name></name> <parameter_list>(<param><decl><type><name>JSDContext</name> *</type><name>aJSDCx</name></decl></param>, <param><decl><type><name>JSContext</name> *</type><name>aJSCx</name></decl></param>,
                        <param><decl><type><name>nsISupports</name> *</type><name>aISCx</name></decl></param>)</parameter_list> <member_list>: <call><name>mValid</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call>, <call><name>mTag</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>,
                                              <call><name>mJSDCx</name><argument_list>(<argument><expr><name>aJSDCx</name></expr></argument>)</argument_list></call>,
                                              <call><name>mJSCx</name><argument_list>(<argument><expr><name>aJSCx</name></expr></argument>)</argument_list></call>, <call><name>mISCx</name><argument_list>(<argument><expr><name>aISCx</name></expr></argument>)</argument_list></call>
</member_list><block>{
    <expr_stmt><expr><call><name>DEBUG_CREATE</name> <argument_list>(<argument><expr>"jsdContext"</expr></argument>, <argument><expr><name>gContextCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mLiveListEntry</name>.<name>value</name></name> = <name>this</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mLiveListEntry</name>.<name>key</name></name>   = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>void</name> *</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aJSCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>jsds_InsertEphemeral</name> <argument_list>(<argument><expr>&amp;<name>gLiveContexts</name></expr></argument>, <argument><expr>&amp;<name>mLiveListEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>jsdContext</name>::~<name>jsdContext</name></name><parameter_list>()</parameter_list> 
<block>{
    <expr_stmt><expr><call><name>DEBUG_DESTROY</name> <argument_list>(<argument><expr>"jsdContext"</expr></argument>, <argument><expr><name>gContextCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>mValid</name></expr>)</condition><then>
    <block>{
        <comment type="block">/* call Invalidate() to take ourselves out of the live list */</comment>
        <expr_stmt><expr><call><name>Invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></destructor>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdContext</name>::<name>GetIsValid</name></name><parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>_rval</name> = <name>mValid</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdContext</name>::<name>Invalidate</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mValid</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>jsds_RemoveEphemeral</name> <argument_list>(<argument><expr>&amp;<name>gLiveContexts</name></expr></argument>, <argument><expr>&amp;<name>mLiveListEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>jsdContext</name>::<name>InvalidateAll</name></name><parameter_list>()</parameter_list>
<block>{
    <if>if <condition>(<expr><name>gLiveContexts</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>jsds_InvalidateAllEphemerals</name> <argument_list>(<argument><expr>&amp;<name>gLiveContexts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdContext</name>::<name>GetJSContext</name></name><parameter_list>(<param><decl><type><name>JSContext</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <name>mJSCx</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdContext</name>::<name>GetOptions</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JS_GetOptions</name><argument_list>(<argument><expr><name>mJSCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdContext</name>::<name>SetOptions</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>options</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>lastOptions</name> <init>= <expr><call><name>JS_GetOptions</name><argument_list>(<argument><expr><name>mJSCx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* don't let users change this option, they'd just be shooting themselves
     * in the foot. */</comment>
    <if>if <condition>(<expr>(<name>options</name> ^ <name>lastOptions</name>) &amp; <name>JSOPTION_PRIVATE_IS_NSISUPPORTS</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_ILLEGAL_VALUE</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>JS_SetOptions</name><argument_list>(<argument><expr><name>mJSCx</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdContext</name>::<name>GetPrivateData</name></name><parameter_list>(<param><decl><type><name>nsISupports</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>options</name> <init>= <expr><call><name>JS_GetOptions</name><argument_list>(<argument><expr><name>mJSCx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>options</name> &amp; <name>JSOPTION_PRIVATE_IS_NSISUPPORTS</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr>*<name>_rval</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsISupports</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>JS_GetContextPrivate</name><argument_list>(<argument><expr><name>mJSCx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>_rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr>*<name>_rval</name> = <name>nsnull</name></expr>;</expr_stmt>
    }</block></else></if>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
        
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdContext</name>::<name>GetWrappedContext</name></name><parameter_list>(<param><decl><type><name>nsISupports</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>_rval</name> = <name>mISCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdContext</name>::<name>GetTag</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>mTag</name></expr>)</condition><then>
        <expr_stmt><expr><name>mTag</name> = ++<name><name>jsdContext</name>::<name>LastTag</name></name></expr>;</expr_stmt></then></if>
    
    <expr_stmt><expr>*<name>_rval</name> = <name>mTag</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdContext</name>::<name>GetVersion</name></name> <parameter_list>(<param><decl><type><name>PRInt32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PRInt32</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>JS_GetVersion</name><argument_list>(<argument><expr><name>mJSCx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdContext</name>::<name>SetVersion</name></name> <parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>id</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSVersion</name></type> <name>ver</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>JSVersion</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_SetVersion</name><argument_list>(<argument><expr><name>mJSCx</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdContext</name>::<name>GetGlobalObject</name></name> <parameter_list>(<param><decl><type><name>jsdIValue</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>glob</name> <init>= <expr><call><name>JS_GetGlobalObject</name><argument_list>(<argument><expr><name>mJSCx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSDValue</name> *</type><name>jsdv</name> <init>= <expr><call><name>JSD_NewValue</name> <argument_list>(<argument><expr><name>mJSDCx</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>glob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>jsdv</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>jsdValue</name>::<name>FromPtr</name></name> <argument_list>(<argument><expr><name>mJSDCx</name></expr></argument>, <argument><expr><name>jsdv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!*<name>_rval</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdContext</name>::<name>GetScriptsEnabled</name></name> <parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>mISCx</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>_rval</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScriptContext</name></expr></argument>&gt;</argument_list></name></type> <name>context</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mISCx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>context</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_NO_INTERFACE</name></expr>;</return></then></if>

    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>context</name>-&gt;<name>GetScriptsEnabled</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdContext</name>::<name>SetScriptsEnabled</name></name> <parameter_list>(<param><decl><type><name>PRBool</name></type> <name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>mISCx</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>_rval</name></expr>)</condition><then>
            <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
        <return>return <expr><name>NS_ERROR_NO_INTERFACE</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScriptContext</name></expr></argument>&gt;</argument_list></name></type> <name>context</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mISCx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>context</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_NO_INTERFACE</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name><name>context</name>-&gt;<name>SetScriptsEnabled</name></name><argument_list>(<argument><expr><name>_rval</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* Stack Frames */</comment>
<macro><name>NS_IMPL_THREADSAFE_ISUPPORTS2</name><argument_list>(<argument>jsdStackFrame</argument>, <argument>jsdIStackFrame</argument>, <argument>jsdIEphemeral</argument>)</argument_list></macro>

<constructor><name><name>jsdStackFrame</name>::<name>jsdStackFrame</name></name> <parameter_list>(<param><decl><type><name>JSDContext</name> *</type><name>aCx</name></decl></param>, <param><decl><type><name>JSDThreadState</name> *</type><name>aThreadState</name></decl></param>,
                              <param><decl><type><name>JSDStackFrameInfo</name> *</type><name>aStackFrameInfo</name></decl></param>)</parameter_list> <member_list>:
    <call><name>mCx</name><argument_list>(<argument><expr><name>aCx</name></expr></argument>)</argument_list></call>, <call><name>mThreadState</name><argument_list>(<argument><expr><name>aThreadState</name></expr></argument>)</argument_list></call>, <call><name>mStackFrameInfo</name><argument_list>(<argument><expr><name>aStackFrameInfo</name></expr></argument>)</argument_list></call>
</member_list><block>{
    <expr_stmt><expr><call><name>DEBUG_CREATE</name> <argument_list>(<argument><expr>"jsdStackFrame"</expr></argument>, <argument><expr><name>gFrameCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mValid</name> = (<name>aCx</name> &amp;&amp; <name>aThreadState</name> &amp;&amp; <name>aStackFrameInfo</name>)</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>mValid</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>mLiveListEntry</name>.<name>key</name></name> = <name>aStackFrameInfo</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mLiveListEntry</name>.<name>value</name></name> = <name>this</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>jsds_InsertEphemeral</name> <argument_list>(<argument><expr>&amp;<name>gLiveStackFrames</name></expr></argument>, <argument><expr>&amp;<name>mLiveListEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></constructor>

<destructor><name><name>jsdStackFrame</name>::~<name>jsdStackFrame</name></name><parameter_list>()</parameter_list> 
<block>{
    <expr_stmt><expr><call><name>DEBUG_DESTROY</name> <argument_list>(<argument><expr>"jsdStackFrame"</expr></argument>, <argument><expr><name>gFrameCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>mValid</name></expr>)</condition><then>
    <block>{
        <comment type="block">/* call Invalidate() to take ourselves out of the live list */</comment>
        <expr_stmt><expr><call><name>Invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></destructor>

<function><type><name>jsdIStackFrame</name> *</type>
<name><name>jsdStackFrame</name>::<name>FromPtr</name></name> <parameter_list>(<param><decl><type><name>JSDContext</name> *</type><name>aCx</name></decl></param>, <param><decl><type><name>JSDThreadState</name> *</type><name>aThreadState</name></decl></param>,
                        <param><decl><type><name>JSDStackFrameInfo</name> *</type><name>aStackFrameInfo</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>aStackFrameInfo</name></expr>)</condition><then>
        <return>return <expr><name>nsnull</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>jsdIStackFrame</name> *</type><name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>jsdIStackFrame</name></expr></argument>&gt;</argument_list></name></type> <name>frame</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>jsdIEphemeral</name></expr></argument>&gt;</argument_list></name></type> <name>eph</name> <init>=
        <expr><call><name>jsds_FindEphemeral</name> <argument_list>(<argument><expr>&amp;<name>gLiveStackFrames</name></expr></argument>,
                            <argument><expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>void</name> *</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aStackFrameInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>eph</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>frame</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>eph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rv</name> = <name>frame</name></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><name>rv</name> = new <call><name>jsdStackFrame</name> <argument_list>(<argument><expr><name>aCx</name></expr></argument>, <argument><expr><name>aThreadState</name></expr></argument>, <argument><expr><name>aStackFrameInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdStackFrame</name>::<name>Invalidate</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mValid</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>jsds_RemoveEphemeral</name> <argument_list>(<argument><expr>&amp;<name>gLiveStackFrames</name></expr></argument>, <argument><expr>&amp;<name>mLiveListEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>jsdStackFrame</name>::<name>InvalidateAll</name></name><parameter_list>()</parameter_list>
<block>{
    <if>if <condition>(<expr><name>gLiveStackFrames</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>jsds_InvalidateAllEphemerals</name> <argument_list>(<argument><expr>&amp;<name>gLiveStackFrames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdStackFrame</name>::<name>GetJSDContext</name></name><parameter_list>(<param><decl><type><name>JSDContext</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <name>mCx</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdStackFrame</name>::<name>GetJSDThreadState</name></name><parameter_list>(<param><decl><type><name>JSDThreadState</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <name>mThreadState</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdStackFrame</name>::<name>GetJSDStackFrameInfo</name></name><parameter_list>(<param><decl><type><name>JSDStackFrameInfo</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <name>mStackFrameInfo</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdStackFrame</name>::<name>GetIsValid</name></name><parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>_rval</name> = <name>mValid</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdStackFrame</name>::<name>GetCallingFrame</name></name><parameter_list>(<param><decl><type><name>jsdIStackFrame</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSDStackFrameInfo</name> *</type><name>sfi</name> <init>= <expr><call><name>JSD_GetCallingStackFrame</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mThreadState</name></expr></argument>,
                                                       <argument><expr><name>mStackFrameInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>jsdStackFrame</name>::<name>FromPtr</name></name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mThreadState</name></expr></argument>, <argument><expr><name>sfi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdStackFrame</name>::<name>GetExecutionContext</name></name><parameter_list>(<param><decl><type><name>jsdIContext</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name> <init>= <expr><call><name>JSD_GetJSContext</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mThreadState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>jsdContext</name>::<name>FromPtr</name></name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdStackFrame</name>::<name>GetFunctionName</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>_rval</name>.<name>Assign</name></name><argument_list>(<argument><expr><call><name>JSD_GetNameForStackFrame</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mThreadState</name></expr></argument>, <argument><expr><name>mStackFrameInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdStackFrame</name>::<name>GetIsDebugger</name></name><parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_IsStackFrameDebugger</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mThreadState</name></expr></argument>, <argument><expr><name>mStackFrameInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdStackFrame</name>::<name>GetIsConstructing</name></name><parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_IsStackFrameConstructing</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mThreadState</name></expr></argument>, <argument><expr><name>mStackFrameInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdStackFrame</name>::<name>GetScript</name></name><parameter_list>(<param><decl><type><name>jsdIScript</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSDScript</name> *</type><name>script</name> <init>= <expr><call><name>JSD_GetScriptForStackFrame</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mThreadState</name></expr></argument>,
                                                    <argument><expr><name>mStackFrameInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>jsdScript</name>::<name>FromPtr</name></name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdStackFrame</name>::<name>GetPc</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSDScript</name> *</type><name>script</name> <init>= <expr><call><name>JSD_GetScriptForStackFrame</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mThreadState</name></expr></argument>,
                                                    <argument><expr><name>mStackFrameInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>script</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
    <decl_stmt><decl><type><name>jsuword</name></type> <name>pcbase</name> <init>= <expr><call><name>JSD_GetClosestPC</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>jsuword</name></type> <name>pc</name> <init>= <expr><call><name>JSD_GetPCForStackFrame</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mThreadState</name></expr></argument>, <argument><expr><name>mStackFrameInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>pc</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>_rval</name> = <name>pc</name> - <name>pcbase</name></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr>*<name>_rval</name> = <name>pcbase</name></expr>;</expr_stmt></else></if>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdStackFrame</name>::<name>GetLine</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSDScript</name> *</type><name>script</name> <init>= <expr><call><name>JSD_GetScriptForStackFrame</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mThreadState</name></expr></argument>,
                                                    <argument><expr><name>mStackFrameInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>script</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>jsuword</name></type> <name>pc</name> <init>= <expr><call><name>JSD_GetPCForStackFrame</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mThreadState</name></expr></argument>, <argument><expr><name>mStackFrameInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_GetClosestLine</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></else></if>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdStackFrame</name>::<name>GetCallee</name></name><parameter_list>(<param><decl><type><name>jsdIValue</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSDValue</name> *</type><name>jsdv</name> <init>= <expr><call><name>JSD_GetCallObjectForStackFrame</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mThreadState</name></expr></argument>,
                                                     <argument><expr><name>mStackFrameInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>jsdValue</name>::<name>FromPtr</name></name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsdv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdStackFrame</name>::<name>GetScope</name></name><parameter_list>(<param><decl><type><name>jsdIValue</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSDValue</name> *</type><name>jsdv</name> <init>= <expr><call><name>JSD_GetScopeChainForStackFrame</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mThreadState</name></expr></argument>,
                                                     <argument><expr><name>mStackFrameInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>jsdValue</name>::<name>FromPtr</name></name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsdv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdStackFrame</name>::<name>GetThisValue</name></name><parameter_list>(<param><decl><type><name>jsdIValue</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSDValue</name> *</type><name>jsdv</name> <init>= <expr><call><name>JSD_GetThisForStackFrame</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mThreadState</name></expr></argument>,
                                               <argument><expr><name>mStackFrameInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>jsdValue</name>::<name>FromPtr</name></name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsdv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdStackFrame</name>::<name>Eval</name></name> <parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>bytes</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsACString</name> &amp;</type><name>fileName</name></decl></param>,
                     <param><decl><type><name>PRUint32</name></type> <name>line</name></decl></param>, <param><decl><type><name>jsdIValue</name> **</type><name>result</name></decl></param>, <param><decl><type><name>PRBool</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>bytes</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return></then></if>

    <comment type="line">// get pointer to buffer contained in |bytes|</comment>
    <decl_stmt><decl><type><name><name>nsAString</name>::<name>const_iterator</name></name></type> <name>h</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>bytes</name>.<name>BeginReading</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>jschar</name> *</type><name>char_bytes</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><specifier>const</specifier> <name>jschar</name> *</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>h</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>JSExceptionState</name> *</type><name>estate</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>jv</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name> <init>= <expr><call><name>JSD_GetJSContext</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mThreadState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function_decl><type><name>JSAutoRequest</name></type> <name>ar</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>)</parameter_list>;</function_decl>

    <expr_stmt><expr><name>estate</name> = <call><name>JS_SaveExceptionState</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ClearPendingException</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIJSContextStack</name></expr></argument>&gt;</argument_list></name></type> <name>stack</name> <init>= <expr><call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/js/xpc/ContextStack;1"</expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>rv</name> = <call><name><name>stack</name>-&gt;<name>Push</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_RestoreExceptionState</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_AttemptUCScriptInStackFrame</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mThreadState</name></expr></argument>,
                                              <argument><expr><name>mStackFrameInfo</name></expr></argument>,
                                              <argument><expr><name>char_bytes</name></expr></argument>, <argument><expr><call><name><name>bytes</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></argument>,
                                              <argument><expr><call><name>PromiseFlatCString</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>,
                                              <argument><expr><name>line</name></expr></argument>, <argument><expr>&amp;<name>jv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!*<name>_rval</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>JS_IsExceptionPending</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>JS_GetPendingException</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>jv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name>jv</name> = <name>JSVAL_NULL</name></expr>;</expr_stmt></else></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>JS_RestoreExceptionState</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <decl_stmt><decl><type><name>JSContext</name>*</type> <name>poppedCX</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>stack</name>-&gt;<name>Pop</name></name><argument_list>(<argument><expr>&amp;<name>poppedCX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; <name>poppedCX</name> == <name>cx</name></expr></argument>, <argument><expr>"bad pop"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr>(<name>void</name>) <call><name><name>stack</name>-&gt;<name>Pop</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>JSDValue</name> *</type><name>jsdv</name> <init>= <expr><call><name>JSD_NewValue</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>jsdv</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>result</name> = <call><name><name>jsdValue</name>::<name>FromPtr</name></name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsdv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!*<name>result</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>        

<comment type="block">/* Values */</comment>
<macro><name>NS_IMPL_THREADSAFE_ISUPPORTS2</name><argument_list>(<argument>jsdValue</argument>, <argument>jsdIValue</argument>, <argument>jsdIEphemeral</argument>)</argument_list></macro>
<function><type><name>jsdIValue</name> *</type>
<name><name>jsdValue</name>::<name>FromPtr</name></name> <parameter_list>(<param><decl><type><name>JSDContext</name> *</type><name>aCx</name></decl></param>, <param><decl><type><name>JSDValue</name> *</type><name>aValue</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* value will be dropped by te jsdValue destructor. */</comment>

    <if>if <condition>(<expr>!<name>aValue</name></expr>)</condition><then>
        <return>return <expr><name>nsnull</name></expr>;</return></then></if>
    
    <decl_stmt><decl><type><name>jsdIValue</name> *</type><name>rv</name> <init>= <expr>new <call><name>jsdValue</name> <argument_list>(<argument><expr><name>aCx</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<constructor><name><name>jsdValue</name>::<name>jsdValue</name></name> <parameter_list>(<param><decl><type><name>JSDContext</name> *</type><name>aCx</name></decl></param>, <param><decl><type><name>JSDValue</name> *</type><name>aValue</name></decl></param>)</parameter_list> <member_list>: <call><name>mValid</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call>,
                                                         <call><name>mCx</name><argument_list>(<argument><expr><name>aCx</name></expr></argument>)</argument_list></call>, 
                                                         <call><name>mValue</name><argument_list>(<argument><expr><name>aValue</name></expr></argument>)</argument_list></call>
</member_list><block>{
    <expr_stmt><expr><call><name>DEBUG_CREATE</name> <argument_list>(<argument><expr>"jsdValue"</expr></argument>, <argument><expr><name>gValueCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mLiveListEntry</name>.<name>value</name></name> = <name>this</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>jsds_InsertEphemeral</name> <argument_list>(<argument><expr>&amp;<name>gLiveValues</name></expr></argument>, <argument><expr>&amp;<name>mLiveListEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>jsdValue</name>::~<name>jsdValue</name></name><parameter_list>()</parameter_list> 
<block>{
    <expr_stmt><expr><call><name>DEBUG_DESTROY</name> <argument_list>(<argument><expr>"jsdValue"</expr></argument>, <argument><expr><name>gValueCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>mValid</name></expr>)</condition><then>
        <comment type="block">/* call Invalidate() to take ourselves out of the live list */</comment>
        <expr_stmt><expr><call><name>Invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
}</block></destructor>   

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetIsValid</name></name><parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>_rval</name> = <name>mValid</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>Invalidate</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mValid</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>jsds_RemoveEphemeral</name> <argument_list>(<argument><expr>&amp;<name>gLiveValues</name></expr></argument>, <argument><expr>&amp;<name>mLiveListEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JSD_DropValue</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>jsdValue</name>::<name>InvalidateAll</name></name><parameter_list>()</parameter_list>
<block>{
    <if>if <condition>(<expr><name>gLiveValues</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>jsds_InvalidateAllEphemerals</name> <argument_list>(<argument><expr>&amp;<name>gLiveValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetJSDContext</name></name><parameter_list>(<param><decl><type><name>JSDContext</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <name>mCx</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetJSDValue</name></name> <parameter_list>(<param><decl><type><name>JSDValue</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <name>mValue</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetIsNative</name></name> <parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_IsValueNative</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetIsNumber</name></name> <parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_IsValueNumber</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetIsPrimitive</name></name> <parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_IsValuePrimitive</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetJsType</name></name> <parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>val</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>val</name> = <call><name>JSD_GetValueWrappedJSVal</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if>if <condition>(<expr><call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr>*<name>_rval</name> = <name>TYPE_NULL</name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>JSVAL_IS_BOOLEAN</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr>*<name>_rval</name> = <name>TYPE_BOOLEAN</name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>JSVAL_IS_DOUBLE</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr>*<name>_rval</name> = <name>TYPE_DOUBLE</name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>JSVAL_IS_INT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr>*<name>_rval</name> = <name>TYPE_INT</name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr>*<name>_rval</name> = <name>TYPE_STRING</name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr>*<name>_rval</name> = <name>TYPE_VOID</name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>JSD_IsValueFunction</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr>*<name>_rval</name> = <name>TYPE_FUNCTION</name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>JSVAL_IS_OBJECT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr>*<name>_rval</name> = <name>TYPE_OBJECT</name></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><call><name>NS_ASSERTION</name> <argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"Value has no discernible type."</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetJsPrototype</name></name> <parameter_list>(<param><decl><type><name>jsdIValue</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSDValue</name> *</type><name>jsdv</name> <init>= <expr><call><name>JSD_GetValuePrototype</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>jsdValue</name>::<name>FromPtr</name></name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsdv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetJsParent</name></name> <parameter_list>(<param><decl><type><name>jsdIValue</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSDValue</name> *</type><name>jsdv</name> <init>= <expr><call><name>JSD_GetValueParent</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>jsdValue</name>::<name>FromPtr</name></name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsdv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetJsClassName</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>_rval</name>.<name>Assign</name></name><argument_list>(<argument><expr><call><name>JSD_GetValueClassName</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetJsConstructor</name></name> <parameter_list>(<param><decl><type><name>jsdIValue</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSDValue</name> *</type><name>jsdv</name> <init>= <expr><call><name>JSD_GetValueConstructor</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>jsdValue</name>::<name>FromPtr</name></name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsdv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetJsFunctionName</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>_rval</name>.<name>Assign</name></name><argument_list>(<argument><expr><call><name>JSD_GetValueFunctionName</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetBooleanValue</name></name><parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_GetValueBoolean</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetDoubleValue</name></name><parameter_list>(<param><decl><type><name>double</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_GetValueDouble</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetIntValue</name></name><parameter_list>(<param><decl><type><name>PRInt32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_GetValueInt</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetObjectValue</name></name><parameter_list>(<param><decl><type><name>jsdIObject</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSDObject</name> *</type><name>obj</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>JSD_GetObjectForValue</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>jsdObject</name>::<name>FromPtr</name></name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!*<name>_rval</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
    
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetStringValue</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>jstr_val</name> <init>= <expr><call><name>JSD_GetValueString</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>jstr_val</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>nsDependentString</name></type> <name>chars</name><argument_list>(
            <argument><expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>PRUnichar</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>JS_GetStringChars</name><argument_list>(<argument><expr><name>jstr_val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>JS_GetStringLength</name><argument_list>(<argument><expr><name>jstr_val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CopyUTF16toUTF8</name><argument_list>(<argument><expr><name>chars</name></expr></argument>, <argument><expr><name>_rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>_rval</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetPropertyCount</name></name> <parameter_list>(<param><decl><type><name>PRInt32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSD_IsValueObject</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_GetCountOfProperties</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr>*<name>_rval</name> = -1</expr>;</expr_stmt></else></if>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetProperties</name></name> <parameter_list>(<param><decl><type><name>jsdIProperty</name> ***</type><name>propArray</name></decl></param>, <param><decl><type><name>PRUint32</name> *</type><name>length</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>propArray</name> = <name>nsnull</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>length</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>length</name> = 0</expr>;</expr_stmt></then></if>

    <decl_stmt><decl><type><name>PRUint32</name></type> <name>prop_count</name> <init>= <expr><call><name>JSD_IsValueObject</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call>
        ? <call><name>JSD_GetCountOfProperties</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call>
        : 0</expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>prop_count</name></expr></argument>, <argument><expr><name>NS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>jsdIProperty</name> **</type><name>pa_temp</name> <init>=
        <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>jsdIProperty</name> **</expr></argument>&gt;</argument_list></name>
                   <argument_list>(<argument><expr><call><name><name>nsMemory</name>::<name>Alloc</name></name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>jsdIProperty</name> *</expr></argument>)</argument_list></sizeof> * 
                                       <name>prop_count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>pa_temp</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PRUint32</name></type>     <name>i</name>    <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSDProperty</name> *</type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSDProperty</name> *</type><name>prop</name></decl>;</decl_stmt>
    <while>while <condition>(<expr>(<name>prop</name> = <call><name>JSD_IterateProperties</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>, <argument><expr>&amp;<name>iter</name></expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
        <expr_stmt><expr><name><name>pa_temp</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>jsdProperty</name>::<name>FromPtr</name></name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
    }</block></while>
    
    <expr_stmt><expr><call><name>NS_ASSERTION</name> <argument_list>(<argument><expr><name>prop_count</name> == <name>i</name></expr></argument>, <argument><expr>"property count mismatch"</expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <comment type="block">/* if caller doesn't care about length, don't bother telling them */</comment>
    <expr_stmt><expr>*<name>propArray</name> = <name>pa_temp</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>length</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>length</name> = <name>prop_count</name></expr>;</expr_stmt></then></if>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetProperty</name></name> <parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name> &amp;</type><name>name</name></decl></param>, <param><decl><type><name>jsdIProperty</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name> <init>= <expr><call><name>JSD_GetDefaultJSContext</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function_decl><type><name>JSAutoRequest</name></type> <name>ar</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/* not rooting this */</comment>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>jstr_name</name> <init>= <expr><call><name>JS_NewStringCopyZ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>PromiseFlatCString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>jstr_name</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>JSDProperty</name> *</type><name>prop</name> <init>= <expr><call><name>JSD_GetValueProperty</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>, <argument><expr><name>jstr_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>jsdProperty</name>::<name>FromPtr</name></name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>Refresh</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JSD_RefreshValue</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetWrappedValue</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXPConnect</name></expr></argument>&gt;</argument_list></name></type> <name>xpc</name> <init>= <expr><call><name>do_GetService</name><argument_list>(<argument><expr><call><name><name>nsIXPConnect</name>::<name>GetCID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>nsAXPCNativeCallContext</name> *</type><name>cc</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>xpc</name>-&gt;<name>GetCurrentNativeCallContext</name></name><argument_list>(<argument><expr>&amp;<name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>jsval</name> *</type><name>result</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>cc</name>-&gt;<name>GetRetValPtr</name></name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>result</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr>*<name>result</name> = <call><name>JSD_GetValueWrappedJSVal</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cc</name>-&gt;<name>SetReturnValueWasSet</name></name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdValue</name>::<name>GetScript</name></name><parameter_list>(<param><decl><type><name>jsdIScript</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_EPHEMERAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSDScript</name> *</type><name>script</name> <init>= <expr><call><name>JSD_GetScriptForValue</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>mValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>jsdScript</name>::<name>FromPtr</name></name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block" format="doxygen">/******************************************************************************
 * debugger service implementation
 ******************************************************************************/</comment>
<macro><name>NS_IMPL_THREADSAFE_ISUPPORTS1</name><argument_list>(<argument>jsdService</argument>, <argument>jsdIDebuggerService</argument>)</argument_list></macro>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>GetJSDContext</name></name><parameter_list>(<param><decl><type><name>JSDContext</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>_rval</name> = <name>mCx</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>GetFlags</name></name> <parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_CONTEXT</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <call><name>JSD_GetContextFlags</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>SetFlags</name></name> <parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>flags</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_CONTEXT</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JSD_SetContextFlags</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>GetImplementationString</name></name><parameter_list>(<param><decl><type><name>nsACString</name> &amp;</type><name>aImplementationString</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>aImplementationString</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr><name>implementationString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>GetImplementationMajor</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>_rval</name> = <name>JSDS_MAJOR_VERSION</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>GetImplementationMinor</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>_rval</name> = <name>JSDS_MINOR_VERSION</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>GetIsOn</name></name> <parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>_rval</name> = <name>mOn</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>On</name></name> <parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nsresult</name></type>  <name>rv</name></decl>;</decl_stmt>

    <comment type="block">/* get JS things from the CallContext */</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXPConnect</name></expr></argument>&gt;</argument_list></name></type> <name>xpc</name> <init>= <expr><call><name>do_GetService</name><argument_list>(<argument><expr><call><name><name>nsIXPConnect</name>::<name>GetCID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>rv</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>nsAXPCNativeCallContext</name> *</type><name>cc</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>xpc</name>-&gt;<name>GetCurrentNativeCallContext</name></name><argument_list>(<argument><expr>&amp;<name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>rv</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>cc</name>-&gt;<name>GetJSContext</name></name> <argument_list>(<argument><expr>&amp;<name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>rv</name></expr>;</return></then></if>
    
    <return>return <expr><call><name>OnForRuntime</name><argument_list>(<argument><expr><call><name>JS_GetRuntime</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>OnForRuntime</name></name> <parameter_list>(<param><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>mOn</name></expr>)</condition><then>
        <return>return <expr>(<name>rt</name> == <name>mRuntime</name>) ? <name>NS_OK</name> : <name>NS_ERROR_ALREADY_INITIALIZED</name></expr>;</return></then></if>

    <expr_stmt><expr><name>mRuntime</name> = <name>rt</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>gLastGCProc</name> == <name>jsds_GCCallbackProc</name></expr>)</condition><then>
        <comment type="block">/* condition indicates that the callback proc has not been set yet */</comment>
        <expr_stmt><expr><name>gLastGCProc</name> = <call><name>JS_SetGCCallbackRT</name> <argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>jsds_GCCallbackProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name>mCx</name> = <call><name>JSD_DebuggerOnForUser</name> <argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>mCx</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name>   <init>= <expr><call><name>JSD_GetDefaultJSContext</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name>  *</type><name>glob</name> <init>= <expr><call><name>JS_GetGlobalObject</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* init xpconnect on the debugger's context in case xpconnect tries to
     * use it for stuff. */</comment>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXPConnect</name></expr></argument>&gt;</argument_list></name></type> <name>xpc</name> <init>= <expr><call><name>do_GetService</name><argument_list>(<argument><expr><call><name><name>nsIXPConnect</name>::<name>GetCID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>
    
    <expr_stmt><expr><call><name><name>xpc</name>-&gt;<name>InitClasses</name></name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>glob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* If any of these mFooHook objects are installed, do the required JSD
     * hookup now.   See also, jsdService::SetFooHook().
     */</comment>
    <if>if <condition>(<expr><name>mErrorHook</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JSD_SetErrorReporter</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_ErrorHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>mThrowHook</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JSD_SetThrowHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_ExecutionHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <comment type="block">/* can't ignore script callbacks, as we need to |Release| the wrapper 
     * stored in private data when a script is deleted. */</comment>
    <if>if <condition>(<expr><name>mInterruptHook</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JSD_SetInterruptHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_ExecutionHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>mDebuggerHook</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JSD_SetDebuggerHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_ExecutionHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>mDebugHook</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JSD_SetDebugBreakHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_ExecutionHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>mTopLevelHook</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JSD_SetTopLevelHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_CallHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><call><name>JSD_ClearTopLevelHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    <if>if <condition>(<expr><name>mFunctionHook</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JSD_SetFunctionHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_CallHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><call><name>JSD_ClearFunctionHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    <expr_stmt><expr><name>mOn</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr>"+++ JavaScript debugging hooks installed.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>Off</name></name> <parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>mOn</name></expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
    
    <if>if <condition>(<expr>!<name>mCx</name> || !<name>mRuntime</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_NOT_INITIALIZED</name></expr>;</return></then></if>
    
    <if>if <condition>(<expr><name>gDeadScripts</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>gGCStatus</name> != <name>JSGC_END</name></expr>)</condition><then>
            <return>return <expr><name>NS_ERROR_NOT_AVAILABLE</name></expr>;</return></then></if>

        <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name> <init>= <expr><call><name>JSD_GetDefaultJSContext</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>jsds_NotifyPendingDeadScripts</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/*
    if (gLastGCProc != jsds_GCCallbackProc)
        JS_SetGCCallbackRT (mRuntime, gLastGCProc);
    */</comment>

    <expr_stmt><expr><call><name><name>jsdContext</name>::<name>InvalidateAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>jsdScript</name>::<name>InvalidateAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>jsdValue</name>::<name>InvalidateAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>jsdProperty</name>::<name>InvalidateAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ClearAllBreakpoints</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>JSD_SetErrorReporter</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JSD_SetScriptHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JSD_ClearThrowHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JSD_ClearInterruptHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JSD_ClearDebuggerHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JSD_ClearDebugBreakHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JSD_ClearTopLevelHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JSD_ClearFunctionHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>JSD_DebuggerOff</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>mCx</name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mRuntime</name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mOn</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr>"+++ JavaScript debugging hooks removed.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>GetPauseDepth</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>_rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>_rval</name> = <name>mPauseLevel</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
    
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>Pause</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>mCx</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_NOT_INITIALIZED</name></expr>;</return></then></if>

    <if>if <condition>(<expr>++<name>mPauseLevel</name> == 1</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JSD_SetErrorReporter</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JSD_ClearThrowHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JSD_ClearInterruptHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JSD_ClearDebuggerHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JSD_ClearDebugBreakHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JSD_ClearTopLevelHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JSD_ClearFunctionHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JSD_DebuggerPause</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>_rval</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>_rval</name> = <name>mPauseLevel</name></expr>;</expr_stmt></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>UnPause</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>mCx</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_NOT_INITIALIZED</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>mPauseLevel</name> == 0</expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_NOT_AVAILABLE</name></expr>;</return></then></if>

    <comment type="block">/* check mOn before we muck with this stuff, it's possible the debugger
     * was turned off while we were paused.
     */</comment>
    <if>if <condition>(<expr>--<name>mPauseLevel</name> == 0 &amp;&amp; <name>mOn</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JSD_DebuggerUnpause</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mErrorHook</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>JSD_SetErrorReporter</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_ErrorHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><name>mThrowHook</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>JSD_SetThrowHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_ExecutionHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><name>mInterruptHook</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>JSD_SetInterruptHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_ExecutionHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><name>mDebuggerHook</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>JSD_SetDebuggerHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_ExecutionHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><name>mDebugHook</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>JSD_SetDebugBreakHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_ExecutionHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><name>mTopLevelHook</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>JSD_SetTopLevelHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_CallHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call><name>JSD_ClearTopLevelHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        <if>if <condition>(<expr><name>mFunctionHook</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>JSD_SetFunctionHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_CallHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call><name>JSD_ClearFunctionHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then></if>
    
    <if>if <condition>(<expr><name>_rval</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>_rval</name> = <name>mPauseLevel</name></expr>;</expr_stmt></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>EnumerateContexts</name></name> <parameter_list>(<param><decl><type><name>jsdIContextEnumerator</name> *</type><name>enumerator</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_CONTEXT</name></expr>;</expr_stmt>
    
    <if>if <condition>(<expr>!<name>enumerator</name></expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
    
    <decl_stmt><decl><type><name>JSContext</name> *</type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name></decl>;</decl_stmt>

    <while>while <condition>(<expr>(<name>cx</name> = <call><name>JS_ContextIterator</name> <argument_list>(<argument><expr><name>mRuntime</name></expr></argument>, <argument><expr>&amp;<name>iter</name></expr></argument>)</argument_list></call>)</expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>jsdIContext</name></expr></argument>&gt;</argument_list></name></type> <name>jsdicx</name> <init>= 
            <expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><call><name><name>jsdContext</name>::<name>FromPtr</name></name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>jsdicx</name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name><name>enumerator</name>-&gt;<name>EnumerateContext</name></name><argument_list>(<argument><expr><name>jsdicx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <break>break;</break></then></if>
        }</block></then></if>
    }</block></while>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>EnumerateScripts</name></name> <parameter_list>(<param><decl><type><name>jsdIScriptEnumerator</name> *</type><name>enumerator</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_CONTEXT</name></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>JSDScript</name> *</type><name>script</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSDScript</name> *</type><name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>JSD_LockScriptSubsystem</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr>(<name>script</name> = <call><name>JSD_IterateScripts</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr>&amp;<name>iter</name></expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>jsdIScript</name></expr></argument>&gt;</argument_list></name></type> <name>jsdis</name> <init>=
            <expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><call><name><name>jsdScript</name>::<name>FromPtr</name></name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name><name>enumerator</name>-&gt;<name>EnumerateScript</name></name> <argument_list>(<argument><expr><name>jsdis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <break>break;</break></then></if>
    }</block></while>
    <expr_stmt><expr><call><name>JSD_UnlockScriptSubsystem</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>GC</name></name> <parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_CONTEXT</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name> <init>= <expr><call><name>JSD_GetDefaultJSContext</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>JS_GC</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
    
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>DumpHeap</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name> &amp;</type><name>fileName</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_CONTEXT</name></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DEBUG</name></cpp:ifndef>
    <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> *</type><name>file</name> <init>= <expr>!<call><name><name>fileName</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call> ? <call><name>fopen</name><argument_list>(<argument><expr><call><name>PromiseFlatCString</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"w"</expr></argument>)</argument_list></call> : <name>stdout</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>file</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name> <init>= <expr><call><name>JSD_GetDefaultJSContext</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name>JS_DumpHeap</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>size_t</name>)-1</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><name>file</name> != <name>stdout</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></else></if>
    <return>return <expr><name>rv</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>ClearProfileData</name></name> <parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_CONTEXT</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JSD_ClearAllProfileData</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>InsertFilter</name></name> <parameter_list>(<param><decl><type><name>jsdIFilter</name> *</type><name>filter</name></decl></param>, <param><decl><type><name>jsdIFilter</name> *</type><name>after</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name> <argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>jsds_FindFilter</name> <argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>FilterRecord</name> *</type><name>rec</name> <init>= <expr><call><name>PR_NEWZAP</name> <argument_list>(<argument><expr><name>FilterRecord</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>rec</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<call><name>jsds_SyncFilter</name> <argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PR_Free</name> <argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></then></if>
    
    <if>if <condition>(<expr><name>gFilters</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<name>after</name></expr>)</condition><then> <block>{
            <comment type="block">/* insert at head of list */</comment>
            <expr_stmt><expr><call><name>PR_INSERT_LINK</name><argument_list>(<argument><expr>&amp;<name><name>rec</name>-&gt;<name>links</name></name></expr></argument>, <argument><expr>&amp;<name><name>gFilters</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>gFilters</name> = <name>rec</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="block">/* insert somewhere in the list */</comment>
            <decl_stmt><decl><type><name>FilterRecord</name> *</type><name>afterRecord</name> <init>= <expr><call><name>jsds_FindFilter</name> <argument_list>(<argument><expr><name>after</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name>afterRecord</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>jsds_FreeFilter</name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><call><name>PR_INSERT_AFTER</name><argument_list>(<argument><expr>&amp;<name><name>rec</name>-&gt;<name>links</name></name></expr></argument>, <argument><expr>&amp;<name><name>afterRecord</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr><name>after</name></expr>)</condition><then> <block>{
            <comment type="block">/* user asked to insert into the middle of an empty list, bail. */</comment>
            <expr_stmt><expr><call><name>jsds_FreeFilter</name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NS_ERROR_NOT_INITIALIZED</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>PR_INIT_CLIST</name><argument_list>(<argument><expr>&amp;<name><name>rec</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>gFilters</name> = <name>rec</name></expr>;</expr_stmt>
    }</block></else></if>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>AppendFilter</name></name> <parameter_list>(<param><decl><type><name>jsdIFilter</name> *</type><name>filter</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name> <argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>jsds_FindFilter</name> <argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return></then></if>
    <decl_stmt><decl><type><name>FilterRecord</name> *</type><name>rec</name> <init>= <expr><call><name>PR_NEWZAP</name> <argument_list>(<argument><expr><name>FilterRecord</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>jsds_SyncFilter</name> <argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PR_Free</name> <argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></then></if>
    
    <if>if <condition>(<expr><name>gFilters</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PR_INSERT_BEFORE</name><argument_list>(<argument><expr>&amp;<name><name>rec</name>-&gt;<name>links</name></name></expr></argument>, <argument><expr>&amp;<name><name>gFilters</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>PR_INIT_CLIST</name><argument_list>(<argument><expr>&amp;<name><name>rec</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>gFilters</name> = <name>rec</name></expr>;</expr_stmt>
    }</block></else></if>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>RemoveFilter</name></name> <parameter_list>(<param><decl><type><name>jsdIFilter</name> *</type><name>filter</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>FilterRecord</name> *</type><name>rec</name> <init>= <expr><call><name>jsds_FindFilter</name> <argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>rec</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return></then></if>
    
    <if>if <condition>(<expr><name>gFilters</name> == <name>rec</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>gFilters</name> = <call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>FilterRecord</name> *</expr></argument>&gt;</argument_list></name>
                                   <argument_list>(<argument><expr><call><name>PR_NEXT_LINK</name><argument_list>(<argument><expr>&amp;<name><name>rec</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* If we're the only filter left, null out the list head. */</comment>
        <if>if <condition>(<expr><name>gFilters</name> == <name>rec</name></expr>)</condition><then>
            <expr_stmt><expr><name>gFilters</name> = <name>nsnull</name></expr>;</expr_stmt></then></if>
    }</block></then></if>

    
    <expr_stmt><expr><call><name>PR_REMOVE_LINK</name><argument_list>(<argument><expr>&amp;<name><name>rec</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>jsds_FreeFilter</name> <argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>SwapFilters</name></name> <parameter_list>(<param><decl><type><name>jsdIFilter</name> *</type><name>filter_a</name></decl></param>, <param><decl><type><name>jsdIFilter</name> *</type><name>filter_b</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>filter_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>filter_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>FilterRecord</name> *</type><name>rec_a</name> <init>= <expr><call><name>jsds_FindFilter</name> <argument_list>(<argument><expr><name>filter_a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>rec_a</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return></then></if>
    
    <if>if <condition>(<expr><name>filter_a</name> == <name>filter_b</name></expr>)</condition><then> <block>{
        <comment type="block">/* just a refresh */</comment>
        <if>if <condition>(<expr>!<call><name>jsds_SyncFilter</name> <argument_list>(<argument><expr><name>rec_a</name></expr></argument>, <argument><expr><name>filter_a</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>
    
    <decl_stmt><decl><type><name>FilterRecord</name> *</type><name>rec_b</name> <init>= <expr><call><name>jsds_FindFilter</name> <argument_list>(<argument><expr><name>filter_b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>rec_b</name></expr>)</condition><then> <block>{
        <comment type="block">/* filter_b is not in the list, replace filter_a with filter_b. */</comment>
        <if>if <condition>(<expr>!<call><name>jsds_SyncFilter</name> <argument_list>(<argument><expr><name>rec_a</name></expr></argument>, <argument><expr><name>filter_b</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
    }</block></then> <else>else <block>{
        <comment type="block">/* both filters are in the list, swap. */</comment>
        <if>if <condition>(<expr>!<call><name>jsds_SyncFilter</name> <argument_list>(<argument><expr><name>rec_a</name></expr></argument>, <argument><expr><name>filter_b</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
        <if>if <condition>(<expr>!<call><name>jsds_SyncFilter</name> <argument_list>(<argument><expr><name>rec_b</name></expr></argument>, <argument><expr><name>filter_a</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
    }</block></else></if>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>EnumerateFilters</name></name> <parameter_list>(<param><decl><type><name>jsdIFilterEnumerator</name> *</type><name>enumerator</name></decl></param>)</parameter_list> 
<block>{
    <if>if <condition>(<expr>!<name>gFilters</name></expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
    
    <decl_stmt><decl><type><name>FilterRecord</name> *</type><name>current</name> <init>= <expr><name>gFilters</name></expr></init></decl>;</decl_stmt>
    <do>do <block>{
        <expr_stmt><expr><call><name>jsds_SyncFilter</name> <argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name><name>current</name>-&gt;<name>filterObject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* SyncFilter failure would be bad, but what would we do about it? */</comment>
        <if>if <condition>(<expr><name>enumerator</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>enumerator</name>-&gt;<name>EnumerateFilter</name></name> <argument_list>(<argument><expr><name><name>current</name>-&gt;<name>filterObject</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>rv</name></expr>;</return></then></if>
        }</block></then></if>
        <expr_stmt><expr><name>current</name> = <call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>FilterRecord</name> *</expr></argument>&gt;</argument_list></name>
                                  <argument_list>(<argument><expr><call><name>PR_NEXT_LINK</name> <argument_list>(<argument><expr>&amp;<name><name>current</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> while <condition>(<expr><name>current</name> != <name>gFilters</name></expr>)</condition>;</do>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>RefreshFilters</name></name> <parameter_list>()</parameter_list>
<block>{
    <return>return <expr><call><name>EnumerateFilters</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>ClearFilters</name></name> <parameter_list>()</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>gFilters</name></expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>FilterRecord</name> *</type><name>current</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>FilterRecord</name> *</expr></argument>&gt;</argument_list></name>
                                            <argument_list>(<argument><expr><call><name>PR_NEXT_LINK</name> <argument_list>(<argument><expr>&amp;<name><name>gFilters</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <do>do <block>{
        <decl_stmt><decl><type><name>FilterRecord</name> *</type><name>next</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>FilterRecord</name> *</expr></argument>&gt;</argument_list></name>
                                             <argument_list>(<argument><expr><call><name>PR_NEXT_LINK</name> <argument_list>(<argument><expr>&amp;<name><name>current</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>PR_REMOVE_AND_INIT_LINK</name><argument_list>(<argument><expr>&amp;<name><name>current</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>jsds_FreeFilter</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>current</name> = <name>next</name></expr>;</expr_stmt>
    }</block> while <condition>(<expr><name>current</name> != <name>gFilters</name></expr>)</condition>;</do>
    
    <expr_stmt><expr><call><name>jsds_FreeFilter</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gFilters</name> = <name>nsnull</name></expr>;</expr_stmt>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
        
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>ClearAllBreakpoints</name></name> <parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_CONTEXT</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>JSD_LockScriptSubsystem</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JSD_ClearAllExecutionHooks</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JSD_UnlockScriptSubsystem</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>WrapValue</name></name><parameter_list>(<param><decl><type><name>jsdIValue</name> **</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>ASSERT_VALID_CONTEXT</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXPConnect</name></expr></argument>&gt;</argument_list></name></type> <name>xpc</name> <init>= <expr><call><name>do_GetService</name> <argument_list>(<argument><expr><call><name><name>nsIXPConnect</name>::<name>GetCID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>nsAXPCNativeCallContext</name> *</type><name>cc</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>xpc</name>-&gt;<name>GetCurrentNativeCallContext</name></name> <argument_list>(<argument><expr>&amp;<name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>PRUint32</name></type> <name>argc</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>cc</name>-&gt;<name>GetArgc</name></name> <argument_list>(<argument><expr>&amp;<name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name>argc</name> &lt; 1</expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return></then></if>
    
    <decl_stmt><decl><type><name>jsval</name>    *</type><name>argv</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>cc</name>-&gt;<name>GetArgvPtr</name></name> <argument_list>(<argument><expr>&amp;<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>

    <return>return <expr><call><name>WrapJSValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>_rval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>WrapJSValue</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>jsval</name> &amp;</type><name>value</name></decl></param>, <param><decl><type><name>jsdIValue</name>**</type> <name>_rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSDValue</name> *</type><name>jsdv</name> <init>= <expr><call><name>JSD_NewValue</name><argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>jsdv</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
    
    <expr_stmt><expr>*<name>_rval</name> = <call><name><name>jsdValue</name>::<name>FromPtr</name></name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsdv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>EnterNestedEventLoop</name></name> <parameter_list>(<param><decl><type><name>jsdINestCallback</name> *</type><name>callback</name></decl></param>, <param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <comment type="line">// Nesting event queues is a thing of the past.  Now, we just spin the</comment>
    <comment type="line">// current event loop.</comment>
 
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIJSContextStack</name></expr></argument>&gt;</argument_list></name></type> 
        <name>stack</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/js/xpc/ContextStack;1"</expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>nestLevel</name> <init>= <expr>++<name>mNestedLoopLevel</name></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIThread</name></expr></argument>&gt;</argument_list></name></type> <name>thread</name> <init>= <expr><call><name>do_GetCurrentThread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>stack</name>-&gt;<name>Push</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>callback</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>Pause</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rv</name> = <call><name><name>callback</name>-&gt;<name>OnNest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>UnPause</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <while>while <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; <name>mNestedLoopLevel</name> &gt;= <name>nestLevel</name></expr>)</condition> <block>{
            <if>if <condition>(<expr>!<call><name>NS_ProcessNextEvent</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_UNEXPECTED</name></expr>;</expr_stmt></then></if>
        }</block></while>

        <decl_stmt><decl><type><name>JSContext</name>*</type> <name>cx</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>stack</name>-&gt;<name>Pop</name></name><argument_list>(<argument><expr>&amp;<name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>cx</name> == <name>nsnull</name></expr></argument>, <argument><expr>"JSContextStack mismatch"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
        <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt></else></if>
    
    <expr_stmt><expr><call><name>NS_ASSERTION</name> <argument_list>(<argument><expr><name>mNestedLoopLevel</name> &lt;= <name>nestLevel</name></expr></argument>,
                  <argument><expr>"nested event didn't unwind properly"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>mNestedLoopLevel</name> == <name>nestLevel</name></expr>)</condition><then>
        <expr_stmt><expr>--<name>mNestedLoopLevel</name></expr>;</expr_stmt></then></if>

    <expr_stmt><expr>*<name>_rval</name> = <name>mNestedLoopLevel</name></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>ExitNestedEventLoop</name></name> <parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>_rval</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>mNestedLoopLevel</name> &gt; 0</expr>)</condition><then>
        <expr_stmt><expr>--<name>mNestedLoopLevel</name></expr>;</expr_stmt></then>
    <else>else
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></else></if>

    <expr_stmt><expr>*<name>_rval</name> = <name>mNestedLoopLevel</name></expr>;</expr_stmt>    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>    

<comment type="block">/* hook attribute get/set functions */</comment>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>SetErrorHook</name></name> <parameter_list>(<param><decl><type><name>jsdIErrorHook</name> *</type><name>aHook</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>mErrorHook</name> = <name>aHook</name></expr>;</expr_stmt>

    <comment type="block">/* if the debugger isn't initialized, that's all we can do for now.  The
     * OnForRuntime() method will do the rest when the coast is clear.
     */</comment>
    <if>if <condition>(<expr>!<name>mCx</name> || <name>mPauseLevel</name></expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>aHook</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JSD_SetErrorReporter</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_ErrorHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><call><name>JSD_SetErrorReporter</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>GetErrorHook</name></name> <parameter_list>(<param><decl><type><name>jsdIErrorHook</name> **</type><name>aHook</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>aHook</name> = <name>mErrorHook</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aHook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>SetBreakpointHook</name></name> <parameter_list>(<param><decl><type><name>jsdIExecutionHook</name> *</type><name>aHook</name></decl></param>)</parameter_list>
<block>{    
    <expr_stmt><expr><name>mBreakpointHook</name> = <name>aHook</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>GetBreakpointHook</name></name> <parameter_list>(<param><decl><type><name>jsdIExecutionHook</name> **</type><name>aHook</name></decl></param>)</parameter_list>
<block>{   
    <expr_stmt><expr>*<name>aHook</name> = <name>mBreakpointHook</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aHook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>SetDebugHook</name></name> <parameter_list>(<param><decl><type><name>jsdIExecutionHook</name> *</type><name>aHook</name></decl></param>)</parameter_list>
<block>{    
    <expr_stmt><expr><name>mDebugHook</name> = <name>aHook</name></expr>;</expr_stmt>

    <comment type="block">/* if the debugger isn't initialized, that's all we can do for now.  The
     * OnForRuntime() method will do the rest when the coast is clear.
     */</comment>
    <if>if <condition>(<expr>!<name>mCx</name> || <name>mPauseLevel</name></expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>aHook</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JSD_SetDebugBreakHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_ExecutionHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><call><name>JSD_ClearDebugBreakHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>GetDebugHook</name></name> <parameter_list>(<param><decl><type><name>jsdIExecutionHook</name> **</type><name>aHook</name></decl></param>)</parameter_list>
<block>{   
    <expr_stmt><expr>*<name>aHook</name> = <name>mDebugHook</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aHook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>SetDebuggerHook</name></name> <parameter_list>(<param><decl><type><name>jsdIExecutionHook</name> *</type><name>aHook</name></decl></param>)</parameter_list>
<block>{    
    <expr_stmt><expr><name>mDebuggerHook</name> = <name>aHook</name></expr>;</expr_stmt>

    <comment type="block">/* if the debugger isn't initialized, that's all we can do for now.  The
     * OnForRuntime() method will do the rest when the coast is clear.
     */</comment>
    <if>if <condition>(<expr>!<name>mCx</name> || <name>mPauseLevel</name></expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>aHook</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JSD_SetDebuggerHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_ExecutionHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><call><name>JSD_ClearDebuggerHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>GetDebuggerHook</name></name> <parameter_list>(<param><decl><type><name>jsdIExecutionHook</name> **</type><name>aHook</name></decl></param>)</parameter_list>
<block>{   
    <expr_stmt><expr>*<name>aHook</name> = <name>mDebuggerHook</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aHook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>SetInterruptHook</name></name> <parameter_list>(<param><decl><type><name>jsdIExecutionHook</name> *</type><name>aHook</name></decl></param>)</parameter_list>
<block>{    
    <expr_stmt><expr><name>mInterruptHook</name> = <name>aHook</name></expr>;</expr_stmt>

    <comment type="block">/* if the debugger isn't initialized, that's all we can do for now.  The
     * OnForRuntime() method will do the rest when the coast is clear.
     */</comment>
    <if>if <condition>(<expr>!<name>mCx</name> || <name>mPauseLevel</name></expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>aHook</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JSD_SetInterruptHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_ExecutionHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><call><name>JSD_ClearInterruptHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>GetInterruptHook</name></name> <parameter_list>(<param><decl><type><name>jsdIExecutionHook</name> **</type><name>aHook</name></decl></param>)</parameter_list>
<block>{   
    <expr_stmt><expr>*<name>aHook</name> = <name>mInterruptHook</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aHook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>SetScriptHook</name></name> <parameter_list>(<param><decl><type><name>jsdIScriptHook</name> *</type><name>aHook</name></decl></param>)</parameter_list>
<block>{    
    <expr_stmt><expr><name>mScriptHook</name> = <name>aHook</name></expr>;</expr_stmt>

    <comment type="block">/* if the debugger isn't initialized, that's all we can do for now.  The
     * OnForRuntime() method will do the rest when the coast is clear.
     */</comment>
    <if>if <condition>(<expr>!<name>mCx</name> || <name>mPauseLevel</name></expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
    
    <if>if <condition>(<expr><name>aHook</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JSD_SetScriptHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_ScriptHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <comment type="block">/* we can't unset it if !aHook, because we still need to see script
     * deletes in order to Release the jsdIScripts held in JSDScript
     * private data. */</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>GetScriptHook</name></name> <parameter_list>(<param><decl><type><name>jsdIScriptHook</name> **</type><name>aHook</name></decl></param>)</parameter_list>
<block>{   
    <expr_stmt><expr>*<name>aHook</name> = <name>mScriptHook</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aHook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>SetThrowHook</name></name> <parameter_list>(<param><decl><type><name>jsdIExecutionHook</name> *</type><name>aHook</name></decl></param>)</parameter_list>
<block>{    
    <expr_stmt><expr><name>mThrowHook</name> = <name>aHook</name></expr>;</expr_stmt>

    <comment type="block">/* if the debugger isn't initialized, that's all we can do for now.  The
     * OnForRuntime() method will do the rest when the coast is clear.
     */</comment>
    <if>if <condition>(<expr>!<name>mCx</name> || <name>mPauseLevel</name></expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>aHook</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JSD_SetThrowHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_ExecutionHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><call><name>JSD_ClearThrowHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>GetThrowHook</name></name> <parameter_list>(<param><decl><type><name>jsdIExecutionHook</name> **</type><name>aHook</name></decl></param>)</parameter_list>
<block>{   
    <expr_stmt><expr>*<name>aHook</name> = <name>mThrowHook</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aHook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>SetTopLevelHook</name></name> <parameter_list>(<param><decl><type><name>jsdICallHook</name> *</type><name>aHook</name></decl></param>)</parameter_list>
<block>{    
    <expr_stmt><expr><name>mTopLevelHook</name> = <name>aHook</name></expr>;</expr_stmt>

    <comment type="block">/* if the debugger isn't initialized, that's all we can do for now.  The
     * OnForRuntime() method will do the rest when the coast is clear.
     */</comment>
    <if>if <condition>(<expr>!<name>mCx</name> || <name>mPauseLevel</name></expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>aHook</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JSD_SetTopLevelHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_CallHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><call><name>JSD_ClearTopLevelHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>GetTopLevelHook</name></name> <parameter_list>(<param><decl><type><name>jsdICallHook</name> **</type><name>aHook</name></decl></param>)</parameter_list>
<block>{   
    <expr_stmt><expr>*<name>aHook</name> = <name>mTopLevelHook</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aHook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>SetFunctionHook</name></name> <parameter_list>(<param><decl><type><name>jsdICallHook</name> *</type><name>aHook</name></decl></param>)</parameter_list>
<block>{    
    <expr_stmt><expr><name>mFunctionHook</name> = <name>aHook</name></expr>;</expr_stmt>

    <comment type="block">/* if the debugger isn't initialized, that's all we can do for now.  The
     * OnForRuntime() method will do the rest when the coast is clear.
     */</comment>
    <if>if <condition>(<expr>!<name>mCx</name> || <name>mPauseLevel</name></expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>aHook</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JSD_SetFunctionHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>, <argument><expr><name>jsds_CallHookProc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><call><name>JSD_ClearFunctionHook</name> <argument_list>(<argument><expr><name>mCx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdService</name>::<name>GetFunctionHook</name></name> <parameter_list>(<param><decl><type><name>jsdICallHook</name> **</type><name>aHook</name></decl></param>)</parameter_list>
<block>{   
    <expr_stmt><expr>*<name>aHook</name> = <name>mFunctionHook</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aHook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* virtual */</comment>
<destructor><name><name>jsdService</name>::~<name>jsdService</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ClearFilters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mErrorHook</name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mBreakpointHook</name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mDebugHook</name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mDebuggerHook</name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mInterruptHook</name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mScriptHook</name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mThrowHook</name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mTopLevelHook</name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mFunctionHook</name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>gGCStatus</name> = <name>JSGC_END</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gJsds</name> = <name>nsnull</name></expr>;</expr_stmt>
}</block></destructor>

<function><type><name>jsdService</name> *</type>
<name><name>jsdService</name>::<name>GetService</name></name> <parameter_list>()</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>gJsds</name></expr>)</condition><then>
        <expr_stmt><expr><name>gJsds</name> = new <call><name>jsdService</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr><name>gJsds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>gJsds</name></expr>;</return>
}</block></function>

<macro><name>NS_GENERIC_FACTORY_SINGLETON_CONSTRUCTOR</name><argument_list>(<argument>jsdService</argument>, <argument>jsdService::GetService</argument>)</argument_list></macro>

<comment type="block">/* app-start observer.  turns on the debugger at app-start.  this is inserted
 * and/or removed from the app-start category by the jsdService::initAtStartup
 * property.
 */</comment>
<class>class <name>jsdASObserver</name> <super>: <specifier>public</specifier> <name>nsIObserver</name></super> 
<block>{<private type="default">
  </private><public>public:
    <function><type><name>NS_DECL_ISUPPORTS</name>
    <name>NS_DECL_NSIOBSERVER</name></type>

    <name>jsdASObserver</name> <parameter_list>()</parameter_list> <block>{}</block></function>    
</public>}</block>;</class>

<macro><name>NS_IMPL_THREADSAFE_ISUPPORTS1</name><argument_list>(<argument>jsdASObserver</argument>, <argument>nsIObserver</argument>)</argument_list></macro>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>jsdASObserver</name>::<name>Observe</name></name> <parameter_list>(<param><decl><type><name>nsISupports</name> *</type><name>aSubject</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aTopic</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>aData</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

    <comment type="line">// Hmm.  Why is the app-startup observer called multiple times?</comment>
    <comment type="line">//NS_ASSERTION(!gJsds, "app startup observer called twice");</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>jsdIDebuggerService</name></expr></argument>&gt;</argument_list></name></type> <name>jsds</name> <init>= <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>jsdServiceCtrID</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>PRBool</name></type> <name>on</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>jsds</name>-&gt;<name>GetIsOn</name></name><argument_list>(<argument><expr>&amp;<name>on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> || <name>on</name></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>
    
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIJSRuntimeService</name></expr></argument>&gt;</argument_list></name></type> <name>rts</name> <init>= <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_JSRT_CTRID</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>    

    <decl_stmt><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>rts</name>-&gt;<name>GetRuntime</name></name> <argument_list>(<argument><expr>&amp;<name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>

    <expr_stmt><expr><name>rv</name> = <call><name><name>jsds</name>-&gt;<name>OnForRuntime</name></name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>
    
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<macro><name>NS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>jsdASObserver</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>JSDSERVICE_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NS_DEFINE_NAMED_CID</name><argument_list>(<argument><expr><name>JSDASO_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>mozilla</name>::<name>Module</name>::<name>CIDEntry</name></name></type> <name><name>kJSDCIDs</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr>&amp;<name>kJSDSERVICE_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>jsdServiceConstructor</name></expr> }</block></expr>,
    <expr><block>{ <expr>&amp;<name>kJSDASO_CID</name></expr>, <expr>false</expr>, <expr><name>NULL</name></expr>, <expr><name>jsdASObserverConstructor</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>mozilla</name>::<name>Module</name>::<name>ContractIDEntry</name></name></type> <name><name>kJSDContracts</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><name>jsdServiceCtrID</name></expr>, <expr>&amp;<name>kJSDSERVICE_CID</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>jsdARObserverCtrID</name></expr>, <expr>&amp;<name>kJSDASO_CID</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>mozilla</name>::<name>Module</name></name></type> <name>kJSDModule</name> <init>= <expr><block>{
    <expr><name><name>mozilla</name>::<name>Module</name>::<name>kVersion</name></name></expr>,
    <expr><name>kJSDCIDs</name></expr>,
    <expr><name>kJSDContracts</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>NSMODULE_DEFN</name><argument_list>(<argument><expr><name>JavaScript_Debugger</name></expr></argument>)</argument_list></call> = &amp;<name>kJSDModule</name></expr>;</expr_stmt>

<comment type="block" format="doxygen">/********************************************************************************
 ********************************************************************************
 * graveyard
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
<comment type="block">/* Thread States */</comment>
NS_IMPL_THREADSAFE_ISUPPORTS1(jsdThreadState, jsdIThreadState); 

NS_IMETHODIMP
jsdThreadState::GetJSDContext(JSDContext **_rval)
{
    *_rval = mCx;
    return NS_OK;
}

NS_IMETHODIMP
jsdThreadState::GetJSDThreadState(JSDThreadState **_rval)
{
    *_rval = mThreadState;
    return NS_OK;
}

NS_IMETHODIMP
jsdThreadState::GetFrameCount (PRUint32 *_rval)
{
    *_rval = JSD_GetCountOfStackFrames (mCx, mThreadState);
    return NS_OK;
}

NS_IMETHODIMP
jsdThreadState::GetTopFrame (jsdIStackFrame **_rval)
{
    JSDStackFrameInfo *sfi = JSD_GetStackFrame (mCx, mThreadState);
    
    *_rval = jsdStackFrame::FromPtr (mCx, mThreadState, sfi);
    return NS_OK;
}

NS_IMETHODIMP
jsdThreadState::GetPendingException(jsdIValue **_rval)
{
    JSDValue *jsdv = JSD_GetException (mCx, mThreadState);
    
    *_rval = jsdValue::FromPtr (mCx, jsdv);
    return NS_OK;
}

NS_IMETHODIMP
jsdThreadState::SetPendingException(jsdIValue *aException)
{
    JSDValue *jsdv;
    
    nsresult rv = aException-&gt;GetJSDValue (&amp;jsdv);
    if (NS_FAILED(rv))
        return NS_ERROR_FAILURE;
    
    if (!JSD_SetException (mCx, mThreadState, jsdv))
        return NS_ERROR_FAILURE;

    return NS_OK;
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
