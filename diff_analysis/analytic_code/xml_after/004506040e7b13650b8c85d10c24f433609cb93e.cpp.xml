<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="004506040e7b13650b8c85d10c24f433609cb93e.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2007
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Jonas Sicking &lt;jonas@sicking.cc&gt; (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCrossSiteListenerProxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIChannel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIHttpChannel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptSecurityManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNetUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIParser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsParserCIID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsICharsetAlias.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsMimeTypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIStreamConverterService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStringStream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsParserUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGkAtoms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsWhitespaceTokenizer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIChannelEventSink.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIAsyncVerifyRedirectCallback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCharSeparatedTokenizer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAsyncRedirectVerifyHelper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prclist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prtime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsClassHashtable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsHashKeys.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFLIGHT_CACHE_SIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>PRBool</name></type> <name>gDisableCORS</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PRBool</name></type> <name>gDisableCORSPrivateData</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>

<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Preflight cache</comment>

<class>class <name>nsPreflightCache</name>
<block>{<private type="default">
</private><public>public:
  <struct>struct <name>TokenTime</name>
  <block>{<public type="default">
    <decl_stmt><decl><type><name>nsCString</name></type> <name>token</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRTime</name></type> <name>expirationTime</name></decl>;</decl_stmt>
  </public>}</block>;</struct>

  <struct>struct <name>CacheEntry</name> <super>: <specifier>public</specifier> <name>PRCList</name></super>
  <block>{<public type="default">
    <constructor><name>CacheEntry</name><parameter_list>(<param><decl><type><name>nsCString</name>&amp;</type> <name>aKey</name></decl></param>)</parameter_list>
      <member_list>: <call><name>mKey</name><argument_list>(<argument><expr><name>aKey</name></expr></argument>)</argument_list></call>
    </member_list><block>{
      <expr_stmt><expr><call><name>MOZ_COUNT_CTOR</name><argument_list>(<argument><expr><name><name>nsPreflightCache</name>::<name>CacheEntry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <destructor><name>~<name>CacheEntry</name></name><parameter_list>()</parameter_list>
    <block>{
      <expr_stmt><expr><call><name>MOZ_COUNT_DTOR</name><argument_list>(<argument><expr><name><name>nsPreflightCache</name>::<name>CacheEntry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></destructor>

    <function_decl><type><name>void</name></type> <name>PurgeExpired</name><parameter_list>(<param><decl><type><name>PRTime</name></type> <name>now</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>PRBool</name></type> <name>CheckRequest</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsCString</name>&amp;</type> <name>aMethod</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsCString</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aCustomHeaders</name></decl></param>)</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name>nsCString</name></type> <name>mKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>TokenTime</name></expr></argument>&gt;</argument_list></name></type> <name>mMethods</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>TokenTime</name></expr></argument>&gt;</argument_list></name></type> <name>mHeaders</name></decl>;</decl_stmt>
  </public>}</block>;</struct>

  <constructor><name>nsPreflightCache</name><parameter_list>()</parameter_list>
  <block>{
    <expr_stmt><expr><call><name>MOZ_COUNT_CTOR</name><argument_list>(<argument><expr><name>nsPreflightCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PR_INIT_CLIST</name><argument_list>(<argument><expr>&amp;<name>mList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <destructor><name>~<name>nsPreflightCache</name></name><parameter_list>()</parameter_list>
  <block>{
    <expr_stmt><expr><call><name>Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MOZ_COUNT_DTOR</name><argument_list>(<argument><expr><name>nsPreflightCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></destructor>

  <function><type><name>PRBool</name></type> <name>Initialize</name><parameter_list>()</parameter_list>
  <block>{
    <return>return <expr><call><name><name>mTable</name>.<name>Init</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function_decl><type><name>CacheEntry</name>*</type> <name>GetEntry</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>, <param><decl><type><name>nsIPrincipal</name>*</type> <name>aPrincipal</name></decl></param>,
                       <param><decl><type><name>PRBool</name></type> <name>aWithCredentials</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aCreate</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>RemoveEntries</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>, <param><decl><type><name>nsIPrincipal</name>*</type> <name>aPrincipal</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>;</function_decl>

</public><private>private:
  <function_decl><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
    <name>RemoveExpiredEntries</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aKey</name></decl></param>, <param><decl><type><name><name>nsAutoPtr</name><argument_list>&lt;<argument><expr><name>CacheEntry</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aValue</name></decl></param>,
                         <param><decl><type><name>void</name>*</type> <name>aUserData</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>PRBool</name></type> <name>GetCacheKey</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>, <param><decl><type><name>nsIPrincipal</name>*</type> <name>aPrincipal</name></decl></param>,
                            <param><decl><type><name>PRBool</name></type> <name>aWithCredentials</name></decl></param>, <param><decl><type><name>nsACString</name>&amp;</type> <name>_retval</name></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name><name>nsClassHashtable</name><argument_list>&lt;<argument><expr><name>nsCStringHashKey</name></expr></argument>, <argument><expr><name>CacheEntry</name></expr></argument>&gt;</argument_list></name></type> <name>mTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRCList</name></type> <name>mList</name></decl>;</decl_stmt>
</private>}</block>;</class>

<comment type="line">// Will be initialized in EnsurePreflightCache.</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>nsPreflightCache</name>*</type> <name>sPreflightCache</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PRBool</name></type> <name>EnsurePreflightCache</name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>sPreflightCache</name></expr>)</condition><then>
    <return>return <expr><name>PR_TRUE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsAutoPtr</name><argument_list>&lt;<argument><expr><name>nsPreflightCache</name></expr></argument>&gt;</argument_list></name></type> <name>newCache</name><argument_list>(<argument><expr>new <call><name>nsPreflightCache</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name><name>newCache</name>-&gt;<name>Initialize</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>sPreflightCache</name> = <call><name><name>newCache</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>PR_TRUE</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsPreflightCache</name>::<name>CacheEntry</name>::<name>PurgeExpired</name></name><parameter_list>(<param><decl><type><name>PRTime</name></type> <name>now</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name><name>mMethods</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <if>if <condition>(<expr><name>now</name> &gt;= <name><name>mMethods</name><index>[<expr><name>i</name></expr>]</index></name>.<name>expirationTime</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mMethods</name>.<name>RemoveElementAt</name></name><argument_list>(<argument><expr><name>i</name>--</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name><name>mHeaders</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <if>if <condition>(<expr><name>now</name> &gt;= <name><name>mHeaders</name><index>[<expr><name>i</name></expr>]</index></name>.<name>expirationTime</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mHeaders</name>.<name>RemoveElementAt</name></name><argument_list>(<argument><expr><name>i</name>--</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsPreflightCache</name>::<name>CacheEntry</name>::<name>CheckRequest</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsCString</name>&amp;</type> <name>aMethod</name></decl></param>,
                                           <param><decl><type><specifier>const</specifier> <name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsCString</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aHeaders</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>PurgeExpired</name><argument_list>(<argument><expr><call><name>PR_Now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<call><name><name>aMethod</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"GET"</expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>aMethod</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"POST"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name><name>mMethods</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
      <if>if <condition>(<expr><call><name><name>aMethod</name>.<name>Equals</name></name><argument_list>(<argument><expr><name><name>mMethods</name><index>[<expr><name>i</name></expr>]</index></name>.<name>token</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <break>break;</break></then></if>
    }</block></for>
    <if>if <condition>(<expr><name>i</name> == <call><name><name>mMethods</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>PR_FALSE</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>aHeaders</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>j</name></decl>;</decl_stmt>
    <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <call><name><name>mHeaders</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
      <if>if <condition>(<expr><name><name>aHeaders</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>Equals</name><argument_list>(<argument><expr><name><name>mHeaders</name><index>[<expr><name>j</name></expr>]</index></name>.<name>token</name></expr></argument>,
                             <argument><expr><call><name>nsCaseInsensitiveCStringComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <break>break;</break>
      }</block></then></if>
    }</block></for>
    <if>if <condition>(<expr><name>j</name> == <call><name><name>mHeaders</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>PR_FALSE</name></expr>;</return>
    }</block></then></if>
  }</block></for>

  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name><name>nsPreflightCache</name>::<name>CacheEntry</name></name>*</type>
<name><name>nsPreflightCache</name>::<name>GetEntry</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>,
                           <param><decl><type><name>nsIPrincipal</name>*</type> <name>aPrincipal</name></decl></param>,
                           <param><decl><type><name>PRBool</name></type> <name>aWithCredentials</name></decl></param>,
                           <param><decl><type><name>PRBool</name></type> <name>aCreate</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsCString</name></type> <name>key</name></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<call><name>GetCacheKey</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><name>aPrincipal</name></expr></argument>, <argument><expr><name>aWithCredentials</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"Invalid cache key!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>CacheEntry</name>*</type> <name>entry</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name><name>mTable</name>.<name>Get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// Entry already existed so just return it. Also update the LRU list.</comment>

    <comment type="line">// Move to the head of the list.</comment>
    <expr_stmt><expr><call><name>PR_REMOVE_LINK</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PR_INSERT_LINK</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr>&amp;<name>mList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>entry</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr>!<name>aCreate</name></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// This is a new entry, allocate and insert into the table now so that any</comment>
  <comment type="line">// failures don't cause items to be removed from a full cache.</comment>
  <expr_stmt><expr><name>entry</name> = new <call><name>CacheEntry</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"Failed to allocate new cache entry!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr>!<call><name><name>mTable</name>.<name>Put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// Failed, clean up the new entry.</comment>
    <expr_stmt><expr>delete <name>entry</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"Failed to add entry to the CORS cache!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>PR_INSERT_LINK</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr>&amp;<name>mList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>mTable</name>.<name>Count</name></name><argument_list>()</argument_list></call> &lt;= <name>PREFLIGHT_CACHE_SIZE</name> + 1</expr></argument>,
               <argument><expr>"Something is borked, too many entries in the cache!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Now enforce the max count.</comment>
  <if>if <condition>(<expr><call><name><name>mTable</name>.<name>Count</name></name><argument_list>()</argument_list></call> &gt; <name>PREFLIGHT_CACHE_SIZE</name></expr>)</condition><then> <block>{
    <comment type="line">// Try to kick out all the expired entries.</comment>
    <decl_stmt><decl><type><name>PRTime</name></type> <name>now</name> <init>= <expr><call><name>PR_Now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mTable</name>.<name>Enumerate</name></name><argument_list>(<argument><expr><name>RemoveExpiredEntries</name></expr></argument>, <argument><expr>&amp;<name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If that didn't remove anything then kick out the least recently used</comment>
    <comment type="line">// entry.</comment>
    <if>if <condition>(<expr><call><name><name>mTable</name>.<name>Count</name></name><argument_list>()</argument_list></call> &gt; <name>PREFLIGHT_CACHE_SIZE</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>CacheEntry</name>*</type> <name>lruEntry</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>CacheEntry</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>PR_LIST_TAIL</name><argument_list>(<argument><expr>&amp;<name>mList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>PR_REMOVE_LINK</name><argument_list>(<argument><expr><name>lruEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// This will delete 'lruEntry'.</comment>
      <expr_stmt><expr><call><name><name>mTable</name>.<name>Remove</name></name><argument_list>(<argument><expr><name><name>lruEntry</name>-&gt;<name>mKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>mTable</name>.<name>Count</name></name><argument_list>()</argument_list></call> == <name>PREFLIGHT_CACHE_SIZE</name></expr></argument>,
                   <argument><expr>"Somehow tried to remove an entry that was never added!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
  
  <return>return <expr><name>entry</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsPreflightCache</name>::<name>RemoveEntries</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>, <param><decl><type><name>nsIPrincipal</name>*</type> <name>aPrincipal</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>CacheEntry</name>*</type> <name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsCString</name></type> <name>key</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>GetCacheKey</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><name>aPrincipal</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> &amp;&amp;
      <call><name><name>mTable</name>.<name>Get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PR_REMOVE_LINK</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mTable</name>.<name>Remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><call><name>GetCacheKey</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><name>aPrincipal</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> &amp;&amp;
      <call><name><name>mTable</name>.<name>Get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PR_REMOVE_LINK</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mTable</name>.<name>Remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsPreflightCache</name>::<name>Clear</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>PR_INIT_CLIST</name><argument_list>(<argument><expr>&amp;<name>mList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mTable</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* static */</comment> <function><type><name>PLDHashOperator</name></type>
<name><name>nsPreflightCache</name>::<name>RemoveExpiredEntries</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aKey</name></decl></param>,
                                           <param><decl><type><name><name>nsAutoPtr</name><argument_list>&lt;<argument><expr><name>CacheEntry</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aValue</name></decl></param>,
                                           <param><decl><type><name>void</name>*</type> <name>aUserData</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRTime</name>*</type> <name>now</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PRTime</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aUserData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>PurgeExpired</name></name><argument_list>(<argument><expr>*<name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if>if <condition>(<expr><call><name><name>aValue</name>-&gt;<name>mHeaders</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call> &amp;&amp;
      <call><name><name>aValue</name>-&gt;<name>mHeaders</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// Expired, remove from the list as well as the hash table.</comment>
    <expr_stmt><expr><call><name>PR_REMOVE_LINK</name><argument_list>(<argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>PL_DHASH_REMOVE</name></expr>;</return>
  }</block></then></if>
  
  <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<comment type="block">/* static */</comment> <function><type><name>PRBool</name></type>
<name><name>nsPreflightCache</name>::<name>GetCacheKey</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>,
                              <param><decl><type><name>nsIPrincipal</name>*</type> <name>aPrincipal</name></decl></param>,
                              <param><decl><type><name>PRBool</name></type> <name>aWithCredentials</name></decl></param>,
                              <param><decl><type><name>nsACString</name>&amp;</type> <name>_retval</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr>"Null uri!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aPrincipal</name></expr></argument>, <argument><expr>"Null principal!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>NS_NAMED_LITERAL_CSTRING</name><argument_list>(<argument><expr><name>space</name></expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>aPrincipal</name>-&gt;<name>GetURI</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>scheme</name></decl>, <decl><type ref="prev"/><name>host</name></decl>, <decl><type ref="prev"/><name>port</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>uri</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>uri</name>-&gt;<name>GetScheme</name></name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>uri</name>-&gt;<name>GetHost</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>port</name>.<name>AppendInt</name></name><argument_list>(<argument><expr><call><name>NS_GetRealPort</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>cred</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>aWithCredentials</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>_retval</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"cred"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <expr_stmt><expr><call><name><name>_retval</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"nocred"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>spec</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>aURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>_retval</name>.<name>Assign</name></name><argument_list>(<argument><expr><name>cred</name> + <name>space</name> + <name>scheme</name> + <name>space</name> + <name>host</name> + <name>space</name> + <name>port</name> + <name>space</name> +
                 <name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// nsCORSListenerProxy</comment>

<macro><name>NS_IMPL_ISUPPORTS5</name><argument_list>(<argument>nsCORSListenerProxy</argument>, <argument>nsIStreamListener</argument>,
                   <argument>nsIRequestObserver</argument>, <argument>nsIChannelEventSink</argument>,
                   <argument>nsIInterfaceRequestor</argument>, <argument>nsIAsyncVerifyRedirectCallback</argument>)</argument_list></macro>

<comment type="block">/* static */</comment>
<function><type><name>void</name></type>
<name><name>nsCORSListenerProxy</name>::<name>Startup</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>AddBoolPrefVarCache</name></name><argument_list>(<argument><expr>"content.cors.disable"</expr></argument>, <argument><expr>&amp;<name>gDisableCORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>AddBoolPrefVarCache</name></name><argument_list>(<argument><expr>"content.cors.no_private_data"</expr></argument>, <argument><expr>&amp;<name>gDisableCORSPrivateData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* static */</comment>
<function><type><name>void</name></type>
<name><name>nsCORSListenerProxy</name>::<name>Shutdown</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr>delete <name>sPreflightCache</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>sPreflightCache</name> = <name>nsnull</name></expr>;</expr_stmt>
}</block></function>

<constructor><name><name>nsCORSListenerProxy</name>::<name>nsCORSListenerProxy</name></name><parameter_list>(<param><decl><type><name>nsIStreamListener</name>*</type> <name>aOuter</name></decl></param>,
                                         <param><decl><type><name>nsIPrincipal</name>*</type> <name>aRequestingPrincipal</name></decl></param>,
                                         <param><decl><type><name>nsIChannel</name>*</type> <name>aChannel</name></decl></param>,
                                         <param><decl><type><name>PRBool</name></type> <name>aWithCredentials</name></decl></param>,
                                         <param><decl><type><name>nsresult</name>*</type> <name>aResult</name></decl></param>)</parameter_list>
  <member_list>: <call><name>mOuterListener</name><argument_list>(<argument><expr><name>aOuter</name></expr></argument>)</argument_list></call>,
    <call><name>mRequestingPrincipal</name><argument_list>(<argument><expr><name>aRequestingPrincipal</name></expr></argument>)</argument_list></call>,
    <call><name>mWithCredentials</name><argument_list>(<argument><expr><name>aWithCredentials</name> &amp;&amp; !<name>gDisableCORSPrivateData</name></expr></argument>)</argument_list></call>,
    <call><name>mRequestApproved</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>,
    <call><name>mHasBeenCrossSite</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>,
    <call><name>mIsPreflight</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>
</member_list><block>{
  <expr_stmt><expr><call><name><name>aChannel</name>-&gt;<name>GetNotificationCallbacks</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mOuterNotificationCallbacks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>aChannel</name>-&gt;<name>SetNotificationCallbacks</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aResult</name> = <call><name>UpdateChannel</name><argument_list>(<argument><expr><name>aChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr>*<name>aResult</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mOuterListener</name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mRequestingPrincipal</name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mOuterNotificationCallbacks</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>
}</block></constructor>

<constructor><name><name>nsCORSListenerProxy</name>::<name>nsCORSListenerProxy</name></name><parameter_list>(<param><decl><type><name>nsIStreamListener</name>*</type> <name>aOuter</name></decl></param>,
                                         <param><decl><type><name>nsIPrincipal</name>*</type> <name>aRequestingPrincipal</name></decl></param>,
                                         <param><decl><type><name>nsIChannel</name>*</type> <name>aChannel</name></decl></param>,
                                         <param><decl><type><name>PRBool</name></type> <name>aWithCredentials</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>nsCString</name>&amp;</type> <name>aPreflightMethod</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsCString</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aPreflightHeaders</name></decl></param>,
                                         <param><decl><type><name>nsresult</name>*</type> <name>aResult</name></decl></param>)</parameter_list>
  <member_list>: <call><name>mOuterListener</name><argument_list>(<argument><expr><name>aOuter</name></expr></argument>)</argument_list></call>,
    <call><name>mRequestingPrincipal</name><argument_list>(<argument><expr><name>aRequestingPrincipal</name></expr></argument>)</argument_list></call>,
    <call><name>mWithCredentials</name><argument_list>(<argument><expr><name>aWithCredentials</name> &amp;&amp; !<name>gDisableCORSPrivateData</name></expr></argument>)</argument_list></call>,
    <call><name>mRequestApproved</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>,
    <call><name>mHasBeenCrossSite</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>,
    <call><name>mIsPreflight</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call>,
    <call><name>mPreflightMethod</name><argument_list>(<argument><expr><name>aPreflightMethod</name></expr></argument>)</argument_list></call>,
    <call><name>mPreflightHeaders</name><argument_list>(<argument><expr><name>aPreflightHeaders</name></expr></argument>)</argument_list></call>
</member_list><block>{
  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>mPreflightHeaders</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <expr_stmt><expr><call><name>ToLowerCase</name><argument_list>(<argument><expr><name><name>mPreflightHeaders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><call><name><name>mPreflightHeaders</name>.<name>Sort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>aChannel</name>-&gt;<name>GetNotificationCallbacks</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mOuterNotificationCallbacks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>aChannel</name>-&gt;<name>SetNotificationCallbacks</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aResult</name> = <call><name>UpdateChannel</name><argument_list>(<argument><expr><name>aChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr>*<name>aResult</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mOuterListener</name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mRequestingPrincipal</name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mOuterNotificationCallbacks</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>
}</block></constructor>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsCORSListenerProxy</name>::<name>OnStartRequest</name></name><parameter_list>(<param><decl><type><name>nsIRequest</name>*</type> <name>aRequest</name></decl></param>,
                                    <param><decl><type><name>nsISupports</name>*</type> <name>aContext</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mRequestApproved</name> = <call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name>CheckRequestApproved</name><argument_list>(<argument><expr><name>aRequest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>mRequestApproved</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>sPreflightCache</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIChannel</name></expr></argument>&gt;</argument_list></name></type> <name>channel</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>channel</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>NS_GetFinalChannelURI</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>uri</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>sPreflightCache</name>-&gt;<name>RemoveEntries</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>mRequestingPrincipal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>aRequest</name>-&gt;<name>Cancel</name></name><argument_list>(<argument><expr><name>NS_ERROR_DOM_BAD_URI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mOuterListener</name>-&gt;<name>OnStartRequest</name></name><argument_list>(<argument><expr><name>aRequest</name></expr></argument>, <argument><expr><name>aContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_ERROR_DOM_BAD_URI</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name><name>mOuterListener</name>-&gt;<name>OnStartRequest</name></name><argument_list>(<argument><expr><name>aRequest</name></expr></argument>, <argument><expr><name>aContext</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name>IsValidHTTPToken</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsCSubstring</name>&amp;</type> <name>aToken</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name><name>aToken</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCSubstring</name>::<name>const_char_iterator</name></name></type> <name>iter</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>aToken</name>.<name>BeginReading</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>aToken</name>.<name>EndReading</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>iter</name> != <name>end</name></expr>)</condition> <block>{
    <if>if <condition>(<expr>*<name>iter</name> &lt;= 32 ||
        *<name>iter</name> &gt;= 127 ||
        *<name>iter</name> == '(' ||
        *<name>iter</name> == ')' ||
        *<name>iter</name> == '&lt;' ||
        *<name>iter</name> == '&gt;' ||
        *<name>iter</name> == '@' ||
        *<name>iter</name> == ',' ||
        *<name>iter</name> == ';' ||
        *<name>iter</name> == ':' ||
        *<name>iter</name> == '\\' ||
        *<name>iter</name> == '\"' ||
        *<name>iter</name> == '/' ||
        *<name>iter</name> == '[' ||
        *<name>iter</name> == ']' ||
        *<name>iter</name> == '?' ||
        *<name>iter</name> == '=' ||
        *<name>iter</name> == '{' ||
        *<name>iter</name> == '}'</expr>)</condition><then> <block>{
      <return>return <expr><name>PR_FALSE</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr>++<name>iter</name></expr>;</expr_stmt>
  }</block></while>

  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsCORSListenerProxy</name>::<name>CheckRequestApproved</name></name><parameter_list>(<param><decl><type><name>nsIRequest</name>*</type> <name>aRequest</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Check if this was actually a cross domain request</comment>
  <if>if <condition>(<expr>!<name>mHasBeenCrossSite</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><name>gDisableCORS</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_DOM_BAD_URI</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// Check if the request failed</comment>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>aRequest</name>-&gt;<name>GetStatus</name></name><argument_list>(<argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Test that things worked on a HTTP level</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIHttpChannel</name></expr></argument>&gt;</argument_list></name></type> <name>http</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><name>NS_ERROR_DOM_BAD_URI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Check the Access-Control-Allow-Origin header</comment>
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>allowedOriginHeader</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>http</name>-&gt;<name>GetResponseHeader</name></name><argument_list>(
    <argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"Access-Control-Allow-Origin"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>allowedOriginHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>mWithCredentials</name> || !<call><name><name>allowedOriginHeader</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"*"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>origin</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>nsContentUtils</name>::<name>GetASCIIOrigin</name></name><argument_list>(<argument><expr><name>mRequestingPrincipal</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name><name>allowedOriginHeader</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>origin</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_ERROR_DOM_BAD_URI</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <comment type="line">// Check Access-Control-Allow-Credentials header</comment>
  <if>if <condition>(<expr><name>mWithCredentials</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>allowCredentialsHeader</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>http</name>-&gt;<name>GetResponseHeader</name></name><argument_list>(
      <argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"Access-Control-Allow-Credentials"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>allowCredentialsHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name><name>allowCredentialsHeader</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"true"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_ERROR_DOM_BAD_URI</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <if>if <condition>(<expr><name>mIsPreflight</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRBool</name></type> <name>succeeded</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>http</name>-&gt;<name>GetRequestSucceeded</name></name><argument_list>(<argument><expr>&amp;<name>succeeded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>succeeded</name></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_ERROR_DOM_BAD_URI</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>headerVal</name></decl>;</decl_stmt>
    <comment type="line">// The "Access-Control-Allow-Methods" header contains a comma separated</comment>
    <comment type="line">// list of method names.</comment>
    <expr_stmt><expr><call><name><name>http</name>-&gt;<name>GetResponseHeader</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"Access-Control-Allow-Methods"</expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name>headerVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>foundMethod</name> <init>= <expr><call><name><name>mPreflightMethod</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"GET"</expr></argument>)</argument_list></call> ||
                         <call><name><name>mPreflightMethod</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"HEAD"</expr></argument>)</argument_list></call> ||
                         <call><name><name>mPreflightMethod</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"POST"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsCCharSeparatedTokenizer</name></type> <name>methodTokens</name><argument_list>(<argument><expr><name>headerVal</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></decl>;</decl_stmt>
    <while>while<condition>(<expr><call><name><name>methodTokens</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>nsDependentCSubstring</name>&amp;</type> <name>method</name> <init>= <expr><call><name><name>methodTokens</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name><name>method</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <continue>continue;</continue>
      }</block></then></if>
      <if>if <condition>(<expr>!<call><name>IsValidHTTPToken</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NS_ERROR_DOM_BAD_URI</name></expr>;</return>
      }</block></then></if>
      <expr_stmt><expr><name>foundMethod</name> |= <call><name><name>mPreflightMethod</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>foundMethod</name></expr></argument>, <argument><expr><name>NS_ERROR_DOM_BAD_URI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// The "Access-Control-Allow-Headers" header contains a comma separated</comment>
    <comment type="line">// list of header names.</comment>
    <expr_stmt><expr><call><name><name>headerVal</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>http</name>-&gt;<name>GetResponseHeader</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"Access-Control-Allow-Headers"</expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name>headerVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsCString</name></expr></argument>&gt;</argument_list></name></type> <name>headers</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsCCharSeparatedTokenizer</name></type> <name>headerTokens</name><argument_list>(<argument><expr><name>headerVal</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></decl>;</decl_stmt>
    <while>while<condition>(<expr><call><name><name>headerTokens</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>nsDependentCSubstring</name>&amp;</type> <name>header</name> <init>= <expr><call><name><name>headerTokens</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name><name>header</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <continue>continue;</continue>
      }</block></then></if>
      <if>if <condition>(<expr>!<call><name>IsValidHTTPToken</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NS_ERROR_DOM_BAD_URI</name></expr>;</return>
      }</block></then></if>
      <expr_stmt><expr><call><name><name>headers</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>mPreflightHeaders</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
      <if>if <condition>(<expr>!<call><name><name>headers</name>.<name>Contains</name></name><argument_list>(<argument><expr><name><name>mPreflightHeaders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                            <argument><expr><call><name>nsCaseInsensitiveCStringArrayComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NS_ERROR_DOM_BAD_URI</name></expr>;</return>
      }</block></then></if>
    }</block></for>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsCORSListenerProxy</name>::<name>OnStopRequest</name></name><parameter_list>(<param><decl><type><name>nsIRequest</name>*</type> <name>aRequest</name></decl></param>,
                                   <param><decl><type><name>nsISupports</name>*</type> <name>aContext</name></decl></param>,
                                   <param><decl><type><name>nsresult</name></type> <name>aStatusCode</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>mOuterListener</name>-&gt;<name>OnStopRequest</name></name><argument_list>(<argument><expr><name>aRequest</name></expr></argument>, <argument><expr><name>aContext</name></expr></argument>, <argument><expr><name>aStatusCode</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsCORSListenerProxy</name>::<name>OnDataAvailable</name></name><parameter_list>(<param><decl><type><name>nsIRequest</name>*</type> <name>aRequest</name></decl></param>,
                                     <param><decl><type><name>nsISupports</name>*</type> <name>aContext</name></decl></param>, 
                                     <param><decl><type><name>nsIInputStream</name>*</type> <name>aInputStream</name></decl></param>,
                                     <param><decl><type><name>PRUint32</name></type> <name>aOffset</name></decl></param>,
                                     <param><decl><type><name>PRUint32</name></type> <name>aCount</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mRequestApproved</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_DOM_BAD_URI</name></expr>;</return>
  }</block></then></if>
  <return>return <expr><call><name><name>mOuterListener</name>-&gt;<name>OnDataAvailable</name></name><argument_list>(<argument><expr><name>aRequest</name></expr></argument>, <argument><expr><name>aContext</name></expr></argument>, <argument><expr><name>aInputStream</name></expr></argument>,
                                         <argument><expr><name>aOffset</name></expr></argument>, <argument><expr><name>aCount</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsCORSListenerProxy</name>::<name>GetInterface</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsIID</name> &amp;</type> <name>aIID</name></decl></param>, <param><decl><type><name>void</name> **</type><name>aResult</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name><name>aIID</name>.<name>Equals</name></name><argument_list>(<argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsIChannelEventSink</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aResult</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIChannelEventSink</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ADDREF_THIS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>mOuterNotificationCallbacks</name> ?
    <call><name><name>mOuterNotificationCallbacks</name>-&gt;<name>GetInterface</name></name><argument_list>(<argument><expr><name>aIID</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call> :
    <name>NS_ERROR_NO_INTERFACE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsCORSListenerProxy</name>::<name>AsyncOnChannelRedirect</name></name><parameter_list>(<param><decl><type><name>nsIChannel</name> *</type><name>aOldChannel</name></decl></param>,
                                            <param><decl><type><name>nsIChannel</name> *</type><name>aNewChannel</name></decl></param>,
                                            <param><decl><type><name>PRUint32</name></type> <name>aFlags</name></decl></param>,
                                            <param><decl><type><name>nsIAsyncVerifyRedirectCallback</name> *</type><name>cb</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<call><name>NS_IsInternalSameURIRedirect</name><argument_list>(<argument><expr><name>aOldChannel</name></expr></argument>, <argument><expr><name>aNewChannel</name></expr></argument>, <argument><expr><name>aFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rv</name> = <call><name>CheckRequestApproved</name><argument_list>(<argument><expr><name>aOldChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>sPreflightCache</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>oldURI</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>NS_GetFinalChannelURI</name><argument_list>(<argument><expr><name>aOldChannel</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>oldURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>oldURI</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>sPreflightCache</name>-&gt;<name>RemoveEntries</name></name><argument_list>(<argument><expr><name>oldURI</name></expr></argument>, <argument><expr><name>mRequestingPrincipal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
      <expr_stmt><expr><call><name><name>aOldChannel</name>-&gt;<name>Cancel</name></name><argument_list>(<argument><expr><name>NS_ERROR_DOM_BAD_URI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_DOM_BAD_URI</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <comment type="line">// Prepare to receive callback</comment>
  <expr_stmt><expr><name>mRedirectCallback</name> = <name>cb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mOldRedirectChannel</name> = <name>aOldChannel</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mNewRedirectChannel</name> = <name>aNewChannel</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIChannelEventSink</name></expr></argument>&gt;</argument_list></name></type> <name>outer</name> <init>=
    <expr><call><name>do_GetInterface</name><argument_list>(<argument><expr><name>mOuterNotificationCallbacks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>outer</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rv</name> = <call><name><name>outer</name>-&gt;<name>AsyncOnChannelRedirect</name></name><argument_list>(<argument><expr><name>aOldChannel</name></expr></argument>, <argument><expr><name>aNewChannel</name></expr></argument>, <argument><expr><name>aFlags</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>aOldChannel</name>-&gt;<name>Cancel</name></name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// is this necessary...?</comment>
        <expr_stmt><expr><name>mRedirectCallback</name> = <name>nsnull</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mOldRedirectChannel</name> = <name>nsnull</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mNewRedirectChannel</name> = <name>nsnull</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>rv</name></expr>;</return>  
  }</block></then></if>

  <expr_stmt><expr>(<name>void</name>) <call><name>OnRedirectVerifyCallback</name><argument_list>(<argument><expr><name>NS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsCORSListenerProxy</name>::<name>OnRedirectVerifyCallback</name></name><parameter_list>(<param><decl><type><name>nsresult</name></type> <name>result</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>mRedirectCallback</name></expr></argument>, <argument><expr>"mRedirectCallback not set in callback"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>mOldRedirectChannel</name></expr></argument>, <argument><expr>"mOldRedirectChannel not set in callback"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>mNewRedirectChannel</name></expr></argument>, <argument><expr>"mNewRedirectChannel not set in callback"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>UpdateChannel</name><argument_list>(<argument><expr><name>mNewRedirectChannel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"nsCORSListenerProxy::OnRedirectVerifyCallback: "
                     "UpdateChannel() returned failure"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><name>result</name> = <name>rv</name></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mOldRedirectChannel</name>-&gt;<name>Cancel</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><name>mOldRedirectChannel</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mNewRedirectChannel</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mRedirectCallback</name>-&gt;<name>OnRedirectVerifyCallback</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mRedirectCallback</name>   = <name>nsnull</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsCORSListenerProxy</name>::<name>UpdateChannel</name></name><parameter_list>(<param><decl><type><name>nsIChannel</name>*</type> <name>aChannel</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>, <decl><type ref="prev"/><name>originalURI</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_GetFinalChannelURI</name><argument_list>(<argument><expr><name>aChannel</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>aChannel</name>-&gt;<name>GetOriginalURI</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>originalURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  

  <comment type="line">// Check that the uri is ok to load</comment>
  <expr_stmt><expr><name>rv</name> = <call><name><name>nsContentUtils</name>::<name>GetSecurityManager</name></name><argument_list>()</argument_list></call>-&gt;
    <call><name>CheckLoadURIWithPrincipal</name><argument_list>(<argument><expr><name>mRequestingPrincipal</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>,
                              <argument><expr><name><name>nsIScriptSecurityManager</name>::<name>STANDARD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>originalURI</name> != <name>uri</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rv</name> = <call><name><name>nsContentUtils</name>::<name>GetSecurityManager</name></name><argument_list>()</argument_list></call>-&gt;
      <call><name>CheckLoadURIWithPrincipal</name><argument_list>(<argument><expr><name>mRequestingPrincipal</name></expr></argument>, <argument><expr><name>originalURI</name></expr></argument>,
                                <argument><expr><name><name>nsIScriptSecurityManager</name>::<name>STANDARD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr>!<name>mHasBeenCrossSite</name> &amp;&amp;
      <call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>mRequestingPrincipal</name>-&gt;<name>CheckMayLoad</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp;
      (<name>originalURI</name> == <name>uri</name> ||
       <call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>mRequestingPrincipal</name>-&gt;<name>CheckMayLoad</name></name><argument_list>(<argument><expr><name>originalURI</name></expr></argument>,
                                                       <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// It's a cross site load</comment>
  <expr_stmt><expr><name>mHasBeenCrossSite</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsCString</name></type> <name>userpass</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>uri</name>-&gt;<name>GetUserPass</name></name><argument_list>(<argument><expr><name>userpass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><call><name><name>userpass</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NS_ERROR_DOM_BAD_URI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Add the Origin header</comment>
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>origin</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>nsContentUtils</name>::<name>GetASCIIOrigin</name></name><argument_list>(<argument><expr><name>mRequestingPrincipal</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIHttpChannel</name></expr></argument>&gt;</argument_list></name></type> <name>http</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aChannel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rv</name> = <call><name><name>http</name>-&gt;<name>SetRequestHeader</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"Origin"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Add preflight headers if this is a preflight request</comment>
  <if>if <condition>(<expr><name>mIsPreflight</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rv</name> = <call><name><name>http</name>-&gt;
      <name>SetRequestHeader</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"Access-Control-Request-Method"</expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><name>mPreflightMethod</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name><name>mPreflightHeaders</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>headers</name></decl>;</decl_stmt>
      <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>mPreflightHeaders</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <if>if <condition>(<expr><name>i</name> != 0</expr>)</condition><then> <block>{
          <expr_stmt><expr><name>headers</name> += ','</expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>headers</name> += <name><name>mPreflightHeaders</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      }</block></for>
      <expr_stmt><expr><name>rv</name> = <call><name><name>http</name>-&gt;
        <name>SetRequestHeader</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"Access-Control-Request-Headers"</expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name>headers</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <comment type="line">// Make cookie-less if needed</comment>
  <if>if <condition>(<expr><name>mIsPreflight</name> || !<name>mWithCredentials</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsLoadFlags</name></type> <name>flags</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>http</name>-&gt;<name>GetLoadFlags</name></name><argument_list>(<argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>flags</name> |= <name><name>nsIRequest</name>::<name>LOAD_ANONYMOUS</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>http</name>-&gt;<name>SetLoadFlags</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Preflight proxy</comment>

<comment type="line">// Class used as streamlistener and notification callback when</comment>
<comment type="line">// doing the initial OPTIONS request for a CORS check</comment>
<class>class <name>nsCORSPreflightListener</name> <super>: <specifier>public</specifier> <name>nsIStreamListener</name>,
                                <specifier>public</specifier> <name>nsIInterfaceRequestor</name>,
                                <specifier>public</specifier> <name>nsIChannelEventSink</name></super>
<block>{<private type="default">
</private><public>public:
  <constructor><name>nsCORSPreflightListener</name><parameter_list>(<param><decl><type><name>nsIChannel</name>*</type> <name>aOuterChannel</name></decl></param>,
                          <param><decl><type><name>nsIStreamListener</name>*</type> <name>aOuterListener</name></decl></param>,
                          <param><decl><type><name>nsISupports</name>*</type> <name>aOuterContext</name></decl></param>,
                          <param><decl><type><name>nsIPrincipal</name>*</type> <name>aReferrerPrincipal</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aRequestMethod</name></decl></param>,
                          <param><decl><type><name>PRBool</name></type> <name>aWithCredentials</name></decl></param>)</parameter_list>
   <member_list>: <call><name>mOuterChannel</name><argument_list>(<argument><expr><name>aOuterChannel</name></expr></argument>)</argument_list></call>, <call><name>mOuterListener</name><argument_list>(<argument><expr><name>aOuterListener</name></expr></argument>)</argument_list></call>,
     <call><name>mOuterContext</name><argument_list>(<argument><expr><name>aOuterContext</name></expr></argument>)</argument_list></call>, <call><name>mReferrerPrincipal</name><argument_list>(<argument><expr><name>aReferrerPrincipal</name></expr></argument>)</argument_list></call>,
     <call><name>mRequestMethod</name><argument_list>(<argument><expr><name>aRequestMethod</name></expr></argument>)</argument_list></call>, <call><name>mWithCredentials</name><argument_list>(<argument><expr><name>aWithCredentials</name></expr></argument>)</argument_list></call>
  </member_list><block>{ }</block></constructor>

  <macro><name>NS_DECL_ISUPPORTS</name></macro>
  <macro><name>NS_DECL_NSISTREAMLISTENER</name></macro>
  <macro><name>NS_DECL_NSIREQUESTOBSERVER</name></macro>
  <macro><name>NS_DECL_NSIINTERFACEREQUESTOR</name></macro>
  <macro><name>NS_DECL_NSICHANNELEVENTSINK</name></macro>

</public><private>private:
  <function_decl><type><name>void</name></type> <name>AddResultToCache</name><parameter_list>(<param><decl><type><name>nsIRequest</name>*</type> <name>aRequest</name></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIChannel</name></expr></argument>&gt;</argument_list></name></type> <name>mOuterChannel</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIStreamListener</name></expr></argument>&gt;</argument_list></name></type> <name>mOuterListener</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>mOuterContext</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrincipal</name></expr></argument>&gt;</argument_list></name></type> <name>mReferrerPrincipal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsCString</name></type> <name>mRequestMethod</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>mWithCredentials</name></decl>;</decl_stmt>
</private>}</block>;</class>

<macro><name>NS_IMPL_ISUPPORTS4</name><argument_list>(<argument>nsCORSPreflightListener</argument>, <argument>nsIStreamListener</argument>,
                   <argument>nsIRequestObserver</argument>, <argument>nsIInterfaceRequestor</argument>,
                   <argument>nsIChannelEventSink</argument>)</argument_list></macro>

<function><type><name>void</name></type>
<name><name>nsCORSPreflightListener</name>::<name>AddResultToCache</name></name><parameter_list>(<param><decl><type><name>nsIRequest</name> *</type><name>aRequest</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIHttpChannel</name></expr></argument>&gt;</argument_list></name></type> <name>http</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr>"Request was not http"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// The "Access-Control-Max-Age" header should return an age in seconds.</comment>
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>headerVal</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>http</name>-&gt;<name>GetResponseHeader</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"Access-Control-Max-Age"</expr></argument>)</argument_list></call></expr></argument>,
                          <argument><expr><name>headerVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name><name>headerVal</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>

  <comment type="line">// Sanitize the string. We only allow 'delta-seconds' as specified by</comment>
  <comment type="line">// http://dev.w3.org/2006/waf/access-control (digits 0-9 with no leading or</comment>
  <comment type="line">// trailing non-whitespace characters).</comment>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>age</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCSubstring</name>::<name>const_char_iterator</name></name></type> <name>iter</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>headerVal</name>.<name>BeginReading</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>headerVal</name>.<name>EndReading</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>iter</name> != <name>end</name></expr>)</condition> <block>{
    <if>if <condition>(<expr>*<name><name>iter</name> <argument_list>&lt; <argument><expr>'0' || *<name>iter</name></expr></argument> &gt;</argument_list></name> '9'</expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><name>age</name> = <name>age</name> * 10 + (*<name>iter</name> - '0')</expr>;</expr_stmt>
    <comment type="line">// Cap at 24 hours. This also avoids overflow</comment>
    <expr_stmt><expr><name>age</name> = <call><name>NS_MIN</name><argument_list>(<argument><expr><name>age</name></expr></argument>, <argument><expr>86400U</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>++<name>iter</name></expr>;</expr_stmt>
  }</block></while>

  <if>if <condition>(<expr>!<name>age</name> || !<call><name>EnsurePreflightCache</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>


  <comment type="line">// String seems fine, go ahead and cache.</comment>
  <comment type="line">// Note that we have already checked that these headers follow the correct</comment>
  <comment type="line">// syntax.</comment>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_GetFinalChannelURI</name><argument_list>(<argument><expr><name>http</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// PR_Now gives microseconds</comment>
  <decl_stmt><decl><type><name>PRTime</name></type> <name>expirationTime</name> <init>= <expr><call><name>PR_Now</name><argument_list>()</argument_list></call> + (<name>PRUint64</name>)<name>age</name> * <name>PR_USEC_PER_SEC</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsPreflightCache</name>::<name>CacheEntry</name></name>*</type> <name>entry</name> <init>=
    <expr><call><name><name>sPreflightCache</name>-&gt;<name>GetEntry</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>mReferrerPrincipal</name></expr></argument>, <argument><expr><name>mWithCredentials</name></expr></argument>,
                              <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>

  <comment type="line">// The "Access-Control-Allow-Methods" header contains a comma separated</comment>
  <comment type="line">// list of method names.</comment>
  <expr_stmt><expr><call><name><name>http</name>-&gt;<name>GetResponseHeader</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"Access-Control-Allow-Methods"</expr></argument>)</argument_list></call></expr></argument>,
                          <argument><expr><name>headerVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsCCharSeparatedTokenizer</name></type> <name>methods</name><argument_list>(<argument><expr><name>headerVal</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></decl>;</decl_stmt>
  <while>while<condition>(<expr><call><name><name>methods</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsDependentCSubstring</name>&amp;</type> <name>method</name> <init>= <expr><call><name><name>methods</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>method</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <continue>continue;</continue>
    }</block></then></if>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name><name>entry</name>-&gt;<name>mMethods</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
      <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>mMethods</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name><name>token</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>entry</name>-&gt;<name>mMethods</name><index>[<expr><name>i</name></expr>]</index></name>.<name>expirationTime</name> = <name>expirationTime</name></expr>;</expr_stmt>
        <break>break;</break>
      }</block></then></if>
    }</block></for>
    <if>if <condition>(<expr><name>i</name> == <call><name><name>entry</name>-&gt;<name>mMethods</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsPreflightCache</name>::<name>TokenTime</name></name>*</type> <name>newMethod</name> <init>=
        <expr><call><name><name>entry</name>-&gt;<name>mMethods</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>newMethod</name></expr>)</condition><then> <block>{
        <return>return;</return>
      }</block></then></if>

      <expr_stmt><expr><name><name>newMethod</name>-&gt;<name>token</name></name> = <name>method</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>newMethod</name>-&gt;<name>expirationTime</name></name> = <name>expirationTime</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></while>

  <comment type="line">// The "Access-Control-Allow-Headers" header contains a comma separated</comment>
  <comment type="line">// list of method names.</comment>
  <expr_stmt><expr><call><name><name>http</name>-&gt;<name>GetResponseHeader</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"Access-Control-Allow-Headers"</expr></argument>)</argument_list></call></expr></argument>,
                          <argument><expr><name>headerVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsCCharSeparatedTokenizer</name></type> <name>headers</name><argument_list>(<argument><expr><name>headerVal</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></decl>;</decl_stmt>
  <while>while<condition>(<expr><call><name><name>headers</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsDependentCSubstring</name>&amp;</type> <name>header</name> <init>= <expr><call><name><name>headers</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>header</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <continue>continue;</continue>
    }</block></then></if>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name><name>entry</name>-&gt;<name>mHeaders</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
      <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>mHeaders</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name><name>token</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>entry</name>-&gt;<name>mHeaders</name><index>[<expr><name>i</name></expr>]</index></name>.<name>expirationTime</name> = <name>expirationTime</name></expr>;</expr_stmt>
        <break>break;</break>
      }</block></then></if>
    }</block></for>
    <if>if <condition>(<expr><name>i</name> == <call><name><name>entry</name>-&gt;<name>mHeaders</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsPreflightCache</name>::<name>TokenTime</name></name>*</type> <name>newHeader</name> <init>=
        <expr><call><name><name>entry</name>-&gt;<name>mHeaders</name>.<name>AppendElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>newHeader</name></expr>)</condition><then> <block>{
        <return>return;</return>
      }</block></then></if>

      <expr_stmt><expr><name><name>newHeader</name>-&gt;<name>token</name></name> = <name>header</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>newHeader</name>-&gt;<name>expirationTime</name></name> = <name>expirationTime</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></while>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsCORSPreflightListener</name>::<name>OnStartRequest</name></name><parameter_list>(<param><decl><type><name>nsIRequest</name> *</type><name>aRequest</name></decl></param>,
                                        <param><decl><type><name>nsISupports</name> *</type><name>aContext</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>aRequest</name>-&gt;<name>GetStatus</name></name><argument_list>(<argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rv</name> = <name>status</name></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// Everything worked, try to cache and then fire off the actual request.</comment>
    <expr_stmt><expr><call><name>AddResultToCache</name><argument_list>(<argument><expr><name>aRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rv</name> = <call><name><name>mOuterChannel</name>-&gt;<name>AsyncOpen</name></name><argument_list>(<argument><expr><name>mOuterListener</name></expr></argument>, <argument><expr><name>mOuterContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mOuterChannel</name>-&gt;<name>Cancel</name></name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mOuterListener</name>-&gt;<name>OnStartRequest</name></name><argument_list>(<argument><expr><name>mOuterChannel</name></expr></argument>, <argument><expr><name>mOuterContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mOuterListener</name>-&gt;<name>OnStopRequest</name></name><argument_list>(<argument><expr><name>mOuterChannel</name></expr></argument>, <argument><expr><name>mOuterContext</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsCORSPreflightListener</name>::<name>OnStopRequest</name></name><parameter_list>(<param><decl><type><name>nsIRequest</name> *</type><name>aRequest</name></decl></param>,
                                       <param><decl><type><name>nsISupports</name> *</type><name>aContext</name></decl></param>,
                                       <param><decl><type><name>nsresult</name></type> <name>aStatus</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block" format="doxygen">/** nsIStreamListener methods **/</comment>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsCORSPreflightListener</name>::<name>OnDataAvailable</name></name><parameter_list>(<param><decl><type><name>nsIRequest</name> *</type><name>aRequest</name></decl></param>,
                                         <param><decl><type><name>nsISupports</name> *</type><name>ctxt</name></decl></param>,
                                         <param><decl><type><name>nsIInputStream</name> *</type><name>inStr</name></decl></param>,
                                         <param><decl><type><name>PRUint32</name></type> <name>sourceOffset</name></decl></param>,
                                         <param><decl><type><name>PRUint32</name></type> <name>count</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsCORSPreflightListener</name>::<name>AsyncOnChannelRedirect</name></name><parameter_list>(<param><decl><type><name>nsIChannel</name> *</type><name>aOldChannel</name></decl></param>,
                                                <param><decl><type><name>nsIChannel</name> *</type><name>aNewChannel</name></decl></param>,
                                                <param><decl><type><name>PRUint32</name></type> <name>aFlags</name></decl></param>,
                                                <param><decl><type><name>nsIAsyncVerifyRedirectCallback</name> *</type><name>callback</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Only internal redirects allowed for now.</comment>
  <if>if <condition>(<expr>!<call><name>NS_IsInternalSameURIRedirect</name><argument_list>(<argument><expr><name>aOldChannel</name></expr></argument>, <argument><expr><name>aNewChannel</name></expr></argument>, <argument><expr><name>aFlags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_DOM_BAD_URI</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name><name>callback</name>-&gt;<name>OnRedirectVerifyCallback</name></name><argument_list>(<argument><expr><name>NS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsCORSPreflightListener</name>::<name>GetInterface</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsIID</name> &amp;</type> <name>aIID</name></decl></param>, <param><decl><type><name>void</name> **</type><name>aResult</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>QueryInterface</name><argument_list>(<argument><expr><name>aIID</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>nsresult</name></type>
<name>NS_StartCORSPreflight</name><parameter_list>(<param><decl><type><name>nsIChannel</name>*</type> <name>aRequestChannel</name></decl></param>,
                      <param><decl><type><name>nsIStreamListener</name>*</type> <name>aListener</name></decl></param>,
                      <param><decl><type><name>nsIPrincipal</name>*</type> <name>aPrincipal</name></decl></param>,
                      <param><decl><type><name>PRBool</name></type> <name>aWithCredentials</name></decl></param>,
                      <param><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsCString</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aUnsafeHeaders</name></decl></param>,
                      <param><decl><type><name>nsIChannel</name>**</type> <name>aPreflightChannel</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aPreflightChannel</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>method</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIHttpChannel</name></expr></argument>&gt;</argument_list></name></type> <name>httpChannel</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aRequestChannel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>httpChannel</name></expr></argument>, <argument><expr><name>NS_ERROR_UNEXPECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>httpChannel</name>-&gt;<name>GetRequestMethod</name></name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_GetFinalChannelURI</name><argument_list>(<argument><expr><name>aRequestChannel</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsPreflightCache</name>::<name>CacheEntry</name></name>*</type> <name>entry</name> <init>=
    <expr><name>sPreflightCache</name> ?
    <call><name><name>sPreflightCache</name>-&gt;<name>GetEntry</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>aPrincipal</name></expr></argument>, <argument><expr><name>aWithCredentials</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call> :
    <name>nsnull</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>entry</name> &amp;&amp; <call><name><name>entry</name>-&gt;<name>CheckRequest</name></name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>aUnsafeHeaders</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// We have a cached preflight result, just start the original channel</comment>
    <return>return <expr><call><name><name>aRequestChannel</name>-&gt;<name>AsyncOpen</name></name><argument_list>(<argument><expr><name>aListener</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <comment type="line">// Either it wasn't cached or the cached result has expired. Build a</comment>
  <comment type="line">// channel for the OPTIONS request.</comment>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILoadGroup</name></expr></argument>&gt;</argument_list></name></type> <name>loadGroup</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>aRequestChannel</name>-&gt;<name>GetLoadGroup</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>loadGroup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsLoadFlags</name></type> <name>loadFlags</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>aRequestChannel</name>-&gt;<name>GetLoadFlags</name></name><argument_list>(<argument><expr>&amp;<name>loadFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIChannel</name></expr></argument>&gt;</argument_list></name></type> <name>preflightChannel</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name>NS_NewChannel</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>preflightChannel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                     <argument><expr><name>loadGroup</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>loadFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIHttpChannel</name></expr></argument>&gt;</argument_list></name></type> <name>preHttp</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>preflightChannel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>preHttp</name></expr></argument>, <argument><expr>"Failed to QI to nsIHttpChannel!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rv</name> = <call><name><name>preHttp</name>-&gt;<name>SetRequestMethod</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"OPTIONS"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="line">// Set up listener which will start the original channel</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIStreamListener</name></expr></argument>&gt;</argument_list></name></type> <name>preflightListener</name> <init>=
    <expr>new <call><name>nsCORSPreflightListener</name><argument_list>(<argument><expr><name>aRequestChannel</name></expr></argument>, <argument><expr><name>aListener</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aPrincipal</name></expr></argument>,
                                <argument><expr><name>method</name></expr></argument>, <argument><expr><name>aWithCredentials</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>preflightListener</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>preflightListener</name> =
    new <call><name>nsCORSListenerProxy</name><argument_list>(<argument><expr><name>preflightListener</name></expr></argument>, <argument><expr><name>aPrincipal</name></expr></argument>,
                            <argument><expr><name>preflightChannel</name></expr></argument>, <argument><expr><name>aWithCredentials</name></expr></argument>,
                            <argument><expr><name>method</name></expr></argument>, <argument><expr><name>aUnsafeHeaders</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>preflightListener</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Start preflight</comment>
  <expr_stmt><expr><name>rv</name> = <call><name><name>preflightChannel</name>-&gt;<name>AsyncOpen</name></name><argument_list>(<argument><expr><name>preflightListener</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="line">// Return newly created preflight channel</comment>
  <expr_stmt><expr><call><name><name>preflightChannel</name>.<name>forget</name></name><argument_list>(<argument><expr><name>aPreflightChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

</unit>
