<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="0078652b1682252c7c058d181ccf1a1aaaf3650e.c"><comment type="block">/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: set ts=4 sw=4 et tw=78:
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is SpiderMonkey E4X code, released August, 2004.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsstddef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsconfig.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_XML_SUPPORT</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jstypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsbit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsprf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsarray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsatom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsbool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jscntxt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsfun.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsgc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsinterp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jslock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsobj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsopcode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsparse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsscan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsscope.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsscript.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsstr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsxml.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>     <comment type="block">/* for #ifdef DEBUG memset calls */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * NOTES
 * - in the js shell, you must use the -x command line option, or call
 *   options('xml') before compiling anything that uses XML literals
 *
 * TODO
 * - XXXbe patrol
 * - Fuse objects and their JSXML* private data into single GC-things
 * - fix function::foo vs. x.(foo == 42) collision using proper namespacing
 * - fix the !TCF_HAS_DEFXMLNS optimization in js_FoldConstants
 * - JSCLASS_DOCUMENT_OBSERVER support -- live two-way binding to Gecko's DOM!
 * - JS_TypeOfValue sure could use a cleaner interface to "types"
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_brendan</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METERING</name></cpp:macro>        <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>METERING</name></cpp:ifdef>
<struct><specifier>static</specifier> struct <block>{
    <decl_stmt><decl><type><name>jsrefcount</name></type>  <name>qname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsrefcount</name></type>  <name>qnameobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsrefcount</name></type>  <name>liveqname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsrefcount</name></type>  <name>liveqnameobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsrefcount</name></type>  <name>namespace</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsrefcount</name></type>  <name>namespaceobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsrefcount</name></type>  <name>livenamespace</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsrefcount</name></type>  <name>livenamespaceobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsrefcount</name></type>  <name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsrefcount</name></type>  <name>xmlobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsrefcount</name></type>  <name>livexml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsrefcount</name></type>  <name>livexmlobj</name></decl>;</decl_stmt>
}</block> <decl><name>xml_stats</name></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METER</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro>        <cpp:value>JS_ATOMIC_INCREMENT(&amp;(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNMETER</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>JS_ATOMIC_DECREMENT(&amp;(x))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METER</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro></cpp:define>        <comment type="block">/* nothing */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNMETER</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro></cpp:define>      <comment type="block">/* nothing */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Random utilities and global functions.
 */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>js_isXMLName_str</name><index>[]</index></name>     <init>= <expr>"isXMLName"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>js_XMLList_str</name><index>[]</index></name>       <init>= <expr>"XMLList"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>js_localName_str</name><index>[]</index></name>     <init>= <expr>"localName"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>js_xml_parent_str</name><index>[]</index></name>    <init>= <expr>"parent"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>js_prefix_str</name><index>[]</index></name>        <init>= <expr>"prefix"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>js_toXMLString_str</name><index>[]</index></name>   <init>= <expr>"toXMLString"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>js_uri_str</name><index>[]</index></name>           <init>= <expr>"uri"</expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>js_amp_entity_str</name><index>[]</index></name>    <init>= <expr>"&amp;amp;"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>js_gt_entity_str</name><index>[]</index></name>     <init>= <expr>"&amp;gt;"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>js_lt_entity_str</name><index>[]</index></name>     <init>= <expr>"&amp;lt;"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>js_quot_entity_str</name><index>[]</index></name>   <init>= <expr>"&amp;quot;"</expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_EMPTY</name><parameter_list>(<param><type><name>str</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(JSSTRING_LENGTH(str) == 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_STAR</name><parameter_list>(<param><type><name>str</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>(JSSTRING_LENGTH(str) == 1 &amp;&amp; *JSSTRING_CHARS(str) == '*')</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_isXMLName</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
              <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>rval</name> = <call><name>BOOLEAN_TO_JSVAL</name><argument_list>(<argument><expr><call><name>js_IsXMLName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Namespace class and library functions.
 */</comment>
<enum>enum <name>namespace_tinyid</name> <block>{
    <decl><name>NAMESPACE_PREFIX</name> <init>= <expr>-1</expr></init></decl>,
    <decl><name>NAMESPACE_URI</name> <init>= <expr>-2</expr></init></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>namespace_getProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>JSVAL_IS_INT</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>ns</name> = (<name>JSXMLNamespace</name> *)
         <call><name>JS_GetInstancePrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name><name>js_NamespaceClass</name>.<name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <switch>switch <condition>(<expr><call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
      <case>case <expr><name>NAMESPACE_PREFIX</name></expr>:
        <expr_stmt><expr>*<name>vp</name> = <name><name>ns</name>-&gt;<name>prefix</name></name> ? <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call> : <name>JSVAL_VOID</name></expr>;</expr_stmt>
        <break>break;</break>
      </case><case>case <expr><name>NAMESPACE_URI</name></expr>:
        <expr_stmt><expr>*<name>vp</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </case>}</block></switch>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>namespace_finalize</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ns</name> = (<name>JSXMLNamespace</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then>
        <return>return;</return></then></if>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>object</name></name> == <name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ns</name>-&gt;<name>object</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNMETER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>livenamespaceobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rt</name> = <name><name>cx</name>-&gt;<name>runtime</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>rt</name>-&gt;<name>functionNamespaceObject</name></name> == <name>obj</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>rt</name>-&gt;<name>functionNamespaceObject</name></name> = <name>NULL</name></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>namespace_trace_vector</name><parameter_list>(<param><decl><type><name>JSTracer</name> *</type><name>trc</name></decl></param>, <param><decl><type><name>JSXMLNamespace</name> **</type><name>vec</name></decl></param>,
                       <param><decl><type><name>uint32</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>ns</name> = <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>ns</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_SET_TRACING_INDEX</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr>"namespace_vector"</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_CallTracer</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>JSTRACE_NAMESPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>namespace_trace</name><parameter_list>(<param><decl><type><name>JSTracer</name> *</type><name>trc</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ns</name> = (<name>JSXMLNamespace</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name><name>trc</name>-&gt;<name>context</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ns</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_CALL_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>JSTRACE_NAMESPACE</name></expr></argument>, <argument><expr>"private"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>namespace_equality</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>, <param><decl><type><name>JSBool</name> *</type><name>bp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>, *<decl><type ref="prev"/><name>ns2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj2</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ns</name> = (<name>JSXMLNamespace</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj2</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj2</name> || <call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>)</argument_list></call> != &amp;<name><name>js_NamespaceClass</name>.<name>base</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>bp</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>ns2</name> = (<name>JSXMLNamespace</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>bp</name> = <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>ns2</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<macro><name>JS_FRIEND_DATA</name><argument_list>(<argument>JSExtendedClass</argument>)</argument_list></macro> <expr_stmt><expr><name>js_NamespaceClass</name> = <block>{
  <expr><block>{ <expr>"Namespace"</expr>,
    <expr><name>JSCLASS_HAS_PRIVATE</name> | <name>JSCLASS_CONSTRUCT_PROTOTYPE</name> | <name>JSCLASS_IS_EXTENDED</name> |
    <name>JSCLASS_MARK_IS_TRACE</name> | <call><name>JSCLASS_HAS_CACHED_PROTO</name><argument_list>(<argument><expr><name>JSProto_Namespace</name></expr></argument>)</argument_list></call></expr>,
    <expr><name>JS_PropertyStub</name></expr>,   <expr><name>JS_PropertyStub</name></expr>,   <expr><name>namespace_getProperty</name></expr>, <expr><name>NULL</name></expr>,
    <expr><name>JS_EnumerateStub</name></expr>,  <expr><name>JS_ResolveStub</name></expr>,    <expr><name>JS_ConvertStub</name></expr>,    <expr><name>namespace_finalize</name></expr>,
    <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,
    <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,            <expr><call><name>JS_CLASS_TRACE</name><argument_list>(<argument><expr><name>namespace_trace</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><name>namespace_equality</name></expr>,<expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,
    <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>
}</block></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAMESPACE_ATTRS</name></cpp:macro>                                                       \
    <cpp:value>(JSPROP_ENUMERATE | JSPROP_READONLY | JSPROP_PERMANENT | JSPROP_SHARED)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>JSPropertySpec</name></type> <name><name>namespace_props</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><name>js_prefix_str</name></expr>,    <expr><name>NAMESPACE_PREFIX</name></expr>,  <expr><name>NAMESPACE_ATTRS</name></expr>,   <expr>0</expr>, <expr>0</expr>}</block></expr>,
    <expr><block>{<expr><name>js_uri_str</name></expr>,       <expr><name>NAMESPACE_URI</name></expr>,     <expr><name>NAMESPACE_ATTRS</name></expr>,   <expr>0</expr>, <expr>0</expr>}</block></expr>,
    <expr><block>{<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>namespace_toString</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                   <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ns</name> = (<name>JSXMLNamespace</name> *)
         <call><name>JS_GetInstancePrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name><name>js_NamespaceClass</name>.<name>base</name></name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr>*<name>rval</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>JSFunctionSpec</name></type> <name><name>namespace_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><name>js_toString_str</name></expr>,  <expr><name>namespace_toString</name></expr>,        <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>JSXMLNamespace</name> *</type>
<name>js_NewXMLNamespace</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>prefix</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>uri</name></decl></param>,
                   <param><decl><type><name>JSBool</name></type> <name>declared</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ns</name> = (<name>JSXMLNamespace</name> *)
         <call><name>js_NewGCThing</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>GCX_NAMESPACE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>ns</name>-&gt;<name>object</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ns</name>-&gt;<name>prefix</name></name> = <name>prefix</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ns</name>-&gt;<name>uri</name></name> = <name>uri</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ns</name>-&gt;<name>declared</name></name> = <name>declared</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>namespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>livenamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ns</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name>js_TraceXMLNamespace</name><parameter_list>(<param><decl><type><name>JSTracer</name> *</type><name>trc</name></decl></param>, <param><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name><name>ns</name>-&gt;<name>object</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_CALL_OBJECT_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name><name>ns</name>-&gt;<name>object</name></name></expr></argument>, <argument><expr>"object"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name><name>ns</name>-&gt;<name>prefix</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_CALL_STRING_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name><name>ns</name>-&gt;<name>prefix</name></name></expr></argument>, <argument><expr>"prefix"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name><name>ns</name>-&gt;<name>uri</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_CALL_STRING_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name><name>ns</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>"uri"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name>void</name></type>
<name>js_FinalizeXMLNamespace</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UNMETER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>livenamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>js_NewXMLNamespaceObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>prefix</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>uri</name></decl></param>,
                         <param><decl><type><name>JSBool</name></type> <name>declared</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ns</name> = <call><name>js_NewXMLNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>declared</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><call><name>js_GetXMLNamespaceObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>js_GetXMLNamespaceObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>obj</name> = <name><name>ns</name>-&gt;<name>object</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>obj</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> == <name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>obj</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>obj</name> = <call><name>js_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>js_NamespaceClass</name>.<name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name> || !<call><name>JS_SetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>cx</name>-&gt;<name>weakRoots</name>.<name>newborn</name><index>[<expr><name>GCX_OBJECT</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>ns</name>-&gt;<name>object</name></name> = <name>obj</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>namespaceobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>livenamespaceobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>obj</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * QName class and library functions.
 */</comment>
<enum>enum <name>qname_tinyid</name> <block>{
    <decl><name>QNAME_URI</name> <init>= <expr>-1</expr></init></decl>,
    <decl><name>QNAME_LOCALNAME</name> <init>= <expr>-2</expr></init></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>qname_getProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>JSVAL_IS_INT</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>qn</name> = (<name>JSXMLQName</name> *)
         <call><name>JS_GetInstancePrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name><name>js_QNameClass</name>.<name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>qn</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <switch>switch <condition>(<expr><call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
      <case>case <expr><name>QNAME_URI</name></expr>:
        <expr_stmt><expr>*<name>vp</name> = <name><name>qn</name>-&gt;<name>uri</name></name> ? <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name><name>qn</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call> : <name>JSVAL_NULL</name></expr>;</expr_stmt>
        <break>break;</break>
      </case><case>case <expr><name>QNAME_LOCALNAME</name></expr>:
        <expr_stmt><expr>*<name>vp</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name><name>qn</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </case>}</block></switch>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>qname_finalize</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>qn</name> = (<name>JSXMLQName</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>qn</name></expr>)</condition><then>
        <return>return;</return></then></if>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>qn</name>-&gt;<name>object</name></name> == <name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>qn</name>-&gt;<name>object</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNMETER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>liveqnameobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>anyname_finalize</name><parameter_list>(<param><decl><type><name>JSContext</name>*</type> <name>cx</name></decl></param>, <param><decl><type><name>JSObject</name>*</type> <name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl>;</decl_stmt>

    <comment type="block">/* Make sure the next call to js_GetAnyName doesn't try to use obj. */</comment>
    <expr_stmt><expr><name>rt</name> = <name><name>cx</name>-&gt;<name>runtime</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>rt</name>-&gt;<name>anynameObject</name></name> == <name>obj</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>rt</name>-&gt;<name>anynameObject</name></name> = <name>NULL</name></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><call><name>qname_finalize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>qname_trace</name><parameter_list>(<param><decl><type><name>JSTracer</name> *</type><name>trc</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>qn</name> = (<name>JSXMLQName</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name><name>trc</name>-&gt;<name>context</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>qn</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_CALL_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name>qn</name></expr></argument>, <argument><expr><name>JSTRACE_QNAME</name></expr></argument>, <argument><expr>"private"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>qname_identity</name><parameter_list>(<param><decl><type><name>JSXMLQName</name> *</type><name>qna</name></decl></param>, <param><decl><type><name>JSXMLQName</name> *</type><name>qnb</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name><name>qna</name>-&gt;<name>uri</name></name> ^ !<name><name>qnb</name>-&gt;<name>uri</name></name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name><name>qna</name>-&gt;<name>uri</name></name> &amp;&amp; !<call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>qna</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>qnb</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <return>return <expr><call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>qna</name>-&gt;<name>localName</name></name></expr></argument>, <argument><expr><name><name>qnb</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>qname_equality</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>, <param><decl><type><name>JSBool</name> *</type><name>bp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>, *<decl><type ref="prev"/><name>qn2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj2</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>qn</name> = (<name>JSXMLQName</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj2</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj2</name> || <call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>)</argument_list></call> != &amp;<name><name>js_QNameClass</name>.<name>base</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>bp</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>qn2</name> = (<name>JSXMLQName</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>bp</name> = <call><name>qname_identity</name><argument_list>(<argument><expr><name>qn</name></expr></argument>, <argument><expr><name>qn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<macro><name>JS_FRIEND_DATA</name><argument_list>(<argument>JSExtendedClass</argument>)</argument_list></macro> <expr_stmt><expr><name>js_QNameClass</name> = <block>{
  <expr><block>{ <expr>"QName"</expr>,
    <expr><name>JSCLASS_HAS_PRIVATE</name> | <name>JSCLASS_CONSTRUCT_PROTOTYPE</name> | <name>JSCLASS_IS_EXTENDED</name> |
    <name>JSCLASS_MARK_IS_TRACE</name> | <call><name>JSCLASS_HAS_CACHED_PROTO</name><argument_list>(<argument><expr><name>JSProto_QName</name></expr></argument>)</argument_list></call></expr>,
    <expr><name>JS_PropertyStub</name></expr>,   <expr><name>JS_PropertyStub</name></expr>,   <expr><name>qname_getProperty</name></expr>, <expr><name>NULL</name></expr>,
    <expr><name>JS_EnumerateStub</name></expr>,  <expr><name>JS_ResolveStub</name></expr>,    <expr><name>JS_ConvertStub</name></expr>,    <expr><name>qname_finalize</name></expr>,
    <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,
    <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,              <expr><call><name>JS_CLASS_TRACE</name><argument_list>(<argument><expr><name>qname_trace</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><name>qname_equality</name></expr>,    <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,
    <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>
}</block></expr>;</expr_stmt>

<comment type="block">/*
 * Classes for the ECMA-357-internal types AttributeName and AnyName, which
 * are like QName, except that they have no property getters.  They share the
 * qname_toString method, and therefore are exposed as constructable objects
 * in this implementation.
 */</comment>
<macro><name>JS_FRIEND_DATA</name><argument_list>(<argument>JSClass</argument>)</argument_list></macro> <expr_stmt><expr><name>js_AttributeNameClass</name> = <block>{
    <expr><name>js_AttributeName_str</name></expr>,
    <expr><name>JSCLASS_HAS_PRIVATE</name> | <name>JSCLASS_CONSTRUCT_PROTOTYPE</name> |
    <name>JSCLASS_MARK_IS_TRACE</name> | <call><name>JSCLASS_HAS_CACHED_PROTO</name><argument_list>(<argument><expr><name>JSProto_AttributeName</name></expr></argument>)</argument_list></call></expr>,
    <expr><name>JS_PropertyStub</name></expr>,   <expr><name>JS_PropertyStub</name></expr>,   <expr><name>JS_PropertyStub</name></expr>,   <expr><name>JS_PropertyStub</name></expr>,
    <expr><name>JS_EnumerateStub</name></expr>,  <expr><name>JS_ResolveStub</name></expr>,    <expr><name>JS_ConvertStub</name></expr>,    <expr><name>qname_finalize</name></expr>,
    <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,
    <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,              <expr><call><name>JS_CLASS_TRACE</name><argument_list>(<argument><expr><name>qname_trace</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>
}</block></expr>;</expr_stmt>

<macro><name>JS_FRIEND_DATA</name><argument_list>(<argument>JSClass</argument>)</argument_list></macro> <expr_stmt><expr><name>js_AnyNameClass</name> = <block>{
    <expr><name>js_AnyName_str</name></expr>,
    <expr><name>JSCLASS_HAS_PRIVATE</name> | <name>JSCLASS_CONSTRUCT_PROTOTYPE</name> |
    <name>JSCLASS_MARK_IS_TRACE</name> | <call><name>JSCLASS_HAS_CACHED_PROTO</name><argument_list>(<argument><expr><name>JSProto_AnyName</name></expr></argument>)</argument_list></call></expr>,
    <expr><name>JS_PropertyStub</name></expr>,   <expr><name>JS_PropertyStub</name></expr>,   <expr><name>JS_PropertyStub</name></expr>,   <expr><name>JS_PropertyStub</name></expr>,
    <expr><name>JS_EnumerateStub</name></expr>,  <expr><name>JS_ResolveStub</name></expr>,    <expr><name>JS_ConvertStub</name></expr>,    <expr><name>anyname_finalize</name></expr>,
    <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,
    <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,              <expr><call><name>JS_CLASS_TRACE</name><argument_list>(<argument><expr><name>qname_trace</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>
}</block></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QNAME_ATTRS</name></cpp:macro>                                                           \
    <cpp:value>(JSPROP_ENUMERATE | JSPROP_READONLY | JSPROP_PERMANENT | JSPROP_SHARED)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>JSPropertySpec</name></type> <name><name>qname_props</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><name>js_uri_str</name></expr>,       <expr><name>QNAME_URI</name></expr>,         <expr><name>QNAME_ATTRS</name></expr>,       <expr>0</expr>, <expr>0</expr>}</block></expr>,
    <expr><block>{<expr><name>js_localName_str</name></expr>, <expr><name>QNAME_LOCALNAME</name></expr>,   <expr><name>QNAME_ATTRS</name></expr>,       <expr>0</expr>, <expr>0</expr>}</block></expr>,
    <expr><block>{<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>qname_toString</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
               <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSClass</name> *</type><name>clasp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>, *<decl><type ref="prev"/><name>qualstr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jschar</name> *</type><name>chars</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>clasp</name> = <call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>clasp</name> == &amp;<name>js_AttributeNameClass</name> || <name>clasp</name> == &amp;<name>js_AnyNameClass</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>qn</name> = (<name>JSXMLQName</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>qn</name> = (<name>JSXMLQName</name> *)
             <call><name>JS_GetInstancePrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name><name>js_QNameClass</name>.<name>base</name></name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>qn</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></else></if>

    <if>if <condition>(<expr>!<name><name>qn</name>-&gt;<name>uri</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* No uri means wildcard qualifier. */</comment>
        <expr_stmt><expr><name>str</name> = <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>atomState</name>.<name>starQualifierAtom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>IS_EMPTY</name><argument_list>(<argument><expr><name><name>qn</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* Empty string for uri means localName is in no namespace. */</comment>
        <expr_stmt><expr><name>str</name> = <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>qualstr</name> = <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>atomState</name>.<name>qualifierAtom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>str</name> = <call><name>js_ConcatStrings</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>qn</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>qualstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></else></if></else></if>
    <expr_stmt><expr><name>str</name> = <call><name>js_ConcatStrings</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>qn</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>str</name> &amp;&amp; <name>clasp</name> == &amp;<name>js_AttributeNameClass</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>length</name> = <call><name>JSSTRING_LENGTH</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chars</name> = (<name>jschar</name> *) <call><name>JS_malloc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>length</name> + 2) * <sizeof>sizeof<argument_list>(<argument><expr><name>jschar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>chars</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr>*<name>chars</name> = '@'</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>js_strncpy</name><argument_list>(<argument><expr><name>chars</name> + 1</expr></argument>, <argument><expr><call><name>JSSTRING_CHARS</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>chars</name><index>[<expr>++<name>length</name></expr>]</index></name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name>str</name> = <call><name>js_NewString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr>*<name>rval</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>JSFunctionSpec</name></type> <name><name>qname_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><name>js_toString_str</name></expr>,  <expr><name>qname_toString</name></expr>,    <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>JSXMLQName</name> *</type>
<name>js_NewXMLQName</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>uri</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>prefix</name></decl></param>,
               <param><decl><type><name>JSString</name> *</type><name>localName</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>qn</name> = (<name>JSXMLQName</name> *) <call><name>js_NewGCThing</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>GCX_QNAME</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JSXMLQName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>qn</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>qn</name>-&gt;<name>object</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>qn</name>-&gt;<name>uri</name></name> = <name>uri</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>qn</name>-&gt;<name>prefix</name></name> = <name>prefix</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>qn</name>-&gt;<name>localName</name></name> = <name>localName</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>qname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>liveqname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>qn</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name>js_TraceXMLQName</name><parameter_list>(<param><decl><type><name>JSTracer</name> *</type><name>trc</name></decl></param>, <param><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name><name>qn</name>-&gt;<name>object</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_CALL_OBJECT_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name><name>qn</name>-&gt;<name>object</name></name></expr></argument>, <argument><expr>"object"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name><name>qn</name>-&gt;<name>uri</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_CALL_STRING_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name><name>qn</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>"uri"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name><name>qn</name>-&gt;<name>prefix</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_CALL_STRING_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name><name>qn</name>-&gt;<name>prefix</name></name></expr></argument>, <argument><expr>"prefix"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name><name>qn</name>-&gt;<name>localName</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_CALL_STRING_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name><name>qn</name>-&gt;<name>localName</name></name></expr></argument>, <argument><expr>"localName"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name>void</name></type>
<name>js_FinalizeXMLQName</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UNMETER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>liveqname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>js_NewXMLQNameObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>uri</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>prefix</name></decl></param>,
                     <param><decl><type><name>JSString</name> *</type><name>localName</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>qn</name> = <call><name>js_NewXMLQName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>localName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>qn</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><call><name>js_GetXMLQNameObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>qn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>js_GetXMLQNameObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>obj</name> = <name><name>qn</name>-&gt;<name>object</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>obj</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> == <name>qn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>obj</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>obj</name> = <call><name>js_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>js_QNameClass</name>.<name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name> || !<call><name>JS_SetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>qn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>cx</name>-&gt;<name>weakRoots</name>.<name>newborn</name><index>[<expr><name>GCX_OBJECT</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>qn</name>-&gt;<name>object</name></name> = <name>obj</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>qnameobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>liveqnameobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>obj</name></expr>;</return>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>js_GetAttributeNameObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>obj</name> = <name><name>qn</name>-&gt;<name>object</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>obj</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> == &amp;<name>js_AttributeNameClass</name></expr>)</condition><then>
            <return>return <expr><name>obj</name></expr>;</return></then></if>
        <expr_stmt><expr><name>qn</name> = <call><name>js_NewXMLQName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>qn</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>qn</name>-&gt;<name>prefix</name></name></expr></argument>, <argument><expr><name><name>qn</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>qn</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
    }</block></then></if>

    <expr_stmt><expr><name>obj</name> = <call><name>js_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>js_AttributeNameClass</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name> || !<call><name>JS_SetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>qn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>cx</name>-&gt;<name>weakRoots</name>.<name>newborn</name><index>[<expr><name>GCX_OBJECT</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>qn</name>-&gt;<name>object</name></name> = <name>obj</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>qnameobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>liveqnameobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>obj</name></expr>;</return>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>js_ConstructXMLQNameObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>nsval</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>lnval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name><name>argv</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/*
     * ECMA-357 11.1.2,
     * The _QualifiedIdentifier : PropertySelector :: PropertySelector_
     * production, step 2.
     */</comment>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>nsval</name></expr></argument>)</argument_list></call> &amp;&amp;
        <call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>nsval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == &amp;<name>js_AnyNameClass</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>nsval</name> = <name>JSVAL_NULL</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <name>nsval</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name> = <name>lnval</name></expr>;</expr_stmt>
    <return>return <expr><call><name>js_ConstructObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>js_QNameClass</name>.<name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>IsXMLName</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>jschar</name> *</type><name>cp</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>n</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jschar</name></type> <name>c</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>rv</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>n</name> != 0 &amp;&amp; <call><name>JS_ISXMLNSSTART</name><argument_list>(<argument><expr>*<name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <while>while <condition>(<expr>--<name>n</name> != 0</expr>)</condition> <block>{
            <expr_stmt><expr><name>c</name> = *++<name>cp</name></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name>JS_ISXMLNS</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>rv</name></expr>;</return></then></if>
        }</block></while>
        <expr_stmt><expr><name>rv</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>JSBool</name></type>
<name>js_IsXMLName</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSClass</name> *</type><name>clasp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSErrorReporter</name></type> <name>older</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Inline specialization of the QName constructor called with v passed as
     * the only argument, to compute the localName for the constructed qname,
     * without actually allocating the object or computing its uri and prefix.
     * See ECMA-357 13.1.2.1 step 1 and 13.3.2.
     */</comment>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> &amp;&amp;
        (<name>clasp</name> = <call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>,
         <name>clasp</name> == &amp;<name><name>js_QNameClass</name>.<name>base</name></name> ||
         <name>clasp</name> == &amp;<name>js_AttributeNameClass</name> ||
         <name>clasp</name> == &amp;<name>js_AnyNameClass</name>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>qn</name> = (<name>JSXMLQName</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>name</name> = <name><name>qn</name>-&gt;<name>localName</name></name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>older</name> = <call><name>JS_SetErrorReporter</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>name</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_SetErrorReporter</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>older</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>name</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ClearPendingException</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>
    }</block></else></if>

    <return>return <expr><call><name>IsXMLName</name><argument_list>(<argument><expr><call><name>JSSTRING_CHARS</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>JSSTRING_LENGTH</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Namespace</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>urival</name></decl>, <decl><type ref="prev"/><name>prefixval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>uriobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>isNamespace</name></decl>, <decl><type ref="prev"/><name>isQName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSClass</name> *</type><name>clasp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>empty</name></decl>, *<decl><type ref="prev"/><name>prefix</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>, *<decl><type ref="prev"/><name>ns2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>urival</name> = <name><name>argv</name><index>[<expr><name>argc</name> &gt; 1</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>isNamespace</name> = <name>isQName</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>urival</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>uriobj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>urival</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>clasp</name> = <call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>uriobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>isNamespace</name> = (<name>clasp</name> == &amp;<name><name>js_NamespaceClass</name>.<name>base</name></name>)</expr>;</expr_stmt>
        <expr_stmt><expr><name>isQName</name> = (<name>clasp</name> == &amp;<name><name>js_QNameClass</name>.<name>base</name></name>)</expr>;</expr_stmt>
    }</block></then>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__GNUC__</name></cpp:ifdef>         <comment type="block">/* suppress bogus gcc warnings */</comment>
    <else>else <expr_stmt><expr><name>uriobj</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr>!(<name><name>cx</name>-&gt;<name>fp</name>-&gt;<name>flags</name></name> &amp; <name>JSFRAME_CONSTRUCTING</name>)</expr>)</condition><then> <block>{
        <comment type="block">/* Namespace called as function. */</comment>
        <if>if <condition>(<expr><name>argc</name> == 1 &amp;&amp; <name>isNamespace</name></expr>)</condition><then> <block>{
            <comment type="block">/* Namespace called with one Namespace argument is identity. */</comment>
            <expr_stmt><expr>*<name>rval</name> = <name>urival</name></expr>;</expr_stmt>
            <return>return <expr><name>JS_TRUE</name></expr>;</return>
        }</block></then></if>

        <comment type="block">/* Create and return a new QName object exactly as if constructed. */</comment>
        <expr_stmt><expr><name>obj</name> = <call><name>js_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>js_NamespaceClass</name>.<name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>namespaceobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>livenamespaceobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Create and connect private data to rooted obj early, so we don't have
     * to worry about rooting string newborns hanging off of the private data
     * further below.
     */</comment>
    <expr_stmt><expr><name>empty</name> = <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ns</name> = <call><name>js_NewXMLNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>JS_SetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>ns</name>-&gt;<name>object</name></name> = <name>obj</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>argc</name> == 1</expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>isNamespace</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ns2</name> = (<name>JSXMLNamespace</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>uriobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ns</name>-&gt;<name>uri</name></name> = <name><name>ns2</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ns</name>-&gt;<name>prefix</name></name> = <name><name>ns2</name>-&gt;<name>prefix</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>isQName</name> &amp;&amp;
                   (<name>qn</name> = (<name>JSXMLQName</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>uriobj</name></expr></argument>)</argument_list></call>)-&gt;<name>uri</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>ns</name>-&gt;<name>uri</name></name> = <name><name>qn</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ns</name>-&gt;<name>prefix</name></name> = <name><name>qn</name>-&gt;<name>prefix</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>ns</name>-&gt;<name>uri</name></name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>urival</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name><name>ns</name>-&gt;<name>uri</name></name></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

            <comment type="block">/* NULL here represents *undefined* in ECMA-357 13.2.2 3(c)iii. */</comment>
            <if>if <condition>(<expr>!<call><name>IS_EMPTY</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name><name>ns</name>-&gt;<name>prefix</name></name> = <name>NULL</name></expr>;</expr_stmt></then></if>
        }</block></else></if></else></if>
    }</block></then> <else>else <if>if <condition>(<expr><name>argc</name> == 2</expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>isQName</name> &amp;&amp;
            (<name>qn</name> = (<name>JSXMLQName</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>uriobj</name></expr></argument>)</argument_list></call>)-&gt;<name>uri</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>ns</name>-&gt;<name>uri</name></name> = <name><name>qn</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>ns</name>-&gt;<name>uri</name></name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>urival</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name><name>ns</name>-&gt;<name>uri</name></name></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        }</block></else></if>

        <expr_stmt><expr><name>prefixval</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>IS_EMPTY</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr><name>prefixval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>prefix</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prefixval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>prefix</name></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
                <if>if <condition>(<expr>!<call><name>IS_EMPTY</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                         <argument><expr><name>JSMSG_BAD_XML_NAMESPACE</name></expr></argument>,
                                         <argument><expr><call><name>js_ValueToPrintableString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>,
                                             <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return>
                }</block></then></if>
            }</block></then></if>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr><name>prefixval</name></expr></argument>)</argument_list></call> || !<call><name>js_IsXMLName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prefixval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="block">/* NULL here represents *undefined* in ECMA-357 13.2.2 4(d) etc. */</comment>
            <expr_stmt><expr><name><name>ns</name>-&gt;<name>prefix</name></name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>prefix</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prefixval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>prefix</name></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <expr_stmt><expr><name><name>ns</name>-&gt;<name>prefix</name></name> = <name>prefix</name></expr>;</expr_stmt>
        }</block></else></if></else></if>
    }</block></then></if></else></if>

    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>QName</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>nameval</name></decl>, <decl><type ref="prev"/><name>nsval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>isQName</name></decl>, <decl><type ref="prev"/><name>isNamespace</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>uri</name></decl>, *<decl><type ref="prev"/><name>prefix</name></decl>, *<decl><type ref="prev"/><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>nsobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSClass</name> *</type><name>clasp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>nameval</name> = <name><name>argv</name><index>[<expr><name>argc</name> &gt; 1</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>isQName</name> =
        !<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>nameval</name></expr></argument>)</argument_list></call> &amp;&amp;
        <call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>nameval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == &amp;<name><name>js_QNameClass</name>.<name>base</name></name></expr>;</expr_stmt>

    <if>if <condition>(<expr>!(<name><name>cx</name>-&gt;<name>fp</name>-&gt;<name>flags</name></name> &amp; <name>JSFRAME_CONSTRUCTING</name>)</expr>)</condition><then> <block>{
        <comment type="block">/* QName called as function. */</comment>
        <if>if <condition>(<expr><name>argc</name> == 1 &amp;&amp; <name>isQName</name></expr>)</condition><then> <block>{
            <comment type="block">/* QName called with one QName argument is identity. */</comment>
            <expr_stmt><expr>*<name>rval</name> = <name>nameval</name></expr>;</expr_stmt>
            <return>return <expr><name>JS_TRUE</name></expr>;</return>
        }</block></then></if>

        <comment type="block">/*
         * Create and return a new QName object exactly as if constructed.
         * Use the constructor's clasp so we can be shared by AttributeName
         * (see below after this function).
         */</comment>
        <expr_stmt><expr><name>obj</name> = <call><name>js_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>,
                           <argument><expr><call><name>JS_ValueToFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>-2</expr>]</index></name></expr></argument>)</argument_list></call>-&gt;<name>clasp</name></expr></argument>,
                           <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>qnameobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>liveqnameobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>isQName</name></expr>)</condition><then> <block>{
        <comment type="block">/* If namespace is not specified and name is a QName, clone it. */</comment>
        <expr_stmt><expr><name>qn</name> = (<name>JSXMLQName</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>nameval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>argc</name> == 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>uri</name> = <name><name>qn</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>prefix</name> = <name><name>qn</name>-&gt;<name>prefix</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>name</name> = <name><name>qn</name>-&gt;<name>localName</name></name></expr>;</expr_stmt>
            <goto>goto <name>out</name>;</goto>
        }</block></then></if>

        <comment type="block">/* Namespace and qname were passed -- use the qname's localName. */</comment>
        <expr_stmt><expr><name>nameval</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name><name>qn</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>argc</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>name</name> = <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>name</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nameval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>name</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

        <comment type="block">/* Use argv[1] as a local root for name, even if it was not passed. */</comment>
        <expr_stmt><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name>nsval</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>argc</name> == 1 || <call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr><name>nsval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>IS_STAR</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>nsval</name> = <name>JSVAL_NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr>!<call><name>js_GetDefaultXMLNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>nsval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        }</block></else></if>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>nsval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* NULL prefix represents *undefined* in ECMA-357 13.3.2 5(a). */</comment>
        <expr_stmt><expr><name>uri</name> = <name>prefix</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <comment type="block">/*
         * Inline specialization of the Namespace constructor called with
         * nsval passed as the only argument, to compute the uri and prefix
         * for the constructed namespace, without actually allocating the
         * object or computing other members.  See ECMA-357 13.3.2 6(a) and
         * 13.2.2.
         */</comment>
        <expr_stmt><expr><name>isNamespace</name> = <name>isQName</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>nsval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>nsobj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>nsval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>clasp</name> = <call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nsobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isNamespace</name> = (<name>clasp</name> == &amp;<name><name>js_NamespaceClass</name>.<name>base</name></name>)</expr>;</expr_stmt>
            <expr_stmt><expr><name>isQName</name> = (<name>clasp</name> == &amp;<name><name>js_QNameClass</name>.<name>base</name></name>)</expr>;</expr_stmt>
        }</block></then>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__GNUC__</name></cpp:ifdef>         <comment type="block">/* suppress bogus gcc warnings */</comment>
        <else>else <expr_stmt><expr><name>nsobj</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <if>if <condition>(<expr><name>isNamespace</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ns</name> = (<name>JSXMLNamespace</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nsobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>uri</name> = <name><name>ns</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>prefix</name> = <name><name>ns</name>-&gt;<name>prefix</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>isQName</name> &amp;&amp;
                   (<name>qn</name> = (<name>JSXMLQName</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nsobj</name></expr></argument>)</argument_list></call>)-&gt;<name>uri</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>uri</name> = <name><name>qn</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>prefix</name> = <name><name>qn</name>-&gt;<name>prefix</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>uri</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nsval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>uri</name></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block">/* local root */</comment>

            <comment type="block">/* NULL here represents *undefined* in ECMA-357 13.2.2 3(c)iii. */</comment>
            <expr_stmt><expr><name>prefix</name> = <call><name>IS_EMPTY</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> ? <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name> : <name>NULL</name></expr>;</expr_stmt>
        }</block></else></if></else></if>
    }</block></else></if>

<label><name>out</name>:</label>
    <expr_stmt><expr><name>qn</name> = <call><name>js_NewXMLQName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>qn</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>JS_SetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>qn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>qn</name>-&gt;<name>object</name></name> = <name>obj</name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>AttributeName</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
              <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * Since js_AttributeNameClass was initialized, obj will have that as its
     * class, not js_QNameClass.
     */</comment>
    <return>return <expr><call><name>QName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
 * XMLArray library functions.
 */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>namespace_identity</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>JSXMLNamespace</name> *</type><name>nsa</name> <init>= <expr>(const <name>JSXMLNamespace</name> *) <name>a</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>JSXMLNamespace</name> *</type><name>nsb</name> <init>= <expr>(const <name>JSXMLNamespace</name> *) <name>b</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>nsa</name>-&gt;<name>prefix</name></name> &amp;&amp; <name><name>nsb</name>-&gt;<name>prefix</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>nsa</name>-&gt;<name>prefix</name></name></expr></argument>, <argument><expr><name><name>nsb</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr><name><name>nsa</name>-&gt;<name>prefix</name></name> || <name><name>nsb</name>-&gt;<name>prefix</name></name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></else></if>
    <return>return <expr><call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>nsa</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>nsb</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>attr_identity</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>JSXML</name> *</type><name>xmla</name> <init>= <expr>(const <name>JSXML</name> *) <name>a</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>JSXML</name> *</type><name>xmlb</name> <init>= <expr>(const <name>JSXML</name> *) <name>b</name></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>qname_identity</name><argument_list>(<argument><expr><name><name>xmla</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>xmlb</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>XMLArrayCursorInit</name><parameter_list>(<param><decl><type><name>JSXMLArrayCursor</name> *</type><name>cursor</name></decl></param>, <param><decl><type><name>JSXMLArray</name> *</type><name>array</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLArrayCursor</name> *</type><name>next</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>cursor</name>-&gt;<name>array</name></name> = <name>array</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cursor</name>-&gt;<name>index</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>next</name> = <name><name>cursor</name>-&gt;<name>next</name></name> = <name><name>array</name>-&gt;<name>cursors</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>next</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>next</name>-&gt;<name>prevp</name></name> = &amp;<name><name>cursor</name>-&gt;<name>next</name></name></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name><name>cursor</name>-&gt;<name>prevp</name></name> = &amp;<name><name>array</name>-&gt;<name>cursors</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name>-&gt;<name>cursors</name></name> = <name>cursor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cursor</name>-&gt;<name>root</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>XMLArrayCursorFinish</name><parameter_list>(<param><decl><type><name>JSXMLArrayCursor</name> *</type><name>cursor</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLArrayCursor</name> *</type><name>next</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name><name>cursor</name>-&gt;<name>array</name></name></expr>)</condition><then>
        <return>return;</return></then></if>
    <expr_stmt><expr><name>next</name> = <name><name>cursor</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>next</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>next</name>-&gt;<name>prevp</name></name> = <name><name>cursor</name>-&gt;<name>prevp</name></name></expr>;</expr_stmt></then></if>
    <expr_stmt><expr>*<name><name>cursor</name>-&gt;<name>prevp</name></name> = <name>next</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cursor</name>-&gt;<name>array</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type>
<name>XMLArrayCursorNext</name><parameter_list>(<param><decl><type><name>JSXMLArrayCursor</name> *</type><name>cursor</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLArray</name> *</type><name>array</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>array</name> = <name><name>cursor</name>-&gt;<name>array</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>array</name> || <name><name>cursor</name>-&gt;<name>index</name></name> &gt;= <name><name>array</name>-&gt;<name>length</name></name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><name><name>cursor</name>-&gt;<name>root</name></name> = <name><name>array</name>-&gt;<name>vector</name><index>[<expr><name><name>cursor</name>-&gt;<name>index</name></name>++</expr>]</index></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type>
<name>XMLArrayCursorItem</name><parameter_list>(<param><decl><type><name>JSXMLArrayCursor</name> *</type><name>cursor</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLArray</name> *</type><name>array</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>array</name> = <name><name>cursor</name>-&gt;<name>array</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>array</name> || <name><name>cursor</name>-&gt;<name>index</name></name> &gt;= <name><name>array</name>-&gt;<name>length</name></name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><name><name>cursor</name>-&gt;<name>root</name></name> = <name><name>array</name>-&gt;<name>vector</name><index>[<expr><name><name>cursor</name>-&gt;<name>index</name></name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>XMLArrayCursorTrace</name><parameter_list>(<param><decl><type><name>JSTracer</name> *</type><name>trc</name></decl></param>, <param><decl><type><name>JSXMLArrayCursor</name> *</type><name>cursor</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>void</name> *</type><name>root</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <decl_stmt><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <for>for (<init>;</init> <condition><expr><name>cursor</name></expr>;</condition> <incr><expr><name>cursor</name> = <name><name>cursor</name>-&gt;<name>next</name></name></expr></incr>) <block>{
        <expr_stmt><expr><name>root</name> = <name><name>cursor</name>-&gt;<name>root</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_SET_TRACING_INDEX</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr>"cursor_root"</expr></argument>, <argument><expr><name>index</name>++</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>js_CallValueTracerIfGCThing</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr>(<name>jsval</name>)<name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<comment type="block">/* NB: called with null cx from the GC, via xml_trace =&gt; XMLArrayTrim. */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>XMLArraySetCapacity</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXMLArray</name> *</type><name>array</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>capacity</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>void</name> **</type><name>vector</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>capacity</name> == 0</expr>)</condition><then> <block>{
        <comment type="block">/* We could let realloc(p, 0) free this, but purify gets confused. */</comment>
        <if>if <condition>(<expr><name><name>array</name>-&gt;<name>vector</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>array</name>-&gt;<name>vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name>vector</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr>(<name>size_t</name>)<name>capacity</name> &gt; ~(<name>size_t</name>)0 / <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof> ||
            !(<name>vector</name> = (<name>void</name> **)
                       <call><name>realloc</name><argument_list>(<argument><expr><name><name>array</name>-&gt;<name>vector</name></name></expr></argument>, <argument><expr><name>capacity</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>cx</name></expr>)</condition><then>
                <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>
    }</block></else></if>
    <expr_stmt><expr><name><name>array</name>-&gt;<name>capacity</name></name> = <name>JSXML_PRESET_CAPACITY</name> | <name>capacity</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name>-&gt;<name>vector</name></name> = <name>vector</name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>XMLArrayTrim</name><parameter_list>(<param><decl><type><name>JSXMLArray</name> *</type><name>array</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name><name>array</name>-&gt;<name>capacity</name></name> &amp; <name>JSXML_PRESET_CAPACITY</name></expr>)</condition><then>
        <return>return;</return></then></if>
    <if>if <condition>(<expr><name><name>array</name>-&gt;<name>length</name></name> &lt; <name><name>array</name>-&gt;<name>capacity</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>XMLArraySetCapacity</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name><name>array</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>XMLArrayInit</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXMLArray</name> *</type><name>array</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>capacity</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>array</name>-&gt;<name>length</name></name> = <name><name>array</name>-&gt;<name>capacity</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name>-&gt;<name>vector</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name>-&gt;<name>cursors</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>capacity</name> == 0 || <call><name>XMLArraySetCapacity</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>XMLArrayFinish</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXMLArray</name> *</type><name>array</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLArrayCursor</name> *</type><name>cursor</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>array</name>-&gt;<name>vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr>(<name>cursor</name> = <name><name>array</name>-&gt;<name>cursors</name></name>) != <name>NULL</name></expr>)</condition>
        <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr>0xd5</expr></argument>, <argument><expr>sizeof *<name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_NOT_FOUND</name></cpp:macro>   <cpp:value>((uint32) -1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>XMLArrayFindMember</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>JSXMLArray</name> *</type><name>array</name></decl></param>, <param><decl><type><name>void</name> *</type><name>elt</name></decl></param>, <param><decl><type><name>JSIdentityOp</name></type> <name>identity</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>void</name> **</type><name>vector</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

    <comment type="block">/* The identity op must not reallocate array-&gt;vector. */</comment>
    <expr_stmt><expr><name>vector</name> = <name><name>array</name>-&gt;<name>vector</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>identity</name></expr>)</condition><then> <block>{
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>array</name>-&gt;<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name>identity</name><argument_list>(<argument><expr><name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>i</name></expr>;</return></then></if>
        }</block></for>
    }</block></then> <else>else <block>{
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>array</name>-&gt;<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name> == <name>elt</name></expr>)</condition><then>
                <return>return <expr><name>i</name></expr>;</return></then></if>
        }</block></for>
    }</block></else></if>
    <return>return <expr><name>XML_NOT_FOUND</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Grow array vector capacity by powers of two to LINEAR_THRESHOLD, and after
 * that, grow by LINEAR_INCREMENT.  Both must be powers of two, and threshold
 * should be greater than increment.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINEAR_THRESHOLD</name></cpp:macro>        <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINEAR_INCREMENT</name></cpp:macro>        <cpp:value>32</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>XMLArrayAddMember</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXMLArray</name> *</type><name>array</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>index</name></decl></param>, <param><decl><type><name>void</name> *</type><name>elt</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uint32</name></type> <name>capacity</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>log2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> **</type><name>vector</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>index</name> &gt;= <name><name>array</name>-&gt;<name>length</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>index</name> &gt;= <call><name>JSXML_CAPACITY</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="block">/* Arrange to clear JSXML_PRESET_CAPACITY from array-&gt;capacity. */</comment>
            <expr_stmt><expr><name>capacity</name> = <name>index</name> + 1</expr>;</expr_stmt>
            <if>if <condition>(<expr><name>index</name> &gt;= <name>LINEAR_THRESHOLD</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>capacity</name> = <call><name>JS_ROUNDUP</name><argument_list>(<argument><expr><name>capacity</name></expr></argument>, <argument><expr><name>LINEAR_INCREMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>JS_CEILING_LOG2</name><argument_list>(<argument><expr><name>log2</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>capacity</name> = <call><name>JS_BIT</name><argument_list>(<argument><expr><name>log2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <if>if <condition>(<expr>(<name>size_t</name>)<name>capacity</name> &gt; ~(<name>size_t</name>)0 / <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof> ||
                !(<name>vector</name> = (<name>void</name> **)
                           <call><name>realloc</name><argument_list>(<argument><expr><name><name>array</name>-&gt;<name>vector</name></name></expr></argument>, <argument><expr><name>capacity</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>JS_FALSE</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name><name>array</name>-&gt;<name>capacity</name></name> = <name>capacity</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>array</name>-&gt;<name>vector</name></name> = <name>vector</name></expr>;</expr_stmt>
            <for>for (<init><expr><name>i</name> = <name><name>array</name>-&gt;<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>index</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <expr_stmt><expr><name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt></for>
        }</block></then></if>
        <expr_stmt><expr><name><name>array</name>-&gt;<name>length</name></name> = <name>index</name> + 1</expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name><name>array</name>-&gt;<name>vector</name><index>[<expr><name>index</name></expr>]</index></name> = <name>elt</name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>XMLArrayInsert</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXMLArray</name> *</type><name>array</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>i</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>n</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uint32</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArrayCursor</name> *</type><name>cursor</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>j</name> = <name><name>array</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>i</name> &lt;= <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>XMLArraySetCapacity</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>j</name> + <name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name><name>array</name>-&gt;<name>length</name></name> = <name>j</name> + <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>n</name> != (<name>uint32</name>)-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>j</name> != <name>i</name></expr>)</condition> <block>{
        <expr_stmt><expr>--<name>j</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>array</name>-&gt;<name>vector</name><index>[<expr><name>j</name> + <name>n</name></expr>]</index></name> = <name><name>array</name>-&gt;<name>vector</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></while>

    <for>for (<init><expr><name>cursor</name> = <name><name>array</name>-&gt;<name>cursors</name></name></expr>;</init> <condition><expr><name>cursor</name></expr>;</condition> <incr><expr><name>cursor</name> = <name><name>cursor</name>-&gt;<name>next</name></name></expr></incr>) <block>{
        <if>if <condition>(<expr><name><name>cursor</name>-&gt;<name>index</name></name> &gt; <name>i</name></expr>)</condition><then>
            <expr_stmt><expr><name><name>cursor</name>-&gt;<name>index</name></name> += <name>n</name></expr>;</expr_stmt></then></if>
    }</block></for>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type>
<name>XMLArrayDelete</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXMLArray</name> *</type><name>array</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>index</name></decl></param>, <param><decl><type><name>JSBool</name></type> <name>compress</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uint32</name></type> <name>length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> **</type><name>vector</name></decl>, *<decl><type ref="prev"/><name>elt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArrayCursor</name> *</type><name>cursor</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>length</name> = <name><name>array</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>index</name> &gt;= <name>length</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>vector</name> = <name><name>array</name>-&gt;<name>vector</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>elt</name> = <name><name>vector</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>compress</name></expr>)</condition><then> <block>{
        <while>while <condition>(<expr>++<name>index</name> &lt; <name>length</name></expr>)</condition>
            <expr_stmt><expr><name><name>vector</name><index>[<expr><name>index</name>-1</expr>]</index></name> = <name><name>vector</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt></while>
        <expr_stmt><expr><name><name>array</name>-&gt;<name>length</name></name> = <name>length</name> - 1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>array</name>-&gt;<name>capacity</name></name> = <call><name>JSXML_CAPACITY</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name><name>vector</name><index>[<expr><name>index</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></else></if>

    <for>for (<init><expr><name>cursor</name> = <name><name>array</name>-&gt;<name>cursors</name></name></expr>;</init> <condition><expr><name>cursor</name></expr>;</condition> <incr><expr><name>cursor</name> = <name><name>cursor</name>-&gt;<name>next</name></name></expr></incr>) <block>{
        <if>if <condition>(<expr><name><name>cursor</name>-&gt;<name>index</name></name> &gt; <name>index</name></expr>)</condition><then>
            <expr_stmt><expr>--<name><name>cursor</name>-&gt;<name>index</name></name></expr>;</expr_stmt></then></if>
    }</block></for>
    <return>return <expr><name>elt</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>XMLArrayTruncate</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXMLArray</name> *</type><name>array</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>length</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>void</name> **</type><name>vector</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name><name>array</name>-&gt;<name>cursors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>length</name> &gt;= <name><name>array</name>-&gt;<name>length</name></name></expr>)</condition><then>
        <return>return;</return></then></if>

    <if>if <condition>(<expr><name>length</name> == 0</expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>array</name>-&gt;<name>vector</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>array</name>-&gt;<name>vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name>vector</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>vector</name> = <call><name>realloc</name><argument_list>(<argument><expr><name><name>array</name>-&gt;<name>vector</name></name></expr></argument>, <argument><expr><name>length</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>vector</name></expr>)</condition><then>
            <return>return;</return></then></if>
    }</block></else></if>

    <if>if <condition>(<expr><name><name>array</name>-&gt;<name>length</name></name> &gt; <name>length</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>array</name>-&gt;<name>length</name></name> = <name>length</name></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name><name>array</name>-&gt;<name>capacity</name></name> = <name>length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>array</name>-&gt;<name>vector</name></name> = <name>vector</name></expr>;</expr_stmt>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMLARRAY_FIND_MEMBER</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>e</name></type></param>,<param><type><name>f</name></type></param>)</parameter_list></cpp:macro> <cpp:value>XMLArrayFindMember(a, (void *)(e), f)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMLARRAY_HAS_MEMBER</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>e</name></type></param>,<param><type><name>f</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>(XMLArrayFindMember(a, (void *)(e), f) != \
                                     XML_NOT_FOUND)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMLARRAY_MEMBER</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>i</name></type></param>,<param><type><name>t</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>(((i) &lt; (a)-&gt;length)                      \
                                     ? (t *) (a)-&gt;vector[i]                   \
                                     : NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMLARRAY_SET_MEMBER</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>i</name></type></param>,<param><type><name>e</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>JS_BEGIN_MACRO                            \
                                        if ((a)-&gt;length &lt;= (i))               \
                                            (a)-&gt;length = (i) + 1;            \
                                        ((a)-&gt;vector[i] = (void *)(e));       \
                                    JS_END_MACRO</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMLARRAY_ADD_MEMBER</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>a</name></type></param>,<param><type><name>i</name></type></param>,<param><type><name>e</name></type></param>)</parameter_list></cpp:macro><cpp:value>XMLArrayAddMember(x, a, i, (void *)(e))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMLARRAY_INSERT</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>a</name></type></param>,<param><type><name>i</name></type></param>,<param><type><name>n</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>XMLArrayInsert(x, a, i, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMLARRAY_APPEND</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>a</name></type></param>,<param><type><name>e</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>XMLARRAY_ADD_MEMBER(x, a, (a)-&gt;length, (e))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMLARRAY_DELETE</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>a</name></type></param>,<param><type><name>i</name></type></param>,<param><type><name>c</name></type></param>,<param><type><name>t</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>((t *) XMLArrayDelete(x, a, i, c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMLARRAY_TRUNCATE</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>a</name></type></param>,<param><type><name>n</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>XMLArrayTruncate(x, a, n)</cpp:value></cpp:define>

<comment type="block">/*
 * Define XML setting property strings and constants early, so everyone can
 * use the same names and their magic numbers (tinyids, flags).
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>js_ignoreComments_str</name><index>[]</index></name>   <init>= <expr>"ignoreComments"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>js_ignoreProcessingInstructions_str</name><index>[]</index></name>
                                            <init>= <expr>"ignoreProcessingInstructions"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>js_ignoreWhitespace_str</name><index>[]</index></name> <init>= <expr>"ignoreWhitespace"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>js_prettyPrinting_str</name><index>[]</index></name>   <init>= <expr>"prettyPrinting"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>js_prettyIndent_str</name><index>[]</index></name>     <init>= <expr>"prettyIndent"</expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * NB: These XML static property tinyids must
 * (a) not collide with the generic negative tinyids at the top of jsfun.c;
 * (b) index their corresponding xml_static_props array elements.
 * Don't change 'em!
 */</comment>
<enum>enum <name>xml_static_tinyid</name> <block>{
    <decl><name>XML_IGNORE_COMMENTS</name></decl>,
    <decl><name>XML_IGNORE_PROCESSING_INSTRUCTIONS</name></decl>,
    <decl><name>XML_IGNORE_WHITESPACE</name></decl>,
    <decl><name>XML_PRETTY_PRINTING</name></decl>,
    <decl><name>XML_PRETTY_INDENT</name></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_setting_getter</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_setting_setter</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8</name></type> <name>flag</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_INT</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>js_ValueToBoolean</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>, <argument><expr>&amp;<name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>flag</name> = <call><name>JS_BIT</name><argument_list>(<argument><expr><call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>b</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>cx</name>-&gt;<name>xmlSettingFlags</name></name> |= <name>flag</name></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><name><name>cx</name>-&gt;<name>xmlSettingFlags</name></name> &amp;= ~<name>flag</name></expr>;</expr_stmt></else></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>JSPropertySpec</name></type> <name><name>xml_static_props</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><name>js_ignoreComments_str</name></expr>,     <expr><name>XML_IGNORE_COMMENTS</name></expr>,   <expr><name>JSPROP_PERMANENT</name></expr>,
                                <expr><name>xml_setting_getter</name></expr>, <expr><name>xml_setting_setter</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_ignoreProcessingInstructions_str</name></expr>,
                   <expr><name>XML_IGNORE_PROCESSING_INSTRUCTIONS</name></expr>, <expr><name>JSPROP_PERMANENT</name></expr>,
                                <expr><name>xml_setting_getter</name></expr>, <expr><name>xml_setting_setter</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_ignoreWhitespace_str</name></expr>,   <expr><name>XML_IGNORE_WHITESPACE</name></expr>, <expr><name>JSPROP_PERMANENT</name></expr>,
                                <expr><name>xml_setting_getter</name></expr>, <expr><name>xml_setting_setter</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_prettyPrinting_str</name></expr>,     <expr><name>XML_PRETTY_PRINTING</name></expr>,   <expr><name>JSPROP_PERMANENT</name></expr>,
                                <expr><name>xml_setting_getter</name></expr>, <expr><name>xml_setting_setter</name></expr>}</block></expr>,
    <expr><block>{<expr><name>js_prettyIndent_str</name></expr>,       <expr><name>XML_PRETTY_INDENT</name></expr>,     <expr><name>JSPROP_PERMANENT</name></expr>,
                                <expr><name>xml_setting_getter</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Derive cx-&gt;xmlSettingFlags bits from xml_static_props tinyids. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSF_IGNORE_COMMENTS</name></cpp:macro>     <cpp:value>JS_BIT(XML_IGNORE_COMMENTS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSF_IGNORE_PROCESSING_INSTRUCTIONS</name></cpp:macro>                                    \
                                <cpp:value>JS_BIT(XML_IGNORE_PROCESSING_INSTRUCTIONS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSF_IGNORE_WHITESPACE</name></cpp:macro>   <cpp:value>JS_BIT(XML_IGNORE_WHITESPACE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSF_PRETTY_PRINTING</name></cpp:macro>     <cpp:value>JS_BIT(XML_PRETTY_PRINTING)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSF_CACHE_VALID</name></cpp:macro>         <cpp:value>JS_BIT(XML_PRETTY_INDENT)</cpp:value></cpp:define>

<comment type="block">/*
 * Extra, unrelated but necessarily disjoint flag used by ParseNodeToXML.
 * This flag means a couple of things:
 *
 * - The top JSXML created for a parse tree must have an object owning it.
 *
 * - That the default namespace normally inherited from the temporary
 *   &lt;parent xmlns='...'&gt; tag that wraps a runtime-concatenated XML source
 *   string must, in the case of a precompiled XML object tree, inherit via
 *   ad-hoc code in ParseNodeToXML.
 *
 * Because of the second purpose, we name this flag XSF_PRECOMPILED_ROOT.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSF_PRECOMPILED_ROOT</name></cpp:macro>    <cpp:value>(XSF_CACHE_VALID &lt;&lt; 1)</cpp:value></cpp:define>

<comment type="block">/* Macros for special-casing xml:, xmlns= and xmlns:foo= in ParseNodeToQName. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_XML</name><parameter_list>(<param><type><name>str</name></type></param>)</parameter_list></cpp:macro>                                                           \
    <cpp:value>(JSSTRING_LENGTH(str) == 3 &amp;&amp; IS_XML_CHARS(JSSTRING_CHARS(str)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_XMLNS</name><parameter_list>(<param><type><name>str</name></type></param>)</parameter_list></cpp:macro>                                                         \
    <cpp:value>(JSSTRING_LENGTH(str) == 5 &amp;&amp; IS_XMLNS_CHARS(JSSTRING_CHARS(str)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_XML_CHARS</name><parameter_list>(<param><type><name>chars</name></type></param>)</parameter_list></cpp:macro>                                                   \
    <cpp:value>(JS_TOLOWER((chars)[0]) == 'x' &amp;&amp;                                         \
     JS_TOLOWER((chars)[1]) == 'm' &amp;&amp;                                         \
     JS_TOLOWER((chars)[2]) == 'l')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_NS_AFTER_XML</name><parameter_list>(<param><type><name>chars</name></type></param>)</parameter_list></cpp:macro>                                               \
    <cpp:value>(JS_TOLOWER((chars)[3]) == 'n' &amp;&amp;                                         \
     JS_TOLOWER((chars)[4]) == 's')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_XMLNS_CHARS</name><parameter_list>(<param><type><name>chars</name></type></param>)</parameter_list></cpp:macro>                                                 \
    <cpp:value>(IS_XML_CHARS(chars) &amp;&amp; HAS_NS_AFTER_XML(chars))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STARTS_WITH_XML</name><parameter_list>(<param><type><name>chars</name></type></param>,<param><type><name>length</name></type></param>)</parameter_list></cpp:macro>                                         \
    <cpp:value>(length &gt;= 3 &amp;&amp; IS_XML_CHARS(chars))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>xml_namespace_str</name><index>[]</index></name> <init>= <expr>"http://www.w3.org/XML/1998/namespace"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>xmlns_namespace_str</name><index>[]</index></name> <init>= <expr>"http://www.w3.org/2000/xmlns/"</expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>JSXMLQName</name> *</type>
<name>ParseNodeToQName</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSParseNode</name> *</type><name>pn</name></decl></param>, <param><decl><type><name>JSXMLArray</name> *</type><name>inScopeNSes</name></decl></param>,
                 <param><decl><type><name>JSBool</name></type> <name>isAttributeName</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>, *<decl><type ref="prev"/><name>uri</name></decl>, *<decl><type ref="prev"/><name>prefix</name></decl>, *<decl><type ref="prev"/><name>localName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>jschar</name> *</type><name>start</name></decl>, *<decl><type ref="prev"/><name>limit</name></decl>, *<decl><type ref="prev"/><name>colon</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>pn</name>-&gt;<name>pn_arity</name></name> == <name>PN_NULLARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name> = <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name><name>pn</name>-&gt;<name>pn_atom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>length</name> = <call><name>JSSTRING_LENGTH</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>start</name> = <call><name>JSSTRING_CHARS</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>length</name> != 0 &amp;&amp; *<name>start</name> != '@'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>length</name> != 1 || *<name>start</name> != '*'</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>uri</name> = <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>limit</name> = <name>start</name> + <name>length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>colon</name> = <call><name>js_strchr_limit</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr>':'</expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>colon</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>offset</name> = <call><name>PTRDIFF</name><argument_list>(<argument><expr><name>colon</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>jschar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>prefix</name> = <call><name>js_NewDependentString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>prefix</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>

        <if>if <condition>(<expr><call><name>STARTS_WITH_XML</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>offset</name> == 3</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>uri</name> = <call><name>JS_InternString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml_namespace_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>uri</name></expr>)</condition><then>
                    <return>return <expr><name>NULL</name></expr>;</return></then></if>
            }</block></then> <else>else <if>if <condition>(<expr><name>offset</name> == 5 &amp;&amp; <call><name>HAS_NS_AFTER_XML</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>uri</name> = <call><name>JS_InternString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xmlns_namespace_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>uri</name></expr>)</condition><then>
                    <return>return <expr><name>NULL</name></expr>;</return></then></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>uri</name> = <name>NULL</name></expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>uri</name> = <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name> = <name><name>inScopeNSes</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
            <while>while <condition>(<expr><name>n</name> != 0</expr>)</condition> <block>{
                <expr_stmt><expr>--<name>n</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ns</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr><name>inScopeNSes</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>ns</name>-&gt;<name>prefix</name></name> &amp;&amp; <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>prefix</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>uri</name> = <name><name>ns</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></while>
        }</block></else></if>

        <if>if <condition>(<expr>!<name>uri</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>js_ReportCompileErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pn</name></expr></argument>,
                                        <argument><expr><name>JSREPORT_PN</name> | <name>JSREPORT_ERROR</name></expr></argument>,
                                        <argument><expr><name>JSMSG_BAD_XML_NAMESPACE</name></expr></argument>,
                                        <argument><expr><call><name>js_ValueToPrintableString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>,
                                            <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>localName</name> = <call><name>js_NewStringCopyN</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>colon</name> + 1</expr></argument>, <argument><expr><name>length</name> - (<name>offset</name> + 1)</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>localName</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr><name>isAttributeName</name></expr>)</condition><then> <block>{
            <comment type="block">/*
             * An unprefixed attribute is not in any namespace, so set prefix
             * as well as uri to the empty string.
             */</comment>
            <expr_stmt><expr><name>prefix</name> = <name>uri</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="block">/*
             * Loop from back to front looking for the closest declared default
             * namespace.
             */</comment>
            <expr_stmt><expr><name>n</name> = <name><name>inScopeNSes</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
            <while>while <condition>(<expr><name>n</name> != 0</expr>)</condition> <block>{
                <expr_stmt><expr>--<name>n</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ns</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr><name>inScopeNSes</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name><name>ns</name>-&gt;<name>prefix</name></name> || <call><name>IS_EMPTY</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>uri</name> = <name><name>ns</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></while>
            <expr_stmt><expr><name>prefix</name> = <call><name>IS_EMPTY</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> ? <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name> : <name>NULL</name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>localName</name> = <name>str</name></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><call><name>js_NewXMLQName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>localName</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSString</name> *</type>
<name>ChompXMLWhitespace</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>newlength</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>jschar</name> *</type><name>cp</name></decl>, *<decl><type ref="prev"/><name>start</name></decl>, *<decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jschar</name></type> <name>c</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>length</name> = <call><name>JSSTRING_LENGTH</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>cp</name> = <name>start</name> = <call><name>JSSTRING_CHARS</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>, <expr><name>end</name> = <name>cp</name> + <name>length</name></expr>;</init> <condition><expr><name>cp</name> &lt; <name>end</name></expr>;</condition> <incr><expr><name>cp</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>c</name> = *<name>cp</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>JS_ISXMLSPACE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <break>break;</break></then></if>
    }</block></for>
    <while>while <condition>(<expr><name>end</name> &gt; <name>cp</name></expr>)</condition> <block>{
        <expr_stmt><expr><name>c</name> = <name><name>end</name><index>[<expr>-1</expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>JS_ISXMLSPACE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <break>break;</break></then></if>
        <expr_stmt><expr>--<name>end</name></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>newlength</name> = <call><name>PTRDIFF</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>jschar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>newlength</name> == <name>length</name></expr>)</condition><then>
        <return>return <expr><name>str</name></expr>;</return></then></if>
    <expr_stmt><expr><name>offset</name> = <call><name>PTRDIFF</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>jschar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_NewDependentString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>newlength</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSXML</name> *</type>
<name>ParseNodeToXML</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSParseNode</name> *</type><name>pn</name></decl></param>, <param><decl><type><name>JSXMLArray</name> *</type><name>inScopeNSes</name></decl></param>,
               <param><decl><type><name>uintN</name></type> <name>flags</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>, *<decl><type ref="prev"/><name>attr</name></decl>, *<decl><type ref="prev"/><name>attrj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSParseNode</name> *</type><name>pn2</name></decl>, *<decl><type ref="prev"/><name>pn3</name></decl>, *<decl><type ref="prev"/><name>head</name></decl>, **<decl><type ref="prev"/><name>pnp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>, *<decl><type ref="prev"/><name>attrjqn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLClass</name></type> <name>xml_class</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>stackDummy</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>JS_CHECK_STACK_SIZE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>stackDummy</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>js_ReportCompileErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pn</name></expr></argument>, <argument><expr><name>JSREPORT_PN</name> | <name>JSREPORT_ERROR</name></expr></argument>,
                                    <argument><expr><name>JSMSG_OVER_RECURSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PN2X_SKIP_CHILD</name></cpp:macro> <cpp:value>((JSXML *) 1)</cpp:value></cpp:define>

    <comment type="block">/*
     * Cases return early to avoid common code that gets an outermost xml's
     * object, which protects GC-things owned by xml and its descendants from
     * garbage collection.
     */</comment>
    <expr_stmt><expr><name>xml</name> = <name>NULL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>js_EnterLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <switch>switch <condition>(<expr><name><name>pn</name>-&gt;<name>pn_type</name></name></expr>)</condition> <block>{
      <case>case <expr><name>TOK_XMLELEM</name></expr>:
        <expr_stmt><expr><name>length</name> = <name><name>inScopeNSes</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pn2</name> = <name><name>pn</name>-&gt;<name>pn_head</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>xml</name> = <call><name>ParseNodeToXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pn2</name></expr></argument>, <argument><expr><name>inScopeNSes</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
            <goto>goto <name>fail</name>;</goto></then></if>

        <expr_stmt><expr><name>flags</name> &amp;= ~<name>XSF_PRECOMPILED_ROOT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> = <name><name>pn</name>-&gt;<name>pn_count</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>n</name> &gt;= 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> -= 2</expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>XMLArraySetCapacity</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>fail</name>;</goto></then></if>

        <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
        <while>while <condition>(<expr>(<name>pn2</name> = <name><name>pn2</name>-&gt;<name>pn_next</name></name>) != <name>NULL</name></expr>)</condition> <block>{
            <if>if <condition>(<expr>!<name><name>pn2</name>-&gt;<name>pn_next</name></name></expr>)</condition><then> <block>{
                <comment type="block">/* Don't append the end tag! */</comment>
                <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>pn2</name>-&gt;<name>pn_type</name></name> == <name>TOK_XMLETAGO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>

            <if>if <condition>(<expr>(<name>flags</name> &amp; <name>XSF_IGNORE_WHITESPACE</name>) &amp;&amp;
                <name>n</name> &gt; 1 &amp;&amp; <name><name>pn2</name>-&gt;<name>pn_type</name></name> == <name>TOK_XMLSPACE</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>--<name>n</name></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>

            <expr_stmt><expr><name>kid</name> = <call><name>ParseNodeToXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pn2</name></expr></argument>, <argument><expr><name>inScopeNSes</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kid</name> == <name>PN2X_SKIP_CHILD</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>--<name>n</name></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>

            <if>if <condition>(<expr>!<name>kid</name></expr>)</condition><then>
                <goto>goto <name>fail</name>;</goto></then></if>

            <comment type="block">/* Store kid in xml right away, to protect it from GC. */</comment>
            <expr_stmt><expr><call><name>XMLARRAY_SET_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>kid</name>-&gt;<name>parent</name></name> = <name>xml</name></expr>;</expr_stmt>
            <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>

            <comment type="block">/* XXX where is this documented in an XML spec, or in E4X? */</comment>
            <if>if <condition>(<expr>(<name>flags</name> &amp; <name>XSF_IGNORE_WHITESPACE</name>) &amp;&amp;
                <name>n</name> &gt; 1 &amp;&amp; <name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_TEXT</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>str</name> = <call><name>ChompXMLWhitespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>kid</name>-&gt;<name>xml_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
                    <goto>goto <name>fail</name>;</goto></then></if>
                <expr_stmt><expr><name><name>kid</name>-&gt;<name>xml_value</name></name> = <name>str</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>

        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>i</name> == <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>n</name> &lt; <name><name>pn</name>-&gt;<name>pn_count</name></name> - 2</expr>)</condition><then>
            <expr_stmt><expr><call><name>XMLArrayTrim</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name>XMLARRAY_TRUNCATE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>inScopeNSes</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      </case><case>case <expr><name>TOK_XMLLIST</name></expr>:
        <expr_stmt><expr><name>xml</name> = <call><name>js_NewXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
            <goto>goto <name>fail</name>;</goto></then></if>

        <expr_stmt><expr><name>n</name> = <name><name>pn</name>-&gt;<name>pn_count</name></name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>XMLArraySetCapacity</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>fail</name>;</goto></then></if>

        <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
        <for>for (<init><expr><name>pn2</name> = <name><name>pn</name>-&gt;<name>pn_head</name></name></expr>;</init> <condition><expr><name>pn2</name></expr>;</condition> <incr><expr><name>pn2</name> = <name><name>pn2</name>-&gt;<name>pn_next</name></name></expr></incr>) <block>{
            <comment type="block">/*
             * Always ignore insignificant whitespace in lists -- we shouldn't
             * condition this on an XML.ignoreWhitespace setting when the list
             * constructor is XMLList (note XML/XMLList unification hazard).
             */</comment>
            <if>if <condition>(<expr><name><name>pn2</name>-&gt;<name>pn_type</name></name> == <name>TOK_XMLSPACE</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>--<name>n</name></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>

            <expr_stmt><expr><name>kid</name> = <call><name>ParseNodeToXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pn2</name></expr></argument>, <argument><expr><name>inScopeNSes</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kid</name> == <name>PN2X_SKIP_CHILD</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>--<name>n</name></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>

            <if>if <condition>(<expr>!<name>kid</name></expr>)</condition><then>
                <goto>goto <name>fail</name>;</goto></then></if>

            <expr_stmt><expr><call><name>XMLARRAY_SET_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
        }</block></for>

        <if>if <condition>(<expr><name>n</name> &lt; <name><name>pn</name>-&gt;<name>pn_count</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>XMLArrayTrim</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <break>break;</break>

      </case><case>case <expr><name>TOK_XMLSTAGO</name></expr>:
      </case><case>case <expr><name>TOK_XMLPTAGC</name></expr>:
        <expr_stmt><expr><name>length</name> = <name><name>inScopeNSes</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pn2</name> = <name><name>pn</name>-&gt;<name>pn_head</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>pn2</name>-&gt;<name>pn_type</name></name> == <name>TOK_XMLNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>pn2</name>-&gt;<name>pn_arity</name></name> == <name>PN_LIST</name></expr>)</condition><then>
            <goto>goto <name>syntax</name>;</goto></then></if>

        <expr_stmt><expr><name>xml</name> = <call><name>js_NewXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_ELEMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
            <goto>goto <name>fail</name>;</goto></then></if>

        <comment type="block">/* First pass: check syntax and process namespace declarations. */</comment>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>pn</name>-&gt;<name>pn_count</name></name> &gt;= 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> = <name><name>pn</name>-&gt;<name>pn_count</name></name> - 1</expr>;</expr_stmt>
        <expr_stmt><expr><name>pnp</name> = &amp;<name><name>pn2</name>-&gt;<name>pn_next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>head</name> = *<name>pnp</name></expr>;</expr_stmt>
        <while>while <condition>(<expr>(<name>pn2</name> = *<name>pnp</name>) != <name>NULL</name></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>jschar</name> *</type><name>chars</name></decl>;</decl_stmt>

            <if>if <condition>(<expr><name><name>pn2</name>-&gt;<name>pn_type</name></name> != <name>TOK_XMLNAME</name> || <name><name>pn2</name>-&gt;<name>pn_arity</name></name> != <name>PN_NULLARY</name></expr>)</condition><then>
                <goto>goto <name>syntax</name>;</goto></then></if>

            <comment type="block">/* Enforce "Well-formedness constraint: Unique Att Spec". */</comment>
            <for>for (<init><expr><name>pn3</name> = <name>head</name></expr>;</init> <condition><expr><name>pn3</name> != <name>pn2</name></expr>;</condition> <incr><expr><name>pn3</name> = <name><name>pn3</name>-&gt;<name>pn_next</name>-&gt;<name>pn_next</name></name></expr></incr>) <block>{
                <if>if <condition>(<expr><name><name>pn3</name>-&gt;<name>pn_atom</name></name> == <name><name>pn2</name>-&gt;<name>pn_atom</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>js_ReportCompileErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pn2</name></expr></argument>,
                                                <argument><expr><name>JSREPORT_PN</name> | <name>JSREPORT_ERROR</name></expr></argument>,
                                                <argument><expr><name>JSMSG_DUPLICATE_XML_ATTR</name></expr></argument>,
                                                <argument><expr><call><name>js_ValueToPrintableString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>,
                                                    <argument><expr><call><name>ATOM_KEY</name><argument_list>(<argument><expr><name><name>pn2</name>-&gt;<name>pn_atom</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto>goto <name>fail</name>;</goto>
                }</block></then></if>
            }</block></for>

            <expr_stmt><expr><name>str</name> = <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name><name>pn2</name>-&gt;<name>pn_atom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>pn2</name> = <name><name>pn2</name>-&gt;<name>pn_next</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>pn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>pn2</name>-&gt;<name>pn_type</name></name> != <name>TOK_XMLATTR</name></expr>)</condition><then>
                <goto>goto <name>syntax</name>;</goto></then></if>

            <expr_stmt><expr><name>length</name> = <call><name>JSSTRING_LENGTH</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>chars</name> = <call><name>JSSTRING_CHARS</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>length</name> &gt;= 5 &amp;&amp;
                <call><name>IS_XMLNS_CHARS</name><argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></call> &amp;&amp;
                (<name>length</name> == 5 || <name><name>chars</name><index>[<expr>5</expr>]</index></name> == ':')</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>JSString</name> *</type><name>uri</name></decl>, *<decl><type ref="prev"/><name>prefix</name></decl>;</decl_stmt>

                <expr_stmt><expr><name>uri</name> = <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name><name>pn2</name>-&gt;<name>pn_atom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>length</name> == 5</expr>)</condition><then> <block>{
                    <comment type="block">/* 10.3.2.1. Step 6(h)(i)(1)(a). */</comment>
                    <expr_stmt><expr><name>prefix</name> = <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>prefix</name> = <call><name>js_NewStringCopyN</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>chars</name> + 6</expr></argument>, <argument><expr><name>length</name> - 6</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<name>prefix</name></expr>)</condition><then>
                        <goto>goto <name>fail</name>;</goto></then></if>
                }</block></else></if>

                <comment type="block">/*
                 * Once the new ns is appended to xml-&gt;xml_namespaces, it is
                 * protected from GC by the object that owns xml -- which is
                 * either xml-&gt;object if outermost, or the object owning xml's
                 * oldest ancestor if !outermost.
                 */</comment>
                <expr_stmt><expr><name>ns</name> = <call><name>js_NewXMLNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then>
                    <goto>goto <name>fail</name>;</goto></then></if>

                <comment type="block">/*
                 * Don't add a namespace that's already in scope.  If someone
                 * extracts a child property from its parent via [[Get]], then
                 * we enforce the invariant, noted many times in ECMA-357, that
                 * the child's namespaces form a possibly-improper superset of
                 * its ancestors' namespaces.
                 */</comment>
                <if>if <condition>(<expr>!<call><name>XMLARRAY_HAS_MEMBER</name><argument_list>(<argument><expr><name>inScopeNSes</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>namespace_identity</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr>!<call><name>XMLARRAY_APPEND</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>inScopeNSes</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call> ||
                        !<call><name>XMLARRAY_APPEND</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <goto>goto <name>fail</name>;</goto>
                    }</block></then></if>
                }</block></then></if>

                <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>n</name> &gt;= 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>n</name> -= 2</expr>;</expr_stmt>
                <expr_stmt><expr>*<name>pnp</name> = <name><name>pn2</name>-&gt;<name>pn_next</name></name></expr>;</expr_stmt>
                <comment type="block">/* XXXbe recycle pn2 */</comment>
                <continue>continue;</continue>
            }</block></then></if>

            <expr_stmt><expr><name>pnp</name> = &amp;<name><name>pn2</name>-&gt;<name>pn_next</name></name></expr>;</expr_stmt>
        }</block></while>

        <comment type="block">/*
         * If called from js_ParseNodeToXMLObject, emulate the effect of the
         * &lt;parent xmlns='%s'&gt;...&lt;/parent&gt; wrapping done by "ToXML Applied to
         * the String Type" (ECMA-357 10.3.1).
         */</comment>
        <if>if <condition>(<expr><name>flags</name> &amp; <name>XSF_PRECOMPILED_ROOT</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>length</name> &gt;= 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ns</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr><name>inScopeNSes</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>XMLARRAY_HAS_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr><name>ns</name></expr></argument>,
                                           <argument><expr><name>namespace_identity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ns</name> = <call><name>js_NewXMLNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>ns</name>-&gt;<name>prefix</name></name></expr></argument>, <argument><expr><name><name>ns</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then>
                <goto>goto <name>fail</name>;</goto></then></if>
            <if>if <condition>(<expr>!<call><name>XMLARRAY_APPEND</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <goto>goto <name>fail</name>;</goto></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name>XMLArrayTrim</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Second pass: process tag name and attributes, using namespaces. */</comment>
        <expr_stmt><expr><name>pn2</name> = <name><name>pn</name>-&gt;<name>pn_head</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>qn</name> = <call><name>ParseNodeToQName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pn2</name></expr></argument>, <argument><expr><name>inScopeNSes</name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>qn</name></expr>)</condition><then>
            <goto>goto <name>fail</name>;</goto></then></if>
        <expr_stmt><expr><name><name>xml</name>-&gt;<name>name</name></name> = <name>qn</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>(<name>n</name> &amp; 1) == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> &gt;&gt;= 1</expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>XMLArraySetCapacity</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_attrs</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>fail</name>;</goto></then></if>

        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr>(<name>pn2</name> = <name><name>pn2</name>-&gt;<name>pn_next</name></name>) != <name>NULL</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>qn</name> = <call><name>ParseNodeToQName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pn2</name></expr></argument>, <argument><expr><name>inScopeNSes</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>qn</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>xml</name>-&gt;<name>xml_attrs</name>.<name>length</name></name> = <name>i</name></expr>;</expr_stmt>
                <goto>goto <name>fail</name>;</goto>
            }</block></then></if>

            <comment type="block">/*
             * Enforce "Well-formedness constraint: Unique Att Spec", part 2:
             * this time checking local name and namespace URI.
             */</comment>
            <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>i</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>attrj</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_attrs</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>attrjqn</name> = <name><name>attrj</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>attrjqn</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>qn</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call> &amp;&amp;
                    <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>attrjqn</name>-&gt;<name>localName</name></name></expr></argument>, <argument><expr><name><name>qn</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>js_ReportCompileErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pn2</name></expr></argument>,
                                                <argument><expr><name>JSREPORT_PN</name> | <name>JSREPORT_ERROR</name></expr></argument>,
                                                <argument><expr><name>JSMSG_DUPLICATE_XML_ATTR</name></expr></argument>,
                                                <argument><expr><call><name>js_ValueToPrintableString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>,
                                                    <argument><expr><call><name>ATOM_KEY</name><argument_list>(<argument><expr><name><name>pn2</name>-&gt;<name>pn_atom</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto>goto <name>fail</name>;</goto>
                }</block></then></if>
            }</block></for>

            <expr_stmt><expr><name>pn2</name> = <name><name>pn2</name>-&gt;<name>pn_next</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>pn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>pn2</name>-&gt;<name>pn_type</name></name> == <name>TOK_XMLATTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>attr</name> = <call><name>js_NewXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>attr</name></expr>)</condition><then>
                <goto>goto <name>fail</name>;</goto></then></if>

            <expr_stmt><expr><call><name>XMLARRAY_SET_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_attrs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>attr</name>-&gt;<name>parent</name></name> = <name>xml</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>attr</name>-&gt;<name>name</name></name> = <name>qn</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>attr</name>-&gt;<name>xml_value</name></name> = <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name><name>pn2</name>-&gt;<name>pn_atom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="block">/* Point tag closes its own namespace scope. */</comment>
        <if>if <condition>(<expr><name><name>pn</name>-&gt;<name>pn_type</name></name> == <name>TOK_XMLPTAGC</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>XMLARRAY_TRUNCATE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>inScopeNSes</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <break>break;</break>

      </case><case>case <expr><name>TOK_XMLSPACE</name></expr>:
      </case><case>case <expr><name>TOK_XMLTEXT</name></expr>:
      </case><case>case <expr><name>TOK_XMLCDATA</name></expr>:
      </case><case>case <expr><name>TOK_XMLCOMMENT</name></expr>:
      </case><case>case <expr><name>TOK_XMLPI</name></expr>:
        <expr_stmt><expr><name>str</name> = <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name><name>pn</name>-&gt;<name>pn_atom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>qn</name> = <name>NULL</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>pn</name>-&gt;<name>pn_type</name></name> == <name>TOK_XMLCOMMENT</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>flags</name> &amp; <name>XSF_IGNORE_COMMENTS</name></expr>)</condition><then>
                <goto>goto <name>skip_child</name>;</goto></then></if>
            <expr_stmt><expr><name>xml_class</name> = <name>JSXML_CLASS_COMMENT</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name><name>pn</name>-&gt;<name>pn_type</name></name> == <name>TOK_XMLPI</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>IS_XML</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>js_ReportCompileErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pn</name></expr></argument>,
                                            <argument><expr><name>JSREPORT_PN</name> | <name>JSREPORT_ERROR</name></expr></argument>,
                                            <argument><expr><name>JSMSG_RESERVED_ID</name></expr></argument>,
                                            <argument><expr><call><name>js_ValueToPrintableString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>,
                                                <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>fail</name>;</goto>
            }</block></then></if>

            <if>if <condition>(<expr><name>flags</name> &amp; <name>XSF_IGNORE_PROCESSING_INSTRUCTIONS</name></expr>)</condition><then>
                <goto>goto <name>skip_child</name>;</goto></then></if>

            <expr_stmt><expr><name>qn</name> = <call><name>ParseNodeToQName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pn</name></expr></argument>, <argument><expr><name>inScopeNSes</name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>qn</name></expr>)</condition><then>
                <goto>goto <name>fail</name>;</goto></then></if>

            <expr_stmt><expr><name>str</name> = <name><name>pn</name>-&gt;<name>pn_atom2</name></name>
                  ? <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name><name>pn</name>-&gt;<name>pn_atom2</name></name></expr></argument>)</argument_list></call>
                  : <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xml_class</name> = <name>JSXML_CLASS_PROCESSING_INSTRUCTION</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="block">/* CDATA section content, or element text. */</comment>
            <expr_stmt><expr><name>xml_class</name> = <name>JSXML_CLASS_TEXT</name></expr>;</expr_stmt>
        }</block></else></if></else></if>

        <expr_stmt><expr><name>xml</name> = <call><name>js_NewXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
            <goto>goto <name>fail</name>;</goto></then></if>
        <expr_stmt><expr><name><name>xml</name>-&gt;<name>name</name></name> = <name>qn</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>pn</name>-&gt;<name>pn_type</name></name> == <name>TOK_XMLSPACE</name></expr>)</condition><then>
            <expr_stmt><expr><name><name>xml</name>-&gt;<name>xml_flags</name></name> |= <name>XMLF_WHITESPACE_TEXT</name></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name><name>xml</name>-&gt;<name>xml_value</name></name> = <name>str</name></expr>;</expr_stmt>
        <break>break;</break>

      </case><default>default:
        <goto>goto <name>syntax</name>;</goto>
    </default>}</block></switch>

    <expr_stmt><expr><call><name>js_LeaveLocalRootScopeWithResult</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>jsval</name>) <name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>flags</name> &amp; <name>XSF_PRECOMPILED_ROOT</name>) &amp;&amp; !<call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><name>xml</name></expr>;</return>

<label><name>skip_child</name>:</label>
    <expr_stmt><expr><call><name>js_LeaveLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>PN2X_SKIP_CHILD</name></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PN2X_SKIP_CHILD</name></cpp:undef>

<label><name>syntax</name>:</label>
    <expr_stmt><expr><call><name>js_ReportCompileErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pn</name></expr></argument>, <argument><expr><name>JSREPORT_PN</name> | <name>JSREPORT_ERROR</name></expr></argument>,
                                <argument><expr><name>JSMSG_BAD_XML_MARKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
    <expr_stmt><expr><call><name>js_LeaveLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * XML helper, object-ops, and library functions.  We start with the helpers,
 * in ECMA-357 order, but merging XML (9.1) and XMLList (9.2) helpers.
 */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>GetXMLSetting</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>js_FindClassObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>INT_TO_JSID</name><argument_list>(<argument><expr><name>JSProto_XML</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>VALUE_IS_FUNCTION</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>vp</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name>JS_GetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>FillSettingsCache</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>isSet</name></decl>;</decl_stmt>

    <comment type="block">/* Note: XML_PRETTY_INDENT is not a boolean setting. */</comment>
    <for>for (<init><expr><name>i</name> = <name>XML_IGNORE_COMMENTS</name></expr>;</init> <condition><expr><name>i</name> &lt; <name>XML_PRETTY_INDENT</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>name</name> = <name><name>xml_static_props</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>GetXMLSetting</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call> || !<call><name>js_ValueToBoolean</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr>&amp;<name>isSet</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <if>if <condition>(<expr><name>isSet</name></expr>)</condition><then>
            <expr_stmt><expr><name><name>cx</name>-&gt;<name>xmlSettingFlags</name></name> |= <call><name>JS_BIT</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name><name>cx</name>-&gt;<name>xmlSettingFlags</name></name> &amp;= ~<call><name>JS_BIT</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></for>

    <expr_stmt><expr><name><name>cx</name>-&gt;<name>xmlSettingFlags</name></name> |= <name>XSF_CACHE_VALID</name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>GetBooleanXMLSetting</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>JSBool</name> *</type><name>bp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!(<name><name>cx</name>-&gt;<name>xmlSettingFlags</name></name> &amp; <name>XSF_CACHE_VALID</name>) &amp;&amp; !<call><name>FillSettingsCache</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>xml_static_props</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>xml_static_props</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>bp</name> = (<name><name>cx</name>-&gt;<name>xmlSettingFlags</name></name> &amp; <call><name>JS_BIT</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>) != 0</expr>;</expr_stmt>
            <return>return <expr><name>JS_TRUE</name></expr>;</return>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr>*<name>bp</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>GetUint32XMLSetting</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>uint32</name> *</type><name>uip</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>

    <return>return <expr><call><name>GetXMLSetting</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>js_ValueToECMAUint32</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>uip</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>GetXMLSettingFlags</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uintN</name> *</type><name>flagsp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>flag</name></decl>;</decl_stmt>

    <comment type="block">/* Just get the first flag to validate the setting flags cache. */</comment>
    <if>if <condition>(<expr>!<call><name>GetBooleanXMLSetting</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_ignoreComments_str</name></expr></argument>, <argument><expr>&amp;<name>flag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>flagsp</name> = <name><name>cx</name>-&gt;<name>xmlSettingFlags</name></name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSXML</name> *</type>
<name>ParseXMLSource</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>src</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>nsval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>urilen</name></decl>, <decl><type ref="prev"/><name>srclen</name></decl>, <decl><type ref="prev"/><name>length</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>dstlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jschar</name> *</type><name>chars</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>jschar</name> *</type><name>srcp</name></decl>, *<decl><type ref="prev"/><name>endp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> *</type><name>mark</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSTokenStream</name> *</type><name>ts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uintN</name></type> <name>lineno</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSStackFrame</name> *</type><name>fp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSOp</name></type> <name>op</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSParseNode</name> *</type><name>pn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArray</name></type> <name>nsarray</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uintN</name></type> <name>flags</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>prefix</name><index>[]</index></name> <init>= <expr>"&lt;parent xmlns='"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>middle</name><index>[]</index></name> <init>= <expr>"'&gt;"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>suffix</name><index>[]</index></name> <init>= <expr>"&lt;/parent&gt;"</expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>constrlen</name><parameter_list>(<param><type><name>constr</name></type></param>)</parameter_list></cpp:macro>   <cpp:value>(sizeof(constr) - 1)</cpp:value></cpp:define>

    <if>if <condition>(<expr>!<call><name>js_GetDefaultXMLNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>nsval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name>ns</name> = (<name>JSXMLNamespace</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>nsval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>urilen</name> = <call><name>JSSTRING_LENGTH</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>srclen</name> = <call><name>JSSTRING_LENGTH</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>length</name> = <call><name>constrlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call> + <name>urilen</name> + <call><name>constrlen</name><argument_list>(<argument><expr><name>middle</name></expr></argument>)</argument_list></call> + <name>srclen</name> +
             <call><name>constrlen</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>chars</name> = (<name>jschar</name> *) <call><name>JS_malloc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>length</name> + 1) * <sizeof>sizeof<argument_list>(<argument><expr><name>jschar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>chars</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>dstlen</name> = <name>length</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_InflateStringToBuffer</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><call><name>constrlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr>&amp;<name>dstlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> = <name>dstlen</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_strncpy</name><argument_list>(<argument><expr><name>chars</name> + <name>offset</name></expr></argument>, <argument><expr><call><name>JSSTRING_CHARS</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>urilen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> += <name>urilen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>dstlen</name> = <name>length</name> - <name>offset</name> + 1</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_InflateStringToBuffer</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><call><name>constrlen</name><argument_list>(<argument><expr><name>middle</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>chars</name> + <name>offset</name></expr></argument>,
                             <argument><expr>&amp;<name>dstlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> += <name>dstlen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>srcp</name> = <call><name>JSSTRING_CHARS</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_strncpy</name><argument_list>(<argument><expr><name>chars</name> + <name>offset</name></expr></argument>, <argument><expr><name>srcp</name></expr></argument>, <argument><expr><name>srclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> += <name>srclen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>dstlen</name> = <name>length</name> - <name>offset</name> + 1</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_InflateStringToBuffer</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><call><name>constrlen</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>chars</name> + <name>offset</name></expr></argument>,
                             <argument><expr>&amp;<name>dstlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>chars</name> <index>[<expr><name>offset</name> + <name>dstlen</name></expr>]</index></name> = 0</expr>;</expr_stmt>

    <expr_stmt><expr><name>xml</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mark</name> = <call><name>JS_ARENA_MARK</name><argument_list>(<argument><expr>&amp;<name><name>cx</name>-&gt;<name>tempPool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ts</name> = <call><name>js_NewBufferTokenStream</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ts</name></expr>)</condition><then>
        <goto>goto <name>out</name>;</goto></then></if>
    <for>for (<init><expr><name>fp</name> = <name><name>cx</name>-&gt;<name>fp</name></name></expr>;</init> <condition><expr><name>fp</name> &amp;&amp; !<name><name>fp</name>-&gt;<name>pc</name></name></expr>;</condition> <incr><expr><name>fp</name> = <name><name>fp</name>-&gt;<name>down</name></name></expr></incr>)
        <continue>continue;</continue></for>
    <if>if <condition>(<expr><name>fp</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>op</name> = (<name>JSOp</name>) *<name><name>fp</name>-&gt;<name>pc</name></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>op</name> == <name>JSOP_TOXML</name> || <name>op</name> == <name>JSOP_TOXMLLIST</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>ts</name>-&gt;<name>filename</name></name> = <name><name>fp</name>-&gt;<name>script</name>-&gt;<name>filename</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>lineno</name> = <call><name>js_PCToLineNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>fp</name>-&gt;<name>script</name></name></expr></argument>, <argument><expr><name><name>fp</name>-&gt;<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><expr><name>endp</name> = <name>srcp</name> + <name>srclen</name></expr>;</init> <condition><expr><name>srcp</name> &lt; <name>endp</name></expr>;</condition> <incr><expr><name>srcp</name>++</expr></incr>)
                <if>if <condition>(<expr>*<name>srcp</name> == '\n'</expr>)</condition><then>
                    <expr_stmt><expr>--<name>lineno</name></expr>;</expr_stmt></then></if></for>
            <expr_stmt><expr><name><name>ts</name>-&gt;<name>lineno</name></name> = <name>lineno</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>JS_KEEP_ATOMS</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pn</name> = <call><name>js_ParseXMLTokenStream</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>cx</name>-&gt;<name>fp</name>-&gt;<name>scopeChain</name></name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>pn</name> &amp;&amp; <call><name>XMLArrayInit</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>nsarray</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>GetXMLSettingFlags</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>xml</name> = <call><name>ParseNodeToXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pn</name></expr></argument>, <argument><expr>&amp;<name>nsarray</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><call><name>XMLArrayFinish</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>nsarray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>JS_UNKEEP_ATOMS</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>
    <expr_stmt><expr><call><name>JS_ARENA_RELEASE</name><argument_list>(<argument><expr>&amp;<name><name>cx</name>-&gt;<name>tempPool</name></name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>xml</name></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>constrlen</name></cpp:undef>
}</block></function>

<comment type="block">/*
 * Errata in 10.3.1, 10.4.1, and 13.4.4.24 (at least).
 *
 * 10.3.1 Step 6(a) fails to NOTE that implementations that do not enforce
 * the constraint:
 *
 *     for all x belonging to XML:
 *         x.[[InScopeNamespaces]] &gt;= x.[[Parent]].[[InScopeNamespaces]]
 *
 * must union x.[[InScopeNamespaces]] into x[0].[[InScopeNamespaces]] here
 * (in new sub-step 6(a), renumbering the others to (b) and (c)).
 *
 * Same goes for 10.4.1 Step 7(a).
 *
 * In order for XML.prototype.namespaceDeclarations() to work correctly, the
 * default namespace thereby unioned into x[0].[[InScopeNamespaces]] must be
 * flagged as not declared, so that 13.4.4.24 Step 8(a) can exclude all such
 * undeclared namespaces associated with x not belonging to ancestorNS.
 */</comment>
<function><type><specifier>static</specifier> <name>JSXML</name> *</type>
<name>OrphanXMLChild</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>i</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ns</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>xml</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ns</name> || !<name>xml</name></expr>)</condition><then>
        <return>return <expr><name>xml</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name>XMLARRAY_APPEND</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>ns</name>-&gt;<name>declared</name></name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>xml</name>-&gt;<name>parent</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>xml</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSObject</name> *</type>
<name>ToXML</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSClass</name> *</type><name>clasp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>length</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> || <call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>bad</name>;</goto></then></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>OBJECT_IS_XML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name> != 1</expr>)</condition><then>
                    <goto>goto <name>bad</name>;</goto></then></if>
                <expr_stmt><expr><name>xml</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>xml</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>xml</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>
            }</block></then></if>
            <return>return <expr><name>obj</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>clasp</name> = <call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>clasp</name>-&gt;<name>flags</name></name> &amp; <name>JSCLASS_DOCUMENT_OBSERVER</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>clasp</name> != &amp;<name>js_StringClass</name> &amp;&amp;
            <name>clasp</name> != &amp;<name>js_NumberClass</name> &amp;&amp;
            <name>clasp</name> != &amp;<name>js_BooleanClass</name></expr>)</condition><then> <block>{
            <goto>goto <name>bad</name>;</goto>
        }</block></then></if>
    }</block></else></if>

    <expr_stmt><expr><name>str</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr><call><name>IS_EMPTY</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>length</name> = 0</expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__GNUC__</name></cpp:ifdef>         <comment type="block">/* suppress bogus gcc warnings */</comment>
        <expr_stmt><expr><name>xml</name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>xml</name> = <call><name>ParseXMLSource</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name>length</name> = <call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name>length</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>obj</name> = <call><name>js_NewXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
    }</block></then> <else>else <if>if <condition>(<expr><name>length</name> == 1</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>xml</name> = <call><name>OrphanXMLChild</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name>obj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSMSG_SYNTAX_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></else></if></else></if>
    <return>return <expr><name>obj</name></expr>;</return>

<label><name>bad</name>:</label>
    <expr_stmt><expr><call><name>js_ReportValueError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSMSG_BAD_XML_CONVERSION</name></expr></argument>,
                        <argument><expr><name>JSDVG_IGNORE_STACK</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function_decl><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Append</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>list</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>kid</name></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>JSObject</name> *</type>
<name>ToXMLList</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>, *<decl><type ref="prev"/><name>listobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>list</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSClass</name> *</type><name>clasp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> || <call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>bad</name>;</goto></then></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>OBJECT_IS_XML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>listobj</name> = <call><name>js_NewXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>listobj</name></expr>)</condition><then>
                    <return>return <expr><name>NULL</name></expr>;</return></then></if>
                <expr_stmt><expr><name>list</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>listobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <return>return <expr><name>NULL</name></expr>;</return></then></if>
                <return>return <expr><name>listobj</name></expr>;</return>
            }</block></then></if>
            <return>return <expr><name>obj</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>clasp</name> = <call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>clasp</name>-&gt;<name>flags</name></name> &amp; <name>JSCLASS_DOCUMENT_OBSERVER</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>clasp</name> != &amp;<name>js_StringClass</name> &amp;&amp;
            <name>clasp</name> != &amp;<name>js_NumberClass</name> &amp;&amp;
            <name>clasp</name> != &amp;<name>js_BooleanClass</name></expr>)</condition><then> <block>{
            <goto>goto <name>bad</name>;</goto>
        }</block></then></if>
    }</block></else></if>

    <expr_stmt><expr><name>str</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr><call><name>IS_EMPTY</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>xml</name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>length</name> = 0</expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr>!<call><name>js_EnterLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name>xml</name> = <call><name>ParseXMLSource</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>js_LeaveLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>length</name> = <call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name>listobj</name> = <call><name>js_NewXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>listobj</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>list</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>listobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>kid</name> = <call><name>OrphanXMLChild</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>kid</name> || !<call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>listobj</name> = <name>NULL</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
    }</block></then></if>

    <if>if <condition>(<expr><name>xml</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>js_LeaveLocalRootScopeWithResult</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>jsval</name>) <name>listobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>listobj</name></expr>;</return>

<label><name>bad</name>:</label>
    <expr_stmt><expr><call><name>js_ReportValueError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSMSG_BAD_XMLLIST_CONVERSION</name></expr></argument>,
                        <argument><expr><name>JSDVG_IGNORE_STACK</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * ECMA-357 10.2.1 Steps 5-7 pulled out as common subroutines of XMLToXMLString
 * and their library-public js_* counterparts.  The guts of MakeXMLCDataString,
 * MakeXMLCommentString, and MakeXMLPIString are further factored into a common
 * MakeXMLSpecialString subroutine.
 *
 * These functions take ownership of sb-&gt;base, if sb is non-null, in all cases
 * of success or failure.
 */</comment>
<function><type><specifier>static</specifier> <name>JSString</name> *</type>
<name>MakeXMLSpecialString</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSStringBuffer</name> *</type><name>sb</name></decl></param>,
                     <param><decl><type><name>JSString</name> *</type><name>str</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>str2</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>jschar</name> *</type><name>prefix</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>prefixlength</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>jschar</name> *</type><name>suffix</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>suffixlength</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSStringBuffer</name></type> <name>localSB</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>length2</name></decl>, <decl><type ref="prev"/><name>newlength</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jschar</name> *</type><name>bp</name></decl>, *<decl><type ref="prev"/><name>base</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>sb</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>sb</name> = &amp;<name>localSB</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>js_InitStringBuffer</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>length</name> = <call><name>JSSTRING_LENGTH</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>length2</name> = <name>str2</name> ? <call><name>JSSTRING_LENGTH</name><argument_list>(<argument><expr><name>str2</name></expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>newlength</name> = <call><name>STRING_BUFFER_OFFSET</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call> +
                <name>prefixlength</name> + <name>length</name> + ((<name>length2</name> != 0) ? 1 + <name>length2</name> : 0) +
                <name>suffixlength</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>bp</name> = <name>base</name> = (<name>jschar</name> *)
                <call><name>JS_realloc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>sb</name>-&gt;<name>base</name></name></expr></argument>, <argument><expr>(<name>newlength</name> + 1) * <sizeof>sizeof<argument_list>(<argument><expr><name>jschar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>bp</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>js_FinishStringBuffer</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>bp</name> += <call><name>STRING_BUFFER_OFFSET</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_strncpy</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>prefixlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bp</name> += <name>prefixlength</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_strncpy</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><call><name>JSSTRING_CHARS</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bp</name> += <name>length</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>length2</name> != 0</expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>bp</name>++ = (<name>jschar</name>) ' '</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>js_strncpy</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><call><name>JSSTRING_CHARS</name><argument_list>(<argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>length2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bp</name> += <name>length2</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>js_strncpy</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>suffixlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bp</name><index>[<expr><name>suffixlength</name></expr>]</index></name> = 0</expr>;</expr_stmt>

    <expr_stmt><expr><name>str</name> = <call><name>js_NewString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>newlength</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>str</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSString</name> *</type>
<name>MakeXMLCDATAString</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSStringBuffer</name> *</type><name>sb</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>jschar</name></type> <name><name>cdata_prefix_ucNstr</name><index>[]</index></name> <init>= <expr><block>{<expr>'&lt;'</expr>, <expr>'!'</expr>, <expr>'['</expr>,
                                                 <expr>'C'</expr>, <expr>'D'</expr>, <expr>'A'</expr>, <expr>'T'</expr>, <expr>'A'</expr>,
                                                 <expr>'['</expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>jschar</name></type> <name><name>cdata_suffix_ucNstr</name><index>[]</index></name> <init>= <expr><block>{<expr>']'</expr>, <expr>']'</expr>, <expr>'&gt;'</expr>}</block></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>MakeXMLSpecialString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                <argument><expr><name>cdata_prefix_ucNstr</name></expr></argument>, <argument><expr>9</expr></argument>,
                                <argument><expr><name>cdata_suffix_ucNstr</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSString</name> *</type>
<name>MakeXMLCommentString</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSStringBuffer</name> *</type><name>sb</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>jschar</name></type> <name><name>comment_prefix_ucNstr</name><index>[]</index></name> <init>= <expr><block>{<expr>'&lt;'</expr>, <expr>'!'</expr>, <expr>'-'</expr>, <expr>'-'</expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>jschar</name></type> <name><name>comment_suffix_ucNstr</name><index>[]</index></name> <init>= <expr><block>{<expr>'-'</expr>, <expr>'-'</expr>, <expr>'&gt;'</expr>}</block></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>MakeXMLSpecialString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                <argument><expr><name>comment_prefix_ucNstr</name></expr></argument>, <argument><expr>4</expr></argument>,
                                <argument><expr><name>comment_suffix_ucNstr</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSString</name> *</type>
<name>MakeXMLPIString</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSStringBuffer</name> *</type><name>sb</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>name</name></decl></param>,
                <param><decl><type><name>JSString</name> *</type><name>value</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>jschar</name></type> <name><name>pi_prefix_ucNstr</name><index>[]</index></name> <init>= <expr><block>{<expr>'&lt;'</expr>, <expr>'?'</expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>jschar</name></type> <name><name>pi_suffix_ucNstr</name><index>[]</index></name> <init>= <expr><block>{<expr>'?'</expr>, <expr>'&gt;'</expr>}</block></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>MakeXMLSpecialString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>,
                                <argument><expr><name>pi_prefix_ucNstr</name></expr></argument>, <argument><expr>2</expr></argument>,
                                <argument><expr><name>pi_suffix_ucNstr</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
 * ECMA-357 10.2.1 17(d-g) pulled out into a common subroutine that appends
 * equals, a double quote, an attribute value, and a closing double quote.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>AppendAttributeValue</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSStringBuffer</name> *</type><name>sb</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>valstr</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>js_AppendCString</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr>"=\""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>valstr</name> = <call><name>js_EscapeAttributeValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>valstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>valstr</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>STRING_BUFFER_OK</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sb</name>-&gt;<name>base</name></name> = <name>STRING_BUFFER_ERROR_BASE</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>js_AppendJSString</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>valstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_AppendChar</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr>'"'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * ECMA-357 10.2.1.1 EscapeElementValue helper method.
 *
 * This function takes ownership of sb-&gt;base, if sb is non-null, in all cases
 * of success or failure.
 */</comment>
<function><type><specifier>static</specifier> <name>JSString</name> *</type>
<name>EscapeElementValue</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSStringBuffer</name> *</type><name>sb</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>newlength</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>jschar</name> *</type><name>cp</name></decl>, *<decl><type ref="prev"/><name>start</name></decl>, *<decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jschar</name></type> <name>c</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>length</name> = <name>newlength</name> = <call><name>JSSTRING_LENGTH</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>cp</name> = <name>start</name> = <call><name>JSSTRING_CHARS</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>, <expr><name>end</name> = <name>cp</name> + <name>length</name></expr>;</init> <condition><expr><name>cp</name> &lt; <name>end</name></expr>;</condition> <incr><expr><name>cp</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>c</name> = *<name>cp</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>c</name> == '&lt;' || <name>c</name> == '&gt;'</expr>)</condition><then>
            <expr_stmt><expr><name>newlength</name> += 3</expr>;</expr_stmt></then>
        <else>else <if>if <condition>(<expr><name>c</name> == '&amp;'</expr>)</condition><then>
            <expr_stmt><expr><name>newlength</name> += 4</expr>;</expr_stmt></then></if></else></if>

        <if>if <condition>(<expr><name>newlength</name> &lt; <name>length</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
    }</block></for>
    <if>if <condition>(<expr>(<name>sb</name> &amp;&amp; <call><name>STRING_BUFFER_OFFSET</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call> != 0) || <name>newlength</name> &gt; <name>length</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>JSStringBuffer</name></type> <name>localSB</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>sb</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>sb</name> = &amp;<name>localSB</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>js_InitStringBuffer</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>sb</name>-&gt;<name>grow</name></name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>newlength</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <for>for (<init><expr><name>cp</name> = <name>start</name></expr>;</init> <condition><expr><name>cp</name> &lt; <name>end</name></expr>;</condition> <incr><expr><name>cp</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>c</name> = *<name>cp</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>c</name> == '&lt;'</expr>)</condition><then>
                <expr_stmt><expr><call><name>js_AppendCString</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>js_lt_entity_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><name>c</name> == '&gt;'</expr>)</condition><then>
                <expr_stmt><expr><call><name>js_AppendCString</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>js_gt_entity_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><name>c</name> == '&amp;'</expr>)</condition><then>
                <expr_stmt><expr><call><name>js_AppendCString</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>js_amp_entity_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><call><name>js_AppendChar</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if>
        }</block></for>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>STRING_BUFFER_OK</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>str</name> = <call><name>js_NewString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>sb</name>-&gt;<name>base</name></name></expr></argument>, <argument><expr><call><name>STRING_BUFFER_OFFSET</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>js_FinishStringBuffer</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>
    <return>return <expr><name>str</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * ECMA-357 10.2.1.2 EscapeAttributeValue helper method.
 * This function takes ownership of sb-&gt;base, if sb is non-null, in all cases.
 */</comment>
<function><type><specifier>static</specifier> <name>JSString</name> *</type>
<name>EscapeAttributeValue</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSStringBuffer</name> *</type><name>sb</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>newlength</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>jschar</name> *</type><name>cp</name></decl>, *<decl><type ref="prev"/><name>start</name></decl>, *<decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jschar</name></type> <name>c</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>length</name> = <name>newlength</name> = <call><name>JSSTRING_LENGTH</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>cp</name> = <name>start</name> = <call><name>JSSTRING_CHARS</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>, <expr><name>end</name> = <name>cp</name> + <name>length</name></expr>;</init> <condition><expr><name>cp</name> &lt; <name>end</name></expr>;</condition> <incr><expr><name>cp</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>c</name> = *<name>cp</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>c</name> == '"'</expr>)</condition><then>
            <expr_stmt><expr><name>newlength</name> += 5</expr>;</expr_stmt></then>
        <else>else <if>if <condition>(<expr><name>c</name> == '&lt;'</expr>)</condition><then>
            <expr_stmt><expr><name>newlength</name> += 3</expr>;</expr_stmt></then>
        <else>else <if>if <condition>(<expr><name>c</name> == '&amp;' || <name>c</name> == '\n' || <name>c</name> == '\r' || <name>c</name> == '\t'</expr>)</condition><then>
            <expr_stmt><expr><name>newlength</name> += 4</expr>;</expr_stmt></then></if></else></if></else></if>

        <if>if <condition>(<expr><name>newlength</name> &lt; <name>length</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
    }</block></for>
    <if>if <condition>(<expr>(<name>sb</name> &amp;&amp; <call><name>STRING_BUFFER_OFFSET</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call> != 0) || <name>newlength</name> &gt; <name>length</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>JSStringBuffer</name></type> <name>localSB</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>sb</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>sb</name> = &amp;<name>localSB</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>js_InitStringBuffer</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>sb</name>-&gt;<name>grow</name></name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>newlength</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <for>for (<init><expr><name>cp</name> = <name>start</name></expr>;</init> <condition><expr><name>cp</name> &lt; <name>end</name></expr>;</condition> <incr><expr><name>cp</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>c</name> = *<name>cp</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>c</name> == '"'</expr>)</condition><then>
                <expr_stmt><expr><call><name>js_AppendCString</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>js_quot_entity_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><name>c</name> == '&lt;'</expr>)</condition><then>
                <expr_stmt><expr><call><name>js_AppendCString</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>js_lt_entity_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><name>c</name> == '&amp;'</expr>)</condition><then>
                <expr_stmt><expr><call><name>js_AppendCString</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>js_amp_entity_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><name>c</name> == '\n'</expr>)</condition><then>
                <expr_stmt><expr><call><name>js_AppendCString</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr>"&amp;#xA;"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><name>c</name> == '\r'</expr>)</condition><then>
                <expr_stmt><expr><call><name>js_AppendCString</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr>"&amp;#xD;"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><name>c</name> == '\t'</expr>)</condition><then>
                <expr_stmt><expr><call><name>js_AppendCString</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr>"&amp;#x9;"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><call><name>js_AppendChar</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if></else></if></else></if></else></if>
        }</block></for>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>STRING_BUFFER_OK</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>str</name> = <call><name>js_NewString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>sb</name>-&gt;<name>base</name></name></expr></argument>, <argument><expr><call><name>STRING_BUFFER_OFFSET</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>js_FinishStringBuffer</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>
    <return>return <expr><name>str</name></expr>;</return>
}</block></function>

<comment type="block">/* 13.3.5.4 [[GetNamespace]]([InScopeNamespaces]) */</comment>
<function><type><specifier>static</specifier> <name>JSXMLNamespace</name> *</type>
<name>GetNamespace</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>JSXMLArray</name> *</type><name>inScopeNSes</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>match</name></decl>, *<decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name><name>argv</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>nsobj</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>qn</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>qn</name>-&gt;<name>uri</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><name>JSMSG_BAD_XML_NAMESPACE</name></expr></argument>,
                             <argument><expr><name><name>qn</name>-&gt;<name>prefix</name></name>
                             ? <call><name>js_ValueToPrintableString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>,
                                   <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name><name>qn</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                             : <name><name>js_type_strs</name><index>[<expr><name>JSTYPE_VOID</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Look for a matching namespace in inScopeNSes, if provided. */</comment>
    <expr_stmt><expr><name>match</name> = <name>NULL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>inScopeNSes</name></expr>)</condition><then> <block>{
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>inScopeNSes</name>-&gt;<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>ns</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr><name>inScopeNSes</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then>
                <continue>continue;</continue></then></if>

            <comment type="block">/*
             * Erratum, very tricky, and not specified in ECMA-357 13.3.5.4:
             * If we preserve prefixes, we must match null qn-&gt;prefix against
             * an empty ns-&gt;prefix, in order to avoid generating redundant
             * prefixed and default namespaces for cases such as:
             *
             *   x = &lt;t xmlns="http://foo.com"/&gt;
             *   print(x.toXMLString());
             *
             * Per 10.3.2.1, the namespace attribute in t has an empty string
             * prefix (*not* a null prefix), per 10.3.2.1 Step 6(h)(i)(1):
             *
             *   1. If the [local name] property of a is "xmlns"
             *      a. Map ns.prefix to the empty string
             *
             * But t's name has a null prefix in this implementation, meaning
             * *undefined*, per 10.3.2.1 Step 6(c)'s NOTE (which refers to
             * the http://www.w3.org/TR/xml-infoset/ spec, item 2.2.3, without
             * saying how "no value" maps to an ECMA-357 value -- but it must
             * map to the *undefined* prefix value).
             *
             * Since "" != undefined (or null, in the current implementation)
             * the ECMA-357 spec will fail to match in [[GetNamespace]] called
             * on t with argument {} U {(prefix="", uri="http://foo.com")}.
             * This spec bug leads to ToXMLString results that duplicate the
             * declared namespace.
             */</comment>
            <if>if <condition>(<expr><call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>qn</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call> &amp;&amp;
                (<name><name>ns</name>-&gt;<name>prefix</name></name> == <name><name>qn</name>-&gt;<name>prefix</name></name> ||
                 ((<name><name>ns</name>-&gt;<name>prefix</name></name> &amp;&amp; <name><name>qn</name>-&gt;<name>prefix</name></name>)
                  ? <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>prefix</name></name></expr></argument>, <argument><expr><name><name>qn</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call>
                  : <call><name>IS_EMPTY</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>prefix</name></name> ? <name><name>ns</name>-&gt;<name>prefix</name></name> : <name><name>qn</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call>))</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>match</name> = <name>ns</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
    }</block></then></if>

    <comment type="block">/* If we didn't match, make a new namespace from qn. */</comment>
    <if>if <condition>(<expr>!<name>match</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <name><name>qn</name>-&gt;<name>prefix</name></name> ? <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name><name>qn</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call> : <name>JSVAL_VOID</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name><name>qn</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nsobj</name> = <call><name>js_ConstructObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>js_NamespaceClass</name>.<name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                   <argument><expr>2</expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>nsobj</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name>match</name> = (<name>JSXMLNamespace</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nsobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>match</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSString</name> *</type>
<name>GeneratePrefix</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>uri</name></decl></param>, <param><decl><type><name>JSXMLArray</name> *</type><name>decls</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>jschar</name> *</type><name>cp</name></decl>, *<decl><type ref="prev"/><name>start</name></decl>, *<decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>newlength</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>serial</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jschar</name> *</type><name>bp</name></decl>, *<decl><type ref="prev"/><name>dp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>done</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>prefix</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>IS_EMPTY</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * If there are no *declared* namespaces, skip all collision detection and
     * return a short prefix quickly; an example of such a situation:
     *
     *   var x = &lt;f/&gt;;
     *   var n = new Namespace("http://example.com/");
     *   x.@n::att = "val";
     *   x.toXMLString();
     *
     * This is necessary for various log10 uses below to be valid.
     */</comment>
    <if>if <condition>(<expr><name><name>decls</name>-&gt;<name>length</name></name> == 0</expr>)</condition><then>
        <return>return <expr><call><name>JS_NewStringCopyZ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"a"</expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/*
     * Try peeling off the last filename suffix or pathname component till
     * we have a valid XML name.  This heuristic will prefer "xul" given
     * ".../there.is.only.xul", "xbl" given ".../xbl", and "xbl2" given any
     * likely URI of the form ".../xbl2/2005".
     */</comment>
    <expr_stmt><expr><name>start</name> = <call><name>JSSTRING_CHARS</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cp</name> = <name>end</name> = <name>start</name> + <call><name>JSSTRING_LENGTH</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr>--<name>cp</name> &gt; <name>start</name></expr>)</condition> <block>{
        <if>if <condition>(<expr>*<name>cp</name> == '.' || *<name>cp</name> == '/' || *<name>cp</name> == ':'</expr>)</condition><then> <block>{
            <expr_stmt><expr>++<name>cp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>length</name> = <call><name>PTRDIFF</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>jschar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>IsXMLName</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>STARTS_WITH_XML</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <break>break;</break></then></if>
            <expr_stmt><expr><name>end</name> = --<name>cp</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></while>
    <expr_stmt><expr><name>length</name> = <call><name>PTRDIFF</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>jschar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * If the namespace consisted only of non-XML names or names that begin
     * case-insensitively with "xml", arbitrarily create a prefix consisting
     * of 'a's of size length (allowing dp-calculating code to work with or
     * without this branch executing) plus the space for storing a hyphen and
     * the serial number (avoiding reallocation if a collision happens).
     */</comment>
    <expr_stmt><expr><name>bp</name> = (<name>jschar</name> *) <name>cp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>newlength</name> = <name>length</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>STARTS_WITH_XML</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> || !<call><name>IsXMLName</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>newlength</name> = <name>length</name> + 2 + (<name>size_t</name>) <call><name>log10</name><argument_list>(<argument><expr><name><name>decls</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bp</name> = (<name>jschar</name> *)
             <call><name>JS_malloc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>newlength</name> + 1) * <sizeof>sizeof<argument_list>(<argument><expr><name>jschar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>bp</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>

        <expr_stmt><expr><name><name>bp</name><index>[<expr><name>newlength</name></expr>]</index></name> = 0</expr>;</expr_stmt>
        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>newlength</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
             <expr_stmt><expr><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name> = 'a'</expr>;</expr_stmt></for>
    }</block></then></if>

    <comment type="block">/*
     * Now search through decls looking for a collision.  If we collide with
     * an existing prefix, start tacking on a hyphen and a serial number.
     */</comment>
    <expr_stmt><expr><name>serial</name> = 0</expr>;</expr_stmt>
    <do>do <block>{
        <expr_stmt><expr><name>done</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>decls</name>-&gt;<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>ns</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr><name>decls</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ns</name> &amp;&amp; <name><name>ns</name>-&gt;<name>prefix</name></name> &amp;&amp;
                <call><name>JSSTRING_LENGTH</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call> == <name>newlength</name> &amp;&amp;
                !<call><name>memcmp</name><argument_list>(<argument><expr><call><name>JSSTRING_CHARS</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bp</name></expr></argument>,
                        <argument><expr><name>newlength</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>jschar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>bp</name> == <name>cp</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>newlength</name> = <name>length</name> + 2 + (<name>size_t</name>) <call><name>log10</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>bp</name> = (<name>jschar</name> *)
                         <call><name>JS_malloc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>newlength</name> + 1) * <sizeof>sizeof<argument_list>(<argument><expr><name>jschar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<name>bp</name></expr>)</condition><then>
                        <return>return <expr><name>NULL</name></expr>;</return></then></if>
                    <expr_stmt><expr><call><name>js_strncpy</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr>++<name>serial</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>serial</name> &lt;= <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>dp</name> = <name>bp</name> + <name>length</name> + 2 + (<name>size_t</name>) <call><name>log10</name><argument_list>(<argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr>*<name>dp</name> = 0</expr>;</expr_stmt>
                <for>for (<init><expr><name>m</name> = <name>serial</name></expr>;</init> <condition><expr><name>m</name> != 0</expr>;</condition> <incr><expr><name>m</name> /= 10</expr></incr>)
                    <expr_stmt><expr>*--<name>dp</name> = <call>(<name>jschar</name>)<argument_list>(<argument><expr>'0' + <name>m</name> % 10</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
                <expr_stmt><expr>*--<name>dp</name> = '-'</expr>;</expr_stmt>
                <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>dp</name> == <name>bp</name> + <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>done</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
    }</block> while <condition>(<expr>!<name>done</name></expr>)</condition>;</do>

    <if>if <condition>(<expr><name>bp</name> == <name>cp</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>offset</name> = <call><name>PTRDIFF</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>jschar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>prefix</name> = <call><name>js_NewDependentString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>prefix</name> = <call><name>js_NewString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>newlength</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>prefix</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></else></if>
    <return>return <expr><name>prefix</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>namespace_match</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>JSXMLNamespace</name> *</type><name>nsa</name> <init>= <expr>(const <name>JSXMLNamespace</name> *) <name>a</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>JSXMLNamespace</name> *</type><name>nsb</name> <init>= <expr>(const <name>JSXMLNamespace</name> *) <name>b</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>nsb</name>-&gt;<name>prefix</name></name></expr>)</condition><then>
        <return>return <expr><name><name>nsa</name>-&gt;<name>prefix</name></name> &amp;&amp; <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>nsa</name>-&gt;<name>prefix</name></name></expr></argument>, <argument><expr><name><name>nsb</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    <return>return <expr><call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>nsa</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>nsb</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* ECMA-357 10.2.1 and 10.2.2 */</comment>
<function><type><specifier>static</specifier> <name>JSString</name> *</type>
<name>XMLToXMLString</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>JSXMLArray</name> *</type><name>ancestorNSes</name></decl></param>,
               <param><decl><type><name>uintN</name></type> <name>indentLevel</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>pretty</name></decl>, <decl><type ref="prev"/><name>indentKids</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSStringBuffer</name></type> <name>sb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>, *<decl><type ref="prev"/><name>prefix</name></decl>, *<decl><type ref="prev"/><name>kidstr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArrayCursor</name></type> <name>cursor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArray</name></type> <name>empty</name></decl>, <decl><type ref="prev"/><name>decls</name></decl>, <decl><type ref="prev"/><name>ancdecls</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>, *<decl><type ref="prev"/><name>ns2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uintN</name></type> <name>nextIndentLevel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>attr</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>GetBooleanXMLSetting</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_prettyPrinting_str</name></expr></argument>, <argument><expr>&amp;<name>pretty</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>js_InitStringBuffer</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>pretty</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>js_RepeatChar</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr>' '</expr></argument>, <argument><expr><name>indentLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<call><name>STRING_BUFFER_OK</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>
    <expr_stmt><expr><name>str</name> = <name>NULL</name></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name></expr>)</condition> <block>{
      <case>case <expr><name>JSXML_CLASS_TEXT</name></expr>:
        <comment type="block">/* Step 4. */</comment>
        <if>if <condition>(<expr><name>pretty</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>str</name> = <call><name>ChompXMLWhitespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>xml_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>str</name> = <name><name>xml</name>-&gt;<name>xml_value</name></name></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><call><name>EscapeElementValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>

      </case><case>case <expr><name>JSXML_CLASS_ATTRIBUTE</name></expr>:
        <comment type="block">/* Step 5. */</comment>
        <return>return <expr><call><name>EscapeAttributeValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>xml_value</name></name></expr></argument>)</argument_list></call></expr>;</return>

      </case><case>case <expr><name>JSXML_CLASS_COMMENT</name></expr>:
        <comment type="block">/* Step 6. */</comment>
        <return>return <expr><call><name>MakeXMLCommentString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>xml_value</name></name></expr></argument>)</argument_list></call></expr>;</return>

      </case><case>case <expr><name>JSXML_CLASS_PROCESSING_INSTRUCTION</name></expr>:
        <comment type="block">/* Step 7. */</comment>
        <return>return <expr><call><name>MakeXMLPIString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>name</name>-&gt;<name>localName</name></name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>xml_value</name></name></expr></argument>)</argument_list></call></expr>;</return>

      </case><case>case <expr><name>JSXML_CLASS_LIST</name></expr>:
        <comment type="block">/* ECMA-357 10.2.2. */</comment>
        <expr_stmt><expr><call><name>XMLArrayCursorInit</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
        <while>while <condition>(<expr>(<name>kid</name> = (<name>JSXML</name> *) <call><name>XMLArrayCursorNext</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
            <if>if <condition>(<expr><name>pretty</name> &amp;&amp; <name>i</name> != 0</expr>)</condition><then>
                <expr_stmt><expr><call><name>js_AppendChar</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr>'\n'</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <expr_stmt><expr><name>kidstr</name> = <call><name>XMLToXMLString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>, <argument><expr><name>ancestorNSes</name></expr></argument>, <argument><expr><name>indentLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>kidstr</name></expr>)</condition><then>
                <break>break;</break></then></if>

            <expr_stmt><expr><call><name>js_AppendJSString</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>kidstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>kid</name></expr>)</condition><then>
            <goto>goto <name>list_out</name>;</goto></then></if>

        <if>if <condition>(<expr>!<name><name>sb</name>.<name>base</name></name></expr>)</condition><then>
            <return>return <expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr>;</return></then></if>

        <if>if <condition>(<expr>!<call><name>STRING_BUFFER_OK</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>str</name> = <call><name>js_NewString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>sb</name>.<name>base</name></name></expr></argument>, <argument><expr><call><name>STRING_BUFFER_OFFSET</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <label><name>list_out</name>:</label>
        <if>if <condition>(<expr>!<name>str</name> &amp;&amp; <call><name>STRING_BUFFER_OK</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>js_FinishStringBuffer</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr><name>str</name></expr>;</return>

      </case><default>default:<empty_stmt>;</empty_stmt>
    </default>}</block></switch>

    <comment type="block">/* After this point, control must flow through label out: to exit. */</comment>
    <if>if <condition>(<expr>!<call><name>js_EnterLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <comment type="block">/* ECMA-357 10.2.1 step 8 onward: handle ToXMLString on an XML element. */</comment>
    <if>if <condition>(<expr>!<name>ancestorNSes</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>XMLArrayInit</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>empty</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ancestorNSes</name> = &amp;<name>empty</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>XMLArrayInit</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>decls</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ancdecls</name>.<name>capacity</name></name> = 0</expr>;</expr_stmt>

    <comment type="block">/* Clone in-scope namespaces not in ancestorNSes into decls. */</comment>
    <expr_stmt><expr><call><name>XMLArrayCursorInit</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr>(<name>ns</name> = (<name>JSXMLNamespace</name> *) <call><name>XMLArrayCursorNext</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
        <if>if <condition>(<expr>!<name><name>ns</name>-&gt;<name>declared</name></name></expr>)</condition><then>
            <continue>continue;</continue></then></if>
        <if>if <condition>(<expr>!<call><name>XMLARRAY_HAS_MEMBER</name><argument_list>(<argument><expr><name>ancestorNSes</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>namespace_identity</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="block">/* NOTE: may want to exclude unused namespaces here. */</comment>
            <expr_stmt><expr><name>ns2</name> = <call><name>js_NewXMLNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>ns</name>-&gt;<name>prefix</name></name></expr></argument>, <argument><expr><name><name>ns</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ns2</name> || !<call><name>XMLARRAY_APPEND</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>decls</name></expr></argument>, <argument><expr><name>ns2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <break>break;</break></then></if>
        }</block></then></if>
    }</block></while>
    <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ns</name></expr>)</condition><then>
        <goto>goto <name>out</name>;</goto></then></if>

    <comment type="block">/*
     * Union ancestorNSes and decls into ancdecls.  Note that ancdecls does
     * not own its member references.  In the spec, ancdecls has no name, but
     * is always written out as (AncestorNamespaces U namespaceDeclarations).
     */</comment>
    <if>if <condition>(<expr>!<call><name>XMLArrayInit</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>ancdecls</name></expr></argument>, <argument><expr><name><name>ancestorNSes</name>-&gt;<name>length</name></name> + <name><name>decls</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>out</name>;</goto></then></if>
    <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>ancestorNSes</name>-&gt;<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>ns2</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr><name>ancestorNSes</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ns2</name></expr>)</condition><then>
            <continue>continue;</continue></then></if>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>XMLARRAY_HAS_MEMBER</name><argument_list>(<argument><expr>&amp;<name>decls</name></expr></argument>, <argument><expr><name>ns2</name></expr></argument>, <argument><expr><name>namespace_identity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>XMLARRAY_APPEND</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>ancdecls</name></expr></argument>, <argument><expr><name>ns2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>out</name>;</goto></then></if>
    }</block></for>
    <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>decls</name>.<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>ns2</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name>decls</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ns2</name></expr>)</condition><then>
            <continue>continue;</continue></then></if>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>XMLARRAY_HAS_MEMBER</name><argument_list>(<argument><expr>&amp;<name>ancdecls</name></expr></argument>, <argument><expr><name>ns2</name></expr></argument>, <argument><expr><name>namespace_identity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>XMLARRAY_APPEND</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>ancdecls</name></expr></argument>, <argument><expr><name>ns2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>out</name>;</goto></then></if>
    }</block></for>

    <comment type="block">/* Step 11, except we don't clone ns unless its prefix is undefined. */</comment>
    <expr_stmt><expr><name>ns</name> = <call><name>GetNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>&amp;<name>ancdecls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then>
        <goto>goto <name>out</name>;</goto></then></if>

    <comment type="block">/* Step 12 (NULL means *undefined* here), plus the deferred ns cloning. */</comment>
    <if>if <condition>(<expr>!<name><name>ns</name>-&gt;<name>prefix</name></name></expr>)</condition><then> <block>{
        <comment type="block">/*
         * Create a namespace prefix that isn't used by any member of decls.
         * Assign the new prefix to a copy of ns.  Flag this namespace as if
         * it were declared, for assertion-testing's sake later below.
         *
         * Erratum: if ns-&gt;prefix and xml-&gt;name are both null (*undefined* in
         * ECMA-357), we know that xml was named using the default namespace
         * (proof: see GetNamespace and the Namespace constructor called with
         * two arguments).  So we ought not generate a new prefix here, when
         * we can declare ns as the default namespace for xml.
         *
         * This helps descendants inherit the namespace instead of redundantly
         * redeclaring it with generated prefixes in each descendant.
         */</comment>
        <if>if <condition>(<expr>!<name><name>xml</name>-&gt;<name>name</name>-&gt;<name>prefix</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>prefix</name> = <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>prefix</name> = <call><name>GeneratePrefix</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>ns</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>&amp;<name>ancdecls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>prefix</name></expr>)</condition><then>
                <goto>goto <name>out</name>;</goto></then></if>
        }</block></else></if>
        <expr_stmt><expr><name>ns</name> = <call><name>js_NewXMLNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>ns</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then>
            <goto>goto <name>out</name>;</goto></then></if>

        <comment type="block">/*
         * If the xml-&gt;name was unprefixed, we must remove any declared default
         * namespace from decls before appending ns.  How can you get a default
         * namespace in decls that doesn't match the one from name?  Apparently
         * by calling x.setNamespace(ns) where ns has no prefix.  The other way
         * to fix this is to update x's in-scope namespaces when setNamespace
         * is called, but that's not specified by ECMA-357.
         *
         * Likely Erratum here, depending on whether the lack of update to x's
         * in-scope namespace in XML.prototype.setNamespace (13.4.4.36) is an
         * erratum or not.  Note that changing setNamespace to update the list
         * of in-scope namespaces will change x.namespaceDeclarations().
         */</comment>
        <if>if <condition>(<expr><call><name>IS_EMPTY</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>i</name> = <call><name>XMLArrayFindMember</name><argument_list>(<argument><expr>&amp;<name>decls</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>namespace_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>i</name> != <name>XML_NOT_FOUND</name></expr>)</condition><then>
                <expr_stmt><expr><call><name>XMLArrayDelete</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>decls</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if>

        <comment type="block">/*
         * In the spec, ancdecls has no name, but is always written out as
         * (AncestorNamespaces U namespaceDeclarations).  Since we compute
         * that union in ancdecls, any time we append a namespace strong
         * ref to decls, we must also append a weak ref to ancdecls.  Order
         * matters here: code at label out: releases strong refs in decls.
         */</comment>
        <if>if <condition>(<expr>!<call><name>XMLARRAY_APPEND</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>ancdecls</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call> ||
            !<call><name>XMLARRAY_APPEND</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>decls</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <goto>goto <name>out</name>;</goto>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/* Format the element or point-tag into sb. */</comment>
    <expr_stmt><expr><call><name>js_AppendChar</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr>'&lt;'</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>ns</name>-&gt;<name>prefix</name></name> &amp;&amp; !<call><name>IS_EMPTY</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>js_AppendJSString</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name><name>ns</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>js_AppendChar</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>js_AppendJSString</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>name</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Step 16 makes a union to avoid writing two loops in step 17, to share
     * common attribute value appending spec-code.  We prefer two loops for
     * faster code and less data overhead.
     */</comment>

    <comment type="block">/* Step 17(b): append attributes. */</comment>
    <expr_stmt><expr><call><name>XMLArrayCursorInit</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr>(<name>attr</name> = (<name>JSXML</name> *) <call><name>XMLArrayCursorNext</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
        <expr_stmt><expr><call><name>js_AppendChar</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr>' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ns2</name> = <call><name>GetNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>attr</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>&amp;<name>ancdecls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ns2</name></expr>)</condition><then>
            <break>break;</break></then></if>

        <comment type="block">/* 17(b)(ii): NULL means *undefined* here. */</comment>
        <if>if <condition>(<expr>!<name><name>ns2</name>-&gt;<name>prefix</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>prefix</name> = <call><name>GeneratePrefix</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>ns2</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>&amp;<name>ancdecls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>prefix</name></expr>)</condition><then>
                <break>break;</break></then></if>

            <comment type="block">/* Again, we avoid copying ns2 until we know it's prefix-less. */</comment>
            <expr_stmt><expr><name>ns2</name> = <call><name>js_NewXMLNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>ns2</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ns2</name></expr>)</condition><then>
                <break>break;</break></then></if>

            <comment type="block">/*
             * In the spec, ancdecls has no name, but is always written out as
             * (AncestorNamespaces U namespaceDeclarations).  Since we compute
             * that union in ancdecls, any time we append a namespace strong
             * ref to decls, we must also append a weak ref to ancdecls.  Order
             * matters here: code at label out: releases strong refs in decls.
             */</comment>
            <if>if <condition>(<expr>!<call><name>XMLARRAY_APPEND</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>ancdecls</name></expr></argument>, <argument><expr><name>ns2</name></expr></argument>)</argument_list></call> ||
                !<call><name>XMLARRAY_APPEND</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>decls</name></expr></argument>, <argument><expr><name>ns2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
        }</block></then></if>

        <comment type="block">/* 17(b)(iii). */</comment>
        <if>if <condition>(<expr>!<call><name>IS_EMPTY</name><argument_list>(<argument><expr><name><name>ns2</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>js_AppendJSString</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name><name>ns2</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>js_AppendChar</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/* 17(b)(iv). */</comment>
        <expr_stmt><expr><call><name>js_AppendJSString</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name><name>attr</name>-&gt;<name>name</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* 17(d-g). */</comment>
        <expr_stmt><expr><call><name>AppendAttributeValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name><name>attr</name>-&gt;<name>xml_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>attr</name></expr>)</condition><then>
        <goto>goto <name>out</name>;</goto></then></if>

    <comment type="block">/* Step 17(c): append XML namespace declarations. */</comment>
    <expr_stmt><expr><call><name>XMLArrayCursorInit</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>&amp;<name>decls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr>(<name>ns2</name> = (<name>JSXMLNamespace</name> *) <call><name>XMLArrayCursorNext</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>ns2</name>-&gt;<name>declared</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>js_AppendCString</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr>" xmlns"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* 17(c)(ii): NULL means *undefined* here. */</comment>
        <if>if <condition>(<expr>!<name><name>ns2</name>-&gt;<name>prefix</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>prefix</name> = <call><name>GeneratePrefix</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>ns2</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>&amp;<name>ancdecls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>prefix</name></expr>)</condition><then>
                <break>break;</break></then></if>
            <expr_stmt><expr><name><name>ns2</name>-&gt;<name>prefix</name></name> = <name>prefix</name></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/* 17(c)(iii). */</comment>
        <if>if <condition>(<expr>!<call><name>IS_EMPTY</name><argument_list>(<argument><expr><name><name>ns2</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>js_AppendChar</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>js_AppendJSString</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name><name>ns2</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/* 17(d-g). */</comment>
        <expr_stmt><expr><call><name>AppendAttributeValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name><name>ns2</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ns2</name></expr>)</condition><then>
        <goto>goto <name>out</name>;</goto></then></if>

    <comment type="block">/* Step 18: handle point tags. */</comment>
    <expr_stmt><expr><name>n</name> = <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>n</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>js_AppendCString</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr>"/&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <comment type="block">/* Steps 19 through 25: handle element content, and open the end-tag. */</comment>
        <expr_stmt><expr><call><name>js_AppendChar</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>indentKids</name> = <name>n</name> &gt; 1 ||
                     (<name>n</name> == 1 &amp;&amp;
                      (<name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call>) &amp;&amp;
                      <name><name>kid</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_TEXT</name>)</expr>;</expr_stmt>

        <if>if <condition>(<expr><name>pretty</name> &amp;&amp; <name>indentKids</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name>GetUint32XMLSetting</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_prettyIndent_str</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <goto>goto <name>out</name>;</goto></then></if>
            <expr_stmt><expr><name>nextIndentLevel</name> = <name>indentLevel</name> + <name>i</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>nextIndentLevel</name> = 0</expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name>XMLArrayCursorInit</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr>(<name>kid</name> = (<name>JSXML</name> *) <call><name>XMLArrayCursorNext</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
            <if>if <condition>(<expr><name>pretty</name> &amp;&amp; <name>indentKids</name></expr>)</condition><then>
                <expr_stmt><expr><call><name>js_AppendChar</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr>'\n'</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <expr_stmt><expr><name>kidstr</name> = <call><name>XMLToXMLString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>, <argument><expr>&amp;<name>ancdecls</name></expr></argument>, <argument><expr><name>nextIndentLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>kidstr</name></expr>)</condition><then>
                <break>break;</break></then></if>

            <expr_stmt><expr><call><name>js_AppendJSString</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>kidstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>kid</name></expr>)</condition><then>
            <goto>goto <name>out</name>;</goto></then></if>

        <if>if <condition>(<expr><name>pretty</name> &amp;&amp; <name>indentKids</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>js_AppendChar</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr>'\n'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>js_RepeatChar</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr>' '</expr></argument>, <argument><expr><name>indentLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>js_AppendCString</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr>"&lt;/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Step 26. */</comment>
        <if>if <condition>(<expr><name><name>ns</name>-&gt;<name>prefix</name></name> &amp;&amp; !<call><name>IS_EMPTY</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>js_AppendJSString</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name><name>ns</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>js_AppendChar</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/* Step 27. */</comment>
        <expr_stmt><expr><call><name>js_AppendJSString</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>name</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>js_AppendChar</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr>!<call><name>STRING_BUFFER_OK</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportOutOfMemory</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>out</name>;</goto>
    }</block></then></if>

    <expr_stmt><expr><name>str</name> = <call><name>js_NewString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>sb</name>.<name>base</name></name></expr></argument>, <argument><expr><call><name>STRING_BUFFER_OFFSET</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
    <expr_stmt><expr><call><name>js_LeaveLocalRootScopeWithResult</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name> &amp;&amp; <call><name>STRING_BUFFER_OK</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>js_FinishStringBuffer</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>XMLArrayFinish</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>decls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>ancdecls</name>.<name>capacity</name></name> != 0</expr>)</condition><then>
        <expr_stmt><expr><call><name>XMLArrayFinish</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>ancdecls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>str</name></expr>;</return>
}</block></function>

<comment type="block">/* ECMA-357 10.2 */</comment>
<function><type><specifier>static</specifier> <name>JSString</name> *</type>
<name>ToXMLString</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> || <call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><name>JSMSG_BAD_XML_CONVERSION</name></expr></argument>,
                             <argument><expr><name><name>js_type_strs</name><index>[<expr><call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call>
                                          ? <name>JSTYPE_NULL</name>
                                          : <name>JSTYPE_VOID</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>JSVAL_IS_BOOLEAN</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> || <call><name>JSVAL_IS_NUMBER</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><call><name>EscapeElementValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <expr_stmt><expr><name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>OBJECT_IS_XML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name>OBJ_DEFAULT_VALUE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>JSTYPE_STRING</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name>str</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <return>return <expr><call><name>EscapeElementValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Handle non-element cases in this switch, returning from each case. */</comment>
    <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>XMLToXMLString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSXMLQName</name> *</type>
<name>ToAttributeName</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSString</name> *</type><name>name</name></decl>, *<decl><type ref="prev"/><name>uri</name></decl>, *<decl><type ref="prev"/><name>prefix</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSClass</name> *</type><name>clasp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSTempValueRooter</name></type> <name>tvr</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>name</name> = <call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>uri</name> = <name>prefix</name> = <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>js_ReportValueError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSMSG_BAD_XML_ATTR_NAME</name></expr></argument>,
                                <argument><expr><name>JSDVG_IGNORE_STACK</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>clasp</name> = <call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>clasp</name> == &amp;<name>js_AttributeNameClass</name></expr>)</condition><then>
            <return>return <expr>(<name>JSXMLQName</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

        <if>if <condition>(<expr><name>clasp</name> == &amp;<name><name>js_QNameClass</name>.<name>base</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>qn</name> = (<name>JSXMLQName</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>uri</name> = <name><name>qn</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>prefix</name> = <name><name>qn</name>-&gt;<name>prefix</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>name</name> = <name><name>qn</name>-&gt;<name>localName</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>clasp</name> == &amp;<name>js_AnyNameClass</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>name</name> = <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>atomState</name>.<name>starAtom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>name</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>name</name></expr>)</condition><then>
                    <return>return <expr><name>NULL</name></expr>;</return></then></if>
            }</block></else></if>
            <expr_stmt><expr><name>uri</name> = <name>prefix</name> = <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>

    <expr_stmt><expr><name>qn</name> = <call><name>js_NewXMLQName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>qn</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>JS_PUSH_TEMP_ROOT_GCTHING</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>qn</name></expr></argument>, <argument><expr>&amp;<name>tvr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>js_GetAttributeNameObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>qn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_POP_TEMP_ROOT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>tvr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><name>qn</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ReportBadXMLName</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>id</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>js_ReportValueError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSMSG_BAD_XML_NAME</name></expr></argument>, <argument><expr><name>JSDVG_IGNORE_STACK</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>IsFunctionQName</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl></param>, <param><decl><type><name>jsid</name> *</type><name>funidp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>atom</name> = <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>atomState</name>.<name>lazy</name>.<name>functionNamespaceURIAtom</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>qn</name>-&gt;<name>uri</name></name> &amp;&amp; <name>atom</name> &amp;&amp;
        (<name><name>qn</name>-&gt;<name>uri</name></name> == <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call> ||
         <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>qn</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
        <return>return <expr><call><name>JS_ValueToId</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name><name>qn</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>funidp</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr>*<name>funidp</name> = 0</expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>JSBool</name></type>
<name>js_IsFunctionQName</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name> *</type><name>funidp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> == &amp;<name><name>js_QNameClass</name>.<name>base</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>qn</name> = (<name>JSXMLQName</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>IsFunctionQName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>qn</name></expr></argument>, <argument><expr><name>funidp</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr>*<name>funidp</name> = 0</expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSXMLQName</name> *</type>
<name>ToXMLName</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>, <param><decl><type><name>jsid</name> *</type><name>funidp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSString</name> *</type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSClass</name> *</type><name>clasp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>name</name> = <call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ReportBadXMLName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>clasp</name> = <call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>clasp</name> == &amp;<name>js_AttributeNameClass</name> || <name>clasp</name> == &amp;<name><name>js_QNameClass</name>.<name>base</name></name></expr>)</condition><then>
            <goto>goto <name>out</name>;</goto></then></if>
        <if>if <condition>(<expr><name>clasp</name> == &amp;<name>js_AnyNameClass</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>name</name> = <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>atomState</name>.<name>starAtom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>construct</name>;</goto>
        }</block></then></if>
        <expr_stmt><expr><name>name</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>name</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
    }</block></else></if>

    <comment type="block">/*
     * ECMA-357 10.6.1 step 1 seems to be incorrect.  The spec says:
     *
     * 1. If ToString(ToNumber(P)) == ToString(P), throw a TypeError exception
     *
     * First, _P_ should be _s_, to refer to the given string.
     *
     * Second, why does ToXMLName applied to the string type throw TypeError
     * only for numeric literals without any leading or trailing whitespace?
     *
     * If the idea is to reject uint32 property names, then the check needs to
     * be stricter, to exclude hexadecimal and floating point literals.
     */</comment>
    <if>if <condition>(<expr><call><name>js_IdIsIndex</name><argument_list>(<argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>bad</name>;</goto></then></if>

    <if>if <condition>(<expr>*<call><name>JSSTRING_CHARS</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> == '@'</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>name</name> = <call><name>js_NewDependentString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>JSSTRING_LENGTH</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> - 1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>name</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr>*<name>funidp</name> = 0</expr>;</expr_stmt>
        <return>return <expr><call><name>ToAttributeName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

<label><name>construct</name>:</label>
    <expr_stmt><expr><name>v</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>js_ConstructObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>js_QNameClass</name>.<name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

<label><name>out</name>:</label>
    <expr_stmt><expr><name>qn</name> = (<name>JSXMLQName</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>IsFunctionQName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>qn</name></expr></argument>, <argument><expr><name>funidp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><name>qn</name></expr>;</return>

<label><name>bad</name>:</label>
    <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                         <argument><expr><name>JSMSG_BAD_XML_NAME</name></expr></argument>,
                         <argument><expr><call><name>js_ValueToPrintableString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/* ECMA-357 9.1.1.13 XML [[AddInScopeNamespace]]. */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>AddInScopeNamespace</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>match</name></decl>, *<decl><type ref="prev"/><name>ns2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <comment type="block">/* NULL means *undefined* here -- see ECMA-357 9.1.1.13 step 2. */</comment>
    <if>if <condition>(<expr>!<name><name>ns</name>-&gt;<name>prefix</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>match</name> = <name>NULL</name></expr>;</expr_stmt>
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>xml</name>-&gt;<name>xml_namespaces</name>.<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>ns2</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ns2</name> &amp;&amp; <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>ns2</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>ns</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>match</name> = <name>ns2</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <if>if <condition>(<expr>!<name>match</name> &amp;&amp; !<call><name>XMLARRAY_ADD_MEMBER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr><call><name>IS_EMPTY</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>IS_EMPTY</name><argument_list>(<argument><expr><name><name>xml</name>-&gt;<name>name</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>match</name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__GNUC__</name></cpp:ifdef>         <comment type="block">/* suppress bogus gcc warnings */</comment>
        <expr_stmt><expr><name>m</name> = <name>XML_NOT_FOUND</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>xml</name>-&gt;<name>xml_namespaces</name>.<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>ns2</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ns2</name> &amp;&amp; <name><name>ns2</name>-&gt;<name>prefix</name></name> &amp;&amp;
                <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>ns2</name>-&gt;<name>prefix</name></name></expr></argument>, <argument><expr><name><name>ns</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>match</name> = <name>ns2</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>m</name> = <name>i</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <if>if <condition>(<expr><name>match</name> &amp;&amp; !<call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>match</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>ns</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ns2</name> = <call><name>XMLARRAY_DELETE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>,
                                  <argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>ns2</name> == <name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>match</name>-&gt;<name>prefix</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name>AddInScopeNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>XMLARRAY_APPEND</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></else></if>

    <comment type="block">/* OPTION: enforce that descendants have superset namespaces. */</comment>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/* ECMA-357 9.2.1.6 XMLList [[Append]]. */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Append</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>list</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>kid</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>list</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> = <name><name>list</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> = 1</expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>list</name>-&gt;<name>xml_target</name></name> = <name><name>xml</name>-&gt;<name>xml_target</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>list</name>-&gt;<name>xml_targetprop</name></name> = <name><name>xml</name>-&gt;<name>xml_targetprop</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> = <call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> = <name>i</name> + <name>n</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>XMLArraySetCapacity</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>list</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kid</name></expr>)</condition><then>
                <expr_stmt><expr><call><name>XMLARRAY_SET_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>list</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name> + <name>j</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></for>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>list</name>-&gt;<name>xml_target</name></name> = <name><name>xml</name>-&gt;<name>parent</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_PROCESSING_INSTRUCTION</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>list</name>-&gt;<name>xml_targetprop</name></name> = <name>NULL</name></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><name><name>list</name>-&gt;<name>xml_targetprop</name></name> = <name><name>xml</name>-&gt;<name>name</name></name></expr>;</expr_stmt></else></if>
    <if>if <condition>(<expr>!<call><name>XMLARRAY_ADD_MEMBER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>list</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/* ECMA-357 9.1.1.7 XML [[DeepCopy]] and 9.2.1.7 XMLList [[DeepCopy]]. */</comment>
<function_decl><type><specifier>static</specifier> <name>JSXML</name> *</type>
<name>DeepCopyInLRS</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>flags</name></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>JSXML</name> *</type>
<name>DeepCopy</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>flags</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>copy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <comment type="block">/* Our caller may not be protecting newborns with a local root scope. */</comment>
    <if>if <condition>(<expr>!<call><name>js_EnterLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name>copy</name> = <call><name>DeepCopyInLRS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>copy</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>obj</name></expr>)</condition><then> <block>{
            <comment type="block">/* Caller provided the object for this copy, hook 'em up. */</comment>
            <expr_stmt><expr><name>ok</name> = <call><name>JS_SetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ok</name></expr>)</condition><then>
                <expr_stmt><expr><name><name>copy</name>-&gt;<name>object</name></name> = <name>obj</name></expr>;</expr_stmt></then></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>ok</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
            <expr_stmt><expr><name>copy</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
    }</block></then></if>
    <expr_stmt><expr><call><name>js_LeaveLocalRootScopeWithResult</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>jsval</name>) <name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>copy</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * (i) We must be in a local root scope (InLRS).
 * (ii) parent must have a rooted object.
 * (iii) from's owning object must be locked if not thread-local.
 */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>DeepCopySetInLRS</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXMLArray</name> *</type><name>from</name></decl></param>, <param><decl><type><name>JSXMLArray</name> *</type><name>to</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>parent</name></decl></param>,
                 <param><decl><type><name>uintN</name></type> <name>flags</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uint32</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArrayCursor</name></type> <name>cursor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>kid</name></decl>, *<decl><type ref="prev"/><name>kid2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>localRootStack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>n</name> = <name><name>from</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>XMLArraySetCapacity</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>XMLArrayCursorInit</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <while>while <condition>(<expr>(<name>kid</name> = (<name>JSXML</name> *) <call><name>XMLArrayCursorNext</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
        <if>if <condition>(<expr>(<name>flags</name> &amp; <name>XSF_IGNORE_COMMENTS</name>) &amp;&amp;
            <name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_COMMENT</name></expr>)</condition><then> <block>{
            <continue>continue;</continue>
        }</block></then></if>
        <if>if <condition>(<expr>(<name>flags</name> &amp; <name>XSF_IGNORE_PROCESSING_INSTRUCTIONS</name>) &amp;&amp;
            <name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_PROCESSING_INSTRUCTION</name></expr>)</condition><then> <block>{
            <continue>continue;</continue>
        }</block></then></if>
        <if>if <condition>(<expr>(<name>flags</name> &amp; <name>XSF_IGNORE_WHITESPACE</name>) &amp;&amp;
            (<name><name>kid</name>-&gt;<name>xml_flags</name></name> &amp; <name>XMLF_WHITESPACE_TEXT</name>)</expr>)</condition><then> <block>{
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><name>kid2</name> = <call><name>DeepCopyInLRS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>kid2</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>to</name>-&gt;<name>length</name></name> = <name>j</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>

        <if>if <condition>(<expr>(<name>flags</name> &amp; <name>XSF_IGNORE_WHITESPACE</name>) &amp;&amp;
            <name>n</name> &gt; 1 &amp;&amp; <name><name>kid2</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_TEXT</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>str</name> = <call><name>ChompXMLWhitespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>kid2</name>-&gt;<name>xml_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>to</name>-&gt;<name>length</name></name> = <name>j</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name><name>kid2</name>-&gt;<name>xml_value</name></name> = <name>str</name></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>XMLARRAY_SET_MEMBER</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>kid2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>++<name>j</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>parent</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_LIST</name></expr>)</condition><then>
            <expr_stmt><expr><name><name>kid2</name>-&gt;<name>parent</name></name> = <name>parent</name></expr>;</expr_stmt></then></if>
    }</block></while>
    <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>j</name> &lt; <name>n</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>XMLArrayTrim</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSXML</name> *</type>
<name>DeepCopyInLRS</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>flags</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>copy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>, *<decl><type ref="prev"/><name>ns2</name></decl>;</decl_stmt>

    <comment type="block">/* Our caller must be protecting newborn objects. */</comment>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>localRootStack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>copy</name> = <call><name>js_NewXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>xml_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>copy</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name>qn</name> = <name><name>xml</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>qn</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>qn</name> = <call><name>js_NewXMLQName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>qn</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>qn</name>-&gt;<name>prefix</name></name></expr></argument>, <argument><expr><name><name>qn</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>qn</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
            <goto>goto <name>out</name>;</goto>
        }</block></then></if>
    }</block></then></if>
    <expr_stmt><expr><name><name>copy</name>-&gt;<name>name</name></name> = <name>qn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>copy</name>-&gt;<name>xml_flags</name></name> = <name><name>xml</name>-&gt;<name>xml_flags</name></name></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>JSXML_HAS_VALUE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>copy</name>-&gt;<name>xml_value</name></name> = <name><name>xml</name>-&gt;<name>xml_value</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>ok</name> = <call><name>DeepCopySetInLRS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr>&amp;<name><name>copy</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
            <goto>goto <name>out</name>;</goto></then></if>

        <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>copy</name>-&gt;<name>xml_target</name></name> = <name><name>xml</name>-&gt;<name>xml_target</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>copy</name>-&gt;<name>xml_targetprop</name></name> = <name><name>xml</name>-&gt;<name>xml_targetprop</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>n</name> = <name><name>xml</name>-&gt;<name>xml_namespaces</name>.<name>length</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ok</name> = <call><name>XMLArraySetCapacity</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>copy</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                <goto>goto <name>out</name>;</goto></then></if>
            <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>ns</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then>
                    <continue>continue;</continue></then></if>
                <expr_stmt><expr><name>ns2</name> = <call><name>js_NewXMLNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>ns</name>-&gt;<name>prefix</name></name></expr></argument>, <argument><expr><name><name>ns</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>ns</name>-&gt;<name>declared</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ns2</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>copy</name>-&gt;<name>xml_namespaces</name>.<name>length</name></name> = <name>i</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
                    <goto>goto <name>out</name>;</goto>
                }</block></then></if>
                <expr_stmt><expr><call><name>XMLARRAY_SET_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>copy</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ns2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <expr_stmt><expr><name>ok</name> = <call><name>DeepCopySetInLRS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_attrs</name></name></expr></argument>, <argument><expr>&amp;<name><name>copy</name>-&gt;<name>xml_attrs</name></name></expr></argument>, <argument><expr><name>copy</name></expr></argument>,
                                  <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                <goto>goto <name>out</name>;</goto></then></if>
        }</block></else></if>
    }</block></else></if>

<label><name>out</name>:</label>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><name>copy</name></expr>;</return>
}</block></function>

<comment type="block">/* ECMA-357 9.1.1.4 XML [[DeleteByIndex]]. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>DeleteByIndex</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>index</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>kid</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>JSXML_HAS_KIDS</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> &amp;&amp; <name>index</name> &lt; <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>kid</name></expr>)</condition><then>
            <expr_stmt><expr><name><name>kid</name>-&gt;<name>parent</name></name> = <name>NULL</name></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name>XMLArrayDelete</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<typedef>typedef <function_decl><type><name>JSBool</name></type> (*<name>JSXMLNameMatcher</name>)<parameter_list>(<param><decl><type><name>JSXMLQName</name> *</type><name>nameqn</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>MatchAttrName</name><parameter_list>(<param><decl><type><name>JSXMLQName</name> *</type><name>nameqn</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>attr</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>attrqn</name> <init>= <expr><name><name>attr</name>-&gt;<name>name</name></name></expr></init></decl>;</decl_stmt>

    <return>return <expr>(<call><name>IS_STAR</name><argument_list>(<argument><expr><name><name>nameqn</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call> ||
            <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>attrqn</name>-&gt;<name>localName</name></name></expr></argument>, <argument><expr><name><name>nameqn</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call>) &amp;&amp;
           (!<name><name>nameqn</name>-&gt;<name>uri</name></name> ||
            <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>attrqn</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>nameqn</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>MatchElemName</name><parameter_list>(<param><decl><type><name>JSXMLQName</name> *</type><name>nameqn</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>elem</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr>(<call><name>IS_STAR</name><argument_list>(<argument><expr><name><name>nameqn</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call> ||
            (<name><name>elem</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name> &amp;&amp;
             <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>elem</name>-&gt;<name>name</name>-&gt;<name>localName</name></name></expr></argument>, <argument><expr><name><name>nameqn</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call>)) &amp;&amp;
           (!<name><name>nameqn</name>-&gt;<name>uri</name></name> ||
            (<name><name>elem</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name> &amp;&amp;
             <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>elem</name>-&gt;<name>name</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>nameqn</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call>))</expr>;</return>
}</block></function>

<comment type="block">/* ECMA-357 9.1.1.8 XML [[Descendants]] and 9.2.1.8 XMLList [[Descendants]]. */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>DescendantsHelper</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>JSXMLQName</name> *</type><name>nameqn</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>list</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>attr</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name> &amp;&amp;
        <call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>nameqn</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call> == &amp;<name>js_AttributeNameClass</name></expr>)</condition><then> <block>{
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>xml</name>-&gt;<name>xml_attrs</name>.<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>attr</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_attrs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>attr</name> &amp;&amp; <call><name>MatchAttrName</name><argument_list>(<argument><expr><name>nameqn</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>!<call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            }</block></then></if>
        }</block></for>
    }</block></then></if>

    <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>kid</name></expr>)</condition><then>
            <continue>continue;</continue></then></if>
        <if>if <condition>(<expr><call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>nameqn</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call> != &amp;<name>js_AttributeNameClass</name> &amp;&amp;
            <call><name>MatchElemName</name><argument_list>(<argument><expr><name>nameqn</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>DescendantsHelper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>, <argument><expr><name>nameqn</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></for>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSXML</name> *</type>
<name>Descendants</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>id</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsid</name></type> <name>funid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>nameqn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>listobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>list</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>nameqn</name> = <call><name>ToXMLName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>funid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>nameqn</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>listobj</name> = <call><name>js_NewXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>listobj</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name>list</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>listobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>funid</name></expr>)</condition><then>
        <return>return <expr><name>list</name></expr>;</return></then></if>

    <comment type="block">/*
     * Protect nameqn's object and strings from GC by linking list to it
     * temporarily.  The cx-&gt;newborn[GCX_OBJECT] GC root protects listobj,
     * which protects list.  Any other object allocations occuring beneath
     * DescendantsHelper use local roots.
     */</comment>
    <expr_stmt><expr><name><name>list</name>-&gt;<name>name</name></name> = <name>nameqn</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>js_EnterLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kid</name> &amp;&amp; <name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ok</name> = <call><name>DescendantsHelper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>, <argument><expr><name>nameqn</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <break>break;</break></then></if>
            }</block></then></if>
        }</block></for>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>ok</name> = <call><name>DescendantsHelper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>nameqn</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>js_LeaveLocalRootScopeWithResult</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>jsval</name>) <name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>list</name>-&gt;<name>name</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>list</name></expr>;</return>
}</block></function>

<function_decl><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_equality</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>, <param><decl><type><name>JSBool</name> *</type><name>bp</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Recursive (JSXML *) parameterized version of Equals. */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>XMLEquals</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>vxml</name></decl></param>, <param><decl><type><name>JSBool</name> *</type><name>bp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>, *<decl><type ref="prev"/><name>vqn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArrayCursor</name></type> <name>cursor</name></decl>, <decl><type ref="prev"/><name>vcursor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>kid</name></decl>, *<decl><type ref="prev"/><name>vkid</name></decl>, *<decl><type ref="prev"/><name>attr</name></decl>, *<decl><type ref="prev"/><name>vattr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>xobj</name></decl>, *<decl><type ref="prev"/><name>vobj</name></decl>;</decl_stmt>

<label><name>retry</name>:</label>
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> != <name><name>vxml</name>-&gt;<name>xml_class</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name> &amp;&amp; <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name> == 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>xml</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>xml</name></expr>)</condition><then>
                <goto>goto <name>retry</name>;</goto></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>vxml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name> &amp;&amp; <name><name>vxml</name>-&gt;<name>xml_kids</name>.<name>length</name></name> == 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>vxml</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>vxml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>vxml</name></expr>)</condition><then>
                <goto>goto <name>retry</name>;</goto></then></if>
        }</block></then></if>
        <expr_stmt><expr>*<name>bp</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>qn</name> = <name><name>xml</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>vqn</name> = <name><name>vxml</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>qn</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>bp</name> = <name>vqn</name> &amp;&amp;
              <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>qn</name>-&gt;<name>localName</name></name></expr></argument>, <argument><expr><name><name>vqn</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call> &amp;&amp;
              <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>qn</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>vqn</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr>*<name>bp</name> = <name>vqn</name> == <name>NULL</name></expr>;</expr_stmt>
    }</block></else></if>
    <if>if <condition>(<expr>!*<name>bp</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name>JSXML_HAS_VALUE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>bp</name> = <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>xml</name>-&gt;<name>xml_value</name></name></expr></argument>, <argument><expr><name><name>vxml</name>-&gt;<name>xml_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name> != <name><name>vxml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>bp</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>XMLArrayCursorInit</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>XMLArrayCursorInit</name><argument_list>(<argument><expr>&amp;<name>vcursor</name></expr></argument>, <argument><expr>&amp;<name><name>vxml</name>-&gt;<name>xml_kids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init>;</init><condition>;</condition><incr/>) <block>{
            <expr_stmt><expr><name>kid</name> = (<name>JSXML</name> *) <call><name>XMLArrayCursorNext</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>vkid</name> = (<name>JSXML</name> *) <call><name>XMLArrayCursorNext</name><argument_list>(<argument><expr>&amp;<name>vcursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>kid</name> || !<name>vkid</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>bp</name> = !<name>kid</name> &amp;&amp; !<name>vkid</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>xobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>vobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vkid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ok</name> = <name>xobj</name> &amp;&amp; <name>vobj</name> &amp;&amp;
                 <call><name>xml_equality</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xobj</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>vobj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ok</name> || !*<name>bp</name></expr>)</condition><then>
                <break>break;</break></then></if>
        }</block></for>
        <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr>&amp;<name>vcursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

        <if>if <condition>(<expr>*<name>bp</name> &amp;&amp; <name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>n</name> = <name><name>xml</name>-&gt;<name>xml_attrs</name>.<name>length</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>n</name> != <name><name>vxml</name>-&gt;<name>xml_attrs</name>.<name>length</name></name></expr>)</condition><then>
                <expr_stmt><expr>*<name>bp</name> = <name>JS_FALSE</name></expr>;</expr_stmt></then></if>
            <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr>*<name>bp</name> &amp;&amp; <name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>attr</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_attrs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>attr</name></expr>)</condition><then>
                    <continue>continue;</continue></then></if>
                <expr_stmt><expr><name>j</name> = <call><name>XMLARRAY_FIND_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>vxml</name>-&gt;<name>xml_attrs</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>attr_identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>j</name> == <name>XML_NOT_FOUND</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr>*<name>bp</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
                <expr_stmt><expr><name>vattr</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>vxml</name>-&gt;<name>xml_attrs</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>vattr</name></expr>)</condition><then>
                    <continue>continue;</continue></then></if>
                <expr_stmt><expr>*<name>bp</name> = <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>attr</name>-&gt;<name>xml_value</name></name></expr></argument>, <argument><expr><name><name>vattr</name>-&gt;<name>xml_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
    }</block></else></if></else></if>

    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/* ECMA-357 9.1.1.9 XML [[Equals]] and 9.2.1.9 XMLList [[Equals]]. */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Equals</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>, <param><decl><type><name>JSBool</name> *</type><name>bp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>vobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>vxml</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>bp</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name> == 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>vxml</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>vxml</name></expr>)</condition><then>
                    <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
                <expr_stmt><expr><name>vobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vxml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>vobj</name></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
                <return>return <expr><call><name><name>js_XMLObjectOps</name>.<name>equality</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vobj</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> &amp;&amp; <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name> == 0</expr>)</condition><then>
                <expr_stmt><expr>*<name>bp</name> = <name>JS_TRUE</name></expr>;</expr_stmt></then></if>
        }</block></then></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>vobj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>OBJECT_IS_XML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vobj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>bp</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>vxml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name>XMLEquals</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>vxml</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        }</block></else></if>
    }</block></else></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>CheckCycle</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>kid</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>kid</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <do>do <block>{
        <if>if <condition>(<expr><name>xml</name> == <name>kid</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><name>JSMSG_CYCLIC_VALUE</name></expr></argument>, <argument><expr><name>js_XML_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>
    }</block> while <condition>(<expr>(<name>xml</name> = <name><name>xml</name>-&gt;<name>parent</name></name>) != <name>NULL</name></expr>)</condition>;</do>

    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/* ECMA-357 9.1.1.11 XML [[Insert]]. */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Insert</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>i</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uint32</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>vxml</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>vobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>JSXML_HAS_KIDS</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>n</name> = 1</expr>;</expr_stmt>
    <expr_stmt><expr><name>vxml</name> = <name>NULL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>vobj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>OBJECT_IS_XML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vobj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>vxml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>vxml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>n</name> = <name><name>vxml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>n</name> == 0</expr>)</condition><then>
                    <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
                <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                    <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>vxml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<name>kid</name></expr>)</condition><then>
                        <continue>continue;</continue></then></if>
                    <if>if <condition>(<expr>!<call><name>CheckCycle</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
                }</block></for>
            }</block></then> <else>else <if>if <condition>(<expr><name><name>vxml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then> <block>{
                <comment type="block">/* OPTION: enforce that descendants have superset namespaces. */</comment>
                <if>if <condition>(<expr>!<call><name>CheckCycle</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>vxml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            }</block></then></if></else></if>
        }</block></then></if>
    }</block></then></if>
    <if>if <condition>(<expr>!<name>vxml</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>str</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

        <expr_stmt><expr><name>vxml</name> = <call><name>js_NewXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>vxml</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>vxml</name>-&gt;<name>xml_value</name></name> = <name>str</name></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>i</name> &gt; <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>i</name> = <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</expr_stmt></then></if>

    <if>if <condition>(<expr>!<call><name>XMLArrayInsert</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name><name>vxml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
        <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>vxml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>kid</name></expr>)</condition><then>
                <continue>continue;</continue></then></if>
            <expr_stmt><expr><name><name>kid</name>-&gt;<name>parent</name></name> = <name>xml</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>XMLARRAY_SET_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name> + <name>j</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* OPTION: enforce that descendants have superset namespaces. */</comment>
        }</block></for>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name><name>vxml</name>-&gt;<name>parent</name></name> = <name>xml</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>XMLARRAY_SET_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>vxml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>IndexToIdVal</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>index</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>idvp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>index</name> &lt;= <name>JSVAL_INT_MAX</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>idvp</name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>str</name> = <call><name>js_NumberToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>jsdouble</name>) <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr>*<name>idvp</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/* ECMA-357 9.1.1.12 XML [[Replace]]. */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>Replace</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>i</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uint32</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>vxml</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>vobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>JSXML_HAS_KIDS</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <comment type="block">/*
     * 9.1.1.12
     * [[Replace]] handles _i &gt;= x.[[Length]]_ by incrementing _x.[[Length]_.
     * It should therefore constrain callers to pass in _i &lt;= x.[[Length]]_.
     */</comment>
    <expr_stmt><expr><name>n</name> = <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>i</name> &gt; <name>n</name></expr>)</condition><then>
        <expr_stmt><expr><name>i</name> = <name>n</name></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name>vxml</name> = <name>NULL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>vobj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>OBJECT_IS_XML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>vxml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

    <switch>switch <condition>(<expr><name>vxml</name> ? <name><name>vxml</name>-&gt;<name>xml_class</name></name> : <name>JSXML_CLASS_LIMIT</name></expr>)</condition> <block>{
      <case>case <expr><name>JSXML_CLASS_ELEMENT</name></expr>:
        <comment type="block">/* OPTION: enforce that descendants have superset namespaces. */</comment>
        <if>if <condition>(<expr>!<call><name>CheckCycle</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>vxml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
      </case><case>case <expr><name>JSXML_CLASS_COMMENT</name></expr>:
      </case><case>case <expr><name>JSXML_CLASS_PROCESSING_INSTRUCTION</name></expr>:
      </case><case>case <expr><name>JSXML_CLASS_TEXT</name></expr>:
        <goto>goto <name>do_replace</name>;</goto>

      </case><case>case <expr><name>JSXML_CLASS_LIST</name></expr>:
        <if>if <condition>(<expr><name>i</name> &lt; <name>n</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>DeleteByIndex</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr>!<call><name>Insert</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <break>break;</break>

      </case><default>default:
        <expr_stmt><expr><name>str</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

        <expr_stmt><expr><name>vxml</name> = <call><name>js_NewXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>vxml</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>vxml</name>-&gt;<name>xml_value</name></name> = <name>str</name></expr>;</expr_stmt>

      <label><name>do_replace</name>:</label>
        <expr_stmt><expr><name><name>vxml</name>-&gt;<name>parent</name></name> = <name>xml</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>i</name> &lt; <name>n</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kid</name></expr>)</condition><then>
                <expr_stmt><expr><name><name>kid</name>-&gt;<name>parent</name></name> = <name>NULL</name></expr>;</expr_stmt></then></if>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>XMLARRAY_ADD_MEMBER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>vxml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <break>break;</break>
    </default>}</block></switch>

    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/* ECMA-357 9.1.1.3 XML [[Delete]], 9.2.1.3 XML [[Delete]] qname cases. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>DeleteNamedProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>JSXMLQName</name> *</type><name>nameqn</name></decl></param>,
                    <param><decl><type><name>JSBool</name></type> <name>attributes</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLArray</name> *</type><name>array</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>deleteCount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>kid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNameMatcher</name></type> <name>matcher</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>array</name> = &amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr>;</expr_stmt>
        <for>for (<init><expr><name>index</name> = 0</expr>;</init> <condition><expr><name>index</name> &lt; <name><name>array</name>-&gt;<name>length</name></name></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kid</name> &amp;&amp; <name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then>
                <expr_stmt><expr><call><name>DeleteNamedProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>, <argument><expr><name>nameqn</name></expr></argument>, <argument><expr><name>attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></for>
    }</block></then> <else>else <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>attributes</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>array</name> = &amp;<name><name>xml</name>-&gt;<name>xml_attrs</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>matcher</name> = <name>MatchAttrName</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>array</name> = &amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>matcher</name> = <name>MatchElemName</name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>deleteCount</name> = 0</expr>;</expr_stmt>
        <for>for (<init><expr><name>index</name> = 0</expr>;</init> <condition><expr><name>index</name> &lt; <name><name>array</name>-&gt;<name>length</name></name></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kid</name> &amp;&amp; <call><name>matcher</name><argument_list>(<argument><expr><name>nameqn</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>kid</name>-&gt;<name>parent</name></name> = <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>XMLArrayDelete</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr>++<name>deleteCount</name></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>deleteCount</name> != 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>XMLARRAY_SET_MEMBER</name><argument_list>(<argument><expr><name>array</name></expr></argument>,
                                    <argument><expr><name>index</name> - <name>deleteCount</name></expr></argument>,
                                    <argument><expr><name><name>array</name>-&gt;<name>vector</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></for>
        <expr_stmt><expr><name><name>array</name>-&gt;<name>length</name></name> -= <name>deleteCount</name></expr>;</expr_stmt>
    }</block></then></if></else></if>
}</block></function>

<comment type="block">/* ECMA-357 9.2.1.3 index case. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>DeleteListElement</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>index</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>kid</name></decl>, *<decl><type ref="prev"/><name>parent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>kidIndex</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>index</name> &lt; <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>kid</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>parent</name> = <name><name>kid</name>-&gt;<name>parent</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>parent</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>parent</name> != <name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSXML_HAS_KIDS</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ATTRIBUTE</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>DeleteNamedProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>kid</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>kidIndex</name> = <call><name>XMLARRAY_FIND_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>parent</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>kid</name></expr></argument>,
                                                    <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>kidIndex</name> != <name>XML_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>DeleteByIndex</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>kidIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
            <expr_stmt><expr><call><name>XMLArrayDelete</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>SyncInScopeNamespaces</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLArray</name> *</type><name>nsarray</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>nsarray</name> = &amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr>(<name>xml</name> = <name><name>xml</name>-&gt;<name>parent</name></name>) != <name>NULL</name></expr>)</condition> <block>{
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>xml</name>-&gt;<name>xml_namespaces</name>.<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>ns</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ns</name> &amp;&amp; !<call><name>XMLARRAY_HAS_MEMBER</name><argument_list>(<argument><expr><name>nsarray</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>namespace_identity</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>!<call><name>XMLARRAY_APPEND</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nsarray</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            }</block></then></if>
        }</block></for>
    }</block></while>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>GetNamedProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>JSXMLQName</name>*</type> <name>nameqn</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>list</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLArray</name> *</type><name>array</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNameMatcher</name></type> <name>matcher</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArrayCursor</name></type> <name>cursor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>kid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>attrs</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>XMLArrayCursorInit</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr>(<name>kid</name> = (<name>JSXML</name> *) <call><name>XMLArrayCursorNext</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
            <if>if <condition>(<expr><name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name> &amp;&amp;
                !<call><name>GetNamedProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>, <argument><expr><name>nameqn</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
        }</block></while>
        <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>kid</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></then> <else>else <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>attrs</name> = (<call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>nameqn</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call> == &amp;<name>js_AttributeNameClass</name>)</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>attrs</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>array</name> = &amp;<name><name>xml</name>-&gt;<name>xml_attrs</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>matcher</name> = <name>MatchAttrName</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>array</name> = &amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>matcher</name> = <name>MatchElemName</name></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name>XMLArrayCursorInit</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr>(<name>kid</name> = (<name>JSXML</name> *) <call><name>XMLArrayCursorNext</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
            <if>if <condition>(<expr><call><name>matcher</name><argument_list>(<argument><expr><name>nameqn</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>!<name>attrs</name> &amp;&amp;
                    <name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name> &amp;&amp;
                    !<call><name>SyncInScopeNamespaces</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <break>break;</break>
                }</block></then></if>
                <if>if <condition>(<expr>!<call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <break>break;</break></then></if>
            }</block></then></if>
        }</block></while>
        <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>kid</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></then></if></else></if>

    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/* ECMA-357 9.1.1.1 XML [[Get]] and 9.2.1.1 XMLList [[Get]]. */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>GetProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>list</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>kidobj</name></decl>, *<decl><type ref="prev"/><name>listobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>nameqn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsid</name></type> <name>funid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name><name>roots</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSTempValueRooter</name></type> <name>tvr</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetInstancePrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name>js_XMLClass</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name>js_IdIsIndex</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>vp</name> = (<name>index</name> == 0) ? <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> : <name>JSVAL_VOID</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="block">/*
             * ECMA-357 9.2.1.1 starts here.
             *
             * Erratum: 9.2 is not completely clear that indexed properties
             * correspond to kids, but that's what it seems to say, and it's
             * what any sane user would want.
             */</comment>
            <if>if <condition>(<expr><name>index</name> &lt; <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>kid</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr>*<name>vp</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
                    <return>return <expr><name>JS_TRUE</name></expr>;</return>
                }</block></then></if>
                <expr_stmt><expr><name>kidobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>kidobj</name></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

                <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>kidobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr>*<name>vp</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * ECMA-357 9.2.1.1/9.1.1.1 qname case.
     */</comment>
    <expr_stmt><expr><name>nameqn</name> = <call><name>ToXMLName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>funid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>nameqn</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name>funid</name></expr>)</condition><then>
        <return>return <expr><call><name>js_GetXMLFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>funid</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <expr_stmt><expr><name><name>roots</name><index>[<expr>0</expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>nameqn</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_PUSH_TEMP_ROOT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>roots</name></expr></argument>, <argument><expr>&amp;<name>tvr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>listobj</name> = <call><name>js_NewXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>listobj</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>roots</name><index>[<expr>1</expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>listobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tvr</name>.<name>count</name></name>++</expr>;</expr_stmt>

        <expr_stmt><expr><name>list</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>listobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>GetNamedProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>nameqn</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>listobj</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="block">/*
             * Erratum: ECMA-357 9.1.1.1 misses that [[Append]] sets the
             * given list's [[TargetProperty]] to the property that is being
             * appended. This means that any use of the internal [[Get]]
             * property returns a list which, when used by e.g. [[Insert]]
             * duplicates the last element matched by id. See bug 336921.
             */</comment>
            <expr_stmt><expr><name><name>list</name>-&gt;<name>xml_target</name></name> = <name>xml</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>list</name>-&gt;<name>xml_targetprop</name></name> = <name>nameqn</name></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>listobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>JS_POP_TEMP_ROOT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>tvr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>listobj</name> != <name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSXML</name> *</type>
<name>CopyOnWrite</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>xml</name>-&gt;<name>object</name></name> != <name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>xml</name> = <call><name>DeepCopy</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>xml</name>-&gt;<name>object</name></name> == <name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>xml</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_COPY_ON_WRITE</name><parameter_list>(<param><type><name>cx</name></type></param>,<param><type><name>xml</name></type></param>,<param><type><name>obj</name></type></param>)</parameter_list></cpp:macro>                                       \
    <cpp:value>(xml-&gt;object == obj ? xml : CopyOnWrite(cx, xml, obj))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>JSString</name> *</type>
<name>KidToString</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>index</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>kid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>kidobj</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>kid</name></expr>)</condition><then>
        <return>return <expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr>;</return></then></if>
    <expr_stmt><expr><name>kidobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>kidobj</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>kidobj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Forward declared -- its implementation uses other statics that call it. */</comment>
<function_decl><type><specifier>static</specifier> <name>JSBool</name></type>
<name>ResolveValue</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>list</name></decl></param>, <param><decl><type><name>JSXML</name> **</type><name>result</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* ECMA-357 9.1.1.2 XML [[Put]] and 9.2.1.2 XMLList [[Put]]. */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>PutProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>, <decl><type ref="prev"/><name>primitiveAssign</name></decl>;</decl_stmt>
    <enum>enum <block>{ <decl><name>OBJ_ROOT</name></decl>, <decl><name>ID_ROOT</name></decl>, <decl><name>VAL_ROOT</name></decl> }</block>;</enum>
    <decl_stmt><decl><type><name>jsval</name></type> <name><name>roots</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSTempValueRooter</name></type> <name>tvr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>vxml</name></decl>, *<decl><type ref="prev"/><name>rxml</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>, *<decl><type ref="prev"/><name>attr</name></decl>, *<decl><type ref="prev"/><name>parent</name></decl>, *<decl><type ref="prev"/><name>copy</name></decl>, *<decl><type ref="prev"/><name>kid2</name></decl>, *<decl><type ref="prev"/><name>match</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>vobj</name></decl>, *<decl><type ref="prev"/><name>nameobj</name></decl>, *<decl><type ref="prev"/><name>attrobj</name></decl>, *<decl><type ref="prev"/><name>parentobj</name></decl>, *<decl><type ref="prev"/><name>kidobj</name></decl>, *<decl><type ref="prev"/><name>copyobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>targetprop</name></decl>, *<decl><type ref="prev"/><name>nameqn</name></decl>, *<decl><type ref="prev"/><name>attrqn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>matchIndex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>attrval</name></decl>, <decl><type ref="prev"/><name>nsval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsid</name></type> <name>funid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>left</name></decl>, *<decl><type ref="prev"/><name>right</name></decl>, *<decl><type ref="prev"/><name>space</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetInstancePrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name>js_XMLClass</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>xml</name> = <call><name>CHECK_COPY_ON_WRITE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <comment type="block">/* Precompute vxml for 9.2.1.2 2(c)(vii)(2-3) and 2(d) and 9.1.1.2 1. */</comment>
    <expr_stmt><expr><name>vxml</name> = <name>NULL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>vobj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>OBJECT_IS_XML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>vxml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

    <comment type="block">/* Control flow after here must exit via label out. */</comment>
    <expr_stmt><expr><name>ok</name> = <call><name>js_EnterLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>roots</name><index>[<expr><name>OBJ_ROOT</name></expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>roots</name><index>[<expr><name>ID_ROOT</name></expr>]</index></name> = <name>id</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>roots</name><index>[<expr><name>VAL_ROOT</name></expr>]</index></name> = *<name>vp</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_PUSH_TEMP_ROOT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>roots</name></expr></argument>, <argument><expr>&amp;<name>tvr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>js_IdIsIndex</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
            <comment type="block">/* See NOTE in spec: this variation is reserved for future use. */</comment>
            <expr_stmt><expr><call><name>ReportBadXMLName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>bad</name>;</goto>
        }</block></then></if>

        <comment type="block">/*
         * Step 1 of ECMA-357 9.2.1.2 index case sets i to the property index.
         */</comment>
        <expr_stmt><expr><name>i</name> = <name>index</name></expr>;</expr_stmt>

        <comment type="block">/* 2(a-b). */</comment>
        <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_target</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ok</name> = <call><name>ResolveValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>xml_target</name></name></expr></argument>, <argument><expr>&amp;<name>rxml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                <goto>goto <name>out</name>;</goto></then></if>
            <if>if <condition>(<expr>!<name>rxml</name></expr>)</condition><then>
                <goto>goto <name>out</name>;</goto></then></if>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>rxml</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>rxml</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="block">/* 2(c). */</comment>
        <if>if <condition>(<expr><name>index</name> &gt;= <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>)</condition><then> <block>{
            <comment type="block">/* 2(c)(i). */</comment>
            <if>if <condition>(<expr><name>rxml</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>rxml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name><name>rxml</name>-&gt;<name>xml_kids</name>.<name>length</name></name> != 1</expr>)</condition><then>
                        <goto>goto <name>out</name>;</goto></then></if>
                    <expr_stmt><expr><name>rxml</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>rxml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<name>rxml</name></expr>)</condition><then>
                        <goto>goto <name>out</name>;</goto></then></if>
                    <expr_stmt><expr><name>ok</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rxml</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                        <goto>goto <name>out</name>;</goto></then></if>
                }</block></then></if>

                <comment type="block">/*
                 * Erratum: ECMA-357 9.2.1.2 step 2(c)(ii) sets
                 * _y.[[Parent]] = r_ where _r_ is the result of
                 * [[ResolveValue]] called on _x.[[TargetObject]] in
                 * 2(a)(i).  This can result in text parenting text:
                 *
                 *    var MYXML = new XML();
                 *    MYXML.appendChild(new XML("&lt;TEAM&gt;Giants&lt;/TEAM&gt;"));
                 *
                 * (testcase from Werner Sharp &lt;wsharp@macromedia.com&gt;).
                 *
                 * To match insertChildAfter, insertChildBefore,
                 * prependChild, and setChildren, we should silently
                 * do nothing in this case.
                 */</comment>
                <if>if <condition>(<expr>!<call><name>JSXML_HAS_KIDS</name><argument_list>(<argument><expr><name>rxml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <goto>goto <name>out</name>;</goto></then></if>
            }</block></then></if>

            <comment type="block">/* 2(c)(ii) is distributed below as several js_NewXML calls. */</comment>
            <expr_stmt><expr><name>targetprop</name> = <name><name>xml</name>-&gt;<name>xml_targetprop</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>targetprop</name> || <call><name>IS_STAR</name><argument_list>(<argument><expr><name><name>targetprop</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="block">/* 2(c)(iv)(1-2), out of order w.r.t. 2(c)(iii). */</comment>
                <expr_stmt><expr><name>kid</name> = <call><name>js_NewXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>kid</name></expr>)</condition><then>
                    <goto>goto <name>bad</name>;</goto></then></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>nameobj</name> = <call><name>js_GetXMLQNameObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>targetprop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>nameobj</name></expr>)</condition><then>
                    <goto>goto <name>bad</name>;</goto></then></if>
                <if>if <condition>(<expr><call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nameobj</name></expr></argument>)</argument_list></call> == &amp;<name>js_AttributeNameClass</name></expr>)</condition><then> <block>{
                    <comment type="block">/*
                     * 2(c)(iii)(1-3).
                     * Note that rxml can't be null here, because target
                     * and targetprop are non-null.
                     */</comment>
                    <expr_stmt><expr><name>ok</name> = <call><name>GetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>rxml</name>-&gt;<name>object</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>attrval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                        <goto>goto <name>out</name>;</goto></then></if>
                    <if>if <condition>(<expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>attrval</name></expr></argument>)</argument_list></call></expr>)</condition><then>    <comment type="block">/* no such attribute */</comment>
                        <goto>goto <name>out</name>;</goto></then></if>
                    <expr_stmt><expr><name>attrobj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>attrval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>attr</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>attrobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
                        <goto>goto <name>out</name>;</goto></then></if>

                    <expr_stmt><expr><name>kid</name> = <call><name>js_NewXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <comment type="block">/* 2(c)(v). */</comment>
                    <expr_stmt><expr><name>kid</name> = <call><name>js_NewXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_ELEMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <if>if <condition>(<expr>!<name>kid</name></expr>)</condition><then>
                    <goto>goto <name>bad</name>;</goto></then></if>

                <comment type="block">/* An important bit of 2(c)(ii). */</comment>
                <expr_stmt><expr><name><name>kid</name>-&gt;<name>name</name></name> = <name>targetprop</name></expr>;</expr_stmt>
            }</block></else></if>

            <comment type="block">/* Final important bit of 2(c)(ii). */</comment>
            <expr_stmt><expr><name><name>kid</name>-&gt;<name>parent</name></name> = <name>rxml</name></expr>;</expr_stmt>

            <comment type="block">/* 2(c)(vi-vii). */</comment>
            <expr_stmt><expr><name>i</name> = <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>kid</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_ATTRIBUTE</name></expr>)</condition><then> <block>{
                <comment type="block">/*
                 * 2(c)(vii)(1) tests whether _y.[[Parent]]_ is not null.
                 * y.[[Parent]] is here called kid-&gt;parent, which we know
                 * from 2(c)(ii) is _r_, here called rxml.  So let's just
                 * test that!  Erratum, the spec should be simpler here.
                 */</comment>
                <if>if <condition>(<expr><name>rxml</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSXML_HAS_KIDS</name><argument_list>(<argument><expr><name>rxml</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>n</name> = <name><name>rxml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>j</name> = <name>n</name> - 1</expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>n</name> != 0 &amp;&amp; <name>i</name> != 0</expr>)</condition><then> <block>{
                        <for>for (<init><expr><name>n</name> = <name>j</name></expr>, <expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                            <if>if <condition>(<expr><name><name>rxml</name>-&gt;<name>xml_kids</name>.<name>vector</name><index>[<expr><name>j</name></expr>]</index></name> ==
                                <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>vector</name><index>[<expr><name>i</name>-1</expr>]</index></name></expr>)</condition><then> <block>{
                                <break>break;</break>
                            }</block></then></if>
                        }</block></for>
                    }</block></then></if>

                    <expr_stmt><expr><name>kidobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<name>kidobj</name></expr>)</condition><then>
                        <goto>goto <name>bad</name>;</goto></then></if>
                    <expr_stmt><expr><name>ok</name> = <call><name>Insert</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rxml</name></expr></argument>, <argument><expr><name>j</name> + 1</expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>kidobj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                        <goto>goto <name>out</name>;</goto></then></if>
                }</block></then></if>

                <comment type="block">/*
                 * 2(c)(vii)(2-3).
                 * Erratum: [[PropertyName]] in 2(c)(vii)(3) must be a
                 * typo for [[TargetProperty]].
                 */</comment>
                <if>if <condition>(<expr><name>vxml</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>kid</name>-&gt;<name>name</name></name> = (<name><name>vxml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name>)
                        ? <name><name>vxml</name>-&gt;<name>xml_targetprop</name></name>
                        : <name><name>vxml</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <comment type="block">/* 2(c)(viii). */</comment>
            <expr_stmt><expr><name>ok</name> = <call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                <goto>goto <name>out</name>;</goto></then></if>
        }</block></then></if>

        <comment type="block">/* 2(d). */</comment>
        <if>if <condition>(<expr>!<name>vxml</name> ||
            <name><name>vxml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_TEXT</name> ||
            <name><name>vxml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ATTRIBUTE</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ok</name> = <call><name>JS_ConvertValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>, <argument><expr><name>JSTYPE_STRING</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                <goto>goto <name>out</name>;</goto></then></if>
            <expr_stmt><expr><name><name>roots</name><index>[<expr><name>VAL_ROOT</name></expr>]</index></name> = *<name>vp</name></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/* 2(e). */</comment>
        <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>kid</name></expr>)</condition><then>
            <goto>goto <name>out</name>;</goto></then></if>
        <expr_stmt><expr><name>parent</name> = <name><name>kid</name>-&gt;<name>parent</name></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ATTRIBUTE</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>nameobj</name> = <call><name>js_GetAttributeNameObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>kid</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>nameobj</name></expr>)</condition><then>
                <goto>goto <name>bad</name>;</goto></then></if>
            <expr_stmt><expr><name>id</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>nameobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>parent</name></expr>)</condition><then> <block>{
                <comment type="block">/* 2(e)(i). */</comment>
                <expr_stmt><expr><name>parentobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>parentobj</name></expr>)</condition><then>
                    <goto>goto <name>bad</name>;</goto></then></if>
                <expr_stmt><expr><name>ok</name> = <call><name>PutProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>parentobj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <goto>goto <name>out</name>;</goto></then></if>

                <comment type="block">/* 2(e)(ii). */</comment>
                <expr_stmt><expr><name>ok</name> = <call><name>GetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>parentobj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <goto>goto <name>out</name>;</goto></then></if>
                <expr_stmt><expr><name>attr</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* 2(e)(iii). */</comment>
                <expr_stmt><expr><name><name>xml</name>-&gt;<name>xml_kids</name>.<name>vector</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>attr</name>-&gt;<name>xml_kids</name>.<name>vector</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>

        <comment type="block">/* 2(f). */</comment>
        <else>else <if>if <condition>(<expr><name>vxml</name> &amp;&amp; <name><name>vxml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
            <comment type="block">/*
             * 2(f)(i)
             *
             * Erratum: the spec says to create a shallow copy _c_ of _V_, but
             * if we do that we never change the parent of each child in the
             * list.  Since [[Put]] when called on an XML object deeply copies
             * the provided list _V_, we also do so here.  Perhaps the shallow
             * copy was a misguided optimization?
             */</comment>
            <expr_stmt><expr><name>copy</name> = <call><name>DeepCopyInLRS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vxml</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>copy</name></expr>)</condition><then>
                <goto>goto <name>bad</name>;</goto></then></if>
            <expr_stmt><expr><name>copyobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>copyobj</name></expr>)</condition><then>
                <goto>goto <name>bad</name>;</goto></then></if>

            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>parent</name> != <name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>parent</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>q</name> = <call><name>XMLARRAY_FIND_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>parent</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>kid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>q</name> != <name>XML_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ok</name> = <call><name>Replace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>copyobj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <goto>goto <name>out</name>;</goto></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
                <comment type="block">/* Erratum: this loop in the spec is useless. */</comment>
                <for>for (<init><expr><name>j</name> = 0</expr>, <expr><name>n</name> = <name><name>copy</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</init> <condition><expr><name>j</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                    <expr_stmt><expr><name>kid2</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>parent</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>q</name> + <name>j</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>copy</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call>
                              == <name>kid2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            }</block></then></if>

            <comment type="block">/*
             * 2(f)(iv-vi).
             * Erratum: notice the unhandled zero-length V basis case and
             * the off-by-one errors for the n != 0 cases in the spec.
             */</comment>
            <expr_stmt><expr><name>n</name> = <name><name>copy</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>n</name> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>XMLArrayDelete</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>ok</name> = <call><name>XMLArrayInsert</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name> + 1</expr></argument>, <argument><expr><name>n</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <goto>goto <name>out</name>;</goto></then></if>

                <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>)
                    <expr_stmt><expr><name><name>xml</name>-&gt;<name>xml_kids</name>.<name>vector</name><index>[<expr><name>i</name> + <name>j</name></expr>]</index></name> = <name><name>copy</name>-&gt;<name>xml_kids</name>.<name>vector</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></for>
            }</block></else></if>
        }</block></then>

        <comment type="block">/* 2(g). */</comment>
        <else>else <if>if <condition>(<expr><name>vxml</name> || <call><name>JSXML_HAS_VALUE</name><argument_list>(<argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>parent</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>q</name> = <call><name>XMLARRAY_FIND_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>parent</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>kid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>q</name> != <name>XML_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ok</name> = <call><name>Replace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <goto>goto <name>out</name>;</goto></then></if>

                <expr_stmt><expr><name>vxml</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>parent</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>vxml</name></expr>)</condition><then>
                    <goto>goto <name>out</name>;</goto></then></if>
                <expr_stmt><expr><name><name>roots</name><index>[<expr><name>VAL_ROOT</name></expr>]</index></name> = *<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>vxml</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="block">/*
             * 2(g)(iii).
             * Erratum: _V_ may not be of type XML, but all index-named
             * properties _x[i]_ in an XMLList _x_ must be of type XML,
             * according to 9.2.1.1 Overview and other places in the spec.
             *
             * Thanks to 2(d), we know _V_ (*vp here) is either a string
             * or an XML/XMLList object.  If *vp is a string, call ToXML
             * on it to satisfy the constraint.
             */</comment>
            <if>if <condition>(<expr>!<name>vxml</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>vobj</name> = <call><name>ToXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>vobj</name></expr>)</condition><then>
                    <goto>goto <name>bad</name>;</goto></then></if>
                <expr_stmt><expr><name><name>roots</name><index>[<expr><name>VAL_ROOT</name></expr>]</index></name> = *<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>vobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>vxml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>XMLARRAY_SET_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>vxml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>

        <comment type="block">/* 2(h). */</comment>
        <else>else <block>{
            <expr_stmt><expr><name>kidobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>kidobj</name></expr>)</condition><then>
                <goto>goto <name>bad</name>;</goto></then></if>
            <expr_stmt><expr><name>id</name> = <call><name>ATOM_KEY</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>atomState</name>.<name>starAtom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ok</name> = <call><name>PutProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kidobj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                <goto>goto <name>out</name>;</goto></then></if>
        }</block></else></if></else></if></else></if>
    }</block></then> <else>else <block>{
        <comment type="block">/*
         * ECMA-357 9.2.1.2/9.1.1.2 qname case.
         */</comment>
        <expr_stmt><expr><name>nameqn</name> = <call><name>ToXMLName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>funid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>nameqn</name></expr>)</condition><then>
            <goto>goto <name>bad</name>;</goto></then></if>
        <if>if <condition>(<expr><name>funid</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ok</name> = <call><name>js_SetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>funid</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>out</name>;</goto>
        }</block></then></if>
        <expr_stmt><expr><name>nameobj</name> = <name><name>nameqn</name>-&gt;<name>object</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>roots</name><index>[<expr><name>ID_ROOT</name></expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>nameobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
            <comment type="block">/*
             * Step 3 of 9.2.1.2.
             * Erratum: if x.[[Length]] &gt; 1 or [[ResolveValue]] returns null
             * or an r with r.[[Length]] != 1, throw TypeError.
             */</comment>
            <expr_stmt><expr><name>n</name> = <call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>n</name> &gt; 1</expr>)</condition><then>
                <goto>goto <name>type_error</name>;</goto></then></if>
            <if>if <condition>(<expr><name>n</name> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ok</name> = <call><name>ResolveValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr>&amp;<name>rxml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <goto>goto <name>out</name>;</goto></then></if>
                <if>if <condition>(<expr>!<name>rxml</name> || <call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>rxml</name></expr></argument>)</argument_list></call> != 1</expr>)</condition><then>
                    <goto>goto <name>type_error</name>;</goto></then></if>
                <expr_stmt><expr><name>ok</name> = <call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>rxml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <goto>goto <name>out</name>;</goto></then></if>
            }</block></then></if>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call> == 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>xml</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
                <goto>goto <name>out</name>;</goto></then></if>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>xml</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>obj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
                <goto>goto <name>bad</name>;</goto></then></if>
            <expr_stmt><expr><name><name>roots</name><index>[<expr><name>OBJ_ROOT</name></expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* FALL THROUGH to non-list case */</comment>
        }</block></then></if>

        <comment type="block">/*
         * ECMA-357 9.1.1.2.
         * Erratum: move steps 3 and 4 to before 1 and 2, to avoid wasted
         * effort in ToString or [[DeepCopy]].
         */</comment>

        <if>if <condition>(<expr><call><name>JSXML_HAS_VALUE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>out</name>;</goto></then></if>

        <if>if <condition>(<expr>!<name>vxml</name> ||
            <name><name>vxml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_TEXT</name> ||
            <name><name>vxml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ATTRIBUTE</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ok</name> = <call><name>JS_ConvertValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>, <argument><expr><name>JSTYPE_STRING</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                <goto>goto <name>out</name>;</goto></then></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>rxml</name> = <call><name>DeepCopyInLRS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vxml</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>rxml</name> || !<call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rxml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <goto>goto <name>bad</name>;</goto></then></if>
            <expr_stmt><expr><name>vxml</name> = <name>rxml</name></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>vxml</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name><name>roots</name><index>[<expr><name>VAL_ROOT</name></expr>]</index></name> = *<name>vp</name></expr>;</expr_stmt>

        <comment type="block">/*
         * 6.
         * Erratum: why is this done here, so early? use is way later....
         */</comment>
        <expr_stmt><expr><name>ok</name> = <call><name>js_GetDefaultXMLNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>nsval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
            <goto>goto <name>out</name>;</goto></then></if>

        <if>if <condition>(<expr><call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nameobj</name></expr></argument>)</argument_list></call> == &amp;<name>js_AttributeNameClass</name></expr>)</condition><then> <block>{
            <comment type="block">/* 7(a). */</comment>
            <if>if <condition>(<expr>!<call><name>js_IsXMLName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>nameobj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <goto>goto <name>out</name>;</goto></then></if>

            <comment type="block">/* 7(b-c). */</comment>
            <if>if <condition>(<expr><name>vxml</name> &amp;&amp; <name><name>vxml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>n</name> = <name><name>vxml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>n</name> == 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr>*<name>vp</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>left</name> = <call><name>KidToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vxml</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<name>left</name></expr>)</condition><then>
                        <goto>goto <name>bad</name>;</goto></then></if>

                    <expr_stmt><expr><name>space</name> = <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>atomState</name>.<name>spaceAtom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                        <expr_stmt><expr><name>left</name> = <call><name>js_ConcatStrings</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr>!<name>left</name></expr>)</condition><then>
                            <goto>goto <name>bad</name>;</goto></then></if>
                        <expr_stmt><expr><name>right</name> = <call><name>KidToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vxml</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr>!<name>right</name></expr>)</condition><then>
                            <goto>goto <name>bad</name>;</goto></then></if>
                        <expr_stmt><expr><name>left</name> = <call><name>js_ConcatStrings</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr>!<name>left</name></expr>)</condition><then>
                            <goto>goto <name>bad</name>;</goto></then></if>
                    }</block></for>

                    <expr_stmt><expr><name><name>roots</name><index>[<expr><name>VAL_ROOT</name></expr>]</index></name> = *<name>vp</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>ok</name> = <call><name>JS_ConvertValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>, <argument><expr><name>JSTYPE_STRING</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <goto>goto <name>out</name>;</goto></then></if>
                <expr_stmt><expr><name><name>roots</name><index>[<expr><name>VAL_ROOT</name></expr>]</index></name> = *<name>vp</name></expr>;</expr_stmt>
            }</block></else></if>

            <comment type="block">/* 7(d-e). */</comment>
            <expr_stmt><expr><name>match</name> = <name>NULL</name></expr>;</expr_stmt>
            <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>xml</name>-&gt;<name>xml_attrs</name>.<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>attr</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_attrs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>attr</name></expr>)</condition><then>
                    <continue>continue;</continue></then></if>
                <expr_stmt><expr><name>attrqn</name> = <name><name>attr</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>attrqn</name>-&gt;<name>localName</name></name></expr></argument>, <argument><expr><name><name>nameqn</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call> &amp;&amp;
                    (!<name><name>nameqn</name>-&gt;<name>uri</name></name> ||
                     <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>attrqn</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>nameqn</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                    <if>if <condition>(<expr>!<name>match</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>match</name> = <name>attr</name></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>DeleteNamedProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>attrqn</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr>--<name>i</name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
            }</block></for>

            <comment type="block">/* 7(f). */</comment>
            <expr_stmt><expr><name>attr</name> = <name>match</name></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>attr</name></expr>)</condition><then> <block>{
                <comment type="block">/* 7(f)(i-ii). */</comment>
                <if>if <condition>(<expr>!<name><name>nameqn</name>-&gt;<name>uri</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>left</name> = <name>right</name> = <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>left</name> = <name><name>nameqn</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>right</name> = <name><name>nameqn</name>-&gt;<name>prefix</name></name></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>nameqn</name> = <call><name>js_NewXMLQName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name><name>nameqn</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>nameqn</name></expr>)</condition><then>
                    <goto>goto <name>bad</name>;</goto></then></if>

                <comment type="block">/* 7(f)(iii). */</comment>
                <expr_stmt><expr><name>attr</name> = <call><name>js_NewXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>attr</name></expr>)</condition><then>
                    <goto>goto <name>bad</name>;</goto></then></if>
                <expr_stmt><expr><name><name>attr</name>-&gt;<name>parent</name></name> = <name>xml</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>attr</name>-&gt;<name>name</name></name> = <name>nameqn</name></expr>;</expr_stmt>

                <comment type="block">/* 7(f)(iv). */</comment>
                <expr_stmt><expr><name>ok</name> = <call><name>XMLARRAY_ADD_MEMBER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_attrs</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <goto>goto <name>out</name>;</goto></then></if>

                <comment type="block">/* 7(f)(v-vi). */</comment>
                <expr_stmt><expr><name>ns</name> = <call><name>GetNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nameqn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then>
                    <goto>goto <name>bad</name>;</goto></then></if>
                <expr_stmt><expr><name>ok</name> = <call><name>AddInScopeNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <goto>goto <name>out</name>;</goto></then></if>
            }</block></then></if>

            <comment type="block">/* 7(g). */</comment>
            <expr_stmt><expr><name><name>attr</name>-&gt;<name>xml_value</name></name> = <call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>out</name>;</goto>
        }</block></then></if>

        <comment type="block">/* 8-9. */</comment>
        <if>if <condition>(<expr>!<call><name>js_IsXMLName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>nameobj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp;
            !<call><name>IS_STAR</name><argument_list>(<argument><expr><name><name>nameqn</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <goto>goto <name>out</name>;</goto>
        }</block></then></if>

        <comment type="block">/* 10-11. */</comment>
        <expr_stmt><expr><name>id</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>primitiveAssign</name> = !<name>vxml</name> &amp;&amp; !<call><name>IS_STAR</name><argument_list>(<argument><expr><name><name>nameqn</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* 12. */</comment>
        <expr_stmt><expr><name>k</name> = <name>n</name> = <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>matchIndex</name> = <name>XML_NOT_FOUND</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>kid2</name> = <name>NULL</name></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>k</name> != 0</expr>)</condition> <block>{
            <expr_stmt><expr>--<name>k</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kid</name> &amp;&amp; <call><name>MatchElemName</name><argument_list>(<argument><expr><name>nameqn</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>matchIndex</name> != <name>XML_NOT_FOUND</name></expr>)</condition><then>
                    <expr_stmt><expr><call><name>DeleteByIndex</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>matchIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><name>matchIndex</name> = <name>k</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>kid2</name> = <name>kid</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>

        <comment type="block">/*
         * Erratum: ECMA-357 specified child insertion inconsistently:
         * insertChildBefore and insertChildAfter insert an arbitrary XML
         * instance, and therefore can create cycles, but appendChild as
         * specified by the "Overview" of 13.4.4.3 calls [[DeepCopy]] on
         * its argument.  But the "Semantics" in 13.4.4.3 do not include
         * any [[DeepCopy]] call.
         *
         * Fixing this (https://bugzilla.mozilla.org/show_bug.cgi?id=312692)
         * required adding cycle detection, and allowing duplicate kids to
         * be created (see comment 6 in the bug).  Allowing duplicate kid
         * references means the loop above will delete all but the lowest
         * indexed reference, and each [[DeleteByIndex]] nulls the kid's
         * parent.  Thus the need to restore parent here.  This is covered
         * by https://bugzilla.mozilla.org/show_bug.cgi?id=327564.
         */</comment>
        <if>if <condition>(<expr><name>kid2</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>kid2</name>-&gt;<name>parent</name></name> == <name>xml</name> || !<name><name>kid2</name>-&gt;<name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name><name>kid2</name>-&gt;<name>parent</name></name></expr>)</condition><then>
                <expr_stmt><expr><name><name>kid2</name>-&gt;<name>parent</name></name> = <name>xml</name></expr>;</expr_stmt></then></if>
        }</block></then></if>

        <comment type="block">/* 13. */</comment>
        <if>if <condition>(<expr><name>matchIndex</name> == <name>XML_NOT_FOUND</name></expr>)</condition><then> <block>{
            <comment type="block">/* 13(a). */</comment>
            <expr_stmt><expr><name>matchIndex</name> = <name>n</name></expr>;</expr_stmt>

            <comment type="block">/* 13(b). */</comment>
            <if>if <condition>(<expr><name>primitiveAssign</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>!<name><name>nameqn</name>-&gt;<name>uri</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ns</name> = (<name>JSXMLNamespace</name> *)
                         <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>nsval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>left</name> = <name><name>ns</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>right</name> = <name><name>ns</name>-&gt;<name>prefix</name></name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>left</name> = <name><name>nameqn</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>right</name> = <name><name>nameqn</name>-&gt;<name>prefix</name></name></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>nameqn</name> = <call><name>js_NewXMLQName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name><name>nameqn</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>nameqn</name></expr>)</condition><then>
                    <goto>goto <name>bad</name>;</goto></then></if>

                <comment type="block">/* 13(b)(iii). */</comment>
                <expr_stmt><expr><name>vobj</name> = <call><name>js_NewXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_ELEMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>vobj</name></expr>)</condition><then>
                    <goto>goto <name>bad</name>;</goto></then></if>
                <expr_stmt><expr><name>vxml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>vxml</name>-&gt;<name>parent</name></name> = <name>xml</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>vxml</name>-&gt;<name>name</name></name> = <name>nameqn</name></expr>;</expr_stmt>

                <comment type="block">/* 13(b)(iv-vi). */</comment>
                <expr_stmt><expr><name>ns</name> = <call><name>GetNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nameqn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then>
                    <goto>goto <name>bad</name>;</goto></then></if>
                <expr_stmt><expr><name>ok</name> = <call><name>Replace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>matchIndex</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>vobj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <goto>goto <name>out</name>;</goto></then></if>
                <expr_stmt><expr><name>ok</name> = <call><name>AddInScopeNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vxml</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <goto>goto <name>out</name>;</goto></then></if>
            }</block></then></if>
        }</block></then></if>

        <comment type="block">/* 14. */</comment>
        <if>if <condition>(<expr><name>primitiveAssign</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>JSXMLArrayCursor</name></type> <name>cursor</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>XMLArrayCursorInit</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cursor</name>.<name>index</name></name> = <name>matchIndex</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>kid</name> = (<name>JSXML</name> *) <call><name>XMLArrayCursorItem</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>JSXML_HAS_KIDS</name><argument_list>(<argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>XMLArrayFinish</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>kid</name>-&gt;<name>xml_kids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ok</name> = <call><name>XMLArrayInit</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>kid</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="block">/* 14(b-c). */</comment>
            <comment type="block">/* XXXbe Erratum? redundant w.r.t. 7(b-c) else clause above */</comment>
            <if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ok</name> = <call><name>JS_ConvertValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>, <argument><expr><name>JSTYPE_STRING</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>ok</name> &amp;&amp; !<call><name>IS_EMPTY</name><argument_list>(<argument><expr><call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>roots</name><index>[<expr><name>VAL_ROOT</name></expr>]</index></name> = *<name>vp</name></expr>;</expr_stmt>
                    <if>if <condition>(<expr>(<name>JSXML</name> *) <call><name>XMLArrayCursorItem</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call> == <name>kid</name></expr>)</condition><then>
                        <expr_stmt><expr><name>ok</name> = <call><name>Replace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></then></if>
            }</block></then></if>
            <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="block">/* 15(a). */</comment>
            <expr_stmt><expr><name>ok</name> = <call><name>Replace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>matchIndex</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>

<label><name>out</name>:</label>
    <expr_stmt><expr><call><name>JS_POP_TEMP_ROOT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>tvr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_LeaveLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>

<label><name>type_error</name>:</label>
    <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                         <argument><expr><name>JSMSG_BAD_XMLLIST_PUT</name></expr></argument>,
                         <argument><expr><call><name>js_ValueToPrintableString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>bad</name>:</label>
    <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    <goto>goto <name>out</name>;</goto>
}</block></function>

<comment type="block">/* ECMA-357 9.1.1.10 XML [[ResolveValue]], 9.2.1.10 XMLList [[ResolveValue]]. */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>ResolveValue</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>list</name></decl></param>, <param><decl><type><name>JSXML</name> **</type><name>result</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>target</name></decl>, *<decl><type ref="prev"/><name>base</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>targetprop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>targetpropobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>id</name></decl>, <decl><type ref="prev"/><name>tv</name></decl>;</decl_stmt>

    <comment type="block">/* Our caller must be protecting newborn objects. */</comment>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>localRootStack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>list</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_LIST</name> || <name><name>list</name>-&gt;<name>xml_kids</name>.<name>length</name></name> != 0</expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr>*<name>result</name> = <name>list</name></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>target</name> = <name><name>list</name>-&gt;<name>xml_target</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>targetprop</name> = <name><name>list</name>-&gt;<name>xml_targetprop</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>target</name> || !<name>targetprop</name> || <call><name>IS_STAR</name><argument_list>(<argument><expr><name><name>targetprop</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>result</name> = <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>targetpropobj</name> = <call><name>js_GetXMLQNameObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>targetprop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>targetpropobj</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr><call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>targetpropobj</name></expr></argument>)</argument_list></call> == &amp;<name>js_AttributeNameClass</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>result</name> = <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name>ResolveValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr>&amp;<name>base</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<name>base</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>result</name> = <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr>!<call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>id</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>targetpropobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>GetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>object</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>tv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>target</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>base</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name> &amp;&amp; <call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> &gt; 1</expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>result</name> = <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>JS_TRUE</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>tv</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>PutProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>object</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>tv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <if>if <condition>(<expr>!<call><name>GetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>object</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>tv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>target</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr>*<name>result</name> = <name>target</name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>HasNamedProperty</name><parameter_list>(<param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>JSXMLQName</name> *</type><name>nameqn</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>found</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArrayCursor</name></type> <name>cursor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>kid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArray</name> *</type><name>array</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNameMatcher</name></type> <name>matcher</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>found</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>XMLArrayCursorInit</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr>(<name>kid</name> = (<name>JSXML</name> *) <call><name>XMLArrayCursorNext</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>found</name> = <call><name>HasNamedProperty</name><argument_list>(<argument><expr><name>kid</name></expr></argument>, <argument><expr><name>nameqn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>found</name></expr>)</condition><then>
                <break>break;</break></then></if>
        }</block></while>
        <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>found</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>nameqn</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call> == &amp;<name>js_AttributeNameClass</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>array</name> = &amp;<name><name>xml</name>-&gt;<name>xml_attrs</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>matcher</name> = <name>MatchAttrName</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>array</name> = &amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>matcher</name> = <name>MatchElemName</name></expr>;</expr_stmt>
        }</block></else></if>
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>array</name>-&gt;<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kid</name> &amp;&amp; <call><name>matcher</name><argument_list>(<argument><expr><name>nameqn</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
        }</block></for>
    }</block></then></if>

    <return>return <expr><name>JS_FALSE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>HasIndexedProperty</name><parameter_list>(<param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>i</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then>
        <return>return <expr><name>i</name> &lt; <call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then>
        <return>return <expr><name>i</name> == 0</expr>;</return></then></if>

    <return>return <expr><name>JS_FALSE</name></expr>;</return>
}</block></function>

<function_decl><type><specifier>static</specifier> <name>JSBool</name></type>
<name>HasSimpleContent</name><parameter_list>(<param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>HasFunctionProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>funid</name></decl></param>, <param><decl><type><name>JSBool</name> *</type><name>found</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>pobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSTempValueRooter</name></type> <name>tvr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> == &amp;<name>js_XMLClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>js_LookupProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>funid</name></expr></argument>, <argument><expr>&amp;<name>pobj</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name>prop</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>OBJ_DROP_PROPERTY</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pobj</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>HasSimpleContent</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="block">/*
             * Search in String.prototype to set found whenever
             * js_GetXMLFunction returns existing function.
             */</comment>
            <expr_stmt><expr><call><name>JS_PUSH_TEMP_ROOT_OBJECT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>tvr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ok</name> = <call><name>js_GetClassPrototype</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>INT_TO_JSID</name><argument_list>(<argument><expr><name>JSProto_String</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr>&amp;<name><name>tvr</name>.<name>u</name>.<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>tvr</name>.<name>u</name>.<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ok</name> = <call><name>js_LookupProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>tvr</name>.<name>u</name>.<name>object</name></name></expr></argument>, <argument><expr><name>funid</name></expr></argument>, <argument><expr>&amp;<name>pobj</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>ok</name> &amp;&amp; <name>prop</name></expr>)</condition><then>
                    <expr_stmt><expr><call><name>OBJ_DROP_PROPERTY</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pobj</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then></if>
            <expr_stmt><expr><call><name>JS_POP_TEMP_ROOT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>tvr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        }</block></then></if>
    }</block></else></if>
    <expr_stmt><expr>*<name>found</name> = (<name>prop</name> != <name>NULL</name>)</expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/* ECMA-357 9.1.1.6 XML [[HasProperty]] and 9.2.1.5 XMLList [[HasProperty]]. */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>HasProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>id</name></decl></param>, <param><decl><type><name>JSBool</name> *</type><name>found</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsid</name></type> <name>funid</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>js_IdIsIndex</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>found</name> = <call><name>HasIndexedProperty</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>qn</name> = <call><name>ToXMLName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>funid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>qn</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <if>if <condition>(<expr><name>funid</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name>HasFunctionProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>funid</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr>*<name>found</name> = <call><name>HasNamedProperty</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>qn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xml_finalize</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
        <return>return;</return></then></if>
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>object</name></name> == <name>obj</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>xml</name>-&gt;<name>object</name></name> = <name>NULL</name></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>UNMETER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>livexmlobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xml_trace_vector</name><parameter_list>(<param><decl><type><name>JSTracer</name> *</type><name>trc</name></decl></param>, <param><decl><type><name>JSXML</name> **</type><name>vec</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>xml</name> = <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>xml</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_SET_TRACING_INDEX</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr>"xml_vector"</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_CallTracer</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>JSTRACE_XML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
}</block></function>

<comment type="block">/*
 * js_XMLObjectOps.newObjectMap == js_NewObjectMap, so XML objects appear to
 * be native.  Therefore, xml_lookupProperty must return a valid JSProperty
 * pointer parameter via *propp to signify "property found".  Since the only
 * call to xml_lookupProperty is via OBJ_LOOKUP_PROPERTY, and then only from
 * js_FindProperty (in jsobj.c, called from jsinterp.c) or from JSOP_IN case
 * in the interpreter, the only time we add a JSScopeProperty here is when an
 * unqualified name is being accessed or when "name in xml" is called.
 *
 * This scope property keeps the JSOP_NAME code in js_Interpret happy by
 * giving it an sprop with (getter, setter) == (GetProperty, PutProperty).
 *
 * NB: xml_deleteProperty must take care to remove any property added here.
 *
 * FIXME This clashes with the function namespace implementation which also
 * uses native properties. Effectively after xml_lookupProperty any property
 * stored previously using assignments to xml.function::name will be removed.
 * We partially workaround the problem in js_GetXMLFunction. There we take
 * advantage of the fact that typically function:: is used to access the
 * functions from XML.prototype. So when js_GetProperty returns a non-function
 * property, we assume that it represents the result of GetProperty setter
 * hiding the function and use an extra prototype chain lookup to recover it.
 * For a proper solution see bug 355257.
*/</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_lookupProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>JSObject</name> **</type><name>objp</name></decl></param>,
                   <param><decl><type><name>JSProperty</name> **</type><name>propp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>found</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsid</name></type> <name>funid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScopeProperty</name> *</type><name>sprop</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>v</name> = <call><name>ID_TO_VALUE</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>js_IdIsIndex</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>found</name> = <call><name>HasIndexedProperty</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>qn</name> = <call><name>ToXMLName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr>&amp;<name>funid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>qn</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <if>if <condition>(<expr><name>funid</name></expr>)</condition><then>
            <return>return <expr><call><name>js_LookupProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>funid</name></expr></argument>, <argument><expr><name>objp</name></expr></argument>, <argument><expr><name>propp</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        <expr_stmt><expr><name>found</name> = <call><name>HasNamedProperty</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>qn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <if>if <condition>(<expr>!<name>found</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>objp</name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>propp</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>sprop</name> = <call><name>js_AddNativeProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>GetProperty</name></expr></argument>, <argument><expr><name>PutProperty</name></expr></argument>,
                                     <argument><expr><name>SPROP_INVALID_SLOT</name></expr></argument>, <argument><expr><name>JSPROP_ENUMERATE</name></expr></argument>,
                                     <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>sprop</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

        <expr_stmt><expr><call><name>JS_LOCK_OBJ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>objp</name> = <name>obj</name></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>propp</name> = (<name>JSProperty</name> *) <name>sprop</name></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_defineProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>value</name></decl></param>,
                   <param><decl><type><name>JSPropertyOp</name></type> <name>getter</name></decl></param>, <param><decl><type><name>JSPropertyOp</name></type> <name>setter</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>attrs</name></decl></param>,
                   <param><decl><type><name>JSProperty</name> **</type><name>propp</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><call><name>VALUE_IS_FUNCTION</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> || <name>getter</name> || <name>setter</name> ||
        (<name>attrs</name> &amp; <name>JSPROP_ENUMERATE</name>) == 0 ||
        (<name>attrs</name> &amp; (<name>JSPROP_READONLY</name> | <name>JSPROP_PERMANENT</name> | <name>JSPROP_SHARED</name>))</expr>)</condition><then> <block>{
        <return>return <expr><call><name>js_DefineProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>getter</name></expr></argument>, <argument><expr><name>setter</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>,
                                 <argument><expr><name>propp</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name>PutProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ID_TO_VALUE</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name>propp</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>propp</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_getProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>id</name> == <name>JS_DEFAULT_XML_NAMESPACE_ID</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>vp</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><call><name>GetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ID_TO_VALUE</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_setProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>PutProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ID_TO_VALUE</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>FoundProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>JSProperty</name> *</type><name>prop</name></decl></param>,
              <param><decl><type><name>JSBool</name> *</type><name>foundp</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>prop</name></expr>)</condition><then>
        <return>return <expr><call><name>HasProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ID_TO_VALUE</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>foundp</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <expr_stmt><expr>*<name>foundp</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_getAttributes</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>JSProperty</name> *</type><name>prop</name></decl></param>,
                  <param><decl><type><name>uintN</name> *</type><name>attrsp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>found</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>FoundProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr>&amp;<name>found</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>attrsp</name> = <name>found</name> ? <name>JSPROP_ENUMERATE</name> : 0</expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_setAttributes</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>JSProperty</name> *</type><name>prop</name></decl></param>,
                  <param><decl><type><name>uintN</name> *</type><name>attrsp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>found</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>FoundProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr>&amp;<name>found</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name>found</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><name>JSMSG_CANT_SET_XML_ATTRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr>!<name>found</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_deleteProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>idval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>nameqn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsid</name></type> <name>funid</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>idval</name> = <call><name>ID_TO_VALUE</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>js_IdIsIndex</name><argument_list>(<argument><expr><name>idval</name></expr></argument>, <argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
            <comment type="block">/* See NOTE in spec: this variation is reserved for future use. */</comment>
            <expr_stmt><expr><call><name>ReportBadXMLName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>

        <comment type="block">/* ECMA-357 9.2.1.3. */</comment>
        <expr_stmt><expr><call><name>DeleteListElement</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>nameqn</name> = <call><name>ToXMLName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>idval</name></expr></argument>, <argument><expr>&amp;<name>funid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>nameqn</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <if>if <condition>(<expr><name>funid</name></expr>)</condition><then>
            <return>return <expr><call><name>js_DeleteProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>funid</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

        <expr_stmt><expr><call><name>DeleteNamedProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>nameqn</name></expr></argument>,
                            <argument><expr><call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>nameqn</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call> ==
                            &amp;<name>js_AttributeNameClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="block">/*
     * If this object has its own (mutable) scope,  then we may have added a
     * property to the scope in xml_lookupProperty for it to return to mean
     * "found" and to provide a handle for access operations to call the
     * property's getter or setter. But now it's time to remove any such
     * property, to purge the property cache and remove the scope entry.
     */</comment>
    <if>if <condition>(<expr><call><name>OBJ_SCOPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call>-&gt;<name>object</name> == <name>obj</name> &amp;&amp; !<call><name>js_DeleteProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr>*<name>rval</name> = <name>JSVAL_TRUE</name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_defaultValue</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>JSType</name></type> <name>hint</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>hint</name> == <name>JSTYPE_OBJECT</name></expr>)</condition><then> <block>{
        <comment type="block">/* Called from for..in code in js_Interpret: return an XMLList. */</comment>
        <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>obj</name> = <call><name>ToXMLList</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        }</block></then></if>
        <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><call><name>JS_CallFunctionName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>js_toString_str</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_enumerate</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>JSIterateOp</name></type> <name>enum_op</name></decl></param>,
              <param><decl><type><name>jsval</name> *</type><name>statep</name></decl></param>, <param><decl><type><name>jsid</name> *</type><name>idp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArrayCursor</name> *</type><name>cursor</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>length</name> = <call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>enum_op</name></expr>)</condition> <block>{
      <case>case <expr><name>JSENUMERATE_INIT</name></expr>:
        <if>if <condition>(<expr><name>length</name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cursor</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>cursor</name> = (<name>JSXMLArrayCursor</name> *) <call><name>JS_malloc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>sizeof *<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>cursor</name></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <expr_stmt><expr><call><name>XMLArrayCursorInit</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr>*<name>statep</name> = <call><name>PRIVATE_TO_JSVAL</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>idp</name></expr>)</condition><then>
            <expr_stmt><expr>*<name>idp</name> = <call><name>INT_TO_JSID</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <break>break;</break>

      </case><case>case <expr><name>JSENUMERATE_NEXT</name></expr>:
        <expr_stmt><expr><name>cursor</name> = <call><name>JSVAL_TO_PRIVATE</name><argument_list>(<argument><expr>*<name>statep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>cursor</name> &amp;&amp; <name><name>cursor</name>-&gt;<name>array</name></name> &amp;&amp; (<name>index</name> = <name><name>cursor</name>-&gt;<name>index</name></name>) &lt; <name>length</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>idp</name> = <call><name>INT_TO_JSID</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cursor</name>-&gt;<name>index</name></name> = <name>index</name> + 1</expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
        <comment type="block">/* FALL THROUGH */</comment>

      </case><case>case <expr><name>JSENUMERATE_DESTROY</name></expr>:
        <expr_stmt><expr><name>cursor</name> = <call><name>JSVAL_TO_PRIVATE</name><argument_list>(<argument><expr>*<name>statep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>cursor</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr>*<name>statep</name> = <name>JSVAL_NULL</name></expr>;</expr_stmt>
        <break>break;</break>
    </case>}</block></switch>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_hasInstance</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>, <param><decl><type><name>JSBool</name> *</type><name>bp</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xml_trace</name><parameter_list>(<param><decl><type><name>JSTracer</name> *</type><name>trc</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name><name>trc</name>-&gt;<name>context</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>xml</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_CALL_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>JSTRACE_XML</name></expr></argument>, <argument><expr>"private"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xml_clear</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>HasSimpleContent</name><parameter_list>(<param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>kid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>simple</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<label><name>again</name>:</label>
    <switch>switch <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name></expr>)</condition> <block>{
      <case>case <expr><name>JSXML_CLASS_COMMENT</name></expr>:
      </case><case>case <expr><name>JSXML_CLASS_PROCESSING_INSTRUCTION</name></expr>:
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
      </case><case>case <expr><name>JSXML_CLASS_LIST</name></expr>:
        <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name> == 0</expr>)</condition><then>
            <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
        <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name> == 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kid</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>xml</name> = <name>kid</name></expr>;</expr_stmt>
                <goto>goto <name>again</name>;</goto>
            }</block></then></if>
        }</block></then></if>
        <comment type="block">/* FALL THROUGH */</comment>
      </case><default>default:
        <expr_stmt><expr><name>simple</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kid</name> &amp;&amp; <name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>simple</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>simple</name></expr>;</return>
    </default>}</block></switch>
}</block></function>

<comment type="block">/*
 * 11.2.2.1 Step 3(d) onward.
 */</comment>
<function><type><specifier>static</specifier> <name>JSObject</name> *</type>
<name>xml_getMethod</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSTempValueRooter</name></type> <name>tvr</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JS_InstanceOf</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name>js_XMLClass</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * As our callers have a bad habit of passing a pointer to an unrooted
     * local value as vp, we use a proper root here.
     */</comment>
    <expr_stmt><expr><call><name>JS_PUSH_SINGLE_TEMP_ROOT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSVAL_NULL</name></expr></argument>, <argument><expr>&amp;<name>tvr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>js_GetXMLFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name><name>tvr</name>.<name>u</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>obj</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
    <expr_stmt><expr>*<name>vp</name> = <name><name>tvr</name>.<name>u</name>.<name>value</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_POP_TEMP_ROOT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>tvr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>obj</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_setMethod</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>js_SetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_enumerateValues</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>JSIterateOp</name></type> <name>enum_op</name></decl></param>,
                    <param><decl><type><name>jsval</name> *</type><name>statep</name></decl></param>, <param><decl><type><name>jsid</name> *</type><name>idp</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArrayCursor</name> *</type><name>cursor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>kidobj</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>length</name> = <call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>INT_FITS_IN_JSVAL</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>enum_op</name></expr>)</condition> <block>{
      <case>case <expr><name>JSENUMERATE_INIT</name></expr>:
        <if>if <condition>(<expr><name>length</name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cursor</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>cursor</name> = (<name>JSXMLArrayCursor</name> *) <call><name>JS_malloc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>sizeof *<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>cursor</name></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <expr_stmt><expr><call><name>XMLArrayCursorInit</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr>*<name>statep</name> = <call><name>PRIVATE_TO_JSVAL</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>idp</name></expr>)</condition><then>
            <expr_stmt><expr>*<name>idp</name> = <call><name>INT_TO_JSID</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><name>vp</name></expr>)</condition><then>
            <expr_stmt><expr>*<name>vp</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt></then></if>
        <break>break;</break>

      </case><case>case <expr><name>JSENUMERATE_NEXT</name></expr>:
        <expr_stmt><expr><name>cursor</name> = <call><name>JSVAL_TO_PRIVATE</name><argument_list>(<argument><expr>*<name>statep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>cursor</name> &amp;&amp; <name><name>cursor</name>-&gt;<name>array</name></name> &amp;&amp; (<name>index</name> = <name><name>cursor</name>-&gt;<name>index</name></name>) &lt; <name>length</name></expr>)</condition><then> <block>{
            <while>while <condition>(<expr>!(<name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
                <if>if <condition>(<expr>++<name>index</name> == <name>length</name></expr>)</condition><then>
                    <goto>goto <name>destroy</name>;</goto></then></if>
            }</block></while>
            <expr_stmt><expr><name>kidobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>kidobj</name></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>INT_FITS_IN_JSVAL</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>idp</name> = <call><name>INT_TO_JSID</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>kidobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cursor</name>-&gt;<name>index</name></name> = <name>index</name> + 1</expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
        <comment type="block">/* FALL THROUGH */</comment>

      </case><case>case <expr><name>JSENUMERATE_DESTROY</name></expr>:
        <expr_stmt><expr><name>cursor</name> = <call><name>JSVAL_TO_PRIVATE</name><argument_list>(<argument><expr>*<name>statep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>cursor</name></expr>)</condition><then> <block>{
      <label><name>destroy</name>:</label>
            <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr>*<name>statep</name> = <name>JSVAL_NULL</name></expr>;</expr_stmt>
        <break>break;</break>
    </case>}</block></switch>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_equality</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>, <param><decl><type><name>JSBool</name> *</type><name>bp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>vxml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>vobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>, *<decl><type ref="prev"/><name>vstr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsdouble</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vxml</name> = <name>NULL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>vobj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>OBJECT_IS_XML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vobj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>vxml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ok</name> = <call><name>Equals</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>vxml</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>vxml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ok</name> = <call><name>Equals</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vxml</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr>((<name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_TEXT</name> ||
                  <name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ATTRIBUTE</name>) &amp;&amp;
                 <call><name>HasSimpleContent</name><argument_list>(<argument><expr><name>vxml</name></expr></argument>)</argument_list></call>) ||
                ((<name><name>vxml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_TEXT</name> ||
                  <name><name>vxml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ATTRIBUTE</name>) &amp;&amp;
                 <call><name>HasSimpleContent</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ok</name> = <call><name>js_EnterLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>str</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>vstr</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ok</name> = <name>str</name> &amp;&amp; <name>vstr</name></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>ok</name></expr>)</condition><then>
                        <expr_stmt><expr>*<name>bp</name> = <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>vstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                    <expr_stmt><expr><call><name>js_LeaveLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>ok</name> = <call><name>XMLEquals</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>vxml</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>ok</name> = <call><name>js_EnterLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>HasSimpleContent</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>str</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>vstr</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ok</name> = <name>str</name> &amp;&amp; <name>vstr</name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>ok</name></expr>)</condition><then>
                    <expr_stmt><expr>*<name>bp</name> = <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>vstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then> <else>else <if>if <condition>(<expr><call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> || <call><name>JSVAL_IS_NUMBER</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>str</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr>*<name>bp</name> = <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>ok</name> = <call><name>js_ValueToNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>d2</name> = <call><name>JSVAL_IS_INT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> ? <call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call>
                                             : *<call><name>JSVAL_TO_DOUBLE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr>*<name>bp</name> = <call><name>JSDOUBLE_COMPARE</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>==</expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></else></if></else></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr>*<name>bp</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
            }</block></else></if></else></if>
            <expr_stmt><expr><call><name>js_LeaveLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></else></if></else></if>
    <return>return <expr><name>ok</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_concatenate</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>listobj</name></decl>, *<decl><type ref="prev"/><name>robj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>list</name></decl>, *<decl><type ref="prev"/><name>lxml</name></decl>, *<decl><type ref="prev"/><name>rxml</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ok</name> = <call><name>js_EnterLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>listobj</name> = <call><name>js_NewXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>listobj</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
        <goto>goto <name>out</name>;</goto>
    }</block></then></if>

    <expr_stmt><expr><name>list</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>listobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lxml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>lxml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <goto>goto <name>out</name>;</goto></then></if>

    <if>if <condition>(<expr><call><name>VALUE_IS_XML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>rxml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>robj</name> = <call><name>ToXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>robj</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
            <goto>goto <name>out</name>;</goto>
        }</block></then></if>
        <expr_stmt><expr><name>rxml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>robj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name>ok</name> = <call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>rxml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <goto>goto <name>out</name>;</goto></then></if>

    <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>listobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
    <expr_stmt><expr><call><name>js_LeaveLocalRootScopeWithResult</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block></function>

<comment type="block">/* Use js_NewObjectMap so XML objects satisfy OBJ_IS_NATIVE tests. */</comment>
<macro><name>JS_FRIEND_DATA</name><argument_list>(<argument>JSXMLObjectOps</argument>)</argument_list></macro> <expr_stmt><expr><name>js_XMLObjectOps</name> = <block>{
  <expr><block>{ <expr><name>js_NewObjectMap</name></expr>,            <expr><name>js_DestroyObjectMap</name></expr>,
    <expr><name>xml_lookupProperty</name></expr>,         <expr><name>xml_defineProperty</name></expr>,
    <expr><name>xml_getProperty</name></expr>,            <expr><name>xml_setProperty</name></expr>,
    <expr><name>xml_getAttributes</name></expr>,          <expr><name>xml_setAttributes</name></expr>,
    <expr><name>xml_deleteProperty</name></expr>,         <expr><name>xml_defaultValue</name></expr>,
    <expr><name>xml_enumerate</name></expr>,              <expr><name>js_CheckAccess</name></expr>,
    <expr><name>NULL</name></expr>,                       <expr><name>NULL</name></expr>,
    <expr><name>NULL</name></expr>,                       <expr><name>NULL</name></expr>,
    <expr><name>NULL</name></expr>,                       <expr><name>xml_hasInstance</name></expr>,
    <expr><name>js_SetProtoOrParent</name></expr>,        <expr><name>js_SetProtoOrParent</name></expr>,
    <expr><name>js_TraceObject</name></expr>,             <expr><name>xml_clear</name></expr>,
    <expr><name>NULL</name></expr>,                       <expr><name>NULL</name></expr> }</block></expr>,
    <expr><name>xml_getMethod</name></expr>,              <expr><name>xml_setMethod</name></expr>,
    <expr><name>xml_enumerateValues</name></expr>,        <expr><name>xml_equality</name></expr>,
    <expr><name>xml_concatenate</name></expr>
}</block></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>JSObjectOps</name> *</type>
<name>xml_getObjectOps</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSClass</name> *</type><name>clasp</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr>&amp;<name><name>js_XMLObjectOps</name>.<name>base</name></name></expr>;</return>
}</block></function>

<macro><name>JS_FRIEND_DATA</name><argument_list>(<argument>JSClass</argument>)</argument_list></macro> <expr_stmt><expr><name>js_XMLClass</name> = <block>{
    <expr><name>js_XML_str</name></expr>,
    <expr><name>JSCLASS_HAS_PRIVATE</name> | <name>JSCLASS_MARK_IS_TRACE</name> |
    <call><name>JSCLASS_HAS_CACHED_PROTO</name><argument_list>(<argument><expr><name>JSProto_XML</name></expr></argument>)</argument_list></call></expr>,
    <expr><name>JS_PropertyStub</name></expr>,   <expr><name>JS_PropertyStub</name></expr>,   <expr><name>JS_PropertyStub</name></expr>,   <expr><name>JS_PropertyStub</name></expr>,
    <expr><name>JS_EnumerateStub</name></expr>,  <expr><name>JS_ResolveStub</name></expr>,    <expr><name>JS_ConvertStub</name></expr>,    <expr><name>xml_finalize</name></expr>,
    <expr><name>xml_getObjectOps</name></expr>,  <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,
    <expr><name>NULL</name></expr>,              <expr><name>NULL</name></expr>,              <expr><call><name>JS_CLASS_TRACE</name><argument_list>(<argument><expr><name>xml_trace</name></expr></argument>)</argument_list></call></expr>, <expr><name>NULL</name></expr>
}</block></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>JSObject</name> *</type>
<name>CallConstructorFunction</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>JSClass</name> *</type><name>clasp</name></decl></param>,
                        <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>tmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>rval</name></decl>;</decl_stmt>

    <while>while <condition>(<expr>(<name>tmp</name> = <call><name>OBJ_GET_PARENT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition>
        <expr_stmt><expr><name>obj</name> = <name>tmp</name></expr>;</expr_stmt></while>
    <if>if <condition>(<expr>!<call><name>JS_CallFunctionName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>clasp</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSXML</name> *</type>
<name>StartNonListXMLMethod</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> **</type><name>objp</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>VALUE_IS_FUNCTION</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>-2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetInstancePrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>objp</name></expr></argument>, <argument><expr>&amp;<name>js_XMLClass</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name> || <name><name>xml</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_LIST</name></expr>)</condition><then>
        <return>return <expr><name>xml</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name> == 1</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>xml</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>xml</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>objp</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!*<name>objp</name></expr>)</condition><then>
                <return>return <expr><name>NULL</name></expr>;</return></then></if>
            <expr_stmt><expr><name><name>argv</name><index>[<expr>-1</expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr>*<name>objp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>xml</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><name>fun</name> = (<name>JSFunction</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>-2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>fun</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name></type> <name><name>numBuf</name><index>[<expr>12</expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>JS_snprintf</name><argument_list>(<argument><expr><name>numBuf</name></expr></argument>, <argument><expr>sizeof <name>numBuf</name></expr></argument>, <argument><expr>"%u"</expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><name>JSMSG_NON_LIST_XML_METHOD</name></expr></argument>,
                             <argument><expr><call><name>JS_GetFunctionName</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_METHOD_PROLOG</name></cpp:macro>                                                     \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        xml = (JSXML *) JS_GetInstancePrivate(cx, obj, &amp;js_XMLClass, argv);   \
        if (!xml)                                                             \
            return JS_FALSE;                                                  \
    JS_END_MACRO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NON_LIST_XML_METHOD_PROLOG</name></cpp:macro>                                            \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        xml = StartNonListXMLMethod(cx, &amp;obj, argv);                          \
        if (!xml)                                                             \
            return JS_FALSE;                                                  \
        JS_ASSERT(xml-&gt;xml_class != JSXML_CLASS_LIST);                        \
    JS_END_MACRO</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_addNamespace</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                 <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>nsobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>NON_LIST_XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>xml</name> = <call><name>CHECK_COPY_ON_WRITE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>nsobj</name> = <call><name>CallConstructorFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name><name>js_NamespaceClass</name>.<name>base</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>nsobj</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>nsobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ns</name> = (<name>JSXMLNamespace</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nsobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>AddInScopeNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>ns</name>-&gt;<name>declared</name></name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_appendChild</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>vxml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>name</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>vobj</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>NON_LIST_XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xml</name> = <call><name>CHECK_COPY_ON_WRITE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<call><name>js_GetAnyName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<call><name>GetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vobj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>OBJECT_IS_XML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vobj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vxml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>vxml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>IndexToIdVal</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>vxml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>PutProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_attribute</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
              <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>qn</name> = <call><name>ToAttributeName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>qn</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>qn</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block">/* local root */</comment>
    <return>return <expr><call><name>GetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_attributes</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
               <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSTempValueRooter</name></type> <name>tvr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>name</name> = <call><name>ATOM_KEY</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>atomState</name>.<name>starAtom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>qn</name> = <call><name>ToAttributeName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>qn</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>name</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>qn</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_PUSH_SINGLE_TEMP_ROOT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>tvr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>GetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_POP_TEMP_ROOT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>tvr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSXML</name> *</type>
<name>xml_list_helper</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>listobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>list</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>listobj</name> = <call><name>js_NewXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>listobj</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>listobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>list</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>listobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>list</name>-&gt;<name>xml_target</name></name> = <name>xml</name></expr>;</expr_stmt>
    <return>return <expr><name>list</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_child_helper</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>name</name></decl></param>,
                 <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uint32</name></type> <name>index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>kid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>kidobj</name></decl>;</decl_stmt>

    <comment type="block">/* ECMA-357 13.4.4.6 */</comment>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>xml</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>js_IdIsIndex</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>index</name> &gt;= <call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>rval</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>kid</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>rval</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>kidobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>kidobj</name></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
                <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>kidobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><call><name>GetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_child</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>list</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>, *<decl><type ref="prev"/><name>vxml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArrayCursor</name></type> <name>cursor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>name</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>kidobj</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>name</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
        <comment type="block">/* ECMA-357 13.5.4.4 */</comment>
        <expr_stmt><expr><name>list</name> = <call><name>xml_list_helper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>list</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

        <expr_stmt><expr><call><name>XMLArrayCursorInit</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr>(<name>kid</name> = (<name>JSXML</name> *) <call><name>XMLArrayCursorNext</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>kidobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>kidobj</name></expr>)</condition><then>
                <break>break;</break></then></if>
            <if>if <condition>(<expr>!<call><name>xml_child_helper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kidobj</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <break>break;</break></then></if>
            <if>if <condition>(<expr><call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="block">/* The property didn't exist in this kid. */</comment>
                <continue>continue;</continue>
            }</block></then></if>

            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>vxml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>(!<call><name>JSXML_HAS_KIDS</name><argument_list>(<argument><expr><name>vxml</name></expr></argument>)</argument_list></call> || <name><name>vxml</name>-&gt;<name>xml_kids</name>.<name>length</name></name> != 0) &amp;&amp;
                !<call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>vxml</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
        }</block></while>
        <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>!<name>kid</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* ECMA-357 Edition 2 13.3.4.6 (note 13.3, not 13.4 as in Edition 1). */</comment>
    <if>if <condition>(<expr>!<call><name>xml_child_helper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr><call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr>*<name>rval</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>xml_list_helper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_childIndex</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
               <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>parent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>NON_LIST_XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>parent</name> = <name><name>xml</name>-&gt;<name>parent</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>parent</name> || <name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ATTRIBUTE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>rval</name> = <call><name>DOUBLE_TO_JSVAL</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>jsNaN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>
    <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr><call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>parent</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call> == <name>xml</name></expr>)</condition><then>
            <break>break;</break></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>i</name> &lt; <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>js_NewNumberValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_children</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
             <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>name</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>name</name> = <call><name>ATOM_KEY</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>atomState</name>.<name>starAtom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>GetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_comments</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
             <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>list</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>, *<decl><type ref="prev"/><name>vxml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>kidobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>list</name> = <call><name>xml_list_helper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>list</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
        <comment type="block">/* 13.5.4.6 Step 2. */</comment>
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kid</name> &amp;&amp; <name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ok</name> = <call><name>js_EnterLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <break>break;</break></then></if>
                <expr_stmt><expr><name>kidobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>kidobj</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ok</name> = <call><name>xml_comments</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kidobj</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>v</name> = <name>JSVAL_NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name>js_LeaveLocalRootScopeWithResult</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <break>break;</break></then></if>
                <expr_stmt><expr><name>vxml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>vxml</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ok</name> = <call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>vxml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                        <break>break;</break></then></if>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
    }</block></then> <else>else <block>{
        <comment type="block">/* 13.4.4.9 Step 2. */</comment>
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kid</name> &amp;&amp; <name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_COMMENT</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ok</name> = <call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <break>break;</break></then></if>
            }</block></then></if>
        }</block></for>
    }</block></else></if>

    <return>return <expr><name>ok</name></expr>;</return>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_contains</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
             <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>eq</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArrayCursor</name></type> <name>cursor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>kidobj</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>value</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>eq</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>XMLArrayCursorInit</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr>(<name>kid</name> = (<name>JSXML</name> *) <call><name>XMLArrayCursorNext</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>kidobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>kidobj</name> || !<call><name>xml_equality</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kidobj</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr>&amp;<name>eq</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <break>break;</break></then></if>
            <if>if <condition>(<expr><name>eq</name></expr>)</condition><then>
                <break>break;</break></then></if>
        }</block></while>
        <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>kid</name> &amp;&amp; !<name>eq</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr>!<call><name>xml_equality</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr>&amp;<name>eq</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></else></if>
    <expr_stmt><expr>*<name>rval</name> = <call><name>BOOLEAN_TO_JSVAL</name><argument_list>(<argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_copy</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>copy</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>copy</name> = <call><name>DeepCopy</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>copy</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>copy</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_descendants</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>name</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>name</name> = (<name>argc</name> == 0) ? <call><name>ATOM_KEY</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>atomState</name>.<name>starAtom</name></name></expr></argument>)</argument_list></call> : <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>list</name> = <call><name>Descendants</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>list</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>list</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_elements</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
             <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>list</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>, *<decl><type ref="prev"/><name>vxml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>name</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>nameqn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsid</name></type> <name>funid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArrayCursor</name></type> <name>cursor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>kidobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>name</name> = (<name>argc</name> == 0) ? <call><name>ATOM_KEY</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>atomState</name>.<name>starAtom</name></name></expr></argument>)</argument_list></call> : <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nameqn</name> = <call><name>ToXMLName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>funid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>nameqn</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>nameqn</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>list</name> = <call><name>xml_list_helper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>list</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name>funid</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <expr_stmt><expr><name><name>list</name>-&gt;<name>xml_targetprop</name></name> = <name>nameqn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
        <comment type="block">/* 13.5.4.6 */</comment>
        <expr_stmt><expr><call><name>XMLArrayCursorInit</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr>(<name>kid</name> = (<name>JSXML</name> *) <call><name>XMLArrayCursorNext</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
            <if>if <condition>(<expr><name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ok</name> = <call><name>js_EnterLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <break>break;</break></then></if>
                <expr_stmt><expr><name>kidobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>kidobj</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ok</name> = <call><name>xml_elements</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kidobj</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>v</name> = <name>JSVAL_NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name>js_LeaveLocalRootScopeWithResult</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <break>break;</break></then></if>
                <expr_stmt><expr><name>vxml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>vxml</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ok</name> = <call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>vxml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                        <break>break;</break></then></if>
                }</block></then></if>
            }</block></then></if>
        }</block></while>
        <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kid</name> &amp;&amp; <name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name> &amp;&amp;
                <call><name>MatchElemName</name><argument_list>(<argument><expr><name>nameqn</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ok</name> = <call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <break>break;</break></then></if>
            }</block></then></if>
        }</block></for>
    }</block></else></if>

    <return>return <expr><name>ok</name></expr>;</return>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_hasOwnProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                   <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>found</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>JS_InstanceOf</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name>js_XMLClass</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>name</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>HasProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>found</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name>found</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>rval</name> = <name>JSVAL_TRUE</name></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name>js_HasOwnPropertyHelper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>js_LookupProperty</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>,
                                   <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_hasComplexContent</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                      <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>kidobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>XML_METHOD_PROLOG</name></expr>;</expr_stmt>
<label><name>again</name>:</label>
    <switch>switch <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name></expr>)</condition> <block>{
      <case>case <expr><name>JSXML_CLASS_ATTRIBUTE</name></expr>:
      </case><case>case <expr><name>JSXML_CLASS_COMMENT</name></expr>:
      </case><case>case <expr><name>JSXML_CLASS_PROCESSING_INSTRUCTION</name></expr>:
      </case><case>case <expr><name>JSXML_CLASS_TEXT</name></expr>:
        <expr_stmt><expr>*<name>rval</name> = <name>JSVAL_FALSE</name></expr>;</expr_stmt>
        <break>break;</break>
      </case><case>case <expr><name>JSXML_CLASS_LIST</name></expr>:
        <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>rval</name> = <name>JSVAL_TRUE</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name> == 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kid</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>kidobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>kidobj</name></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
                <expr_stmt><expr><name>obj</name> = <name>kidobj</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>again</name>;</goto>
            }</block></then></if>
        }</block></then></if></else></if>
        <comment type="block">/* FALL THROUGH */</comment>
      </case><default>default:
        <expr_stmt><expr>*<name>rval</name> = <name>JSVAL_FALSE</name></expr>;</expr_stmt>
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kid</name> &amp;&amp; <name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>rval</name> = <name>JSVAL_TRUE</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <break>break;</break>
    </default>}</block></switch>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_hasSimpleContent</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                     <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>rval</name> = <call><name>BOOLEAN_TO_JSVAL</name><argument_list>(<argument><expr><call><name>HasSimpleContent</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<typedef>typedef <type><struct>struct <name>JSTempRootedNSArray</name> <block>{
    <decl_stmt><decl><type><name>JSTempValueRooter</name></type>   <name>tvr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArray</name></type>          <name>array</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type>               <name>value</name></decl>;</decl_stmt>  <comment type="block">/* extra root for temporaries */</comment>
}</block></struct></type> <name>JSTempRootedNSArray</name>;</typedef>

<macro><name>JS_STATIC_DLL_CALLBACK</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>trace_temp_ns_array</name><argument_list>(<argument>JSTracer *trc</argument>, <argument>JSTempValueRooter *tvr</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSTempRootedNSArray</name> *</type><name>tmp</name> <init>= <expr>(<name>JSTempRootedNSArray</name> *)<name>tvr</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>namespace_trace_vector</name><argument_list>(<argument><expr><name>trc</name></expr></argument>,
                           <argument><expr>(<name>JSXMLNamespace</name> **)<name><name>tmp</name>-&gt;<name>array</name>.<name>vector</name></name></expr></argument>,
                           <argument><expr><name><name>tmp</name>-&gt;<name>array</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XMLArrayCursorTrace</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>array</name>.<name>cursors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_CALL_VALUE_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name><name>tmp</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr>"temp_ns_array_value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>InitTempNSArray</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSTempRootedNSArray</name> *</type><name>tmp</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>XMLArrayInit</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>tmp</name>-&gt;<name>array</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tmp</name>-&gt;<name>value</name></name> = <name>JSVAL_NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_PUSH_TEMP_ROOT_TRACE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>trace_temp_ns_array</name></expr></argument>, <argument><expr>&amp;<name><name>tmp</name>-&gt;<name>tvr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>FinishTempNSArray</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSTempRootedNSArray</name> *</type><name>tmp</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>tmp</name>-&gt;<name>tvr</name>.<name>u</name>.<name>trace</name></name> == <name>trace_temp_ns_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_POP_TEMP_ROOT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>tmp</name>-&gt;<name>tvr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XMLArrayFinish</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>tmp</name>-&gt;<name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Populate a new JS array with elements of JSTempRootedNSArray.array and
 * place the result into rval.  rval must point to a rooted location.
 */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>TempNSArrayToJSArray</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSTempRootedNSArray</name> *</type><name>tmp</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>arrayobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>nsobj</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>arrayobj</name> = <call><name>js_NewArrayObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>arrayobj</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>arrayobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>tmp</name>-&gt;<name>array</name>.<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>ns</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>tmp</name>-&gt;<name>array</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then>
            <continue>continue;</continue></then></if>
        <expr_stmt><expr><name>nsobj</name> = <call><name>js_GetXMLNamespaceObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>nsobj</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>tmp</name>-&gt;<name>value</name></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>nsobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>OBJ_SET_PROPERTY</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>arrayobj</name></expr></argument>, <argument><expr><call><name>INT_TO_JSID</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name><name>tmp</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></for>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>FindInScopeNamespaces</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>JSXMLArray</name> *</type><name>nsarray</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uint32</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>, *<decl><type ref="prev"/><name>ns2</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>length</name> = <name><name>nsarray</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
    <do>do <block>{
        <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then>
            <continue>continue;</continue></then></if>
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>xml</name>-&gt;<name>xml_namespaces</name>.<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>ns</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then>
                <continue>continue;</continue></then></if>

            <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>ns2</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr><name>nsarray</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>ns2</name> &amp;&amp;
                    ((<name><name>ns2</name>-&gt;<name>prefix</name></name> &amp;&amp; <name><name>ns</name>-&gt;<name>prefix</name></name>)
                     ? <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>ns2</name>-&gt;<name>prefix</name></name></expr></argument>, <argument><expr><name><name>ns</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call>
                     : <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>ns2</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>ns</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                    <break>break;</break>
                }</block></then></if>
            }</block></for>

            <if>if <condition>(<expr><name>j</name> == <name>length</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>!<call><name>XMLARRAY_APPEND</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nsarray</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
                <expr_stmt><expr>++<name>length</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block> while <condition>(<expr>(<name>xml</name> = <name><name>xml</name>-&gt;<name>parent</name></name>) != <name>NULL</name></expr>)</condition>;</do>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>length</name> == <name><name>nsarray</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_inScopeNamespaces</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                      <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSTempRootedNSArray</name></type> <name>namespaces</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>NON_LIST_XML_METHOD_PROLOG</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>InitTempNSArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>namespaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>FindInScopeNamespaces</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr>&amp;<name><name>namespaces</name>.<name>array</name></name></expr></argument>)</argument_list></call> &amp;&amp;
         <call><name>TempNSArrayToJSArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>namespaces</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FinishTempNSArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>namespaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_insertChildAfter</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                     <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>arg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>NON_LIST_XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JSXML_HAS_KIDS</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>arg</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>kid</name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr>!<call><name>VALUE_IS_XML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>kid</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> = <call><name>XMLARRAY_FIND_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>kid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>i</name> == <name>XML_NOT_FOUND</name></expr>)</condition><then>
            <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
        <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name>xml</name> = <call><name>CHECK_COPY_ON_WRITE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>Insert</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_insertChildBefore</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                      <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>arg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>NON_LIST_XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JSXML_HAS_KIDS</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>arg</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>kid</name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> = <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr>!<call><name>VALUE_IS_XML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>kid</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> = <call><name>XMLARRAY_FIND_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>kid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>i</name> == <name>XML_NOT_FOUND</name></expr>)</condition><then>
            <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
    }</block></else></if>

    <expr_stmt><expr><name>xml</name> = <call><name>CHECK_COPY_ON_WRITE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>Insert</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_length</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>rval</name> = <name>JSVAL_ONE</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr>!<call><name>js_NewNumberValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></else></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_localName</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
              <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>NON_LIST_XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>rval</name> = <name><name>xml</name>-&gt;<name>name</name></name> ? <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name><name>xml</name>-&gt;<name>name</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call> : <name>JSVAL_NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_name</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>nameobj</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>NON_LIST_XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>xml</name>-&gt;<name>name</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>rval</name> = <name>JSVAL_NULL</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>nameobj</name> = <call><name>js_GetXMLQNameObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>nameobj</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>nameobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_namespace</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
              <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>prefix</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSTempRootedNSArray</name></type> <name>inScopeNSes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsuint</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>nsobj</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>NON_LIST_XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>argc</name> == 0 &amp;&amp; !<call><name>JSXML_HAS_NAME</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>rval</name> = <name>JSVAL_NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>argc</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>prefix</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>prefix</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>prefix</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block">/* local root */</comment>
    }</block></else></if>

    <comment type="block">/* After this point the control must flow through label out. */</comment>
    <expr_stmt><expr><call><name>InitTempNSArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>inScopeNSes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>FindInScopeNamespaces</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr>&amp;<name><name>inScopeNSes</name>.<name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <goto>goto <name>out</name>;</goto></then></if>

    <if>if <condition>(<expr>!<name>prefix</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ns</name> = <call><name>GetNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>&amp;<name><name>inScopeNSes</name>.<name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
            <goto>goto <name>out</name>;</goto>
        }</block></then></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>ns</name> = <name>NULL</name></expr>;</expr_stmt>
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>length</name> = <name><name>inScopeNSes</name>.<name>array</name>.<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>ns</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>inScopeNSes</name>.<name>array</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ns</name> &amp;&amp; <name><name>ns</name>-&gt;<name>prefix</name></name> &amp;&amp; <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>prefix</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <break>break;</break></then></if>
            <expr_stmt><expr><name>ns</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></for>
    }</block></else></if>

    <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>rval</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>nsobj</name> = <call><name>js_GetXMLNamespaceObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>nsobj</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
            <goto>goto <name>out</name>;</goto>
        }</block></then></if>
        <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>nsobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <label><name>out</name>:</label>
    <expr_stmt><expr><call><name>FinishTempNSArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>inScopeNSes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_namespaceDeclarations</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                          <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>yml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSTempRootedNSArray</name></type> <name>ancestors</name></decl>, <decl><type ref="prev"/><name>declared</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>NON_LIST_XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSXML_HAS_VALUE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <comment type="block">/* From here, control flow must goto out to finish these arrays. */</comment>
    <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>InitTempNSArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>ancestors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>InitTempNSArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>declared</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>yml</name> = <name>xml</name></expr>;</expr_stmt>

    <while>while <condition>(<expr>(<name>yml</name> = <name><name>yml</name>-&gt;<name>parent</name></name>) != <name>NULL</name></expr>)</condition> <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>yml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>yml</name>-&gt;<name>xml_namespaces</name>.<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>ns</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>yml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ns</name> &amp;&amp;
                !<call><name>XMLARRAY_HAS_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>ancestors</name>.<name>array</name></name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>namespace_match</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ok</name> = <call><name>XMLARRAY_APPEND</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>ancestors</name>.<name>array</name></name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <goto>goto <name>out</name>;</goto></then></if>
            }</block></then></if>
        }</block></for>
    }</block></while>

    <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>xml</name>-&gt;<name>xml_namespaces</name>.<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>ns</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then>
            <continue>continue;</continue></then></if>
        <if>if <condition>(<expr>!<name><name>ns</name>-&gt;<name>declared</name></name></expr>)</condition><then>
            <continue>continue;</continue></then></if>
        <if>if <condition>(<expr>!<call><name>XMLARRAY_HAS_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>ancestors</name>.<name>array</name></name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>namespace_match</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ok</name> = <call><name>XMLARRAY_APPEND</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>declared</name>.<name>array</name></name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                <goto>goto <name>out</name>;</goto></then></if>
        }</block></then></if>
    }</block></for>

    <expr_stmt><expr><name>ok</name> = <call><name>TempNSArrayToJSArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>declared</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>
    <comment type="block">/* Finishing must be in reverse order of initialization to follow LIFO. */</comment>
    <expr_stmt><expr><call><name>FinishTempNSArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>declared</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FinishTempNSArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>ancestors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>js_attribute_str</name><index>[]</index></name> <init>= <expr>"attribute"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>js_text_str</name><index>[]</index></name>      <init>= <expr>"text"</expr></init></decl>;</decl_stmt>

<comment type="block">/* Exported to jsgc.c #ifdef DEBUG. */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>js_xml_class_str</name><index>[]</index></name> <init>= <expr><block>{
    <expr>"list"</expr>,
    <expr>"element"</expr>,
    <expr><name>js_attribute_str</name></expr>,
    <expr>"processing-instruction"</expr>,
    <expr><name>js_text_str</name></expr>,
    <expr>"comment"</expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_nodeKind</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
             <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>NON_LIST_XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name> = <call><name>JS_InternString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>js_xml_class_str</name><index>[<expr><name><name>xml</name>-&gt;<name>xml_class</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>rval</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>NormalizingDelete</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>index</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>DeleteListElement</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><call><name>DeleteByIndex</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_normalize</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
              <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>, *<decl><type ref="prev"/><name>kid2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>kidobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>junk</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JSXML_HAS_KIDS</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>xml</name> = <call><name>CHECK_COPY_ON_WRITE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>kid</name></expr>)</condition><then>
            <continue>continue;</continue></then></if>
        <if>if <condition>(<expr><name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>kidobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>kidobj</name> || !<call><name>xml_normalize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kidobj</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr>&amp;<name>junk</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        }</block></then> <else>else <if>if <condition>(<expr><name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_TEXT</name></expr>)</condition><then> <block>{
            <while>while <condition>(<expr><name>i</name> + 1 &lt; <name>n</name> &amp;&amp;
                   (<name>kid2</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name> + 1</expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call>) &amp;&amp;
                   <name><name>kid2</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_TEXT</name></expr>)</condition> <block>{
                <expr_stmt><expr><name>str</name> = <call><name>js_ConcatStrings</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>kid</name>-&gt;<name>xml_value</name></name></expr></argument>, <argument><expr><name><name>kid2</name>-&gt;<name>xml_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
                <expr_stmt><expr><call><name>NormalizingDelete</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>i</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>n</name> = <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>kid</name>-&gt;<name>xml_value</name></name> = <name>str</name></expr>;</expr_stmt>
            }</block></while>
            <if>if <condition>(<expr><call><name>IS_EMPTY</name><argument_list>(<argument><expr><name><name>kid</name>-&gt;<name>xml_value</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>NormalizingDelete</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>n</name> = <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</expr_stmt>
                <expr_stmt><expr>--<name>i</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if></else></if>
    }</block></for>

    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_parent</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>parent</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>parentobj</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>parent</name> = <name><name>xml</name>-&gt;<name>parent</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>rval</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> = <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>n</name> == 0</expr>)</condition><then>
            <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

        <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>kid</name></expr>)</condition><then>
            <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>parent</name> = <name><name>kid</name>-&gt;<name>parent</name></name></expr>;</expr_stmt>
        <for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kid</name> &amp;&amp; <name><name>kid</name>-&gt;<name>parent</name></name> != <name>parent</name></expr>)</condition><then>
                <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
        }</block></for>
    }</block></then></if>

    <if>if <condition>(<expr>!<name>parent</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>rval</name> = <name>JSVAL_NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>parentobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>parentobj</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>parentobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_processingInstructions</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>,
                           <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>list</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>, *<decl><type ref="prev"/><name>vxml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>name</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>nameqn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsid</name></type> <name>funid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArrayCursor</name></type> <name>cursor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>kidobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>name</name> = (<name>argc</name> == 0) ? <call><name>ATOM_KEY</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>atomState</name>.<name>starAtom</name></name></expr></argument>)</argument_list></call> : <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nameqn</name> = <call><name>ToXMLName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>funid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>nameqn</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>nameqn</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>list</name> = <call><name>xml_list_helper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>list</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr><name>funid</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <expr_stmt><expr><name><name>list</name>-&gt;<name>xml_targetprop</name></name> = <name>nameqn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
        <comment type="block">/* 13.5.4.17 Step 4 (misnumbered 9 -- Erratum?). */</comment>
        <expr_stmt><expr><call><name>XMLArrayCursorInit</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr>(<name>kid</name> = (<name>JSXML</name> *) <call><name>XMLArrayCursorNext</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
            <if>if <condition>(<expr><name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ok</name> = <call><name>js_EnterLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <break>break;</break></then></if>
                <expr_stmt><expr><name>kidobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>kidobj</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ok</name> = <call><name>xml_processingInstructions</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kidobj</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>v</name> = <name>JSVAL_NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name>js_LeaveLocalRootScopeWithResult</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <break>break;</break></then></if>
                <expr_stmt><expr><name>vxml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>vxml</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ok</name> = <call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>vxml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                        <break>break;</break></then></if>
                }</block></then></if>
            }</block></then></if>
        }</block></while>
        <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <comment type="block">/* 13.4.4.28 Step 4. */</comment>
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kid</name> &amp;&amp; <name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_PROCESSING_INSTRUCTION</name> &amp;&amp;
                (<call><name>IS_STAR</name><argument_list>(<argument><expr><name><name>nameqn</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call> ||
                 <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>nameqn</name>-&gt;<name>localName</name></name></expr></argument>, <argument><expr><name><name>kid</name>-&gt;<name>name</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ok</name> = <call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <break>break;</break></then></if>
            }</block></then></if>
        }</block></for>
    }</block></else></if>

    <return>return <expr><name>ok</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_prependChild</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                 <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>NON_LIST_XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xml</name> = <call><name>CHECK_COPY_ON_WRITE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>Insert</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_propertyIsEnumerable</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                         <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>index</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>name</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>rval</name> = <name>JSVAL_FALSE</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>js_IdIsIndex</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
            <comment type="block">/* 13.5.4.18. */</comment>
            <expr_stmt><expr>*<name>rval</name> = <call><name>BOOLEAN_TO_JSVAL</name><argument_list>(<argument><expr><name>index</name> &lt; <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="block">/* 13.4.4.30. */</comment>
            <expr_stmt><expr>*<name>rval</name> = <call><name>BOOLEAN_TO_JSVAL</name><argument_list>(<argument><expr><name>index</name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>namespace_full_match</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>JSXMLNamespace</name> *</type><name>nsa</name> <init>= <expr>(const <name>JSXMLNamespace</name> *) <name>a</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>JSXMLNamespace</name> *</type><name>nsb</name> <init>= <expr>(const <name>JSXMLNamespace</name> *) <name>b</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>nsa</name>-&gt;<name>prefix</name></name> &amp;&amp; <name><name>nsb</name>-&gt;<name>prefix</name></name> &amp;&amp;
        !<call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>nsa</name>-&gt;<name>prefix</name></name></expr></argument>, <argument><expr><name><name>nsb</name>-&gt;<name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>nsa</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>nsb</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_removeNamespace_helper</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>, <param><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>thisns</name></decl>, *<decl><type ref="prev"/><name>attrns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>attr</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>thisns</name> = <call><name>GetNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>thisns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>thisns</name> == <name>ns</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>xml</name>-&gt;<name>xml_attrs</name>.<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>attr</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_attrs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>attr</name></expr>)</condition><then>
            <continue>continue;</continue></then></if>
        <expr_stmt><expr><name>attrns</name> = <call><name>GetNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>attr</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>attrns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>attrns</name> == <name>ns</name></expr>)</condition><then>
            <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
    }</block></for>

    <expr_stmt><expr><name>i</name> = <call><name>XMLARRAY_FIND_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>namespace_full_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>i</name> != <name>XML_NOT_FOUND</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>XMLArrayDelete</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>kid</name> &amp;&amp; <name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name>xml_removeNamespace_helper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        }</block></then></if>
    }</block></for>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_removeNamespace</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                    <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>nsobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>NON_LIST_XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>xml</name> = <call><name>CHECK_COPY_ON_WRITE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>nsobj</name> = <call><name>CallConstructorFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name><name>js_NamespaceClass</name>.<name>base</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>nsobj</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>nsobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ns</name> = (<name>JSXMLNamespace</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nsobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* NOTE: remove ns from each ancestor if not used by that ancestor. */</comment>
    <return>return <expr><call><name>xml_removeNamespace_helper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_replace</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>vxml</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>name</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>matchIndex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>nameobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>nameqn</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>NON_LIST_XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>value</name> = <name><name>argv</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>vxml</name> = <call><name>VALUE_IS_XML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call>
           ? (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
           : <name>NULL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>vxml</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name>JS_ConvertValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>JSTYPE_STRING</name></expr></argument>, <argument><expr>&amp;<name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>value</name> = <name><name>argv</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>vxml</name> = <call><name>DeepCopy</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vxml</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>vxml</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>value</name> = <name><name>argv</name><index>[<expr>1</expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>vxml</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name>xml</name> = <call><name>CHECK_COPY_ON_WRITE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>name</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>js_IdIsIndex</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><call><name>Replace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <comment type="block">/* Call function QName per spec, not ToXMLName, to avoid attribute names. */</comment>
    <expr_stmt><expr><name>nameobj</name> = <call><name>CallConstructorFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name><name>js_QNameClass</name>.<name>base</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>nameobj</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>nameobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nameqn</name> = (<name>JSXMLQName</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nameobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>index</name> = <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>matchIndex</name> = <name>XML_NOT_FOUND</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>index</name> != 0</expr>)</condition> <block>{
        <expr_stmt><expr>--<name>index</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>kid</name> &amp;&amp; <call><name>MatchElemName</name><argument_list>(<argument><expr><name>nameqn</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>matchIndex</name> != <name>XML_NOT_FOUND</name></expr>)</condition><then>
                <expr_stmt><expr><call><name>DeleteByIndex</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>matchIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><name>matchIndex</name> = <name>index</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></while>

    <return>return <expr><name>matchIndex</name> == <name>XML_NOT_FOUND</name> || <call><name>Replace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>matchIndex</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_setChildren</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<call><name>StartNonListXMLMethod</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>obj</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<call><name>PutProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>ATOM_KEY</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>atomState</name>.<name>starAtom</name></name></expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr>&amp;<name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_setLocalName</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                 <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>nameqn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>namestr</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>NON_LIST_XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JSXML_HAS_NAME</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>name</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> &amp;&amp;
        <call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == &amp;<name><name>js_QNameClass</name>.<name>base</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>nameqn</name> = (<name>JSXMLQName</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>namestr</name> = <name><name>nameqn</name>-&gt;<name>localName</name></name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr>!<call><name>JS_ConvertValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>JSTYPE_STRING</name></expr></argument>, <argument><expr>&amp;<name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>name</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>namestr</name> = <call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name>xml</name> = <call><name>CHECK_COPY_ON_WRITE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>xml</name>-&gt;<name>name</name>-&gt;<name>localName</name></name> = <name>namestr</name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_setName</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>nsowner</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>nameqn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>nameobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArray</name> *</type><name>nsarray</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>NON_LIST_XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JSXML_HAS_NAME</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>name</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> &amp;&amp;
        <call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == &amp;<name><name>js_QNameClass</name>.<name>base</name></name> &amp;&amp;
        !(<name>nameqn</name> = (<name>JSXMLQName</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)
         -&gt;<name>uri</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>name</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name><name>nameqn</name>-&gt;<name>localName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>nameobj</name> = <call><name>js_ConstructObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>js_QNameClass</name>.<name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>nameobj</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>nameqn</name> = (<name>JSXMLQName</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nameobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* ECMA-357 13.4.4.35 Step 4. */</comment>
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_PROCESSING_INSTRUCTION</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>nameqn</name>-&gt;<name>uri</name></name> = <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name>xml</name> = <call><name>CHECK_COPY_ON_WRITE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>xml</name>-&gt;<name>name</name></name> = <name>nameqn</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Erratum: nothing in 13.4.4.35 talks about making the name match the
     * in-scope namespaces, either by finding an in-scope namespace with a
     * matching uri and setting the new name's prefix to that namespace's
     * prefix, or by extending the in-scope namespaces for xml (which are in
     * xml-&gt;parent if xml is an attribute or a PI).
     */</comment>
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>nsowner</name> = <name>xml</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr>!<name><name>xml</name>-&gt;<name>parent</name></name> || <name><name>xml</name>-&gt;<name>parent</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then>
            <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>nsowner</name> = <name><name>xml</name>-&gt;<name>parent</name></name></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name><name>nameqn</name>-&gt;<name>prefix</name></name></expr>)</condition><then> <block>{
        <comment type="block">/*
         * The name being set has a prefix, which originally came from some
         * namespace object (which may be the null namespace, where both the
         * prefix and uri are the empty string).  We must go through a full
         * GetNamespace in case that namespace is in-scope in nsowner.
         *
         * If we find such an in-scope namespace, we return true right away,
         * in this block.  Otherwise, we fall through to the final return of
         * AddInScopeNamespace(cx, nsowner, ns).
         */</comment>
        <expr_stmt><expr><name>ns</name> = <call><name>GetNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nameqn</name></expr></argument>, <argument><expr>&amp;<name><name>nsowner</name>-&gt;<name>xml_namespaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

        <comment type="block">/* XXXbe have to test membership to see whether GetNamespace added */</comment>
        <if>if <condition>(<expr><call><name>XMLARRAY_HAS_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>nsowner</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
    }</block></then> <else>else <block>{
        <comment type="block">/*
         * At this point, we know nameqn-&gt;prefix is null, so nameqn-&gt;uri can't
         * be the empty string (the null namespace always uses the empty string
         * for both prefix and uri).
         *
         * This means we must inline GetNamespace and specialize it to match
         * uri only, never prefix.  If we find a namespace with nameqn's uri
         * already in nsowner-&gt;xml_namespaces, then all that we need do is set
         * nameqn-&gt;prefix to that namespace's prefix.
         *
         * If no such namespace exists, we can create one without going through
         * the constructor, because we know nameqn-&gt;uri is non-empty (so prefix
         * does not need to be converted from null to empty by QName).
         */</comment>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>IS_EMPTY</name><argument_list>(<argument><expr><name><name>nameqn</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>nsarray</name> = &amp;<name><name>nsowner</name>-&gt;<name>xml_namespaces</name></name></expr>;</expr_stmt>
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>nsarray</name>-&gt;<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>ns</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr><name>nsarray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXMLNamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ns</name> &amp;&amp; <call><name>js_EqualStrings</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>nameqn</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>nameqn</name>-&gt;<name>prefix</name></name> = <name><name>ns</name>-&gt;<name>prefix</name></name></expr>;</expr_stmt>
                <return>return <expr><name>JS_TRUE</name></expr>;</return>
            }</block></then></if>
        }</block></for>

        <expr_stmt><expr><name>ns</name> = <call><name>js_NewXMLNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>nameqn</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ns</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></else></if>

    <return>return <expr><call><name>AddInScopeNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nsowner</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_setNamespace</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                 <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>nsowner</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>nsobj</name></decl>, *<decl><type ref="prev"/><name>qnobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name><name>qnargv</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name>NON_LIST_XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JSXML_HAS_NAME</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>xml</name> = <call><name>CHECK_COPY_ON_WRITE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name> || !<call><name>js_GetXMLQNameObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>nsobj</name> = <call><name>js_ConstructObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>js_NamespaceClass</name>.<name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>nsobj</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>ns</name> = (<name>JSXMLNamespace</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nsobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ns</name>-&gt;<name>declared</name></name> = <name>JS_TRUE</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>qnargv</name><index>[<expr>0</expr>]</index></name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>nsobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>qnargv</name><index>[<expr>1</expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>xml</name>-&gt;<name>name</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>qnobj</name> = <call><name>js_ConstructObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>js_QNameClass</name>.<name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>qnargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>qnobj</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name><name>xml</name>-&gt;<name>name</name></name> = (<name>JSXMLQName</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>qnobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Erratum: the spec fails to update the governing in-scope namespaces.
     * See the erratum noted in xml_setName, above.
     */</comment>
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>nsowner</name> = <name>xml</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr>!<name><name>xml</name>-&gt;<name>parent</name></name> || <name><name>xml</name>-&gt;<name>parent</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then>
            <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>nsowner</name> = <name><name>xml</name>-&gt;<name>parent</name></name></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><call><name>AddInScopeNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nsowner</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_text</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>list</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>, *<decl><type ref="prev"/><name>vxml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>kidobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>list</name> = <call><name>xml_list_helper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>list</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kid</name> &amp;&amp; <name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ok</name> = <call><name>js_EnterLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <break>break;</break></then></if>
                <expr_stmt><expr><name>kidobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>kidobj</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ok</name> = <call><name>xml_text</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kidobj</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>v</name> = <name>JSVAL_NULL</name></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name>js_LeaveLocalRootScopeWithResult</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
                <expr_stmt><expr><name>vxml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>vxml</name></expr></argument>)</argument_list></call> != 0 &amp;&amp; !<call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>vxml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            }</block></then></if>
        }</block></for>
    }</block></then> <else>else <block>{
        <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>n</name> = <call><name>JSXML_LENGTH</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>kid</name> = <call><name>XMLARRAY_MEMBER</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>JSXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>kid</name> &amp;&amp; <name><name>kid</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_TEXT</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>!<call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            }</block></then></if>
        }</block></for>
    }</block></else></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_toXMLString</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>str</name> = <call><name>ToXMLString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>rval</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSString</name> *</type>
<name>xml_toString_helper</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>, *<decl><type ref="prev"/><name>kidstr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>kid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArrayCursor</name></type> <name>cursor</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ATTRIBUTE</name> ||
        <name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_TEXT</name></expr>)</condition><then> <block>{
        <return>return <expr><name><name>xml</name>-&gt;<name>xml_value</name></name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name>HasSimpleContent</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><call><name>ToXMLString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>xml</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <expr_stmt><expr><name>str</name> = <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>js_EnterLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>XMLArrayCursorInit</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr>(<name>kid</name> = (<name>JSXML</name> *) <call><name>XMLArrayCursorNext</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
        <if>if <condition>(<expr><name><name>kid</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_COMMENT</name> &amp;&amp;
            <name><name>kid</name>-&gt;<name>xml_class</name></name> != <name>JSXML_CLASS_PROCESSING_INSTRUCTION</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>kidstr</name> = <call><name>xml_toString_helper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>kidstr</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>str</name> = <name>NULL</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>str</name> = <call><name>js_ConcatStrings</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>kidstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
                <break>break;</break></then></if>
        }</block></then></if>
    }</block></while>
    <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_LeaveLocalRootScopeWithResult</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>str</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_toString</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
             <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>str</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>XML_METHOD_PROLOG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name> = <call><name>xml_toString_helper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>rval</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/* XML and XMLList */</comment>
<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_valueOf</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>JSFunctionSpec</name></type> <name><name>xml_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"addNamespace"</expr>,          <expr><name>xml_addNamespace</name></expr>,          <expr>1</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"appendChild"</expr>,           <expr><name>xml_appendChild</name></expr>,           <expr>1</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr><name>js_attribute_str</name></expr>,        <expr><name>xml_attribute</name></expr>,             <expr>1</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"attributes"</expr>,            <expr><name>xml_attributes</name></expr>,            <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"child"</expr>,                 <expr><name>xml_child</name></expr>,                 <expr>1</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"childIndex"</expr>,            <expr><name>xml_childIndex</name></expr>,            <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"children"</expr>,              <expr><name>xml_children</name></expr>,              <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"comments"</expr>,              <expr><name>xml_comments</name></expr>,              <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"contains"</expr>,              <expr><name>xml_contains</name></expr>,              <expr>1</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"copy"</expr>,                  <expr><name>xml_copy</name></expr>,                  <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"descendants"</expr>,           <expr><name>xml_descendants</name></expr>,           <expr>1</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"elements"</expr>,              <expr><name>xml_elements</name></expr>,              <expr>1</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"hasOwnProperty"</expr>,        <expr><name>xml_hasOwnProperty</name></expr>,        <expr>1</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"hasComplexContent"</expr>,     <expr><name>xml_hasComplexContent</name></expr>,     <expr>1</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"hasSimpleContent"</expr>,      <expr><name>xml_hasSimpleContent</name></expr>,      <expr>1</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"inScopeNamespaces"</expr>,     <expr><name>xml_inScopeNamespaces</name></expr>,     <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"insertChildAfter"</expr>,      <expr><name>xml_insertChildAfter</name></expr>,      <expr>2</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"insertChildBefore"</expr>,     <expr><name>xml_insertChildBefore</name></expr>,     <expr>2</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr><name>js_length_str</name></expr>,           <expr><name>xml_length</name></expr>,                <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr><name>js_localName_str</name></expr>,        <expr><name>xml_localName</name></expr>,             <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr><name>js_name_str</name></expr>,             <expr><name>xml_name</name></expr>,                  <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr><name>js_namespace_str</name></expr>,        <expr><name>xml_namespace</name></expr>,             <expr>1</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"namespaceDeclarations"</expr>, <expr><name>xml_namespaceDeclarations</name></expr>, <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"nodeKind"</expr>,              <expr><name>xml_nodeKind</name></expr>,              <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"normalize"</expr>,             <expr><name>xml_normalize</name></expr>,             <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr><name>js_xml_parent_str</name></expr>,       <expr><name>xml_parent</name></expr>,                <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"processingInstructions"</expr>,<expr><name>xml_processingInstructions</name></expr>,<expr>1</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"prependChild"</expr>,          <expr><name>xml_prependChild</name></expr>,          <expr>1</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"propertyIsEnumerable"</expr>,  <expr><name>xml_propertyIsEnumerable</name></expr>,  <expr>1</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"removeNamespace"</expr>,       <expr><name>xml_removeNamespace</name></expr>,       <expr>1</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"replace"</expr>,               <expr><name>xml_replace</name></expr>,               <expr>2</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"setChildren"</expr>,           <expr><name>xml_setChildren</name></expr>,           <expr>1</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"setLocalName"</expr>,          <expr><name>xml_setLocalName</name></expr>,          <expr>1</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"setName"</expr>,               <expr><name>xml_setName</name></expr>,               <expr>1</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"setNamespace"</expr>,          <expr><name>xml_setNamespace</name></expr>,          <expr>1</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr><name>js_text_str</name></expr>,             <expr><name>xml_text</name></expr>,                  <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr><name>js_toString_str</name></expr>,         <expr><name>xml_toString</name></expr>,              <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr><name>js_toXMLString_str</name></expr>,      <expr><name>xml_toXMLString</name></expr>,           <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr><name>js_toSource_str</name></expr>,         <expr><name>xml_toXMLString</name></expr>,           <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr><name>js_valueOf_str</name></expr>,          <expr><name>xml_valueOf</name></expr>,               <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>CopyXMLSettings</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>from</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>to</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>

    <for>for (<init><expr><name>i</name> = <name>XML_IGNORE_COMMENTS</name></expr>;</init> <condition><expr><name>i</name> &lt; <name>XML_PRETTY_INDENT</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>name</name> = <name><name>xml_static_props</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>JS_GetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <if>if <condition>(<expr><call><name>JSVAL_IS_BOOLEAN</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>JS_SetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></for>

    <expr_stmt><expr><name>name</name> = <name><name>xml_static_props</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JS_GetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <if>if <condition>(<expr><call><name>JSVAL_IS_NUMBER</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>JS_SetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>SetDefaultXMLSettings</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>

    <for>for (<init><expr><name>i</name> = <name>XML_IGNORE_COMMENTS</name></expr>;</init> <condition><expr><name>i</name> &lt; <name>XML_PRETTY_INDENT</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>v</name> = <name>JSVAL_TRUE</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>JS_SetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>xml_static_props</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></for>
    <expr_stmt><expr><name>v</name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>JS_SetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>xml_static_props</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_settings</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>settings</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>settings</name> = <call><name>JS_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>settings</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CopyXMLSettings</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_setSettings</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>settings</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>v</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> || <call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>cx</name>-&gt;<name>xmlSettingFlags</name></name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name>ok</name> = <call><name>SetDefaultXMLSettings</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_TRUE</name></expr>;</return></then></if>
        <expr_stmt><expr><name>settings</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cx</name>-&gt;<name>xmlSettingFlags</name></name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name>ok</name> = <call><name>CopyXMLSettings</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <if>if <condition>(<expr><name>ok</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>cx</name>-&gt;<name>xmlSettingFlags</name></name> |= <name>XSF_CACHE_VALID</name></expr>;</expr_stmt></then></if>
    <return>return <expr><name>ok</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>xml_defaultSettings</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                    <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>settings</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>settings</name> = <call><name>JS_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>settings</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>SetDefaultXMLSettings</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>JSFunctionSpec</name></type> <name><name>xml_static_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"settings"</expr>,         <expr><name>xml_settings</name></expr>,          <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"setSettings"</expr>,      <expr><name>xml_setSettings</name></expr>,       <expr>1</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>"defaultSettings"</expr>,  <expr><name>xml_defaultSettings</name></expr>,   <expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>,
    <expr><block>{<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>XML</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>copy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>xobj</name></decl>, *<decl><type ref="prev"/><name>vobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSClass</name> *</type><name>clasp</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>v</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> || <call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>v</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name>xobj</name> = <call><name>ToXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xobj</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>xobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>(<name><name>cx</name>-&gt;<name>fp</name>-&gt;<name>flags</name></name> &amp; <name>JSFRAME_CONSTRUCTING</name>) &amp;&amp; !<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>vobj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>clasp</name> = <call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>clasp</name> == &amp;<name>js_XMLClass</name> ||
            (<name><name>clasp</name>-&gt;<name>flags</name></name> &amp; <name>JSCLASS_DOCUMENT_OBSERVER</name>)</expr>)</condition><then> <block>{
            <comment type="block">/* No need to lock obj, it's newly constructed and thread local. */</comment>
            <expr_stmt><expr><name>copy</name> = <call><name>DeepCopy</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>copy</name></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>copy</name>-&gt;<name>object</name></name> == <name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>JS_TRUE</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>XMLList</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>vobj</name></decl>, *<decl><type ref="prev"/><name>listobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>list</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>v</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> || <call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>v</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <if>if <condition>(<expr>(<name><name>cx</name>-&gt;<name>fp</name>-&gt;<name>flags</name></name> &amp; <name>JSFRAME_CONSTRUCTING</name>) &amp;&amp; !<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>vobj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>OBJECT_IS_XML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vobj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>vobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>listobj</name> = <call><name>js_NewXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>listobj</name></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
                <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>listobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>list</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>listobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
                <return>return <expr><name>JS_TRUE</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/* Toggle on XML support since the script has explicitly requested it. */</comment>
    <expr_stmt><expr><name>listobj</name> = <call><name>ToXMLList</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>listobj</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr>*<name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>listobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSXML_LIST_SIZE</name></cpp:macro>     <cpp:value>(offsetof(JSXML, u) + sizeof(struct JSXMLListVar))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSXML_ELEMENT_SIZE</name></cpp:macro>  <cpp:value>(offsetof(JSXML, u) + sizeof(struct JSXMLVar))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSXML_LEAF_SIZE</name></cpp:macro>     <cpp:value>(offsetof(JSXML, u) + sizeof(JSString *))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name><name>sizeof_JSXML</name><index>[<expr><name>JSXML_CLASS_LIMIT</name></expr>]</index></name> <init>= <expr><block>{
    <expr><name>JSXML_LIST_SIZE</name></expr>,        <comment type="block">/* JSXML_CLASS_LIST */</comment>
    <expr><name>JSXML_ELEMENT_SIZE</name></expr>,     <comment type="block">/* JSXML_CLASS_ELEMENT */</comment>
    <expr><name>JSXML_LEAF_SIZE</name></expr>,        <comment type="block">/* JSXML_CLASS_ATTRIBUTE */</comment>
    <expr><name>JSXML_LEAF_SIZE</name></expr>,        <comment type="block">/* JSXML_CLASS_PROCESSING_INSTRUCTION */</comment>
    <expr><name>JSXML_LEAF_SIZE</name></expr>,        <comment type="block">/* JSXML_CLASS_TEXT */</comment>
    <expr><name>JSXML_LEAF_SIZE</name></expr>         <comment type="block">/* JSXML_CLASS_COMMENT */</comment>
}</block></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_notme</name></cpp:ifdef>
<decl_stmt><decl><type><name>JSCList</name></type> <name>xml_leaks</name> <init>= <expr><call><name>JS_INIT_STATIC_CLIST</name><argument_list>(<argument><expr>&amp;<name>xml_leaks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type>  <name>xml_serial</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>JSXML</name> *</type>
<name>js_NewXML</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXMLClass</name></type> <name>xml_class</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>js_NewGCThing</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>GCX_XML</name></expr></argument>, <argument><expr><name><name>sizeof_JSXML</name><index>[<expr><name>xml_class</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name><name>xml</name>-&gt;<name>object</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>xml</name>-&gt;<name>domnode</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>xml</name>-&gt;<name>parent</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>xml</name>-&gt;<name>name</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>xml</name>-&gt;<name>xml_class</name></name> = <name>xml_class</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>xml</name>-&gt;<name>xml_flags</name></name> = 0</expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSXML_CLASS_HAS_VALUE</name><argument_list>(<argument><expr><name>xml_class</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>xml</name>-&gt;<name>xml_value</name></name> = <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>XMLArrayInit</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>xml_class</name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>xml</name>-&gt;<name>xml_target</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>xml</name>-&gt;<name>xml_targetprop</name></name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>XMLArrayInit</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>XMLArrayInit</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_attrs</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_notme</name></cpp:ifdef>
    <expr_stmt><expr><call><name>JS_APPEND_LINK</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>links</name></name></expr></argument>, <argument><expr>&amp;<name>xml_leaks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>xml</name>-&gt;<name>serial</name></name> = <name>xml_serial</name>++</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>xml</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>livexml</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>xml</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name>js_TraceXML</name><parameter_list>(<param><decl><type><name>JSTracer</name> *</type><name>trc</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>object</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_CALL_OBJECT_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>object</name></name></expr></argument>, <argument><expr>"object"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>name</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_CALL_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>JSTRACE_QNAME</name></expr></argument>, <argument><expr>"name"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>parent</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_CALL_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>parent</name></name></expr></argument>, <argument><expr><name>JSTRACE_XML</name></expr></argument>, <argument><expr>"xml_parent"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <if>if <condition>(<expr><call><name>JSXML_HAS_VALUE</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_value</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>JS_CALL_STRING_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>xml_value</name></name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>xml_trace_vector</name><argument_list>(<argument><expr><name>trc</name></expr></argument>,
                        <argument><expr>(<name>JSXML</name> **) <name><name>xml</name>-&gt;<name>xml_kids</name>.<name>vector</name></name></expr></argument>,
                        <argument><expr><name><name>xml</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XMLArrayCursorTrace</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>xml_kids</name>.<name>cursors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>IS_GC_MARKING_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>XMLArrayTrim</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_target</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>JS_CALL_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>xml_target</name></name></expr></argument>, <argument><expr><name>JSTRACE_XML</name></expr></argument>, <argument><expr>"target"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_targetprop</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_CALL_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>xml_targetprop</name></name></expr></argument>, <argument><expr><name>JSTRACE_QNAME</name></expr></argument>,
                           <argument><expr>"targetprop"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>namespace_trace_vector</name><argument_list>(<argument><expr><name>trc</name></expr></argument>,
                               <argument><expr>(<name>JSXMLNamespace</name> **)<name><name>xml</name>-&gt;<name>xml_namespaces</name>.<name>vector</name></name></expr></argument>,
                               <argument><expr><name><name>xml</name>-&gt;<name>xml_namespaces</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>XMLArrayCursorTrace</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>xml_namespaces</name>.<name>cursors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>IS_GC_MARKING_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>XMLArrayTrim</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><call><name>xml_trace_vector</name><argument_list>(<argument><expr><name>trc</name></expr></argument>,
                            <argument><expr>(<name>JSXML</name> **) <name><name>xml</name>-&gt;<name>xml_attrs</name>.<name>vector</name></name></expr></argument>,
                            <argument><expr><name><name>xml</name>-&gt;<name>xml_attrs</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>XMLArrayCursorTrace</name><argument_list>(<argument><expr><name>trc</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>xml_attrs</name>.<name>cursors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>IS_GC_MARKING_TRACER</name><argument_list>(<argument><expr><name>trc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>XMLArrayTrim</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></else></if>
}</block></function>

<function><type><name>void</name></type>
<name>js_FinalizeXML</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><call><name>JSXML_HAS_KIDS</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>XMLArrayFinish</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_kids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_ELEMENT</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>XMLArrayFinish</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_namespaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>XMLArrayFinish</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>xml</name>-&gt;<name>xml_attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_notme</name></cpp:ifdef>
    <expr_stmt><expr><call><name>JS_REMOVE_LINK</name><argument_list>(<argument><expr>&amp;<name><name>xml</name>-&gt;<name>links</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>UNMETER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>livexml</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>js_ParseNodeToXMLObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSParseNode</name> *</type><name>pn</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>nsval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLNamespace</name> *</type><name>ns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArray</name></type> <name>nsarray</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>js_GetDefaultXMLNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>nsval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>nsval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ns</name> = (<name>JSXMLNamespace</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>nsval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>XMLArrayInit</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>nsarray</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>XMLARRAY_APPEND</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>nsarray</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>xml</name> = <call><name>ParseNodeToXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pn</name></expr></argument>, <argument><expr>&amp;<name>nsarray</name></expr></argument>, <argument><expr><name>XSF_PRECOMPILED_ROOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XMLArrayFinish</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>nsarray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <return>return <expr><name><name>xml</name>-&gt;<name>object</name></name></expr>;</return>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>js_NewXMLObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXMLClass</name></type> <name>xml_class</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSTempValueRooter</name></type> <name>tvr</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>xml</name> = <call><name>js_NewXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>JS_PUSH_TEMP_ROOT_GCTHING</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr>&amp;<name>tvr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_POP_TEMP_ROOT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>tvr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>obj</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSObject</name> *</type>
<name>NewXMLObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>obj</name> = <call><name>js_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>js_XMLClass</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name> || !<call><name>JS_SetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>cx</name>-&gt;<name>weakRoots</name>.<name>newborn</name><index>[<expr><name>GCX_OBJECT</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>xmlobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>livexmlobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>obj</name></expr>;</return>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>js_GetXMLObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXML</name> *</type><name>xml</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>obj</name> = <name><name>xml</name>-&gt;<name>object</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>obj</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> == <name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>obj</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * A JSXML cannot be shared among threads unless it has an object.
     * A JSXML cannot be given an object unless:
     * (a) it has no parent; or
     * (b) its parent has no object (therefore is thread-private); or
     * (c) its parent's object is locked.
     *
     * Once given an object, a JSXML is immutable.
     */</comment>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name><name>xml</name>-&gt;<name>parent</name></name> ||
              !<name><name>xml</name>-&gt;<name>parent</name>-&gt;<name>object</name></name> ||
              <call><name>JS_IS_OBJ_LOCKED</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>xml</name>-&gt;<name>parent</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>obj</name> = <call><name>NewXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>xml</name>-&gt;<name>object</name></name> = <name>obj</name></expr>;</expr_stmt>
    <return>return <expr><name>obj</name></expr>;</return>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>js_InitNamespaceClass</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>JS_InitClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name><name>js_NamespaceClass</name>.<name>base</name></name></expr></argument>, <argument><expr><name>Namespace</name></expr></argument>, <argument><expr>2</expr></argument>,
                        <argument><expr><name>namespace_props</name></expr></argument>, <argument><expr><name>namespace_methods</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>js_InitQNameClass</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>JS_InitClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name><name>js_QNameClass</name>.<name>base</name></name></expr></argument>, <argument><expr><name>QName</name></expr></argument>, <argument><expr>2</expr></argument>,
                        <argument><expr><name>qname_props</name></expr></argument>, <argument><expr><name>qname_methods</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>js_InitAttributeNameClass</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>JS_InitClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>js_AttributeNameClass</name></expr></argument>, <argument><expr><name>AttributeName</name></expr></argument>, <argument><expr>2</expr></argument>,
                        <argument><expr><name>qname_props</name></expr></argument>, <argument><expr><name>qname_methods</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>js_InitAnyNameClass</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>js_GetAnyName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>js_InitXMLClass</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>proto</name></decl>, *<decl><type ref="prev"/><name>pobj</name></decl>, *<decl><type ref="prev"/><name>ctor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSFunction</name> *</type><name>fun</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScopeProperty</name> *</type><name>sprop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>cval</name></decl>, <decl><type ref="prev"/><name><name>argv</name><index>[<expr>1</expr>]</index></name></decl>, <decl><type ref="prev"/><name>junk</name></decl>;</decl_stmt>

    <comment type="block">/* Define the isXMLName function. */</comment>
    <if>if <condition>(<expr>!<call><name>JS_DefineFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>js_isXMLName_str</name></expr></argument>, <argument><expr><name>xml_isXMLName</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <comment type="block">/* Define the XML class constructor and prototype. */</comment>
    <expr_stmt><expr><name>proto</name> = <call><name>JS_InitClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>js_XMLClass</name></expr></argument>, <argument><expr><name>XML</name></expr></argument>, <argument><expr>1</expr></argument>,
                         <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>xml_methods</name></expr></argument>,
                         <argument><expr><name>xml_static_props</name></expr></argument>, <argument><expr><name>xml_static_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>proto</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><name>xml</name> = <call><name>js_NewXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name> || !<call><name>JS_SetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name><name>xml</name>-&gt;<name>object</name></name> = <name>proto</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>xmlobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>livexmlobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Prepare to set default settings on the XML constructor we just made.
     * NB: We can't use JS_GetConstructor, because it calls OBJ_GET_PROPERTY,
     * which is xml_getProperty, which creates a new XMLList every time!  We
     * must instead call js_LookupProperty directly.
     */</comment>
    <if>if <condition>(<expr>!<call><name>js_LookupProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>,
                           <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>atomState</name>.<name>constructorAtom</name></name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr>&amp;<name>pobj</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sprop</name> = (<name>JSScopeProperty</name> *) <name>prop</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>SPROP_HAS_VALID_SLOT</name><argument_list>(<argument><expr><name>sprop</name></expr></argument>, <argument><expr><call><name>OBJ_SCOPE</name><argument_list>(<argument><expr><name>pobj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cval</name> = <call><name>OBJ_GET_SLOT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pobj</name></expr></argument>, <argument><expr><name><name>sprop</name>-&gt;<name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OBJ_DROP_PROPERTY</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pobj</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>VALUE_IS_FUNCTION</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set default settings. */</comment>
    <expr_stmt><expr><name>ctor</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>cval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>xml_setSettings</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ctor</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr>&amp;<name>junk</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <comment type="block">/* Define the XMLList function and give it the same prototype as XML. */</comment>
    <expr_stmt><expr><name>fun</name> = <call><name>JS_DefineFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>js_XMLList_str</name></expr></argument>, <argument><expr><name>XMLList</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>fun</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>js_SetClassPrototype</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>fun</name>-&gt;<name>object</name></name></expr></argument>, <argument><expr><name>proto</name></expr></argument>,
                              <argument><expr><name>JSPROP_READONLY</name> | <name>JSPROP_PERMANENT</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>proto</name></expr>;</return>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>js_InitXMLClasses</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<call><name>js_InitNamespaceClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>js_InitQNameClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>js_InitAttributeNameClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <if>if <condition>(<expr>!<call><name>js_InitAnyNameClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <return>return <expr><call><name>js_InitXMLClass</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>JSBool</name></type>
<name>js_GetFunctionNamespace</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSAtom</name> *</type><name>atom</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>prefix</name></decl>, *<decl><type ref="prev"/><name>uri</name></decl>;</decl_stmt>

    <comment type="block">/* An invalid URI, for internal use only, guaranteed not to collide. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>anti_uri</name><index>[]</index></name> <init>= <expr>"@mozilla.org/js/function"</expr></init></decl>;</decl_stmt>

    <comment type="block">/* Optimize by avoiding JS_LOCK_GC(rt) for the common case. */</comment>
    <expr_stmt><expr><name>rt</name> = <name><name>cx</name>-&gt;<name>runtime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <name><name>rt</name>-&gt;<name>functionNamespaceObject</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_LOCK_GC</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>obj</name> = <name><name>rt</name>-&gt;<name>functionNamespaceObject</name></name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_UNLOCK_GC</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>atom</name> = <call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_function_str</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>prefix</name> = <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/*
             * Note that any race to atomize anti_uri here is resolved by
             * the atom table code, such that at most one atom for anti_uri
             * is created.  We store in rt-&gt;atomState.lazy unconditionally,
             * since we are guaranteed to overwrite either null or the same
             * atom pointer.
             */</comment>
            <expr_stmt><expr><name>atom</name> = <call><name>js_Atomize</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>anti_uri</name></expr></argument>, <argument><expr>sizeof <name>anti_uri</name> - 1</expr></argument>, <argument><expr><name>ATOM_PINNED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <expr_stmt><expr><name><name>rt</name>-&gt;<name>atomState</name>.<name>lazy</name>.<name>functionNamespaceURIAtom</name></name> = <name>atom</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>uri</name> = <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>obj</name> = <call><name>js_NewXMLNamespaceObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

            <comment type="block">/*
             * Avoid entraining any in-scope Object.prototype.  The loss of
             * Namespace.prototype is not detectable, as there is no way to
             * refer to this instance in scripts.  When used to qualify method
             * names, its prefix and uri references are copied to the QName.
             */</comment>
            <expr_stmt><expr><call><name>OBJ_SET_PROTO</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>OBJ_SET_PARENT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>JS_LOCK_GC</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name><name>rt</name>-&gt;<name>functionNamespaceObject</name></name></expr>)</condition><then>
                <expr_stmt><expr><name><name>rt</name>-&gt;<name>functionNamespaceObject</name></name> = <name>obj</name></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><name>obj</name> = <name><name>rt</name>-&gt;<name>functionNamespaceObject</name></name></expr>;</expr_stmt></else></if>
        }</block></then></if>
        <expr_stmt><expr><call><name>JS_UNLOCK_GC</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Note the asymmetry between js_GetDefaultXMLNamespace and js_SetDefaultXML-
 * Namespace.  Get searches fp-&gt;scopeChain for JS_DEFAULT_XML_NAMESPACE_ID,
 * while Set sets JS_DEFAULT_XML_NAMESPACE_ID in fp-&gt;varobj (unless fp is a
 * lightweight function activation).  There's no requirement that fp-&gt;varobj
 * lie directly on fp-&gt;scopeChain, although it should be reachable using the
 * prototype chain from a scope object (cf. JSOPTION_VAROBJFIX in jsapi.h).
 *
 * If Get can't find JS_DEFAULT_XML_NAMESPACE_ID along the scope chain, it
 * creates a default namespace via 'new Namespace()'.  In contrast, Set uses
 * its v argument as the uri of a new Namespace, with "" as the prefix.  See
 * ECMA-357 12.1 and 12.1.1.  Note that if Set is called with a Namespace n,
 * the default XML namespace will be set to ("", n.uri).  So the uri string
 * is really the only usefully stored value of the default namespace.
 */</comment>
<function><type><name>JSBool</name></type>
<name>js_GetDefaultXMLNamespace</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSStackFrame</name> *</type><name>fp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>nsobj</name></decl>, *<decl><type ref="prev"/><name>obj</name></decl>, *<decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>fp</name> = <name><name>cx</name>-&gt;<name>fp</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nsobj</name> = <name><name>fp</name>-&gt;<name>xmlNamespace</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>nsobj</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>nsobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>JS_TRUE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>obj</name> = <name>NULL</name></expr>;</expr_stmt>
    <for>for (<init><expr><name>tmp</name> = <name><name>fp</name>-&gt;<name>scopeChain</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> = <call><name>OBJ_GET_PARENT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
        <expr_stmt><expr><name>obj</name> = <name>tmp</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>OBJ_GET_PROPERTY</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>JS_DEFAULT_XML_NAMESPACE_ID</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
        <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>fp</name>-&gt;<name>xmlNamespace</name></name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>vp</name> = <name>v</name></expr>;</expr_stmt>
            <return>return <expr><name>JS_TRUE</name></expr>;</return>
        }</block></then></if>
    }</block></for>

    <expr_stmt><expr><name>nsobj</name> = <call><name>js_ConstructObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>js_NamespaceClass</name>.<name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>nsobj</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>v</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>nsobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>obj</name> &amp;&amp;
        !<call><name>OBJ_DEFINE_PROPERTY</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>JS_DEFAULT_XML_NAMESPACE_ID</name></expr></argument>, <argument><expr><name>v</name></expr></argument>,
                             <argument><expr><name>JS_PropertyStub</name></expr></argument>, <argument><expr><name>JS_PropertyStub</name></expr></argument>,
                             <argument><expr><name>JSPROP_PERMANENT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>JS_FALSE</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>fp</name>-&gt;<name>xmlNamespace</name></name> = <name>nsobj</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>vp</name> = <name>v</name></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>JSBool</name></type>
<name>js_SetDefaultXMLNamespace</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name><name>argv</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>nsobj</name></decl>, *<decl><type ref="prev"/><name>varobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSStackFrame</name> *</type><name>fp</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name> = <name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nsobj</name> = <call><name>js_ConstructObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>js_NamespaceClass</name>.<name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                               <argument><expr>2</expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>nsobj</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>v</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>nsobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>fp</name> = <name><name>cx</name>-&gt;<name>fp</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>varobj</name> = <name><name>fp</name>-&gt;<name>varobj</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>varobj</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name>OBJ_DEFINE_PROPERTY</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>varobj</name></expr></argument>, <argument><expr><name>JS_DEFAULT_XML_NAMESPACE_ID</name></expr></argument>, <argument><expr><name>v</name></expr></argument>,
                                 <argument><expr><name>JS_PropertyStub</name></expr></argument>, <argument><expr><name>JS_PropertyStub</name></expr></argument>,
                                 <argument><expr><name>JSPROP_PERMANENT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>JS_FALSE</name></expr>;</return>
        }</block></then></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>fp</name>-&gt;<name>fun</name></name> &amp;&amp; !<call><name>JSFUN_HEAVYWEIGHT_TEST</name><argument_list>(<argument><expr><name><name>fp</name>-&gt;<name>fun</name>-&gt;<name>flags</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name><name>fp</name>-&gt;<name>xmlNamespace</name></name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>JSBool</name></type>
<name>js_ToAttributeName</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>qn</name> = <call><name>ToAttributeName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>qn</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>qn</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>JSString</name> *</type>
<name>js_EscapeAttributeValue</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>EscapeAttributeValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>JSString</name> *</type>
<name>js_AddAttributePart</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSBool</name></type> <name>isName</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>str</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>str2</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>len2</name></decl>, <decl><type ref="prev"/><name>newlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jschar</name> *</type><name>chars</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>JSSTRING_IS_DEPENDENT</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> ||
        !(*<call><name>js_GetGCThingFlags</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> &amp; <name>GCF_MUTABLE</name>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>str</name> = <call><name>js_NewStringCopyN</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSSTRING_CHARS</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>JSSTRING_LENGTH</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
    }</block></then></if>

    <expr_stmt><expr><name>len</name> = <name><name>str</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>len2</name> = <call><name>JSSTRING_LENGTH</name><argument_list>(<argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>newlen</name> = (<name>isName</name>) ? <name>len</name> + 1 + <name>len2</name> : <name>len</name> + 2 + <name>len2</name> + 1</expr>;</expr_stmt>
    <expr_stmt><expr><name>chars</name> = (<name>jschar</name> *) <call><name>JS_realloc</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>chars</name></name></expr></argument>, <argument><expr>(<name>newlen</name>+1) * <sizeof>sizeof<argument_list>(<argument><expr><name>jschar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>chars</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <comment type="block">/*
     * Reallocating str (because we know it has no other references) requires
     * purging any deflated string cached for it.
     */</comment>
    <expr_stmt><expr><call><name>js_PurgeDeflatedStringCache</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>str</name>-&gt;<name>chars</name></name> = <name>chars</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>str</name>-&gt;<name>length</name></name> = <name>newlen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>chars</name> += <name>len</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>isName</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>chars</name>++ = ' '</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>js_strncpy</name><argument_list>(<argument><expr><name>chars</name></expr></argument>, <argument><expr><call><name>JSSTRING_CHARS</name><argument_list>(<argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chars</name> += <name>len2</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr>*<name>chars</name>++ = '='</expr>;</expr_stmt>
        <expr_stmt><expr>*<name>chars</name>++ = '"'</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>js_strncpy</name><argument_list>(<argument><expr><name>chars</name></expr></argument>, <argument><expr><call><name>JSSTRING_CHARS</name><argument_list>(<argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chars</name> += <name>len2</name></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>chars</name>++ = '"'</expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr>*<name>chars</name> = 0</expr>;</expr_stmt>
    <return>return <expr><name>str</name></expr>;</return>
}</block></function>

<function><type><name>JSString</name> *</type>
<name>js_EscapeElementValue</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>EscapeElementValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>JSString</name> *</type>
<name>js_ValueToXMLString</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>ToXMLString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSBool</name></type>
<name>anyname_toString</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>,
                 <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>rval</name> = <call><name>ATOM_KEY</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>atomState</name>.<name>starAtom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>JSBool</name></type>
<name>js_GetAnyName</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSRuntime</name> *</type><name>rt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <comment type="block">/* Optimize by avoiding JS_LOCK_GC(rt) for the common case. */</comment>
    <expr_stmt><expr><name>rt</name> = <name><name>cx</name>-&gt;<name>runtime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <name><name>rt</name>-&gt;<name>anynameObject</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_LOCK_GC</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>obj</name> = <name><name>rt</name>-&gt;<name>anynameObject</name></name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_UNLOCK_GC</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/*
             * Protect multiple newborns created below, in the do-while(0)
             * loop used to ensure that we leave this local root scope.
             */</comment>
            <expr_stmt><expr><name>ok</name> = <call><name>js_EnterLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

            <do>do <block>{
                <expr_stmt><expr><name>qn</name> = <call><name>js_NewXMLQName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>rt</name>-&gt;<name>emptyString</name></name></expr></argument>, <argument><expr><name><name>rt</name>-&gt;<name>emptyString</name></name></expr></argument>,
                                    <argument><expr><call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name><name>rt</name>-&gt;<name>atomState</name>.<name>starAtom</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>qn</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>

                <expr_stmt><expr><name>obj</name> = <call><name>js_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>js_AnyNameClass</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>obj</name> || !<call><name>JS_SetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>qn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>cx</name>-&gt;<name>weakRoots</name>.<name>newborn</name><index>[<expr><name>GCX_OBJECT</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
                <expr_stmt><expr><name><name>qn</name>-&gt;<name>object</name></name> = <name>obj</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>qnameobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>METER</name><argument_list>(<argument><expr><name><name>xml_stats</name>.<name>liveqnameobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/*
                 * Avoid entraining any Object.prototype found via cx's scope
                 * chain or global object.  This loses the default toString,
                 * but no big deal: we want to customize toString anyway for
                 * clearer diagnostics.
                 */</comment>
                <if>if <condition>(<expr>!<call><name>JS_DefineFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>js_toString_str</name></expr></argument>,
                                       <argument><expr><name>anyname_toString</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
                <expr_stmt><expr><call><name>OBJ_SET_PROTO</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>OBJ_GET_PARENT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> while <condition>(<expr>0</expr>)</condition>;</do>

            <expr_stmt><expr><call><name>js_LeaveLocalRootScopeWithResult</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

            <expr_stmt><expr><call><name>JS_LOCK_GC</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name><name>rt</name>-&gt;<name>anynameObject</name></name></expr>)</condition><then>
                <expr_stmt><expr><name><name>rt</name>-&gt;<name>anynameObject</name></name> = <name>obj</name></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><name>obj</name> = <name><name>rt</name>-&gt;<name>anynameObject</name></name></expr>;</expr_stmt></else></if>
        }</block></then></if>
        <expr_stmt><expr><call><name>JS_UNLOCK_GC</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>JSBool</name></type>
<name>js_FindXMLProperty</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>nameval</name></decl></param>, <param><decl><type><name>JSObject</name> **</type><name>objp</name></decl></param>, <param><decl><type><name>jsid</name> *</type><name>idp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>nameobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsid</name></type> <name>funid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>, *<decl><type ref="prev"/><name>target</name></decl>, *<decl><type ref="prev"/><name>proto</name></decl>, *<decl><type ref="prev"/><name>pobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>found</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>printable</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>nameval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nameobj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>nameval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nameobj</name></expr></argument>)</argument_list></call> == &amp;<name>js_AnyNameClass</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>v</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>atomState</name>.<name>starAtom</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nameobj</name> = <call><name>js_ConstructObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>js_QNameClass</name>.<name>base</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>,
                                     <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>nameobj</name></expr>)</condition><then>
            <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nameobj</name></expr></argument>)</argument_list></call> == &amp;<name>js_AttributeNameClass</name> ||
                  <call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nameobj</name></expr></argument>)</argument_list></call> == &amp;<name><name>js_QNameClass</name>.<name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name>qn</name> = (<name>JSXMLQName</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>nameobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>IsFunctionQName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>qn</name></expr></argument>, <argument><expr>&amp;<name>funid</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>obj</name> = <name><name>cx</name>-&gt;<name>fp</name>-&gt;<name>scopeChain</name></name></expr>;</expr_stmt>
    <do>do <block>{
        <comment type="block">/* Skip any With object that can wrap XML. */</comment>
        <expr_stmt><expr><name>target</name> = <name>obj</name></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call> == &amp;<name>js_WithClass</name></expr>)</condition> <block>{
             <expr_stmt><expr><name>proto</name> = <call><name>OBJ_GET_PROTO</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <if>if <condition>(<expr>!<name>proto</name></expr>)</condition><then>
                 <break>break;</break></then></if>
             <expr_stmt><expr><name>target</name> = <name>proto</name></expr>;</expr_stmt>
        }</block></while>

        <if>if <condition>(<expr><call><name>OBJECT_IS_XML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>funid</name> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>found</name> = <call><name>HasNamedProperty</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>qn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr>!<call><name>HasFunctionProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>funid</name></expr></argument>, <argument><expr>&amp;<name>found</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            }</block></else></if>
            <if>if <condition>(<expr><name>found</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>idp</name> = <call><name>OBJECT_TO_JSID</name><argument_list>(<argument><expr><name>nameobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr>*<name>objp</name> = <name>target</name></expr>;</expr_stmt>
                <return>return <expr><name>JS_TRUE</name></expr>;</return>
            }</block></then></if>
        }</block></then> <else>else <if>if <condition>(<expr><name>funid</name> != 0</expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name>OBJ_LOOKUP_PROPERTY</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>funid</name></expr></argument>, <argument><expr>&amp;<name>pobj</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
            <if>if <condition>(<expr><name>prop</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>OBJ_DROP_PROPERTY</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pobj</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr>*<name>idp</name> = <name>funid</name></expr>;</expr_stmt>
                <expr_stmt><expr>*<name>objp</name> = <name>target</name></expr>;</expr_stmt>
                <return>return <expr><name>JS_TRUE</name></expr>;</return>
            }</block></then></if>
        }</block></then></if></else></if>
    }</block> while <condition>(<expr>(<name>obj</name> = <call><name>OBJ_GET_PARENT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition>;</do>

    <expr_stmt><expr><name>printable</name> = <call><name>js_ValueToPrintableString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>nameobj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>printable</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorFlagsAndNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSREPORT_ERROR</name></expr></argument>,
                                     <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr><name>JSMSG_UNDEFINED_XML_NAME</name></expr></argument>, <argument><expr><name>printable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>JS_FALSE</name></expr>;</return>
}</block></function>

<function><type><name>JSBool</name></type>
<name>js_GetXMLFunction</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>target</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSTempValueRooter</name></type> <name>tvr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>OBJECT_IS_XML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* After this point, control must flow through label out: to exit. */</comment>
    <expr_stmt><expr><call><name>JS_PUSH_TEMP_ROOT_OBJECT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>tvr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * See comments before xml_lookupProperty about the need for the proto
     * chain lookup.
     */</comment>
    <expr_stmt><expr><name>target</name> = <name>obj</name></expr>;</expr_stmt>
    <for>for (<init>;</init><condition>;</condition><incr/>) <block>{
        <expr_stmt><expr><name>ok</name> = <call><name>js_GetProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
            <goto>goto <name>out</name>;</goto></then></if>
        <if>if <condition>(<expr><call><name>VALUE_IS_FUNCTION</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
            <goto>goto <name>out</name>;</goto>
        }</block></then></if>
        <expr_stmt><expr><name>target</name> = <call><name>OBJ_GET_PROTO</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>target</name> == <name>NULL</name></expr>)</condition><then>
            <break>break;</break></then></if>
        <expr_stmt><expr><name><name>tvr</name>.<name>u</name>.<name>object</name></name> = <name>target</name></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>HasSimpleContent</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* Search in String.prototype to implement 11.2.2.1 Step 3(f). */</comment>
        <expr_stmt><expr><name>ok</name> = <call><name>js_GetClassPrototype</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>INT_TO_JSID</name><argument_list>(<argument><expr><name>JSProto_String</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr>&amp;<name><name>tvr</name>.<name>u</name>.<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
            <goto>goto <name>out</name>;</goto></then></if>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>tvr</name>.<name>u</name>.<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ok</name> = <call><name>OBJ_GET_PROPERTY</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>tvr</name>.<name>u</name>.<name>object</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <label><name>out</name>:</label>
    <expr_stmt><expr><call><name>JS_POP_TEMP_ROOT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>tvr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>JSXML</name> *</type>
<name>GetPrivate</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetInstancePrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name>js_XMLClass</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><name>JSMSG_INCOMPATIBLE_METHOD</name></expr></argument>,
                             <argument><expr><name>js_XML_str</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><call><name>OBJ_GET_CLASS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call>-&gt;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>xml</name></expr>;</return>
}</block></function>

<function><type><name>JSBool</name></type>
<name>js_GetXMLDescendants</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>id</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>list</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>xml</name> = <call><name>GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>"descendants internal method"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>list</name> = <call><name>Descendants</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>list</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>
    <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>list</name>-&gt;<name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>JSBool</name></type>
<name>js_DeleteXMLListElements</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>listobj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>list</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>listobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>n</name> = <name><name>list</name>-&gt;<name>xml_kids</name>.<name>length</name></name></expr>;</init> <condition><expr><name>n</name> != 0</expr>;</condition> <incr><expr>--<name>n</name></expr></incr>)
        <expr_stmt><expr><call><name>DeleteListElement</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

    <return>return <expr><name>JS_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>JSBool</name></type>
<name>js_FilterXMLList</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>jsbytecode</name> *</type><name>pc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSBool</name></type> <name>ok</name></decl>, <decl><type ref="prev"/><name>match</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSStackFrame</name> *</type><name>fp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>scobj</name></decl>, *<decl><type ref="prev"/><name>listobj</name></decl>, *<decl><type ref="prev"/><name>resobj</name></decl>, *<decl><type ref="prev"/><name>withobj</name></decl>, *<decl><type ref="prev"/><name>kidobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>, *<decl><type ref="prev"/><name>list</name></decl>, *<decl><type ref="prev"/><name>result</name></decl>, *<decl><type ref="prev"/><name>kid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLArrayCursor</name></type> <name>cursor</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ok</name> = <call><name>js_EnterLocalRootScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <return>return <expr><name>JS_FALSE</name></expr>;</return></then></if>

    <comment type="block">/* All control flow after this point must exit via label out or bad. */</comment>
    <expr_stmt><expr>*<name>vp</name> = <name>JSVAL_NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fp</name> = <name><name>cx</name>-&gt;<name>fp</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> = <name><name>fp</name>-&gt;<name>flags</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fp</name>-&gt;<name>flags</name></name> = <name>flags</name> | <name>JSFRAME_FILTERING</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>scobj</name> = <call><name>js_GetScopeChain</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>withobj</name> = <name>NULL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>scobj</name></expr>)</condition><then>
        <goto>goto <name>bad</name>;</goto></then></if>
    <expr_stmt><expr><name>xml</name> = <call><name>GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>"filtering predicate operator"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
        <goto>goto <name>bad</name>;</goto></then></if>

    <if>if <condition>(<expr><name><name>xml</name>-&gt;<name>xml_class</name></name> == <name>JSXML_CLASS_LIST</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>list</name> = <name>xml</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>listobj</name> = <call><name>js_NewXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>listobj</name></expr>)</condition><then>
            <goto>goto <name>bad</name>;</goto></then></if>
        <expr_stmt><expr><name>list</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>listobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ok</name> = <call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
            <goto>goto <name>out</name>;</goto></then></if>
    }</block></else></if>

    <expr_stmt><expr><name>resobj</name> = <call><name>js_NewXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>resobj</name></expr>)</condition><then>
        <goto>goto <name>bad</name>;</goto></then></if>
    <expr_stmt><expr><name>result</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>resobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Hoist the scope chain update out of the loop over kids. */</comment>
    <expr_stmt><expr><name>withobj</name> = <call><name>js_NewWithObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>scobj</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>withobj</name></expr>)</condition><then>
        <goto>goto <name>bad</name>;</goto></then></if>
    <expr_stmt><expr><name><name>fp</name>-&gt;<name>scopeChain</name></name> = <name>withobj</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>XMLArrayCursorInit</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>&amp;<name><name>list</name>-&gt;<name>xml_kids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr>(<name>kid</name> = (<name>JSXML</name> *) <call><name>XMLArrayCursorNext</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
        <expr_stmt><expr><name>kidobj</name> = <call><name>js_GetXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>kidobj</name></expr>)</condition><then>
            <break>break;</break></then></if>
        <expr_stmt><expr><call><name>OBJ_SET_PROTO</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>withobj</name></expr></argument>, <argument><expr><name>kidobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ok</name> = <call><name>js_Interpret</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>js_ValueToBoolean</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>, <argument><expr>&amp;<name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>ok</name> &amp;&amp; <name>match</name></expr>)</condition><then>
            <expr_stmt><expr><name>ok</name> = <call><name>Append</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
            <break>break;</break></then></if>
    }</block></while>
    <expr_stmt><expr><call><name>XMLArrayCursorFinish</name><argument_list>(<argument><expr>&amp;<name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <goto>goto <name>out</name>;</goto></then></if>
    <if>if <condition>(<expr><name>kid</name></expr>)</condition><then>
        <goto>goto <name>bad</name>;</goto></then></if>

    <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>resobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>
    <expr_stmt><expr><name><name>fp</name>-&gt;<name>flags</name></name> = <name>flags</name> | (<name><name>fp</name>-&gt;<name>flags</name></name> &amp; <name>JSFRAME_POP_BLOCKS</name>)</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>withobj</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>fp</name>-&gt;<name>scopeChain</name></name> = <name>scobj</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_SetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>withobj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>js_LeaveLocalRootScopeWithResult</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
<label><name>bad</name>:</label>
    <expr_stmt><expr><name>ok</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    <goto>goto <name>out</name>;</goto>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>js_ValueToXMLObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>ToXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>js_ValueToXMLListObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>jsval</name></type> <name>v</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>ToXMLList</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>js_CloneXMLObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uintN</name></type> <name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>GetXMLSettingFlags</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>flags</name> &amp; (<name>XSF_IGNORE_COMMENTS</name> |
                 <name>XSF_IGNORE_PROCESSING_INSTRUCTIONS</name> |
                 <name>XSF_IGNORE_WHITESPACE</name>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>xml</name> = <call><name>DeepCopy</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>xml</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <return>return <expr><name><name>xml</name>-&gt;<name>object</name></name></expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name>NewXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>JSObject</name> *</type>
<name>js_NewXMLSpecialObject</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSXMLClass</name></type> <name>xml_class</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>name</name></decl></param>,
                       <param><decl><type><name>JSString</name> *</type><name>value</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>uintN</name></type> <name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXML</name> *</type><name>xml</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSXMLQName</name> *</type><name>qn</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>GetXMLSettingFlags</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>(<name>xml_class</name> == <name>JSXML_CLASS_COMMENT</name> &amp;&amp;
         (<name>flags</name> &amp; <name>XSF_IGNORE_COMMENTS</name>)) ||
        (<name>xml_class</name> == <name>JSXML_CLASS_PROCESSING_INSTRUCTION</name> &amp;&amp;
         (<name>flags</name> &amp; <name>XSF_IGNORE_PROCESSING_INSTRUCTIONS</name>))</expr>)</condition><then> <block>{
        <return>return <expr><call><name>js_NewXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_TEXT</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>obj</name> = <call><name>js_NewXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>xml_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <expr_stmt><expr><name>xml</name> = (<name>JSXML</name> *) <call><name>JS_GetPrivate</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>name</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>qn</name> = <call><name>js_NewXMLQName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>emptyString</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>qn</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <expr_stmt><expr><name><name>xml</name>-&gt;<name>name</name></name> = <name>qn</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>xml</name>-&gt;<name>xml_value</name></name> = <name>value</name></expr>;</expr_stmt>
    <return>return <expr><name>obj</name></expr>;</return>
}</block></function>

<function><type><name>JSString</name> *</type>
<name>js_MakeXMLCDATAString</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>MakeXMLCDATAString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>JSString</name> *</type>
<name>js_MakeXMLCommentString</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>MakeXMLCommentString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>JSString</name> *</type>
<name>js_MakeXMLPIString</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>name</name></decl></param>, <param><decl><type><name>JSString</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>MakeXMLPIString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JS_HAS_XML_SUPPORT */</comment>
</unit>
