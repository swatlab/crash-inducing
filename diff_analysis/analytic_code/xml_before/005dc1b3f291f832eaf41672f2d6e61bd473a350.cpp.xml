<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="005dc1b3f291f832eaf41672f2d6e61bd473a350.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2003
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Original Author: Aaron Leventhal (aaronl@netscape.com)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDocAccessible.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIAccessible.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAccCache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAccessibilityAtoms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAccUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCoreUtils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsHashtable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAccessibilityService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsApplicationAccessibleWrap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIAccessibleDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShellTreeItem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMCSSPrimitiveValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMNSDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMNSHTMLElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMWindow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPIDOMWindow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIInterfaceRequestorUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFrame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefBranch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPresContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPresShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIServiceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIStringBundle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsRootAccessible.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsFocusManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIObserverService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozilla/Services.h"</cpp:file></cpp:include>

<comment type="block">/* For documentation of the accessibility architecture, 
 * see http://lxr.mozilla.org/seamonkey/source/accessible/accessible-docs.html
 */</comment>

<decl_stmt><decl><type><name>nsIStringBundle</name> *</type><name><name>nsAccessNode</name>::<name>gStringBundle</name></name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nsIStringBundle</name> *</type><name><name>nsAccessNode</name>::<name>gKeyStringBundle</name></name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nsIDOMNode</name> *</type><name><name>nsAccessNode</name>::<name>gLastFocusedNode</name></name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PRBool</name></type> <name><name>nsAccessNode</name>::<name>gIsCacheDisabled</name></name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRBool</name></type> <name><name>nsAccessNode</name>::<name>gIsFormFillEnabled</name></name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>nsRefPtrHashtable</name><argument_list>&lt;<argument><expr><name>nsVoidPtrHashKey</name></expr></argument>, <argument><expr><name>nsDocAccessible</name></expr></argument>&gt;</argument_list></name></type>
  <name><name>nsAccessNode</name>::<name>gGlobalDocAccessibleCache</name></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nsApplicationAccessible</name> *</type><name><name>nsAccessNode</name>::<name>gApplicationAccessible</name></name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Class nsAccessNode
 */</comment>
 
<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// nsAccessible. nsISupports</comment>

<macro><name>NS_IMPL_CYCLE_COLLECTION_0</name><argument_list>(<argument>nsAccessNode</argument>)</argument_list></macro>

<macro><name>NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION</name><argument_list>(<argument>nsAccessNode</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsIAccessNode</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsAccessNode</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_MAP_ENTRY_AMBIGUOUS</name><argument_list>(<argument>nsISupports</argument>, <argument>nsIAccessNode</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>NS_INTERFACE_MAP_END</name></type>
 
<name>NS_IMPL_CYCLE_COLLECTING_ADDREF_AMBIGUOUS</name><argument_list>(<argument><expr><name>nsAccessNode</name></expr></argument>, <argument><expr><name>nsIAccessNode</name></expr></argument>)</argument_list>
<name>NS_IMPL_CYCLE_COLLECTING_RELEASE_FULL</name><argument_list>(<argument><expr><name>nsAccessNode</name></expr></argument>, <argument><expr><name>nsIAccessNode</name></expr></argument>,
                                      <argument><expr><call><name>LastRelease</name><argument_list>()</argument_list></call></expr></argument>)</argument_list>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// nsAccessNode construction/desctruction</comment>

<name><name>nsAccessNode</name>::<name>nsAccessNode</name></name><argument_list>(<argument><expr><name>nsIDOMNode</name> *<name>aNode</name></expr></argument>, <argument><expr><name>nsIWeakReference</name>* <name>aShell</name></expr></argument>)</argument_list><range>: 
  <expr><call><name>mDOMNode</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></range>, <name>mWeakShell</name><argument_list>(<argument><expr><name>aShell</name></expr></argument>)</argument_list>
<argument_list>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_A11Y</name></cpp:ifdef>
  <argument><expr><name>mIsInitialized</name> = <name>PR_FALSE</name></expr></argument>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</argument_list>

<name><name>nsAccessNode</name>::~<name>nsAccessNode</name></name><argument_list>()</argument_list>
<argument_list>{
  <argument><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>mWeakShell</name></expr></argument>, <argument><expr>"LastRelease was never called!?!"</expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

<name>void</name> <name><name>nsAccessNode</name>::<name>LastRelease</name></name><argument_list>()</argument_list>
<argument_list>{
  <comment type="line">// First cleanup if needed...</comment>
  if <argument><expr>(<name>mWeakShell</name>) <block>{
    <expr><call><name>Shutdown</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>mWeakShell</name></expr></argument>, <argument><expr>"A Shutdown() impl forgot to call its parent's Shutdown?"</expr></argument>)</argument_list></call></expr>;
  }</block>
  <comment type="line">// ... then die.</comment>
  <call><name>NS_DELETEXPCOM</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// nsAccessNode public</comment>

<name>nsresult</name>
<name><name>nsAccessNode</name>::<name>Init</name></name><argument_list>()</argument_list>
<argument_list>{
  <comment type="line">// We have to put this here, instead of constructor, otherwise</comment>
  <comment type="line">// we don't have the virtual GetUniqueID() method for the hash key.</comment>
  <comment type="line">// We need that for accessibles that don't have DOM nodes</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_A11Y</name></cpp:ifdef>
  <argument><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>mIsInitialized</name></expr></argument>, <argument><expr>"Initialized twice!"</expr></argument>)</argument_list></call></expr></argument>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <argument><expr><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsDocAccessible</name></expr></argument>&gt;</argument_list></name> <name>docAcc</name> = <call><name>GetDocAccessible</name><argument_list>()</argument_list></call></expr></argument>;
  if <argument><expr>(!<name>docAcc</name>) <block>{
    <comment type="line">// No doc accessible yet for this node's document. </comment>
    <comment type="line">// There was probably an accessible event fired before the </comment>
    <comment type="line">// current document was ever asked for by the assistive technology.</comment>
    <comment type="line">// Create a doc accessible so we can cache this node</comment>
    <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name> <call><name>presShell</name><argument_list>(<argument><expr><call><name>do_QueryReferent</name><argument_list>(<argument><expr><name>mWeakShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <if>if <condition>(<expr><name>presShell</name></expr>)</condition><then> <expr_stmt><expr><block>{
      <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name> <call><name>docNode</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name><name>presShell</name>-&gt;<name>GetDocument</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt></then></if>
      <if>if <condition>(<expr><name>docNode</name></expr>)</condition><then> <expr_stmt><expr><block>{
        <expr><name>nsAccessible</name> *<name>accessible</name> =
          <call><name>GetAccService</name><argument_list>()</argument_list></call>-&gt;<call><name>GetAccessibleInWeakShell</name><argument_list>(<argument><expr><name>docNode</name></expr></argument>, <argument><expr><name>mWeakShell</name></expr></argument>)</argument_list></call></expr>;
        <name>docAcc</name> = <call><name>do_QueryObject</name><argument_list>(<argument><expr><name>accessible</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt></then></if>
      }</block>
    }
    <call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>docAcc</name></expr></argument>, <argument><expr>"Cannot cache new nsAccessNode"</expr></argument>)</argument_list></call></expr></argument>;
    if <argument><expr>(!<name>docAcc</name>) <block>{
      <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block>
  }

  <name>void</name>* <name>uniqueID</name></expr></argument>;
  <argument><expr><call><name>GetUniqueID</name><argument_list>(<argument><expr>&amp;<name>uniqueID</name></expr></argument>)</argument_list></call></expr></argument>;

  if <argument><expr>(!<call><name><name>docAcc</name>-&gt;<name>CacheAccessNode</name></name><argument_list>(<argument><expr><name>uniqueID</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call>)</expr></argument>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></argument_list></decl></decl_stmt>

  <comment type="line">// Make sure an ancestor in real content is cached</comment>
  <comment type="line">// so that nsDocAccessible::RefreshNodes() can find the anonymous subtree to release when</comment>
  <comment type="line">// the root node goes away</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>content</name> &amp;&amp; <call><name><name>content</name>-&gt;<name>IsInAnonymousSubtree</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// Specific examples of where this is used: &lt;input type="file"&gt; and &lt;xul:findbar&gt;</comment>
    <decl_stmt><decl><type><name>nsAccessible</name> *</type><name>parent</name> <init>= <expr><call><name>GetAccService</name><argument_list>()</argument_list></call>-&gt;<call><name>GetContainerAccessible</name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>,
                                                                   <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>parent</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>parent</name>-&gt;<name>EnsureChildren</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
  }</block></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_A11Y</name></cpp:ifdef>
  <expr_stmt><expr><name>mIsInitialized</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}


nsresult
<macro><name>nsAccessNode</name></macro><expr_stmt><expr><name>::<name>Shutdown</name></name>()
<block>{
  <expr><name>mDOMNode</name> = <name>nsnull</name></expr>;
  <expr><name>mWeakShell</name> = <name>nsnull</name></expr>;

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></expr></expr_stmt>

<comment type="line">// nsIAccessNode</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsAccessNode</name>::<name>GetUniqueID</name></name><parameter_list>(<param><decl><type><name>void</name> **</type><name>aUniqueID</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aUniqueID</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>void</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// nsIAccessNode</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsAccessNode</name>::<name>GetOwnerWindow</name></name><parameter_list>(<param><decl><type><name>void</name> **</type><name>aWindow</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aWindow</name> = <name>nsnull</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessibleDocument</name></expr></argument>&gt;</argument_list></name></type> <name>docAccessible</name><argument_list>(<argument><expr><call><name>GetDocAccessible</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>docAccessible</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if> <comment type="line">// This node or doc accessible is shut down</comment>
  <return>return <expr><call><name><name>docAccessible</name>-&gt;<name>GetWindowHandle</name></name><argument_list>(<argument><expr><name>aWindow</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsApplicationAccessible</name>*</type>
<name><name>nsAccessNode</name>::<name>GetApplicationAccessible</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name><name>nsAccessibilityService</name>::<name>gIsShutdown</name></name></expr></argument>,
               <argument><expr>"Accessibility wasn't initialized!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>gApplicationAccessible</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>nsApplicationAccessibleWrap</name>::<name>PreCreate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>gApplicationAccessible</name> = new <call><name>nsApplicationAccessibleWrap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>gApplicationAccessible</name></expr>)</condition><then>
      <return>return <expr><name>nsnull</name></expr>;</return></then></if>

    <comment type="line">// Addref on create. Will Release in ShutdownXPAccessibility()</comment>
    <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name>gApplicationAccessible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>gApplicationAccessible</name>-&gt;<name>Init</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>gApplicationAccessible</name>-&gt;<name>Shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name>gApplicationAccessible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>nsnull</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><name>gApplicationAccessible</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name><name>nsAccessNode</name>::<name>InitXPAccessibility</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIStringBundleService</name></expr></argument>&gt;</argument_list></name></type> <name>stringBundleService</name> <init>=
    <expr><call><name><name>mozilla</name>::<name>services</name>::<name>GetStringBundleService</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>stringBundleService</name></expr>)</condition><then> <block>{
    <comment type="line">// Static variables are released in ShutdownAllXPAccessibility();</comment>
    <expr_stmt><expr><call><name><name>stringBundleService</name>-&gt;<name>CreateBundle</name></name><argument_list>(<argument><expr><name>ACCESSIBLE_BUNDLE_URL</name></expr></argument>, 
                                      <argument><expr>&amp;<name>gStringBundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>stringBundleService</name>-&gt;<name>CreateBundle</name></name><argument_list>(<argument><expr><name>PLATFORM_KEYS_BUNDLE_URL</name></expr></argument>, 
                                      <argument><expr>&amp;<name>gKeyStringBundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>nsAccessibilityAtoms</name>::<name>AddRefAtoms</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>gGlobalDocAccessibleCache</name>.<name>Init</name></name><argument_list>(<argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrefBranch</name></expr></argument>&gt;</argument_list></name></type> <name>prefBranch</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_PREFSERVICE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>prefBranch</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>prefBranch</name>-&gt;<name>GetBoolPref</name></name><argument_list>(<argument><expr>"accessibility.disablecache"</expr></argument>, <argument><expr>&amp;<name>gIsCacheDisabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>prefBranch</name>-&gt;<name>GetBoolPref</name></name><argument_list>(<argument><expr>"browser.formfill.enable"</expr></argument>, <argument><expr>&amp;<name>gIsFormFillEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name>NotifyA11yInitOrShutdown</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line">// nsAccessNode protected static</comment>
<function><type><name>void</name></type> <name><name>nsAccessNode</name>::<name>NotifyA11yInitOrShutdown</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aIsInit</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIObserverService</name></expr></argument>&gt;</argument_list></name></type> <name>obsService</name> <init>=
    <expr><call><name><name>mozilla</name>::<name>services</name>::<name>GetObserverService</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>obsService</name></expr></argument>, <argument><expr>"No observer service to notify of a11y init/shutdown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>obsService</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRUnichar</name></type> <name><name>kInitIndicator</name><index>[]</index></name> <init>= <expr><block>{ <expr>'1'</expr>, <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRUnichar</name></type> <name><name>kShutdownIndicator</name><index>[]</index></name> <init>= <expr><block>{ <expr>'0'</expr>, <expr>0</expr> }</block></expr></init></decl>;</decl_stmt> 
  <expr_stmt><expr><call><name><name>obsService</name>-&gt;<name>NotifyObservers</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr>"a11y-init-or-shutdown"</expr></argument>,
                              <argument><expr><name>aIsInit</name> ? <name>kInitIndicator</name>  : <name>kShutdownIndicator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name><name>nsAccessNode</name>::<name>ShutdownXPAccessibility</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// Called by nsAccessibilityService::Shutdown()</comment>
  <comment type="line">// which happens when xpcom is shutting down</comment>
  <comment type="line">// at exit of program</comment>

  <expr_stmt><expr><call><name>NS_IF_RELEASE</name><argument_list>(<argument><expr><name>gStringBundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_IF_RELEASE</name><argument_list>(<argument><expr><name>gKeyStringBundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_IF_RELEASE</name><argument_list>(<argument><expr><name>gLastFocusedNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ClearCache</name><argument_list>(<argument><expr><name>gGlobalDocAccessibleCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Release gApplicationAccessible after everything else is shutdown</comment>
  <comment type="line">// so we don't accidently create it again while tearing down root accessibles</comment>
  <expr_stmt><expr><call><name><name>nsApplicationAccessibleWrap</name>::<name>Unload</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>gApplicationAccessible</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>gApplicationAccessible</name>-&gt;<name>Shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name>gApplicationAccessible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name>NotifyA11yInitOrShutdown</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsAccessNode</name>::<name>IsDefunct</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mDOMNode</name></expr>)</condition><then>
    <return>return <expr><name>PR_TRUE</name></expr>;</return></then></if>

  <comment type="line">// Call GetPresShell() since the accessible may be shut down in it.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>presShell</name><argument_list>(<argument><expr><call><name>GetPresShell</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <return>return <expr>!<name>presShell</name></expr>;</return>
}</block></function>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name><name>nsAccessNode</name>::<name>GetPresShell</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIPresShell</name> *</type><name>presShell</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>mWeakShell</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>CallQueryReferent</name><argument_list>(<argument><expr><call><name><name>mWeakShell</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>presShell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr>!<name>presShell</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>mWeakShell</name></expr>)</condition><then> <block>{
      <comment type="line">// If our pres shell has died, but we're still holding onto</comment>
      <comment type="line">// a weak reference, our accessibles are no longer relevant</comment>
      <comment type="line">// and should be shut down</comment>
      <expr_stmt><expr><call><name>Shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>
  <return>return <expr><name>presShell</name></expr>;</return>
}</block></function>

<comment type="line">// nsAccessNode protected</comment>
<function><type><name>nsPresContext</name>*</type> <name><name>nsAccessNode</name>::<name>GetPresContext</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>presShell</name><argument_list>(<argument><expr><call><name>GetPresShell</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>presShell</name></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>
  <return>return <expr><call><name><name>presShell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsRootAccessible</name></expr></argument>&gt;</argument_list></name></type> <name><name>nsAccessNode</name>::<name>GetRootAccessible</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocShellTreeItem</name></expr></argument>&gt;</argument_list></name></type> <name>docShellTreeItem</name> <init>=
    <expr><call><name><name>nsCoreUtils</name>::<name>GetDocShellTreeItemFor</name></name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>docShellTreeItem</name></expr></argument>, <argument><expr>"No docshell tree item for mDOMNode"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>docShellTreeItem</name></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocShellTreeItem</name></expr></argument>&gt;</argument_list></name></type> <name>root</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>docShellTreeItem</name>-&gt;<name>GetRootTreeItem</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"No root content tree item"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>root</name></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessibleDocument</name></expr></argument>&gt;</argument_list></name></type> <name>accDoc</name> <init>= <expr><call><name>GetDocAccessibleFor</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>accDoc</name></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// nsRootAccessible has a special QI</comment>
  <comment type="line">// that let us get that concrete type directly.</comment>
  <decl_stmt><decl><type><name>nsRootAccessible</name>*</type> <name>rootAccessible</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>accDoc</name>-&gt;<name>QueryInterface</name></name><argument_list>(<argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsRootAccessible</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>(<name>void</name>**)&amp;<name>rootAccessible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// addrefs</comment>
  <return>return <expr><name>rootAccessible</name></expr>;</return>
}</block></function>

<function><type><name>nsIFrame</name>*</type>
<name><name>nsAccessNode</name>::<name>GetFrame</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <return>return <expr><name>content</name> ? <call><name><name>content</name>-&gt;<name>GetPrimaryFrame</name></name><argument_list>()</argument_list></call> : <name>nsnull</name></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<function><type><name>PRBool</name></type>
<name><name>nsAccessNode</name>::<name>IsInCache</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessibleDocument</name></expr></argument>&gt;</argument_list></name></type> <name>accessibleDoc</name> <init>=
    <expr><call><name><name>nsAccessNode</name>::<name>GetDocAccessibleFor</name></name><argument_list>(<argument><expr><name>mWeakShell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>accessibleDoc</name></expr>)</condition><then>
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>void</name>*</type> <name>uniqueID</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetUniqueID</name><argument_list>(<argument><expr>&amp;<name>uniqueID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsDocAccessible</name></expr></argument>&gt;</argument_list></name></type> <name>docAccessible</name> <init>= <expr><call><name>do_QueryObject</name><argument_list>(<argument><expr><name>accessibleDoc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>docAccessible</name>-&gt;<name>GetCachedAccessNode</name></name><argument_list>(<argument><expr><name>uniqueID</name></expr></argument>)</argument_list></call> ? <name>PR_TRUE</name> : <name>PR_FALSE</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// nsIAccessNode</comment>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsAccessNode</name>::<name>GetDOMNode</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name> **</type><name>aNode</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aNode</name> = <name>mDOMNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsAccessNode</name>::<name>GetNumChildren</name></name><parameter_list>(<param><decl><type><name>PRInt32</name> *</type><name>aNumChildren</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>content</name></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aNumChildren</name> = 0</expr>;</expr_stmt>

    <return>return <expr><name>NS_ERROR_NULL_POINTER</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr>*<name>aNumChildren</name> = <call><name><name>content</name>-&gt;<name>GetChildCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsAccessNode</name>::<name>GetDocument</name></name><parameter_list>(<param><decl><type><name>nsIAccessibleDocument</name> **</type><name>aDocument</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aDocument</name> = <call><name>GetDocAccessibleFor</name><argument_list>(<argument><expr><name>mWeakShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsAccessNode</name>::<name>GetRootDocument</name></name><parameter_list>(<param><decl><type><name>nsIAccessibleDocument</name> **</type><name>aRootDocument</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aRootDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsRootAccessible</name></expr></argument>&gt;</argument_list></name></type> <name>rootDocument</name> <init>= <expr><call><name>GetRootAccessible</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aRootDocument</name> = <call><name><name>rootDocument</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsAccessNode</name>::<name>GetInnerHTML</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aInnerHTML</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aInnerHTML</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNSHTMLElement</name></expr></argument>&gt;</argument_list></name></type> <name>domNSElement</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>domNSElement</name></expr></argument>, <argument><expr><name>NS_ERROR_NULL_POINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>domNSElement</name>-&gt;<name>GetInnerHTML</name></name><argument_list>(<argument><expr><name>aInnerHTML</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsAccessNode</name>::<name>ScrollTo</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aScrollType</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name>IsDefunct</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>shell</name><argument_list>(<argument><expr><call><name>GetPresShell</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>shell</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIFrame</name> *</type><name>frame</name> <init>= <expr><call><name>GetFrame</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name> <init>= <expr><call><name><name>frame</name>-&gt;<name>GetContent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRInt16</name></type> <name>vPercent</name></decl>, <decl><type ref="prev"/><name>hPercent</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>nsCoreUtils</name>::<name>ConvertScrollTypeToPercents</name></name><argument_list>(<argument><expr><name>aScrollType</name></expr></argument>, <argument><expr>&amp;<name>vPercent</name></expr></argument>, <argument><expr>&amp;<name>hPercent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>shell</name>-&gt;<name>ScrollContentIntoView</name></name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>vPercent</name></expr></argument>, <argument><expr><name>hPercent</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsAccessNode</name>::<name>ScrollToPoint</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aCoordinateType</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aX</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aY</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIFrame</name> *</type><name>frame</name> <init>= <expr><call><name>GetFrame</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>frame</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsIntPoint</name></type> <name>coords</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsAccUtils</name>::<name>ConvertToScreenCoords</name></name><argument_list>(<argument><expr><name>aX</name></expr></argument>, <argument><expr><name>aY</name></expr></argument>, <argument><expr><name>aCoordinateType</name></expr></argument>,
                                                  <argument><expr><name>this</name></expr></argument>, <argument><expr>&amp;<name>coords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIFrame</name> *</type><name>parentFrame</name> <init>= <expr><name>frame</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr>(<name>parentFrame</name> = <call><name><name>parentFrame</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call>)</expr>)</condition>
    <expr_stmt><expr><call><name><name>nsCoreUtils</name>::<name>ScrollFrameToPoint</name></name><argument_list>(<argument><expr><name>parentFrame</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>coords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// nsAccessNode protected</comment>
<function><type><name>nsresult</name></type>
<name><name>nsAccessNode</name>::<name>MakeAccessNode</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name> *</type><name>aNode</name></decl></param>, <param><decl><type><name>nsIAccessNode</name> **</type><name>aAccessNode</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aAccessNode</name> = <name>nsnull</name></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessNode</name></expr></argument>&gt;</argument_list></name></type> <name>accessNode</name> <init>=
    <expr><call><name>GetAccService</name><argument_list>()</argument_list></call>-&gt;<call><name>GetCachedAccessNode</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>, <argument><expr><name>mWeakShell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>accessNode</name></expr>)</condition><then>
    <expr_stmt><expr><name>accessNode</name> = <call><name>GetAccService</name><argument_list>()</argument_list></call>-&gt;<call><name>GetAccessibleInWeakShell</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>, <argument><expr><name>mWeakShell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name>accessNode</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aAccessNode</name> = <name>accessNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsAccessNode</name> *</type><name>newAccessNode</name> <init>= <expr>new <call><name>nsAccessNode</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>, <argument><expr><name>mWeakShell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>newAccessNode</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aAccessNode</name> = <name>newAccessNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>newAccessNode</name>-&gt;<name>Init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsAccessNode</name>::<name>GetFirstChildNode</name></name><parameter_list>(<param><decl><type><name>nsIAccessNode</name> **</type><name>aAccessNode</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aAccessNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aAccessNode</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>, <argument><expr><name>NS_ERROR_NULL_POINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>domNode</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mDOMNode</name>-&gt;<name>GetFirstChild</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>domNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>domNode</name> ? <call><name>MakeAccessNode</name><argument_list>(<argument><expr><name>domNode</name></expr></argument>, <argument><expr><name>aAccessNode</name></expr></argument>)</argument_list></call> : <name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsAccessNode</name>::<name>GetLastChildNode</name></name><parameter_list>(<param><decl><type><name>nsIAccessNode</name> **</type><name>aAccessNode</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aAccessNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aAccessNode</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>, <argument><expr><name>NS_ERROR_NULL_POINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>domNode</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mDOMNode</name>-&gt;<name>GetLastChild</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>domNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>domNode</name> ? <call><name>MakeAccessNode</name><argument_list>(<argument><expr><name>domNode</name></expr></argument>, <argument><expr><name>aAccessNode</name></expr></argument>)</argument_list></call> : <name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsAccessNode</name>::<name>GetParentNode</name></name><parameter_list>(<param><decl><type><name>nsIAccessNode</name> **</type><name>aAccessNode</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aAccessNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aAccessNode</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>, <argument><expr><name>NS_ERROR_NULL_POINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>domNode</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mDOMNode</name>-&gt;<name>GetParentNode</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>domNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>domNode</name> ? <call><name>MakeAccessNode</name><argument_list>(<argument><expr><name>domNode</name></expr></argument>, <argument><expr><name>aAccessNode</name></expr></argument>)</argument_list></call> : <name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsAccessNode</name>::<name>GetPreviousSiblingNode</name></name><parameter_list>(<param><decl><type><name>nsIAccessNode</name> **</type><name>aAccessNode</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aAccessNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aAccessNode</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>, <argument><expr><name>NS_ERROR_NULL_POINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>domNode</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mDOMNode</name>-&gt;<name>GetPreviousSibling</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>domNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>domNode</name> ? <call><name>MakeAccessNode</name><argument_list>(<argument><expr><name>domNode</name></expr></argument>, <argument><expr><name>aAccessNode</name></expr></argument>)</argument_list></call> : <name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsAccessNode</name>::<name>GetNextSiblingNode</name></name><parameter_list>(<param><decl><type><name>nsIAccessNode</name> **</type><name>aAccessNode</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aAccessNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aAccessNode</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>, <argument><expr><name>NS_ERROR_NULL_POINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>domNode</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mDOMNode</name>-&gt;<name>GetNextSibling</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>domNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>domNode</name> ? <call><name>MakeAccessNode</name><argument_list>(<argument><expr><name>domNode</name></expr></argument>, <argument><expr><name>aAccessNode</name></expr></argument>)</argument_list></call> : <name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsAccessNode</name>::<name>GetChildNodeAt</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aChildNum</name></decl></param>, <param><decl><type><name>nsIAccessNode</name> **</type><name>aAccessNode</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aAccessNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aAccessNode</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>NS_ERROR_NULL_POINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>domNode</name> <init>=
    <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name><name>content</name>-&gt;<name>GetChildAt</name></name><argument_list>(<argument><expr><name>aChildNum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr><name>domNode</name> ? <call><name>MakeAccessNode</name><argument_list>(<argument><expr><name>domNode</name></expr></argument>, <argument><expr><name>aAccessNode</name></expr></argument>)</argument_list></call> : <name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsAccessNode</name>::<name>GetComputedStyleValue</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aPseudoElt</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aPropertyName</name></decl></param>,
                                    <param><decl><type><name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name>IsDefunct</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMCSSStyleDeclaration</name></expr></argument>&gt;</argument_list></name></type> <name>styleDecl</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>nsCoreUtils</name>::<name>GetComputedStyleDeclaration</name></name><argument_list>(<argument><expr><name>aPseudoElt</name></expr></argument>, <argument><expr><name>mDOMNode</name></expr></argument>,
                                           <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>styleDecl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>styleDecl</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>styleDecl</name>-&gt;<name>GetPropertyValue</name></name><argument_list>(<argument><expr><name>aPropertyName</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsAccessNode</name>::<name>GetComputedStyleCSSValue</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aPseudoElt</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aPropertyName</name></decl></param>,
                                       <param><decl><type><name>nsIDOMCSSPrimitiveValue</name> **</type><name>aCSSValue</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aCSSValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aCSSValue</name> = <name>nsnull</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>IsDefunct</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMCSSStyleDeclaration</name></expr></argument>&gt;</argument_list></name></type> <name>styleDecl</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>nsCoreUtils</name>::<name>GetComputedStyleDeclaration</name></name><argument_list>(<argument><expr><name>aPseudoElt</name></expr></argument>, <argument><expr><name>mDOMNode</name></expr></argument>,
                                           <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>styleDecl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>styleDecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMCSSValue</name></expr></argument>&gt;</argument_list></name></type> <name>cssValue</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>styleDecl</name>-&gt;<name>GetPropertyCSSValue</name></name><argument_list>(<argument><expr><name>aPropertyName</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>cssValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>cssValue</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>cssValue</name></expr></argument>, <argument><expr><name>aCSSValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// nsAccessNode public static</comment>

<function><type><name>nsDocAccessible</name>*</type>
<name><name>nsAccessNode</name>::<name>GetDocAccessibleFor</name></name><parameter_list>(<param><decl><type><name>nsIDocument</name> *</type><name>aDocument</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>aDocument</name> ?
    <call><name><name>gGlobalDocAccessibleCache</name>.<name>GetWeak</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>void</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> : <name>nsnull</name></expr>;</return>
}</block></function>

<function><type><name>nsDocAccessible</name>*</type>
<name><name>nsAccessNode</name>::<name>GetDocAccessibleFor</name></name><parameter_list>(<param><decl><type><name>nsIWeakReference</name> *</type><name>aWeakShell</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>presShell</name><argument_list>(<argument><expr><call><name>do_QueryReferent</name><argument_list>(<argument><expr><name>aWeakShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>presShell</name></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name>GetDocAccessibleFor</name><argument_list>(<argument><expr><call><name><name>presShell</name>-&gt;<name>GetDocument</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsIAccessibleDocument</name></expr></argument>&gt;</argument_list></name></type>
<name><name>nsAccessNode</name>::<name>GetDocAccessibleFor</name></name><parameter_list>(<param><decl><type><name>nsIDocShellTreeItem</name> *</type><name>aContainer</name></decl></param>,
                                  <param><decl><type><name>PRBool</name></type> <name>aCanCreate</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>aCanCreate</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocShell</name></expr></argument>&gt;</argument_list></name></type> <name>docShell</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aContainer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>docShell</name></expr></argument>, <argument><expr>"This method currently only supports docshells"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>presShell</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>docShell</name>-&gt;<name>GetPresShell</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>presShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>presShell</name></expr>)</condition><then>
      <return>return <expr><name>nsnull</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>nsDocAccessible</name> *</type><name>docAcc</name> <init>= <expr><call><name>GetDocAccessibleFor</name><argument_list>(<argument><expr><call><name><name>presShell</name>-&gt;<name>GetDocument</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr><name>docAcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>docAcc</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>node</name> <init>= <expr><call><name><name>nsCoreUtils</name>::<name>GetDOMNodeForContainer</name></name><argument_list>(<argument><expr><name>aContainer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>node</name></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessible</name></expr></argument>&gt;</argument_list></name></type> <name>accessible</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetAccService</name><argument_list>()</argument_list></call>-&gt;<call><name>GetAccessibleFor</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>accessible</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>nsIAccessibleDocument</name> *</type><name>docAccessible</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>accessible</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>accessible</name></expr></argument>, <argument><expr>&amp;<name>docAccessible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>docAccessible</name></expr>;</return>
}</block></function>
 
<function><type><name>nsDocAccessible</name>*</type>
<name><name>nsAccessNode</name>::<name>GetDocAccessibleFor</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name> *</type><name>aNode</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIPresShell</name> *</type><name>presShell</name> <init>= <expr><call><name><name>nsCoreUtils</name>::<name>GetPresShellFor</name></name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>presShell</name></expr>)</condition><then>
    <return>return <expr><call><name>GetDocAccessibleFor</name><argument_list>(<argument><expr><call><name><name>presShell</name>-&gt;<name>GetDocument</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></type> <name>doc</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>doc</name></expr>)</condition><then> <block>{
    <return>return <expr><call><name>GetDocAccessibleFor</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>nsnull</name></expr>;</return>
}</block></function>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name><name>nsAccessNode</name>::<name>GetCurrentFocus</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIPresShell</name> *</type><name>shell</name> <init>= <expr><call><name><name>nsCoreUtils</name>::<name>GetPresShellFor</name></name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>shell</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></type> <name>doc</name> <init>= <expr><call><name><name>shell</name>-&gt;<name>GetDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIDOMWindow</name>*</type> <name>win</name> <init>= <expr><call><name><name>doc</name>-&gt;<name>GetWindow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMWindow</name></expr></argument>&gt;</argument_list></name></type> <name>focusedWindow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>focusedElement</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFocusManager</name></expr></argument>&gt;</argument_list></name></type> <name>fm</name> <init>= <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>FOCUSMANAGER_CONTRACTID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>fm</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>fm</name>-&gt;<name>GetFocusedElementForWindow</name></name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>focusedWindow</name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>focusedElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <decl_stmt><decl><type><name>nsIDOMNode</name> *</type><name>focusedNode</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>focusedElement</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>focusedElement</name></expr></argument>, <argument><expr>&amp;<name>focusedNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><name>focusedWindow</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocument</name></expr></argument>&gt;</argument_list></name></type> <name>doc</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>focusedWindow</name>-&gt;<name>GetDocument</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>doc</name></expr>)</condition><then>
      <expr_stmt><expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr>&amp;<name>focusedNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  }</block></then></if></else></if>

  <return>return <expr><name>focusedNode</name></expr>;</return>
}</block></function>

<comment type="line">// nsIAccessNode</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsAccessNode</name>::<name>GetLanguage</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aLanguage</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aLanguage</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>content</name></expr>)</condition><then> <block>{
    <comment type="line">// For documents make sure we look for lang attribute on</comment>
    <comment type="line">// document element</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocument</name></expr></argument>&gt;</argument_list></name></type> <name>domDoc</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>domDoc</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLDocument</name></expr></argument>&gt;</argument_list></name></type> <name>htmlDoc</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mDOMNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>htmlDoc</name></expr>)</condition><then> <block>{
        <comment type="line">// Make sure we look for lang attribute on HTML &lt;body&gt;</comment>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLElement</name></expr></argument>&gt;</argument_list></name></type> <name>bodyElement</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>htmlDoc</name>-&gt;<name>GetBody</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>bodyElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>content</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>bodyElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr>!<name>content</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>docElement</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>domDoc</name>-&gt;<name>GetDocumentElement</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>docElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>content</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>docElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
    <if>if <condition>(<expr>!<name>content</name></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>nsCoreUtils</name>::<name>GetLanguageFor</name></name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aLanguage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name><name>aLanguage</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <comment type="line">// Nothing found, so use document's language</comment>
    <decl_stmt><decl><type><name>nsIDocument</name> *</type><name>doc</name> <init>= <expr><call><name><name>content</name>-&gt;<name>GetOwnerDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>doc</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>doc</name>-&gt;<name>GetHeaderData</name></name><argument_list>(<argument><expr><name><name>nsAccessibilityAtoms</name>::<name>headerContentLanguage</name></name></expr></argument>, <argument><expr><name>aLanguage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
 
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// nsAccessNode protected</comment>

<function><type><name>nsDocAccessible</name>*</type>
<name><name>nsAccessNode</name>::<name>GetDocAccessible</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><call><name>GetDocAccessibleFor</name><argument_list>(<argument><expr><name>mWeakShell</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
