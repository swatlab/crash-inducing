<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="000fce48e0ec2624a2e21b91ca16cb4c6a4ee6c9.h"><comment type="block">/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: set ts=4 sw=4 et tw=99:
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla SpiderMonkey JavaScript 1.9 code, released
 * May 28, 2008.
 *
 * The Initial Developer of the Original Code is
 *   Mozilla Foundation
 * Portions created by the Initial Developer are Copyright (C) 2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Andreas Gal &lt;gal@mozilla.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>jswrapper_h___</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jswrapper_h___</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsproxy.h"</cpp:file></cpp:include>

<comment type="block">/* No-op wrapper handler base class. */</comment>
<expr_stmt><expr><name>class</name> <name>JSWrapper</name> : <name>public</name> <name>js</name>::<name>JSProxyHandler</name> <block>{
    <expr><name>uintN</name> <name>mFlags</name></expr>;
  <expr><name>public</name>:
    <name>uintN</name> <macro><name>flags</name><argument_list>()</argument_list></macro> const <block>{ <return>return <expr><name>mFlags</name></expr>;</return></block></expr> }</block>

    <name>explicit</name> <call><name>JS_FRIEND_API</name><argument_list>(<argument><expr><macro><name>JSWrapper</name><argument_list>(<argument>uintN flags</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <typedef>typedef <type><enum>enum <block>{ <decl><name>PermitObjectAccess</name></decl>, <decl><name>PermitPropertyAccess</name></decl>, <decl><name>DenyAccess</name></decl> }</block></enum></type> <name>Permission</name>;</typedef>

    <expr_stmt><expr><call><name>JS_FRIEND_API</name><argument_list>(<argument><expr><name>virtual</name> ~<call><name>JSWrapper</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* ES5 Harmony fundamental wrapper traps. */</comment>
    <function_decl><type><name>virtual</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> getPropertyDescriptor<parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>,
                                                      <param><decl><type><name>JSPropertyDescriptor</name> *</type><name>desc</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> getOwnPropertyDescriptor<parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>,
                                                         <param><decl><type><name>JSPropertyDescriptor</name> *</type><name>desc</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> defineProperty<parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>,
                                               <param><decl><type><name>JSPropertyDescriptor</name> *</type><name>desc</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> getOwnPropertyNames<parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>,
                                                    <param><decl/></param></parameter_list>js::AutoValueVector &amp;props</function_decl>)<empty_stmt>;</empty_stmt>
    <function_decl><type><name>virtual</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> delete_<parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>bool</name> *</type><name>bp</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> enumerate<parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>, <param><decl/></param></parameter_list>js::AutoValueVector &amp;props</function_decl>)<empty_stmt>;</empty_stmt>
    <function_decl><type><name>virtual</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> fix<parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/* ES5 Harmony derived wrapper traps. */</comment>
    <function_decl><type><name>virtual</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> has<parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>bool</name> *</type><name>bp</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> hasOwn<parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>bool</name> *</type><name>bp</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> get<parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>receiver</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>,
                                    <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> set<parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>receiver</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>,
                                    <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> enumerateOwn<parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>, <param><decl/></param></parameter_list>js::AutoValueVector &amp;props</function_decl>)<empty_stmt>;</empty_stmt>
    <function_decl><type><name>virtual</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> iterate<parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>flags</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/* Spidermonkey extensions. */</comment>
    <function_decl><type><name>virtual</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> call<parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>vp</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> construct<parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>receiver</name></decl></param>,
                                          <param><decl><type><name>uintN</name></type> <name>argc</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>rval</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>JSString</name> *</type></decl></param>)</parameter_list> obj_toString<parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>JSString</name> *</type></decl></param>)</parameter_list> fun_toString<parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>indent</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> trace<parameter_list>(<param><decl><type><name>JSTracer</name> *</type><name>trc</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/* Policy enforcement traps. */</comment>
    <function_decl><type><name>virtual</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> enter<parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>, <param><decl><type><name>jsid</name></type> <name>id</name></decl></param>, <param><decl><type><name>bool</name></type> <name>set</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name></type> <name>JS_FRIEND_API</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> leave<parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>)</parameter_list>;</function_decl>

    <expr_stmt><expr>static <macro><name>JS_FRIEND_API</name><argument_list>(<argument>JSWrapper</argument>)</argument_list></macro> <name>singleton</name></expr>;</expr_stmt>

    <expr_stmt><expr>static <macro><name>JS_FRIEND_API</name><argument_list>(<argument>JSObject *</argument>)</argument_list></macro> <call><name>New</name><argument_list>(<argument><expr><name>JSContext</name> *<name>cx</name></expr></argument>, <argument><expr><name>JSObject</name> *<name>obj</name></expr></argument>,
                                         <argument><expr><name>JSObject</name> *<name>proto</name></expr></argument>, <argument><expr><name>JSObject</name> *<name>parent</name></expr></argument>,
                                         <argument><expr><name>JSWrapper</name> *<name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function><type><specifier>static</specifier> <specifier>inline</specifier> <name>JSObject</name> *</type><name>wrappedObject</name><parameter_list>(<param><decl><type><name>JSObject</name> *</type><name>wrapper</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><call><name><name>wrapper</name>-&gt;<name>getProxyPrivate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
};

<comment type="block">/* Base class for all cross compartment wrapper handlers. */</comment>
<expr_stmt><expr><name>class</name> <name>JSCrossCompartmentWrapper</name> : <name>public</name> <name>JSWrapper</name> <block>{
  <expr><name>public</name>:
    <call><name>JS_FRIEND_API</name><argument_list>(<argument><expr><macro><name>JSCrossCompartmentWrapper</name><argument_list>(<argument>uintN flags</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;

    <expr><name>virtual</name> <call><name>JS_FRIEND_API</name><argument_list>(<argument><expr>~<call><name>JSCrossCompartmentWrapper</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <comment type="block">/* ES5 Harmony fundamental wrapper traps. */</comment>
    <expr><name>virtual</name> <macro><name>JS_FRIEND_API</name><argument_list>(<argument>bool</argument>)</argument_list></macro> <macro><name>getPropertyDescriptor</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *wrapper</argument>, <argument>jsid id</argument>,
                                                     <argument>JSPropertyDescriptor *desc</argument>)</argument_list></macro></expr>;
    <expr><name>virtual</name> <macro><name>JS_FRIEND_API</name><argument_list>(<argument>bool</argument>)</argument_list></macro> <macro><name>getOwnPropertyDescriptor</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *wrapper</argument>, <argument>jsid id</argument>,
                                                         <argument>JSPropertyDescriptor *desc</argument>)</argument_list></macro></expr>;
    <expr><name>virtual</name> <macro><name>JS_FRIEND_API</name><argument_list>(<argument>bool</argument>)</argument_list></macro> <macro><name>defineProperty</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *wrapper</argument>, <argument>jsid id</argument>,
                                               <argument>JSPropertyDescriptor *desc</argument>)</argument_list></macro></expr>;
    <expr><name>virtual</name> <macro><name>JS_FRIEND_API</name><argument_list>(<argument>bool</argument>)</argument_list></macro> <call><name>getOwnPropertyNames</name><argument_list>(<argument><expr><name>JSContext</name> *<name>cx</name></expr></argument>, <argument><expr><name>JSObject</name> *<name>wrapper</name></expr></argument>, <argument><expr><name>js</name>::<name>AutoValueVector</name> &amp;<name>props</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>virtual</name> <macro><name>JS_FRIEND_API</name><argument_list>(<argument>bool</argument>)</argument_list></macro> <macro><name>delete_</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *wrapper</argument>, <argument>jsid id</argument>, <argument>bool *bp</argument>)</argument_list></macro></expr>;
    <expr><name>virtual</name> <macro><name>JS_FRIEND_API</name><argument_list>(<argument>bool</argument>)</argument_list></macro> <call><name>enumerate</name><argument_list>(<argument><expr><name>JSContext</name> *<name>cx</name></expr></argument>, <argument><expr><name>JSObject</name> *<name>wrapper</name></expr></argument>, <argument><expr><name>js</name>::<name>AutoValueVector</name> &amp;<name>props</name></expr></argument>)</argument_list></call></expr>;

    <comment type="block">/* ES5 Harmony derived wrapper traps. */</comment>
    <expr><name>virtual</name> <macro><name>JS_FRIEND_API</name><argument_list>(<argument>bool</argument>)</argument_list></macro> <macro><name>has</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *wrapper</argument>, <argument>jsid id</argument>, <argument>bool *bp</argument>)</argument_list></macro></expr>;
    <expr><name>virtual</name> <macro><name>JS_FRIEND_API</name><argument_list>(<argument>bool</argument>)</argument_list></macro> <macro><name>hasOwn</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *wrapper</argument>, <argument>jsid id</argument>, <argument>bool *bp</argument>)</argument_list></macro></expr>;
    <expr><name>virtual</name> <macro><name>JS_FRIEND_API</name><argument_list>(<argument>bool</argument>)</argument_list></macro> <macro><name>get</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *wrapper</argument>, <argument>JSObject *receiver</argument>, <argument>jsid id</argument>, <argument>jsval *vp</argument>)</argument_list></macro></expr>;
    <expr><name>virtual</name> <macro><name>JS_FRIEND_API</name><argument_list>(<argument>bool</argument>)</argument_list></macro> <macro><name>set</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *wrapper</argument>, <argument>JSObject *receiver</argument>, <argument>jsid id</argument>, <argument>jsval *vp</argument>)</argument_list></macro></expr>;
    <expr><name>virtual</name> <macro><name>JS_FRIEND_API</name><argument_list>(<argument>bool</argument>)</argument_list></macro> <call><name>enumerateOwn</name><argument_list>(<argument><expr><name>JSContext</name> *<name>cx</name></expr></argument>, <argument><expr><name>JSObject</name> *<name>wrapper</name></expr></argument>, <argument><expr><name>js</name>::<name>AutoValueVector</name> &amp;<name>props</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>virtual</name> <macro><name>JS_FRIEND_API</name><argument_list>(<argument>bool</argument>)</argument_list></macro> <macro><name>iterate</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *wrapper</argument>, <argument>uintN flags</argument>, <argument>jsval *vp</argument>)</argument_list></macro></expr>;

    <comment type="block">/* Spidermonkey extensions. */</comment>
    <expr><name>virtual</name> <macro><name>JS_FRIEND_API</name><argument_list>(<argument>bool</argument>)</argument_list></macro> <macro><name>call</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *wrapper</argument>, <argument>uintN argc</argument>, <argument>jsval *vp</argument>)</argument_list></macro></expr>;
    <expr><name>virtual</name> <macro><name>JS_FRIEND_API</name><argument_list>(<argument>bool</argument>)</argument_list></macro> <macro><name>construct</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *wrapper</argument>, <argument>JSObject *receiver</argument>,
                           <argument>uintN argc</argument>, <argument>jsval *argv</argument>, <argument>jsval *rval</argument>)</argument_list></macro></expr>;
    <expr><name>virtual</name> <macro><name>JS_FRIEND_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro> <call><name>obj_toString</name><argument_list>(<argument><expr><name>JSContext</name> *<name>cx</name></expr></argument>, <argument><expr><name>JSObject</name> *<name>wrapper</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>virtual</name> <macro><name>JS_FRIEND_API</name><argument_list>(<argument>JSString *</argument>)</argument_list></macro> <macro><name>fun_toString</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSObject *wrapper</argument>, <argument>uintN indent</argument>)</argument_list></macro></expr>;

    <expr>static <macro><name>JS_FRIEND_API</name><argument_list>(<argument>bool</argument>)</argument_list></macro> <call><name>isCrossCompartmentWrapper</name><argument_list>(<argument><expr><name>JSObject</name> *<name>obj</name></expr></argument>)</argument_list></call></expr>;

    <expr>static <macro><name>JS_FRIEND_API</name><argument_list>(<argument>JSCrossCompartmentWrapper</argument>)</argument_list></macro> <name>singleton</name></expr>;

    <comment type="block">/* Default id used for filter when the trap signature does not contain an id. */</comment>
    <expr>static const <name>jsid</name> <name>id</name> = <name>JSVAL_VOID</name></expr>;
}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>js</name> <block>{

<decl_stmt><decl><type><name>class</name></type> <name>AutoCompartment</name>
<block>{
  <label><name>public</name>:</label>
    <decl_stmt><decl><type><name>JSContext</name> * <specifier>const</specifier></type> <name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSCompartment</name> * <specifier>const</specifier></type> <name>origin</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> * <specifier>const</specifier></type> <name>target</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSCompartment</name> * <specifier>const</specifier></type> <name>destination</name></decl>;</decl_stmt>
  <label><name>private</name>:</label>
    <expr_stmt><expr><name>LazilyConstructed</name>&lt;<name>ExecuteFrameGuard</name>&gt; <name>frame</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSFrameRegs</name></type> <name>regs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSRegExpStatics</name></type> <name>statics</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AutoValueRooter</name></type> <name>input</name></decl>;</decl_stmt>

  <label><name>public</name>:</label>
    <expr_stmt><expr><call><name>AutoCompartment</name><argument_list>(<argument><expr><name>JSContext</name> *<name>cx</name></expr></argument>, <argument><expr><name>JSObject</name> *<name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>~<call><name>AutoCompartment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>bool</name> <macro><name>entered</name><argument_list>()</argument_list></macro> const <block>{ <return>return <expr><name><name>context</name>-&gt;<name>compartment</name></name> == <name>destination</name></expr>;</return> }</block></expr></expr_stmt>
    <function_decl><type><name>bool</name></type> <name>enter</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>leave</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><name>jsval</name> *</type><name>getvp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>entered</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>frame</name>.<name>ref</name></name><argument_list>()</argument_list></call>.<call><name>getvp</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

  <label><name>private</name>:</label>
    <comment type="line">// Prohibit copying.</comment>
    <expr_stmt><expr><call><name>AutoCompartment</name><argument_list>(<argument><expr>const <name>AutoCompartment</name> &amp;</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>AutoCompartment</name> &amp;</type> <name>operator</name><init>=<expr>(const <name>AutoCompartment</name> &amp;)</expr></init></decl>;</decl_stmt>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><specifier>extern</specifier> <name>JSObject</name> *</type>
<name>TransparentObjectWrapper</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>JSObject</name> *</type><name>wrappedProto</name></decl></param>, <param><decl><type><name>uintN</name></type> <name>flags</name></decl></param>)</parameter_list>;</function_decl>

}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
