<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="00774ea5d90d0f618a01021a063c949ec90a0ccd.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is thebes gfx code.
 *
 * The Initial Developer of the Original Code is Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2008-2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   John Daggett &lt;jdaggett@mozilla.com&gt;
 *   Jonathan Kew &lt;jfkthame@gmail.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_LOGGING</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORCE_PR_LOG</name></cpp:macro></cpp:define> <comment type="block">/* Allow logging in the release build */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MOZ_LOGGING */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prlog.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gfxUserFontSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gfxPlatform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsReadableUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsUnicharUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prlong.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"woff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opentype-sanitiser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ots-memory-stream.h"</cpp:file></cpp:include>

<using>using namespace <name>mozilla</name>;</using>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PRLogModuleInfo</name> *</type><name>gUserFontsLog</name> <init>= <expr><call><name>PR_NewLogModule</name><argument_list>(<argument><expr>"userfonts"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* PR_LOGGING */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG</name><parameter_list>(<param><type><name>args</name></type></param>)</parameter_list></cpp:macro> <cpp:value>PR_LOG(gUserFontsLog, PR_LOG_DEBUG, args)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_ENABLED</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>PR_LOG_TEST(gUserFontsLog, PR_LOG_DEBUG)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>PRUint64</name></type> <name>sFontSetGeneration</name> <init>= <expr><call><name>LL_INIT</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="line">// TODO: support for unicode ranges not yet implemented</comment>

<constructor><name><name>gfxProxyFontEntry</name>::<name>gfxProxyFontEntry</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>gfxFontFaceSrc</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aFontFaceSrcList</name></decl></param>,
             <param><decl><type><name>gfxMixedFontFamily</name> *</type><name>aFamily</name></decl></param>,
             <param><decl><type><name>PRUint32</name></type> <name>aWeight</name></decl></param>,
             <param><decl><type><name>PRUint32</name></type> <name>aStretch</name></decl></param>,
             <param><decl><type><name>PRUint32</name></type> <name>aItalicStyle</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>gfxFontFeature</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aFeatureSettings</name></decl></param>,
             <param><decl><type><name>PRUint32</name></type> <name>aLanguageOverride</name></decl></param>,
             <param><decl><type><name>gfxSparseBitSet</name> *</type><name>aUnicodeRanges</name></decl></param>)</parameter_list>
    <member_list>: <call><name>gfxFontEntry</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"Proxy"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aFamily</name></expr></argument>)</argument_list></call>,
      <call><name>mLoadingState</name><argument_list>(<argument><expr><name>NOT_LOADING</name></expr></argument>)</argument_list></call>
</member_list><block>{
    <expr_stmt><expr><name>mIsProxy</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mSrcList</name> = <name>aFontFaceSrcList</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mSrcIndex</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>mWeight</name> = <name>aWeight</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mStretch</name> = <name>aStretch</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mItalic</name> = (<name>aItalicStyle</name> &amp; (<name>FONT_STYLE_ITALIC</name> | <name>FONT_STYLE_OBLIQUE</name>)) != 0</expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mFeatureSettings</name>.<name>AppendElements</name></name><argument_list>(<argument><expr><name>aFeatureSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mLanguageOverride</name> = <name>aLanguageOverride</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mIsUserFont</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>gfxProxyFontEntry</name>::~<name>gfxProxyFontEntry</name></name><parameter_list>()</parameter_list>
<block>{
}</block></destructor>

<function><type><name>gfxFont</name>*</type>
<name><name>gfxProxyFontEntry</name>::<name>CreateFontInstance</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>gfxFontStyle</name> *</type><name>aFontStyle</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aNeedsBold</name></decl></param>)</parameter_list>
<block>{
    <comment type="line">// cannot create an actual font for a proxy entry</comment>
    <return>return <expr><name>nsnull</name></expr>;</return>
}</block></function>

<constructor><name><name>gfxUserFontSet</name>::<name>gfxUserFontSet</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>mFontFamilies</name>.<name>Init</name></name><argument_list>(<argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IncrementGeneration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>gfxUserFontSet</name>::~<name>gfxUserFontSet</name></name><parameter_list>()</parameter_list>
<block>{
}</block></destructor>

<function><type><name>void</name></type>
<name><name>gfxUserFontSet</name>::<name>AddFontFace</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aFamilyName</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>gfxFontFaceSrc</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aFontFaceSrcList</name></decl></param>,
                            <param><decl><type><name>PRUint32</name></type> <name>aWeight</name></decl></param>,
                            <param><decl><type><name>PRUint32</name></type> <name>aStretch</name></decl></param>,
                            <param><decl><type><name>PRUint32</name></type> <name>aItalicStyle</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>nsString</name>&amp;</type> <name>aFeatureSettings</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>nsString</name>&amp;</type> <name>aLanguageOverride</name></decl></param>,
                            <param><decl><type><name>gfxSparseBitSet</name> *</type><name>aUnicodeRanges</name></decl></param>)</parameter_list>
<block>{
    <function_decl><type><name>nsAutoString</name></type> <name>key</name><parameter_list>(<param><decl><type><name>aFamilyName</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>ToLowerCase</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PRBool</name></type> <name>found</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>aWeight</name> == 0</expr>)</condition><then>
        <expr_stmt><expr><name>aWeight</name> = <name>FONT_WEIGHT_NORMAL</name></expr>;</expr_stmt></then></if>

    <comment type="line">// stretch, italic/oblique ==&gt; zero implies normal</comment>

    <decl_stmt><decl><type><name>gfxMixedFontFamily</name> *</type><name>family</name> <init>= <expr><call><name><name>mFontFamilies</name>.<name>GetWeak</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>&amp;<name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>family</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>family</name> = new <call><name>gfxMixedFontFamily</name><argument_list>(<argument><expr><name>aFamilyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mFontFamilies</name>.<name>Put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">// construct a new face and add it into the family</comment>
    <if>if <condition>(<expr><name>family</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>gfxFontFeature</name></expr></argument>&gt;</argument_list></name></type> <name>featureSettings</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>gfxFontStyle</name>::<name>ParseFontFeatureSettings</name></name><argument_list>(<argument><expr><name>aFeatureSettings</name></expr></argument>,
                                               <argument><expr><name>featureSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PRUint32</name></type> <name>languageOverride</name> <init>=
            <expr><call><name><name>gfxFontStyle</name>::<name>ParseFontLanguageOverride</name></name><argument_list>(<argument><expr><name>aLanguageOverride</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gfxProxyFontEntry</name> *</type><name>proxyEntry</name> <init>= 
            <expr>new <call><name>gfxProxyFontEntry</name><argument_list>(<argument><expr><name>aFontFaceSrcList</name></expr></argument>, <argument><expr><name>family</name></expr></argument>, <argument><expr><name>aWeight</name></expr></argument>, <argument><expr><name>aStretch</name></expr></argument>, 
                                  <argument><expr><name>aItalicStyle</name></expr></argument>,
                                  <argument><expr><name>featureSettings</name></expr></argument>,
                                  <argument><expr><name>languageOverride</name></expr></argument>,
                                  <argument><expr><name>aUnicodeRanges</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>family</name>-&gt;<name>AddFontEntry</name></name><argument_list>(<argument><expr><name>proxyEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef>
        <if>if <condition>(<expr><call><name>LOG_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr>("userfonts (%p) added (%s) with style: %s weight: %d stretch: %d", 
                 <name>this</name>, <call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><name>aFamilyName</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call>, 
                 (<name>aItalicStyle</name> &amp; <name>FONT_STYLE_ITALIC</name> ? "italic" : 
                     (<name>aItalicStyle</name> &amp; <name>FONT_STYLE_OBLIQUE</name> ? "oblique" : "normal")), 
                 <name>aWeight</name>, <name>aStretch</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then></if>
}</block></function>

<function><type><name>gfxFontEntry</name>*</type>
<name><name>gfxUserFontSet</name>::<name>FindFontEntry</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aName</name></decl></param>, 
                              <param><decl><type><specifier>const</specifier> <name>gfxFontStyle</name>&amp;</type> <name>aFontStyle</name></decl></param>, 
                              <param><decl><type><name>PRBool</name>&amp;</type> <name>aNeedsBold</name></decl></param>,
                              <param><decl><type><name>PRBool</name>&amp;</type> <name>aWaitForUserFont</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>aWaitForUserFont</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>gfxMixedFontFamily</name> *</type><name>family</name> <init>= <expr><call><name>GetFamily</name><argument_list>(<argument><expr><name>aName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// no user font defined for this name</comment>
    <if>if <condition>(<expr>!<name>family</name></expr>)</condition><then> <block>{
        <return>return <expr><name>nsnull</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>gfxFontEntry</name>*</type> <name>fe</name> <init>= <expr><call><name><name>family</name>-&gt;<name>FindFontForStyle</name></name><argument_list>(<argument><expr><name>aFontStyle</name></expr></argument>, <argument><expr><name>aNeedsBold</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// if not a proxy, font has already been loaded</comment>
    <if>if <condition>(<expr>!<name><name>fe</name>-&gt;<name>mIsProxy</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>fe</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>gfxProxyFontEntry</name> *</type><name>proxyEntry</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>gfxProxyFontEntry</name>*</expr></argument>&gt;</argument_list></name> <argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// if currently loading, return null for now</comment>
    <if>if <condition>(<expr><name><name>proxyEntry</name>-&gt;<name>mLoadingState</name></name> &gt; <name><name>gfxProxyFontEntry</name>::<name>NOT_LOADING</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>aWaitForUserFont</name> =
            (<name><name>proxyEntry</name>-&gt;<name>mLoadingState</name></name> &lt; <name><name>gfxProxyFontEntry</name>::<name>LOADING_SLOWLY</name></name>)</expr>;</expr_stmt>
        <return>return <expr><name>nsnull</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// hasn't been loaded yet, start the load process</comment>
    <decl_stmt><decl><type><name>LoadStatus</name></type> <name>status</name></decl>;</decl_stmt>

    <comment type="line">// NOTE that if all sources in the entry fail, this will delete proxyEntry,</comment>
    <comment type="line">// so we cannot use it again if status==STATUS_END_OF_LIST</comment>
    <expr_stmt><expr><name>status</name> = <call><name>LoadNext</name><argument_list>(<argument><expr><name>proxyEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// if the load succeeded immediately, the font entry was replaced so</comment>
    <comment type="line">// search again</comment>
    <if>if <condition>(<expr><name>status</name> == <name>STATUS_LOADED</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>family</name>-&gt;<name>FindFontForStyle</name></name><argument_list>(<argument><expr><name>aFontStyle</name></expr></argument>, <argument><expr><name>aNeedsBold</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="line">// check whether we should wait for load to complete before painting</comment>
    <comment type="line">// a fallback font -- but not if all sources failed (bug 633500)</comment>
    <expr_stmt><expr><name>aWaitForUserFont</name> = (<name>status</name> != <name>STATUS_END_OF_LIST</name>) &amp;&amp;
        (<name><name>proxyEntry</name>-&gt;<name>mLoadingState</name></name> &lt; <name><name>gfxProxyFontEntry</name>::<name>LOADING_SLOWLY</name></name>)</expr>;</expr_stmt>

    <comment type="line">// if either loading or an error occurred, return null</comment>
    <return>return <expr><name>nsnull</name></expr>;</return>
}</block></function>

<comment type="line">// Given a buffer of downloaded font data, do any necessary preparation</comment>
<comment type="line">// to make it into usable OpenType.</comment>
<comment type="line">// May return the original pointer unchanged, or a newly-allocated</comment>
<comment type="line">// block (in which case the passed-in block is NS_Free'd).</comment>
<comment type="line">// aLength is updated if necessary to the new length of the data.</comment>
<comment type="line">// Returns NULL and NS_Free's the incoming data in case of errors.</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>PRUint8</name>*</type>
<name>PrepareOpenTypeData</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUint8</name>*</type> <name>aData</name></decl></param>, <param><decl><type><name>PRUint32</name>*</type> <name>aLength</name></decl></param>)</parameter_list>
<block>{
    <switch>switch<condition>(<expr><call><name><name>gfxFontUtils</name>::<name>DetermineFontDataType</name></name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr>*<name>aLength</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
    
    <case>case <expr><name>GFX_USERFONT_OPENTYPE</name></expr>:
        <comment type="line">// nothing to do</comment>
        <return>return <expr><name>aData</name></expr>;</return>
        
    </case><case>case <expr><name>GFX_USERFONT_WOFF</name></expr>: <block>{
        <decl_stmt><decl><type><name>PRUint32</name></type> <name>status</name> <init>= <expr><name>eWOFF_ok</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PRUint32</name></type> <name>bufferSize</name> <init>= <expr><call><name>woffGetDecodedSize</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr>*<name>aLength</name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>WOFF_FAILURE</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <break>break;</break>
        }</block></then></if>
        <decl_stmt><decl><type><name>PRUint8</name>*</type> <name>decodedData</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PRUint8</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>NS_Alloc</name><argument_list>(<argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>decodedData</name></expr>)</condition><then> <block>{
            <break>break;</break>
        }</block></then></if>
        <expr_stmt><expr><call><name>woffDecodeToBuffer</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr>*<name>aLength</name></expr></argument>,
                           <argument><expr><name>decodedData</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>,
                           <argument><expr><name>aLength</name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// replace original data with the decoded version</comment>
        <expr_stmt><expr><call><name>NS_Free</name><argument_list>(<argument><expr>(<name>void</name>*)<name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>aData</name> = <name>decodedData</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>WOFF_FAILURE</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// something went wrong, discard the data and return NULL</comment>
            <break>break;</break>
        }</block></then></if>
        <comment type="line">// success, return the decoded data</comment>
        <return>return <expr><name>aData</name></expr>;</return>
    }</block>

    <comment type="line">// xxx - add support for other wrappers here</comment>

    </case><default>default:
        <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"unknown font format"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </default>}</block></switch>

    <comment type="line">// discard downloaded data that couldn't be used</comment>
    <expr_stmt><expr><call><name>NS_Free</name><argument_list>(<argument><expr>(<name>void</name>*)<name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>nsnull</name></expr>;</return>
}</block></function>

<comment type="line">// Based on ots::ExpandingMemoryStream from ots-memory-stream.h,</comment>
<comment type="line">// adapted to use Mozilla allocators and to allow the final</comment>
<comment type="line">// memory buffer to be adopted by the client.</comment>
<class>class <name>ExpandingMemoryStream</name> <super>: <specifier>public</specifier> <name><name>ots</name>::<name>OTSStream</name></name></super> <block>{<private type="default">
</private><public>public:
    <constructor><name>ExpandingMemoryStream</name><parameter_list>(<param><decl><type><name>size_t</name></type> <name>initial</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>limit</name></decl></param>)</parameter_list>
        <member_list>: <call><name>mLength</name><argument_list>(<argument><expr><name>initial</name></expr></argument>)</argument_list></call>, <call><name>mLimit</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call>, <call><name>mOff</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call> </member_list><block>{
        <expr_stmt><expr><name>mPtr</name> = <call><name>NS_Alloc</name><argument_list>(<argument><expr><name>mLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <destructor><name>~<name>ExpandingMemoryStream</name></name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>NS_Free</name><argument_list>(<argument><expr><name>mPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></destructor>

    <comment type="line">// return the buffer, and give up ownership of it</comment>
    <comment type="line">// so the caller becomes responsible to call NS_Free</comment>
    <comment type="line">// when finished with it</comment>
    <function><type><name>void</name>*</type> <name>forget</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>void</name>*</type> <name>p</name> <init>= <expr><name>mPtr</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>mPtr</name> = <name>nsnull</name></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>WriteRaw</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>mOff</name> + <name>length</name> &gt; <name>mLength</name>) ||
            (<name>mLength</name> &gt; <call><name><name>std</name>::<name><name>numeric_limits</name><argument_list>&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name>::<name>max</name></name><argument_list>()</argument_list></call> - <name>mOff</name>)</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>mLength</name> == <name>mLimit</name></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>size_t</name></type> <name>newLength</name> <init>= <expr>(<name>mLength</name> + 1) * 2</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>newLength</name> &lt; <name>mLength</name></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><name>newLength</name> &gt; <name>mLimit</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>newLength</name> = <name>mLimit</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>mPtr</name> = <call><name>NS_Realloc</name><argument_list>(<argument><expr><name>mPtr</name></expr></argument>, <argument><expr><name>newLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mLength</name> = <name>newLength</name></expr>;</expr_stmt>
            <return>return <expr><call><name>WriteRaw</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>std</name>::<name>memcpy</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>char</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mPtr</name></expr></argument>)</argument_list></call> + <name>mOff</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mOff</name> += <name>length</name></expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>Seek</name><parameter_list>(<param><decl><type><name>off_t</name></type> <name>position</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>position</name> &lt; 0</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call> &gt; <name>mLength</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>mOff</name> = <name>position</name></expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <function><type><name>off_t</name></type> <name>Tell</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>mOff</name></expr>;</return>
    }</block></function>

</public><private>private:
    <decl_stmt><decl><type><name>void</name>*</type>        <name>mPtr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>       <name>mLength</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>mLimit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>off_t</name></type>        <name>mOff</name></decl>;</decl_stmt>
</private>}</block>;</class>

<comment type="line">// Call the OTS library to sanitize an sfnt before attempting to use it.</comment>
<comment type="line">// Returns a newly-allocated block, or NULL in case of fatal errors.</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>PRUint8</name>*</type>
<name>SanitizeOpenTypeData</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUint8</name>*</type> <name>aData</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLength</name></decl></param>,
                     <param><decl><type><name>PRUint32</name>&amp;</type> <name>aSaneLength</name></decl></param>, <param><decl><type><name>bool</name></type> <name>aIsCompressed</name></decl></param>)</parameter_list>
<block>{
    <comment type="line">// limit output/expansion to 256MB</comment>
    <decl_stmt><decl><type><name>ExpandingMemoryStream</name></type> <name>output</name><argument_list>(<argument><expr><name>aIsCompressed</name> ? <name>aLength</name> * 2 : <name>aLength</name></expr></argument>,
                                 <argument><expr>1024 * 1024 * 256</expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>ots</name>::<name>Process</name></name><argument_list>(<argument><expr>&amp;<name>output</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>, <argument><expr><name>aLength</name></expr></argument>,
        <argument><expr><call><name><name>gfxPlatform</name>::<name>GetPlatform</name></name><argument_list>()</argument_list></call>-&gt;<call><name>PreserveOTLTablesWhenSanitizing</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>aSaneLength</name> = <call><name><name>output</name>.<name>Tell</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PRUint8</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>output</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>aSaneLength</name> = 0</expr>;</expr_stmt>
        <return>return <expr><name>nsnull</name></expr>;</return>
    }</block></else></if>
}</block></function>

<comment type="line">// Find the GDEF, GSUB, GPOS tables in aFontData (if present)</comment>
<comment type="line">// and cache copies in the given font entry.</comment>
<comment type="line">// The sfnt table directory has already been accepted by the OTS</comment>
<comment type="line">// sanitizer before this is called, so we can assume entries are valid.</comment>
<comment type="line">//</comment>
<comment type="line">// This is a temporary workaround until OTS has full support for the</comment>
<comment type="line">// G*** tables, so that they can safely be left in the main font.</comment>
<comment type="line">// When http://code.google.com/p/chromium/issues/detail?id=27131 gets fixed,</comment>
<comment type="line">// we should remove this hack.</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CacheLayoutTablesFromSFNT</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUint8</name>*</type> <name>aFontData</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLength</name></decl></param>,
                          <param><decl><type><name>gfxFontEntry</name>*</type> <name>aFontEntry</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>SFNTHeader</name> *</type><name>sfntHeader</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><specifier>const</specifier> <name>SFNTHeader</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aFontData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint16</name></type> <name>numTables</name> <init>= <expr><name><name>sfntHeader</name>-&gt;<name>numTables</name></name></expr></init></decl>;</decl_stmt>
    
    <comment type="line">// table directory entries begin immediately following SFNT header</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>TableDirEntry</name> *</type><name>dirEntry</name> <init>= 
        <expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><specifier>const</specifier> <name>TableDirEntry</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aFontData</name> + <sizeof>sizeof<argument_list>(<argument><expr><name>SFNTHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>numTables</name>-- &gt; 0</expr>)</condition> <block>{
        <switch>switch <condition>(<expr><name><name>dirEntry</name>-&gt;<name>tag</name></name></expr>)</condition> <block>{
        <case>case <expr><call><name>TRUETYPE_TAG</name><argument_list>(<argument><expr>'G'</expr></argument>,<argument><expr>'D'</expr></argument>,<argument><expr>'E'</expr></argument>,<argument><expr>'F'</expr></argument>)</argument_list></call></expr>:
        </case><case>case <expr><call><name>TRUETYPE_TAG</name><argument_list>(<argument><expr>'G'</expr></argument>,<argument><expr>'P'</expr></argument>,<argument><expr>'O'</expr></argument>,<argument><expr>'S'</expr></argument>)</argument_list></call></expr>:
        </case><case>case <expr><call><name>TRUETYPE_TAG</name><argument_list>(<argument><expr>'G'</expr></argument>,<argument><expr>'S'</expr></argument>,<argument><expr>'U'</expr></argument>,<argument><expr>'B'</expr></argument>)</argument_list></call></expr>: <block>{
                <decl_stmt><decl><type><name><name>FallibleTArray</name><argument_list>&lt;<argument><expr><name>PRUint8</name></expr></argument>&gt;</argument_list></name></type> <name>buffer</name></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<call><name><name>buffer</name>.<name>AppendElements</name></name><argument_list>(<argument><expr><name>aFontData</name> + <name><name>dirEntry</name>-&gt;<name>offset</name></name></expr></argument>,
                                           <argument><expr><name><name>dirEntry</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"failed to cache font table - out of memory?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>aFontEntry</name>-&gt;<name>PreloadFontTable</name></name><argument_list>(<argument><expr><name><name>dirEntry</name>-&gt;<name>tag</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <break>break;</break>

        </case><default>default:
            <if>if <condition>(<expr><name><name>dirEntry</name>-&gt;<name>tag</name></name> &gt; <call><name>TRUETYPE_TAG</name><argument_list>(<argument><expr>'G'</expr></argument>,<argument><expr>'S'</expr></argument>,<argument><expr>'U'</expr></argument>,<argument><expr>'B'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// directory entries are required to be sorted,</comment>
                <comment type="line">// so we can terminate as soon as we find a tag &gt; 'GSUB'</comment>
                <expr_stmt><expr><name>numTables</name> = 0</expr>;</expr_stmt>
            }</block></then></if>
            <break>break;</break>
        </default>}</block></switch>
        <expr_stmt><expr>++<name>dirEntry</name></expr>;</expr_stmt>
    }</block></while>
}</block></function>

<comment type="line">// OTS drops the OT Layout tables when decoding a WOFF file, so retrieve them</comment>
<comment type="line">// separately and cache them (unchecked) in the font entry; harfbuzz will</comment>
<comment type="line">// sanitize them when it needs to use them.</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PreloadTableFromWOFF</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUint8</name>*</type> <name>aFontData</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLength</name></decl></param>,
                     <param><decl><type><name>PRUint32</name></type> <name>aTableTag</name></decl></param>, <param><decl><type><name>gfxFontEntry</name>*</type> <name>aFontEntry</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>status</name> <init>= <expr><name>eWOFF_ok</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>len</name> <init>= <expr><call><name>woffGetTableSize</name><argument_list>(<argument><expr><name>aFontData</name></expr></argument>, <argument><expr><name>aLength</name></expr></argument>, <argument><expr><name>aTableTag</name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>WOFF_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> &amp;&amp; <name>len</name> &gt; 0</expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>FallibleTArray</name><argument_list>&lt;<argument><expr><name>PRUint8</name></expr></argument>&gt;</argument_list></name></type> <name>buffer</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>buffer</name>.<name>AppendElements</name></name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"failed to cache font table - out of memory?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>woffGetTableToBuffer</name><argument_list>(<argument><expr><name>aFontData</name></expr></argument>, <argument><expr><name>aLength</name></expr></argument>, <argument><expr><name>aTableTag</name></expr></argument>,
                             <argument><expr><call><name><name>buffer</name>.<name>Elements</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>buffer</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>WOFF_FAILURE</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"failed to cache font table - WOFF decoding error?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>aFontEntry</name>-&gt;<name>PreloadFontTable</name></name><argument_list>(<argument><expr><name>aTableTag</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>CacheLayoutTablesFromWOFF</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUint8</name>*</type> <name>aFontData</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLength</name></decl></param>,
                          <param><decl><type><name>gfxFontEntry</name>*</type> <name>aFontEntry</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PreloadTableFromWOFF</name><argument_list>(<argument><expr><name>aFontData</name></expr></argument>, <argument><expr><name>aLength</name></expr></argument>, <argument><expr><call><name>TRUETYPE_TAG</name><argument_list>(<argument><expr>'G'</expr></argument>,<argument><expr>'D'</expr></argument>,<argument><expr>'E'</expr></argument>,<argument><expr>'F'</expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name>aFontEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PreloadTableFromWOFF</name><argument_list>(<argument><expr><name>aFontData</name></expr></argument>, <argument><expr><name>aLength</name></expr></argument>, <argument><expr><call><name>TRUETYPE_TAG</name><argument_list>(<argument><expr>'G'</expr></argument>,<argument><expr>'P'</expr></argument>,<argument><expr>'O'</expr></argument>,<argument><expr>'S'</expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name>aFontEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PreloadTableFromWOFF</name><argument_list>(<argument><expr><name>aFontData</name></expr></argument>, <argument><expr><name>aLength</name></expr></argument>, <argument><expr><call><name>TRUETYPE_TAG</name><argument_list>(<argument><expr>'G'</expr></argument>,<argument><expr>'S'</expr></argument>,<argument><expr>'U'</expr></argument>,<argument><expr>'B'</expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name>aFontEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line">// This is called when a font download finishes.</comment>
<comment type="line">// Ownership of aFontData passes in here, and the font set must</comment>
<comment type="line">// ensure that it is eventually deleted via NS_Free().</comment>
<function><type><name>PRBool</name></type> 
<name><name>gfxUserFontSet</name>::<name>OnLoadComplete</name></name><parameter_list>(<param><decl><type><name>gfxFontEntry</name> *</type><name>aFontToLoad</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>PRUint8</name> *</type><name>aFontData</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLength</name></decl></param>, 
                               <param><decl><type><name>nsresult</name></type> <name>aDownloadStatus</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name><name>aFontToLoad</name>-&gt;<name>mIsProxy</name></name></expr></argument>,
                 <argument><expr>"trying to load font data for wrong font entry type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name><name>aFontToLoad</name>-&gt;<name>mIsProxy</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_Free</name><argument_list>(<argument><expr>(<name>void</name>*)<name>aFontData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>PR_FALSE</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>gfxProxyFontEntry</name> *</type><name>pe</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>gfxProxyFontEntry</name>*</expr></argument>&gt;</argument_list></name> <argument_list>(<argument><expr><name>aFontToLoad</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// download successful, make platform font using font data</comment>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>aDownloadStatus</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>gfxFontEntry</name> *</type><name>fe</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// Unwrap/decompress/sanitize or otherwise munge the downloaded data</comment>
        <comment type="line">// to make a usable sfnt structure.</comment>

        <if>if <condition>(<expr><call><name><name>gfxPlatform</name>::<name>GetPlatform</name></name><argument_list>()</argument_list></call>-&gt;<call><name>SanitizeDownloadedFonts</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>gfxUserFontType</name></type> <name>fontType</name> <init>=
                <expr><call><name><name>gfxFontUtils</name>::<name>DetermineFontDataType</name></name><argument_list>(<argument><expr><name>aFontData</name></expr></argument>, <argument><expr><name>aLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Call the OTS sanitizer; this will also decode WOFF to sfnt</comment>
            <comment type="line">// if necessary. The original data in aFontData is left unchanged.</comment>
            <decl_stmt><decl><type><name>PRUint32</name></type> <name>saneLen</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>PRUint8</name>*</type> <name>saneData</name> <init>=
                <expr><call><name>SanitizeOpenTypeData</name><argument_list>(<argument><expr><name>aFontData</name></expr></argument>, <argument><expr><name>aLength</name></expr></argument>, <argument><expr><name>saneLen</name></expr></argument>,
                                     <argument><expr><name>fontType</name> == <name>GFX_USERFONT_WOFF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
            <if>if <condition>(<expr>!<name>saneData</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>1000</expr>]</index></name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>"downloaded font rejected for \"%s\""</expr></argument>,
                        <argument><expr><call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><call><name><name>pe</name>-&gt;<name>FamilyName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <if>if <condition>(<expr><name>saneData</name></expr>)</condition><then> <block>{
                <comment type="line">// Here ownership of saneData is passed to the platform,</comment>
                <comment type="line">// which will delete it when no longer required</comment>
                <expr_stmt><expr><name>fe</name> = <call><name><name>gfxPlatform</name>::<name>GetPlatform</name></name><argument_list>()</argument_list></call>-&gt;<call><name>MakePlatformFont</name><argument_list>(<argument><expr><name>pe</name></expr></argument>,
                                                                  <argument><expr><name>saneData</name></expr></argument>,
                                                                  <argument><expr><name>saneLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>fe</name></expr>)</condition><then> <block>{
                    <comment type="line">// if aFontData includes OpenType layout tables, we need to</comment>
                    <comment type="line">// cache them in the font entry for harfbuzz to use,</comment>
                    <comment type="line">// as they will have been dropped from the sanitized sfnt</comment>
                    <comment type="line">// (temporary hack, see CacheLayoutTablesFromSFNT)</comment>
                    <switch>switch <condition>(<expr><name>fontType</name></expr>)</condition> <block>{
                    <case>case <expr><name>GFX_USERFONT_OPENTYPE</name></expr>:
                        <expr_stmt><expr><call><name>CacheLayoutTablesFromSFNT</name><argument_list>(<argument><expr><name>aFontData</name></expr></argument>, <argument><expr><name>aLength</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>

                    </case><case>case <expr><name>GFX_USERFONT_WOFF</name></expr>:
                        <expr_stmt><expr><call><name>CacheLayoutTablesFromWOFF</name><argument_list>(<argument><expr><name>aFontData</name></expr></argument>, <argument><expr><name>aLength</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>

                    </case><default>default:
                        <break>break;</break>
                    </default>}</block></switch>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"failed to make platform font from download"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <comment type="line">// FIXME: this code can be removed once we remove the pref to</comment>
            <comment type="line">// disable the sanitizer; the PrepareOpenTypeData and</comment>
            <comment type="line">// ValidateSFNTHeaders functions will then be obsolete.</comment>
            <expr_stmt><expr><name>aFontData</name> = <call><name>PrepareOpenTypeData</name><argument_list>(<argument><expr><name>aFontData</name></expr></argument>, <argument><expr>&amp;<name>aLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>aFontData</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>gfxFontUtils</name>::<name>ValidateSFNTHeaders</name></name><argument_list>(<argument><expr><name>aFontData</name></expr></argument>, <argument><expr><name>aLength</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="line">// Here ownership of aFontData is passed to the platform,</comment>
                    <comment type="line">// which will delete it when no longer required</comment>
                    <expr_stmt><expr><name>fe</name> = <call><name><name>gfxPlatform</name>::<name>GetPlatform</name></name><argument_list>()</argument_list></call>-&gt;<call><name>MakePlatformFont</name><argument_list>(<argument><expr><name>pe</name></expr></argument>,
                                                                      <argument><expr><name>aFontData</name></expr></argument>,
                                                                      <argument><expr><name>aLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>aFontData</name> = <name>nsnull</name></expr>;</expr_stmt> <comment type="line">// we must NOT free this below!</comment>
                }</block></then> <else>else <block>{
                    <comment type="line">// the data was unusable, so just discard it</comment>
                    <comment type="line">// (error will be reported below, if logging is enabled)</comment>
                    <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"failed to make platform font from download"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></else></if>

        <if>if <condition>(<expr><name>aFontData</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>NS_Free</name><argument_list>(<argument><expr>(<name>void</name>*)<name>aFontData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>aFontData</name> = <name>nsnull</name></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>fe</name></expr>)</condition><then> <block>{
            <comment type="line">// copy OpenType feature/language settings from the proxy to the</comment>
            <comment type="line">// newly-created font entry</comment>
            <expr_stmt><expr><call><name><name>fe</name>-&gt;<name>mFeatureSettings</name>.<name>AppendElements</name></name><argument_list>(<argument><expr><name><name>pe</name>-&gt;<name>mFeatureSettings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>fe</name>-&gt;<name>mLanguageOverride</name></name> = <name><name>pe</name>-&gt;<name>mLanguageOverride</name></name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>gfxMixedFontFamily</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>pe</name>-&gt;<name>mFamily</name></name></expr></argument>)</argument_list></call>-&gt;<call><name>ReplaceFontEntry</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>IncrementGeneration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef>
            <if>if <condition>(<expr><call><name>LOG_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>fontURI</name></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>pe</name>-&gt;<name>mSrcList</name><index>[<expr><name><name>pe</name>-&gt;<name>mSrcIndex</name></name></expr>]</index></name>.<call><name><name>mURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>fontURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr>("userfonts (%p) [src %d] loaded uri: (%s) for (%s) gen: %8.8x\n",
                     <name>this</name>, <name><name>pe</name>-&gt;<name>mSrcIndex</name></name>, <call><name><name>fontURI</name>.<name>get</name></name><argument_list>()</argument_list></call>,
                     <call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><call><name><name>pe</name>-&gt;<name>mFamily</name>-&gt;<name>Name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call>,
                     <call><name>PRUint32</name><argument_list>(<argument><expr><name>mGeneration</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <return>return <expr><name>PR_TRUE</name></expr>;</return>
        }</block></then> <else>else <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef>
            <if>if <condition>(<expr><call><name>LOG_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>fontURI</name></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>pe</name>-&gt;<name>mSrcList</name><index>[<expr><name><name>pe</name>-&gt;<name>mSrcIndex</name></name></expr>]</index></name>.<call><name><name>mURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>fontURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr>("userfonts (%p) [src %d] failed uri: (%s) for (%s) error making platform font\n",
                     <name>this</name>, <name><name>pe</name>-&gt;<name>mSrcIndex</name></name>, <call><name><name>fontURI</name>.<name>get</name></name><argument_list>()</argument_list></call>,
                     <call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><call><name><name>pe</name>-&gt;<name>mFamily</name>-&gt;<name>Name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        }</block></else></if>
    }</block></then> <else>else <block>{
        <comment type="line">// download failed</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef>
        <if>if <condition>(<expr><call><name>LOG_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>fontURI</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>pe</name>-&gt;<name>mSrcList</name><index>[<expr><name><name>pe</name>-&gt;<name>mSrcIndex</name></name></expr>]</index></name>.<call><name><name>mURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>fontURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr>("userfonts (%p) [src %d] failed uri: (%s) for (%s) error %8.8x downloading font data\n",
                 <name>this</name>, <name><name>pe</name>-&gt;<name>mSrcIndex</name></name>, <call><name><name>fontURI</name>.<name>get</name></name><argument_list>()</argument_list></call>,
                 <call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><call><name><name>pe</name>-&gt;<name>mFamily</name>-&gt;<name>Name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call>,
                 <name>aDownloadStatus</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></else></if>

    <if>if <condition>(<expr><name>aFontData</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_Free</name><argument_list>(<argument><expr>(<name>void</name>*)<name>aFontData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">// error occurred, load next src</comment>
    <decl_stmt><decl><type><name>LoadStatus</name></type> <name>status</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>status</name> = <call><name>LoadNext</name><argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Even if loading failed, we need to bump the font-set generation</comment>
    <comment type="line">// and return true in order to trigger reflow, so that fallback</comment>
    <comment type="line">// will be used where the text was "masked" by the pending download</comment>
    <expr_stmt><expr><call><name>IncrementGeneration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>


<function><type><name><name>gfxUserFontSet</name>::<name>LoadStatus</name></name></type>
<name><name>gfxUserFontSet</name>::<name>LoadNext</name></name><parameter_list>(<param><decl><type><name>gfxProxyFontEntry</name> *</type><name>aProxyEntry</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>numSrc</name> <init>= <expr><call><name><name>aProxyEntry</name>-&gt;<name>mSrcList</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name><name>aProxyEntry</name>-&gt;<name>mSrcIndex</name></name> &lt; <name>numSrc</name></expr></argument>, <argument><expr>"already at the end of the src list for user font"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>aProxyEntry</name>-&gt;<name>mLoadingState</name></name> == <name><name>gfxProxyFontEntry</name>::<name>NOT_LOADING</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>aProxyEntry</name>-&gt;<name>mLoadingState</name></name> = <name><name>gfxProxyFontEntry</name>::<name>LOADING_STARTED</name></name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <comment type="line">// we were already loading; move to the next source,</comment>
        <comment type="line">// but don't reset state - if we've already timed out,</comment>
        <comment type="line">// that counts against the new download</comment>
        <expr_stmt><expr><name><name>aProxyEntry</name>-&gt;<name>mSrcIndex</name></name>++</expr>;</expr_stmt>
    }</block></else></if>

    <comment type="line">// load each src entry in turn, until a local face is found or a download begins successfully</comment>
    <while>while <condition>(<expr><name><name>aProxyEntry</name>-&gt;<name>mSrcIndex</name></name> &lt; <name>numSrc</name></expr>)</condition> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>gfxFontFaceSrc</name>&amp;</type> <name>currSrc</name> <init>= <expr><name><name>aProxyEntry</name>-&gt;<name>mSrcList</name><index>[<expr><name><name>aProxyEntry</name>-&gt;<name>mSrcIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// src local ==&gt; lookup and load   </comment>

        <if>if <condition>(<expr><name><name>currSrc</name>.<name>mIsLocal</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>gfxFontEntry</name> *</type><name>fe</name> <init>=
                <expr><call><name><name>gfxPlatform</name>::<name>GetPlatform</name></name><argument_list>()</argument_list></call>-&gt;<call><name>LookupLocalFont</name><argument_list>(<argument><expr><name>aProxyEntry</name></expr></argument>,
                                                            <argument><expr><name><name>currSrc</name>.<name>mLocalName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>fe</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr>("userfonts (%p) [src %d] loaded local: (%s) for (%s) gen: %8.8x\n", 
                     <name>this</name>, <name><name>aProxyEntry</name>-&gt;<name>mSrcIndex</name></name>, 
                     <call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><name><name>currSrc</name>.<name>mLocalName</name></name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call>, 
                     <call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><call><name><name>aProxyEntry</name>-&gt;<name>mFamily</name>-&gt;<name>Name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call>, 
                     <call><name>PRUint32</name><argument_list>(<argument><expr><name>mGeneration</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>fe</name>-&gt;<name>mFeatureSettings</name>.<name>AppendElements</name></name><argument_list>(<argument><expr><name><name>aProxyEntry</name>-&gt;<name>mFeatureSettings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>fe</name>-&gt;<name>mLanguageOverride</name></name> = <name><name>aProxyEntry</name>-&gt;<name>mLanguageOverride</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>gfxMixedFontFamily</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>aProxyEntry</name>-&gt;<name>mFamily</name></name></expr></argument>)</argument_list></call>-&gt;<call><name>ReplaceFontEntry</name><argument_list>(<argument><expr><name>aProxyEntry</name></expr></argument>, <argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>STATUS_LOADED</name></expr>;</return>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr>("userfonts (%p) [src %d] failed local: (%s) for (%s)\n", 
                     <name>this</name>, <name><name>aProxyEntry</name>-&gt;<name>mSrcIndex</name></name>, 
                     <call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><name><name>currSrc</name>.<name>mLocalName</name></name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call>, 
                     <call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><call><name><name>aProxyEntry</name>-&gt;<name>mFamily</name>-&gt;<name>Name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>            
            }</block></else></if>
        }</block></then> 

        <comment type="line">// src url ==&gt; start the load process</comment>
        <else>else <block>{
            <if>if <condition>(<expr><call><name><name>gfxPlatform</name>::<name>GetPlatform</name></name><argument_list>()</argument_list></call>-&gt;<call><name>IsFontFormatSupported</name><argument_list>(<argument><expr><name><name>currSrc</name>.<name>mURI</name></name></expr></argument>, 
                    <argument><expr><name><name>currSrc</name>.<name>mFormatFlags</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>StartLoad</name><argument_list>(<argument><expr><name>aProxyEntry</name></expr></argument>, <argument><expr>&amp;<name>currSrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PRBool</name></type> <name>loadOK</name> <init>= <expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                
                <if>if <condition>(<expr><name>loadOK</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef>
                    <if>if <condition>(<expr><call><name>LOG_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>fontURI</name></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>currSrc</name>.<name>mURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>fontURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr>("userfonts (%p) [src %d] loading uri: (%s) for (%s)\n", 
                             <name>this</name>, <name><name>aProxyEntry</name>-&gt;<name>mSrcIndex</name></name>, <call><name><name>fontURI</name>.<name>get</name></name><argument_list>()</argument_list></call>, 
                             <call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><call><name><name>aProxyEntry</name>-&gt;<name>mFamily</name>-&gt;<name>Name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <return>return <expr><name>STATUS_LOADING</name></expr>;</return>                  
                }</block></then> <else>else <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef>
                    <if>if <condition>(<expr><call><name>LOG_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>fontURI</name></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>currSrc</name>.<name>mURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>fontURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr>("userfonts (%p) [src %d] failed uri: (%s) for (%s) download failed\n", 
                             <name>this</name>, <name><name>aProxyEntry</name>-&gt;<name>mSrcIndex</name></name>, <call><name><name>fontURI</name>.<name>get</name></name><argument_list>()</argument_list></call>, 
                             <call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><call><name><name>aProxyEntry</name>-&gt;<name>mFamily</name>-&gt;<name>Name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                }</block></else></if>
            }</block></then> <else>else <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PR_LOGGING</name></cpp:ifdef>
                <if>if <condition>(<expr><call><name>LOG_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>fontURI</name></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>currSrc</name>.<name>mURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>fontURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr>("userfonts (%p) [src %d] failed uri: (%s) for (%s) format not supported\n", 
                         <name>this</name>, <name><name>aProxyEntry</name>-&gt;<name>mSrcIndex</name></name>, <call><name><name>fontURI</name>.<name>get</name></name><argument_list>()</argument_list></call>, 
                         <call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><call><name><name>aProxyEntry</name>-&gt;<name>mFamily</name>-&gt;<name>Name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            }</block></else></if>
        }</block></else></if>

        <expr_stmt><expr><name><name>aProxyEntry</name>-&gt;<name>mSrcIndex</name></name>++</expr>;</expr_stmt>
    }</block></while>

    <comment type="line">// all src's failed, remove this face</comment>
    <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr>("userfonts (%p) failed all src for (%s)\n", 
               <name>this</name>, <call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><call><name><name>aProxyEntry</name>-&gt;<name>mFamily</name>-&gt;<name>Name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>            

    <decl_stmt><decl><type><name>gfxMixedFontFamily</name> *</type><name>family</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>gfxMixedFontFamily</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>aProxyEntry</name>-&gt;<name>mFamily</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>family</name>-&gt;<name>RemoveFontEntry</name></name><argument_list>(<argument><expr><name>aProxyEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// no more faces?  remove the entire family</comment>
    <if>if <condition>(<expr><call><name><name>family</name>-&gt;<name>mAvailableFonts</name>.<name>Length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr>("userfonts (%p) failed all faces, remove family (%s)\n", 
             <name>this</name>, <call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><call><name><name>family</name>-&gt;<name>Name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        <expr_stmt><expr><call><name>RemoveFamily</name><argument_list>(<argument><expr><call><name><name>family</name>-&gt;<name>Name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>STATUS_END_OF_LIST</name></expr>;</return>
}</block></function>


<function><type><name>void</name></type>
<name><name>gfxUserFontSet</name>::<name>IncrementGeneration</name></name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">// add one, increment again if zero</comment>
    <expr_stmt><expr><call><name>LL_ADD</name><argument_list>(<argument><expr><name>sFontSetGeneration</name></expr></argument>, <argument><expr><name>sFontSetGeneration</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>LL_IS_ZERO</name><argument_list>(<argument><expr><name>sFontSetGeneration</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>LL_ADD</name><argument_list>(<argument><expr><name>sFontSetGeneration</name></expr></argument>, <argument><expr><name>sFontSetGeneration</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name>mGeneration</name> = <name>sFontSetGeneration</name></expr>;</expr_stmt>
}</block></function>


<function><type><name>gfxMixedFontFamily</name>*</type>
<name><name>gfxUserFontSet</name>::<name>GetFamily</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aFamilyName</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
    <function_decl><type><name>nsAutoString</name></type> <name>key</name><parameter_list>(<param><decl><type><name>aFamilyName</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>ToLowerCase</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>mFontFamilies</name>.<name>GetWeak</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>void</name></type> 
<name><name>gfxUserFontSet</name>::<name>RemoveFamily</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aFamilyName</name></decl></param>)</parameter_list>
<block>{
    <function_decl><type><name>nsAutoString</name></type> <name>key</name><parameter_list>(<param><decl><type><name>aFamilyName</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>ToLowerCase</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>mFontFamilies</name>.<name>Remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
