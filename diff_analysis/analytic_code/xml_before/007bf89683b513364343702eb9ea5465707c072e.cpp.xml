<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="007bf89683b513364343702eb9ea5465707c072e.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla browser.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications, Inc.
 * Portions created by the Initial Developer are Copyright (C) 1999
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Adam Lock &lt;adamlock@netscape.com&gt;
 *   Kathleen Brade &lt;brade@netscape.com&gt;
 *   Ryan Jones &lt;sciguyryan@gmail.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nspr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFileStreams.h"</cpp:file></cpp:include>       <comment type="line">// New Necko file streams</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_MAC</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsILocalFileMac.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_OS2</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsILocalFileOS2.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNetUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsComponentManagerUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIComponentRegistrar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIStorageStream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISeekableStream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIHttpChannel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIEncodedChannel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIUploadChannel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsICachingChannel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsEscape.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsUnicharUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIStringEnumerator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCRT.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsSupportsArray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsInt64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentCID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStreamUtils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCExternalHandlerService.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIURL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFileURL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMXMLDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMDocumentTraversal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMTreeWalker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMNode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMComment.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMNamedNodeMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMNodeList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMNSDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIWebProgressListener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIAuthPrompt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrompt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISHEntry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIWebPageDescriptor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFormControl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOM3Node.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMNodeFilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMProcessingInstruction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLBodyElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLTableElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLTableRowElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLTableCellElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLAnchorElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLAreaElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLImageElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLScriptElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLLinkElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLBaseElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLFrameElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLIFrameElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLInputElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLEmbedElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLObjectElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLAppletElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLOptionElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLTextAreaElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMText.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SVG</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMSVGImageElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMSVGScriptElement.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// MOZ_SVG</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIImageLoadingContent.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ftpCore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsITransport.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISocketTransport.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIStringBundle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIProtocolHandler.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsWebBrowserPersist.h"</cpp:file></cpp:include>

<comment type="line">// Buffer file writes in 32kb chunks</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFERED_OUTPUT_SIZE</name></cpp:macro> <cpp:value>(1024 * 32)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_SUCCESS_DONT_FIXUP</name></cpp:macro> <cpp:value>NS_ERROR_GENERATE_SUCCESS(NS_ERROR_MODULE_GENERAL, 1)</cpp:value></cpp:define>

<comment type="line">// Information about a DOM document</comment>
<struct>struct <name>DocData</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>mBaseURI</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocument</name></expr></argument>&gt;</argument_list></name></type> <name>mDocument</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>mFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>mDataPath</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRPackedBool</name></type> <name>mDataPathIsRelative</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsCString</name></type> <name>mRelativePathToData</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsCString</name></type> <name>mCharset</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<comment type="line">// Information about a URI</comment>
<struct>struct <name>URIData</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>PRPackedBool</name></type> <name>mNeedsPersisting</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRPackedBool</name></type> <name>mSaved</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRPackedBool</name></type> <name>mIsSubFrame</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRPackedBool</name></type> <name>mDataPathIsRelative</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRPackedBool</name></type> <name>mNeedsFixup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsString</name></type> <name>mFilename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsString</name></type> <name>mSubFrameExt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>mFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>mDataPath</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsCString</name></type> <name>mRelativePathToData</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsCString</name></type> <name>mCharset</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<comment type="line">// Information about the output stream</comment>
<struct>struct <name>OutputData</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>mFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>mOriginalLocation</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIOutputStream</name></expr></argument>&gt;</argument_list></name></type> <name>mStream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsInt64</name></type> <name>mSelfProgress</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsInt64</name></type> <name>mSelfProgressMax</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRPackedBool</name></type> <name>mCalcFileExt</name></decl>;</decl_stmt>

    <constructor><name>OutputData</name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type><name>aFile</name></decl></param>, <param><decl><type><name>nsIURI</name> *</type><name>aOriginalLocation</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aCalcFileExt</name></decl></param>)</parameter_list> <member_list>:
        <call><name>mFile</name><argument_list>(<argument><expr><name>aFile</name></expr></argument>)</argument_list></call>,
        <call><name>mOriginalLocation</name><argument_list>(<argument><expr><name>aOriginalLocation</name></expr></argument>)</argument_list></call>,
        <call><name>mSelfProgress</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>,
        <call><name>mSelfProgressMax</name><argument_list>(<argument><expr>10000</expr></argument>)</argument_list></call>,
        <call><name>mCalcFileExt</name><argument_list>(<argument><expr><name>aCalcFileExt</name></expr></argument>)</argument_list></call>
    </member_list><block>{
    }</block></constructor>
    <destructor><name>~<name>OutputData</name></name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>mStream</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>mStream</name>-&gt;<name>Close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></destructor>
</public>}</block>;</struct>

<struct>struct <name>UploadData</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>mFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsInt64</name></type> <name>mSelfProgress</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsInt64</name></type> <name>mSelfProgressMax</name></decl>;</decl_stmt>

    <constructor><name>UploadData</name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type><name>aFile</name></decl></param>)</parameter_list> <member_list>:
        <call><name>mFile</name><argument_list>(<argument><expr><name>aFile</name></expr></argument>)</argument_list></call>,
        <call><name>mSelfProgress</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>,
        <call><name>mSelfProgressMax</name><argument_list>(<argument><expr>10000</expr></argument>)</argument_list></call>
    </member_list><block>{
    }</block></constructor>
</public>}</block>;</struct>

<struct>struct <name>CleanupData</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name></type> <name>mFile</name></decl>;</decl_stmt>
    <comment type="line">// Snapshot of what the file actually is at the time of creation so that if</comment>
    <comment type="line">// it transmutes into something else later on it can be ignored. For example,</comment>
    <comment type="line">// catch files that turn into dirs or vice versa.</comment>
    <decl_stmt><decl><type><name>PRPackedBool</name></type> <name>mIsDirectory</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<comment type="line">// Maximum file length constant. The max file name length is</comment>
<comment type="line">// volume / server dependent but it is difficult to obtain</comment>
<comment type="line">// that information. Instead this constant is a reasonable value that</comment>
<comment type="line">// modern systems should able to cope with.</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_MAC</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>const</specifier> <name>PRUint32</name></type> <name>kDefaultMaxFilenameLength</name> <init>= <expr>31</expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>PRUint32</name></type> <name>kDefaultMaxFilenameLength</name> <init>= <expr>64</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// Default flags for persistence</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>PRUint32</name></type> <name>kDefaultPersistFlags</name> <init>= 
    <expr><name><name>nsIWebBrowserPersist</name>::<name>PERSIST_FLAGS_NO_CONVERSION</name></name> |
    <name><name>nsIWebBrowserPersist</name>::<name>PERSIST_FLAGS_REPLACE_EXISTING_FILES</name></name></expr></init></decl>;</decl_stmt>

<comment type="line">// String bundle where error messages come from</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>kWebBrowserPersistStringBundle</name> <init>=
    <expr>"chrome://global/locale/nsWebBrowserPersist.properties"</expr></init></decl>;</decl_stmt>

<constructor><name><name>nsWebBrowserPersist</name>::<name>nsWebBrowserPersist</name></name><parameter_list>()</parameter_list> <member_list>:
    <call><name>mCurrentThingsToPersist</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>,
    <call><name>mFirstAndOnlyUse</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call>,
    <call><name>mCancel</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>,
    <call><name>mJustStartedLoading</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call>,
    <call><name>mCompleted</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>,
    <call><name>mStartSaving</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>,
    <call><name>mReplaceExisting</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call>,
    <call><name>mSerializingOutput</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>,
    <call><name>mPersistFlags</name><argument_list>(<argument><expr><name>kDefaultPersistFlags</name></expr></argument>)</argument_list></call>,
    <call><name>mPersistResult</name><argument_list>(<argument><expr><name>NS_OK</name></expr></argument>)</argument_list></call>,
    <call><name>mWrapColumn</name><argument_list>(<argument><expr>72</expr></argument>)</argument_list></call>,
    <call><name>mEncodingFlags</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>
</member_list><block>{
}</block></constructor>

<destructor><name><name>nsWebBrowserPersist</name>::~<name>nsWebBrowserPersist</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>Cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<comment type="line">//*****************************************************************************</comment>
<comment type="line">// nsWebBrowserPersist::nsISupports</comment>
<comment type="line">//*****************************************************************************</comment>

<macro><name>NS_IMPL_ADDREF</name><argument_list>(<argument>nsWebBrowserPersist</argument>)</argument_list></macro>
<macro><name>NS_IMPL_RELEASE</name><argument_list>(<argument>nsWebBrowserPersist</argument>)</argument_list></macro>

<macro><name>NS_INTERFACE_MAP_BEGIN</name><argument_list>(<argument>nsWebBrowserPersist</argument>)</argument_list></macro>
    <macro><name>NS_INTERFACE_MAP_ENTRY_AMBIGUOUS</name><argument_list>(<argument>nsISupports</argument>, <argument>nsIWebBrowserPersist</argument>)</argument_list></macro>
    <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsIWebBrowserPersist</argument>)</argument_list></macro>
    <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsICancelable</argument>)</argument_list></macro>
    <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsIInterfaceRequestor</argument>)</argument_list></macro>
    <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsISupportsWeakReference</argument>)</argument_list></macro>
    <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsIStreamListener</argument>)</argument_list></macro>
    <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsIRequestObserver</argument>)</argument_list></macro>
    <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsIProgressEventSink</argument>)</argument_list></macro>
<function><type><name>NS_INTERFACE_MAP_END</name>


<comment type="line">//*****************************************************************************</comment>
<comment type="line">// nsWebBrowserPersist::nsIInterfaceRequestor</comment>
<comment type="line">//*****************************************************************************</comment>

<name>NS_IMETHODIMP</name></type> <name><name>nsWebBrowserPersist</name>::<name>GetInterface</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsIID</name> &amp;</type> <name>aIID</name></decl></param>, <param><decl><type><name>void</name> **</type><name>aIFace</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aIFace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr>*<name>aIFace</name> = <name>nsnull</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>QueryInterface</name><argument_list>(<argument><expr><name>aIID</name></expr></argument>, <argument><expr><name>aIFace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>
    
    <if>if <condition>(<expr><name>mProgressListener</name> &amp;&amp; (<call><name><name>aIID</name>.<name>Equals</name></name><argument_list>(<argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsIAuthPrompt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> 
                             || <call><name><name>aIID</name>.<name>Equals</name></name><argument_list>(<argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsIPrompt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name><name>mProgressListener</name>-&gt;<name>QueryInterface</name></name><argument_list>(<argument><expr><name>aIID</name></expr></argument>, <argument><expr><name>aIFace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>*<name>aIFace</name></expr>)</condition><then>
            <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIInterfaceRequestor</name></expr></argument>&gt;</argument_list></name></type> <name>req</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mProgressListener</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>req</name></expr>)</condition><then>
    <block>{
        <return>return <expr><call><name><name>req</name>-&gt;<name>GetInterface</name></name><argument_list>(<argument><expr><name>aIID</name></expr></argument>, <argument><expr><name>aIFace</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>NS_ERROR_NO_INTERFACE</name></expr>;</return>
}</block></function>


<comment type="line">//*****************************************************************************</comment>
<comment type="line">// nsWebBrowserPersist::nsIWebBrowserPersist</comment>
<comment type="line">//*****************************************************************************</comment>

<comment type="block">/* attribute unsigned long persistFlags; */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsWebBrowserPersist</name>::<name>GetPersistFlags</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>aPersistFlags</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aPersistFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>aPersistFlags</name> = <name>mPersistFlags</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsWebBrowserPersist</name>::<name>SetPersistFlags</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aPersistFlags</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>mPersistFlags</name> = <name>aPersistFlags</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mReplaceExisting</name> = (<name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_REPLACE_EXISTING_FILES</name>) ? <name>PR_TRUE</name> : <name>PR_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mSerializingOutput</name> = (<name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_SERIALIZE_OUTPUT</name>) ? <name>PR_TRUE</name> : <name>PR_FALSE</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* readonly attribute unsigned long currentState; */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsWebBrowserPersist</name>::<name>GetCurrentState</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>aCurrentState</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aCurrentState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>mCompleted</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr>*<name>aCurrentState</name> = <name>PERSIST_STATE_FINISHED</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>mFirstAndOnlyUse</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr>*<name>aCurrentState</name> = <name>PERSIST_STATE_SAVING</name></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr>*<name>aCurrentState</name> = <name>PERSIST_STATE_READY</name></expr>;</expr_stmt>
    }</block></else></if></else></if>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* readonly attribute unsigned long result; */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsWebBrowserPersist</name>::<name>GetResult</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type><name>aResult</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>aResult</name> = <name>mPersistResult</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* attribute nsIWebBrowserPersistProgress progressListener; */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsWebBrowserPersist</name>::<name>GetProgressListener</name></name><parameter_list>(
    <param><decl><type><name>nsIWebProgressListener</name> * *</type><name>aProgressListener</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aProgressListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>aProgressListener</name> = <name>mProgressListener</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aProgressListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsWebBrowserPersist</name>::<name>SetProgressListener</name></name><parameter_list>(
    <param><decl><type><name>nsIWebProgressListener</name> *</type> <name>aProgressListener</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>mProgressListener</name> = <name>aProgressListener</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mProgressListener2</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aProgressListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mEventSink</name> = <call><name>do_GetInterface</name><argument_list>(<argument><expr><name>aProgressListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* void saveURI (in nsIURI aURI, in nsISupports aCacheKey, in nsIURI aReferrer,
   in nsIInputStream aPostData, in wstring aExtraHeaders,
   in nsISupports aFile); */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsWebBrowserPersist</name>::<name>SaveURI</name></name><parameter_list>(
    <param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>, <param><decl><type><name>nsISupports</name> *</type><name>aCacheKey</name></decl></param>, <param><decl><type><name>nsIURI</name> *</type><name>aReferrer</name></decl></param>, <param><decl><type><name>nsIInputStream</name> *</type><name>aPostData</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aExtraHeaders</name></decl></param>, <param><decl><type><name>nsISupports</name> *</type><name>aFile</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mFirstAndOnlyUse</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mFirstAndOnlyUse</name> = <name>PR_FALSE</name></expr>;</expr_stmt> <comment type="line">// Stop people from reusing this object!</comment>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>fileAsURI</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>GetValidURIFromObject</name><argument_list>(<argument><expr><name>aFile</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>fileAsURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_INVALID_ARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// SaveURI doesn't like broken uris.</comment>
    <expr_stmt><expr><name>mPersistFlags</name> |= <name>PERSIST_FLAGS_FAIL_ON_BROKEN_LINKS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>SaveURIInternal</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><name>aCacheKey</name></expr></argument>, <argument><expr><name>aReferrer</name></expr></argument>, <argument><expr><name>aPostData</name></expr></argument>, <argument><expr><name>aExtraHeaders</name></expr></argument>, <argument><expr><name>fileAsURI</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> ? <name>rv</name> : <name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* void saveChannel (in nsIChannel aChannel, in nsISupports aFile); */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsWebBrowserPersist</name>::<name>SaveChannel</name></name><parameter_list>(
    <param><decl><type><name>nsIChannel</name> *</type><name>aChannel</name></decl></param>, <param><decl><type><name>nsISupports</name> *</type><name>aFile</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mFirstAndOnlyUse</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mFirstAndOnlyUse</name> = <name>PR_FALSE</name></expr>;</expr_stmt> <comment type="line">// Stop people from reusing this object!</comment>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>fileAsURI</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>GetValidURIFromObject</name><argument_list>(<argument><expr><name>aFile</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>fileAsURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_INVALID_ARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rv</name> = <call><name><name>aChannel</name>-&gt;<name>GetURI</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// SaveURI doesn't like broken uris.</comment>
    <expr_stmt><expr><name>mPersistFlags</name> |= <name>PERSIST_FLAGS_FAIL_ON_BROKEN_LINKS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>SaveChannelInternal</name><argument_list>(<argument><expr><name>aChannel</name></expr></argument>, <argument><expr><name>fileAsURI</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> ? <name>rv</name> : <name>NS_OK</name></expr>;</return>
}</block></function>


<comment type="block">/* void saveDocument (in nsIDOMDocument aDocument, in nsIURI aFileURI,
   in nsIURI aDataPathURI, in string aOutputContentType,
   in unsigned long aEncodingFlags, in unsigned long aWrapColumn); */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsWebBrowserPersist</name>::<name>SaveDocument</name></name><parameter_list>(
    <param><decl><type><name>nsIDOMDocument</name> *</type><name>aDocument</name></decl></param>, <param><decl><type><name>nsISupports</name> *</type><name>aFile</name></decl></param>, <param><decl><type><name>nsISupports</name> *</type><name>aDataPath</name></decl></param>,
    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aOutputContentType</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aEncodingFlags</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aWrapColumn</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mFirstAndOnlyUse</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mFirstAndOnlyUse</name> = <name>PR_FALSE</name></expr>;</expr_stmt> <comment type="line">// Stop people from reusing this object!</comment>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>fileAsURI</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>datapathAsURI</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>rv</name> = <call><name>GetValidURIFromObject</name><argument_list>(<argument><expr><name>aFile</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>fileAsURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_INVALID_ARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>aDataPath</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>GetValidURIFromObject</name><argument_list>(<argument><expr><name>aDataPath</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>datapathAsURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_INVALID_ARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>mWrapColumn</name> = <name>aWrapColumn</name></expr>;</expr_stmt>

    <comment type="line">// Produce nsIDocumentEncoder encoding flags</comment>
    <expr_stmt><expr><name>mEncodingFlags</name> = 0</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>aEncodingFlags</name> &amp; <name>ENCODE_FLAGS_SELECTION_ONLY</name></expr>)</condition><then>
        <expr_stmt><expr><name>mEncodingFlags</name> |= <name><name>nsIDocumentEncoder</name>::<name>OutputSelectionOnly</name></name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>aEncodingFlags</name> &amp; <name>ENCODE_FLAGS_FORMATTED</name></expr>)</condition><then>
        <expr_stmt><expr><name>mEncodingFlags</name> |= <name><name>nsIDocumentEncoder</name>::<name>OutputFormatted</name></name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>aEncodingFlags</name> &amp; <name>ENCODE_FLAGS_RAW</name></expr>)</condition><then>
        <expr_stmt><expr><name>mEncodingFlags</name> |= <name><name>nsIDocumentEncoder</name>::<name>OutputRaw</name></name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>aEncodingFlags</name> &amp; <name>ENCODE_FLAGS_BODY_ONLY</name></expr>)</condition><then>
        <expr_stmt><expr><name>mEncodingFlags</name> |= <name><name>nsIDocumentEncoder</name>::<name>OutputBodyOnly</name></name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>aEncodingFlags</name> &amp; <name>ENCODE_FLAGS_PREFORMATTED</name></expr>)</condition><then>
        <expr_stmt><expr><name>mEncodingFlags</name> |= <name><name>nsIDocumentEncoder</name>::<name>OutputPreformatted</name></name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>aEncodingFlags</name> &amp; <name>ENCODE_FLAGS_WRAP</name></expr>)</condition><then>
        <expr_stmt><expr><name>mEncodingFlags</name> |= <name><name>nsIDocumentEncoder</name>::<name>OutputWrap</name></name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>aEncodingFlags</name> &amp; <name>ENCODE_FLAGS_FORMAT_FLOWED</name></expr>)</condition><then>
        <expr_stmt><expr><name>mEncodingFlags</name> |= <name><name>nsIDocumentEncoder</name>::<name>OutputFormatFlowed</name></name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>aEncodingFlags</name> &amp; <name>ENCODE_FLAGS_ABSOLUTE_LINKS</name></expr>)</condition><then>
        <expr_stmt><expr><name>mEncodingFlags</name> |= <name><name>nsIDocumentEncoder</name>::<name>OutputAbsoluteLinks</name></name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>aEncodingFlags</name> &amp; <name>ENCODE_FLAGS_ENCODE_BASIC_ENTITIES</name></expr>)</condition><then>
        <expr_stmt><expr><name>mEncodingFlags</name> |= <name><name>nsIDocumentEncoder</name>::<name>OutputEncodeBasicEntities</name></name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>aEncodingFlags</name> &amp; <name>ENCODE_FLAGS_ENCODE_LATIN1_ENTITIES</name></expr>)</condition><then>
        <expr_stmt><expr><name>mEncodingFlags</name> |= <name><name>nsIDocumentEncoder</name>::<name>OutputEncodeLatin1Entities</name></name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>aEncodingFlags</name> &amp; <name>ENCODE_FLAGS_ENCODE_HTML_ENTITIES</name></expr>)</condition><then>
        <expr_stmt><expr><name>mEncodingFlags</name> |= <name><name>nsIDocumentEncoder</name>::<name>OutputEncodeHTMLEntities</name></name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>aEncodingFlags</name> &amp; <name>ENCODE_FLAGS_ENCODE_W3C_ENTITIES</name></expr>)</condition><then>
        <expr_stmt><expr><name>mEncodingFlags</name> |= <name><name>nsIDocumentEncoder</name>::<name>OutputEncodeW3CEntities</name></name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>aEncodingFlags</name> &amp; <name>ENCODE_FLAGS_CR_LINEBREAKS</name></expr>)</condition><then>
        <expr_stmt><expr><name>mEncodingFlags</name> |= <name><name>nsIDocumentEncoder</name>::<name>OutputCRLineBreak</name></name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>aEncodingFlags</name> &amp; <name>ENCODE_FLAGS_LF_LINEBREAKS</name></expr>)</condition><then>
        <expr_stmt><expr><name>mEncodingFlags</name> |= <name><name>nsIDocumentEncoder</name>::<name>OutputLFLineBreak</name></name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>aEncodingFlags</name> &amp; <name>ENCODE_FLAGS_NOSCRIPT_CONTENT</name></expr>)</condition><then>
        <expr_stmt><expr><name>mEncodingFlags</name> |= <name><name>nsIDocumentEncoder</name>::<name>OutputNoScriptContent</name></name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>aEncodingFlags</name> &amp; <name>ENCODE_FLAGS_NOFRAMES_CONTENT</name></expr>)</condition><then>
        <expr_stmt><expr><name>mEncodingFlags</name> |= <name><name>nsIDocumentEncoder</name>::<name>OutputNoFramesContent</name></name></expr>;</expr_stmt></then></if>
    
    <if>if <condition>(<expr><name>aOutputContentType</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name><name>mContentType</name>.<name>AssignASCII</name></name><argument_list>(<argument><expr><name>aOutputContentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>rv</name> = <call><name>SaveDocumentInternal</name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>, <argument><expr><name>fileAsURI</name></expr></argument>, <argument><expr><name>datapathAsURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Now save the URIs that have been gathered</comment>

    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; <name>datapathAsURI</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>SaveGatheredURIs</name><argument_list>(<argument><expr><name>fileAsURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>mProgressListener</name></expr>)</condition><then>
    <block>{
        <comment type="line">// tell the listener we're done</comment>
        <expr_stmt><expr><call><name><name>mProgressListener</name>-&gt;<name>OnStateChange</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                                         <argument><expr><name><name>nsIWebProgressListener</name>::<name>STATE_START</name></name> |
                                         <name><name>nsIWebProgressListener</name>::<name>STATE_IS_NETWORK</name></name></expr></argument>,
                                         <argument><expr><name>NS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mProgressListener</name>-&gt;<name>OnStateChange</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                                         <argument><expr><name><name>nsIWebProgressListener</name>::<name>STATE_STOP</name></name> |
                                         <name><name>nsIWebProgressListener</name>::<name>STATE_IS_NETWORK</name></name></expr></argument>,
                                         <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<comment type="block">/* void cancel(nsresult aReason); */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsWebBrowserPersist</name>::<name>Cancel</name></name><parameter_list>(<param><decl><type><name>nsresult</name></type> <name>aReason</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>mCancel</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EndDownload</name><argument_list>(<argument><expr><name>aReason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<comment type="block">/* void cancelSave(); */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsWebBrowserPersist</name>::<name>CancelSave</name></name><parameter_list>()</parameter_list>
<block>{
    <return>return <expr><call><name>Cancel</name><argument_list>(<argument><expr><name>NS_BINDING_ABORTED</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>StartUpload</name></name><parameter_list>(<param><decl><type><name>nsIStorageStream</name> *</type><name>storStream</name></decl></param>, 
    <param><decl><type><name>nsIURI</name> *</type><name>aDestinationURI</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsACString</name> &amp;</type><name>aContentType</name></decl></param>)</parameter_list>
<block>{
     <comment type="line">// setup the upload channel if the destination is not local</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIInputStream</name></expr></argument>&gt;</argument_list></name></type> <name>inputstream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>storStream</name>-&gt;<name>NewInputStream</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>inputstream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>inputstream</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIChannel</name></expr></argument>&gt;</argument_list></name></type> <name>destChannel</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>CreateChannelFromURI</name><argument_list>(<argument><expr><name>aDestinationURI</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>destChannel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIUploadChannel</name></expr></argument>&gt;</argument_list></name></type> <name>uploadChannel</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>destChannel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>uploadChannel</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set the upload stream</comment>
    <comment type="line">// NOTE: ALL data must be available in "inputstream"</comment>
    <expr_stmt><expr><name>rv</name> = <call><name><name>uploadChannel</name>-&gt;<name>SetUploadStream</name></name><argument_list>(<argument><expr><name>inputstream</name></expr></argument>, <argument><expr><name>aContentType</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>destChannel</name>-&gt;<name>AsyncOpen</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// add this to the upload list</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>keyPtr</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>destChannel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>nsISupportsKey</name></type> <name>key</name><parameter_list>(<param><decl><type><name>keyPtr</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name><name>mUploadList</name>.<name>Put</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>new <call><name>UploadData</name><argument_list>(<argument><expr><name>aDestinationURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>SaveGatheredURIs</name></name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type><name>aFileAsURI</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Count how many URIs in the URI map require persisting</comment>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>urisToPersist</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>mURIMap</name>.<name>Count</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name><name>mURIMap</name>.<name>Enumerate</name></name><argument_list>(<argument><expr><name>EnumCountURIsToPersist</name></expr></argument>, <argument><expr>&amp;<name>urisToPersist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>urisToPersist</name> &gt; 0</expr>)</condition><then>
    <block>{
        <comment type="line">// Persist each file in the uri map. The document(s)</comment>
        <comment type="line">// will be saved after the last one of these is saved.</comment>
        <expr_stmt><expr><call><name><name>mURIMap</name>.<name>Enumerate</name></name><argument_list>(<argument><expr><name>EnumPersistURIs</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">// if we don't have anything in mOutputMap (added from above enumeration)</comment>
    <comment type="line">// then we build the doc list (SaveDocuments)</comment>
    <if>if <condition>(<expr><call><name><name>mOutputMap</name>.<name>Count</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
    <block>{
        <comment type="line">// There are no URIs to save, so just save the document(s)</comment>

        <comment type="line">// State start notification</comment>
        <decl_stmt><decl><type><name>PRUint32</name></type> <name>addToStateFlags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>mProgressListener</name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name>mJustStartedLoading</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>addToStateFlags</name> |= <name><name>nsIWebProgressListener</name>::<name>STATE_IS_NETWORK</name></name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>mProgressListener</name>-&gt;<name>OnStateChange</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                <argument><expr><name><name>nsIWebProgressListener</name>::<name>STATE_START</name></name> | <name>addToStateFlags</name></expr></argument>, <argument><expr><name>NS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>rv</name> = <call><name>SaveDocuments</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>EndDownload</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else <if>if <condition>(<expr><name>aFileAsURI</name></expr>)</condition><then>
        <block>{
            <comment type="line">// local files won't trigger OnStopRequest so we call EndDownload here</comment>
            <decl_stmt><decl><type><name>PRBool</name></type> <name>isFile</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>aFileAsURI</name>-&gt;<name>SchemeIs</name></name><argument_list>(<argument><expr>"file"</expr></argument>, <argument><expr>&amp;<name>isFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>isFile</name></expr>)</condition><then>
                <expr_stmt><expr><call><name>EndDownload</name><argument_list>(<argument><expr><name>NS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if></else></if>

        <comment type="line">// State stop notification</comment>
        <if>if <condition>(<expr><name>mProgressListener</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>mProgressListener</name>-&gt;<name>OnStateChange</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                <argument><expr><name><name>nsIWebProgressListener</name>::<name>STATE_STOP</name></name> | <name>addToStateFlags</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<comment type="line">// this method returns true if there is another file to persist and false if not</comment>
<function><type><name>PRBool</name></type>
<name><name>nsWebBrowserPersist</name>::<name>SerializeNextFile</name></name><parameter_list>()</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>mSerializingOutput</name></expr>)</condition><then>
    <block>{
        <return>return <expr><name>PR_FALSE</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>SaveGatheredURIs</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <return>return <expr><name>PR_FALSE</name></expr>;</return>
    }</block></then></if>

    <return>return <expr>(<call><name><name>mURIMap</name>.<name>Count</name></name><argument_list>()</argument_list></call> 
        || <call><name><name>mUploadList</name>.<name>Count</name></name><argument_list>()</argument_list></call>
        || <call><name><name>mDocList</name>.<name>Count</name></name><argument_list>()</argument_list></call>
        || <call><name><name>mOutputMap</name>.<name>Count</name></name><argument_list>()</argument_list></call>)</expr>;</return>
}</block></function>


<comment type="line">//*****************************************************************************</comment>
<comment type="line">// nsWebBrowserPersist::nsIRequestObserver</comment>
<comment type="line">//*****************************************************************************</comment>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsWebBrowserPersist</name>::<name>OnStartRequest</name></name><parameter_list>(
    <param><decl><type><name>nsIRequest</name>*</type> <name>request</name></decl></param>, <param><decl><type><name>nsISupports</name> *</type><name>ctxt</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>mProgressListener</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>PRUint32</name></type> <name>stateFlags</name> <init>= <expr><name><name>nsIWebProgressListener</name>::<name>STATE_START</name></name> |
                              <name><name>nsIWebProgressListener</name>::<name>STATE_IS_REQUEST</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>mJustStartedLoading</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>stateFlags</name> |= <name><name>nsIWebProgressListener</name>::<name>STATE_IS_NETWORK</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>mProgressListener</name>-&gt;<name>OnStateChange</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>stateFlags</name></expr></argument>, <argument><expr><name>NS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>mJustStartedLoading</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIChannel</name></expr></argument>&gt;</argument_list></name></type> <name>channel</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>keyPtr</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>nsISupportsKey</name></type> <name>key</name><parameter_list>(<param><decl><type><name>keyPtr</name></type></decl></param>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>OutputData</name> *</type><name>data</name> <init>= <expr>(<name>OutputData</name> *) <call><name><name>mOutputMap</name>.<name>Get</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// NOTE: This code uses the channel as a hash key so it will not</comment>
    <comment type="line">//       recognize redirected channels because the key is not the same.</comment>
    <comment type="line">//       When that happens we remove and add the data entry to use the</comment>
    <comment type="line">//       new channel as the hash key.</comment>
    <if>if <condition>(<expr>!<name>data</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>UploadData</name> *</type><name>upData</name> <init>= <expr>(<name>UploadData</name> *) <call><name><name>mUploadList</name>.<name>Get</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>upData</name></expr>)</condition><then>
        <block>{
            <comment type="line">// Redirect? Try and fixup the output table</comment>
            <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>FixRedirectedChannelEntry</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Should be able to find the data after fixup unless redirects</comment>
            <comment type="line">// are disabled.</comment>
            <expr_stmt><expr><name>data</name> = (<name>OutputData</name> *) <call><name><name>mOutputMap</name>.<name>Get</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>data</name></expr>)</condition><then>
            <block>{
                <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>data</name> &amp;&amp; <name><name>data</name>-&gt;<name>mFile</name></name></expr>)</condition><then>
    <block>{
        <comment type="line">// If PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION is set in mPersistFlags,</comment>
        <comment type="line">// try to determine whether this channel needs to apply Content-Encoding</comment>
        <comment type="line">// conversions.</comment>
        <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!((<name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION</name>) &amp;&amp;
                      (<name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_NO_CONVERSION</name>))</expr></argument>,
                     <argument><expr>"Conflict in persist flags: both AUTODETECT and NO_CONVERSION set"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SetApplyConversionIfNeeded</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <if>if <condition>(<expr><name><name>data</name>-&gt;<name>mCalcFileExt</name></name> &amp;&amp; !(<name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_DONT_CHANGE_FILENAMES</name>)</expr>)</condition><then>
        <block>{
            <comment type="line">// this is the first point at which the server can tell us the mimetype</comment>
            <expr_stmt><expr><call><name>CalculateAndAppendFileExt</name><argument_list>(<argument><expr><name><name>data</name>-&gt;<name>mFile</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name><name>data</name>-&gt;<name>mOriginalLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// now make filename conformant and unique</comment>
            <expr_stmt><expr><call><name>CalculateUniqueFilename</name><argument_list>(<argument><expr><name><name>data</name>-&gt;<name>mFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// compare uris and bail before we add to output map if they are equal</comment>
        <decl_stmt><decl><type><name>PRBool</name></type> <name>isEqual</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>data</name>-&gt;<name>mFile</name>-&gt;<name>Equals</name></name><argument_list>(<argument><expr><name><name>data</name>-&gt;<name>mOriginalLocation</name></name></expr></argument>, <argument><expr>&amp;<name>isEqual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
            &amp;&amp; <name>isEqual</name></expr>)</condition><then>
        <block>{
            <comment type="line">// remove from output map</comment>
            <expr_stmt><expr>delete <name>data</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mOutputMap</name>.<name>Remove</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// cancel; we don't need to know any more</comment>
            <comment type="line">// stop request will get called</comment>
            <expr_stmt><expr><call><name><name>request</name>-&gt;<name>Cancel</name></name><argument_list>(<argument><expr><name>NS_BINDING_ABORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
 
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsWebBrowserPersist</name>::<name>OnStopRequest</name></name><parameter_list>(
    <param><decl><type><name>nsIRequest</name>*</type> <name>request</name></decl></param>, <param><decl><type><name>nsISupports</name> *</type><name>ctxt</name></decl></param>, <param><decl><type><name>nsresult</name></type> <name>status</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>keyPtr</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>nsISupportsKey</name></type> <name>key</name><parameter_list>(<param><decl><type><name>keyPtr</name></type></decl></param>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>OutputData</name> *</type><name>data</name> <init>= <expr>(<name>OutputData</name> *) <call><name><name>mOutputMap</name>.<name>Get</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>data</name></expr>)</condition><then>
    <block>{
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>mPersistResult</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>NS_FAILED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>SendErrorStatusChange</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name><name>data</name>-&gt;<name>mFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_OS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <comment type="line">// delete 'data';  this will close the stream and let</comment>
        <comment type="line">// us tag the file it created with its source URI</comment>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uriSource</name> <init>= <expr><name><name>data</name>-&gt;<name>mOriginalLocation</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name></type> <name>localFile</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GetLocalFileFromURI</name><argument_list>(<argument><expr><name><name>data</name>-&gt;<name>mFile</name></name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>localFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>delete <name>data</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mOutputMap</name>.<name>Remove</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>localFile</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFileOS2</name></expr></argument>&gt;</argument_list></name></type> <name>localFileOS2</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>localFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>localFileOS2</name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>url</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>uriSource</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>localFileOS2</name>-&gt;<name>SetFileSource</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <comment type="line">// This will close automatically close the output stream</comment>
        <expr_stmt><expr>delete <name>data</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mOutputMap</name>.<name>Remove</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then>
    <else>else
    <block>{
        <comment type="line">// if we didn't find the data in mOutputMap, try mUploadList</comment>
        <decl_stmt><decl><type><name>UploadData</name> *</type><name>upData</name> <init>= <expr>(<name>UploadData</name> *) <call><name><name>mUploadList</name>.<name>Get</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>upData</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr>delete <name>upData</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mUploadList</name>.<name>Remove</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></else></if>

    <comment type="line">// ensure we call SaveDocuments if we:</comment>
    <comment type="line">// 1) aren't canceling</comment>
    <comment type="line">// 2) we haven't triggered the save (which we only want to trigger once)</comment>
    <comment type="line">// 3) we aren't serializing (which will call it inside SerializeNextFile)</comment>
    <if>if <condition>(<expr><call><name><name>mOutputMap</name>.<name>Count</name></name><argument_list>()</argument_list></call> == 0 &amp;&amp; !<name>mCancel</name> &amp;&amp; !<name>mStartSaving</name> &amp;&amp; !<name>mSerializingOutput</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>SaveDocuments</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>PRBool</name></type> <name>completed</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>mOutputMap</name>.<name>Count</name></name><argument_list>()</argument_list></call> == 0 &amp;&amp; <call><name><name>mUploadList</name>.<name>Count</name></name><argument_list>()</argument_list></call> == 0 &amp;&amp; !<name>mCancel</name></expr>)</condition><then>
    <block>{
        <comment type="line">// if no documents left in mDocList, --&gt; done</comment>
        <comment type="line">// if we have no files left to serialize and no error result, --&gt; done</comment>
        <if>if <condition>(<expr><call><name><name>mDocList</name>.<name>Count</name></name><argument_list>()</argument_list></call> == 0
            || (!<call><name>SerializeNextFile</name><argument_list>()</argument_list></call> &amp;&amp; <call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>mPersistResult</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>completed</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>completed</name></expr>)</condition><then>
    <block>{
        <comment type="line">// we're all done, do our cleanup</comment>
        <expr_stmt><expr><call><name>EndDownload</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>mProgressListener</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>PRUint32</name></type> <name>stateFlags</name> <init>= <expr><name><name>nsIWebProgressListener</name>::<name>STATE_STOP</name></name> |
                              <name><name>nsIWebProgressListener</name>::<name>STATE_IS_REQUEST</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>completed</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>stateFlags</name> |= <name><name>nsIWebProgressListener</name>::<name>STATE_IS_NETWORK</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>mProgressListener</name>-&gt;<name>OnStateChange</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>stateFlags</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>completed</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>mProgressListener</name> = <name>nsnull</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mProgressListener2</name> = <name>nsnull</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mEventSink</name> = <name>nsnull</name></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">//*****************************************************************************</comment>
<comment type="line">// nsWebBrowserPersist::nsIStreamListener</comment>
<comment type="line">//*****************************************************************************</comment>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsWebBrowserPersist</name>::<name>OnDataAvailable</name></name><parameter_list>(
    <param><decl><type><name>nsIRequest</name>*</type> <name>request</name></decl></param>, <param><decl><type><name>nsISupports</name> *</type><name>aContext</name></decl></param>, <param><decl><type><name>nsIInputStream</name> *</type><name>aIStream</name></decl></param>,
    <param><decl><type><name>PRUint32</name></type> <name>aOffset</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLength</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PRBool</name></type> <name>cancel</name> <init>= <expr><name>mCancel</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>cancel</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PRUint32</name></type> <name>bytesRemaining</name> <init>= <expr><name>aLength</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIChannel</name></expr></argument>&gt;</argument_list></name></type> <name>channel</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>keyPtr</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <function_decl><type><name>nsISupportsKey</name></type> <name>key</name><parameter_list>(<param><decl><type><name>keyPtr</name></type></decl></param>)</parameter_list>;</function_decl>
        <decl_stmt><decl><type><name>OutputData</name> *</type><name>data</name> <init>= <expr>(<name>OutputData</name> *) <call><name><name>mOutputMap</name>.<name>Get</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>data</name></expr>)</condition><then> <block>{
            <comment type="line">// might be uploadData; consume necko's buffer and bail...</comment>
            <decl_stmt><decl><type><name>PRUint32</name></type> <name>n</name></decl>;</decl_stmt>
            <return>return <expr><call><name><name>aIStream</name>-&gt;<name>ReadSegments</name></name><argument_list>(<argument><expr><name>NS_DiscardSegment</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aLength</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>PRBool</name></type> <name>readError</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// Make the output stream</comment>
        <if>if <condition>(<expr>!<name><name>data</name>-&gt;<name>mStream</name></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>rv</name> = <call><name>MakeOutputStream</name><argument_list>(<argument><expr><name><name>data</name>-&gt;<name>mFile</name></name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name><name>data</name>-&gt;<name>mStream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>readError</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cancel</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <comment type="line">// Read data from the input and write to the output</comment>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>8192</expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PRUint32</name></type> <name>bytesRead</name></decl>;</decl_stmt>
        <while>while <condition>(<expr>!<name>cancel</name> &amp;&amp; <name>bytesRemaining</name></expr>)</condition>
        <block>{
            <expr_stmt><expr><name>readError</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>rv</name> = <call><name><name>aIStream</name>-&gt;<name>Read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>PR_MIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>bytesRemaining</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>bytesRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>readError</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
                <comment type="line">// Write out the data until something goes wrong, or, it is</comment>
                <comment type="line">// all written.  We loop because for some errors (e.g., disk</comment>
                <comment type="line">// full), we get NS_OK with some bytes written, then an error.</comment>
                <comment type="line">// So, we want to write again in that case to get the actual</comment>
                <comment type="line">// error code.</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bufPtr</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt> <comment type="line">// Where to write from.</comment>
                <while>while <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; <name>bytesRead</name></expr>)</condition>
                <block>{
                    <decl_stmt><decl><type><name>PRUint32</name></type> <name>bytesWritten</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>rv</name> = <call><name><name>data</name>-&gt;<name>mStream</name>-&gt;<name>Write</name></name><argument_list>(<argument><expr><name>bufPtr</name></expr></argument>, <argument><expr><name>bytesRead</name></expr></argument>, <argument><expr>&amp;<name>bytesWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>bytesRead</name> -= <name>bytesWritten</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>bufPtr</name> += <name>bytesWritten</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>bytesRemaining</name> -= <name>bytesWritten</name></expr>;</expr_stmt>
                        <comment type="line">// Force an error if (for some reason) we get NS_OK but</comment>
                        <comment type="line">// no bytes written.</comment>
                        <if>if <condition>(<expr>!<name>bytesWritten</name></expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>cancel</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then>
                    <else>else
                    <block>{
                        <comment type="line">// Disaster - can't write out the bytes - disk full / permission?</comment>
                        <expr_stmt><expr><name>cancel</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></while>
            }</block></then>
            <else>else
            <block>{
                <comment type="line">// Disaster - can't read the bytes - broken link / file error?</comment>
                <expr_stmt><expr><name>cancel</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>

        <decl_stmt><decl><type><name>PRInt32</name></type> <name>channelContentLength</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>cancel</name> &amp;&amp;
            <call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>channel</name>-&gt;<name>GetContentLength</name></name><argument_list>(<argument><expr>&amp;<name>channelContentLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <comment type="line">// if we get -1 at this point, we didn't get content-length header</comment>
            <comment type="line">// assume that we got all of the data and push what we have; </comment>
            <comment type="line">// that's the best we can do now</comment>
            <if>if <condition>(<expr>(-1 == <name>channelContentLength</name>) ||
                ((<name>channelContentLength</name> - (<name>aOffset</name> + <name>aLength</name>)) == 0)</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>NS_WARN_IF_FALSE</name><argument_list>(<argument><expr><name>channelContentLength</name> != -1</expr></argument>,
                    <argument><expr>"nsWebBrowserPersist::OnDataAvailable() no content length "
                    "header, pushing what we have"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// we're done with this pass; see if we need to do upload</comment>
                <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>contentType</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>channel</name>-&gt;<name>GetContentType</name></name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// if we don't have the right type of output stream then it's a local file</comment>
                <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIStorageStream</name></expr></argument>&gt;</argument_list></name></type> <name>storStream</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name><name>data</name>-&gt;<name>mStream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>storStream</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>data</name>-&gt;<name>mStream</name>-&gt;<name>Close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>data</name>-&gt;<name>mStream</name></name> = <name>nsnull</name></expr>;</expr_stmt> <comment type="line">// null out stream so we don't close it later</comment>
                    <expr_stmt><expr><name>rv</name> = <call><name>StartUpload</name><argument_list>(<argument><expr><name>storStream</name></expr></argument>, <argument><expr><name><name>data</name>-&gt;<name>mFile</name></name></expr></argument>, <argument><expr><name>contentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>readError</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>cancel</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>

        <comment type="line">// Notify listener if an error occurred.</comment>
        <if>if <condition>(<expr><name>cancel</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>SendErrorStatusChange</name><argument_list>(<argument><expr><name>readError</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>,
                <argument><expr><name>readError</name> ? <name>request</name> : <name>nsnull</name></expr></argument>, <argument><expr><name><name>data</name>-&gt;<name>mFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <comment type="line">// Cancel reading?</comment>
    <if>if <condition>(<expr><name>cancel</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>EndDownload</name><argument_list>(<argument><expr><name>NS_BINDING_ABORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<comment type="line">//*****************************************************************************</comment>
<comment type="line">// nsWebBrowserPersist::nsIProgressEventSink</comment>
<comment type="line">//*****************************************************************************</comment>

<comment type="block">/* void onProgress (in nsIRequest request, in nsISupports ctxt,
    in unsigned long long aProgress, in unsigned long long aProgressMax); */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsWebBrowserPersist</name>::<name>OnProgress</name></name><parameter_list>(
    <param><decl><type><name>nsIRequest</name> *</type><name>request</name></decl></param>, <param><decl><type><name>nsISupports</name> *</type><name>ctxt</name></decl></param>, <param><decl><type><name>PRUint64</name></type> <name>aProgress</name></decl></param>,
    <param><decl><type><name>PRUint64</name></type> <name>aProgressMax</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>mProgressListener</name></expr>)</condition><then>
    <block>{
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// Store the progress of this request</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>keyPtr</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>nsISupportsKey</name></type> <name>key</name><parameter_list>(<param><decl><type><name>keyPtr</name></type></decl></param>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>OutputData</name> *</type><name>data</name> <init>= <expr>(<name>OutputData</name> *) <call><name><name>mOutputMap</name>.<name>Get</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>data</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>data</name>-&gt;<name>mSelfProgress</name></name> = <call><name>PRInt64</name><argument_list>(<argument><expr><name>aProgress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name>-&gt;<name>mSelfProgressMax</name></name> = <call><name>PRInt64</name><argument_list>(<argument><expr><name>aProgressMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <decl_stmt><decl><type><name>UploadData</name> *</type><name>upData</name> <init>= <expr>(<name>UploadData</name> *) <call><name><name>mUploadList</name>.<name>Get</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>upData</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>upData</name>-&gt;<name>mSelfProgress</name></name> = <call><name>PRInt64</name><argument_list>(<argument><expr><name>aProgress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>upData</name>-&gt;<name>mSelfProgressMax</name></name> = <call><name>PRInt64</name><argument_list>(<argument><expr><name>aProgressMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></else></if>

    <comment type="line">// Notify listener of total progress</comment>
    <expr_stmt><expr><call><name>CalcTotalProgress</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>mProgressListener2</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name><name>mProgressListener2</name>-&gt;<name>OnProgressChange64</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>aProgress</name></expr></argument>,
            <argument><expr><name>aProgressMax</name></expr></argument>, <argument><expr><name>mTotalCurrentProgress</name></expr></argument>, <argument><expr><name>mTotalMaxProgress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
      <comment type="line">// have to truncate 64-bit to 32bit</comment>
      <expr_stmt><expr><call><name><name>mProgressListener</name>-&gt;<name>OnProgressChange</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><call><name>nsUint64</name><argument_list>(<argument><expr><name>aProgress</name></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><call><name>nsUint64</name><argument_list>(<argument><expr><name>aProgressMax</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mTotalCurrentProgress</name></expr></argument>, <argument><expr><name>mTotalMaxProgress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="line">// If our progress listener implements nsIProgressEventSink,</comment>
    <comment type="line">// forward the notification</comment>
    <if>if <condition>(<expr><name>mEventSink</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name><name>mEventSink</name>-&gt;<name>OnProgress</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>aProgress</name></expr></argument>, <argument><expr><name>aProgressMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* void onStatus (in nsIRequest request, in nsISupports ctxt,
    in nsresult status, in wstring statusArg); */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsWebBrowserPersist</name>::<name>OnStatus</name></name><parameter_list>(
    <param><decl><type><name>nsIRequest</name> *</type><name>request</name></decl></param>, <param><decl><type><name>nsISupports</name> *</type><name>ctxt</name></decl></param>, <param><decl><type><name>nsresult</name></type> <name>status</name></decl></param>,
    <param><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>statusArg</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>mProgressListener</name></expr>)</condition><then>
    <block>{
        <comment type="line">// We need to filter out non-error error codes.</comment>
        <comment type="line">// Is the only NS_SUCCEEDED value NS_OK?</comment>
        <switch>switch <condition>( <expr><name>status</name></expr> )</condition>
        <block>{
        <case>case <expr><name>NS_NET_STATUS_RESOLVING_HOST</name></expr>:
        </case><case>case <expr><name>NS_NET_STATUS_BEGIN_FTP_TRANSACTION</name></expr>:
        </case><case>case <expr><name>NS_NET_STATUS_END_FTP_TRANSACTION</name></expr>:
        </case><case>case <expr><name>NS_NET_STATUS_CONNECTING_TO</name></expr>:
        </case><case>case <expr><name>NS_NET_STATUS_CONNECTED_TO</name></expr>:
        </case><case>case <expr><name>NS_NET_STATUS_SENDING_TO</name></expr>:
        </case><case>case <expr><name>NS_NET_STATUS_RECEIVING_FROM</name></expr>:
        </case><case>case <expr><name>NS_NET_STATUS_WAITING_FOR</name></expr>:
        </case><case>case <expr><name><name>nsITransport</name>::<name>STATUS_READING</name></name></expr>:
        </case><case>case <expr><name><name>nsITransport</name>::<name>STATUS_WRITING</name></name></expr>:
            <break>break;</break>

        </case><default>default:
            <comment type="line">// Pass other notifications (for legitimate errors) along.</comment>
            <expr_stmt><expr><call><name><name>mProgressListener</name>-&gt;<name>OnStatusChange</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>statusArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </default>}</block></switch>

    }</block></then></if>

    <comment type="line">// If our progress listener implements nsIProgressEventSink,</comment>
    <comment type="line">// forward the notification</comment>
    <if>if <condition>(<expr><name>mEventSink</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name><name>mEventSink</name>-&gt;<name>OnStatus</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>statusArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<comment type="line">//*****************************************************************************</comment>
<comment type="line">// nsWebBrowserPersist private methods</comment>
<comment type="line">//*****************************************************************************</comment>

<comment type="line">// Convert error info into proper message text and send OnStatusChange notification</comment>
<comment type="line">// to the web progress listener.</comment>
<function><type><name>nsresult</name></type> <name><name>nsWebBrowserPersist</name>::<name>SendErrorStatusChange</name></name><parameter_list>( 
    <param><decl><type><name>PRBool</name></type> <name>aIsReadError</name></decl></param>, <param><decl><type><name>nsresult</name></type> <name>aResult</name></decl></param>, <param><decl><type><name>nsIRequest</name> *</type><name>aRequest</name></decl></param>, <param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name>mProgressListener</name></expr>)</condition><then>
    <block>{
        <comment type="line">// Do nothing</comment>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// Get the file path or spec from the supplied URI</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name></type> <name>file</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetLocalFileFromURI</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>path</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>file</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name><name>file</name>-&gt;<name>GetPath</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>fileurl</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>aURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>fileurl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>AppendUTF8toUTF16</name><argument_list>(<argument><expr><name>fileurl</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>msgId</name></decl>;</decl_stmt>
    <switch>switch<condition>(<expr><name>aResult</name></expr>)</condition>
    <block>{
    <case>case <expr><name>NS_ERROR_FILE_NAME_TOO_LONG</name></expr>:
        <comment type="line">// File name too long.</comment>
        <expr_stmt><expr><call><name><name>msgId</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"fileNameTooLongError"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </case><case>case <expr><name>NS_ERROR_FILE_ALREADY_EXISTS</name></expr>:
        <comment type="line">// File exists with same name as directory.</comment>
        <expr_stmt><expr><call><name><name>msgId</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"fileAlreadyExistsError"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </case><case>case <expr><name>NS_ERROR_FILE_DISK_FULL</name></expr>:
    </case><case>case <expr><name>NS_ERROR_FILE_NO_DEVICE_SPACE</name></expr>:
        <comment type="line">// Out of space on target volume.</comment>
        <expr_stmt><expr><call><name><name>msgId</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"diskFull"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

    </case><case>case <expr><name>NS_ERROR_FILE_READ_ONLY</name></expr>:
        <comment type="line">// Attempt to write to read/only file.</comment>
        <expr_stmt><expr><call><name><name>msgId</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"readOnly"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

    </case><case>case <expr><name>NS_ERROR_FILE_ACCESS_DENIED</name></expr>:
        <comment type="line">// Attempt to write without sufficient permissions.</comment>
        <expr_stmt><expr><call><name><name>msgId</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"accessError"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

    </case><default>default:
        <comment type="line">// Generic read/write error message.</comment>
        <if>if <condition>(<expr><name>aIsReadError</name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>msgId</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"readError"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call><name><name>msgId</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"writeError"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        <break>break;</break>
    </default>}</block></switch>
    <comment type="line">// Get properties file bundle and extract status string.</comment>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIStringBundleService</name></expr></argument>&gt;</argument_list></name></type> <name>s</name> <init>= <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_STRINGBUNDLE_CONTRACTID</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; <name>s</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIStringBundle</name></expr></argument>&gt;</argument_list></name></type> <name>bundle</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>s</name>-&gt;<name>CreateBundle</name></name><argument_list>(<argument><expr><name>kWebBrowserPersistStringBundle</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; <name>bundle</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>nsXPIDLString</name></type> <name>msgText</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name><name>strings</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>strings</name><index>[<expr>0</expr>]</index></name> = <call><name><name>path</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>bundle</name>-&gt;<name>FormatStringFromName</name></name><argument_list>(<argument><expr><call><name><name>msgId</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>strings</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>msgText</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>mProgressListener</name>-&gt;<name>OnStatusChange</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aRequest</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>, <argument><expr><name>msgText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type> <name><name>nsWebBrowserPersist</name>::<name>GetValidURIFromObject</name></name><parameter_list>(<param><decl><type><name>nsISupports</name> *</type><name>aObject</name></decl></param>, <param><decl><type><name>nsIURI</name> **</type><name>aURI</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name></type> <name>objAsFile</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>objAsFile</name></expr>)</condition><then>
    <block>{
        <return>return <expr><call><name>NS_NewFileURI</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><name>objAsFile</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>objAsURI</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>objAsURI</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr>*<name>aURI</name> = <name>objAsURI</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type> <name><name>nsWebBrowserPersist</name>::<name>GetLocalFileFromURI</name></name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>, <param><decl><type><name>nsILocalFile</name> **</type><name>aLocalFile</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFileURL</name></expr></argument>&gt;</argument_list></name></type> <name>fileURL</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name></type> <name>file</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>fileURL</name>-&gt;<name>GetFile</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>rv</name> = <call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>aLocalFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type> <name><name>nsWebBrowserPersist</name>::<name>AppendPathToURI</name></name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type> <name>aPath</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>newPath</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>aURI</name>-&gt;<name>GetPath</name></name><argument_list>(<argument><expr><name>newPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Append a forward slash if necessary</comment>
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>len</name> <init>= <expr><call><name><name>newPath</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>len</name> &gt; 0 &amp;&amp; <call><name><name>newPath</name>.<name>CharAt</name></name><argument_list>(<argument><expr><name>len</name> - 1</expr></argument>)</argument_list></call> != '/'</expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name><name>newPath</name>.<name>Append</name></name><argument_list>(<argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">// Store the path back on the URI</comment>
    <expr_stmt><expr><call><name>AppendUTF16toUTF8</name><argument_list>(<argument><expr><name>aPath</name></expr></argument>, <argument><expr><name>newPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aURI</name>-&gt;<name>SetPath</name></name><argument_list>(<argument><expr><name>newPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type> <name><name>nsWebBrowserPersist</name>::<name>SaveURIInternal</name></name><parameter_list>(
    <param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>, <param><decl><type><name>nsISupports</name> *</type><name>aCacheKey</name></decl></param>, <param><decl><type><name>nsIURI</name> *</type><name>aReferrer</name></decl></param>,
    <param><decl><type><name>nsIInputStream</name> *</type><name>aPostData</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aExtraHeaders</name></decl></param>,
    <param><decl><type><name>nsIURI</name> *</type><name>aFile</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aCalcFileExt</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>mURI</name> = <name>aURI</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsLoadFlags</name></type> <name>loadFlags</name> <init>= <expr><name><name>nsIRequest</name>::<name>LOAD_NORMAL</name></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_BYPASS_CACHE</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>loadFlags</name> |= <name><name>nsIRequest</name>::<name>LOAD_BYPASS_CACHE</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_FROM_CACHE</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>loadFlags</name> |= <name><name>nsIRequest</name>::<name>LOAD_FROM_CACHE</name></name></expr>;</expr_stmt>
    }</block></then></if></else></if>

    <comment type="line">// Extract the cache key</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>cacheKey</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>aCacheKey</name></expr>)</condition><then>
    <block>{
        <comment type="line">// Test if the cache key is actually a web page descriptor (docshell)</comment>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIWebPageDescriptor</name></expr></argument>&gt;</argument_list></name></type> <name>webPageDescriptor</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aCacheKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>webPageDescriptor</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>currentDescriptor</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>webPageDescriptor</name>-&gt;<name>GetCurrentDescriptor</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>currentDescriptor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>currentDescriptor</name></expr>)</condition><then>
            <block>{
                <comment type="line">// Descriptor is actually a session history entry</comment>
                <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISHEntry</name></expr></argument>&gt;</argument_list></name></type> <name>shEntry</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>currentDescriptor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>shEntry</name></expr></argument>, <argument><expr>"The descriptor is meant to be a session history entry"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>shEntry</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>shEntry</name>-&gt;<name>GetCacheKey</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>cacheKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then>
        <else>else
        <block>{
            <comment type="line">// Assume a plain cache key</comment>
            <expr_stmt><expr><name>cacheKey</name> = <name>aCacheKey</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>

    <comment type="line">// Open a channel to the URI</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIChannel</name></expr></argument>&gt;</argument_list></name></type> <name>inputChannel</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>NS_NewChannel</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>inputChannel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aURI</name></expr></argument>,
            <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIInterfaceRequestor</name> *</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>loadFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> || <name>inputChannel</name> == <name>nsnull</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>EndDownload</name><argument_list>(<argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></then></if>
    
    <comment type="line">// Disable content conversion</comment>
    <if>if <condition>(<expr><name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_NO_CONVERSION</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIEncodedChannel</name></expr></argument>&gt;</argument_list></name></type> <name>encodedChannel</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>inputChannel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>encodedChannel</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>encodedChannel</name>-&gt;<name>SetApplyConversion</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <comment type="line">// Set the referrer, post data and headers if any</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIHttpChannel</name></expr></argument>&gt;</argument_list></name></type> <name>httpChannel</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>inputChannel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>httpChannel</name></expr>)</condition><then>
    <block>{
        <comment type="line">// Referrer</comment>
        <if>if <condition>(<expr><name>aReferrer</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>httpChannel</name>-&gt;<name>SetReferrer</name></name><argument_list>(<argument><expr><name>aReferrer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// Post data</comment>
        <if>if <condition>(<expr><name>aPostData</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISeekableStream</name></expr></argument>&gt;</argument_list></name></type> <name>stream</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aPostData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>stream</name></expr>)</condition><then>
            <block>{
                <comment type="line">// Rewind the postdata stream</comment>
                <expr_stmt><expr><call><name><name>stream</name>-&gt;<name>Seek</name></name><argument_list>(<argument><expr><name><name>nsISeekableStream</name>::<name>NS_SEEK_SET</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIUploadChannel</name></expr></argument>&gt;</argument_list></name></type> <name>uploadChannel</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>httpChannel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>uploadChannel</name></expr></argument>, <argument><expr>"http must support nsIUploadChannel"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// Attach the postdata to the http channel</comment>
                <expr_stmt><expr><call><name><name>uploadChannel</name>-&gt;<name>SetUploadStream</name></name><argument_list>(<argument><expr><name>aPostData</name></expr></argument>, <argument><expr><call><name>EmptyCString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <comment type="line">// Cache key</comment>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsICachingChannel</name></expr></argument>&gt;</argument_list></name></type> <name>cacheChannel</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>httpChannel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cacheChannel</name> &amp;&amp; <name>cacheKey</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>cacheChannel</name>-&gt;<name>SetCacheKey</name></name><argument_list>(<argument><expr><name>cacheKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// Headers</comment>
        <if>if <condition>(<expr><name>aExtraHeaders</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>oneHeader</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>headerName</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>headerValue</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PRInt32</name></type> <name>crlf</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PRInt32</name></type> <name>colon</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>kWhitespace</name> <init>= <expr>"\b\t\r\n "</expr></init></decl>;</decl_stmt>
            <function_decl><type><name>nsCAutoString</name></type> <name>extraHeaders</name><parameter_list>(<param><decl><type><name>aExtraHeaders</name></type></decl></param>)</parameter_list>;</function_decl>
            <while>while <condition>(<expr><name>PR_TRUE</name></expr>)</condition>
            <block>{
                <expr_stmt><expr><name>crlf</name> = <call><name><name>extraHeaders</name>.<name>Find</name></name><argument_list>(<argument><expr>"\r\n"</expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>crlf</name> == -1</expr>)</condition><then>
                    <break>break;</break></then></if>
                <expr_stmt><expr><call><name><name>extraHeaders</name>.<name>Mid</name></name><argument_list>(<argument><expr><name>oneHeader</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>crlf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>extraHeaders</name>.<name>Cut</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>crlf</name> + 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>colon</name> = <call><name><name>oneHeader</name>.<name>Find</name></name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>colon</name> == -1</expr>)</condition><then>
                    <break>break;</break></then></if> <comment type="line">// Should have a colon</comment>
                <expr_stmt><expr><call><name><name>oneHeader</name>.<name>Left</name></name><argument_list>(<argument><expr><name>headerName</name></expr></argument>, <argument><expr><name>colon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>colon</name>++</expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>oneHeader</name>.<name>Mid</name></name><argument_list>(<argument><expr><name>headerValue</name></expr></argument>, <argument><expr><name>colon</name></expr></argument>, <argument><expr><call><name><name>oneHeader</name>.<name>Length</name></name><argument_list>()</argument_list></call> - <name>colon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>headerName</name>.<name>Trim</name></name><argument_list>(<argument><expr><name>kWhitespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>headerValue</name>.<name>Trim</name></name><argument_list>(<argument><expr><name>kWhitespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// Add the header (merging if required)</comment>
                <expr_stmt><expr><name>rv</name> = <call><name><name>httpChannel</name>-&gt;<name>SetRequestHeader</name></name><argument_list>(<argument><expr><name>headerName</name></expr></argument>, <argument><expr><name>headerValue</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name>EndDownload</name><argument_list>(<argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
                }</block></then></if>
            }</block></while>
        }</block></then></if>
    }</block></then></if>
    <return>return <expr><call><name>SaveChannelInternal</name><argument_list>(<argument><expr><name>inputChannel</name></expr></argument>, <argument><expr><name>aFile</name></expr></argument>, <argument><expr><name>aCalcFileExt</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type> <name><name>nsWebBrowserPersist</name>::<name>SaveChannelInternal</name></name><parameter_list>(
    <param><decl><type><name>nsIChannel</name> *</type><name>aChannel</name></decl></param>, <param><decl><type><name>nsIURI</name> *</type><name>aFile</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aCalcFileExt</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Read from the input channel</comment>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>aChannel</name>-&gt;<name>AsyncOpen</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>rv</name> == <name>NS_ERROR_NO_CONTENT</name></expr>)</condition><then>
    <block>{
        <comment type="line">// Assume this is a protocol such as mailto: which does not feed out</comment>
        <comment type="line">// data and just ignore it.</comment>
        <return>return <expr><name>NS_SUCCESS_DONT_FIXUP</name></expr>;</return>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <comment type="line">// Opening failed, but do we care?</comment>
        <if>if <condition>(<expr><name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_FAIL_ON_BROKEN_LINKS</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>SendErrorStatusChange</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>aChannel</name></expr></argument>, <argument><expr><name>aFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>EndDownload</name><argument_list>(<argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>NS_SUCCESS_DONT_FIXUP</name></expr>;</return>
    }</block></then>
    <else>else
    <block>{
        <comment type="line">// Add the output transport to the output map with the channel as the key</comment>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>keyPtr</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aChannel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <function_decl><type><name>nsISupportsKey</name></type> <name>key</name><parameter_list>(<param><decl><type><name>keyPtr</name></type></decl></param>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name><name>mOutputMap</name>.<name>Put</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>new <call><name>OutputData</name><argument_list>(<argument><expr><name>aFile</name></expr></argument>, <argument><expr><name>mURI</name></expr></argument>, <argument><expr><name>aCalcFileExt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>GetExtensionForContentType</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>aContentType</name></decl></param>, <param><decl><type><name>PRUnichar</name> **</type><name>aExt</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aContentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aExt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr>*<name>aExt</name> = <name>nsnull</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>mMIMEService</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>mMIMEService</name> = <call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_MIMESERVICE_CONTRACTID</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mMIMEService</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIMIMEInfo</name></expr></argument>&gt;</argument_list></name></type> <name>mimeInfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>contentType</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>contentType</name>.<name>AssignWithConversion</name></name><argument_list>(<argument><expr><name>aContentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>ext</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>mMIMEService</name>-&gt;<name>GetPrimaryExtension</name></name><argument_list>(<argument><expr><name>contentType</name></expr></argument>, <argument><expr><call><name>EmptyCString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <expr_stmt><expr>*<name>aExt</name> = <call><name>UTF8ToNewUnicode</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr>*<name>aExt</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>GetDocumentExtension</name></name><parameter_list>(<param><decl><type><name>nsIDOMDocument</name> *</type><name>aDocument</name></decl></param>, <param><decl><type><name>PRUnichar</name> **</type><name>aExt</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aExt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsXPIDLString</name></type> <name>contentType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetDocEncoderContentType</name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>GetExtensionForContentType</name><argument_list>(<argument><expr><call><name><name>contentType</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>aExt</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>GetDocEncoderContentType</name></name><parameter_list>(<param><decl><type><name>nsIDOMDocument</name> *</type><name>aDocument</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>aContentType</name></decl></param>, <param><decl><type><name>PRUnichar</name> **</type><name>aRealContentType</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aRealContentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr>*<name>aRealContentType</name> = <name>nsnull</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>defaultContentType</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"text/html"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// Get the desired content type for the document, either by using the one</comment>
    <comment type="line">// supplied or from the document itself.</comment>

    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>contentType</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>aContentType</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name><name>contentType</name>.<name>Assign</name></name><argument_list>(<argument><expr><name>aContentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <comment type="line">// Get the content type from the document</comment>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNSDocument</name></expr></argument>&gt;</argument_list></name></type> <name>nsDoc</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>nsDoc</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>nsAutoString</name></type> <name>type</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>nsDoc</name>-&gt;<name>GetContentType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>type</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>contentType</name>.<name>Assign</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></else></if>

    <comment type="line">// Check that an encoder actually exists for the desired output type. The</comment>
    <comment type="line">// following content types will usually yield an encoder.</comment>
    <comment type="line">//</comment>
    <comment type="line">//   text/xml</comment>
    <comment type="line">//   application/xml</comment>
    <comment type="line">//   application/xhtml+xml</comment>
    <comment type="line">//   image/svg+xml</comment>
    <comment type="line">//   text/html</comment>
    <comment type="line">//   text/plain</comment>

    <if>if <condition>(<expr>!<call><name><name>contentType</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call> &amp;&amp;
        !<call><name><name>contentType</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>defaultContentType</name></expr></argument>, <argument><expr><call><name>nsCaseInsensitiveStringComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <comment type="line">// Check if there is an encoder for the desired content type</comment>
        <function_decl><type><name>nsCAutoString</name></type> <name>contractID</name><parameter_list>(<param><decl><type><name>NS_DOC_ENCODER_CONTRACTID_BASE</name></type></decl></param>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name>AppendUTF16toUTF8</name><argument_list>(<argument><expr><name>contentType</name></expr></argument>, <argument><expr><name>contractID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIComponentRegistrar</name></expr></argument>&gt;</argument_list></name></type> <name>registrar</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>NS_GetComponentRegistrar</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>registrar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>registrar</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>PRBool</name></type> <name>result</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>registrar</name>-&gt;<name>IsContractIDRegistered</name></name><argument_list>(<argument><expr><call><name><name>contractID</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; <name>result</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr>*<name>aRealContentType</name> = <call><name>ToNewUnicode</name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></then></if>

    <comment type="line">// Use the default if no encoder exists for the desired one</comment>
    <if>if <condition>(<expr>!*<name>aRealContentType</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr>*<name>aRealContentType</name> = <call><name>ToNewUnicode</name><argument_list>(<argument><expr><name>defaultContentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr>*<name>aRealContentType</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type> <name><name>nsWebBrowserPersist</name>::<name>SaveDocumentInternal</name></name><parameter_list>(
    <param><decl><type><name>nsIDOMDocument</name> *</type><name>aDocument</name></decl></param>, <param><decl><type><name>nsIURI</name> *</type><name>aFile</name></decl></param>, <param><decl><type><name>nsIURI</name> *</type><name>aDataPath</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// See if we can get the local file representation of this URI</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name></type> <name>localFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetLocalFileFromURI</name><argument_list>(<argument><expr><name>aFile</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>localFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name></type> <name>localDataPath</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; <name>aDataPath</name></expr>)</condition><then>
    <block>{
        <comment type="line">// See if we can get the local file representation of this URI</comment>
        <expr_stmt><expr><name>rv</name> = <call><name>GetLocalFileFromURI</name><argument_list>(<argument><expr><name>aDataPath</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>localDataPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>docAsNode</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Persist the main document</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></type> <name>doc</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>mURI</name> = <call><name><name>doc</name>-&gt;<name>GetDocumentURI</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>oldBaseURI</name> <init>= <expr><name>mCurrentBaseURI</name></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>nsCAutoString</name></type> <name>oldCharset</name><parameter_list>(<param><decl><type><name>mCurrentCharset</name></type></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Store the base URI and the charset</comment>
    <expr_stmt><expr><name>mCurrentBaseURI</name> = <call><name><name>doc</name>-&gt;<name>GetBaseURI</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mCurrentCharset</name> = <call><name><name>doc</name>-&gt;<name>GetDocumentCharacterSet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Does the caller want to fixup the referenced URIs and save those too?</comment>
    <if>if <condition>(<expr><name>aDataPath</name></expr>)</condition><then>
    <block>{
        <comment type="line">// Basic steps are these.</comment>
        <comment type="line">//</comment>
        <comment type="line">// 1. Iterate through the document (and subdocuments) building a list</comment>
        <comment type="line">//    of unique URIs.</comment>
        <comment type="line">// 2. For each URI create an OutputData entry and open a channel to save</comment>
        <comment type="line">//    it. As each URI is saved, discover the mime type and fix up the</comment>
        <comment type="line">//    local filename with the correct extension.</comment>
        <comment type="line">// 3. Store the document in a list and wait for URI persistence to finish</comment>
        <comment type="line">// 4. After URI persistence completes save the list of documents,</comment>
        <comment type="line">//    fixing it up as it goes out to file.</comment>

        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>oldDataPath</name> <init>= <expr><name>mCurrentDataPath</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PRBool</name></type> <name>oldDataPathIsRelative</name> <init>= <expr><name>mCurrentDataPathIsRelative</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>nsCString</name></type> <name>oldCurrentRelativePathToData</name> <init>= <expr><name>mCurrentRelativePathToData</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PRUint32</name></type> <name>oldThingsToPersist</name> <init>= <expr><name>mCurrentThingsToPersist</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>mCurrentDataPathIsRelative</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mCurrentDataPath</name> = <name>aDataPath</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mCurrentRelativePathToData</name> = ""</expr>;</expr_stmt>
        <expr_stmt><expr><name>mCurrentThingsToPersist</name> = 0</expr>;</expr_stmt>

        <comment type="line">// Determine if the specified data path is relative to the</comment>
        <comment type="line">// specified file, (e.g. c:\docs\htmldata is relative to</comment>
        <comment type="line">// c:\docs\myfile.htm, but not to d:\foo\data.</comment>

        <comment type="line">// Starting with the data dir work back through its parents</comment>
        <comment type="line">// checking if one of them matches the base directory.</comment>

        <if>if <condition>(<expr><name>localDataPath</name> &amp;&amp; <name>localFile</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name></type> <name>baseDir</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>localFile</name>-&gt;<name>GetParent</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>baseDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>relativePathToData</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name></type> <name>dataDirParent</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>dataDirParent</name> = <name>localDataPath</name></expr>;</expr_stmt>
            <while>while <condition>(<expr><name>dataDirParent</name></expr>)</condition>
            <block>{
                <decl_stmt><decl><type><name>PRBool</name></type> <name>sameDir</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dataDirParent</name>-&gt;<name>Equals</name></name><argument_list>(<argument><expr><name>baseDir</name></expr></argument>, <argument><expr>&amp;<name>sameDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>sameDir</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>mCurrentRelativePathToData</name> = <name>relativePathToData</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>mCurrentDataPathIsRelative</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>

                <decl_stmt><decl><type><name>nsAutoString</name></type> <name>dirName</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dataDirParent</name>-&gt;<name>GetLeafName</name></name><argument_list>(<argument><expr><name>dirName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>newRelativePathToData</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>newRelativePathToData</name> = <call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><name>dirName</name></expr></argument>)</argument_list></call>
                                      + <call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call>
                                      + <name>relativePathToData</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>relativePathToData</name> = <name>newRelativePathToData</name></expr>;</expr_stmt>

                <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name></type> <name>newDataDirParent</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>rv</name> = <call><name><name>dataDirParent</name>-&gt;<name>GetParent</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>newDataDirParent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>dataDirParent</name> = <name>newDataDirParent</name></expr>;</expr_stmt>
            }</block></while>
        }</block></then>
        <else>else
        <block>{
            <comment type="line">// generate a relative path if possible</comment>
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURL</name></expr></argument>&gt;</argument_list></name></type> <name>pathToBaseURL</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>pathToBaseURL</name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>relativePath</name></decl>;</decl_stmt>  <comment type="line">// nsACString</comment>
                <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>pathToBaseURL</name>-&gt;<name>GetRelativeSpec</name></name><argument_list>(<argument><expr><name>aDataPath</name></expr></argument>, <argument><expr><name>relativePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>mCurrentDataPathIsRelative</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>mCurrentRelativePathToData</name> = <name>relativePath</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></else></if>

        <comment type="line">// Store the document in a list so when URI persistence is done and the</comment>
        <comment type="line">// filenames of saved URIs are known, the documents can be fixed up and</comment>
        <comment type="line">// saved</comment>

        <decl_stmt><decl><type><name>DocData</name> *</type><name>docData</name> <init>= <expr>new <name>DocData</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>docData</name>-&gt;<name>mBaseURI</name></name> = <name>mCurrentBaseURI</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>docData</name>-&gt;<name>mCharset</name></name> = <name>mCurrentCharset</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>docData</name>-&gt;<name>mDocument</name></name> = <name>aDocument</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>docData</name>-&gt;<name>mFile</name></name> = <name>aFile</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>docData</name>-&gt;<name>mRelativePathToData</name></name> = <name>mCurrentRelativePathToData</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>docData</name>-&gt;<name>mDataPath</name></name> = <name>mCurrentDataPath</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>docData</name>-&gt;<name>mDataPathIsRelative</name></name> = <name>mCurrentDataPathIsRelative</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mDocList</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>docData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Walk the DOM gathering a list of externally referenced URIs in the uri map</comment>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocumentTraversal</name></expr></argument>&gt;</argument_list></name></type> <name>trav</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name><name>docData</name>-&gt;<name>mDocument</name></name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMTreeWalker</name></expr></argument>&gt;</argument_list></name></type> <name>walker</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name><name>trav</name>-&gt;<name>CreateTreeWalker</name></name><argument_list>(<argument><expr><name>docAsNode</name></expr></argument>, 
            <argument><expr><name><name>nsIDOMNodeFilter</name>::<name>SHOW_ELEMENT</name></name> |
                <name><name>nsIDOMNodeFilter</name>::<name>SHOW_DOCUMENT</name></name> |
                <name><name>nsIDOMNodeFilter</name>::<name>SHOW_PROCESSING_INSTRUCTION</name></name></expr></argument>,
            <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>walker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>currentNode</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>walker</name>-&gt;<name>GetCurrentNode</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>currentNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>currentNode</name></expr>)</condition>
        <block>{
            <expr_stmt><expr><call><name>OnWalkDOMNode</name><argument_list>(<argument><expr><name>currentNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>walker</name>-&gt;<name>NextNode</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>currentNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <comment type="line">// If there are things to persist, create a directory to hold them</comment>
        <if>if <condition>(<expr><name>mCurrentThingsToPersist</name> &gt; 0</expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name>localDataPath</name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>PRBool</name></type> <name>exists</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PRBool</name></type> <name>haveDir</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>localDataPath</name>-&gt;<name>Exists</name></name><argument_list>(<argument><expr>&amp;<name>exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>exists</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>localDataPath</name>-&gt;<name>IsDirectory</name></name><argument_list>(<argument><expr>&amp;<name>haveDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr>!<name>haveDir</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>rv</name> = <call><name><name>localDataPath</name>-&gt;<name>Create</name></name><argument_list>(<argument><expr><name><name>nsILocalFile</name>::<name>DIRECTORY_TYPE</name></name></expr></argument>, <argument><expr>0755</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <expr_stmt><expr><name>haveDir</name> = <name>PR_TRUE</name></expr>;</expr_stmt></then>
                    <else>else
                        <expr_stmt><expr><call><name>SendErrorStatusChange</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
                }</block></then></if>
                <if>if <condition>(<expr>!<name>haveDir</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name>EndDownload</name><argument_list>(<argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>mCurrentBaseURI</name> = <name>oldBaseURI</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>mCurrentCharset</name> = <name>oldCharset</name></expr>;</expr_stmt>
                    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
                }</block></then></if>
                <if>if <condition>(<expr><name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_CLEANUP_ON_FAILURE</name></expr>)</condition><then>
                <block>{
                    <comment type="line">// Add to list of things to delete later if all goes wrong</comment>
                    <decl_stmt><decl><type><name>CleanupData</name> *</type><name>cleanupData</name> <init>= <expr>new <name>CleanupData</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>cleanupData</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>cleanupData</name>-&gt;<name>mFile</name></name> = <name>localDataPath</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>cleanupData</name>-&gt;<name>mIsDirectory</name></name> = <name>PR_TRUE</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mCleanupList</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>cleanupData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_OS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
                <comment type="line">// tag the directory with the URI that originated its contents</comment>
                <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFileOS2</name></expr></argument>&gt;</argument_list></name></type> <name>localFileOS2</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>localDataPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>localFileOS2</name></expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>url</name></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>mCurrentBaseURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>localFileOS2</name>-&gt;<name>SetFileSource</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            }</block></then></if>
        }</block></then></if>

        <expr_stmt><expr><name>mCurrentThingsToPersist</name> = <name>oldThingsToPersist</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mCurrentDataPath</name> = <name>oldDataPath</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mCurrentDataPathIsRelative</name> = <name>oldDataPathIsRelative</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mCurrentRelativePathToData</name> = <name>oldCurrentRelativePathToData</name></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <comment type="line">// Set the document base to ensure relative links still work</comment>
        <expr_stmt><expr><call><name>SetDocumentBase</name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>, <argument><expr><name>mCurrentBaseURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Get the content type to save with</comment>
        <decl_stmt><decl><type><name>nsXPIDLString</name></type> <name>realContentType</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GetDocEncoderContentType</name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>,
            <argument><expr>!<call><name><name>mContentType</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call> ? <call><name><name>mContentType</name>.<name>get</name></name><argument_list>()</argument_list></call> : <name>nsnull</name></expr></argument>,
            <argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>realContentType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>contentType</name></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>contentType</name>.<name>AssignWithConversion</name></name><argument_list>(<argument><expr><name>realContentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>charType</name></decl>;</decl_stmt> <comment type="line">// Empty</comment>

        <comment type="line">// Save the document</comment>
        <expr_stmt><expr><name>rv</name> = <call><name>SaveDocumentWithFixup</name><argument_list>(
            <argument><expr><name>aDocument</name></expr></argument>,
            <argument><expr><name>nsnull</name></expr></argument>,  <comment type="line">// no dom fixup</comment>
            <argument><expr><name>aFile</name></expr></argument>,
            <argument><expr><name>mReplaceExisting</name></expr></argument>,
            <argument><expr><name>contentType</name></expr></argument>,
            <argument><expr><name>charType</name></expr></argument>,
            <argument><expr><name>mEncodingFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name>mCurrentBaseURI</name> = <name>oldBaseURI</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mCurrentCharset</name> = <name>oldCharset</name></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type> <name><name>nsWebBrowserPersist</name>::<name>SaveDocuments</name></name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>mStartSaving</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

    <comment type="line">// Iterate through all queued documents, saving them to file and fixing</comment>
    <comment type="line">// them up on the way.</comment>

    <decl_stmt><decl><type><name>PRInt32</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name><name>mDocList</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
        <decl_stmt><decl><type><name>DocData</name> *</type><name>docData</name> <init>= <expr>(<name>DocData</name> *) <call><name><name>mDocList</name>.<name>ElementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>docData</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>

        <expr_stmt><expr><name>mCurrentBaseURI</name> = <name><name>docData</name>-&gt;<name>mBaseURI</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mCurrentCharset</name> = <name><name>docData</name>-&gt;<name>mCharset</name></name></expr>;</expr_stmt>

        <comment type="line">// Save the document, fixing it up with the new URIs as we do</comment>
        
        <decl_stmt><decl><type><name>nsEncoderNodeFixup</name> *</type><name>nodeFixup</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>nodeFixup</name> = new <name>nsEncoderNodeFixup</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>nodeFixup</name></expr>)</condition><then>
            <expr_stmt><expr><name><name>nodeFixup</name>-&gt;<name>mWebBrowserPersist</name></name> = <name>this</name></expr>;</expr_stmt></then></if>

        <comment type="line">// Get the content type</comment>
        <decl_stmt><decl><type><name>nsXPIDLString</name></type> <name>realContentType</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GetDocEncoderContentType</name><argument_list>(<argument><expr><name><name>docData</name>-&gt;<name>mDocument</name></name></expr></argument>,
            <argument><expr>!<call><name><name>mContentType</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call> ? <call><name><name>mContentType</name>.<name>get</name></name><argument_list>()</argument_list></call> : <name>nsnull</name></expr></argument>,
            <argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>realContentType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>contentType</name></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>contentType</name>.<name>AssignWithConversion</name></name><argument_list>(<argument><expr><call><name><name>realContentType</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>charType</name></decl>;</decl_stmt> <comment type="line">// Empty</comment>

        <comment type="line">// Save the document, fixing up the links as it goes out</comment>
        <expr_stmt><expr><name>rv</name> = <call><name>SaveDocumentWithFixup</name><argument_list>(
            <argument><expr><name><name>docData</name>-&gt;<name>mDocument</name></name></expr></argument>,
            <argument><expr><name>nodeFixup</name></expr></argument>,
            <argument><expr><name><name>docData</name>-&gt;<name>mFile</name></name></expr></argument>,
            <argument><expr><name>mReplaceExisting</name></expr></argument>,
            <argument><expr><name>contentType</name></expr></argument>,
            <argument><expr><name>charType</name></expr></argument>,
            <argument><expr><name>mEncodingFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <break>break;</break></then></if>

        <comment type="line">// if we're serializing, bail after first iteration of loop</comment>
        <if>if <condition>(<expr><name>mSerializingOutput</name></expr>)</condition><then>
            <break>break;</break></then></if>
    }</block></for>

    <comment type="line">// delete, cleanup regardless of errors (bug 132417)</comment>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name><name>mDocList</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
        <decl_stmt><decl><type><name>DocData</name> *</type><name>docData</name> <init>= <expr>(<name>DocData</name> *) <call><name><name>mDocList</name>.<name>ElementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr>delete <name>docData</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mSerializingOutput</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>mDocList</name>.<name>RemoveElementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block></for>

    <if>if <condition>(<expr>!<name>mSerializingOutput</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name><name>mDocList</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name><name>nsWebBrowserPersist</name>::<name>Cleanup</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>mURIMap</name>.<name>Enumerate</name></name><argument_list>(<argument><expr><name>EnumCleanupURIMap</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mURIMap</name>.<name>Reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mOutputMap</name>.<name>Enumerate</name></name><argument_list>(<argument><expr><name>EnumCleanupOutputMap</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mOutputMap</name>.<name>Reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mUploadList</name>.<name>Enumerate</name></name><argument_list>(<argument><expr><name>EnumCleanupUploadList</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mUploadList</name>.<name>Reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name><name>mDocList</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
        <decl_stmt><decl><type><name>DocData</name> *</type><name>docData</name> <init>= <expr>(<name>DocData</name> *) <call><name><name>mDocList</name>.<name>ElementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr>delete <name>docData</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name><name>mDocList</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name><name>mCleanupList</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
        <decl_stmt><decl><type><name>CleanupData</name> *</type><name>cleanupData</name> <init>= <expr>(<name>CleanupData</name> *) <call><name><name>mCleanupList</name>.<name>ElementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr>delete <name>cleanupData</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name><name>mCleanupList</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mFilenameList</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name><name>nsWebBrowserPersist</name>::<name>CleanupLocalFiles</name></name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">// Two passes, the first pass cleans up files, the second pass tests</comment>
    <comment type="line">// for and then deletes empty directories. Directories that are not</comment>
    <comment type="line">// empty after the first pass must contain files from something else</comment>
    <comment type="line">// and are not deleted.</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>pass</name></decl>;</decl_stmt>
    <for>for (<init><expr><name>pass</name> = 0</expr>;</init> <condition><expr><name>pass</name> &lt; 2</expr>;</condition> <incr><expr><name>pass</name>++</expr></incr>)
    <block>{
        <decl_stmt><decl><type><name>PRInt32</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name><name>mCleanupList</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <decl_stmt><decl><type><name>CleanupData</name> *</type><name>cleanupData</name> <init>= <expr>(<name>CleanupData</name> *) <call><name><name>mCleanupList</name>.<name>ElementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name></type> <name>file</name> <init>= <expr><name><name>cleanupData</name>-&gt;<name>mFile</name></name></expr></init></decl>;</decl_stmt>

            <comment type="line">// Test if the dir / file exists (something in an earlier loop</comment>
            <comment type="line">// may have already removed it)</comment>
            <decl_stmt><decl><type><name>PRBool</name></type> <name>exists</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>file</name>-&gt;<name>Exists</name></name><argument_list>(<argument><expr>&amp;<name>exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>exists</name></expr>)</condition><then>
                <continue>continue;</continue></then></if>

            <comment type="line">// Test if the file has changed in between creation and deletion</comment>
            <comment type="line">// in some way that means it should be ignored</comment>
            <decl_stmt><decl><type><name>PRBool</name></type> <name>isDirectory</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>file</name>-&gt;<name>IsDirectory</name></name><argument_list>(<argument><expr>&amp;<name>isDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>isDirectory</name> != <name><name>cleanupData</name>-&gt;<name>mIsDirectory</name></name></expr>)</condition><then>
                <continue>continue;</continue></then></if> <comment type="line">// A file has become a dir or vice versa !</comment>

            <if>if <condition>(<expr><name>pass</name> == 0 &amp;&amp; !<name>isDirectory</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>file</name>-&gt;<name>Remove</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>pass</name> == 1 &amp;&amp; <name>isDirectory</name></expr>)</condition><then> <comment type="line">// Directory</comment>
            <block>{
                <comment type="line">// Directories are more complicated. Enumerate through</comment>
                <comment type="line">// children looking for files. Any files created by the</comment>
                <comment type="line">// persist object would have been deleted by the first</comment>
                <comment type="line">// pass so if there are any there at this stage, the dir</comment>
                <comment type="line">// cannot be deleted because it has someone else's files</comment>
                <comment type="line">// in it. Empty child dirs are deleted but they must be</comment>
                <comment type="line">// recursed through to ensure they are actually empty.</comment>

                <decl_stmt><decl><type><name>PRBool</name></type> <name>isEmptyDirectory</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>nsSupportsArray</name></type> <name>dirStack</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PRUint32</name></type> <name>stackSize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

                <comment type="line">// Push the top level enum onto the stack</comment>
                <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISimpleEnumerator</name></expr></argument>&gt;</argument_list></name></type> <name>pos</name></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>file</name>-&gt;<name>GetDirectoryEntries</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name><name>dirStack</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                <while>while <condition>(<expr><name>isEmptyDirectory</name> &amp;&amp;
                    <call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>dirStack</name>.<name>Count</name></name><argument_list>(<argument><expr>&amp;<name>stackSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>stackSize</name> &gt; 0</expr>)</condition>
                <block>{
                    <comment type="line">// Pop the last element</comment>
                    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISimpleEnumerator</name></expr></argument>&gt;</argument_list></name></type> <name>curPos</name></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>dirStack</name>.<name>GetElementAt</name></name><argument_list>(<argument><expr><name>stackSize</name> - 1</expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>curPos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dirStack</name>.<name>RemoveElementAt</name></name><argument_list>(<argument><expr><name>stackSize</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
                    <comment type="line">// Test if the enumerator has any more files in it</comment>
                    <decl_stmt><decl><type><name>PRBool</name></type> <name>hasMoreElements</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>curPos</name>-&gt;<name>HasMoreElements</name></name><argument_list>(<argument><expr>&amp;<name>hasMoreElements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<name>hasMoreElements</name></expr>)</condition><then>
                    <block>{
                        <continue>continue;</continue>
                    }</block></then></if>

                    <comment type="line">// Child files automatically make this code drop out,</comment>
                    <comment type="line">// while child dirs keep the loop going.</comment>
                    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>child</name></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>curPos</name>-&gt;<name>GetNext</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr>"No child element, but hasMoreElements says otherwise"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<name>child</name></expr>)</condition><then>
                        <continue>continue;</continue></then></if>
                    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name></type> <name>childAsFile</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>childAsFile</name></expr></argument>, <argument><expr>"This should be a file but isn't"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>PRBool</name></type> <name>childIsSymlink</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>childAsFile</name>-&gt;<name>IsSymlink</name></name><argument_list>(<argument><expr>&amp;<name>childIsSymlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>PRBool</name></type> <name>childIsDir</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>childAsFile</name>-&gt;<name>IsDirectory</name></name><argument_list>(<argument><expr>&amp;<name>childIsDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                           
                    <if>if <condition>(<expr>!<name>childIsDir</name> || <name>childIsSymlink</name></expr>)</condition><then>
                    <block>{
                        <comment type="line">// Some kind of file or symlink which means dir</comment>
                        <comment type="line">// is not empty so just drop out.</comment>
                        <expr_stmt><expr><name>isEmptyDirectory</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                    <comment type="line">// Push parent enumerator followed by child enumerator</comment>
                    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISimpleEnumerator</name></expr></argument>&gt;</argument_list></name></type> <name>childPos</name></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>childAsFile</name>-&gt;<name>GetDirectoryEntries</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>childPos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dirStack</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>curPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>childPos</name></expr>)</condition><then>
                        <expr_stmt><expr><call><name><name>dirStack</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>childPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                }</block></while>
                <expr_stmt><expr><call><name><name>dirStack</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// If after all that walking the dir is deemed empty, delete it</comment>
                <if>if <condition>(<expr><name>isEmptyDirectory</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>file</name>-&gt;<name>Remove</name></name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if></else></if>
        }</block></for>
    }</block></for>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>CalculateUniqueFilename</name></name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURL</name></expr></argument>&gt;</argument_list></name></type> <name>url</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PRBool</name></type> <name>nameHasChanged</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

    <comment type="line">// Get the old filename</comment>
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>filename</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>url</name>-&gt;<name>GetFileName</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>directory</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>url</name>-&gt;<name>GetDirectory</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Split the filename into a base and an extension.</comment>
    <comment type="line">// e.g. "foo.html" becomes "foo" &amp; ".html"</comment>
    <comment type="line">//</comment>
    <comment type="line">// The nsIURL methods GetFileBaseName &amp; GetFileExtension don't</comment>
    <comment type="line">// preserve the dot whereas this code does to save some effort</comment>
    <comment type="line">// later when everything is put back together.</comment>
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>lastDot</name> <init>= <expr><call><name><name>filename</name>.<name>RFind</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>base</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>ext</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>lastDot</name> &gt;= 0</expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name><name>filename</name>.<name>Mid</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>lastDot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>filename</name>.<name>Mid</name></name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><name>lastDot</name></expr></argument>, <argument><expr><call><name><name>filename</name>.<name>Length</name></name><argument_list>()</argument_list></call> - <name>lastDot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// includes dot</comment>
    }</block></then>
    <else>else
    <block>{
        <comment type="line">// filename contains no dot</comment>
        <expr_stmt><expr><name>base</name> = <name>filename</name></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="line">// Test if the filename is longer than allowed by the OS</comment>
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>needToChop</name> <init>= <expr><call><name><name>filename</name>.<name>Length</name></name><argument_list>()</argument_list></call> - <name>kDefaultMaxFilenameLength</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>needToChop</name> &gt; 0</expr>)</condition><then>
    <block>{
        <comment type="line">// Truncate the base first and then the ext if necessary</comment>
        <if>if <condition>(<expr><call><name><name>base</name>.<name>Length</name></name><argument_list>()</argument_list></call> &gt; (<name>PRUint32</name>) <name>needToChop</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>base</name>.<name>Truncate</name></name><argument_list>(<argument><expr><call><name><name>base</name>.<name>Length</name></name><argument_list>()</argument_list></call> - <name>needToChop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>needToChop</name> -= <call><name><name>base</name>.<name>Length</name></name><argument_list>()</argument_list></call> - 1</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>base</name>.<name>Truncate</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>ext</name>.<name>Length</name></name><argument_list>()</argument_list></call> &gt; (<name>PRUint32</name>) <name>needToChop</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>ext</name>.<name>Truncate</name></name><argument_list>(<argument><expr><call><name><name>ext</name>.<name>Length</name></name><argument_list>()</argument_list></call> - <name>needToChop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><call><name><name>ext</name>.<name>Truncate</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <comment type="line">// If kDefaultMaxFilenameLength were 1 we'd be in trouble here,</comment>
            <comment type="line">// but that won't happen because it will be set to a sensible</comment>
            <comment type="line">// value.</comment>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>filename</name>.<name>Assign</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>filename</name>.<name>Append</name></name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nameHasChanged</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">// Ensure the filename is unique</comment>
    <comment type="line">// Create a filename if it's empty, or if the filename / datapath is</comment>
    <comment type="line">// already taken by another URI and create an alternate name.</comment>

    <if>if <condition>(<expr><call><name><name>base</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call> || <call><name><name>mFilenameList</name>.<name>Length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>tmpPath</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>tmpBase</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PRUint32</name></type> <name>duplicateCounter</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr>1</expr>)</condition>
        <block>{
            <comment type="line">// Make a file name,</comment>
            <comment type="line">// Foo become foo_001, foo_002, etc.</comment>
            <comment type="line">// Empty files become _001, _002 etc.</comment>

            <if>if <condition>(<expr><call><name><name>base</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call> || <name>duplicateCounter</name> &gt; 1</expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>char</name> *</type> <name>tmp</name> <init>= <expr><call><name>PR_smprintf</name><argument_list>(<argument><expr>"_%03d"</expr></argument>, <argument><expr><name>duplicateCounter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>filename</name>.<name>Length</name></name><argument_list>()</argument_list></call> &lt; <name>kDefaultMaxFilenameLength</name> - 4</expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>tmpBase</name> = <name>base</name></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <expr_stmt><expr><call><name><name>base</name>.<name>Mid</name></name><argument_list>(<argument><expr><name>tmpBase</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name><name>base</name>.<name>Length</name></name><argument_list>()</argument_list></call> - 4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>tmpBase</name>.<name>Append</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>PR_smprintf_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>tmpBase</name> = <name>base</name></expr>;</expr_stmt>
            }</block></else></if>
        
            <expr_stmt><expr><call><name><name>tmpPath</name>.<name>Assign</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tmpPath</name>.<name>Append</name></name><argument_list>(<argument><expr><name>tmpBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tmpPath</name>.<name>Append</name></name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Test if the name is a duplicate</comment>
            <if>if <condition>(<expr><call><name><name>mFilenameList</name>.<name>IndexOf</name></name><argument_list>(<argument><expr><name>tmpPath</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr>!<call><name><name>base</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>tmpBase</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>filename</name>.<name>Assign</name></name><argument_list>(<argument><expr><name>tmpBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>filename</name>.<name>Append</name></name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>nameHasChanged</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
                }</block></then></if>
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>duplicateCounter</name>++</expr>;</expr_stmt>
        }</block></while>
    }</block></then></if>

    <comment type="line">// Add name to list of those already used</comment>
    <function_decl><type><name>nsCAutoString</name></type> <name>newFilepath</name><parameter_list>(<param><decl><type><name>directory</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name><name>newFilepath</name>.<name>Append</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mFilenameList</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>newFilepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Update the uri accordingly if the filename actually changed</comment>
    <if>if <condition>(<expr><name>nameHasChanged</name></expr>)</condition><then>
    <block>{
        <comment type="line">// Final sanity test</comment>
        <if>if <condition>(<expr><call><name><name>filename</name>.<name>Length</name></name><argument_list>()</argument_list></call> &gt; <name>kDefaultMaxFilenameLength</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"Filename wasn't truncated less than the max file length - how can that be?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name></type> <name>localFile</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GetLocalFileFromURI</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>localFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>localFile</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>nsAutoString</name></type> <name>filenameAsUnichar</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>filenameAsUnichar</name>.<name>AssignWithConversion</name></name><argument_list>(<argument><expr><call><name><name>filename</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>localFile</name>-&gt;<name>SetLeafName</name></name><argument_list>(<argument><expr><name>filenameAsUnichar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Resync the URI with the file after the extension has been appended</comment>
            <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFileURL</name></expr></argument>&gt;</argument_list></name></type> <name>fileURL</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fileURL</name>-&gt;<name>SetFile</name></name><argument_list>(<argument><expr><name>localFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// this should recalculate uri</comment>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>url</name>-&gt;<name>SetFileName</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>MakeFilenameFromURI</name></name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>, <param><decl><type><name>nsString</name> &amp;</type><name>aFilename</name></decl></param>)</parameter_list>
<block>{
    <comment type="line">// Try to get filename from the URI.</comment>
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>fileName</name></decl>;</decl_stmt>

    <comment type="line">// Get a suggested file name from the URL but strip it of characters</comment>
    <comment type="line">// likely to cause the name to be illegal.</comment>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURL</name></expr></argument>&gt;</argument_list></name></type> <name>url</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>url</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>nameFromURL</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>url</name>-&gt;<name>GetFileName</name></name><argument_list>(<argument><expr><name>nameFromURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_DONT_CHANGE_FILENAMES</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>fileName</name>.<name>AssignWithConversion</name></name><argument_list>(<argument><expr><call><name>NS_UnescapeURL</name><argument_list>(<argument><expr><name>nameFromURL</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>end</name>;</goto>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>nameFromURL</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <comment type="line">// Unescape the file name (GetFileName escapes it)</comment>
            <expr_stmt><expr><call><name>NS_UnescapeURL</name><argument_list>(<argument><expr><name>nameFromURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>PRUint32</name></type> <name>nameLength</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name> <init>= <expr><call><name><name>nameFromURL</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init>;</init><condition><expr>*<name>p</name> &amp;&amp; *<name>p</name> != ';' &amp;&amp; *<name>p</name> != '?' &amp;&amp; *<name>p</name> != '#' &amp;&amp; *<name>p</name> != '.'</expr>
                 ;</condition><incr><expr><name>p</name>++</expr></incr>)
            <block>{
                <if>if <condition>(<expr><call><name><name>nsCRT</name>::<name>IsAsciiAlpha</name></name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call> || <call><name><name>nsCRT</name>::<name>IsAsciiDigit</name></name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call>
                    || *<name>p</name> == '.' || *<name>p</name> == '-' ||  *<name>p</name> == '_' || (*<name>p</name> == ' ')</expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>fileName</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name>PRUnichar</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr>++<name>nameLength</name> == <name>kDefaultMaxFilenameLength</name></expr>)</condition><then>
                    <block>{
                        <comment type="line">// Note:</comment>
                        <comment type="line">// There is no point going any further since it will be</comment>
                        <comment type="line">// truncated in CalculateUniqueFilename anyway.</comment>
                        <comment type="line">// More importantly, certain implementations of</comment>
                        <comment type="line">// nsILocalFile (e.g. the Mac impl) might truncate</comment>
                        <comment type="line">// names in undesirable ways, such as truncating from</comment>
                        <comment type="line">// the middle, inserting ellipsis and so on.</comment>
                        <break>break;</break>
                    }</block></then></if>
                }</block></then></if>
            }</block></for>
        }</block></then></if>
    }</block></then></if>

    <comment type="line">// Empty filenames can confuse the local file object later </comment>
    <comment type="line">// when it attempts to set the leaf name in CalculateUniqueFilename</comment>
    <comment type="line">// for duplicates and ends up replacing the parent dir. To avoid</comment>
    <comment type="line">// the problem, all filenames are made at least one character long.</comment>
    <if>if <condition>(<expr><call><name><name>fileName</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name><name>fileName</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name>PRUnichar</name><argument_list>(<argument><expr>'a'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 'a' is for arbitrary</comment>
    }</block></then></if>
 
<label><name>end</name>:</label>
    <expr_stmt><expr><name>aFilename</name> = <name>fileName</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>CalculateAndAppendFileExt</name></name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>, <param><decl><type><name>nsIChannel</name> *</type><name>aChannel</name></decl></param>, <param><decl><type><name>nsIURI</name> *</type><name>aOriginalURIWithExtension</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>mMIMEService</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>mMIMEService</name> = <call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_MIMESERVICE_CONTRACTID</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mMIMEService</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>contentType</name></decl>;</decl_stmt>

    <comment type="line">// Get the content type from the channel</comment>
    <expr_stmt><expr><call><name><name>aChannel</name>-&gt;<name>GetContentType</name></name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Get the content type from the MIME service</comment>
    <if>if <condition>(<expr><call><name><name>contentType</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>aChannel</name>-&gt;<name>GetOriginalURI</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mMIMEService</name>-&gt;<name>GetTypeFromURI</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>contentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">// Append the extension onto the file</comment>
    <if>if <condition>(<expr>!<call><name><name>contentType</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIMIMEInfo</name></expr></argument>&gt;</argument_list></name></type> <name>mimeInfo</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mMIMEService</name>-&gt;<name>GetFromTypeAndExtension</name></name><argument_list>(
            <argument><expr><name>contentType</name></expr></argument>, <argument><expr><call><name>EmptyCString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mimeInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name></type> <name>localFile</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GetLocalFileFromURI</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>localFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>mimeInfo</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURL</name></expr></argument>&gt;</argument_list></name></type> <name>url</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>newFileName</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>url</name>-&gt;<name>GetFileName</name></name><argument_list>(<argument><expr><name>newFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Test if the current extension is current for the mime type</comment>
            <decl_stmt><decl><type><name>PRBool</name></type> <name>hasExtension</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PRInt32</name></type> <name>ext</name> <init>= <expr><call><name><name>newFileName</name>.<name>RFind</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>ext</name> != -1</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>mimeInfo</name>-&gt;<name>ExtensionExists</name></name><argument_list>(<argument><expr><call><name>Substring</name><argument_list>(<argument><expr><name>newFileName</name></expr></argument>, <argument><expr><name>ext</name> + 1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>hasExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// Append the mime file extension</comment>
            <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>fileExt</name></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name>hasExtension</name></expr>)</condition><then>
            <block>{
                <comment type="line">// Test if previous extension is acceptable</comment>
                <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURL</name></expr></argument>&gt;</argument_list></name></type> <name>oldurl</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aOriginalURIWithExtension</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>oldurl</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>oldurl</name>-&gt;<name>GetFileExtension</name></name><argument_list>(<argument><expr><name>fileExt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>PRBool</name></type> <name>useOldExt</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<call><name><name>fileExt</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>mimeInfo</name>-&gt;<name>ExtensionExists</name></name><argument_list>(<argument><expr><name>fileExt</name></expr></argument>, <argument><expr>&amp;<name>useOldExt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <comment type="line">// can't use old extension so use primary extension</comment>
                <if>if <condition>(<expr>!<name>useOldExt</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>mimeInfo</name>-&gt;<name>GetPrimaryExtension</name></name><argument_list>(<argument><expr><name>fileExt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if> 

                <if>if <condition>(<expr>!<call><name><name>fileExt</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>PRUint32</name></type> <name>newLength</name> <init>= <expr><call><name><name>newFileName</name>.<name>Length</name></name><argument_list>()</argument_list></call> + <call><name><name>fileExt</name>.<name>Length</name></name><argument_list>()</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>newLength</name> &gt; <name>kDefaultMaxFilenameLength</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><call><name><name>newFileName</name>.<name>Truncate</name></name><argument_list>(<argument><expr><call><name><name>newFileName</name>.<name>Length</name></name><argument_list>()</argument_list></call> - (<name>newLength</name> - <name>kDefaultMaxFilenameLength</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>newFileName</name>.<name>Append</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>newFileName</name>.<name>Append</name></name><argument_list>(<argument><expr><name>fileExt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <if>if <condition>(<expr><name>localFile</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>localFile</name>-&gt;<name>SetLeafName</name></name><argument_list>(<argument><expr><call><name>NS_ConvertUTF8toUTF16</name><argument_list>(<argument><expr><name>newFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Resync the URI with the file after the extension has been appended</comment>
                    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFileURL</name></expr></argument>&gt;</argument_list></name></type> <name>fileURL</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>fileURL</name>-&gt;<name>SetFile</name></name><argument_list>(<argument><expr><name>localFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// this should recalculate uri</comment>
                }</block></then>
                <else>else
                <block>{
                    <expr_stmt><expr><call><name><name>url</name>-&gt;<name>SetFileName</name></name><argument_list>(<argument><expr><name>newFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>

        }</block></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>XP_MAC</name></cpp:ifdef>
        <comment type="line">// Set appropriate Mac file type/creator for this mime type</comment>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFileMac</name></expr></argument>&gt;</argument_list></name></type> <name>macFile</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>localFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>macFile</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>macFile</name>-&gt;<name>SetFileTypeAndCreatorFromMIMEType</name></name><argument_list>(<argument><expr><call><name><name>contentType</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>            
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>MakeOutputStream</name></name><parameter_list>(
    <param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>, <param><decl><type><name>nsIOutputStream</name> **</type><name>aOutputStream</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name></type> <name>localFile</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetLocalFileFromURI</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>localFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>localFile</name></expr>)</condition><then>
        <expr_stmt><expr><name>rv</name> = <call><name>MakeOutputStreamFromFile</name><argument_list>(<argument><expr><name>localFile</name></expr></argument>, <argument><expr><name>aOutputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><name>rv</name> = <call><name>MakeOutputStreamFromURI</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><name>aOutputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>MakeOutputStreamFromFile</name></name><parameter_list>(
    <param><decl><type><name>nsILocalFile</name> *</type><name>aFile</name></decl></param>, <param><decl><type><name>nsIOutputStream</name> **</type><name>aOutputStream</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFileOutputStream</name></expr></argument>&gt;</argument_list></name></type> <name>fileOutputStream</name> <init>=
        <expr><call><name>do_CreateInstance</name><argument_list>(<argument><expr><name>NS_LOCALFILEOUTPUTSTREAM_CONTRACTID</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// XXX brade:  get the right flags here!</comment>
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>ioFlags</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>mPersistFlags</name> &amp; <name><name>nsIWebBrowserPersist</name>::<name>PERSIST_FLAGS_APPEND_TO_FILE</name></name></expr>)</condition><then>
      <expr_stmt><expr><name>ioFlags</name> = <name>PR_APPEND</name> | <name>PR_CREATE_FILE</name> | <name>PR_WRONLY</name></expr>;</expr_stmt></then></if> 
    <expr_stmt><expr><name>rv</name> = <call><name><name>fileOutputStream</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>aFile</name></expr></argument>, <argument><expr><name>ioFlags</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr>*<name>aOutputStream</name> = <call><name>NS_BufferOutputStream</name><argument_list>(<argument><expr><name>fileOutputStream</name></expr></argument>,
                                           <argument><expr><name>BUFFERED_OUTPUT_SIZE</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_CLEANUP_ON_FAILURE</name></expr>)</condition><then>
    <block>{
        <comment type="line">// Add to cleanup list in event of failure</comment>
        <decl_stmt><decl><type><name>CleanupData</name> *</type><name>cleanupData</name> <init>= <expr>new <name>CleanupData</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>cleanupData</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr>*<name>aOutputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name><name>cleanupData</name>-&gt;<name>mFile</name></name> = <name>aFile</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cleanupData</name>-&gt;<name>mIsDirectory</name></name> = <name>PR_FALSE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mCleanupList</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>cleanupData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>MakeOutputStreamFromURI</name></name><parameter_list>(
    <param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>, <param><decl><type><name>nsIOutputStream</name>  **</type><name>aOutputStream</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>segsize</name> <init>= <expr>8192</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>maxsize</name> <init>= <expr><call><name>PRUint32</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIStorageStream</name></expr></argument>&gt;</argument_list></name></type> <name>storStream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_NewStorageStream</name><argument_list>(<argument><expr><name>segsize</name></expr></argument>, <argument><expr><name>maxsize</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>storStream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>storStream</name></expr></argument>, <argument><expr><name>aOutputStream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsWebBrowserPersist</name>::<name>EndDownload</name></name><parameter_list>(<param><decl><type><name>nsresult</name></type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
    <comment type="line">// Store the error code in the result if it is an error</comment>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>mPersistResult</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>NS_FAILED</name><argument_list>(<argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>mPersistResult</name> = <name>aResult</name></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">// Do file cleanup if required</comment>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>aResult</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_CLEANUP_ON_FAILURE</name>)</expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>CleanupLocalFiles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">// Cleanup the channels</comment>
    <expr_stmt><expr><name>mCompleted</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* Hack class to get access to nsISupportsKey's protected mKey member */</comment>
<class>class <name>nsMyISupportsKey</name> <super>: <specifier>public</specifier> <name>nsISupportsKey</name></super>
<block>{<private type="default">
</private><public>public:
    <constructor><name>nsMyISupportsKey</name><parameter_list>(<param><decl><type><name>nsISupports</name> *</type><name>key</name></decl></param>)</parameter_list> <member_list>: <call><name>nsISupportsKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call>
    </member_list><block>{
    }</block></constructor>

    <function><type><name>nsresult</name></type> <name>GetISupports</name><parameter_list>(<param><decl><type><name>nsISupports</name> **</type><name>ret</name></decl></param>)</parameter_list>
    <block>{
        <expr_stmt><expr>*<name>ret</name> = <name>mKey</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr><name>mKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></function>
</public>}</block>;</class>

<struct>struct <macro><name>NS_STACK_CLASS</name></macro> <name>FixRedirectData</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIChannel</name></expr></argument>&gt;</argument_list></name></type> <name>mNewChannel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>mOriginalURI</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsISupportsKey</name> *</type><name>mMatchingKey</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>FixRedirectedChannelEntry</name></name><parameter_list>(<param><decl><type><name>nsIChannel</name> *</type><name>aNewChannel</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aNewChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>originalURI</name></decl>;</decl_stmt>

    <comment type="line">// Enumerate through existing open channels looking for one with</comment>
    <comment type="line">// a URI matching the one specified.</comment>

    <decl_stmt><decl><type><name>FixRedirectData</name></type> <name>data</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>data</name>.<name>mMatchingKey</name></name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name>.<name>mNewChannel</name></name> = <name>aNewChannel</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>data</name>.<name>mNewChannel</name>-&gt;<name>GetOriginalURI</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name><name>data</name>.<name>mOriginalURI</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mOutputMap</name>.<name>Enumerate</name></name><argument_list>(<argument><expr><name>EnumFixRedirect</name></expr></argument>, <argument><expr>(<name>void</name> *) &amp;<name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If a match is found, remove the data entry with the old channel key</comment>
    <comment type="line">// and re-add it with the new channel key.</comment>

    <if>if <condition>(<expr><name><name>data</name>.<name>mMatchingKey</name></name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>OutputData</name> *</type><name>outputData</name> <init>= <expr>(<name>OutputData</name> *) <call><name><name>mOutputMap</name>.<name>Get</name></name><argument_list>(<argument><expr><name><name>data</name>.<name>mMatchingKey</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>outputData</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mOutputMap</name>.<name>Remove</name></name><argument_list>(<argument><expr><name><name>data</name>.<name>mMatchingKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Store data again with new channel unless told to ignore redirects</comment>
        <if>if <condition>(<expr>!(<name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_IGNORE_REDIRECTED_DATA</name>)</expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>keyPtr</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNewChannel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <function_decl><type><name>nsISupportsKey</name></type> <name>key</name><parameter_list>(<param><decl><type><name>keyPtr</name></type></decl></param>)</parameter_list>;</function_decl>
            <expr_stmt><expr><call><name><name>mOutputMap</name>.<name>Put</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>outputData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsWebBrowserPersist</name>::<name>EnumFixRedirect</name></name><parameter_list>(<param><decl><type><name>nsHashKey</name> *</type><name>aKey</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aData</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>closure</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>FixRedirectData</name> *</type><name>data</name> <init>= <expr>(<name>FixRedirectData</name> *) <name>closure</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>keyPtr</name></decl>;</decl_stmt>
    <expr_stmt><expr>((<name>nsMyISupportsKey</name> *) <name>aKey</name>)-&gt;<call><name>GetISupports</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>keyPtr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIChannel</name></expr></argument>&gt;</argument_list></name></type> <name>thisChannel</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>keyPtr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>thisURI</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>thisChannel</name>-&gt;<name>GetOriginalURI</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>thisURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Compare this channel's URI to the one passed in.</comment>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>matchingURI</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>thisURI</name>-&gt;<name>Equals</name></name><argument_list>(<argument><expr><name><name>data</name>-&gt;<name>mOriginalURI</name></name></expr></argument>, <argument><expr>&amp;<name>matchingURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>matchingURI</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>data</name>-&gt;<name>mMatchingKey</name></name> = (<name>nsISupportsKey</name> *) <name>aKey</name></expr>;</expr_stmt>
        <return>return <expr><name>PR_FALSE</name></expr>;</return> <comment type="line">// Stop enumerating</comment>
    }</block></then></if>

    <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsWebBrowserPersist</name>::<name>CalcTotalProgress</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>mTotalCurrentProgress</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>mTotalMaxProgress</name> = 0</expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>mOutputMap</name>.<name>Count</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then>
    <block>{
        <comment type="line">// Total up the progress of each output stream</comment>
        <expr_stmt><expr><call><name><name>mOutputMap</name>.<name>Enumerate</name></name><argument_list>(<argument><expr><name>EnumCalcProgress</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>mUploadList</name>.<name>Count</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then>
    <block>{
        <comment type="line">// Total up the progress of each upload</comment>
        <expr_stmt><expr><call><name><name>mUploadList</name>.<name>Enumerate</name></name><argument_list>(<argument><expr><name>EnumCalcUploadProgress</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">// XXX this code seems pretty bogus and pointless</comment>
    <if>if <condition>(<expr><name>mTotalCurrentProgress</name> == <name>LL_ZERO</name> &amp;&amp; <name>mTotalMaxProgress</name> == <name>LL_ZERO</name></expr>)</condition><then>
    <block>{
        <comment type="line">// No output streams so we must be complete</comment>
        <expr_stmt><expr><name>mTotalCurrentProgress</name> = 10000</expr>;</expr_stmt>
        <expr_stmt><expr><name>mTotalMaxProgress</name> = 10000</expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsWebBrowserPersist</name>::<name>EnumCalcProgress</name></name><parameter_list>(<param><decl><type><name>nsHashKey</name> *</type><name>aKey</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aData</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>closure</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nsWebBrowserPersist</name> *</type><name>pthis</name> <init>= <expr>(<name>nsWebBrowserPersist</name> *) <name>closure</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OutputData</name> *</type><name>data</name> <init>= <expr>(<name>OutputData</name> *) <name>aData</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// only count toward total progress if destination file is local</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFileURL</name></expr></argument>&gt;</argument_list></name></type> <name>fileURL</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name><name>data</name>-&gt;<name>mFile</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>fileURL</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>pthis</name>-&gt;<name>mTotalCurrentProgress</name></name> += <name><name>data</name>-&gt;<name>mSelfProgress</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pthis</name>-&gt;<name>mTotalMaxProgress</name></name> += <name><name>data</name>-&gt;<name>mSelfProgressMax</name></name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsWebBrowserPersist</name>::<name>EnumCalcUploadProgress</name></name><parameter_list>(<param><decl><type><name>nsHashKey</name> *</type><name>aKey</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aData</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>closure</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>aData</name> &amp;&amp; <name>closure</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>nsWebBrowserPersist</name> *</type><name>pthis</name> <init>= <expr>(<name>nsWebBrowserPersist</name> *) <name>closure</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UploadData</name> *</type><name>data</name> <init>= <expr>(<name>UploadData</name> *) <name>aData</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pthis</name>-&gt;<name>mTotalCurrentProgress</name></name> += <name><name>data</name>-&gt;<name>mSelfProgress</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pthis</name>-&gt;<name>mTotalMaxProgress</name></name> += <name><name>data</name>-&gt;<name>mSelfProgressMax</name></name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsWebBrowserPersist</name>::<name>EnumCountURIsToPersist</name></name><parameter_list>(<param><decl><type><name>nsHashKey</name> *</type><name>aKey</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aData</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>closure</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>URIData</name> *</type><name>data</name> <init>= <expr>(<name>URIData</name> *) <name>aData</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name> *</type><name>count</name> <init>= <expr>(<name>PRUint32</name> *) <name>closure</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>data</name>-&gt;<name>mNeedsPersisting</name></name> &amp;&amp; !<name><name>data</name>-&gt;<name>mSaved</name></name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr>(*<name>count</name>)++</expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsWebBrowserPersist</name>::<name>EnumPersistURIs</name></name><parameter_list>(<param><decl><type><name>nsHashKey</name> *</type><name>aKey</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aData</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>closure</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>URIData</name> *</type><name>data</name> <init>= <expr>(<name>URIData</name> *) <name>aData</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name><name>data</name>-&gt;<name>mNeedsPersisting</name></name> || <name><name>data</name>-&gt;<name>mSaved</name></name></expr>)</condition><then>
    <block>{
        <return>return <expr><name>PR_TRUE</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>nsWebBrowserPersist</name> *</type><name>pthis</name> <init>= <expr>(<name>nsWebBrowserPersist</name> *) <name>closure</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

    <comment type="line">// Create a URI from the key</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>NS_NewURI</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, 
                   <argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr>((<name>nsCStringKey</name> *) <name>aKey</name>)-&gt;<call><name>GetString</name><argument_list>()</argument_list></call></expr></argument>,
                                      <argument><expr>((<name>nsCStringKey</name> *) <name>aKey</name>)-&gt;<call><name>GetStringLength</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><call><name><name>data</name>-&gt;<name>mCharset</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make a URI to save the data to</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>fileAsURI</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>data</name>-&gt;<name>mDataPath</name>-&gt;<name>Clone</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>fileAsURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>pthis</name>-&gt;<name>AppendPathToURI</name></name><argument_list>(<argument><expr><name>fileAsURI</name></expr></argument>, <argument><expr><name><name>data</name>-&gt;<name>mFilename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rv</name> = <call><name><name>pthis</name>-&gt;<name>SaveURIInternal</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>fileAsURI</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// if SaveURIInternal fails, then it will have called EndDownload,</comment>
    <comment type="line">// which means that |aData| is no longer valid memory.  we MUST bail.</comment>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>rv</name> == <name>NS_OK</name></expr>)</condition><then>
    <block>{
        <comment type="line">// Store the actual object because once it's persisted this</comment>
        <comment type="line">// will be fixed up with the right file extension.</comment>

        <expr_stmt><expr><name><name>data</name>-&gt;<name>mFile</name></name> = <name>fileAsURI</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name>-&gt;<name>mSaved</name></name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><name><name>data</name>-&gt;<name>mNeedsFixup</name></name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name><name>pthis</name>-&gt;<name>mSerializingOutput</name></name></expr>)</condition><then>
        <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

    <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsWebBrowserPersist</name>::<name>EnumCleanupOutputMap</name></name><parameter_list>(<param><decl><type><name>nsHashKey</name> *</type><name>aKey</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aData</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>closure</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>keyPtr</name></decl>;</decl_stmt>
    <expr_stmt><expr>((<name>nsMyISupportsKey</name> *) <name>aKey</name>)-&gt;<call><name>GetISupports</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>keyPtr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIChannel</name></expr></argument>&gt;</argument_list></name></type> <name>channel</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>keyPtr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>channel</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name><name>channel</name>-&gt;<name>Cancel</name></name><argument_list>(<argument><expr><name>NS_BINDING_ABORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <decl_stmt><decl><type><name>OutputData</name> *</type><name>data</name> <init>= <expr>(<name>OutputData</name> *) <name>aData</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>data</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr>delete <name>data</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>


<function><type><name>PRBool</name></type>
<name><name>nsWebBrowserPersist</name>::<name>EnumCleanupURIMap</name></name><parameter_list>(<param><decl><type><name>nsHashKey</name> *</type><name>aKey</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aData</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>closure</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>URIData</name> *</type><name>data</name> <init>= <expr>(<name>URIData</name> *) <name>aData</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>data</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr>delete <name>data</name></expr>;</expr_stmt> <comment type="line">// Delete data associated with key</comment>
    }</block></then></if>
    <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>


<function><type><name>PRBool</name></type>
<name><name>nsWebBrowserPersist</name>::<name>EnumCleanupUploadList</name></name><parameter_list>(<param><decl><type><name>nsHashKey</name> *</type><name>aKey</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aData</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>closure</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>keyPtr</name></decl>;</decl_stmt>
    <expr_stmt><expr>((<name>nsMyISupportsKey</name> *) <name>aKey</name>)-&gt;<call><name>GetISupports</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>keyPtr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIChannel</name></expr></argument>&gt;</argument_list></name></type> <name>channel</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>keyPtr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>channel</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name><name>channel</name>-&gt;<name>Cancel</name></name><argument_list>(<argument><expr><name>NS_BINDING_ABORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <decl_stmt><decl><type><name>UploadData</name> *</type><name>data</name> <init>= <expr>(<name>UploadData</name> *) <name>aData</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>data</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr>delete <name>data</name></expr>;</expr_stmt> <comment type="line">// Delete data associated with key</comment>
    }</block></then></if>
    <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>


<function><type><name>PRBool</name></type>
<name><name>nsWebBrowserPersist</name>::<name>GetQuotedAttributeValue</name></name><parameter_list>(
    <param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aSource</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aAttribute</name></decl></param>, <param><decl><type><name>nsAString</name> &amp;</type><name>aValue</name></decl></param>)</parameter_list>
<block>{  
    <comment type="line">// NOTE: This code was lifted verbatim from nsParserUtils.cpp</comment>
    <expr_stmt><expr><call><name><name>aValue</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsAString</name>::<name>const_iterator</name></name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>aSource</name>.<name>BeginReading</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aSource</name>.<name>EndReading</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name><name>nsAString</name>::<name>const_iterator</name></name></type> <name>iter</name><parameter_list>(<param><decl><type><name>end</name></type></decl></param>)</parameter_list>;</function_decl>

    <while>while <condition>(<expr><name>start</name> != <name>end</name></expr>)</condition> <block>{
        <if>if <condition>(<expr><call><name>FindInReadable</name><argument_list>(<argument><expr><name>aAttribute</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <comment type="line">// walk past any whitespace</comment>
            <while>while <condition>(<expr><name>iter</name> != <name>end</name> &amp;&amp; <call><name><name>nsCRT</name>::<name>IsAsciiSpace</name></name><argument_list>(<argument><expr>*<name>iter</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{
                <expr_stmt><expr>++<name>iter</name></expr>;</expr_stmt>
            }</block></while>

            <if>if <condition>(<expr><name>iter</name> == <name>end</name></expr>)</condition><then>
                <break>break;</break></then></if>
            
            <comment type="line">// valid name="value" pair?</comment>
            <if>if <condition>(<expr>*<name>iter</name> != '='</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>start</name> = <name>iter</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>iter</name> = <name>end</name></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <comment type="line">// move past the =</comment>
            <expr_stmt><expr>++<name>iter</name></expr>;</expr_stmt>

            <while>while <condition>(<expr><name>iter</name> != <name>end</name> &amp;&amp; <call><name><name>nsCRT</name>::<name>IsAsciiSpace</name></name><argument_list>(<argument><expr>*<name>iter</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{
                <expr_stmt><expr>++<name>iter</name></expr>;</expr_stmt>
            }</block></while>

            <if>if <condition>(<expr><name>iter</name> == <name>end</name></expr>)</condition><then>
                <break>break;</break></then></if>

            <decl_stmt><decl><type><name>PRUnichar</name></type> <name>q</name> <init>= <expr>*<name>iter</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>q</name> != '"' &amp;&amp; <name>q</name> != '\''</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>start</name> = <name>iter</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>iter</name> = <name>end</name></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>

            <comment type="line">// point to the first char of the value</comment>
            <expr_stmt><expr>++<name>iter</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>start</name> = <name>iter</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>FindCharInReadable</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>aValue</name> = <call><name>Substring</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>PR_TRUE</name></expr>;</return>
            }</block></then></if>

            <comment type="line">// we've run out of string.  Just return...</comment>
            <break>break;</break>
         }</block></then></if>
    }</block></while>
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type> <name><name>nsWebBrowserPersist</name>::<name>FixupXMLStyleSheetLink</name></name><parameter_list>(<param><decl><type><name>nsIDOMProcessingInstruction</name> *</type><name>aPI</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aHref</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>data</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>aPI</name>-&gt;<name>GetData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>href</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetQuotedAttributeValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"href"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Construct and set a new data value for the xml-stylesheet</comment>
    <if>if <condition>(<expr>!<call><name><name>aHref</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>href</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>nsAutoString</name></type> <name>alternate</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>nsAutoString</name></type> <name>charset</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>nsAutoString</name></type> <name>title</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>nsAutoString</name></type> <name>type</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>nsAutoString</name></type> <name>media</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>GetQuotedAttributeValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"alternate"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>alternate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GetQuotedAttributeValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"charset"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GetQuotedAttributeValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"title"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GetQuotedAttributeValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"type"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GetQuotedAttributeValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"media"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>NS_NAMED_LITERAL_STRING</name><argument_list>(<argument><expr><name>kCloseAttr</name></expr></argument>, <argument><expr>"\" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>nsAutoString</name></type> <name>newData</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>newData</name> += <call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"href=\""</expr></argument>)</argument_list></call> + <name>aHref</name> + <name>kCloseAttr</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>title</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>newData</name> += <call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"title=\""</expr></argument>)</argument_list></call> + <name>title</name> + <name>kCloseAttr</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>media</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>newData</name> += <call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"media=\""</expr></argument>)</argument_list></call> + <name>media</name> + <name>kCloseAttr</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>type</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>newData</name> += <call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"type=\""</expr></argument>)</argument_list></call> + <name>type</name> + <name>kCloseAttr</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>charset</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>newData</name> += <call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"charset=\""</expr></argument>)</argument_list></call> + <name>charset</name> + <name>kCloseAttr</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>alternate</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>newData</name> += <call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"alternate=\""</expr></argument>)</argument_list></call> + <name>alternate</name> + <name>kCloseAttr</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>newData</name>.<name>Truncate</name></name><argument_list>(<argument><expr><call><name><name>newData</name>.<name>Length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Remove the extra space on the end.</comment>
        <expr_stmt><expr><call><name><name>aPI</name>-&gt;<name>SetData</name></name><argument_list>(<argument><expr><name>newData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type> <name><name>nsWebBrowserPersist</name>::<name>GetXMLStyleSheetLink</name></name><parameter_list>(<param><decl><type><name>nsIDOMProcessingInstruction</name> *</type><name>aPI</name></decl></param>, <param><decl><type><name>nsAString</name> &amp;</type><name>aHref</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>data</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>aPI</name>-&gt;<name>GetData</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GetQuotedAttributeValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"href"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aHref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type> <name><name>nsWebBrowserPersist</name>::<name>OnWalkDOMNode</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name> *</type><name>aNode</name></decl></param>)</parameter_list>
<block>{
    <comment type="line">// Fixup xml-stylesheet processing instructions</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMProcessingInstruction</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsPI</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsPI</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>nsAutoString</name></type> <name>target</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>nodeAsPI</name>-&gt;<name>GetTarget</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>target</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"xml-stylesheet"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>nsAutoString</name></type> <name>href</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>GetXMLStyleSheetLink</name><argument_list>(<argument><expr><name>nodeAsPI</name></expr></argument>, <argument><expr><name>href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name><name>href</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>StoreURI</name><argument_list>(<argument><expr><call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><name>href</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// Test the node to see if it's an image, frame, iframe, css, js</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLImageElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsImage</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsImage</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>StoreURIAttribute</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>, <argument><expr>"src"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SVG</name></cpp:ifdef>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMSVGImageElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsSVGImage</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsSVGImage</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>StoreURIAttributeNS</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>, <argument><expr>"http://www.w3.org/1999/xlink"</expr></argument>, <argument><expr>"href"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// MOZ_SVG</comment>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLBodyElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsBody</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsBody</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>StoreURIAttribute</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>, <argument><expr>"background"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLTableElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsTable</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsTable</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>StoreURIAttribute</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>, <argument><expr>"background"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLTableRowElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsTableRow</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsTableRow</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>StoreURIAttribute</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>, <argument><expr>"background"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLTableCellElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsTableCell</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsTableCell</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>StoreURIAttribute</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>, <argument><expr>"background"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLScriptElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsScript</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsScript</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>StoreURIAttribute</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>, <argument><expr>"src"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SVG</name></cpp:ifdef>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMSVGScriptElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsSVGScript</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsSVGScript</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>StoreURIAttributeNS</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>, <argument><expr>"http://www.w3.org/1999/xlink"</expr></argument>, <argument><expr>"href"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// MOZ_SVG</comment>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLEmbedElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsEmbed</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsEmbed</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>StoreURIAttribute</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>, <argument><expr>"src"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>
    
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLObjectElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsObject</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsObject</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>StoreURIAttribute</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>, <argument><expr>"data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLAppletElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsApplet</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsApplet</name></expr>)</condition><then>
    <block>{
        <comment type="line">// For an applet, relative URIs are resolved relative to the</comment>
        <comment type="line">// codebase (which is resolved relative to the base URI).</comment>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>oldBase</name> <init>= <expr><name>mCurrentBaseURI</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>nsAutoString</name></type> <name>codebase</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>nodeAsApplet</name>-&gt;<name>GetCodeBase</name></name><argument_list>(<argument><expr><name>codebase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>codebase</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>baseURI</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>NS_NewURI</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>baseURI</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>codebase</name></expr></argument>,
                      <argument><expr><call><name><name>mCurrentCharset</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mCurrentBaseURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>baseURI</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>mCurrentBaseURI</name> = <name>baseURI</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <decl_stmt><decl><type><name>URIData</name> *</type><name>archiveURIData</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>StoreURIAttribute</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>, <argument><expr>"archive"</expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr>&amp;<name>archiveURIData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// We only store 'code' locally if there is no 'archive',</comment>
        <comment type="line">// otherwise we assume the archive file(s) contains it (bug 430283).</comment>
        <if>if <condition>(<expr>!<name>archiveURIData</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>StoreURIAttribute</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>, <argument><expr>"code"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <comment type="line">// restore the base URI we really want to have</comment>
        <expr_stmt><expr><name>mCurrentBaseURI</name> = <name>oldBase</name></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>
    
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLLinkElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsLink</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsLink</name></expr>)</condition><then>
    <block>{
        <comment type="line">// Test if the link has a rel value indicating it to be a stylesheet</comment>
        <decl_stmt><decl><type><name>nsAutoString</name></type> <name>linkRel</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>nodeAsLink</name>-&gt;<name>GetRel</name></name><argument_list>(<argument><expr><name>linkRel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>linkRel</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name><name>nsReadingIterator</name><argument_list>&lt;<argument><expr><name>PRUnichar</name></expr></argument>&gt;</argument_list></name></type> <name>start</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>nsReadingIterator</name><argument_list>&lt;<argument><expr><name>PRUnichar</name></expr></argument>&gt;</argument_list></name></type> <name>end</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>nsReadingIterator</name><argument_list>&lt;<argument><expr><name>PRUnichar</name></expr></argument>&gt;</argument_list></name></type> <name>current</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>linkRel</name>.<name>BeginReading</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>linkRel</name>.<name>EndReading</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Walk through space delimited string looking for "stylesheet"</comment>
            <for>for (<init><expr><name>current</name> = <name>start</name></expr>;</init> <condition><expr><name>current</name> != <name>end</name></expr>;</condition> <incr><expr>++<name>current</name></expr></incr>)
            <block>{
                <comment type="line">// Ignore whitespace</comment>
                <if>if <condition>(<expr><call><name><name>nsCRT</name>::<name>IsAsciiSpace</name></name><argument_list>(<argument><expr>*<name>current</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <continue>continue;</continue></then></if>

                <comment type="line">// Grab the next space delimited word</comment>
                <decl_stmt><decl><type><name><name>nsReadingIterator</name><argument_list>&lt;<argument><expr><name>PRUnichar</name></expr></argument>&gt;</argument_list></name></type> <name>startWord</name> <init>= <expr><name>current</name></expr></init></decl>;</decl_stmt>
                <do>do <block>{
                    <expr_stmt><expr>++<name>current</name></expr>;</expr_stmt>
                }</block> while <condition>(<expr><name>current</name> != <name>end</name> &amp;&amp; !<call><name><name>nsCRT</name>::<name>IsAsciiSpace</name></name><argument_list>(<argument><expr>*<name>current</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

                <comment type="line">// Store the link for fix up if it says "stylesheet"</comment>
                <if>if <condition>(<expr><call><name>Substring</name><argument_list>(<argument><expr><name>startWord</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call>
                        .<call><name>LowerCaseEqualsLiteral</name><argument_list>(<argument><expr>"stylesheet"</expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name>StoreURIAttribute</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>, <argument><expr>"href"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>NS_OK</name></expr>;</return>
                }</block></then></if>
                <if>if <condition>(<expr><name>current</name> == <name>end</name></expr>)</condition><then>
                    <break>break;</break></then></if>
            }</block></for>
        }</block></then></if>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLFrameElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsFrame</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsFrame</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>URIData</name> *</type><name>data</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>StoreURIAttribute</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>, <argument><expr>"src"</expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>data</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>data</name>-&gt;<name>mIsSubFrame</name></name> = <name>PR_TRUE</name></expr>;</expr_stmt>
            <comment type="line">// Save the frame content</comment>
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocument</name></expr></argument>&gt;</argument_list></name></type> <name>content</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>nodeAsFrame</name>-&gt;<name>GetContentDocument</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>content</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>SaveSubframeContent</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLIFrameElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsIFrame</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsIFrame</name> &amp;&amp; !(<name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_IGNORE_IFRAMES</name>)</expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>URIData</name> *</type><name>data</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>StoreURIAttribute</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>, <argument><expr>"src"</expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>data</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>data</name>-&gt;<name>mIsSubFrame</name></name> = <name>PR_TRUE</name></expr>;</expr_stmt>
            <comment type="line">// Save the frame content</comment>
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocument</name></expr></argument>&gt;</argument_list></name></type> <name>content</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>nodeAsIFrame</name>-&gt;<name>GetContentDocument</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>content</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>SaveSubframeContent</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLInputElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsInput</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsInput</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>StoreURIAttribute</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>, <argument><expr>"src"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>GetNodeToFixup</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name> *</type><name>aNodeIn</name></decl></param>, <param><decl><type><name>nsIDOMNode</name> **</type><name>aNodeOut</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!(<name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_FIXUP_ORIGINAL_DOM</name>)</expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>aNodeIn</name>-&gt;<name>CloneNode</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aNodeOut</name> = <name>aNodeIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLElement</name></expr></argument>&gt;</argument_list></name></type> <name>element</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>element</name></expr>)</condition><then> <block>{
        <comment type="line">// Make sure this is not XHTML</comment>
        <decl_stmt><decl><type><name>nsAutoString</name></type> <name>namespaceURI</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>element</name>-&gt;<name>GetNamespaceURI</name></name><argument_list>(<argument><expr><name>namespaceURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>namespaceURI</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// This is a tag-soup node.  It may have a _base_href attribute</comment>
            <comment type="line">// stuck on it by the parser, but since we're fixing up all URIs</comment>
            <comment type="line">// relative to the overall document base that will screw us up.</comment>
            <comment type="line">// Just remove the _base_href.</comment>
            <expr_stmt><expr><call><name><name>element</name>-&gt;<name>RemoveAttribute</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"_base_href"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>CloneNodeWithFixedUpAttributes</name></name><parameter_list>(
    <param><decl><type><name>nsIDOMNode</name> *</type><name>aNodeIn</name></decl></param>, <param><decl><type><name>PRBool</name> *</type><name>aSerializeCloneKids</name></decl></param>, <param><decl><type><name>nsIDOMNode</name> **</type><name>aNodeOut</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
    <expr_stmt><expr>*<name>aNodeOut</name> = <name>nsnull</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>aSerializeCloneKids</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

    <comment type="line">// Fixup xml-stylesheet processing instructions</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMProcessingInstruction</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsPI</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsPI</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>nsAutoString</name></type> <name>target</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>nodeAsPI</name>-&gt;<name>GetTarget</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>target</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"xml-stylesheet"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>rv</name> = <call><name>GetNodeToFixup</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aNodeOut</name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMProcessingInstruction</name></expr></argument>&gt;</argument_list></name></type> <name>outNode</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>nsAutoString</name></type> <name>href</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>GetXMLStyleSheetLink</name><argument_list>(<argument><expr><name>nodeAsPI</name></expr></argument>, <argument><expr><name>href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<call><name><name>href</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name>FixupURI</name><argument_list>(<argument><expr><name>href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>FixupXMLStyleSheetLink</name><argument_list>(<argument><expr><name>outNode</name></expr></argument>, <argument><expr><name>href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
    }</block></then></if>

    <comment type="line">// BASE elements are replaced by a comment so relative links are not hosed.</comment>

    <if>if <condition>(<expr>!(<name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_NO_BASE_TAG_MODIFICATIONS</name>)</expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLBaseElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsBase</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>nodeAsBase</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocument</name></expr></argument>&gt;</argument_list></name></type> <name>ownerDocument</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>nodeAsBase</name>-&gt;<name>GetOwnerDocument</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>ownerDocument</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ownerDocument</name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>nsAutoString</name></type> <name>href</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>nodeAsBase</name>-&gt;<name>GetHref</name></name><argument_list>(<argument><expr><name>href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Doesn't matter if this fails</comment>
                <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMComment</name></expr></argument>&gt;</argument_list></name></type> <name>comment</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>nsAutoString</name></type> <name>commentText</name></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>commentText</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>" base "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<call><name><name>href</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>commentText</name> += <call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"href=\""</expr></argument>)</argument_list></call> + <name>href</name> + <call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"\" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>rv</name> = <call><name><name>ownerDocument</name>-&gt;<name>CreateComment</name></name><argument_list>(<argument><expr><name>commentText</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>comment</name></expr>)</condition><then>
                <block>{
                    <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>comment</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
    }</block></then></if>

    <comment type="line">// Fix up href and file links in the elements</comment>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLAnchorElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsAnchor</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsAnchor</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>GetNodeToFixup</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aNodeOut</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>FixupAnchor</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLAreaElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsArea</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsArea</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>GetNodeToFixup</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aNodeOut</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>FixupAnchor</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLBodyElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsBody</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsBody</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>GetNodeToFixup</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aNodeOut</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>FixupNodeAttribute</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>, <argument><expr>"background"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLTableElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsTable</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsTable</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>GetNodeToFixup</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aNodeOut</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>FixupNodeAttribute</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>, <argument><expr>"background"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLTableRowElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsTableRow</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsTableRow</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>GetNodeToFixup</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aNodeOut</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>FixupNodeAttribute</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>, <argument><expr>"background"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLTableCellElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsTableCell</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsTableCell</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>GetNodeToFixup</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aNodeOut</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>FixupNodeAttribute</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>, <argument><expr>"background"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLImageElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsImage</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsImage</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>GetNodeToFixup</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aNodeOut</name></expr>)</condition><then>
        <block>{
            <comment type="line">// Disable image loads</comment>
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIImageLoadingContent</name></expr></argument>&gt;</argument_list></name></type> <name>imgCon</name> <init>=
                <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>imgCon</name></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>imgCon</name>-&gt;<name>SetLoadingEnabled</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <expr_stmt><expr><call><name>FixupAnchor</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FixupNodeAttribute</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>, <argument><expr>"src"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SVG</name></cpp:ifdef>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMSVGImageElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsSVGImage</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsSVGImage</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>GetNodeToFixup</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aNodeOut</name></expr>)</condition><then>
        <block>{
            <comment type="line">// Disable image loads</comment>
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIImageLoadingContent</name></expr></argument>&gt;</argument_list></name></type> <name>imgCon</name> <init>=
                <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>imgCon</name></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>imgCon</name>-&gt;<name>SetLoadingEnabled</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <comment type="line">// FixupAnchor(*aNodeOut);  // XXXjwatt: is this line needed?</comment>
            <expr_stmt><expr><call><name>FixupNodeAttributeNS</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>, <argument><expr>"http://www.w3.org/1999/xlink"</expr></argument>, <argument><expr>"href"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// MOZ_SVG</comment>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLScriptElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsScript</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsScript</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>GetNodeToFixup</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aNodeOut</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>FixupNodeAttribute</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>, <argument><expr>"src"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SVG</name></cpp:ifdef>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMSVGScriptElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsSVGScript</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsSVGScript</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>GetNodeToFixup</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aNodeOut</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>FixupNodeAttributeNS</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>, <argument><expr>"http://www.w3.org/1999/xlink"</expr></argument>, <argument><expr>"href"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// MOZ_SVG</comment>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLEmbedElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsEmbed</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsEmbed</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>GetNodeToFixup</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aNodeOut</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>FixupNodeAttribute</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>, <argument><expr>"src"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>
    
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLObjectElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsObject</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsObject</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>GetNodeToFixup</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aNodeOut</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>FixupNodeAttribute</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>, <argument><expr>"data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLAppletElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsApplet</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsApplet</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>GetNodeToFixup</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aNodeOut</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLAppletElement</name></expr></argument>&gt;</argument_list></name></type> <name>newApplet</name> <init>=
                <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// For an applet, relative URIs are resolved relative to the</comment>
            <comment type="line">// codebase (which is resolved relative to the base URI).</comment>
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>oldBase</name> <init>= <expr><name>mCurrentBaseURI</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>nsAutoString</name></type> <name>codebase</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>nodeAsApplet</name>-&gt;<name>GetCodeBase</name></name><argument_list>(<argument><expr><name>codebase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name><name>codebase</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>baseURI</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>NS_NewURI</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>baseURI</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>codebase</name></expr></argument>,
                          <argument><expr><call><name><name>mCurrentCharset</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mCurrentBaseURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>baseURI</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>mCurrentBaseURI</name> = <name>baseURI</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <comment type="line">// Unset the codebase too, since we'll correctly relativize the</comment>
            <comment type="line">// code and archive paths.</comment>
            <expr_stmt><expr><call><name><name>newApplet</name>-&gt;<name>RemoveAttribute</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"codebase"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FixupNodeAttribute</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>, <argument><expr>"code"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FixupNodeAttribute</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>, <argument><expr>"archive"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// restore the base URI we really want to have</comment>
            <expr_stmt><expr><name>mCurrentBaseURI</name> = <name>oldBase</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>
    
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLLinkElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsLink</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsLink</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>GetNodeToFixup</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aNodeOut</name></expr>)</condition><then>
        <block>{
            <comment type="line">// First see if the link represents linked content</comment>
            <expr_stmt><expr><name>rv</name> = <call><name>FixupNodeAttribute</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>, <argument><expr>"href"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <comment type="line">// Perhaps this link is actually an anchor to related content</comment>
                <expr_stmt><expr><call><name>FixupAnchor</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line">// TODO if "type" attribute == "text/css"</comment>
            <comment type="line">//        fixup stylesheet</comment>
        }</block></then></if>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLFrameElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsFrame</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsFrame</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>GetNodeToFixup</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aNodeOut</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>FixupNodeAttribute</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>, <argument><expr>"src"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLIFrameElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsIFrame</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsIFrame</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>GetNodeToFixup</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aNodeOut</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>FixupNodeAttribute</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>, <argument><expr>"src"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLInputElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsInput</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsInput</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>GetNodeToFixup</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aNodeOut</name></expr>)</condition><then>
        <block>{
            <comment type="line">// Disable image loads</comment>
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIImageLoadingContent</name></expr></argument>&gt;</argument_list></name></type> <name>imgCon</name> <init>=
                <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>imgCon</name></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>imgCon</name>-&gt;<name>SetLoadingEnabled</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <expr_stmt><expr><call><name>FixupNodeAttribute</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>, <argument><expr>"src"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>nsAutoString</name></type> <name>valueStr</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>NS_NAMED_LITERAL_STRING</name><argument_list>(<argument><expr><name>valueAttr</name></expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Update element node attributes with user-entered form state</comment>
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLInputElement</name></expr></argument>&gt;</argument_list></name></type> <name>outElt</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFormControl</name></expr></argument>&gt;</argument_list></name></type> <name>formControl</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><call><name><name>formControl</name>-&gt;<name>GetType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <case>case <expr><name>NS_FORM_INPUT_TEXT</name></expr>:
                    <expr_stmt><expr><call><name><name>nodeAsInput</name>-&gt;<name>GetValue</name></name><argument_list>(<argument><expr><name>valueStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// Avoid superfluous value="" serialization</comment>
                    <if>if <condition>(<expr><call><name><name>valueStr</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                      <expr_stmt><expr><call><name><name>outElt</name>-&gt;<name>RemoveAttribute</name></name><argument_list>(<argument><expr><name>valueAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                    <else>else
                      <expr_stmt><expr><call><name><name>outElt</name>-&gt;<name>SetAttribute</name></name><argument_list>(<argument><expr><name>valueAttr</name></expr></argument>, <argument><expr><name>valueStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
                    <break>break;</break>
                </case><case>case <expr><name>NS_FORM_INPUT_CHECKBOX</name></expr>:
                </case><case>case <expr><name>NS_FORM_INPUT_RADIO</name></expr>:
                    <decl_stmt><decl><type><name>PRBool</name></type> <name>checked</name></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>nodeAsInput</name>-&gt;<name>GetChecked</name></name><argument_list>(<argument><expr>&amp;<name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>outElt</name>-&gt;<name>SetDefaultChecked</name></name><argument_list>(<argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><default>default:
                    <break>break;</break>
            </default>}</block></switch>
        }</block></then></if>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLTextAreaElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsTextArea</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsTextArea</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>GetNodeToFixup</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aNodeOut</name></expr>)</condition><then>
        <block>{
            <comment type="line">// Tell the document encoder to serialize the text child we create below</comment>
            <expr_stmt><expr>*<name>aSerializeCloneKids</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>nsAutoString</name></type> <name>valueStr</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>nodeAsTextArea</name>-&gt;<name>GetValue</name></name><argument_list>(<argument><expr><name>valueStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOM3Node</name></expr></argument>&gt;</argument_list></name></type> <name>out</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>out</name>-&gt;<name>SetTextContent</name></name><argument_list>(<argument><expr><name>valueStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLOptionElement</name></expr></argument>&gt;</argument_list></name></type> <name>nodeAsOption</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>nodeAsOption</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>GetNodeToFixup</name><argument_list>(<argument><expr><name>aNodeIn</name></expr></argument>, <argument><expr><name>aNodeOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>aNodeOut</name></expr>)</condition><then>
        <block>{          
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLOptionElement</name></expr></argument>&gt;</argument_list></name></type> <name>outElt</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr>*<name>aNodeOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PRBool</name></type> <name>selected</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>nodeAsOption</name>-&gt;<name>GetSelected</name></name><argument_list>(<argument><expr>&amp;<name>selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>outElt</name>-&gt;<name>SetDefaultSelected</name></name><argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>StoreURI</name></name><parameter_list>(
    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aURI</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aNeedsPersisting</name></decl></param>, <param><decl><type><name>URIData</name> **</type><name>aData</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_NewURI</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>mCurrentCharset</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><name>mCurrentBaseURI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>StoreURI</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>aNeedsPersisting</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>StoreURI</name></name><parameter_list>(
    <param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aNeedsPersisting</name></decl></param>, <param><decl><type><name>URIData</name> **</type><name>aData</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>aData</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr>*<name>aData</name> = <name>nsnull</name></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">// Test if this URI should be persisted. By default</comment>
    <comment type="line">// we should assume the URI  is persistable.</comment>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>doNotPersistURI</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_URIChainHasFlags</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>,
                                      <argument><expr><name><name>nsIProtocolHandler</name>::<name>URI_NON_PERSISTABLE</name></name></expr></argument>,
                                      <argument><expr>&amp;<name>doNotPersistURI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>doNotPersistURI</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>doNotPersistURI</name></expr>)</condition><then>
    <block>{
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>URIData</name> *</type><name>data</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>MakeAndStoreLocalFilenameInURIMap</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><name>aNeedsPersisting</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>aData</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr>*<name>aData</name> = <name>data</name></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>StoreURIAttributeNS</name></name><parameter_list>(
    <param><decl><type><name>nsIDOMNode</name> *</type><name>aNode</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aNamespaceURI</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aAttribute</name></decl></param>,
    <param><decl><type><name>PRBool</name></type> <name>aNeedsPersisting</name></decl></param>, <param><decl><type><name>URIData</name> **</type><name>aData</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aNamespaceURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Find the named URI attribute on the (element) node and store</comment>
    <comment type="line">// a reference to the URI that maps onto a local file name</comment>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNamedNodeMap</name></expr></argument>&gt;</argument_list></name></type> <name>attrMap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>attrNode</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>aNode</name>-&gt;<name>GetAttributes</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>attrMap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>NS_ConvertASCIItoUTF16</name></type> <name>namespaceURI</name><parameter_list>(<param><decl><type><name>aNamespaceURI</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>NS_ConvertASCIItoUTF16</name></type> <name>attribute</name><parameter_list>(<param><decl><type><name>aAttribute</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>rv</name> = <call><name><name>attrMap</name>-&gt;<name>GetNamedItemNS</name></name><argument_list>(<argument><expr><name>namespaceURI</name></expr></argument>, <argument><expr><name>attribute</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>attrNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>attrNode</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>nsAutoString</name></type> <name>oldValue</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>attrNode</name>-&gt;<name>GetNodeValue</name></name><argument_list>(<argument><expr><name>oldValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>oldValue</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <function_decl><type><name>NS_ConvertUTF16toUTF8</name></type> <name>oldCValue</name><parameter_list>(<param><decl><type><name>oldValue</name></type></decl></param>)</parameter_list>;</function_decl>
            <return>return <expr><call><name>StoreURI</name><argument_list>(<argument><expr><call><name><name>oldCValue</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>aNeedsPersisting</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>FixupURI</name></name><parameter_list>(<param><decl><type><name>nsAString</name> &amp;</type><name>aURI</name></decl></param>)</parameter_list>
<block>{
    <comment type="line">// get the current location of the file (absolutized)</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_NewURI</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aURI</name></expr></argument>, 
                            <argument><expr><call><name><name>mCurrentCharset</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mCurrentBaseURI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>spec</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>uri</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Search for the URI in the map and replace it with the local file</comment>
    <decl_stmt><decl><type><name>nsCStringKey</name></type> <name>key</name><argument_list>(<argument><expr><call><name><name>spec</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name><name>mURIMap</name>.<name>Exists</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>URIData</name> *</type><name>data</name> <init>= <expr>(<name>URIData</name> *) <call><name><name>mURIMap</name>.<name>Get</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name><name>data</name>-&gt;<name>mNeedsFixup</name></name></expr>)</condition><then>
    <block>{
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>fileAsURI</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>data</name>-&gt;<name>mFile</name></name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name><name>data</name>-&gt;<name>mFile</name>-&gt;<name>Clone</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>fileAsURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name><name>data</name>-&gt;<name>mDataPath</name>-&gt;<name>Clone</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>fileAsURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name>AppendPathToURI</name><argument_list>(<argument><expr><name>fileAsURI</name></expr></argument>, <argument><expr><name><name>data</name>-&gt;<name>mFilename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>newValue</name></decl>;</decl_stmt>

    <comment type="line">// remove username/password if present</comment>
    <expr_stmt><expr><call><name><name>fileAsURI</name>-&gt;<name>SetUserPass</name></name><argument_list>(<argument><expr><call><name>EmptyCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// reset node attribute </comment>
    <comment type="line">// Use relative or absolute links</comment>
    <if>if <condition>(<expr><name><name>data</name>-&gt;<name>mDataPathIsRelative</name></name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURL</name></expr></argument>&gt;</argument_list></name></type> <name>url</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>fileAsURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>url</name></expr>)</condition><then>
          <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
          
        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>filename</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>url</name>-&gt;<name>GetFileName</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <function_decl><type><name>nsCAutoString</name></type> <name>rawPathURL</name><parameter_list>(<param><decl><type><name><name>data</name>-&gt;<name>mRelativePathToData</name></name></type></decl></param>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name><name>rawPathURL</name>.<name>Append</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>buf</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>AppendUTF8toUTF16</name><argument_list>(<argument><expr><call><name>NS_EscapeURL</name><argument_list>(<argument><expr><name>rawPathURL</name></expr></argument>, <argument><expr><name>esc_FilePath</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
                          <argument><expr><name>newValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>fileurl</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fileAsURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>fileurl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>AppendUTF8toUTF16</name><argument_list>(<argument><expr><name>fileurl</name></expr></argument>, <argument><expr><name>newValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <if>if <condition>(<expr><name><name>data</name>-&gt;<name>mIsSubFrame</name></name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name><name>newValue</name>.<name>Append</name></name><argument_list>(<argument><expr><name><name>data</name>-&gt;<name>mSubFrameExt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>aURI</name> = <name>newValue</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>FixupNodeAttributeNS</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name> *</type><name>aNode</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aNamespaceURI</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aAttribute</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aNamespaceURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Find the named URI attribute on the (element) node and change it to reference</comment>
    <comment type="line">// a local file.</comment>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNamedNodeMap</name></expr></argument>&gt;</argument_list></name></type> <name>attrMap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>attrNode</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>aNode</name>-&gt;<name>GetAttributes</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>attrMap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>NS_ConvertASCIItoUTF16</name></type> <name>attribute</name><parameter_list>(<param><decl><type><name>aAttribute</name></type></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>NS_ConvertASCIItoUTF16</name></type> <name>namespaceURI</name><parameter_list>(<param><decl><type><name>aNamespaceURI</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>rv</name> = <call><name><name>attrMap</name>-&gt;<name>GetNamedItemNS</name></name><argument_list>(<argument><expr><name>namespaceURI</name></expr></argument>, <argument><expr><name>attribute</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>attrNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>attrNode</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>nsString</name></type> <name>uri</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>attrNode</name>-&gt;<name>GetNodeValue</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name>FixupURI</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>attrNode</name>-&gt;<name>SetNodeValue</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>FixupAnchor</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name> *</type><name>aNode</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNamedNodeMap</name></expr></argument>&gt;</argument_list></name></type> <name>attrMap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>attrNode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>aNode</name>-&gt;<name>GetAttributes</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>attrMap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_DONT_FIXUP_LINKS</name></expr>)</condition><then>
    <block>{
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// Make all anchor links absolute so they point off onto the Internet</comment>
    <decl_stmt><decl><type><name>nsString</name></type> <name>attribute</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"href"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>attrMap</name>-&gt;<name>GetNamedItem</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>attrNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>attrNode</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>nsString</name></type> <name>oldValue</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>attrNode</name>-&gt;<name>GetNodeValue</name></name><argument_list>(<argument><expr><name>oldValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <function_decl><type><name>NS_ConvertUTF16toUTF8</name></type> <name>oldCValue</name><parameter_list>(<param><decl><type><name>oldValue</name></type></decl></param>)</parameter_list>;</function_decl>

        <comment type="line">// Skip empty values and self-referencing bookmarks</comment>
        <if>if <condition>(<expr><call><name><name>oldCValue</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call> || <call><name><name>oldCValue</name>.<name>CharAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call> == '#'</expr>)</condition><then>
        <block>{
            <return>return <expr><name>NS_OK</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// if saving file to same location, we don't need to do any fixup</comment>
        <decl_stmt><decl><type><name>PRBool</name></type> <name>isEqual</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>mCurrentBaseURI</name>-&gt;<name>Equals</name></name><argument_list>(<argument><expr><name>mTargetBaseURI</name></expr></argument>, <argument><expr>&amp;<name>isEqual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
            &amp;&amp; <name>isEqual</name></expr>)</condition><then>
        <block>{
            <return>return <expr><name>NS_OK</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>relativeURI</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>relativeURI</name> = (<name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_FIXUP_LINKS_TO_DESTINATION</name>)
                      ? <name>mTargetBaseURI</name> : <name>mCurrentBaseURI</name></expr>;</expr_stmt>
        <comment type="line">// Make a new URI to replace the current one</comment>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>newURI</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name>NS_NewURI</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>newURI</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>oldCValue</name></expr></argument>, 
                       <argument><expr><call><name><name>mCurrentCharset</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>relativeURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; <name>newURI</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>newURI</name>-&gt;<name>SetUserPass</name></name><argument_list>(<argument><expr><call><name>EmptyCString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>uriSpec</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>newURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>uriSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>attrNode</name>-&gt;<name>SetNodeValue</name></name><argument_list>(<argument><expr><call><name>NS_ConvertUTF8toUTF16</name><argument_list>(<argument><expr><name>uriSpec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>StoreAndFixupStyleSheet</name></name><parameter_list>(<param><decl><type><name>nsIStyleSheet</name> *</type><name>aStyleSheet</name></decl></param>)</parameter_list>
<block>{
    <comment type="line">// TODO go through the style sheet fixing up all links</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsWebBrowserPersist</name>::<name>DocumentEncoderExists</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>aContentType</name></decl></param>)</parameter_list>
<block>{
    <comment type="line">// Check if there is an encoder for the desired content type.</comment>
    <function_decl><type><name>nsCAutoString</name></type> <name>contractID</name><parameter_list>(<param><decl><type><name>NS_DOC_ENCODER_CONTRACTID_BASE</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>AppendUTF16toUTF8</name><argument_list>(<argument><expr><name>aContentType</name></expr></argument>, <argument><expr><name>contractID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIComponentRegistrar</name></expr></argument>&gt;</argument_list></name></type> <name>registrar</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_GetComponentRegistrar</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>registrar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>registrar</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>PRBool</name></type> <name>result</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>registrar</name>-&gt;<name>IsContractIDRegistered</name></name><argument_list>(<argument><expr><call><name><name>contractID</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                        <argument><expr>&amp;<name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; <name>result</name></expr>)</condition><then>
        <block>{
            <return>return <expr><name>PR_TRUE</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>SaveSubframeContent</name></name><parameter_list>(
    <param><decl><type><name>nsIDOMDocument</name> *</type><name>aFrameContent</name></decl></param>, <param><decl><type><name>URIData</name> *</type><name>aData</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Extract the content type for the frame's contents.</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></type> <name>frameDoc</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aFrameContent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>frameDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>contentType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>frameDoc</name>-&gt;<name>GetContentType</name></name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsXPIDLString</name></type> <name>ext</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetExtensionForContentType</name><argument_list>(<argument><expr><call><name><name>contentType</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// We must always have an extension so we will try to re-assign</comment>
    <comment type="line">// the original extension if GetExtensionForContentType fails.</comment>
    <if>if <condition>(<expr><call><name><name>ext</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURL</name></expr></argument>&gt;</argument_list></name></type> <name>url</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name><name>frameDoc</name>-&gt;<name>GetDocumentURI</name></name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>extension</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>url</name>-&gt;<name>GetFileExtension</name></name><argument_list>(<argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>extension</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"htm"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mSubFrameExt</name>.<name>Assign</name></name><argument_list>(<argument><expr><call><name>PRUnichar</name><argument_list>(<argument><expr>'.'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>AppendUTF8toUTF16</name><argument_list>(<argument><expr><name>extension</name></expr></argument>, <argument><expr><name><name>aData</name>-&gt;<name>mSubFrameExt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mSubFrameExt</name>.<name>Assign</name></name><argument_list>(<argument><expr><call><name>PRUnichar</name><argument_list>(<argument><expr>'.'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mSubFrameExt</name>.<name>Append</name></name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <decl_stmt><decl><type><name>nsString</name></type> <name>filenameWithExt</name> <init>= <expr><name><name>aData</name>-&gt;<name>mFilename</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>filenameWithExt</name>.<name>Append</name></name><argument_list>(<argument><expr><name><name>aData</name>-&gt;<name>mSubFrameExt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Work out the path for the subframe</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>frameURI</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>mCurrentDataPath</name>-&gt;<name>Clone</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>frameURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>AppendPathToURI</name><argument_list>(<argument><expr><name>frameURI</name></expr></argument>, <argument><expr><name>filenameWithExt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Work out the path for the subframe data</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>frameDataURI</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>mCurrentDataPath</name>-&gt;<name>Clone</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>frameDataURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>nsAutoString</name></type> <name>newFrameDataPath</name><parameter_list>(<param><decl><type><name><name>aData</name>-&gt;<name>mFilename</name></name></type></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">// Append _data</comment>
    <expr_stmt><expr><call><name><name>newFrameDataPath</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>"_data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>AppendPathToURI</name><argument_list>(<argument><expr><name>frameDataURI</name></expr></argument>, <argument><expr><name>newFrameDataPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make frame document &amp; data path conformant and unique</comment>
    <expr_stmt><expr><name>rv</name> = <call><name>CalculateUniqueFilename</name><argument_list>(<argument><expr><name>frameURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>CalculateUniqueFilename</name><argument_list>(<argument><expr><name>frameDataURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>mCurrentThingsToPersist</name>++</expr>;</expr_stmt>

    <comment type="line">// We shouldn't use SaveDocumentInternal for the contents</comment>
    <comment type="line">// of frames that are not documents, e.g. images.</comment>
    <if>if <condition>(<expr><call><name>DocumentEncoderExists</name><argument_list>(<argument><expr><call><name><name>contentType</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>SaveDocumentInternal</name><argument_list>(<argument><expr><name>aFrameContent</name></expr></argument>, <argument><expr><name>frameURI</name></expr></argument>, <argument><expr><name>frameDataURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>StoreURI</name><argument_list>(<argument><expr><call><name><name>frameDoc</name>-&gt;<name>GetDocumentURI</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Store the updated uri to the frame</comment>
    <expr_stmt><expr><name><name>aData</name>-&gt;<name>mFile</name></name> = <name>frameURI</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mSubFrameExt</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// we already put this in frameURI</comment>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>CreateChannelFromURI</name></name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>, <param><decl><type><name>nsIChannel</name> **</type><name>aChannel</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr>*<name>aChannel</name> = <name>nsnull</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIIOService</name></expr></argument>&gt;</argument_list></name></type> <name>ioserv</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ioserv</name> = <call><name>do_GetIOService</name><argument_list>(<argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rv</name> = <call><name><name>ioserv</name>-&gt;<name>NewChannelFromURI</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><name>aChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr>*<name>aChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rv</name> = <call><name>(*<name>aChannel</name>)-&gt;<name>SetNotificationCallbacks</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIInterfaceRequestor</name> *</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function> 

<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>SaveDocumentWithFixup</name></name><parameter_list>(
    <param><decl><type><name>nsIDOMDocument</name> *</type><name>aDocument</name></decl></param>, <param><decl><type><name>nsIDocumentEncoderNodeFixup</name> *</type><name>aNodeFixup</name></decl></param>,
    <param><decl><type><name>nsIURI</name> *</type><name>aFile</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aReplaceExisting</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsACString</name> &amp;</type><name>aFormatType</name></decl></param>,
    <param><decl><type><specifier>const</specifier> <name>nsCString</name> &amp;</type><name>aSaveCharset</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aFlags</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>nsresult</name></type>  <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name></type> <name>localFile</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetLocalFileFromURI</name><argument_list>(<argument><expr><name>aFile</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>localFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>localFile</name></expr>)</condition><then>
    <block>{
        <comment type="line">// if we're not replacing an existing file but the file</comment>
        <comment type="line">// exists, something is wrong</comment>
        <decl_stmt><decl><type><name>PRBool</name></type> <name>fileExists</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name><name>localFile</name>-&gt;<name>Exists</name></name><argument_list>(<argument><expr>&amp;<name>fileExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<name>aReplaceExisting</name> &amp;&amp; <name>fileExists</name></expr>)</condition><then>
            <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>                <comment type="line">// where are the file I/O errors?</comment>
    }</block></then></if>
    
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIOutputStream</name></expr></argument>&gt;</argument_list></name></type> <name>outputStream</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>MakeOutputStream</name><argument_list>(<argument><expr><name>aFile</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>outputStream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>SendErrorStatusChange</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>outputStream</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Get a document encoder instance</comment>
    <function_decl><type><name>nsCAutoString</name></type> <name>contractID</name><parameter_list>(<param><decl><type><name>NS_DOC_ENCODER_CONTRACTID_BASE</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name><name>contractID</name>.<name>Append</name></name><argument_list>(<argument><expr><name>aFormatType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocumentEncoder</name></expr></argument>&gt;</argument_list></name></type> <name>encoder</name> <init>= <expr><call><name>do_CreateInstance</name><argument_list>(<argument><expr><call><name><name>contractID</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>NS_ConvertASCIItoUTF16</name></type> <name>newContentType</name><parameter_list>(<param><decl><type><name>aFormatType</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>rv</name> = <call><name><name>encoder</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>, <argument><expr><name>newContentType</name></expr></argument>, <argument><expr><name>aFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>mTargetBaseURI</name> = <name>aFile</name></expr>;</expr_stmt>

    <comment type="line">// Set the node fixup callback</comment>
    <expr_stmt><expr><call><name><name>encoder</name>-&gt;<name>SetNodeFixup</name></name><argument_list>(<argument><expr><name>aNodeFixup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>mWrapColumn</name> &amp;&amp; (<name>aFlags</name> &amp; <name>ENCODE_FLAGS_WRAP</name>)</expr>)</condition><then>
        <expr_stmt><expr><call><name><name>encoder</name>-&gt;<name>SetWrapColumn</name></name><argument_list>(<argument><expr><name>mWrapColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <function_decl><type><name>nsCAutoString</name></type> <name>charsetStr</name><parameter_list>(<param><decl><type><name>aSaveCharset</name></type></decl></param>)</parameter_list>;</function_decl>
    <if>if <condition>(<expr><call><name><name>charsetStr</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></type> <name>doc</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr>"Need a document"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>charsetStr</name> = <call><name><name>doc</name>-&gt;<name>GetDocumentCharacterSet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>rv</name> = <call><name><name>encoder</name>-&gt;<name>SetCharset</name></name><argument_list>(<argument><expr><name>charsetStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rv</name> = <call><name><name>encoder</name>-&gt;<name>EncodeToStream</name></name><argument_list>(<argument><expr><name>outputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if>if <condition>(<expr>!<name>localFile</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIStorageStream</name></expr></argument>&gt;</argument_list></name></type> <name>storStream</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>outputStream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>storStream</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>outputStream</name>-&gt;<name>Close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rv</name> = <call><name>StartUpload</name><argument_list>(<argument><expr><name>storStream</name></expr></argument>, <argument><expr><name>aFile</name></expr></argument>, <argument><expr><name>aFormatType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_OS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <else>else
    <block>{
        <comment type="line">// close the stream, then tag the file it created with its source URI</comment>
        <expr_stmt><expr><call><name><name>outputStream</name>-&gt;<name>Close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFileOS2</name></expr></argument>&gt;</argument_list></name></type> <name>localFileOS2</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>localFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>localFileOS2</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>url</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mCurrentBaseURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>localFileOS2</name>-&gt;<name>SetFileSource</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>


<comment type="line">// we store the current location as the key (absolutized version of domnode's attribute's value)</comment>
<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>MakeAndStoreLocalFilenameInURIMap</name></name><parameter_list>(
    <param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aNeedsPersisting</name></decl></param>, <param><decl><type><name>URIData</name> **</type><name>aData</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>spec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>aURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create a sensibly named filename for the URI and store in the URI map</comment>
    <decl_stmt><decl><type><name>nsCStringKey</name></type> <name>key</name><argument_list>(<argument><expr><call><name><name>spec</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>mURIMap</name>.<name>Exists</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <if>if <condition>(<expr><name>aData</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr>*<name>aData</name> = (<name>URIData</name> *) <call><name><name>mURIMap</name>.<name>Get</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// Create a unique file name for the uri</comment>
    <decl_stmt><decl><type><name>nsString</name></type> <name>filename</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>MakeFilenameFromURI</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Store the file name</comment>
    <decl_stmt><decl><type><name>URIData</name> *</type><name>data</name> <init>= <expr>new <name>URIData</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>data</name>-&gt;<name>mNeedsPersisting</name></name> = <name>aNeedsPersisting</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name>-&gt;<name>mNeedsFixup</name></name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name>-&gt;<name>mFilename</name></name> = <name>filename</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name>-&gt;<name>mSaved</name></name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name>-&gt;<name>mIsSubFrame</name></name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name>-&gt;<name>mDataPath</name></name> = <name>mCurrentDataPath</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name>-&gt;<name>mDataPathIsRelative</name></name> = <name>mCurrentDataPathIsRelative</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name>-&gt;<name>mRelativePathToData</name></name> = <name>mCurrentRelativePathToData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name>-&gt;<name>mCharset</name></name> = <name>mCurrentCharset</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>aNeedsPersisting</name></expr>)</condition><then>
        <expr_stmt><expr><name>mCurrentThingsToPersist</name>++</expr>;</expr_stmt></then></if>

    <expr_stmt><expr><call><name><name>mURIMap</name>.<name>Put</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>aData</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr>*<name>aData</name> = <name>data</name></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// Ordered so that typical documents work fastest.</comment>
<comment type="line">//                                    strlen("blockquote")==10</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>kSpecialXHTMLTags</name><index>[]</index><index>[<expr>11</expr>]</index></name> <init>= <expr><block>{
    <expr>"body"</expr>,
    <expr>"head"</expr>,
    <expr>"img"</expr>,
    <expr>"script"</expr>,
    <expr>"a"</expr>,
    <expr>"area"</expr>,
    <expr>"link"</expr>,
    <expr>"input"</expr>,
    <expr>"frame"</expr>,
    <expr>"iframe"</expr>,
    <expr>"object"</expr>,
    <expr>"applet"</expr>,
    <expr>"form"</expr>,
    <expr>"blockquote"</expr>,
    <expr>"q"</expr>,
    <expr>"del"</expr>,
    <expr>"ins"</expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>PRBool</name></type> <name>IsSpecialXHTMLTag</name><parameter_list>(<param><decl><type><name>nsIDOMNode</name> *</type><name>aNode</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>tmp</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>aNode</name>-&gt;<name>GetNamespaceURI</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name><name>tmp</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"http://www.w3.org/1999/xhtml"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name><name>aNode</name>-&gt;<name>GetLocalName</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><decl><type><name>PRInt32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name>NS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>kSpecialXHTMLTags</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr><call><name><name>tmp</name>.<name>EqualsASCII</name></name><argument_list>(<argument><expr><name><name>kSpecialXHTMLTags</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <comment type="line">// XXX This element MAY have URI attributes, but</comment>
            <comment type="line">//     we are not actually checking if they are present.</comment>
            <comment type="line">//     That would slow us down further, and I am not so sure</comment>
            <comment type="line">//     how important that would be.</comment>
            <return>return <expr><name>PR_TRUE</name></expr>;</return>
        }</block></then></if>
    }</block></for>

    <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PRBool</name></type> <name>HasSpecialXHTMLTags</name><parameter_list>(<param><decl><type><name>nsIDOMNode</name> *</type><name>aParent</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><call><name>IsSpecialXHTMLTag</name><argument_list>(<argument><expr><name>aParent</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>PR_TRUE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNodeList</name></expr></argument>&gt;</argument_list></name></type> <name>list</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>aParent</name>-&gt;<name>GetChildNodes</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>list</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>PRUint32</name></type> <name>count</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>list</name>-&gt;<name>GetLength</name></name><argument_list>(<argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PRUint32</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>node</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>list</name>-&gt;<name>Item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>node</name></expr>)</condition><then>
                <break>break;</break></then></if>
            <decl_stmt><decl><type><name>PRUint16</name></type> <name>nodeType</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>node</name>-&gt;<name>GetNodeType</name></name><argument_list>(<argument><expr>&amp;<name>nodeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>nodeType</name> == <name><name>nsIDOMNode</name>::<name>ELEMENT_NODE</name></name></expr>)</condition><then> <block>{
                <return>return <expr><call><name>HasSpecialXHTMLTags</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
        }</block></for>
    }</block></then></if>

    <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PRBool</name></type> <name>NeedXHTMLBaseTag</name><parameter_list>(<param><decl><type><name>nsIDOMDocument</name> *</type><name>aDocument</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>docElement</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>aDocument</name>-&gt;<name>GetDocumentElement</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>docElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>node</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>docElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>node</name></expr>)</condition><then>
    <block>{
        <return>return <expr><call><name>HasSpecialXHTMLTags</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<comment type="line">// Set document base. This could create an invalid XML document (still well-formed).</comment>
<function><type><name>nsresult</name></type>
<name><name>nsWebBrowserPersist</name>::<name>SetDocumentBase</name></name><parameter_list>(
    <param><decl><type><name>nsIDOMDocument</name> *</type><name>aDocument</name></decl></param>, <param><decl><type><name>nsIURI</name> *</type><name>aBaseURI</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>mPersistFlags</name> &amp; <name>PERSIST_FLAGS_NO_BASE_TAG_MODIFICATIONS</name></expr>)</condition><then>
    <block>{
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aBaseURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMXMLDocument</name></expr></argument>&gt;</argument_list></name></type> <name>xmlDoc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLDocument</name></expr></argument>&gt;</argument_list></name></type> <name>htmlDoc</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>htmlDoc</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>xmlDoc</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>xmlDoc</name></expr>)</condition><then>
        <block>{
            <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>NS_NAMED_LITERAL_STRING</name><argument_list>(<argument><expr><name>kXHTMLNS</name></expr></argument>, <argument><expr>"http://www.w3.org/1999/xhtml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_NAMED_LITERAL_STRING</name><argument_list>(<argument><expr><name>kHead</name></expr></argument>, <argument><expr>"head"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Find the head element</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>headElement</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNodeList</name></expr></argument>&gt;</argument_list></name></type> <name>headList</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>xmlDoc</name></expr>)</condition><then>
    <block>{
        <comment type="line">// First see if there is XHTML content that needs base </comment>
        <comment type="line">// tags.</comment>
        <if>if <condition>(<expr>!<call><name>NeedXHTMLBaseTag</name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

        <expr_stmt><expr><call><name><name>aDocument</name>-&gt;<name>GetElementsByTagNameNS</name></name><argument_list>(
            <argument><expr><name>kXHTMLNS</name></expr></argument>,
            <argument><expr><name>kHead</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>headList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><call><name><name>aDocument</name>-&gt;<name>GetElementsByTagName</name></name><argument_list>(
            <argument><expr><name>kHead</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>headList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <if>if <condition>(<expr><name>headList</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>headNode</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>headList</name>-&gt;<name>Item</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>headNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>headElement</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>headNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr>!<name>headElement</name></expr>)</condition><then>
    <block>{
        <comment type="line">// Create head and insert as first element</comment>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>firstChildNode</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>newNode</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>xmlDoc</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>aDocument</name>-&gt;<name>CreateElementNS</name></name><argument_list>(
                <argument><expr><name>kXHTMLNS</name></expr></argument>,
                <argument><expr><name>kHead</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>headElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>aDocument</name>-&gt;<name>CreateElement</name></name><argument_list>(
                <argument><expr><name>kHead</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>headElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>documentElement</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>aDocument</name>-&gt;<name>GetDocumentElement</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>documentElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>documentElement</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>documentElement</name>-&gt;<name>GetFirstChild</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>firstChildNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>documentElement</name>-&gt;<name>InsertBefore</name></name><argument_list>(<argument><expr><name>headElement</name></expr></argument>, <argument><expr><name>firstChildNode</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>newNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <if>if <condition>(<expr>!<name>headElement</name></expr>)</condition><then>
    <block>{
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// Find or create the BASE element</comment>
    <expr_stmt><expr><call><name>NS_NAMED_LITERAL_STRING</name><argument_list>(<argument><expr><name>kBase</name></expr></argument>, <argument><expr>"base"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>baseElement</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNodeList</name></expr></argument>&gt;</argument_list></name></type> <name>baseList</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>xmlDoc</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name><name>headElement</name>-&gt;<name>GetElementsByTagNameNS</name></name><argument_list>(
            <argument><expr><name>kXHTMLNS</name></expr></argument>,
            <argument><expr><name>kBase</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>baseList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><call><name><name>headElement</name>-&gt;<name>GetElementsByTagName</name></name><argument_list>(
            <argument><expr><name>kBase</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>baseList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <if>if <condition>(<expr><name>baseList</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>baseNode</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>baseList</name>-&gt;<name>Item</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>baseElement</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>baseNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">// Add the BASE element</comment>
    <if>if <condition>(<expr>!<name>baseElement</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>newNode</name></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>xmlDoc</name></expr>)</condition><then>
      <block>{
          <expr_stmt><expr><call><name><name>aDocument</name>-&gt;<name>CreateElementNS</name></name><argument_list>(
              <argument><expr><name>kXHTMLNS</name></expr></argument>,
              <argument><expr><name>kBase</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>baseElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then>
      <else>else
      <block>{
          <expr_stmt><expr><call><name><name>aDocument</name>-&gt;<name>CreateElement</name></name><argument_list>(
              <argument><expr><name>kBase</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>baseElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
      <expr_stmt><expr><call><name><name>headElement</name>-&gt;<name>AppendChild</name></name><argument_list>(<argument><expr><name>baseElement</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>newNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr>!<name>baseElement</name></expr>)</condition><then>
    <block>{
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>uriSpec</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>aBaseURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>uriSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>NS_ConvertUTF8toUTF16</name></type> <name>href</name><parameter_list>(<param><decl><type><name>uriSpec</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name><name>baseElement</name>-&gt;<name>SetAttribute</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"href"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// Decide if we need to apply conversion to the passed channel.</comment>
<function><type><name>void</name></type> <name><name>nsWebBrowserPersist</name>::<name>SetApplyConversionIfNeeded</name></name><parameter_list>(<param><decl><type><name>nsIChannel</name> *</type><name>aChannel</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIEncodedChannel</name></expr></argument>&gt;</argument_list></name></type> <name>encChannel</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aChannel</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return;</return></then></if>

    <comment type="line">// Set the default conversion preference:</comment>
    <expr_stmt><expr><call><name><name>encChannel</name>-&gt;<name>SetApplyConversion</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>thisURI</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>aChannel</name>-&gt;<name>GetURI</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>thisURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURL</name></expr></argument>&gt;</argument_list></name></type> <name>sourceURL</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>thisURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>sourceURL</name></expr>)</condition><then>
        <return>return;</return></then></if>
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>extension</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>sourceURL</name>-&gt;<name>GetFileExtension</name></name><argument_list>(<argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIUTF8StringEnumerator</name></expr></argument>&gt;</argument_list></name></type> <name>encEnum</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>encChannel</name>-&gt;<name>GetContentEncodings</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>encEnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>encEnum</name></expr>)</condition><then>
        <return>return;</return></then></if>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIExternalHelperAppService</name></expr></argument>&gt;</argument_list></name></type> <name>helperAppService</name> <init>=
        <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_EXTERNALHELPERAPPSERVICE_CONTRACTID</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return;</return></then></if>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>hasMore</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>encEnum</name>-&gt;<name>HasMore</name></name><argument_list>(<argument><expr>&amp;<name>hasMore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; <name>hasMore</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>encType</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name><name>encEnum</name>-&gt;<name>GetNext</name></name><argument_list>(<argument><expr><name>encType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>PRBool</name></type> <name>applyConversion</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>rv</name> = <call><name><name>helperAppService</name>-&gt;<name>ApplyDecodingForExtension</name></name><argument_list>(<argument><expr><name>extension</name></expr></argument>, <argument><expr><name>encType</name></expr></argument>,
                                                             <argument><expr>&amp;<name>applyConversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>encChannel</name>-&gt;<name>SetApplyConversion</name></name><argument_list>(<argument><expr><name>applyConversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if>
    }</block></then></if>
}</block></function>

<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////////</comment>


<constructor><name><name>nsEncoderNodeFixup</name>::<name>nsEncoderNodeFixup</name></name><parameter_list>()</parameter_list> <member_list>: <call><name>mWebBrowserPersist</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>
</member_list><block>{
}</block></constructor>


<destructor><name><name>nsEncoderNodeFixup</name>::~<name>nsEncoderNodeFixup</name></name><parameter_list>()</parameter_list>
<block>{
}</block></destructor>


<macro><name>NS_IMPL_ADDREF</name><argument_list>(<argument>nsEncoderNodeFixup</argument>)</argument_list></macro>
<macro><name>NS_IMPL_RELEASE</name><argument_list>(<argument>nsEncoderNodeFixup</argument>)</argument_list></macro>


<macro><name>NS_INTERFACE_MAP_BEGIN</name><argument_list>(<argument>nsEncoderNodeFixup</argument>)</argument_list></macro>
    <macro><name>NS_INTERFACE_MAP_ENTRY_AMBIGUOUS</name><argument_list>(<argument>nsISupports</argument>, <argument>nsIDocumentEncoderNodeFixup</argument>)</argument_list></macro>
    <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsIDocumentEncoderNodeFixup</argument>)</argument_list></macro>
<function><type><name>NS_INTERFACE_MAP_END</name>


<name>NS_IMETHODIMP</name></type> <name><name>nsEncoderNodeFixup</name>::<name>FixupNode</name></name><parameter_list>(
    <param><decl><type><name>nsIDOMNode</name> *</type><name>aNode</name></decl></param>, <param><decl><type><name>PRBool</name> *</type><name>aSerializeCloneKids</name></decl></param>, <param><decl><type><name>nsIDOMNode</name> **</type><name>aOutNode</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aOutNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mWebBrowserPersist</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr>*<name>aOutNode</name> = <name>nsnull</name></expr>;</expr_stmt>
    
    <comment type="line">// Test whether we need to fixup the node</comment>
    <decl_stmt><decl><type><name>PRUint16</name></type> <name>type</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>aNode</name>-&gt;<name>GetNodeType</name></name><argument_list>(<argument><expr>&amp;<name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>type</name> == <name><name>nsIDOMNode</name>::<name>ELEMENT_NODE</name></name> ||
        <name>type</name> == <name><name>nsIDOMNode</name>::<name>PROCESSING_INSTRUCTION_NODE</name></name></expr>)</condition><then>
    <block>{
        <return>return <expr><call><name><name>mWebBrowserPersist</name>-&gt;<name>CloneNodeWithFixedUpAttributes</name></name><argument_list>(<argument><expr><name>aNode</name></expr></argument>, <argument><expr><name>aSerializeCloneKids</name></expr></argument>, <argument><expr><name>aOutNode</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
</unit>
