<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="002962c01d4fcddb92fa1d58fc542acbf7894d88.h"><comment type="block">/*
 *  Copyright (c) 2010 The VP8 project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree. An additional intellectual property rights grant can be found
 *  in the file PATENTS.  All contributing project authors may
 *  be found in the AUTHORS file in the root of the source tree.
 */</comment>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>loopfilter_h</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loopfilter_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vpx_ports/mem.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LOOP_FILTER</name></cpp:macro> <cpp:value>63</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum
<block>{
    <decl><name>NORMAL_LOOPFILTER</name> <init>= <expr>0</expr></init></decl>,
    <decl><name>SIMPLE_LOOPFILTER</name> <init>= <expr>1</expr></init></decl>
}</block></enum></type> <name>LOOPFILTERTYPE</name>;</typedef>

<comment type="line">// FRK</comment>
<comment type="line">// Need to align this structure so when it is declared and</comment>
<comment type="line">// passed it can be loaded into vector registers.</comment>
<comment type="line">// FRK</comment>
<typedef>typedef <type><struct>struct
<block>{
    <macro><name>DECLARE_ALIGNED</name><argument_list>(<argument>16</argument>, <argument>signed char</argument>, <argument>lim[16]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>DECLARE_ALIGNED</name><argument_list>(<argument>16</argument>, <argument>signed char</argument>, <argument>flim[16]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>DECLARE_ALIGNED</name><argument_list>(<argument>16</argument>, <argument>signed char</argument>, <argument>thr[16]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>DECLARE_ALIGNED</name><argument_list>(<argument>16</argument>, <argument>signed char</argument>, <argument>mbflim[16]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>DECLARE_ALIGNED</name><argument_list>(<argument>16</argument>, <argument>signed char</argument>, <argument>mbthr[16]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>DECLARE_ALIGNED</name><argument_list>(<argument>16</argument>, <argument>signed char</argument>, <argument>uvlim[16]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>DECLARE_ALIGNED</name><argument_list>(<argument>16</argument>, <argument>signed char</argument>, <argument>uvflim[16]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>DECLARE_ALIGNED</name><argument_list>(<argument>16</argument>, <argument>signed char</argument>, <argument>uvthr[16]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>DECLARE_ALIGNED</name><argument_list>(<argument>16</argument>, <argument>signed char</argument>, <argument>uvmbflim[16]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>DECLARE_ALIGNED</name><argument_list>(<argument>16</argument>, <argument>signed char</argument>, <argument>uvmbthr[16]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
}</block></struct></type> <name>loop_filter_info</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prototype_loopfilter</name><parameter_list>(<param><type><name>sym</name></type></param>)</parameter_list></cpp:macro> \
    <cpp:value>void sym(unsigned char *src, int pitch, const signed char *flimit,\
             const signed char *limit, const signed char *thresh, int count)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prototype_loopfilter_block</name><parameter_list>(<param><type><name>sym</name></type></param>)</parameter_list></cpp:macro> \
    <cpp:value>void sym(unsigned char *y, unsigned char *u, unsigned char *v,\
             int ystride, int uv_stride, loop_filter_info *lfi, int simpler)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86</name> || <name>ARCH_X86_64</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x86/loopfilter_x86.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_ARM</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arm/loopfilter_arm.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>vp8_lf_normal_mb_v</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vp8_lf_normal_mb_v</name></cpp:macro> <cpp:value>vp8_loop_filter_mbv_c</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<extern>extern prototype_loopfilter_block(vp8_lf_normal_mb_v</extern>)<empty_stmt>;</empty_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>vp8_lf_normal_b_v</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vp8_lf_normal_b_v</name></cpp:macro> <cpp:value>vp8_loop_filter_bv_c</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<extern>extern prototype_loopfilter_block(vp8_lf_normal_b_v</extern>)<empty_stmt>;</empty_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>vp8_lf_normal_mb_h</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vp8_lf_normal_mb_h</name></cpp:macro> <cpp:value>vp8_loop_filter_mbh_c</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<extern>extern prototype_loopfilter_block(vp8_lf_normal_mb_h</extern>)<empty_stmt>;</empty_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>vp8_lf_normal_b_h</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vp8_lf_normal_b_h</name></cpp:macro> <cpp:value>vp8_loop_filter_bh_c</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<extern>extern prototype_loopfilter_block(vp8_lf_normal_b_h</extern>)<empty_stmt>;</empty_stmt>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>vp8_lf_simple_mb_v</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vp8_lf_simple_mb_v</name></cpp:macro> <cpp:value>vp8_loop_filter_mbvs_c</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<extern>extern prototype_loopfilter_block(vp8_lf_simple_mb_v</extern>)<empty_stmt>;</empty_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>vp8_lf_simple_b_v</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vp8_lf_simple_b_v</name></cpp:macro> <cpp:value>vp8_loop_filter_bvs_c</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<extern>extern prototype_loopfilter_block(vp8_lf_simple_b_v</extern>)<empty_stmt>;</empty_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>vp8_lf_simple_mb_h</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vp8_lf_simple_mb_h</name></cpp:macro> <cpp:value>vp8_loop_filter_mbhs_c</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<extern>extern prototype_loopfilter_block(vp8_lf_simple_mb_h</extern>)<empty_stmt>;</empty_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>vp8_lf_simple_b_h</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vp8_lf_simple_b_h</name></cpp:macro> <cpp:value>vp8_loop_filter_bhs_c</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<extern>extern prototype_loopfilter_block(vp8_lf_simple_b_h</extern>)<empty_stmt>;</empty_stmt>

<typedef>typedef <expr_stmt><expr><call><name>prototype_loopfilter_block</name><argument_list>(<argument><expr>(*<name>vp8_lf_block_fn_t</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt></typedef>
<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>vp8_lf_block_fn_t</name></type>  <name>normal_mb_v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>vp8_lf_block_fn_t</name></type>  <name>normal_b_v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>vp8_lf_block_fn_t</name></type>  <name>normal_mb_h</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>vp8_lf_block_fn_t</name></type>  <name>normal_b_h</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>vp8_lf_block_fn_t</name></type>  <name>simple_mb_v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>vp8_lf_block_fn_t</name></type>  <name>simple_b_v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>vp8_lf_block_fn_t</name></type>  <name>simple_mb_h</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>vp8_lf_block_fn_t</name></type>  <name>simple_b_h</name></decl>;</decl_stmt>
}</block></struct></type> <name>vp8_loopfilter_rtcd_vtable_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_RUNTIME_CPU_DETECT</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LF_INVOKE</name><parameter_list>(<param><type><name>ctx</name></type></param>,<param><type><name>fn</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(ctx)-&gt;fn</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LF_INVOKE</name><parameter_list>(<param><type><name>ctx</name></type></param>,<param><type><name>fn</name></type></param>)</parameter_list></cpp:macro> <cpp:value>vp8_lf_##fn</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>void</name></type> <name>loop_filter_uvfunction</name>
<parameter_list>(
    <param><decl><type><name>unsigned</name> <name>char</name> *</type><name>u</name></decl></param>,   <comment type="line">// source pointer</comment>
    <param><decl><type><name>int</name></type> <name>p</name></decl></param>,              <comment type="line">// pitch</comment>
    <param><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> *</type><name>flimit</name></decl></param>,
    <param><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> *</type><name>limit</name></decl></param>,
    <param><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> *</type><name>thresh</name></decl></param>,
    <param><decl><type><name>unsigned</name> <name>char</name> *</type><name>v</name></decl></param>
)</parameter_list>;</function_decl></typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
