<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="0045cff9cb25b43d5a26f50fa03c0d3a3eb6a069.h"><comment type="block">/* nsJARInputStream.h
 * 
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Netscape Communicator source code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1999
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Mitch Stoltz &lt;mstoltz@netscape.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>nsJARINPUTSTREAM_h__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nsJARINPUTSTREAM_h__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIInputStream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsJAR.h"</cpp:file></cpp:include>

<comment type="block">/*-------------------------------------------------------------------------
 * Class nsJARInputStream declaration. This class defines the type of the
 * object returned by calls to nsJAR::GetInputStream(filename) for the
 * purpose of reading a file item out of a JAR file. 
 *------------------------------------------------------------------------*/</comment>
<expr_stmt><expr><name>class</name> <name>nsJARInputStream</name> : <name>public</name> <name>nsIInputStream</name>
<block>{
  <expr><name>public</name>:
    <call><name>nsJARInputStream</name><argument_list>()</argument_list></call> : 
        <call><name>mFd</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>mInSize</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>, <expr><call><name>mCurPos</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>,
        <expr><call><name>mClosed</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>mInflate</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>, <macro><name>mDirectory</name><argument_list>(<argument>0</argument>)</argument_list></macro> <expr><block>{ }</block>
    
    ~<macro><name>nsJARInputStream</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>Close</name><argument_list>()</argument_list></call></expr>; }</block>

    <name>NS_DECL_ISUPPORTS</name>
    <name>NS_DECL_NSIINPUTSTREAM</name>
   
    <comment type="line">// takes ownership of |fd|, even on failure</comment>
    <name>nsresult</name> <call><name>InitFile</name><argument_list>(<argument><expr><name>nsZipArchive</name>* <name>aZip</name></expr></argument>, <argument><expr><name>nsZipItem</name> *<name>item</name></expr></argument>, <argument><expr><name>PRFileDesc</name> *<name>fd</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>nsresult</name> <call><name>InitDirectory</name><argument_list>(<argument><expr><name>nsZipArchive</name>* <name>aZip</name></expr></argument>,
                           <argument><expr>const <name>nsACString</name>&amp; <name>aJarDirSpec</name></expr></argument>,
                           <argument><expr>const <name>char</name>* <name>aDir</name></expr></argument>)</argument_list></call></expr>;
  
  <expr><name>private</name>:
    <name>PRFileDesc</name>*   <name>mFd</name></expr>;              <comment type="line">// My own file handle, for reading</comment>
    <expr><name>PRUint32</name>      <name>mInSize</name></expr>;          <comment type="line">// Size in original file </comment>
    <expr><name>PRUint32</name>      <name>mCurPos</name></expr>;          <comment type="line">// Current position in input </comment>

    struct <expr><name>InflateStruct</name> <block>{
        <expr><name>PRUint32</name>      <name>mOutSize</name></expr>;     <comment type="line">// inflated size </comment>
        <expr><name>PRUint32</name>      <name>mInCrc</name></expr>;       <comment type="line">// CRC as provided by the zipentry</comment>
        <expr><name>PRUint32</name>      <name>mOutCrc</name></expr>;      <comment type="line">// CRC as calculated by me</comment>
        <expr><name>z_stream</name>      <name>mZs</name></expr>;          <comment type="line">// zip data structure</comment>
        <expr><name>unsigned</name> <name>char</name> <name><name>mReadBuf</name><index>[<expr><name>ZIP_BUFLEN</name></expr>]</index></name></expr>; <comment type="line">// Readbuffer to inflate from</comment>
    }</block></expr>;
    struct <expr><name>InflateStruct</name> *   <name>mInflate</name></expr>;

    <comment type="block">/* For directory reading */</comment>
    <expr><name>nsZipArchive</name>*           <name>mZip</name></expr>;        <comment type="line">// the zipReader</comment>
    <expr><name>PRUint32</name>                <name>mNameLen</name></expr>; <comment type="line">// length of dirname</comment>
    <expr><name>nsCAutoString</name>           <name>mBuffer</name></expr>;  <comment type="line">// storage for generated text of stream</comment>
    <expr><name>PRUint32</name>                <name>mArrPos</name></expr>;  <comment type="line">// current position within mArray</comment>
    <expr><name>nsCStringArray</name>          <name>mArray</name></expr>;   <comment type="line">// array of names in (zip) directory</comment>

    <expr><name>PRPackedBool</name>    <name>mDirectory</name></expr>;
    <expr><name>PRPackedBool</name>    <name>mClosed</name></expr>;          <comment type="line">// Whether the stream is closed</comment>

    <expr><name>nsresult</name> <macro><name>ContinueInflate</name><argument_list>(<argument>char* aBuf</argument>, <argument>PRUint32 aCount</argument>, <argument>PRUint32* aBytesRead</argument>)</argument_list></macro></expr>;
    <expr><name>nsresult</name> <macro><name>ReadDirectory</name><argument_list>(<argument>char* aBuf</argument>, <argument>PRUint32 aCount</argument>, <argument>PRUint32* aBytesRead</argument>)</argument_list></macro></expr>;
    <expr><name>PRUint32</name> <call><name>CopyDataToBuffer</name><argument_list>(<argument><expr><name>char</name>* &amp;<name>aBuffer</name></expr></argument>, <argument><expr><name>PRUint32</name> &amp;<name>aCount</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* nsJARINPUTSTREAM_h__ */</comment>

</unit>
