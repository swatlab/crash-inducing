<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="00040162b46b40c7292ff0bdd4151fa7579ee308.h"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Mats Palmgren &lt;mats.palmgren@bredband.net&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<comment type="block">/*
 * methods for dealing with CSS properties and tables of the keyword
 * values they accept
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>nsCSSProps_h___</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nsCSSProps_h___</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsChangeHint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCSSProperty.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStyleStruct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCSSKeywords.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>nsCSSProps</name> <block>{
<label><name>public</name>:</label>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AddRefTable</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ReleaseTable</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// Given a property string, return the enum value</comment>
  <function_decl><type><specifier>static</specifier> <name>nsCSSProperty</name></type> <name>LookupProperty</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aProperty</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>nsCSSProperty</name></type> <name>LookupProperty</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aProperty</name></decl></param>)</parameter_list>;</function_decl>

  <function><type><specifier>static</specifier> <specifier>inline</specifier> <name>PRBool</name></type> <name>IsShorthand</name><parameter_list>(<param><decl><type><name>nsCSSProperty</name></type> <name>aProperty</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>0 &lt;= <name>aProperty</name> &amp;&amp; <name>aProperty</name> &lt; <name>eCSSProperty_COUNT</name></expr></argument>,
                 <argument><expr>"out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>(<name>aProperty</name> &gt;= <name>eCSSProperty_COUNT_no_shorthands</name>)</expr>;</return>
  }</block></function>

  <comment type="line">// Given a property enum, get the string value</comment>
  <function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>nsAFlatCString</name>&amp;</type> <name>GetStringValue</name><parameter_list>(<param><decl><type><name>nsCSSProperty</name></type> <name>aProperty</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// Given a CSS Property and a Property Enum Value</comment>
  <comment type="line">// Return back a const nsString&amp; representation of the </comment>
  <comment type="line">// value. Return back nullstr if no value is found</comment>
  <function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>nsAFlatCString</name>&amp;</type> <name>LookupPropertyValue</name><parameter_list>(<param><decl><type><name>nsCSSProperty</name></type> <name>aProperty</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aValue</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// Get a color name for a predefined color value like buttonhighlight or activeborder</comment>
  <comment type="line">// Sets the aStr param to the name of the propertyID</comment>
  <function_decl><type><specifier>static</specifier> <name>PRBool</name></type> <name>GetColorName</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aPropID</name></decl></param>, <param><decl><type><name>nsCString</name> &amp;</type><name>aStr</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// Find |aKeyword| in |aTable|, if found set |aValue| to its corresponding value.</comment>
  <comment type="line">// If not found, return PR_FALSE and do not set |aValue|.</comment>
  <function_decl><type><specifier>static</specifier> <name>PRBool</name></type> <name>FindKeyword</name><parameter_list>(<param><decl><type><name>nsCSSKeyword</name></type> <name>aKeyword</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>PRInt32</name></type> <name><name>aTable</name><index>[]</index></name></decl></param>, <param><decl><type><name>PRInt32</name>&amp;</type> <name>aValue</name></decl></param>)</parameter_list>;</function_decl>
  <comment type="line">// Return the first keyword in |aTable| that has the corresponding value |aValue|.</comment>
  <comment type="line">// Return |eCSSKeyword_UNKNOWN| if not found.</comment>
  <function_decl><type><specifier>static</specifier> <name>nsCSSKeyword</name></type> <name>ValueToKeywordEnum</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aValue</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>PRInt32</name></type> <name><name>aTable</name><index>[]</index></name></decl></param>)</parameter_list>;</function_decl>
  <comment type="line">// Ditto but as a string, return "" when not found.</comment>
  <function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>nsAFlatCString</name>&amp;</type> <name>ValueToKeyword</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aValue</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>PRInt32</name></type> <name><name>aTable</name><index>[]</index></name></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>nsCSSType</name></type>       <name><name>kTypeTable</name><index>[<expr><name>eCSSProperty_COUNT_no_shorthands</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>nsStyleStructID</name></type> <name><name>kSIDTable</name><index>[<expr><name>eCSSProperty_COUNT_no_shorthands</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name>* <specifier>const</specifier></type>  <name><name>kKeywordTableTable</name><index>[<expr><name>eCSSProperty_COUNT_no_shorthands</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="line">// A table for shorthand properties.  The appropriate index is the</comment>
  <comment type="line">// property ID minus eCSSProperty_COUNT_no_shorthands.</comment>
<label><name>private</name>:</label>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>nsCSSProperty</name> *<specifier>const</specifier></type>
    <name><name>kSubpropertyTable</name><index>[<expr><name>eCSSProperty_COUNT</name> - <name>eCSSProperty_COUNT_no_shorthands</name></expr>]</index></name></decl>;</decl_stmt>

<label><name>public</name>:</label>
  <function><type><specifier>static</specifier> <specifier>inline</specifier>
  <specifier>const</specifier> <name>nsCSSProperty</name> *<specifier>const</specifier></type> <name>SubpropertyEntryFor</name><parameter_list>(<param><decl><type><name>nsCSSProperty</name></type> <name>aProperty</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>eCSSProperty_COUNT_no_shorthands</name> &lt;= <name>aProperty</name> &amp;&amp;
                 <name>aProperty</name> &lt; <name>eCSSProperty_COUNT</name></expr></argument>,
                 <argument><expr>"out of range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>nsCSSProps</name>::<name><name>kSubpropertyTable</name><index>[<expr><name>aProperty</name> -
                                         <name>eCSSProperty_COUNT_no_shorthands</name></expr>]</index></name></expr>;</return>
  }</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSSPROPS_FOR_SHORTHAND_SUBPROPERTIES</name><parameter_list>(<param><type><name>iter_</name></type></param>, <param><type><name>prop_</name></type></param>)</parameter_list></cpp:macro>                    \
  <cpp:value>for (const nsCSSProperty* iter_ = nsCSSProps::SubpropertyEntryFor(prop_);   \
       *iter_ != eCSSProperty_UNKNOWN; ++iter_)</cpp:value></cpp:define>

  <comment type="line">// Keyword/Enum value tables</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kAppearanceKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kAzimuthKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kBackgroundAttachmentKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kBackgroundClipKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kBackgroundColorKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kBackgroundInlinePolicyKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kBackgroundOriginKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kBackgroundPositionKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kBackgroundRepeatKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kBorderCollapseKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kBorderColorKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kBorderStyleKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kBorderWidthKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kBoxAlignKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kBoxDirectionKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kBoxOrientKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kBoxPackKTable</name><index>[]</index></name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SVG</name></cpp:ifdef>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kDominantBaselineKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kFillRuleKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kPointerEventsKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kShapeRenderingKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kStrokeLinecapKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kStrokeLinejoinKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kTextAnchorKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kTextRenderingKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kColorInterpolationKTable</name><index>[]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kBoxPropSourceKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kBoxSizingKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kCaptionSideKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kClearKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kColorKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kContentKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kCursorKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kDirectionKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kDisplayKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kElevationKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kEmptyCellsKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kFloatKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kFloatEdgeKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kFontKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kFontSizeKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kFontStretchKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kFontStyleKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kFontVariantKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kFontWeightKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kKeyEquivalentKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kIMEModeKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kListStylePositionKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kListStyleKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kOutlineStyleKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kOutlineColorKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kOverflowKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kOverflowSubKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kPageBreakKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kPageBreakInsideKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kPageMarksKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kPageSizeKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kPitchKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kPositionKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kSpeakKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kSpeakHeaderKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kSpeakNumeralKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kSpeakPunctuationKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kSpeechRateKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kTableLayoutKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kTextAlignKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kTextDecorationKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kTextTransformKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kUnicodeBidiKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kUserFocusKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kUserInputKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kUserModifyKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kUserSelectKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kVerticalAlignKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kVisibilityKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kVolumeKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kWhitespaceKTable</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>kWidthKTable</name><index>[]</index></name></decl>;</decl_stmt> <comment type="line">// also min-width, max-width</comment>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* nsCSSProps_h___ */</comment>
</unit>
