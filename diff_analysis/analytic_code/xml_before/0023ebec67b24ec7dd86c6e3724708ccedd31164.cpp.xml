<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0023ebec67b24ec7dd86c6e3724708ccedd31164.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Travis Bogard &lt;travis@netscape.com&gt;
 *   HÃkan Waara &lt;hwaara@chello.se&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<comment type="block">/*
 * rendering object for replaced elements that contain a document, such
 * as &lt;frame&gt;, &lt;iframe&gt;, and some &lt;object&gt;s
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsLeafFrame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGenericHTMLElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShellLoadInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShellTreeItem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShellTreeNode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShellTreeOwner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIBaseWindow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIContentViewer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIMarkupDocumentViewer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPresContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPresShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIComponentManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsFrameManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIStreamListener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIURL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNetUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIView.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIViewManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsWidgetsCID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsViewsCID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGkAtoms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScrollableView.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStyleCoord.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStyleContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStyleConsts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsFrameSetFrame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLFrameElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLIFrameElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMXULElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFrameLoader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptSecurityManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsXPIDLString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScrollable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsINameSpaceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsWeakReference.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMWindow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIRenderingContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFrameFrame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAutoPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMNSHTMLDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDisplayList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsUnicharUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIReflowCallback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScrollableFrame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIObjectLoadingContent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsLayoutUtils.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_XUL</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsXULPopupManager.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// For Accessibility</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACCESSIBILITY</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIAccessibilityService.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIServiceManager.h"</cpp:file></cpp:include>

<expr_stmt><expr>static <call><name>NS_DEFINE_CID</name><argument_list>(<argument><expr><name>kCChildCID</name></expr></argument>, <argument><expr><name>NS_CHILD_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/******************************************************************************
 * nsSubDocumentFrame
 *****************************************************************************/</comment>
<class>class <name>nsSubDocumentFrame</name> <super>: <specifier>public</specifier> <name>nsLeafFrame</name>,
                           <specifier>public</specifier> <name>nsIFrameFrame</name>,
                           <specifier>public</specifier> <name>nsIReflowCallback</name></super>
<block>{<private type="default">
</private><public>public:
  <constructor_decl><name>nsSubDocumentFrame</name><parameter_list>(<param><decl><type><name>nsStyleContext</name>*</type> <name>aContext</name></decl></param>)</parameter_list>;</constructor_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>GetFrameName</name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <function_decl><type><name>NS_DECL_QUERYFRAME</name>

  <specifier>virtual</specifier> <name>nsIAtom</name>*</type> <name>GetType</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

  <function><type><specifier>virtual</specifier> <name>PRBool</name></type> <name>IsFrameOfType</name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aFlags</name></decl></param>)</parameter_list> <specifier>const</specifier>
  <block>{
    <comment type="line">// nsLeafFrame is already eReplacedContainsBlock, but that's somewhat bogus</comment>
    <return>return <expr><call><name><name>nsLeafFrame</name>::<name>IsFrameOfType</name></name><argument_list>(<argument><expr><name>aFlags</name> &amp;
      ~(<name><name>nsIFrame</name>::<name>eReplaced</name></name> | <name><name>nsIFrame</name>::<name>eReplacedContainsBlock</name></name>)</expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function_decl><type><name>NS_IMETHOD</name></type> <name>Init</name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type>      <name>aContent</name></decl></param>,
                  <param><decl><type><name>nsIFrame</name>*</type>        <name>aParent</name></decl></param>,
                  <param><decl><type><name>nsIFrame</name>*</type>        <name>aPrevInFlow</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>virtual</specifier> <name>nscoord</name></type> <name>GetMinWidth</name><parameter_list>(<param><decl><type><name>nsIRenderingContext</name> *</type><name>aRenderingContext</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>nscoord</name></type> <name>GetPrefWidth</name><parameter_list>(<param><decl><type><name>nsIRenderingContext</name> *</type><name>aRenderingContext</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>virtual</specifier> <name>IntrinsicSize</name></type> <name>GetIntrinsicSize</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>nsSize</name></type>  <name>GetIntrinsicRatio</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>virtual</specifier> <name>nsSize</name></type> <name>ComputeAutoSize</name><parameter_list>(<param><decl><type><name>nsIRenderingContext</name> *</type><name>aRenderingContext</name></decl></param>,
                                 <param><decl><type><name>nsSize</name></type> <name>aCBSize</name></decl></param>, <param><decl><type><name>nscoord</name></type> <name>aAvailableWidth</name></decl></param>,
                                 <param><decl><type><name>nsSize</name></type> <name>aMargin</name></decl></param>, <param><decl><type><name>nsSize</name></type> <name>aBorder</name></decl></param>,
                                 <param><decl><type><name>nsSize</name></type> <name>aPadding</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aShrinkWrap</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>virtual</specifier> <name>nsSize</name></type> <name>ComputeSize</name><parameter_list>(<param><decl><type><name>nsIRenderingContext</name> *</type><name>aRenderingContext</name></decl></param>,
                             <param><decl><type><name>nsSize</name></type> <name>aCBSize</name></decl></param>, <param><decl><type><name>nscoord</name></type> <name>aAvailableWidth</name></decl></param>,
                             <param><decl><type><name>nsSize</name></type> <name>aMargin</name></decl></param>, <param><decl><type><name>nsSize</name></type> <name>aBorder</name></decl></param>, <param><decl><type><name>nsSize</name></type> <name>aPadding</name></decl></param>,
                             <param><decl><type><name>PRBool</name></type> <name>aShrinkWrap</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>NS_IMETHOD</name></type> <name>Reflow</name><parameter_list>(<param><decl><type><name>nsPresContext</name>*</type>          <name>aPresContext</name></decl></param>,
                    <param><decl><type><name>nsHTMLReflowMetrics</name>&amp;</type>     <name>aDesiredSize</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>nsHTMLReflowState</name>&amp;</type> <name>aReflowState</name></decl></param>,
                    <param><decl><type><name>nsReflowStatus</name>&amp;</type>          <name>aStatus</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>NS_IMETHOD</name></type> <name>BuildDisplayList</name><parameter_list>(<param><decl><type><name>nsDisplayListBuilder</name>*</type>   <name>aBuilder</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>nsRect</name>&amp;</type>           <name>aDirtyRect</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>nsDisplayListSet</name>&amp;</type> <name>aLists</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>NS_IMETHOD</name></type> <name>AttributeChanged</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aNameSpaceID</name></decl></param>,
                              <param><decl><type><name>nsIAtom</name>*</type> <name>aAttribute</name></decl></param>,
                              <param><decl><type><name>PRInt32</name></type> <name>aModType</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// if the content is "visibility:hidden", then just hide the view</comment>
  <comment type="line">// and all our contents. We don't extend "visibility:hidden" to</comment>
  <comment type="line">// the child content ourselves, since it belongs to a different</comment>
  <comment type="line">// document and CSS doesn't inherit in there.</comment>
  <function><type><specifier>virtual</specifier> <name>PRBool</name></type> <name>SupportsVisibilityHidden</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>PR_FALSE</name></expr>;</return> }</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACCESSIBILITY</name></cpp:ifdef>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>GetAccessible</name><parameter_list>(<param><decl><type><name>nsIAccessible</name>**</type> <name>aAccessible</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// nsIFrameFrame</comment>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>GetDocShell</name><parameter_list>(<param><decl><type><name>nsIDocShell</name> **</type><name>aDocShell</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>BeginSwapDocShells</name><parameter_list>(<param><decl><type><name>nsIFrame</name>*</type> <name>aOther</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>EndSwapDocShells</name><parameter_list>(<param><decl><type><name>nsIFrame</name>*</type> <name>aOther</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// nsIReflowCallback</comment>
  <function_decl><type><specifier>virtual</specifier> <name>PRBool</name></type> <name>ReflowFinished</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>ReflowCallbackCanceled</name><parameter_list>()</parameter_list>;</function_decl>

</public><protected>protected:
  <comment type="line">// Helper method to look up the HTML marginwidth &amp; marginheight attributes</comment>
  <function_decl><type><name>nsIntSize</name></type> <name>GetMarginAttributes</name><parameter_list>()</parameter_list>;</function_decl>

  <function><type><name>PRBool</name></type> <name>IsInline</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>mIsInline</name></expr>;</return> }</block></function>
  <function_decl><type><name>nsresult</name></type> <name>ShowDocShell</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>nsresult</name></type> <name>CreateViewAndWidget</name><parameter_list>(<param><decl><type><name>nsContentType</name></type> <name>aContentType</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>virtual</specifier> <name>nscoord</name></type> <name>GetIntrinsicWidth</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>nscoord</name></type> <name>GetIntrinsicHeight</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>virtual</specifier> <name>PRIntn</name></type> <name>GetSkipSides</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

  <comment type="line">// Hide or show our document viewer</comment>
  <function_decl><type><name>void</name></type> <name>HideViewer</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>ShowViewer</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="block">/* Obtains the frame we should use for intrinsic size information if we are
   * an HTML &lt;object&gt;, &lt;embed&gt; or &lt;applet&gt; (a replaced element - not &lt;iframe&gt;)
   * and our sub-document has an intrinsic size. The frame returned is the
   * frame for the document element of the document we're embedding.
   *
   * Called "Obtain*" and not "Get*" because of comment on GetDocShell that
   * says it should be called ObtainDocShell because of it's side effects.
   */</comment>
  <function_decl><type><name>nsIFrame</name>*</type> <name>ObtainIntrinsicSizeFrame</name><parameter_list>()</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFrameLoader</name></expr></argument>&gt;</argument_list></name></type> <name>mFrameLoader</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsIView</name>*</type> <name>mInnerView</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRPackedBool</name></type> <name>mDidCreateDoc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRPackedBool</name></type> <name>mIsInline</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRPackedBool</name></type> <name>mPostedReflowCallback</name></decl>;</decl_stmt>
</protected>}</block>;</class>

<constructor><name><name>nsSubDocumentFrame</name>::<name>nsSubDocumentFrame</name></name><parameter_list>(<param><decl><type><name>nsStyleContext</name>*</type> <name>aContext</name></decl></param>)</parameter_list>
  <member_list>: <call><name>nsLeafFrame</name><argument_list>(<argument><expr><name>aContext</name></expr></argument>)</argument_list></call>, <call><name>mDidCreateDoc</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>,
    <call><name>mIsInline</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>, <call><name>mPostedReflowCallback</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>
</member_list><block>{
}</block></constructor>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACCESSIBILITY</name></cpp:ifdef>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsSubDocumentFrame</name>::<name>GetAccessible</name></name><parameter_list>(<param><decl><type><name>nsIAccessible</name>**</type> <name>aAccessible</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAccessibilityService</name></expr></argument>&gt;</argument_list></name></type> <name>accService</name> <init>= <expr><call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/accessibilityService;1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>accService</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNode</name></expr></argument>&gt;</argument_list></name></type> <name>node</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mContent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>accService</name>-&gt;<name>CreateOuterDocAccessible</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>aAccessible</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>NS_QUERYFRAME_HEAD</name><argument_list>(<argument>nsSubDocumentFrame</argument>)</argument_list></macro>
  <macro><name>NS_QUERYFRAME_ENTRY</name><argument_list>(<argument>nsIFrameFrame</argument>)</argument_list></macro>
<macro><name>NS_QUERYFRAME_TAIL_INHERITING</name><argument_list>(<argument>nsLeafFrame</argument>)</argument_list></macro>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsSubDocumentFrame</name>::<name>Init</name></name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type>     <name>aContent</name></decl></param>,
                         <param><decl><type><name>nsIFrame</name>*</type>       <name>aParent</name></decl></param>,
                         <param><decl><type><name>nsIFrame</name>*</type>       <name>aPrevInFlow</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// determine if we are a &lt;frame&gt; or &lt;iframe&gt;</comment>
  <if>if <condition>(<expr><name>aContent</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLFrameElement</name></expr></argument>&gt;</argument_list></name></type> <name>frameElem</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>mIsInline</name> = <name>frameElem</name> ? <name>PR_FALSE</name> : <name>PR_TRUE</name></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>=  <expr><call><name><name>nsLeafFrame</name>::<name>Init</name></name><argument_list>(<argument><expr><name>aContent</name></expr></argument>, <argument><expr><name>aParent</name></expr></argument>, <argument><expr><name>aPrevInFlow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <comment type="line">// We are going to create an inner view.  If we need a view for the</comment>
  <comment type="line">// OuterFrame but we wait for the normal view creation path in</comment>
  <comment type="line">// nsCSSFrameConstructor, then we will lose because the inner view's</comment>
  <comment type="line">// parent will already have been set to some outer view (e.g., the</comment>
  <comment type="line">// canvas) when it really needs to have this frame's view as its</comment>
  <comment type="line">// parent. So, create this frame's view right away, whether we</comment>
  <comment type="line">// really need it or not, and the inner view will get it as the</comment>
  <comment type="line">// parent.</comment>
  <if>if <condition>(<expr>!<call><name>HasView</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rv</name> = <call><name><name>nsHTMLContainerFrame</name>::<name>CreateViewForFrame</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <decl_stmt><decl><type><name>nsIView</name>*</type> <name>view</name> <init>= <expr><call><name>GetView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name><name>aParent</name>-&gt;<name>GetStyleDisplay</name></name><argument_list>()</argument_list></call>-&gt;<name>mDisplay</name> == <name>NS_STYLE_DISPLAY_DECK</name>
      &amp;&amp; !<call><name><name>view</name>-&gt;<name>HasWidget</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>view</name>-&gt;<name>CreateWidget</name></name><argument_list>(<argument><expr><name>kCChildCID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// Set the primary frame now so that</comment>
  <comment type="line">// DocumentViewerImpl::FindContainerView called by ShowViewer below</comment>
  <comment type="line">// can find it if necessary.</comment>
  <expr_stmt><expr><call><name>PresContext</name><argument_list>()</argument_list></call>-&gt;<call><name>FrameManager</name><argument_list>()</argument_list></call>-&gt;<call><name>SetPrimaryFrameFor</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ShowViewer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsSubDocumentFrame</name>::<name>ShowViewer</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>PresContext</name><argument_list>()</argument_list></call>-&gt;<call><name>IsDynamic</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// We let the printing code take care of loading the document; just</comment>
    <comment type="line">// create a widget for it to use</comment>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>CreateViewAndWidget</name><argument_list>(<argument><expr><name>eContentTypeContent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>
  }</block></then> <else>else <block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>ShowDocShell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><name>mDidCreateDoc</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>

<function><type><name>PRIntn</name></type>
<name><name>nsSubDocumentFrame</name>::<name>GetSkipSides</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsSubDocumentFrame</name>::<name>BuildDisplayList</name></name><parameter_list>(<param><decl><type><name>nsDisplayListBuilder</name>*</type>   <name>aBuilder</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>nsRect</name>&amp;</type>           <name>aDirtyRect</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>nsDisplayListSet</name>&amp;</type> <name>aLists</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>IsVisibleForPainting</name><argument_list>(<argument><expr><name>aBuilder</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>DisplayBorderBackgroundOutline</name><argument_list>(<argument><expr><name>aBuilder</name></expr></argument>, <argument><expr><name>aLists</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if>if <condition>(<expr>!<name>mInnerView</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
  <decl_stmt><decl><type><name>nsIView</name>*</type> <name>subdocView</name> <init>= <expr><call><name><name>mInnerView</name>-&gt;<name>GetFirstChild</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>subdocView</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>presShell</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>f</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIFrame</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>subdocView</name>-&gt;<name>GetClientData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>f</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>presShell</name> = <call><name><name>f</name>-&gt;<name>PresContext</name></name><argument_list>()</argument_list></call>-&gt;<call><name>PresShell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <comment type="line">// If we don't have a frame we use this roundabout way to get the pres shell.</comment>
    <if>if <condition>(<expr>!<name>mFrameLoader</name></expr>)</condition><then>
      <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocShell</name></expr></argument>&gt;</argument_list></name></type> <name>docShell</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mFrameLoader</name>-&gt;<name>GetDocShell</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>docShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>docShell</name></expr>)</condition><then>
      <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name><name>docShell</name>-&gt;<name>GetPresShell</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>presShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>presShell</name></expr>)</condition><then>
      <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
  }</block></else></if>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>suppressed</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>presShell</name>-&gt;<name>IsPaintingSuppressed</name></name><argument_list>(<argument><expr>&amp;<name>suppressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsDisplayList</name></type> <name>childItems</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsRect</name></type> <name>dirty</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>f</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>dirty</name> = <name>aDirtyRect</name> - <call><name><name>f</name>-&gt;<name>GetOffsetTo</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aBuilder</name>-&gt;<name>EnterPresShell</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>dirty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// Get the bounds of subdocView relative to the reference frame.</comment>
  <decl_stmt><decl><type><name>nsRect</name></type> <name>shellBounds</name> <init>= <expr><call><name><name>subdocView</name>-&gt;<name>GetBounds</name></name><argument_list>()</argument_list></call> +
                       <call><name><name>mInnerView</name>-&gt;<name>GetPosition</name></name><argument_list>()</argument_list></call> +
                       <call><name>GetOffsetTo</name><argument_list>(<argument><expr><call><name><name>aBuilder</name>-&gt;<name>ReferenceFrame</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<call><name><name>aBuilder</name>-&gt;<name>IsForEventDelivery</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// Add the canvas background color.</comment>
    <expr_stmt><expr><name>rv</name> = <call><name><name>presShell</name>-&gt;<name>AddCanvasBackgroundColorItem</name></name><argument_list>(
           <argument><expr>*<name>aBuilder</name></expr></argument>, <argument><expr><name>childItems</name></expr></argument>, <argument><expr><name>f</name> ? <name>f</name> : <name>this</name></expr></argument>, <argument><expr>&amp;<name>shellBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><name>f</name> &amp;&amp; <call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rv</name> = <call><name><name>f</name>-&gt;<name>BuildDisplayListForStackingContext</name></name><argument_list>(<argument><expr><name>aBuilder</name></expr></argument>, <argument><expr><name>dirty</name></expr></argument>, <argument><expr>&amp;<name>childItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// Clip children to the child root frame's rectangle</comment>
    <expr_stmt><expr><name>rv</name> = <call><name><name>aLists</name>.<name>Content</name></name><argument_list>()</argument_list></call>-&gt;<call><name>AppendNewToTop</name><argument_list>(
        <argument><expr>new (<name>aBuilder</name>) <call><name>nsDisplayClip</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>&amp;<name>childItems</name></expr></argument>, <argument><expr><name>shellBounds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <comment type="line">// delete childItems in case of OOM</comment>
  <expr_stmt><expr><call><name><name>childItems</name>.<name>DeleteAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>f</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>aBuilder</name>-&gt;<name>LeavePresShell</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>dirty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>nscoord</name></type>
<name><name>nsSubDocumentFrame</name>::<name>GetIntrinsicWidth</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>IsInline</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr>0</expr>;</return>  <comment type="line">// HTML &lt;frame&gt; has no useful intrinsic width</comment>
  }</block></then></if>

  <if>if <condition>(<expr><call><name><name>mContent</name>-&gt;<name>IsNodeOfType</name></name><argument_list>(<argument><expr><name><name>nsINode</name>::<name>eXUL</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr>0</expr>;</return>  <comment type="line">// XUL &lt;iframe&gt; and &lt;browser&gt; have no useful intrinsic width</comment>
  }</block></then></if>

  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>ObtainIntrinsicSizeFrame</name><argument_list>()</argument_list></call> == <name>nsnull</name></expr></argument>,
               <argument><expr>"Intrinsic width should come from the embedded document."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// We must be an HTML &lt;iframe&gt;.  Default to a width of 300, for IE</comment>
  <comment type="line">// compat (and per CSS2.1 draft).</comment>
  <return>return <expr><call><name><name>nsPresContext</name>::<name>CSSPixelsToAppUnits</name></name><argument_list>(<argument><expr>300</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nscoord</name></type>
<name><name>nsSubDocumentFrame</name>::<name>GetIntrinsicHeight</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// &lt;frame&gt; processing does not use this routine, only &lt;iframe&gt;</comment>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>IsInline</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"Shouldn't have been called"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name><name>mContent</name>-&gt;<name>IsNodeOfType</name></name><argument_list>(<argument><expr><name><name>nsINode</name>::<name>eXUL</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr>0</expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>ObtainIntrinsicSizeFrame</name><argument_list>()</argument_list></call> == <name>nsnull</name></expr></argument>,
               <argument><expr>"Intrinsic height should come from the embedded document."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Use 150px, for compatibility with IE, and per CSS2.1 draft.</comment>
  <return>return <expr><call><name><name>nsPresContext</name>::<name>CSSPixelsToAppUnits</name></name><argument_list>(<argument><expr>150</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsSubDocumentFrame</name>::<name>GetFrameName</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><call><name>MakeFrameName</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"FrameOuter"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>nsIAtom</name>*</type>
<name><name>nsSubDocumentFrame</name>::<name>GetType</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><name><name>nsGkAtoms</name>::<name>subDocumentFrame</name></name></expr>;</return>
}</block></function>

<comment type="block">/* virtual */</comment> <function><type><name>nscoord</name></type>
<name><name>nsSubDocumentFrame</name>::<name>GetMinWidth</name></name><parameter_list>(<param><decl><type><name>nsIRenderingContext</name> *</type><name>aRenderingContext</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nscoord</name></type> <name>result</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>DISPLAY_MIN_WIDTH</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>subDocRoot</name> <init>= <expr><call><name>ObtainIntrinsicSizeFrame</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>subDocRoot</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>result</name> = <call><name><name>subDocRoot</name>-&gt;<name>GetMinWidth</name></name><argument_list>(<argument><expr><name>aRenderingContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><name>result</name> = <call><name>GetIntrinsicWidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<comment type="block">/* virtual */</comment> <function><type><name>nscoord</name></type>
<name><name>nsSubDocumentFrame</name>::<name>GetPrefWidth</name></name><parameter_list>(<param><decl><type><name>nsIRenderingContext</name> *</type><name>aRenderingContext</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nscoord</name></type> <name>result</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>DISPLAY_PREF_WIDTH</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>subDocRoot</name> <init>= <expr><call><name>ObtainIntrinsicSizeFrame</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>subDocRoot</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>result</name> = <call><name><name>subDocRoot</name>-&gt;<name>GetPrefWidth</name></name><argument_list>(<argument><expr><name>aRenderingContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><name>result</name> = <call><name>GetIntrinsicWidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<comment type="block">/* virtual */</comment> <function><type><name><name>nsIFrame</name>::<name>IntrinsicSize</name></name></type>
<name><name>nsSubDocumentFrame</name>::<name>GetIntrinsicSize</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>subDocRoot</name> <init>= <expr><call><name>ObtainIntrinsicSizeFrame</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>subDocRoot</name></expr>)</condition><then> <block>{
    <return>return <expr><call><name><name>subDocRoot</name>-&gt;<name>GetIntrinsicSize</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></then></if>
  <return>return <expr><call><name><name>nsLeafFrame</name>::<name>GetIntrinsicSize</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* virtual */</comment> <function><type><name>nsSize</name></type>
<name><name>nsSubDocumentFrame</name>::<name>GetIntrinsicRatio</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>subDocRoot</name> <init>= <expr><call><name>ObtainIntrinsicSizeFrame</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>subDocRoot</name></expr>)</condition><then> <block>{
    <return>return <expr><call><name><name>subDocRoot</name>-&gt;<name>GetIntrinsicRatio</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></then></if>
  <return>return <expr><call><name><name>nsLeafFrame</name>::<name>GetIntrinsicRatio</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* virtual */</comment> <function><type><name>nsSize</name></type>
<name><name>nsSubDocumentFrame</name>::<name>ComputeAutoSize</name></name><parameter_list>(<param><decl><type><name>nsIRenderingContext</name> *</type><name>aRenderingContext</name></decl></param>,
                                    <param><decl><type><name>nsSize</name></type> <name>aCBSize</name></decl></param>, <param><decl><type><name>nscoord</name></type> <name>aAvailableWidth</name></decl></param>,
                                    <param><decl><type><name>nsSize</name></type> <name>aMargin</name></decl></param>, <param><decl><type><name>nsSize</name></type> <name>aBorder</name></decl></param>,
                                    <param><decl><type><name>nsSize</name></type> <name>aPadding</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aShrinkWrap</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>IsInline</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><call><name><name>nsFrame</name>::<name>ComputeAutoSize</name></name><argument_list>(<argument><expr><name>aRenderingContext</name></expr></argument>, <argument><expr><name>aCBSize</name></expr></argument>,
                                    <argument><expr><name>aAvailableWidth</name></expr></argument>, <argument><expr><name>aMargin</name></expr></argument>, <argument><expr><name>aBorder</name></expr></argument>,
                                    <argument><expr><name>aPadding</name></expr></argument>, <argument><expr><name>aShrinkWrap</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name><name>nsLeafFrame</name>::<name>ComputeAutoSize</name></name><argument_list>(<argument><expr><name>aRenderingContext</name></expr></argument>, <argument><expr><name>aCBSize</name></expr></argument>,
                                      <argument><expr><name>aAvailableWidth</name></expr></argument>, <argument><expr><name>aMargin</name></expr></argument>, <argument><expr><name>aBorder</name></expr></argument>,
                                      <argument><expr><name>aPadding</name></expr></argument>, <argument><expr><name>aShrinkWrap</name></expr></argument>)</argument_list></call></expr>;</return>  
}</block></function>


<comment type="block">/* virtual */</comment> <function><type><name>nsSize</name></type>
<name><name>nsSubDocumentFrame</name>::<name>ComputeSize</name></name><parameter_list>(<param><decl><type><name>nsIRenderingContext</name> *</type><name>aRenderingContext</name></decl></param>,
                                <param><decl><type><name>nsSize</name></type> <name>aCBSize</name></decl></param>, <param><decl><type><name>nscoord</name></type> <name>aAvailableWidth</name></decl></param>,
                                <param><decl><type><name>nsSize</name></type> <name>aMargin</name></decl></param>, <param><decl><type><name>nsSize</name></type> <name>aBorder</name></decl></param>, <param><decl><type><name>nsSize</name></type> <name>aPadding</name></decl></param>,
                                <param><decl><type><name>PRBool</name></type> <name>aShrinkWrap</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>subDocRoot</name> <init>= <expr><call><name>ObtainIntrinsicSizeFrame</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>subDocRoot</name></expr>)</condition><then> <block>{
    <return>return <expr><call><name><name>nsLayoutUtils</name>::<name>ComputeSizeWithIntrinsicDimensions</name></name><argument_list>(
                            <argument><expr><name>aRenderingContext</name></expr></argument>, <argument><expr><name>this</name></expr></argument>,
                            <argument><expr><call><name><name>subDocRoot</name>-&gt;<name>GetIntrinsicSize</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>subDocRoot</name>-&gt;<name>GetIntrinsicRatio</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><name>aCBSize</name></expr></argument>, <argument><expr><name>aMargin</name></expr></argument>, <argument><expr><name>aBorder</name></expr></argument>, <argument><expr><name>aPadding</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>
  <return>return <expr><call><name><name>nsLeafFrame</name>::<name>ComputeSize</name></name><argument_list>(<argument><expr><name>aRenderingContext</name></expr></argument>, <argument><expr><name>aCBSize</name></expr></argument>, <argument><expr><name>aAvailableWidth</name></expr></argument>,
                                  <argument><expr><name>aMargin</name></expr></argument>, <argument><expr><name>aBorder</name></expr></argument>, <argument><expr><name>aPadding</name></expr></argument>, <argument><expr><name>aShrinkWrap</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsSubDocumentFrame</name>::<name>Reflow</name></name><parameter_list>(<param><decl><type><name>nsPresContext</name>*</type>           <name>aPresContext</name></decl></param>,
                           <param><decl><type><name>nsHTMLReflowMetrics</name>&amp;</type>     <name>aDesiredSize</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>nsHTMLReflowState</name>&amp;</type> <name>aReflowState</name></decl></param>,
                           <param><decl><type><name>nsReflowStatus</name>&amp;</type>          <name>aStatus</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>DO_GLOBAL_REFLOW_COUNT</name><argument_list>(<argument><expr>"nsSubDocumentFrame"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DISPLAY_REFLOW</name><argument_list>(<argument><expr><name>aPresContext</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>aReflowState</name></expr></argument>, <argument><expr><name>aDesiredSize</name></expr></argument>, <argument><expr><name>aStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// printf("OuterFrame::Reflow %X (%d,%d) \n", this, aReflowState.availableWidth, aReflowState.availableHeight);</comment>
  <expr_stmt><expr><call><name>NS_FRAME_TRACE</name><argument_list>(<argument><expr><name>NS_FRAME_TRACE_CALLS</name></expr></argument>,
     <argument><expr>("enter nsSubDocumentFrame::Reflow: maxSize=%d,%d",
      <name><name>aReflowState</name>.<name>availableWidth</name></name>, <name><name>aReflowState</name>.<name>availableHeight</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>aStatus</name> = <name>NS_FRAME_COMPLETE</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>aPresContext</name>-&gt;<name>GetPresShell</name></name><argument_list>()</argument_list></call>-&gt;<call><name>GetPrimaryFrameFor</name><argument_list>(<argument><expr><name>mContent</name></expr></argument>)</argument_list></call> == <name>this</name></expr></argument>,
               <argument><expr>"Shouldn't happen"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// "offset" is the offset of our content area from our frame's</comment>
  <comment type="line">// top-left corner.</comment>
  <decl_stmt><decl><type><name>nsPoint</name></type> <name>offset</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></decl>;</decl_stmt>
  
  <if>if <condition>(<expr><call><name>IsInline</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// XUL &lt;iframe&gt; or &lt;browser&gt;, or HTML &lt;iframe&gt;, &lt;object&gt; or &lt;embed&gt;</comment>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsLeafFrame</name>::<name>DoReflow</name></name><argument_list>(<argument><expr><name>aPresContext</name></expr></argument>, <argument><expr><name>aDesiredSize</name></expr></argument>, <argument><expr><name>aReflowState</name></expr></argument>,
                                        <argument><expr><name>aStatus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>offset</name> = <call><name>nsPoint</name><argument_list>(<argument><expr><name><name>aReflowState</name>.<name>mComputedBorderPadding</name>.<name>left</name></name></expr></argument>,
                     <argument><expr><name><name>aReflowState</name>.<name>mComputedBorderPadding</name>.<name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <comment type="line">// HTML &lt;frame&gt;</comment>
    <expr_stmt><expr><call><name>SizeToAvailSize</name><argument_list>(<argument><expr><name>aReflowState</name></expr></argument>, <argument><expr><name>aDesiredSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <function_decl><type><name>nsSize</name></type> <name>innerSize</name><parameter_list>(<param><decl><type><name><name>aDesiredSize</name>.<name>width</name></name></type></decl></param>, <param><decl><type><name><name>aDesiredSize</name>.<name>height</name></name></type></decl></param>)</parameter_list>;</function_decl>
  <if>if <condition>(<expr><call><name>IsInline</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name><name>innerSize</name>.<name>width</name></name>  -= <call><name><name>aReflowState</name>.<name>mComputedBorderPadding</name>.<name>LeftRight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>innerSize</name>.<name>height</name></name> -= <call><name><name>aReflowState</name>.<name>mComputedBorderPadding</name>.<name>TopBottom</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><name>mInnerView</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsIViewManager</name>*</type> <name>vm</name> <init>= <expr><call><name><name>mInnerView</name>-&gt;<name>GetViewManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>vm</name>-&gt;<name>MoveViewTo</name></name><argument_list>(<argument><expr><name>mInnerView</name></expr></argument>, <argument><expr><name><name>offset</name>.<name>x</name></name></expr></argument>, <argument><expr><name><name>offset</name>.<name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vm</name>-&gt;<name>ResizeView</name></name><argument_list>(<argument><expr><name>mInnerView</name></expr></argument>, <argument><expr><call><name>nsRect</name><argument_list>(<argument><expr><call><name>nsPoint</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>innerSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// Determine if we need to repaint our border, background or outline</comment>
  <expr_stmt><expr><call><name>CheckInvalidateSizeChange</name><argument_list>(<argument><expr><name>aDesiredSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>FinishAndStoreOverflow</name><argument_list>(<argument><expr>&amp;<name>aDesiredSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Invalidate the frame contents</comment>
  <comment type="line">// XXX is this really needed?</comment>
  <decl_stmt><decl><type><name>nsRect</name></type> <name>rect</name><argument_list>(<argument><expr><call><name>nsPoint</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GetSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>Invalidate</name><argument_list>(<argument><expr><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<call><name><name>aPresContext</name>-&gt;<name>IsPaginated</name></name><argument_list>()</argument_list></call> &amp;&amp; !<name>mPostedReflowCallback</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PresContext</name><argument_list>()</argument_list></call>-&gt;<call><name>PresShell</name><argument_list>()</argument_list></call>-&gt;<call><name>PostReflowCallback</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mPostedReflowCallback</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// printf("OuterFrame::Reflow DONE %X (%d,%d)\n", this,</comment>
  <comment type="line">//        aDesiredSize.width, aDesiredSize.height);</comment>

  <expr_stmt><expr><call><name>NS_FRAME_TRACE</name><argument_list>(<argument><expr><name>NS_FRAME_TRACE_CALLS</name></expr></argument>,
     <argument><expr>("exit nsSubDocumentFrame::Reflow: size=%d,%d status=%x",
      <name><name>aDesiredSize</name>.<name>width</name></name>, <name><name>aDesiredSize</name>.<name>height</name></name>, <name>aStatus</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_FRAME_SET_TRUNCATION</name><argument_list>(<argument><expr><name>aStatus</name></expr></argument>, <argument><expr><name>aReflowState</name></expr></argument>, <argument><expr><name>aDesiredSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsSubDocumentFrame</name>::<name>ReflowFinished</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocShell</name></expr></argument>&gt;</argument_list></name></type> <name>docShell</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetDocShell</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>docShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIBaseWindow</name></expr></argument>&gt;</argument_list></name></type> <name>baseWindow</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>docShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// resize the sub document</comment>
  <if>if <condition>(<expr><name>baseWindow</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>x</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>y</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <function_decl><type><name>nsWeakFrame</name></type> <name>weakFrame</name><parameter_list>(<param><decl><type><name>this</name></type></decl></param>)</parameter_list>;</function_decl>
    
    <decl_stmt><decl><type><name>nsPresContext</name>*</type> <name>presContext</name> <init>= <expr><call><name>PresContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>baseWindow</name>-&gt;<name>GetPositionAndSize</name></name><argument_list>(<argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name><name>weakFrame</name>.<name>IsAlive</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <comment type="line">// GetPositionAndSize() killed us</comment>
      <return>return <expr><name>PR_FALSE</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// GetPositionAndSize might have resized us.  So now is the time to</comment>
    <comment type="line">// get our size.</comment>
    <expr_stmt><expr><name>mPostedReflowCallback</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
  
    <decl_stmt><decl><type><name>nsSize</name></type> <name>innerSize</name><argument_list>(<argument><expr><call><name>GetSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>IsInline</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsMargin</name></type> <name>usedBorderPadding</name> <init>= <expr><call><name>GetUsedBorderAndPadding</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// Sadly, XUL smacks the frame size without changing the used</comment>
      <comment type="line">// border and padding, so we can't trust those.  Subtracting</comment>
      <comment type="line">// them might make things negative.</comment>
      <expr_stmt><expr><name><name>innerSize</name>.<name>width</name></name>  -= <call><name><name>usedBorderPadding</name>.<name>LeftRight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>innerSize</name>.<name>width</name></name> = <call><name>PR_MAX</name><argument_list>(<argument><expr><name><name>innerSize</name>.<name>width</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name><name>innerSize</name>.<name>height</name></name> -= <call><name><name>usedBorderPadding</name>.<name>TopBottom</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>innerSize</name>.<name>height</name></name> = <call><name>PR_MAX</name><argument_list>(<argument><expr><name><name>innerSize</name>.<name>height</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>  

    <decl_stmt><decl><type><name>PRInt32</name></type> <name>cx</name> <init>= <expr><call><name><name>presContext</name>-&gt;<name>AppUnitsToDevPixels</name></name><argument_list>(<argument><expr><name><name>innerSize</name>.<name>width</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>cy</name> <init>= <expr><call><name><name>presContext</name>-&gt;<name>AppUnitsToDevPixels</name></name><argument_list>(<argument><expr><name><name>innerSize</name>.<name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>baseWindow</name>-&gt;<name>SetPositionAndSize</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <comment type="line">// Make sure that we can post a reflow callback in the future.</comment>
    <expr_stmt><expr><name>mPostedReflowCallback</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsSubDocumentFrame</name>::<name>ReflowCallbackCanceled</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><name>mPostedReflowCallback</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsSubDocumentFrame</name>::<name>AttributeChanged</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aNameSpaceID</name></decl></param>,
                                     <param><decl><type><name>nsIAtom</name>*</type> <name>aAttribute</name></decl></param>,
                                     <param><decl><type><name>PRInt32</name></type> <name>aModType</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aNameSpaceID</name> != <name>kNameSpaceID_None</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>
  
  <comment type="line">// If the noResize attribute changes, dis/allow frame to be resized</comment>
  <if>if <condition>(<expr><name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>noresize</name></name></expr>)</condition><then> <block>{
    <comment type="line">// Note that we're not doing content type checks, but that's ok -- if</comment>
    <comment type="line">// they'd fail we will just end up with a null framesetFrame.</comment>
    <if>if <condition>(<expr><call><name><name>mContent</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call>-&gt;<call><name>Tag</name><argument_list>()</argument_list></call> == <name><name>nsGkAtoms</name>::<name>frameset</name></name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>parentFrame</name> <init>= <expr><call><name>GetParent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>parentFrame</name></expr>)</condition><then> <block>{
        <comment type="line">// There is no interface for nsHTMLFramesetFrame so QI'ing to</comment>
        <comment type="line">// concrete class, yay!</comment>
        <decl_stmt><decl><type><name>nsHTMLFramesetFrame</name>*</type> <name>framesetFrame</name> <init>= <expr><call><name>do_QueryFrame</name><argument_list>(<argument><expr><name>parentFrame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>framesetFrame</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>framesetFrame</name>-&gt;<name>RecalculateBorderResize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
    }</block></then></if>
  }</block></then>
  <else>else <if>if <condition>(<expr><name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>type</name></name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr>!<name>mFrameLoader</name></expr>)</condition><then> 
      <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<call><name><name>mContent</name>-&gt;<name>IsNodeOfType</name></name><argument_list>(<argument><expr><name><name>nsINode</name>::<name>eXUL</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// Note: This logic duplicates a lot of logic in</comment>
    <comment type="line">// nsFrameLoader::EnsureDocShell.  We should fix that.</comment>

    <comment type="line">// Notify our enclosing chrome that our type has changed.  We only do this</comment>
    <comment type="line">// if our parent is chrome, since in all other cases we're random content</comment>
    <comment type="line">// subframes and the treeowner shouldn't worry about us.</comment>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocShell</name></expr></argument>&gt;</argument_list></name></type> <name>docShell</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mFrameLoader</name>-&gt;<name>GetDocShell</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>docShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocShellTreeItem</name></expr></argument>&gt;</argument_list></name></type> <name>docShellAsItem</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>docShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>docShellAsItem</name></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocShellTreeItem</name></expr></argument>&gt;</argument_list></name></type> <name>parentItem</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>docShellAsItem</name>-&gt;<name>GetParent</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>parentItem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PRInt32</name></type> <name>parentType</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>parentItem</name>-&gt;<name>GetItemType</name></name><argument_list>(<argument><expr>&amp;<name>parentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>parentType</name> != <name><name>nsIDocShellTreeItem</name>::<name>typeChrome</name></name></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocShellTreeOwner</name></expr></argument>&gt;</argument_list></name></type> <name>parentTreeOwner</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>parentItem</name>-&gt;<name>GetTreeOwner</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>parentTreeOwner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>parentTreeOwner</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsAutoString</name></type> <name>value</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>mContent</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>type</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>PRBool</name></type> <name>is_primary</name> <init>= <expr><call><name><name>value</name>.<name>LowerCaseEqualsLiteral</name></name><argument_list>(<argument><expr>"content-primary"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_XUL</name></cpp:ifdef>
      <comment type="line">// when a content panel is no longer primary, hide any open popups it may have</comment>
      <if>if <condition>(<expr>!<name>is_primary</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>nsXULPopupManager</name>*</type> <name>pm</name> <init>= <expr><call><name><name>nsXULPopupManager</name>::<name>GetInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pm</name></expr>)</condition><then>
          <expr_stmt><expr><call><name><name>pm</name>-&gt;<name>HidePopupsInDocShell</name></name><argument_list>(<argument><expr><name>docShellAsItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <expr_stmt><expr><call><name><name>parentTreeOwner</name>-&gt;<name>ContentShellRemoved</name></name><argument_list>(<argument><expr><name>docShellAsItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name><name>value</name>.<name>LowerCaseEqualsLiteral</name></name><argument_list>(<argument><expr>"content"</expr></argument>)</argument_list></call> ||
          <call><name>StringBeginsWith</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"content-"</expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><call><name>nsCaseInsensitiveStringComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PRBool</name></type> <name>is_targetable</name> <init>= <expr><name>is_primary</name> ||
          <call><name><name>value</name>.<name>LowerCaseEqualsLiteral</name></name><argument_list>(<argument><expr>"content-targetable"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>parentTreeOwner</name>-&gt;<name>ContentShellAdded</name></name><argument_list>(<argument><expr><name>docShellAsItem</name></expr></argument>, <argument><expr><name>is_primary</name></expr></argument>,
                                           <argument><expr><name>is_targetable</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if></else></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsIFrame</name>*</type>
<name>NS_NewSubDocumentFrame</name><parameter_list>(<param><decl><type><name>nsIPresShell</name>*</type> <name>aPresShell</name></decl></param>, <param><decl><type><name>nsStyleContext</name>*</type> <name>aContext</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr>new (<name>aPresShell</name>) <call><name>nsSubDocumentFrame</name><argument_list>(<argument><expr><name>aContext</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsSubDocumentFrame</name>::<name>Destroy</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mPostedReflowCallback</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PresContext</name><argument_list>()</argument_list></call>-&gt;<call><name>PresShell</name><argument_list>()</argument_list></call>-&gt;<call><name>CancelReflowCallback</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mPostedReflowCallback</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
  }</block></then></if>
  
  <expr_stmt><expr><call><name>HideViewer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>nsLeafFrame</name>::<name>Destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsSubDocumentFrame</name>::<name>HideViewer</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mFrameLoader</name> &amp;&amp; <name>mDidCreateDoc</name></expr>)</condition><then> <block>{
    <comment type="line">// Get the content viewer through the docshell, but don't call</comment>
    <comment type="line">// GetDocShell() since we don't want to create one if we don't</comment>
    <comment type="line">// have one.</comment>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocShell</name></expr></argument>&gt;</argument_list></name></type> <name>docShell</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mFrameLoader</name>-&gt;<name>GetDocShell</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>docShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>docShell</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContentViewer</name></expr></argument>&gt;</argument_list></name></type> <name>content_viewer</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>docShell</name>-&gt;<name>GetContentViewer</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>content_viewer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>content_viewer</name></expr>)</condition><then> <block>{
        <comment type="line">// Mark the content viewer as non-sticky so that the presentation</comment>
        <comment type="line">// can safely go away when this frame is destroyed.</comment>

        <expr_stmt><expr><call><name><name>content_viewer</name>-&gt;<name>SetSticky</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIBaseWindow</name></expr></argument>&gt;</argument_list></name></type> <name>baseWin</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>docShell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>baseWin</name></expr></argument>, <argument><expr>"Docshell must be an nsIBaseWindow"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Now reverse the steps we took in ShowDocShell().  But don't call</comment>
      <comment type="line">// Destroy(); that will be handled by destroying our frame loader, if</comment>
      <comment type="line">// needed.</comment>

      <comment type="line">// Hide the content viewer now that the frame is going away...</comment>
      <expr_stmt><expr><call><name><name>baseWin</name>-&gt;<name>SetVisibility</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Clear out the parentWidget, since it might be about to die with us</comment>
      <expr_stmt><expr><call><name><name>baseWin</name>-&gt;<name>SetParentWidget</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
}</block></function>

<function><type><name>nsIntSize</name></type>
<name><name>nsSubDocumentFrame</name>::<name>GetMarginAttributes</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIntSize</name></type> <name>result</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsGenericHTMLElement</name> *</type><name>content</name> <init>= <expr><call><name><name>nsGenericHTMLElement</name>::<name>FromContent</name></name><argument_list>(<argument><expr><name>mContent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>content</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>attr</name> <init>= <expr><call><name><name>content</name>-&gt;<name>GetParsedAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>marginwidth</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>attr</name> &amp;&amp; <call><name><name>attr</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eInteger</name></name></expr>)</condition><then>
      <expr_stmt><expr><name><name>result</name>.<name>width</name></name> = <call><name><name>attr</name>-&gt;<name>GetIntegerValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name>attr</name> = <call><name><name>content</name>-&gt;<name>GetParsedAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>marginheight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>attr</name> &amp;&amp; <call><name><name>attr</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eInteger</name></name></expr>)</condition><then>
      <expr_stmt><expr><name><name>result</name>.<name>height</name></name> = <call><name><name>attr</name>-&gt;<name>GetIntegerValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
  }</block></then></if>
  <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<comment type="line">// XXX this should be called ObtainDocShell or something like that,</comment>
<comment type="line">// to indicate that it could have side effects</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsSubDocumentFrame</name>::<name>GetDocShell</name></name><parameter_list>(<param><decl><type><name>nsIDocShell</name> **</type><name>aDocShell</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aDocShell</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIContent</name>*</type> <name>content</name> <init>= <expr><call><name>GetContent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>content</name></expr>)</condition><then> <block>{
    <comment type="line">// Hmm, no content in this frame</comment>
    <comment type="line">// that's odd, not much to be done here then.</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr>!<name>mFrameLoader</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFrameLoaderOwner</name></expr></argument>&gt;</argument_list></name></type> <name>loaderOwner</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>loaderOwner</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>loaderOwner</name>-&gt;<name>GetFrameLoader</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mFrameLoader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>mFrameLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><call><name><name>mFrameLoader</name>-&gt;<name>GetDocShell</name></name><argument_list>(<argument><expr><name>aDocShell</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsSubDocumentFrame</name>::<name>BeginSwapDocShells</name></name><parameter_list>(<param><decl><type><name>nsIFrame</name>*</type> <name>aOther</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>aOther</name> || <call><name><name>aOther</name>-&gt;<name>GetType</name></name><argument_list>()</argument_list></call> != <name><name>nsGkAtoms</name>::<name>subDocumentFrame</name></name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsSubDocumentFrame</name>*</type> <name>other</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsSubDocumentFrame</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aOther</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>mFrameLoader</name> || !<name>mDidCreateDoc</name> || !<name><name>other</name>-&gt;<name>mFrameLoader</name></name> ||
      !<name><name>other</name>-&gt;<name>mDidCreateDoc</name></name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>HideViewer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>other</name>-&gt;<name>HideViewer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>mFrameLoader</name>.<name>swap</name></name><argument_list>(<argument><expr><name><name>other</name>-&gt;<name>mFrameLoader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsSubDocumentFrame</name>::<name>EndSwapDocShells</name></name><parameter_list>(<param><decl><type><name>nsIFrame</name>*</type> <name>aOther</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsSubDocumentFrame</name>*</type> <name>other</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsSubDocumentFrame</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aOther</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ShowViewer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>other</name>-&gt;<name>ShowViewer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Now make sure we reflow both frames, in case their contents</comment>
  <comment type="line">// determine their size.</comment>
  <expr_stmt><expr><call><name>PresContext</name><argument_list>()</argument_list></call>-&gt;<call><name>PresShell</name><argument_list>()</argument_list></call>-&gt;
    <call><name>FrameNeedsReflow</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>nsIPresShell</name>::<name>eTreeChange</name></name></expr></argument>, <argument><expr><name>NS_FRAME_IS_DIRTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>other</name>-&gt;<name>PresContext</name></name><argument_list>()</argument_list></call>-&gt;<call><name>PresShell</name><argument_list>()</argument_list></call>-&gt;
    <call><name>FrameNeedsReflow</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name><name>nsIPresShell</name>::<name>eTreeChange</name></name></expr></argument>, <argument><expr><name>NS_FRAME_IS_DIRTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// And repaint them, for good measure, in case there's nothing</comment>
  <comment type="line">// interesting that happens during reflow.</comment>
  <expr_stmt><expr><call><name>InvalidateOverflowRect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>other</name>-&gt;<name>InvalidateOverflowRect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>inline</specifier> <name>PRInt32</name></type> <name>ConvertOverflow</name><parameter_list>(<param><decl><type><name>PRUint8</name></type> <name>aOverflow</name></decl></param>)</parameter_list>
<block>{
  <switch>switch <condition>(<expr><name>aOverflow</name></expr>)</condition> <block>{
    <case>case <expr><name>NS_STYLE_OVERFLOW_VISIBLE</name></expr>:
    </case><case>case <expr><name>NS_STYLE_OVERFLOW_AUTO</name></expr>:
      <return>return <expr><name><name>nsIScrollable</name>::<name>Scrollbar_Auto</name></name></expr>;</return>
    </case><case>case <expr><name>NS_STYLE_OVERFLOW_HIDDEN</name></expr>:
    </case><case>case <expr><name>NS_STYLE_OVERFLOW_CLIP</name></expr>:
      <return>return <expr><name><name>nsIScrollable</name>::<name>Scrollbar_Never</name></name></expr>;</return>
    </case><case>case <expr><name>NS_STYLE_OVERFLOW_SCROLL</name></expr>:
      <return>return <expr><name><name>nsIScrollable</name>::<name>Scrollbar_Always</name></name></expr>;</return>
  </case>}</block></switch>
  <expr_stmt><expr><call><name>NS_NOTREACHED</name><argument_list>(<argument><expr>"invalid overflow value passed to ConvertOverflow"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>nsIScrollable</name>::<name>Scrollbar_Auto</name></name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsSubDocumentFrame</name>::<name>ShowDocShell</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocShell</name></expr></argument>&gt;</argument_list></name></type> <name>docShell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetDocShell</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>docShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>presShell</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>docShell</name>-&gt;<name>GetPresShell</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>presShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>presShell</name></expr>)</condition><then> <block>{
    <comment type="line">// The docshell is already showing, nothing left to do...</comment>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>mInnerView</name></expr></argument>, <argument><expr>"What's going on?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// pass along marginwidth, marginheight, scrolling so sub document</comment>
  <comment type="line">// can use it</comment>
  <decl_stmt><decl><type><name>nsIntSize</name></type> <name>margin</name> <init>= <expr><call><name>GetMarginAttributes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>docShell</name>-&gt;<name>SetMarginWidth</name></name><argument_list>(<argument><expr><name><name>margin</name>.<name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>docShell</name>-&gt;<name>SetMarginHeight</name></name><argument_list>(<argument><expr><name><name>margin</name>.<name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Current and initial scrolling is set so that all succeeding docs</comment>
  <comment type="line">// will use the scrolling value set here, regardless if scrolling is</comment>
  <comment type="line">// set by viewing a particular document (e.g. XUL turns off scrolling)</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScrollable</name></expr></argument>&gt;</argument_list></name></type> <name>sc</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>docShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>sc</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleDisplay</name> *</type><name>disp</name> <init>= <expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>sc</name>-&gt;<name>SetDefaultScrollbarPreferences</name></name><argument_list>(<argument><expr><name><name>nsIScrollable</name>::<name>ScrollOrientation_X</name></name></expr></argument>,
                                       <argument><expr><call><name>ConvertOverflow</name><argument_list>(<argument><expr><name><name>disp</name>-&gt;<name>mOverflowX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sc</name>-&gt;<name>SetDefaultScrollbarPreferences</name></name><argument_list>(<argument><expr><name><name>nsIScrollable</name>::<name>ScrollOrientation_Y</name></name></expr></argument>,
                                       <argument><expr><call><name>ConvertOverflow</name><argument_list>(<argument><expr><name><name>disp</name>-&gt;<name>mOverflowY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>itemType</name> <init>= <expr><name><name>nsIDocShellTreeItem</name>::<name>typeContent</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocShellTreeItem</name></expr></argument>&gt;</argument_list></name></type> <name>treeItem</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>docShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>treeItem</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>treeItem</name>-&gt;<name>GetItemType</name></name><argument_list>(<argument><expr>&amp;<name>itemType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsContentType</name></type> <name>contentType</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>itemType</name> == <name><name>nsIDocShellTreeItem</name>::<name>typeChrome</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>contentType</name> = <name>eContentTypeUI</name></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocShellTreeItem</name></expr></argument>&gt;</argument_list></name></type> <name>sameTypeParent</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>treeItem</name>-&gt;<name>GetSameTypeParent</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>sameTypeParent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>contentType</name> = <name>sameTypeParent</name> ? <name>eContentTypeContentFrame</name> : <name>eContentTypeContent</name></expr>;</expr_stmt>
  }</block></else></if>
  <expr_stmt><expr><name>rv</name> = <call><name>CreateViewAndWidget</name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIBaseWindow</name></expr></argument>&gt;</argument_list></name></type> <name>baseWindow</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>docShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>baseWindow</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>baseWindow</name>-&gt;<name>InitWindow</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><call><name><name>mInnerView</name>-&gt;<name>GetWidget</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>10</expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// This is kinda whacky, this "Create()" call doesn't really</comment>
    <comment type="line">// create anything, one starts to wonder why this was named</comment>
    <comment type="line">// "Create"...</comment>

    <expr_stmt><expr><call><name><name>baseWindow</name>-&gt;<name>Create</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>baseWindow</name>-&gt;<name>SetVisibility</name></name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// Trigger editor re-initialization if midas is turned on in the</comment>
  <comment type="line">// sub-document. This shouldn't be necessary, but given the way our</comment>
  <comment type="line">// editor works, it is. See</comment>
  <comment type="line">// https://bugzilla.mozilla.org/show_bug.cgi?id=284245</comment>
  <expr_stmt><expr><call><name><name>docShell</name>-&gt;<name>GetPresShell</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>presShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>presShell</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNSHTMLDocument</name></expr></argument>&gt;</argument_list></name></type> <name>doc</name> <init>=
      <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name><name>presShell</name>-&gt;<name>GetDocument</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>doc</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsAutoString</name></type> <name>designMode</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>doc</name>-&gt;<name>GetDesignMode</name></name><argument_list>(<argument><expr><name>designMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name><name>designMode</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"on"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>doc</name>-&gt;<name>SetDesignMode</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"off"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>doc</name>-&gt;<name>SetDesignMode</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"on"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsSubDocumentFrame</name>::<name>CreateViewAndWidget</name></name><parameter_list>(<param><decl><type><name>nsContentType</name></type> <name>aContentType</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mInnerView</name></expr>)</condition><then> <block>{
    <comment type="line">// Nothing to do here</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>
  
  <comment type="line">// create, init, set the parent of the view</comment>
  <decl_stmt><decl><type><name>nsIView</name>*</type> <name>outerView</name> <init>= <expr><call><name>GetView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>outerView</name></expr></argument>, <argument><expr>"Must have an outer view already"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>nsRect</name></type> <name>viewBounds</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></decl>;</decl_stmt> <comment type="line">// size will be fixed during reflow</comment>

  <decl_stmt><decl><type><name>nsIViewManager</name>*</type> <name>viewMan</name> <init>= <expr><call><name><name>outerView</name>-&gt;<name>GetViewManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// Create the inner view hidden if the outer view is already hidden</comment>
  <comment type="line">// (it won't get hidden properly otherwise)</comment>
  <decl_stmt><decl><type><name>nsIView</name>*</type> <name>innerView</name> <init>= <expr><call><name><name>viewMan</name>-&gt;<name>CreateView</name></name><argument_list>(<argument><expr><name>viewBounds</name></expr></argument>, <argument><expr><name>outerView</name></expr></argument>,
                                           <argument><expr><call><name><name>outerView</name>-&gt;<name>GetVisibility</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>innerView</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Could not create inner view"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>mInnerView</name> = <name>innerView</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>viewMan</name>-&gt;<name>InsertChild</name></name><argument_list>(<argument><expr><name>outerView</name></expr></argument>, <argument><expr><name>innerView</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>aContentType</name> == <name>eContentTypeContentFrame</name></expr>)</condition><then> <block>{
    <comment type="line">// No widget needed.</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name><name>innerView</name>-&gt;<name>CreateWidget</name></name><argument_list>(<argument><expr><name>kCChildCID</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>,
                                 <argument><expr><name>aContentType</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsIFrame</name>*</type>
<name><name>nsSubDocumentFrame</name>::<name>ObtainIntrinsicSizeFrame</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIObjectLoadingContent</name></expr></argument>&gt;</argument_list></name></type> <name>olc</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name>GetContent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>olc</name></expr>)</condition><then> <block>{
    <comment type="line">// We are an HTML &lt;object&gt;, &lt;embed&gt; or &lt;applet&gt; (a replaced element).</comment>

    <comment type="line">// Try to get an nsIFrame for our sub-document's document element</comment>
    <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>subDocRoot</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocShell</name></expr></argument>&gt;</argument_list></name></type> <name>docShell</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetDocShell</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>docShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>docShell</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>presShell</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>docShell</name>-&gt;<name>GetPresShell</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>presShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>presShell</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>nsIScrollableFrame</name>*</type> <name>scrollable</name> <init>= <expr><call><name><name>presShell</name>-&gt;<name>GetRootScrollFrameAsScrollable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>scrollable</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>scrolled</name> <init>= <expr><call><name><name>scrollable</name>-&gt;<name>GetScrolledFrame</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>scrolled</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>subDocRoot</name> = <call><name><name>scrolled</name>-&gt;<name>GetFirstChild</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then></if>
      }</block></then></if>
    }</block></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SVG</name></cpp:ifdef>
    <if>if <condition>(<expr><name>subDocRoot</name> &amp;&amp; <call><name><name>subDocRoot</name>-&gt;<name>GetContent</name></name><argument_list>()</argument_list></call> &amp;&amp;
        <call><name><name>subDocRoot</name>-&gt;<name>GetContent</name></name><argument_list>()</argument_list></call>-&gt;<call><name>NodeInfo</name><argument_list>()</argument_list></call>-&gt;<call><name>Equals</name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>svg</name></name></expr></argument>, <argument><expr><name>kNameSpaceID_SVG</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>subDocRoot</name></expr>;</return> <comment type="line">// SVG documents have an intrinsic size</comment>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  }</block></then></if>
  <return>return <expr><name>nsnull</name></expr>;</return>
}</block></function>
</unit>
