<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="003b73975477767a703683de2b8445c0091f5709.h"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="line">// vim:cindent:tabstop=2:expandtab:shiftwidth=2:</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   L. David Baron &lt;dbaron@dbaron.org&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<comment type="block">/*
 * style rule processor for CSS style sheets, responsible for selector
 * matching and cascading
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>nsCSSRuleProcessor_h_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nsCSSRuleProcessor_h_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIStyleRuleProcessor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCSSStyleSheet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsTArray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAutoPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCSSRules.h"</cpp:file></cpp:include>

<struct_decl>struct <name>RuleCascadeData</name>;</struct_decl>
<struct_decl>struct <name>nsCSSSelectorList</name>;</struct_decl>

<comment type="block">/**
 * The CSS style rule processor provides a mechanism for sibling style
 * sheets to combine their rule processing in order to allow proper
 * cascading to happen.
 *
 * CSS style rule processors keep a live reference on all style sheets
 * bound to them.  The CSS style sheets keep a weak reference to all the
 * processors that they are bound to (many to many).  The CSS style sheet
 * is told when the rule processor is going away (via DropRuleProcessor).
 */</comment>

<expr_stmt><expr><name>class</name> <name>nsCSSRuleProcessor</name>: <name>public</name> <name>nsIStyleRuleProcessor</name> <block>{
<expr><name>public</name>:
  <macro><name>nsCSSRuleProcessor</name><argument_list>(<argument>const nsCOMArray&lt;nsICSSStyleSheet&gt;&amp; aSheets</argument>, 
                     <argument>PRUint8 aSheetType</argument>)</argument_list></macro></expr>;
  <expr><name>virtual</name> ~<call><name>nsCSSRuleProcessor</name><argument_list>()</argument_list></call></expr>;

  <expr><name>NS_DECL_ISUPPORTS</name>

<name>public</name>:
  <name>nsresult</name> <call><name>ClearRuleCascades</name><argument_list>()</argument_list></call></expr>;

  <expr>static <name>void</name> <call><name>Startup</name><argument_list>()</argument_list></call></expr>;
  <expr>static <name>void</name> <call><name>FreeSystemMetrics</name><argument_list>()</argument_list></call></expr>;
  <expr>static <name>PRBool</name> <call><name>HasSystemMetric</name><argument_list>(<argument><expr><name>nsIAtom</name>* <name>aMetric</name></expr></argument>)</argument_list></call></expr>;

  <comment type="block">/*
   * Returns true if the given RuleProcessorData matches one of the
   * selectors in aSelectorList.  Note that this method will assume
   * the matching is not for styling purposes.
   */</comment>
  <expr>static <name>PRBool</name> <call><name>SelectorListMatches</name><argument_list>(<argument><expr><name>RuleProcessorData</name>&amp; <name>aData</name></expr></argument>,
                                    <argument><expr><name>nsCSSSelectorList</name>* <name>aSelectorList</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// nsIStyleRuleProcessor</comment>
  <expr><name>NS_IMETHOD</name> <call><name>RulesMatching</name><argument_list>(<argument><expr><name>ElementRuleProcessorData</name>* <name>aData</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>NS_IMETHOD</name> <call><name>RulesMatching</name><argument_list>(<argument><expr><name>PseudoElementRuleProcessorData</name>* <name>aData</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>NS_IMETHOD</name> <call><name>RulesMatching</name><argument_list>(<argument><expr><name>PseudoRuleProcessorData</name>* <name>aData</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>NS_IMETHOD</name> <call><name>HasStateDependentStyle</name><argument_list>(<argument><expr><name>StateRuleProcessorData</name>* <name>aData</name></expr></argument>,
                                    <argument><expr><name>nsReStyleHint</name>* <name>aResult</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>virtual</name> <name>nsReStyleHint</name>
    <call><name>HasAttributeDependentStyle</name><argument_list>(<argument><expr><name>AttributeRuleProcessorData</name>* <name>aData</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>NS_IMETHOD</name> <call><name>MediumFeaturesChanged</name><argument_list>(<argument><expr><name>nsPresContext</name>* <name>aPresContext</name></expr></argument>,
                                   <argument><expr><name>PRBool</name>* <name>aRulesChanged</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Append all the currently-active font face rules to aArray.  Return</comment>
  <comment type="line">// true for success and false for failure.</comment>
  <expr><name>PRBool</name> <call><name>AppendFontFaceRules</name><argument_list>(<argument><expr><name>nsPresContext</name>* <name>aPresContext</name></expr></argument>,
                             <argument><expr><name>nsTArray</name>&lt;<name>nsFontFaceRuleContainer</name>&gt;&amp; <name>aArray</name></expr></argument>)</argument_list></call></expr>;

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <expr><name>void</name> <macro><name>AssertQuirksChangeOK</name><argument_list>()</argument_list></macro> <block>{
    <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>mRuleCascades</name></expr></argument>, <argument><expr>"can't toggle quirks style sheet without "
                                 "clearing rule cascades"</expr></argument>)</argument_list></call></expr>;
  }</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>private</name>:
  static <name>PRBool</name> <call><name>CascadeSheetEnumFunc</name><argument_list>(<argument><expr><name>nsICSSStyleSheet</name>* <name>aSheet</name></expr></argument>, <argument><expr><name>void</name>* <name>aData</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>RuleCascadeData</name>* <call><name>GetRuleCascade</name><argument_list>(<argument><expr><name>nsPresContext</name>* <name>aPresContext</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>RefreshRuleCascade</name><argument_list>(<argument><expr><name>nsPresContext</name>* <name>aPresContext</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// The sheet order here is the same as in nsStyleSet::mSheets</comment>
  <expr><name>nsCOMArray</name>&lt;<name>nsICSSStyleSheet</name>&gt; <name>mSheets</name></expr>;

  <comment type="line">// active first, then cached (most recent first)</comment>
  <expr><name>RuleCascadeData</name>* <name>mRuleCascades</name></expr>;

  <comment type="line">// The last pres context for which GetRuleCascades was called.</comment>
  <expr><name>nsPresContext</name> *<name>mLastPresContext</name></expr>;
  
  <comment type="line">// type of stylesheet using this processor</comment>
  <expr><name>PRUint8</name> <name>mSheetType</name></expr>;  <comment type="line">// == nsStyleSet::sheetType</comment>
}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* nsCSSRuleProcessor_h_ */</comment>
</unit>
