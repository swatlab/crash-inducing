<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="002487528a6998e9f36d0c1ebafcf4f0a64cb817.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 20; indent-tabs-mode: nil; c-basic-offset: 4 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is thebes gfx
 *
 * The Initial Developer of the Original Code is mozilla.org.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Vladimir Vukicevic &lt;vladimir@pobox.com&gt;
 *   Stuart Parmenter &lt;pavlov@pavlov.net&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDeviceContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIRenderingContext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsSystemFontsQt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gfxQtPlatform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QApplication&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QFont&gt;</cpp:file></cpp:include>

<constructor><name><name>nsSystemFontsQt</name>::<name>nsSystemFontsQt</name></name><parameter_list>()</parameter_list>
  <member_list>: <call><name>mDefaultFontName</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"sans-serif"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
  , <call><name>mButtonFontName</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"sans-serif"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
  , <call><name>mFieldFontName</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"sans-serif"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
  , <call><name>mMenuFontName</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"sans-serif"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
</member_list><block>{
   <comment type="line">// What about using QFontInfo? is it faster or what?</comment>
   <expr_stmt><expr><call><name>GetSystemFontInfo</name><argument_list>(<argument><expr>"Qlabel"</expr></argument>, <argument><expr>&amp;<name>mDefaultFontName</name></expr></argument>, <argument><expr>&amp;<name>mDefaultFontStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <expr_stmt><expr><call><name>GetSystemFontInfo</name><argument_list>(<argument><expr>"QlineEdit"</expr></argument>, <argument><expr>&amp;<name>mFieldFontName</name></expr></argument>, <argument><expr>&amp;<name>mFieldFontStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <expr_stmt><expr><call><name>GetSystemFontInfo</name><argument_list>(<argument><expr>"QAction"</expr></argument>, <argument><expr>&amp;<name>mMenuFontName</name></expr></argument>, <argument><expr>&amp;<name>mMenuFontStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
   <expr_stmt><expr><call><name>GetSystemFontInfo</name><argument_list>(<argument><expr>"QPushButton"</expr></argument>, <argument><expr>&amp;<name>mButtonFontName</name></expr></argument>, <argument><expr>&amp;<name>mButtonFontStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>nsSystemFontsQt</name>::~<name>nsSystemFontsQt</name></name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">// No implementation needed</comment>
}</block></destructor>

<function><type><name>nsresult</name></type>
<name><name>nsSystemFontsQt</name>::<name>GetSystemFontInfo</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aClassName</name></decl></param>, <param><decl><type><name>nsString</name> *</type><name>aFontName</name></decl></param>,
                                   <param><decl><type><name>gfxFontStyle</name> *</type><name>aFontStyle</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
    <decl_stmt><decl><type><name>QFont</name></type> <name>qFont</name> <init>= <expr><call><name><name>QApplication</name>::<name>font</name></name><argument_list>(<argument><expr><name>aClassName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>aFontStyle</name>-&gt;<name>style</name></name> = <name>FONT_STYLE_NORMAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aFontStyle</name>-&gt;<name>systemFont</name></name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_NAMED_LITERAL_STRING</name><argument_list>(<argument><expr><name>quote</name></expr></argument>, <argument><expr>"\""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nsString</name></type> <name>family</name><argument_list>(<argument><expr>(<name>PRUnichar</name>*)<call><name><name>qFont</name>.<name>family</name></name><argument_list>()</argument_list></call>.<call><name>data</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr>*<name>aFontName</name> = <name>quote</name> + <name>family</name> + <name>quote</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aFontStyle</name>-&gt;<name>weight</name></name> = <call><name><name>qFont</name>.<name>weight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aFontStyle</name>-&gt;<name>size</name></name> = <call><name><name>qFont</name>.<name>pointSizeF</name></name><argument_list>()</argument_list></call> * <call><name>float</name><argument_list>(<argument><expr><call><name><name>gfxQtPlatform</name>::<name>DPI</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> / 72.0f</expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<function><type><name>nsresult</name></type>
<name><name>nsSystemFontsQt</name>::<name>GetSystemFont</name></name><parameter_list>(<param><decl><type><name>nsSystemFontID</name></type> <name>anID</name></decl></param>, <param><decl><type><name>nsString</name> *</type><name>aFontName</name></decl></param>,
                                 <param><decl><type><name>gfxFontStyle</name> *</type><name>aFontStyle</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
    <switch>switch <condition>(<expr><name>anID</name></expr>)</condition> <block>{
    <case>case <expr><name>eSystemFont_Menu</name></expr>:         <comment type="line">// css2</comment>
    </case><case>case <expr><name>eSystemFont_PullDownMenu</name></expr>: <comment type="line">// css3</comment>
        <expr_stmt><expr>*<name>aFontName</name> = <name>mMenuFontName</name></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>aFontStyle</name> = <name>mMenuFontStyle</name></expr>;</expr_stmt>
        <break>break;</break>

    </case><case>case <expr><name>eSystemFont_Field</name></expr>:        <comment type="line">// css3</comment>
    </case><case>case <expr><name>eSystemFont_List</name></expr>:         <comment type="line">// css3</comment>
        <expr_stmt><expr>*<name>aFontName</name> = <name>mFieldFontName</name></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>aFontStyle</name> = <name>mFieldFontStyle</name></expr>;</expr_stmt>
        <break>break;</break>

    </case><case>case <expr><name>eSystemFont_Button</name></expr>:       <comment type="line">// css3</comment>
        <expr_stmt><expr>*<name>aFontName</name> = <name>mButtonFontName</name></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>aFontStyle</name> = <name>mButtonFontStyle</name></expr>;</expr_stmt>
        <break>break;</break>

    </case><case>case <expr><name>eSystemFont_Caption</name></expr>:      <comment type="line">// css2</comment>
    </case><case>case <expr><name>eSystemFont_Icon</name></expr>:         <comment type="line">// css2</comment>
    </case><case>case <expr><name>eSystemFont_MessageBox</name></expr>:   <comment type="line">// css2</comment>
    </case><case>case <expr><name>eSystemFont_SmallCaption</name></expr>: <comment type="line">// css2</comment>
    </case><case>case <expr><name>eSystemFont_StatusBar</name></expr>:    <comment type="line">// css2</comment>
    </case><case>case <expr><name>eSystemFont_Window</name></expr>:       <comment type="line">// css3</comment>
    </case><case>case <expr><name>eSystemFont_Document</name></expr>:     <comment type="line">// css3</comment>
    </case><case>case <expr><name>eSystemFont_Workspace</name></expr>:    <comment type="line">// css3</comment>
    </case><case>case <expr><name>eSystemFont_Desktop</name></expr>:      <comment type="line">// css3</comment>
    </case><case>case <expr><name>eSystemFont_Info</name></expr>:         <comment type="line">// css3</comment>
    </case><case>case <expr><name>eSystemFont_Dialog</name></expr>:       <comment type="line">// css3</comment>
    </case><case>case <expr><name>eSystemFont_Tooltips</name></expr>:     <comment type="line">// moz</comment>
    </case><case>case <expr><name>eSystemFont_Widget</name></expr>:       <comment type="line">// moz</comment>
        <expr_stmt><expr>*<name>aFontName</name> = <name>mDefaultFontName</name></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>aFontStyle</name> = <name>mDefaultFontStyle</name></expr>;</expr_stmt>
        <break>break;</break>
    </case>}</block></switch>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

</unit>
