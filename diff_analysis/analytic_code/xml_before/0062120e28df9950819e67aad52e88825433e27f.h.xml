<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="0062120e28df9950819e67aad52e88825433e27f.h"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla browser.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1999
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<comment type="block">/* service providing platform-specific native rendering for widgets */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>nsITheme_h_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nsITheme_h_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISupports.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsColor.h"</cpp:file></cpp:include>

<struct_decl>struct <name>nsRect</name>;</struct_decl>
<struct_decl>struct <name>nsSize</name>;</struct_decl>
<struct_decl>struct <name>nsFont</name>;</struct_decl>
<struct_decl>struct <name>nsMargin</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>nsPresContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>nsIRenderingContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>nsIDeviceContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>nsIFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>nsIContent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>nsIAtom</name></decl>;</decl_stmt>

<comment type="line">// IID for the nsITheme interface</comment>
<comment type="line">// {df8baf21-5ea7-49eb-a2bc-f2fd4a9fd896}</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ITHEME_IID</name></cpp:macro>     \
<cpp:value>{ 0xdf8baf21, 0x5ea7, 0x49eb, { 0xa2, 0xbc, 0xf2, 0xfd, 0x4a, 0x9f, 0xd8, 0x96 } }</cpp:value></cpp:define>

<comment type="line">// {D930E29B-6909-44e5-AB4B-AF10D6923705}</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_THEMERENDERER_CID</name></cpp:macro> \
<cpp:value>{ 0xd930e29b, 0x6909, 0x44e5, { 0xab, 0x4b, 0xaf, 0x10, 0xd6, 0x92, 0x37, 0x5 } }</cpp:value></cpp:define>

<comment type="block">/**
 * nsITheme is a service that provides platform-specific native
 * rendering for widgets.  In other words, it provides the necessary
 * operations to draw a rendering object (an nsIFrame) as a native
 * widget.
 *
 * All the methods on nsITheme take a rendering context or device
 * context, a frame (the rendering object), and a widget type (one of
 * the constants in nsThemeConstants.h).
 */</comment>
<expr_stmt><expr><name>class</name> <name>nsITheme</name>: <name>public</name> <name>nsISupports</name> <block>{
<expr><name>public</name>:
  <macro><name>NS_DECLARE_STATIC_IID_ACCESSOR</name><argument_list>(<argument>NS_ITHEME_IID</argument>)</argument_list></macro>
  
  <name>NS_IMETHOD</name> <macro><name>DrawWidgetBackground</name><argument_list>(<argument>nsIRenderingContext* aContext</argument>,
                                  <argument>nsIFrame* aFrame</argument>,
                                  <argument>PRUint8 aWidgetType</argument>,
                                  <argument>const nsRect&amp; aRect</argument>,
                                  <argument>const nsRect&amp; aDirtyRect</argument>)</argument_list></macro>=0</expr>;

  <comment type="block">/**
   * Get the computed CSS border for the widget, in pixels.
   */</comment>
  <expr><name>NS_IMETHOD</name> <macro><name>GetWidgetBorder</name><argument_list>(<argument>nsIDeviceContext* aContext</argument>, 
                             <argument>nsIFrame* aFrame</argument>,
                             <argument>PRUint8 aWidgetType</argument>,
                             <argument>nsMargin* aResult</argument>)</argument_list></macro>=0</expr>;

  <comment type="block">/**
   * This method can return PR_FALSE to indicate that the CSS padding
   * value should be used.  Otherwise, it will fill in aResult with the
   * computed padding, in pixels, and return PR_TRUE.
   *
   * XXXldb This ought to be required to return true for non-containers
   * so that we don't let specified padding that has no effect change
   * the computed padding and potentially the size.
   */</comment>
  <expr><name>virtual</name> <name>PRBool</name> <macro><name>GetWidgetPadding</name><argument_list>(<argument>nsIDeviceContext* aContext</argument>,
                                  <argument>nsIFrame* aFrame</argument>,
                                  <argument>PRUint8 aWidgetType</argument>,
                                  <argument>nsMargin* aResult</argument>)</argument_list></macro> = 0</expr>;

  <comment type="block">/**
   * On entry, *aResult is positioned at 0,0 and sized to the new size
   * of aFrame (aFrame-&gt;GetSize() may be stale and should not be used).
   * This method can return PR_FALSE to indicate that no special
   * overflow area is required by the native widget. Otherwise it will
   * fill in aResult with the desired overflow area, in appunits, relative
   * to the frame origin, and return PR_TRUE.
   */</comment>
  <expr><name>virtual</name> <name>PRBool</name> <macro><name>GetWidgetOverflow</name><argument_list>(<argument>nsIDeviceContext* aContext</argument>,
                                   <argument>nsIFrame* aFrame</argument>,
                                   <argument>PRUint8 aWidgetType</argument>,
                                   <comment type="block">/*INOUT*/</comment> <argument>nsRect* aOverflowRect</argument>)</argument_list></macro>
  <block>{ <return>return <expr><name>PR_FALSE</name></expr>;</return></block></expr> }</block>

  <comment type="block">/**
   * Get the minimum border-box size of a widget, in *pixels* (in
   * |aResult|).  If |aIsOverridable| is set to true, this size is a
   * minimum size; if false, this size is the only valid size for the
   * widget.
   */</comment>
  <name>NS_IMETHOD</name> <macro><name>GetMinimumWidgetSize</name><argument_list>(<argument>nsIRenderingContext* aContext</argument>,
                                  <argument>nsIFrame* aFrame</argument>,
                                  <argument>PRUint8 aWidgetType</argument>,
                                  <argument>nsSize* aResult</argument>,
                                  <argument>PRBool* aIsOverridable</argument>)</argument_list></macro>=0</expr>;</expr_stmt>

  <decl_stmt><decl><type><name>NS_IMETHOD</name></type> <name>WidgetStateChanged</name><argument_list>(<argument><expr><name>nsIFrame</name>* <name>aFrame</name></expr></argument>, <argument><expr><name>PRUint8</name> <name>aWidgetType</name></expr></argument>, 
                                <argument><expr><name>nsIAtom</name>* <name>aAttribute</name></expr></argument>, <argument><expr><name>PRBool</name>* <name>aShouldRepaint</name></expr></argument>)</argument_list><init>=<expr>0</expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>NS_IMETHOD</name> <call><name>ThemeChanged</name><argument_list>()</argument_list></call>=0</expr>;</expr_stmt>

  <comment type="block">/**
   * Can the nsITheme implementation handle this widget?
   */</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>PRBool</name></type> <name>ThemeSupportsWidget</name><argument_list>(<argument><expr><name>nsPresContext</name>* <name>aPresContext</name></expr></argument>,
                                     <argument><expr><name>nsIFrame</name>* <name>aFrame</name></expr></argument>,
                                     <argument><expr><name>PRUint8</name> <name>aWidgetType</name></expr></argument>)</argument_list><init>=<expr>0</expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>virtual</name> <name>PRBool</name></type> <name>WidgetIsContainer</name><argument_list>(<argument><expr><name>PRUint8</name> <name>aWidgetType</name></expr></argument>)</argument_list><init>=<expr>0</expr></init></decl>;</decl_stmt>

  <comment type="block">/**
   * Does the nsITheme implementation draw its own focus ring for this widget?
   */</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>PRBool</name></type> <name>ThemeDrawsFocusForWidget</name><argument_list>(<argument><expr><name>nsPresContext</name>* <name>aPresContext</name></expr></argument>,
                                          <argument><expr><name>nsIFrame</name>* <name>aFrame</name></expr></argument>,
                                          <argument><expr><name>PRUint8</name> <name>aWidgetType</name></expr></argument>)</argument_list><init>=<expr>0</expr></init></decl>;</decl_stmt>
  
  <comment type="block">/**
    * Should we insert a dropmarker inside of combobox button?
   */</comment>
  <expr_stmt><expr><name>virtual</name> <name>PRBool</name> <call><name>ThemeNeedsComboboxDropmarker</name><argument_list>()</argument_list></call>=0</expr>;</expr_stmt>
};

<macro><name>NS_DEFINE_STATIC_IID_ACCESSOR</name><argument_list>(<argument>nsITheme</argument>, <argument>NS_ITHEME_IID</argument>)</argument_list></macro>

<comment type="line">// Creator function</comment>
<function_decl><type><specifier>extern</specifier> <name>NS_METHOD</name></type> <name>NS_NewNativeTheme</name><parameter_list>(<param><decl><type><name>nsISupports</name> *</type><name>aOuter</name></decl></param>, <param><decl><type><name>REFNSIID</name></type> <name>aIID</name></decl></param>, <param><decl><type><name>void</name> **</type><name>aResult</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
