<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0081830ba1ce6fa1a05d3e7667f1d58a6c268f25.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: sw=4 ts=4 et :
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Plugin App.
 *
 * The Initial Developer of the Original Code is
 *   Chris Jones &lt;jones.chris.g@gmail.com&gt;
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozilla/plugins/PluginModuleParent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozilla/plugins/BrowserStreamParent.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNPAPIPlugin.h"</cpp:file></cpp:include>

<using>using <name><name>mozilla</name>::<name>PluginLibrary</name></name>;</using>

<using>using <name><name>mozilla</name>::<name>ipc</name>::<name>NPRemoteIdentifier</name></name>;</using>

<using>using namespace <name><name>mozilla</name>::<name>plugins</name></name>;</using>

<expr_stmt><expr><call><name>PR_STATIC_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NPIdentifier</name></expr></argument>)</argument_list></sizeof> == <sizeof>sizeof<argument_list>(<argument><expr><name>void</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">// static</comment>
<function><type><name>PluginLibrary</name>*</type>
<name><name>PluginModuleParent</name>::<name>LoadModule</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>aFilePath</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>_MOZ_LOG</name><argument_list>(<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Block on the child process being launched and initialized.</comment>
    <decl_stmt><decl><type><name>PluginModuleParent</name>*</type> <name>parent</name> <init>= <expr>new <call><name>PluginModuleParent</name><argument_list>(<argument><expr><name>aFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>parent</name>-&gt;<name>mSubprocess</name>-&gt;<name>Launch</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>parent</name>-&gt;<name>Open</name></name><argument_list>(<argument><expr><call><name><name>parent</name>-&gt;<name>mSubprocess</name>-&gt;<name>GetChannel</name></name><argument_list>()</argument_list></call></expr></argument>,
                 <argument><expr><call><name><name>parent</name>-&gt;<name>mSubprocess</name>-&gt;<name>GetChildProcessHandle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>parent</name></expr>;</return>
}</block></function>


<constructor><name><name>PluginModuleParent</name>::<name>PluginModuleParent</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>aFilePath</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>mSubprocess</name> = new <call><name>PluginProcessParent</name><argument_list>(<argument><expr><name>aFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>mSubprocess</name></expr></argument>, <argument><expr>"Out of memory!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>ok</name> <init>=
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><call><name><name>mValidIdentifiers</name>.<name>Init</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>ok</name></expr></argument>, <argument><expr>"Out of memory!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>PluginModuleParent</name>::~<name>PluginModuleParent</name></name><parameter_list>()</parameter_list>
<block>{
    <if>if <condition>(<expr><name>mSubprocess</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>mSubprocess</name>-&gt;<name>Delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mSubprocess</name> = <name>nsnull</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></destructor>

<function><type><name>PPluginInstanceParent</name>*</type>
<name><name>PluginModuleParent</name>::<name>AllocPPluginInstance</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsCString</name>&amp;</type> <name>aMimeType</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>uint16_t</name>&amp;</type> <name>aMode</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsCString</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aNames</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsCString</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aValues</name></decl></param>,
                                         <param><decl><type><name>NPError</name>*</type> <name>rv</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Not reachable!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type>
<name><name>PluginModuleParent</name>::<name>DeallocPPluginInstance</name></name><parameter_list>(<param><decl><type><name>PPluginInstanceParent</name>*</type> <name>aActor</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>_MOZ_LOG</name><argument_list>(<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>delete <name>aActor</name></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>PluginModuleParent</name>::<name>SetPluginFuncs</name></name><parameter_list>(<param><decl><type><name>NPPluginFuncs</name>*</type> <name>aFuncs</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>aFuncs</name>-&gt;<name>version</name></name> = (<name>NP_VERSION_MAJOR</name> &lt;&lt; 8) | <name>NP_VERSION_MINOR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aFuncs</name>-&gt;<name>javaClass</name></name> = <name>nsnull</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>aFuncs</name>-&gt;<name>newp</name></name> = <name>nsnull</name></expr>;</expr_stmt> <comment type="line">// Gecko should always call this through a PluginLibrary object</comment>
    <expr_stmt><expr><name><name>aFuncs</name>-&gt;<name>destroy</name></name> = <name>NPP_Destroy</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aFuncs</name>-&gt;<name>setwindow</name></name> = <name>NPP_SetWindow</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aFuncs</name>-&gt;<name>newstream</name></name> = <name>NPP_NewStream</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aFuncs</name>-&gt;<name>destroystream</name></name> = <name>NPP_DestroyStream</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aFuncs</name>-&gt;<name>asfile</name></name> = <name>NPP_StreamAsFile</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aFuncs</name>-&gt;<name>writeready</name></name> = <name>NPP_WriteReady</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aFuncs</name>-&gt;<name>write</name></name> = <name>NPP_Write</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aFuncs</name>-&gt;<name>print</name></name> = <name>NPP_Print</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aFuncs</name>-&gt;<name>event</name></name> = <name>NPP_HandleEvent</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aFuncs</name>-&gt;<name>urlnotify</name></name> = <name>NPP_URLNotify</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aFuncs</name>-&gt;<name>getvalue</name></name> = <name>NPP_GetValue</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aFuncs</name>-&gt;<name>setvalue</name></name> = <name>NPP_SetValue</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>NPError</name></type>
<name><name>PluginModuleParent</name>::<name>NPP_Destroy</name></name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>,
                                <param><decl><type><name>NPSavedData</name>**</type> <name>save</name></decl></param>)</parameter_list>
<block>{
    <comment type="line">// FIXME/cjones:</comment>
    <comment type="line">//  (1) send a "destroy" message to the child</comment>
    <comment type="line">//  (2) the child shuts down its instance</comment>
    <comment type="line">//  (3) remove both parent and child IDs from map</comment>
    <comment type="line">//  (4) free parent</comment>
    <expr_stmt><expr><call><name>_MOZ_LOG</name><argument_list>(<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PluginInstanceParent</name>*</type> <name>parentInstance</name> <init>=
        <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PluginInstanceParent</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>instance</name>-&gt;<name>pdata</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>parentInstance</name></expr>)</condition><then>
        <return>return <expr><name>NPERR_NO_ERROR</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name><name>parentInstance</name>-&gt;<name>Destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>NPError</name></type> <name>prv</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name><name>PPluginInstanceParent</name>::<name>Call__delete__</name></name><argument_list>(<argument><expr><name>parentInstance</name></expr></argument>, <argument><expr>&amp;<name>prv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>prv</name> = <name>NPERR_GENERIC_ERROR</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>instance</name>-&gt;<name>pdata</name></name> = <name>nsnull</name></expr>;</expr_stmt>

    <return>return <expr><name>prv</name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type>
<name><name>PluginModuleParent</name>::<name>EnsureValidNPIdentifier</name></name><parameter_list>(<param><decl><type><name>NPIdentifier</name></type> <name>aIdentifier</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<call><name><name>mValidIdentifiers</name>.<name>GetEntry</name></name><argument_list>(<argument><expr><name>aIdentifier</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>nsVoidPtrHashKey</name>*</type> <name>newEntry</name> <init>= <expr><call><name><name>mValidIdentifiers</name>.<name>PutEntry</name></name><argument_list>(<argument><expr><name>aIdentifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>newEntry</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Out of memory?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
    }</block></then></if>
    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><name>NPIdentifier</name></type>
<name><name>PluginModuleParent</name>::<name>GetValidNPIdentifier</name></name><parameter_list>(<param><decl><type><name>NPRemoteIdentifier</name></type> <name>aRemoteIdentifier</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>mValidIdentifiers</name>.<name>IsInitialized</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"Not initialized!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>aRemoteIdentifier</name> &amp;&amp;
        <call><name><name>mValidIdentifiers</name>.<name>GetEntry</name></name><argument_list>(<argument><expr>(<name>NPIdentifier</name>)<name>aRemoteIdentifier</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr>(<name>NPIdentifier</name>)<name>aRemoteIdentifier</name></expr>;</return>
    }</block></then></if>
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><name>NPError</name></type>
<name><name>PluginModuleParent</name>::<name>NPP_NewStream</name></name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>, <param><decl><type><name>NPMIMEType</name></type> <name>type</name></decl></param>,
                                  <param><decl><type><name>NPStream</name>*</type> <name>stream</name></decl></param>, <param><decl><type><name>NPBool</name></type> <name>seekable</name></decl></param>,
                                  <param><decl><type><name>uint16_t</name>*</type> <name>stype</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>InstCast</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call>-&gt;<call><name>NPP_NewStream</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>seekable</name></expr></argument>,
                                             <argument><expr><name>stype</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NPError</name></type>
<name><name>PluginModuleParent</name>::<name>NPP_SetWindow</name></name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>, <param><decl><type><name>NPWindow</name>*</type> <name>window</name></decl></param>)</parameter_list>
<block>{
     <return>return <expr><call><name>InstCast</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call>-&gt;<call><name>NPP_SetWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NPError</name></type>
<name><name>PluginModuleParent</name>::<name>NPP_DestroyStream</name></name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>,
                                      <param><decl><type><name>NPStream</name>*</type> <name>stream</name></decl></param>,
                                      <param><decl><type><name>NPReason</name></type> <name>reason</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>InstCast</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call>-&gt;<call><name>NPP_DestroyStream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int32_t</name></type>
<name><name>PluginModuleParent</name>::<name>NPP_WriteReady</name></name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>,
                                   <param><decl><type><name>NPStream</name>*</type> <name>stream</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>StreamCast</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call>-&gt;<call><name>WriteReady</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int32_t</name></type>
<name><name>PluginModuleParent</name>::<name>NPP_Write</name></name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>,
                              <param><decl><type><name>NPStream</name>*</type> <name>stream</name></decl></param>,
                              <param><decl><type><name>int32_t</name></type> <name>offset</name></decl></param>,
                              <param><decl><type><name>int32_t</name></type> <name>len</name></decl></param>,
                              <param><decl><type><name>void</name>*</type> <name>buffer</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>StreamCast</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call>-&gt;<call><name>Write</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>PluginModuleParent</name>::<name>NPP_StreamAsFile</name></name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>,
                                     <param><decl><type><name>NPStream</name>*</type> <name>stream</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>fname</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>StreamCast</name><argument_list>(<argument><expr><name>instance</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call>-&gt;<call><name>StreamAsFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>PluginModuleParent</name>::<name>NPP_Print</name></name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>, <param><decl><type><name>NPPrint</name>*</type> <name>platformPrint</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>InstCast</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call>-&gt;<call><name>NPP_Print</name><argument_list>(<argument><expr><name>platformPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int16_t</name></type>
<name><name>PluginModuleParent</name>::<name>NPP_HandleEvent</name></name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>event</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>InstCast</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call>-&gt;<call><name>NPP_HandleEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>PluginModuleParent</name>::<name>NPP_URLNotify</name></name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>url</name></decl></param>,
                                  <param><decl><type><name>NPReason</name></type> <name>reason</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>notifyData</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>InstCast</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call>-&gt;<call><name>NPP_URLNotify</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>, <argument><expr><name>notifyData</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NPError</name></type>
<name><name>PluginModuleParent</name>::<name>NPP_GetValue</name></name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>,
                                 <param><decl><type><name>NPPVariable</name></type> <name>variable</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ret_value</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>InstCast</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call>-&gt;<call><name>NPP_GetValue</name><argument_list>(<argument><expr><name>variable</name></expr></argument>, <argument><expr><name>ret_value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NPError</name></type>
<name><name>PluginModuleParent</name>::<name>NPP_SetValue</name></name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>, <param><decl><type><name>NPNVariable</name></type> <name>variable</name></decl></param>,
                                 <param><decl><type><name>void</name> *</type><name>value</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>InstCast</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call>-&gt;<call><name>NPP_SetValue</name><argument_list>(<argument><expr><name>variable</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>bool</name></type>
<name><name>PluginModuleParent</name>::<name>AnswerNPN_UserAgent</name></name><parameter_list>(<param><decl><type><name>nsCString</name>*</type> <name>userAgent</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>*<name>userAgent</name> = <call><name>NullableString</name><argument_list>(<argument><expr><call><name><name>mNPNIface</name>-&gt;<name>uagent</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><name>bool</name></type>
<name><name>PluginModuleParent</name>::<name>RecvNPN_GetStringIdentifier</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsCString</name>&amp;</type> <name>aString</name></decl></param>,
                                                <param><decl><type><name>NPRemoteIdentifier</name>*</type> <name>aId</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><call><name><name>aString</name>.<name>IsVoid</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Someone sent over a void string?!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>false</expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>NPIdentifier</name></type> <name>ident</name> <init>=
        <expr><call><name><name>mozilla</name>::<name>plugins</name>::<name>parent</name>::<name>_getstringidentifier</name></name><argument_list>(<argument><expr><call><name><name>aString</name>.<name>BeginReading</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>ident</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>aId</name> = 0</expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name>EnsureValidNPIdentifier</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Out of memory?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>false</expr>;</return>
    }</block></then></if>

    <expr_stmt><expr>*<name>aId</name> = (<name>NPRemoteIdentifier</name>)<name>ident</name></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><name>bool</name></type>
<name><name>PluginModuleParent</name>::<name>RecvNPN_GetIntIdentifier</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>int32_t</name>&amp;</type> <name>aInt</name></decl></param>,
                                             <param><decl><type><name>NPRemoteIdentifier</name>*</type> <name>aId</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>NPIdentifier</name></type> <name>ident</name> <init>= <expr><call><name><name>mozilla</name>::<name>plugins</name>::<name>parent</name>::<name>_getintidentifier</name></name><argument_list>(<argument><expr><name>aInt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>ident</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>aId</name> = 0</expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name>EnsureValidNPIdentifier</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Out of memory?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>false</expr>;</return>
    }</block></then></if>

    <expr_stmt><expr>*<name>aId</name> = (<name>NPRemoteIdentifier</name>)<name>ident</name></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><name>bool</name></type>
<name><name>PluginModuleParent</name>::<name>RecvNPN_UTF8FromIdentifier</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>NPRemoteIdentifier</name>&amp;</type> <name>aId</name></decl></param>,
                                               <param><decl><type><name>NPError</name> *</type><name>err</name></decl></param>,
                                               <param><decl><type><name>nsCString</name>*</type> <name>aString</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>NPIdentifier</name></type> <name>ident</name> <init>= <expr><call><name>GetValidNPIdentifier</name><argument_list>(<argument><expr><name>aId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>ident</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>err</name> = <name>NPERR_INVALID_PARAM</name></expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>NPUTF8</name>*</type> <name>val</name> <init>= <expr><call><name><name>mozilla</name>::<name>plugins</name>::<name>parent</name>::<name>_utf8fromidentifier</name></name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>val</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>err</name> = <name>NPERR_INVALID_PARAM</name></expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>aString</name>-&gt;<name>Assign</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>err</name> = <name>NPERR_NO_ERROR</name></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><name>bool</name></type>
<name><name>PluginModuleParent</name>::<name>RecvNPN_IntFromIdentifier</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>NPRemoteIdentifier</name>&amp;</type> <name>aId</name></decl></param>,
                                              <param><decl><type><name>NPError</name>*</type> <name>err</name></decl></param>,
                                              <param><decl><type><name>int32_t</name>*</type> <name>aInt</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>NPIdentifier</name></type> <name>ident</name> <init>= <expr><call><name>GetValidNPIdentifier</name><argument_list>(<argument><expr><name>aId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>ident</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>err</name> = <name>NPERR_INVALID_PARAM</name></expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>
    }</block></then></if>

    <expr_stmt><expr>*<name>aInt</name> = <call><name><name>mozilla</name>::<name>plugins</name>::<name>parent</name>::<name>_intfromidentifier</name></name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>err</name> = <name>NPERR_NO_ERROR</name></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><name>bool</name></type>
<name><name>PluginModuleParent</name>::<name>RecvNPN_IdentifierIsString</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>NPRemoteIdentifier</name>&amp;</type> <name>aId</name></decl></param>,
                                               <param><decl><type><name>bool</name>*</type> <name>aIsString</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>NPIdentifier</name></type> <name>ident</name> <init>= <expr><call><name>GetValidNPIdentifier</name><argument_list>(<argument><expr><name>aId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>ident</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>aIsString</name> = false</expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>
    }</block></then></if>

    <expr_stmt><expr>*<name>aIsString</name> = <call><name><name>mozilla</name>::<name>plugins</name>::<name>parent</name>::<name>_identifierisstring</name></name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><name>bool</name></type>
<name><name>PluginModuleParent</name>::<name>RecvNPN_GetStringIdentifiers</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsCString</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aNames</name></decl></param>,
                                                 <param><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>NPRemoteIdentifier</name></expr></argument>&gt;</argument_list></name>*</type> <name>aIds</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>aIds</name>-&gt;<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"Non-empty array!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PRUint32</name></type> <name>count</name> <init>= <expr><call><name><name>aNames</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>count</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"No names to get!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>false</expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsAutoTArray</name><argument_list>&lt;<argument><expr><name>NPUTF8</name>*</expr></argument>, <argument><expr>10</expr></argument>&gt;</argument_list></name></type> <name>buffers</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsAutoTArray</name><argument_list>&lt;<argument><expr><name>NPIdentifier</name></expr></argument>, <argument><expr>10</expr></argument>&gt;</argument_list></name></type> <name>ids</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!(<call><name><name>buffers</name>.<name>SetLength</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call> &amp;&amp;
          <call><name><name>ids</name>.<name>SetLength</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call> &amp;&amp;
          <call><name><name>aIds</name>-&gt;<name>SetCapacity</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Out of memory?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>false</expr>;</return>
    }</block></then></if>

    <for>for (<init><decl><type><name>PRUint32</name></type> <name>index</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>index</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name><name>buffers</name><index>[<expr><name>index</name></expr>]</index></name> = <call><name><name>const_cast</name><argument_list>&lt;<argument><expr><name>NPUTF8</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>aNames</name><index>[<expr><name>index</name></expr>]</index></name>.<call><name>BeginReading</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name><name>buffers</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr>"Null pointer should be impossible!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name><name>mozilla</name>::<name>plugins</name>::<name>parent</name>::<name>_getstringidentifiers</name></name><argument_list>(
        <argument><expr><call><name><name>const_cast</name><argument_list>&lt;<argument><expr><specifier>const</specifier> <name>NPUTF8</name>**</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>buffers</name>.<name>Elements</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><call><name><name>ids</name>.<name>Elements</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for (<init><decl><type><name>PRUint32</name></type> <name>index</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>index</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>NPIdentifier</name>&amp;</type> <name>id</name> <init>= <expr><name><name>ids</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>id</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name>EnsureValidNPIdentifier</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Out of memory?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>aIds</name>-&gt;<name>AppendElement</name></name><argument_list>(<argument><expr>(<name>NPRemoteIdentifier</name>)<name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><name>PluginInstanceParent</name>*</type>
<name><name>PluginModuleParent</name>::<name>InstCast</name></name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PluginInstanceParent</name>*</type> <name>ip</name> <init>=
        <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PluginInstanceParent</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>instance</name>-&gt;<name>pdata</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>instance</name> != <name><name>ip</name>-&gt;<name>mNPP</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_RUNTIMEABORT</name><argument_list>(<argument><expr>"Corrupted plugin data."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>ip</name></expr>;</return>
}</block></function>

<function><type><name>BrowserStreamParent</name>*</type>
<name><name>PluginModuleParent</name>::<name>StreamCast</name></name><parameter_list>(<param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>,
                               <param><decl><type><name>NPStream</name>*</type> <name>s</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PluginInstanceParent</name>*</type> <name>ip</name> <init>= <expr><call><name>InstCast</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BrowserStreamParent</name>*</type> <name>sp</name> <init>=
        <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>BrowserStreamParent</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>AStream</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>pdata</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>sp</name>-&gt;<name>mNPP</name></name> != <name>ip</name> || <name>s</name> != <name><name>sp</name>-&gt;<name>mStream</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_RUNTIMEABORT</name><argument_list>(<argument><expr>"Corrupted plugin stream data."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>sp</name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type>
<name><name>PluginModuleParent</name>::<name>HasRequiredFunctions</name></name><parameter_list>()</parameter_list>
<block>{
    <return>return <expr>true</expr>;</return>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_UNIX</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>XP_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>nsresult</name></type>
<name><name>PluginModuleParent</name>::<name>NP_Initialize</name></name><parameter_list>(<param><decl><type><name>NPNetscapeFuncs</name>*</type> <name>bFuncs</name></decl></param>, <param><decl><type><name>NPPluginFuncs</name>*</type> <name>pFuncs</name></decl></param>, <param><decl><type><name>NPError</name>*</type> <name>error</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>_MOZ_LOG</name><argument_list>(<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>mNPNIface</name> = <name>bFuncs</name></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>CallNP_Initialize</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></then>
    <else>else <if>if <condition>(<expr>*<name>error</name> != <name>NPERR_NO_ERROR</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if></else></if>

    <expr_stmt><expr><call><name>SetPluginFuncs</name><argument_list>(<argument><expr><name>pFuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>nsresult</name></type>
<name><name>PluginModuleParent</name>::<name>NP_Initialize</name></name><parameter_list>(<param><decl><type><name>NPNetscapeFuncs</name>*</type> <name>bFuncs</name></decl></param>, <param><decl><type><name>NPError</name>*</type> <name>error</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>_MOZ_LOG</name><argument_list>(<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>mNPNIface</name> = <name>bFuncs</name></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>CallNP_Initialize</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>nsresult</name></type>
<name><name>PluginModuleParent</name>::<name>NP_Shutdown</name></name><parameter_list>(<param><decl><type><name>NPError</name>*</type> <name>error</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>_MOZ_LOG</name><argument_list>(<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// FIXME/cjones: should all sub-actors be dead by now?</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>CallNP_Shutdown</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>Close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ok</name> ? <name>NS_OK</name> : <name>NS_ERROR_FAILURE</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>PluginModuleParent</name>::<name>NP_GetMIMEDescription</name></name><parameter_list>(<param><decl><type><name>char</name>**</type> <name>mimeDesc</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>_MOZ_LOG</name><argument_list>(<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr>*<name>mimeDesc</name> = (<name>char</name>*)"application/x-foobar"</expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>PluginModuleParent</name>::<name>NP_GetValue</name></name><parameter_list>(<param><decl><type><name>void</name> *</type><name>future</name></decl></param>, <param><decl><type><name>NPPVariable</name></type> <name>aVariable</name></decl></param>,
                                   <param><decl><type><name>void</name> *</type><name>aValue</name></decl></param>, <param><decl><type><name>NPError</name>*</type> <name>error</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>_MOZ_LOG</name><argument_list>(<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">//TODO: implement this correctly</comment>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"[%s] Not yet implemented\n"</expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr>*<name>error</name> = <name>NPERR_GENERIC_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_WIN</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>XP_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>nsresult</name></type>
<name><name>PluginModuleParent</name>::<name>NP_GetEntryPoints</name></name><parameter_list>(<param><decl><type><name>NPPluginFuncs</name>*</type> <name>pFuncs</name></decl></param>, <param><decl><type><name>NPError</name>*</type> <name>error</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>pFuncs</name></expr></argument>, <argument><expr>"Null pointer!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SetPluginFuncs</name><argument_list>(<argument><expr><name>pFuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>error</name> = <name>NPERR_NO_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>nsresult</name></type>
<name><name>PluginModuleParent</name>::<name>NPP_New</name></name><parameter_list>(<param><decl><type><name>NPMIMEType</name></type> <name>pluginType</name></decl></param>, <param><decl><type><name>NPP</name></type> <name>instance</name></decl></param>,
                            <param><decl><type><name>uint16_t</name></type> <name>mode</name></decl></param>, <param><decl><type><name>int16_t</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name>*</type> <name><name>argn</name><index>[]</index></name></decl></param>,
                            <param><decl><type><name>char</name>*</type> <name><name>argv</name><index>[]</index></name></decl></param>, <param><decl><type><name>NPSavedData</name>*</type> <name>saved</name></decl></param>,
                            <param><decl><type><name>NPError</name>*</type> <name>error</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>_MOZ_LOG</name><argument_list>(<argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// create the instance on the other side</comment>
    <decl_stmt><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsCString</name></expr></argument>&gt;</argument_list></name></type> <name>names</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsCString</name></expr></argument>&gt;</argument_list></name></type> <name>values</name></decl>;</decl_stmt>

    <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>argc</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <expr_stmt><expr><call><name><name>names</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><call><name>NullableString</name><argument_list>(<argument><expr><name><name>argn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>values</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><call><name>NullableString</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>PluginInstanceParent</name>*</type> <name>parentInstance</name> <init>=
        <expr>new <call><name>PluginInstanceParent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>instance</name></expr></argument>, <argument><expr><name>mNPNIface</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>instance</name>-&gt;<name>pdata</name></name> = <name>parentInstance</name></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>CallPPluginInstanceConstructor</name><argument_list>(<argument><expr><name>parentInstance</name></expr></argument>,
                                        <argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>pluginType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mode</name></expr></argument>,
                                        <argument><expr><name>names</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="line">// |parentInstance| is automatically deleted.</comment>
        <expr_stmt><expr><name><name>instance</name>-&gt;<name>pdata</name></name> = <name>nsnull</name></expr>;</expr_stmt>
        <comment type="line">// if IPC is down, we'll get an immediate "failed" return, but</comment>
        <comment type="line">// without *error being set.  So make sure that the error</comment>
        <comment type="line">// condition is signaled to nsNPAPIPluginInstance</comment>
        <if>if <condition>(<expr><name>NPERR_NO_ERROR</name> == *<name>error</name></expr>)</condition><then>
            <expr_stmt><expr>*<name>error</name> = <name>NPERR_GENERIC_ERROR</name></expr>;</expr_stmt></then></if>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr>"[PluginModuleParent] %s: got return value %hd\n"</expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
            <argument><expr>*<name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>*<name>error</name> != <name>NPERR_NO_ERROR</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>PPluginInstanceParent</name>::<name>Call__delete__</name></name><argument_list>(<argument><expr><name>parentInstance</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>instance</name>-&gt;<name>pdata</name></name> = <name>nsnull</name></expr>;</expr_stmt>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type>
<name><name>PluginModuleParent</name>::<name>AnswerNPN_GetValue_WithBoolReturn</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>NPNVariable</name>&amp;</type> <name>aVariable</name></decl></param>,
                                                      <param><decl><type><name>NPError</name>*</type> <name>aError</name></decl></param>,
                                                      <param><decl><type><name>bool</name>*</type> <name>aBoolVal</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>NPBool</name></type> <name>boolVal</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
    <expr_stmt><expr>*<name>aError</name> = <call><name><name>mozilla</name>::<name>plugins</name>::<name>parent</name>::<name>_getvalue</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aVariable</name></expr></argument>, <argument><expr>&amp;<name>boolVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>aBoolVal</name> = <name>boolVal</name> ? true : false</expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>
</unit>
