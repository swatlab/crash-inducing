<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="003c5699f8c711267550340519b6c68159026530.h"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla SVG project.
 *
 * The Initial Developer of the Original Code is IBM Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NS_SVGCONTAINERFRAME_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_SVGCONTAINERFRAME_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContainerFrame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISVGChildFrame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMSVGMatrix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsSVGSVGElement.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>nsContainerFrame</name></type> <name>nsSVGContainerFrameBase</name>;</typedef>

<expr_stmt><expr><name>class</name> <name>nsSVGContainerFrame</name> : <name>public</name> <name>nsSVGContainerFrameBase</name>
<block>{
  <expr><name>friend</name> <name>nsIFrame</name>* <call><name>NS_NewSVGContainerFrame</name><argument_list>(<argument><expr><name>nsIPresShell</name>* <name>aPresShell</name></expr></argument>,
                                           <argument><expr><name>nsIContent</name>* <name>aContent</name></expr></argument>,
                                           <argument><expr><name>nsStyleContext</name>* <name>aContext</name></expr></argument>)</argument_list></call></expr>;
<expr><name>protected</name>:
  <call><name>nsSVGContainerFrame</name><argument_list>(<argument><expr><name>nsStyleContext</name>* <name>aContext</name></expr></argument>)</argument_list></call> :
    <macro><name>nsSVGContainerFrameBase</name><argument_list>(<argument>aContext</argument>)</argument_list></macro> <block>{}</block>

<name>public</name>:
  <comment type="line">// Returns the transform to our gfxContext (to device pixels, not CSS px)</comment>
  <name>virtual</name> <name>already_AddRefed</name>&lt;<name>nsIDOMSVGMatrix</name>&gt; <macro><name>GetCanvasTM</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>nsnull</name></expr>;</return></block></expr> }</block>

  <comment type="line">// nsIFrame:</comment>
  <name>NS_IMETHOD</name> <call><name>AppendFrames</name><argument_list>(<argument><expr><name>nsIAtom</name>*        <name>aListName</name></expr></argument>,
                          <argument><expr><name>nsIFrame</name>*       <name>aFrameList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>InsertFrames</name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type>        <name>aListName</name></decl></param>,
                          <param><decl><type><name>nsIFrame</name>*</type>       <name>aPrevFrame</name></decl></param>,
                          <param><decl><type><name>nsIFrame</name>*</type>       <name>aFrameList</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>RemoveFrame</name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type>        <name>aListName</name></decl></param>,
                         <param><decl><type><name>nsIFrame</name>*</type>       <name>aOldFrame</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>Init</name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type>      <name>aContent</name></decl></param>,
                  <param><decl><type><name>nsIFrame</name>*</type>        <name>aParent</name></decl></param>,
                  <param><decl><type><name>nsIFrame</name>*</type>        <name>aPrevInFlow</name></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>virtual</name> <name>PRBool</name></type> <name>IsFrameOfType</name><argument_list>(<argument><expr><name>PRUint32</name> <name>aFlags</name></expr></argument>)</argument_list> const
  <block>{
    <return>return <expr><name>nsSVGContainerFrameBase</name>::<call><name>IsFrameOfType</name><argument_list>(
            <argument><expr><name>aFlags</name> &amp; ~(<name>nsIFrame</name>::<name>eSVG</name> | <name>nsIFrame</name>::<name>eSVGContainer</name>)</expr></argument>)</argument_list></call></expr>;</return>
  }</block></decl></decl_stmt>
};

<expr_stmt><expr><name>class</name> <name>nsSVGDisplayContainerFrame</name> : <name>public</name> <name>nsSVGContainerFrame</name></expr>,
                                   <expr><name>public</name> <name>nsISVGChildFrame</name>
<block>{
<expr><name>protected</name>:
  <call><name>nsSVGDisplayContainerFrame</name><argument_list>(<argument><expr><name>nsStyleContext</name>* <name>aContext</name></expr></argument>)</argument_list></call> :
    <macro><name>nsSVGContainerFrame</name><argument_list>(<argument>aContext</argument>)</argument_list></macro> <block>{}</block>

<name>public</name>:
  <comment type="line">// nsISupports interface:</comment>
  <name>NS_IMETHOD</name> <call><name>QueryInterface</name><argument_list>(<argument><expr>const <name>nsIID</name>&amp; <name>aIID</name></expr></argument>, <argument><expr><name>void</name>** <name>aInstancePtr</name></expr></argument>)</argument_list></call></expr>;
<expr><name>private</name>:
  <macro><name>NS_IMETHOD_</name><argument_list>(<argument>nsrefcnt</argument>)</argument_list></macro> <macro><name>AddRef</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr>1</expr>;</return></block></expr> }</block>
  <macro><name>NS_IMETHOD_</name><argument_list>(<argument>nsrefcnt</argument>)</argument_list></macro> <macro><name>Release</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr>1</expr>;</return> }</block></expr></expr_stmt>

<label><name>public</name>:</label>
  <comment type="line">// nsIFrame:</comment>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>InsertFrames</name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type>        <name>aListName</name></decl></param>,
                          <param><decl><type><name>nsIFrame</name>*</type>       <name>aPrevFrame</name></decl></param>,
                          <param><decl><type><name>nsIFrame</name>*</type>       <name>aFrameList</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>RemoveFrame</name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type>        <name>aListName</name></decl></param>,
                         <param><decl><type><name>nsIFrame</name>*</type>       <name>aOldFrame</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>Init</name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type>      <name>aContent</name></decl></param>,
                  <param><decl><type><name>nsIFrame</name>*</type>        <name>aParent</name></decl></param>,
                  <param><decl><type><name>nsIFrame</name>*</type>        <name>aPrevInFlow</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// nsISVGChildFrame interface:</comment>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>PaintSVG</name><parameter_list>(<param><decl><type><name>nsSVGRenderState</name>*</type> <name>aContext</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>nsIntRect</name> *</type><name>aDirtyRect</name></decl></param>)</parameter_list>;</function_decl>
  <macro><name>NS_IMETHOD_</name><argument_list>(<argument>nsIFrame*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>GetFrameForPoint</name><argument_list>(<argument><expr>const <name>nsPoint</name> &amp;<name>aPoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>NS_IMETHOD_</name><argument_list>(<argument>nsRect</argument>)</argument_list></macro> <expr_stmt><expr><call><name>GetCoveredRegion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>UpdateCoveredRegion</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>InitialUpdate</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>NotifySVGChanged</name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aFlags</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>NotifyRedrawSuspended</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>NotifyRedrawUnsuspended</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>SetMatrixPropagation</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aPropagate</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>PRBool</name></type> <name>GetMatrixPropagation</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>GetBBox</name><parameter_list>(<param><decl><type><name>nsIDOMSVGRect</name> **</type><name>_retval</name></decl></param>)</parameter_list>;</function_decl>
  <macro><name>NS_IMETHOD_</name><argument_list>(<argument>PRBool</argument>)</argument_list></macro> <macro><name>IsDisplayContainer</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>PR_TRUE</name></expr>;</return> }</block>
  <macro><name>NS_IMETHOD_</name><argument_list>(<argument>PRBool</argument>)</argument_list></macro> <macro><name>HasValidCoveredRect</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>PR_FALSE</name></expr>;</return> }</block>
};

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
