<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="006796a9c04d93bfe6ad1ea96c57916cbf94fe8f.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Dave Hyatt &lt;hyatt@mozilla.org&gt; (Original Author)
 *   Brian Ryner &lt;bryner@brianryner.com&gt;
 *   Jan Varga &lt;varga@ku.sk&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsTreeSelection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIBoxObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsITreeBoxObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsITreeView.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMClassInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIContent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGUIEvent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsINameSpaceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGkAtoms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPLDOMEvent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsEventDispatcher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAutoPtr.h"</cpp:file></cpp:include>

<comment type="line">// A helper class for managing our ranges of selection.</comment>
<struct>struct <name>nsTreeRange</name>
<block>{<public type="default">
  <decl_stmt><decl><type><name>nsTreeSelection</name>*</type> <name>mSelection</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsTreeRange</name>*</type> <name>mPrev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsTreeRange</name>*</type> <name>mNext</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mMin</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mMax</name></decl>;</decl_stmt>

  <constructor><name>nsTreeRange</name><parameter_list>(<param><decl><type><name>nsTreeSelection</name>*</type> <name>aSel</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aSingleVal</name></decl></param>)</parameter_list>
    <member_list>:<call><name>mSelection</name><argument_list>(<argument><expr><name>aSel</name></expr></argument>)</argument_list></call>, <call><name>mPrev</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>, <call><name>mNext</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>, <call><name>mMin</name><argument_list>(<argument><expr><name>aSingleVal</name></expr></argument>)</argument_list></call>, <call><name>mMax</name><argument_list>(<argument><expr><name>aSingleVal</name></expr></argument>)</argument_list></call> </member_list><block>{}</block></constructor>
  <constructor><name>nsTreeRange</name><parameter_list>(<param><decl><type><name>nsTreeSelection</name>*</type> <name>aSel</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aMin</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aMax</name></decl></param>)</parameter_list> 
    <member_list>:<call><name>mSelection</name><argument_list>(<argument><expr><name>aSel</name></expr></argument>)</argument_list></call>, <call><name>mPrev</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>, <call><name>mNext</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>, <call><name>mMin</name><argument_list>(<argument><expr><name>aMin</name></expr></argument>)</argument_list></call>, <call><name>mMax</name><argument_list>(<argument><expr><name>aMax</name></expr></argument>)</argument_list></call> </member_list><block>{}</block></constructor>

  <destructor><name>~<name>nsTreeRange</name></name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr>delete <name>mNext</name></expr>;</expr_stmt> }</block></destructor>

  <function><type><name>void</name></type> <name>Connect</name><parameter_list>(<param><decl><type><name>nsTreeRange</name>*</type> <name>aPrev</name> <init>= <expr><name>nsnull</name></expr></init></decl></param>, <name>nsTreeRange</name>* <name>aNext</name> = <name>nsnull</name>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>aPrev</name></expr>)</condition><then>
      <expr_stmt><expr><name><name>aPrev</name>-&gt;<name>mNext</name></name> = <name>this</name></expr>;</expr_stmt></then>
    <else>else
      <expr_stmt><expr><name><name>mSelection</name>-&gt;<name>mFirstRange</name></name> = <name>this</name></expr>;</expr_stmt></else></if>

    <if>if <condition>(<expr><name>aNext</name></expr>)</condition><then>
      <expr_stmt><expr><name><name>aNext</name>-&gt;<name>mPrev</name></name> = <name>this</name></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name>mPrev</name> = <name>aPrev</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mNext</name> = <name>aNext</name></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>nsresult</name></type> <name>RemoveRange</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aStart</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aEnd</name></decl></param>)</parameter_list> <block>{
    <comment type="line">// This should so be a loop... sigh...</comment>
    <comment type="line">// We start past the range to remove, so no more to remove</comment>
    <if>if <condition>(<expr><name>aEnd</name> &lt; <name>mMin</name></expr>)</condition><then>
      <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
    <comment type="line">// We are the last range to be affected</comment>
    <if>if <condition>(<expr><name>aEnd</name> &lt; <name>mMax</name></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>aStart</name> &lt;= <name>mMin</name></expr>)</condition><then> <block>{
        <comment type="line">// Just chop the start of the range off</comment>
        <expr_stmt><expr><name>mMin</name> = <name>aEnd</name> + 1</expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <comment type="line">// We need to split the range</comment>
        <decl_stmt><decl><type><name>nsTreeRange</name>*</type> <name>range</name> <init>= <expr>new <call><name>nsTreeRange</name><argument_list>(<argument><expr><name>mSelection</name></expr></argument>, <argument><expr><name>aEnd</name> + 1</expr></argument>, <argument><expr><name>mMax</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>range</name></expr>)</condition><then>
          <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

        <expr_stmt><expr><name>mMax</name> = <name>aStart</name> - 1</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>range</name>-&gt;<name>Connect</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>mNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>nsTreeRange</name>*</type> <name>next</name> <init>= <expr><name>mNext</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>aStart</name> &lt;= <name>mMin</name></expr>)</condition><then> <block>{
      <comment type="line">// The remove includes us, remove ourselves from the list</comment>
      <if>if <condition>(<expr><name>mPrev</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>mPrev</name>-&gt;<name>mNext</name></name> = <name>next</name></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><name><name>mSelection</name>-&gt;<name>mFirstRange</name></name> = <name>next</name></expr>;</expr_stmt></else></if>

      <if>if <condition>(<expr><name>next</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>next</name>-&gt;<name>mPrev</name></name> = <name>mPrev</name></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><name>mPrev</name> = <name>mNext</name> = <name>nsnull</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>this</name></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>aStart</name> &lt;= <name>mMax</name></expr>)</condition><then> <block>{
      <comment type="line">// Just chop the end of the range off</comment>
      <expr_stmt><expr><name>mMax</name> = <name>aStart</name> - 1</expr>;</expr_stmt>
    }</block></then></if></else></if>
    <return>return <expr><name>next</name> ? <call><name><name>next</name>-&gt;<name>RemoveRange</name></name><argument_list>(<argument><expr><name>aStart</name></expr></argument>, <argument><expr><name>aEnd</name></expr></argument>)</argument_list></call> : <name>NS_OK</name></expr>;</return>
  }</block></function>

  <function><type><name>nsresult</name></type> <name>Remove</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aIndex</name></decl></param>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>aIndex</name> &gt;= <name>mMin</name> &amp;&amp; <name>aIndex</name> &lt;= <name>mMax</name></expr>)</condition><then> <block>{
      <comment type="line">// We have found the range that contains us.</comment>
      <if>if <condition>(<expr><name>mMin</name> == <name>mMax</name></expr>)</condition><then> <block>{
        <comment type="line">// Delete the whole range.</comment>
        <if>if <condition>(<expr><name>mPrev</name></expr>)</condition><then>
          <expr_stmt><expr><name><name>mPrev</name>-&gt;<name>mNext</name></name> = <name>mNext</name></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><name>mNext</name></expr>)</condition><then>
          <expr_stmt><expr><name><name>mNext</name>-&gt;<name>mPrev</name></name> = <name>mPrev</name></expr>;</expr_stmt></then></if>
        <decl_stmt><decl><type><name>nsTreeRange</name>*</type> <name>first</name> <init>= <expr><name><name>mSelection</name>-&gt;<name>mFirstRange</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>first</name> == <name>this</name></expr>)</condition><then>
          <expr_stmt><expr><name><name>mSelection</name>-&gt;<name>mFirstRange</name></name> = <name>mNext</name></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name>mNext</name> = <name>mPrev</name> = <name>nsnull</name></expr>;</expr_stmt>
        <expr_stmt><expr>delete <name>this</name></expr>;</expr_stmt>
      }</block></then>
      <else>else <if>if <condition>(<expr><name>aIndex</name> == <name>mMin</name></expr>)</condition><then>
        <expr_stmt><expr><name>mMin</name>++</expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr><name>aIndex</name> == <name>mMax</name></expr>)</condition><then>
        <expr_stmt><expr><name>mMax</name>--</expr>;</expr_stmt></then>
      <else>else <block>{
        <comment type="line">// We have to break this range.</comment>
        <decl_stmt><decl><type><name>nsTreeRange</name>*</type> <name>newRange</name> <init>= <expr>new <call><name>nsTreeRange</name><argument_list>(<argument><expr><name>mSelection</name></expr></argument>, <argument><expr><name>aIndex</name> + 1</expr></argument>, <argument><expr><name>mMax</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>newRange</name></expr>)</condition><then>
          <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

        <expr_stmt><expr><call><name><name>newRange</name>-&gt;<name>Connect</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>mNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mMax</name> = <name>aIndex</name> - 1</expr>;</expr_stmt>
      }</block></else></if></else></if></else></if>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>mNext</name></expr>)</condition><then>
      <return>return <expr><call><name><name>mNext</name>-&gt;<name>Remove</name></name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr>;</return></then></if></else></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></function>

  <function><type><name>nsresult</name></type> <name>Add</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aIndex</name></decl></param>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>aIndex</name> &lt; <name>mMin</name></expr>)</condition><then> <block>{
      <comment type="line">// We have found a spot to insert.</comment>
      <if>if <condition>(<expr><name>aIndex</name> + 1 == <name>mMin</name></expr>)</condition><then>
        <expr_stmt><expr><name>mMin</name> = <name>aIndex</name></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr><name>mPrev</name> &amp;&amp; <name><name>mPrev</name>-&gt;<name>mMax</name></name>+1 == <name>aIndex</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>mPrev</name>-&gt;<name>mMax</name></name> = <name>aIndex</name></expr>;</expr_stmt></then>
      <else>else <block>{
        <comment type="line">// We have to create a new range.</comment>
        <decl_stmt><decl><type><name>nsTreeRange</name>*</type> <name>newRange</name> <init>= <expr>new <call><name>nsTreeRange</name><argument_list>(<argument><expr><name>mSelection</name></expr></argument>, <argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>newRange</name></expr>)</condition><then>
          <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

        <expr_stmt><expr><call><name><name>newRange</name>-&gt;<name>Connect</name></name><argument_list>(<argument><expr><name>mPrev</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if></else></if>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>mNext</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>mNext</name>-&gt;<name>Add</name></name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <block>{
      <comment type="line">// Insert on to the end.</comment>
      <if>if <condition>(<expr><name>mMax</name>+1 == <name>aIndex</name></expr>)</condition><then>
        <expr_stmt><expr><name>mMax</name> = <name>aIndex</name></expr>;</expr_stmt></then>
      <else>else <block>{
        <comment type="line">// We have to create a new range.</comment>
        <decl_stmt><decl><type><name>nsTreeRange</name>*</type> <name>newRange</name> <init>= <expr>new <call><name>nsTreeRange</name><argument_list>(<argument><expr><name>mSelection</name></expr></argument>, <argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>newRange</name></expr>)</condition><then>
          <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

        <expr_stmt><expr><call><name><name>newRange</name>-&gt;<name>Connect</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></else></if></else></if>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></function>

  <function><type><name>PRBool</name></type> <name>Contains</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aIndex</name></decl></param>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>aIndex</name> &gt;= <name>mMin</name> &amp;&amp; <name>aIndex</name> &lt;= <name>mMax</name></expr>)</condition><then>
      <return>return <expr><name>PR_TRUE</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>mNext</name></expr>)</condition><then>
      <return>return <expr><call><name><name>mNext</name>-&gt;<name>Contains</name></name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></function>

  <function><type><name>PRInt32</name></type> <name>Count</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>total</name> <init>= <expr><name>mMax</name> - <name>mMin</name> + 1</expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>mNext</name></expr>)</condition><then>
      <expr_stmt><expr><name>total</name> += <call><name><name>mNext</name>-&gt;<name>Count</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>total</name></expr>;</return>
  }</block></function>

  <function><type><name>void</name></type> <name>Invalidate</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>mSelection</name>-&gt;<name>mTree</name></name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>mSelection</name>-&gt;<name>mTree</name>-&gt;<name>InvalidateRange</name></name><argument_list>(<argument><expr><name>mMin</name></expr></argument>, <argument><expr><name>mMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>mNext</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>mNext</name>-&gt;<name>Invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
  }</block></function>

  <function><type><name>void</name></type> <name>RemoveAllBut</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aIndex</name></decl></param>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>aIndex</name> &gt;= <name>mMin</name> &amp;&amp; <name>aIndex</name> &lt;= <name>mMax</name></expr>)</condition><then> <block>{

      <comment type="line">// Invalidate everything in this list.</comment>
      <expr_stmt><expr><call><name><name>mSelection</name>-&gt;<name>mFirstRange</name>-&gt;<name>Invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>mMin</name> = <name>aIndex</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>mMax</name> = <name>aIndex</name></expr>;</expr_stmt>
      
      <decl_stmt><decl><type><name>nsTreeRange</name>*</type> <name>first</name> <init>= <expr><name><name>mSelection</name>-&gt;<name>mFirstRange</name></name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>mPrev</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>mPrev</name>-&gt;<name>mNext</name></name> = <name>mNext</name></expr>;</expr_stmt></then></if>
      <if>if <condition>(<expr><name>mNext</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>mNext</name>-&gt;<name>mPrev</name></name> = <name>mPrev</name></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><name>mNext</name> = <name>mPrev</name> = <name>nsnull</name></expr>;</expr_stmt>
      
      <if>if <condition>(<expr><name>first</name> != <name>this</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>delete <name><name>mSelection</name>-&gt;<name>mFirstRange</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mSelection</name>-&gt;<name>mFirstRange</name></name> = <name>this</name></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>mNext</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>mNext</name>-&gt;<name>RemoveAllBut</name></name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
  }</block></function>

  <function><type><name>void</name></type> <name>Insert</name><parameter_list>(<param><decl><type><name>nsTreeRange</name>*</type> <name>aRange</name></decl></param>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>mMin</name> &gt;= <name><name>aRange</name>-&gt;<name>mMax</name></name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>aRange</name>-&gt;<name>Connect</name></name><argument_list>(<argument><expr><name>mPrev</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name>mNext</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>mNext</name>-&gt;<name>Insert</name></name><argument_list>(<argument><expr><name>aRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else 
      <expr_stmt><expr><call><name><name>aRange</name>-&gt;<name>Connect</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
  }</block></function>
</public>}</block>;</struct>

<constructor><name><name>nsTreeSelection</name>::<name>nsTreeSelection</name></name><parameter_list>(<param><decl><type><name>nsITreeBoxObject</name>*</type> <name>aTree</name></decl></param>)</parameter_list>
  <member_list>: <call><name>mTree</name><argument_list>(<argument><expr><name>aTree</name></expr></argument>)</argument_list></call>,
    <call><name>mSuppressed</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call>,
    <call><name>mCurrentIndex</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call>,
    <call><name>mShiftSelectPivot</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call>,
    <call><name>mFirstRange</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>
</member_list><block>{
}</block></constructor>

<destructor><name><name>nsTreeSelection</name>::~<name>nsTreeSelection</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr>delete <name>mFirstRange</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>mSelectTimer</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>mSelectTimer</name>-&gt;<name>Cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
}</block></destructor>

<macro><name>NS_IMPL_CYCLE_COLLECTION_2</name><argument_list>(<argument>nsTreeSelection</argument>, <argument>mTree</argument>, <argument>mCurrentColumn</argument>)</argument_list></macro>

<macro><name>NS_IMPL_CYCLE_COLLECTING_ADDREF</name><argument_list>(<argument>nsTreeSelection</argument>)</argument_list></macro>
<macro><name>NS_IMPL_CYCLE_COLLECTING_RELEASE</name><argument_list>(<argument>nsTreeSelection</argument>)</argument_list></macro>

<macro><name>DOMCI_DATA</name><argument_list>(<argument>TreeSelection</argument>, <argument>nsTreeSelection</argument>)</argument_list></macro>

<comment type="line">// QueryInterface implementation for nsBoxObject</comment>
<macro><name>NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION</name><argument_list>(<argument>nsTreeSelection</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsITreeSelection</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsISupports</argument>)</argument_list></macro>
  <macro><name>NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO</name><argument_list>(<argument>TreeSelection</argument>)</argument_list></macro>
<function><type><name>NS_INTERFACE_MAP_END</name>

<name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>GetTree</name></name><parameter_list>(<param><decl><type><name>nsITreeBoxObject</name> * *</type><name>aTree</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aTree</name> = <name>mTree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>SetTree</name></name><parameter_list>(<param><decl><type><name>nsITreeBoxObject</name> *</type> <name>aTree</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mSelectTimer</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mSelectTimer</name>-&gt;<name>Cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mSelectTimer</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// Make sure aTree really implements nsITreeBoxObject and nsIBoxObject!</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIBoxObject</name></expr></argument>&gt;</argument_list></name></type> <name>bo</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aTree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>mTree</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>bo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>mTree</name> == <name>aTree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>GetSingle</name></name><parameter_list>(<param><decl><type><name>PRBool</name>*</type> <name>aSingle</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mTree</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_NULL_POINTER</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIBoxObject</name></expr></argument>&gt;</argument_list></name></type> <name>boxObject</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mTree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>element</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>boxObject</name>-&gt;<name>GetElement</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>content</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name><name>nsIContent</name>::<name>AttrValuesArray</name></name></type> <name><name>strings</name><index>[]</index></name> <init>=
    <expr><block>{<expr>&amp;<name><name>nsGkAtoms</name>::<name>single</name></name></expr>, <expr>&amp;<name><name>nsGkAtoms</name>::<name>cell</name></name></expr>, <expr>&amp;<name><name>nsGkAtoms</name>::<name>text</name></name></expr>, <expr><name>nsnull</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>aSingle</name> = <call><name><name>content</name>-&gt;<name>FindAttrValueIn</name></name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>,
                                      <argument><expr><name><name>nsGkAtoms</name>::<name>seltype</name></name></expr></argument>,
                                      <argument><expr><name>strings</name></expr></argument>, <argument><expr><name>eCaseMatters</name></expr></argument>)</argument_list></call> &gt;= 0</expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>IsSelected</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aIndex</name></decl></param>, <param><decl><type><name>PRBool</name>*</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mFirstRange</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>aResult</name> = <call><name><name>mFirstRange</name>-&gt;<name>Contains</name></name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr>*<name>aResult</name> = <name>PR_FALSE</name></expr>;</expr_stmt></else></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>TimedSelect</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aIndex</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aMsec</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRBool</name></type> <name>suppressSelect</name> <init>= <expr><name>mSuppressed</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>aMsec</name> != -1</expr>)</condition><then>
    <expr_stmt><expr><name>mSuppressed</name> = <name>PR_TRUE</name></expr>;</expr_stmt></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>Select</name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <if>if <condition>(<expr><name>aMsec</name> != -1</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mSuppressed</name> = <name>suppressSelect</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>mSuppressed</name></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>mSelectTimer</name></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>mSelectTimer</name>-&gt;<name>Cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><name>mSelectTimer</name> = <call><name>do_CreateInstance</name><argument_list>(<argument><expr>"@mozilla.org/timer;1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>mSelectTimer</name>-&gt;<name>InitWithFuncCallback</name></name><argument_list>(<argument><expr><name>SelectCallback</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>aMsec</name></expr></argument>, 
                                         <argument><expr><name><name>nsITimer</name>::<name>TYPE_ONE_SHOT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>Select</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aIndex</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mShiftSelectPivot</name> = -1</expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>SetCurrentIndex</name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <if>if <condition>(<expr><name>mFirstRange</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRBool</name></type> <name>alreadySelected</name> <init>= <expr><call><name><name>mFirstRange</name>-&gt;<name>Contains</name></name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>alreadySelected</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>PRInt32</name></type> <name>count</name> <init>= <expr><call><name><name>mFirstRange</name>-&gt;<name>Count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>count</name> &gt; 1</expr>)</condition><then> <block>{
        <comment type="line">// We need to deselect everything but our item.</comment>
        <expr_stmt><expr><call><name><name>mFirstRange</name>-&gt;<name>RemoveAllBut</name></name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FireOnSelectHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then>
    <else>else <block>{
      <comment type="line">// Clear out our selection.</comment>
      <expr_stmt><expr><call><name><name>mFirstRange</name>-&gt;<name>Invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>mFirstRange</name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then></if>

  <comment type="line">// Create our new selection.</comment>
  <expr_stmt><expr><name>mFirstRange</name> = new <call><name>nsTreeRange</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>mFirstRange</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name><name>mFirstRange</name>-&gt;<name>Invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Fire the select event</comment>
  <expr_stmt><expr><call><name>FireOnSelectHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>ToggleSelect</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aIndex</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// There are six cases that can occur on a ToggleSelect with our</comment>
  <comment type="line">// range code.</comment>
  <comment type="line">// (1) A new range should be made for a selection.</comment>
  <comment type="line">// (2) A single range is removed from the selection.</comment>
  <comment type="line">// (3) The item is added to an existing range.</comment>
  <comment type="line">// (4) The item is removed from an existing range.</comment>
  <comment type="line">// (5) The addition of the item causes two ranges to be merged.</comment>
  <comment type="line">// (6) The removal of the item causes two ranges to be split.</comment>
  <expr_stmt><expr><name>mShiftSelectPivot</name> = -1</expr>;</expr_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>SetCurrentIndex</name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <if>if <condition>(<expr>!<name>mFirstRange</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>Select</name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else <block>{
    <if>if <condition>(<expr>!<call><name><name>mFirstRange</name>-&gt;<name>Contains</name></name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>PRBool</name></type> <name>single</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rv</name> = <call><name>GetSingle</name><argument_list>(<argument><expr>&amp;<name>single</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; !<name>single</name></expr>)</condition><then>
        <expr_stmt><expr><name>rv</name> = <call><name><name>mFirstRange</name>-&gt;<name>Add</name></name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then>
    <else>else
      <expr_stmt><expr><name>rv</name> = <call><name><name>mFirstRange</name>-&gt;<name>Remove</name></name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>mTree</name></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>mTree</name>-&gt;<name>InvalidateRow</name></name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><call><name>FireOnSelectHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></else></if>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>RangedSelect</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aStartIndex</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aEndIndex</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aAugment</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRBool</name></type> <name>single</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetSingle</name><argument_list>(<argument><expr>&amp;<name>single</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <if>if <condition>(<expr>(<name>mFirstRange</name> || (<name>aStartIndex</name> != <name>aEndIndex</name>)) &amp;&amp; <name>single</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <if>if <condition>(<expr>!<name>aAugment</name></expr>)</condition><then> <block>{
    <comment type="line">// Clear our selection.</comment>
    <if>if <condition>(<expr><name>mFirstRange</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>mFirstRange</name>-&gt;<name>Invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>delete <name>mFirstRange</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <if>if <condition>(<expr><name>aStartIndex</name> == -1</expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>mShiftSelectPivot</name> != -1</expr>)</condition><then>
      <expr_stmt><expr><name>aStartIndex</name> = <name>mShiftSelectPivot</name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name>mCurrentIndex</name> != -1</expr>)</condition><then>
      <expr_stmt><expr><name>aStartIndex</name> = <name>mCurrentIndex</name></expr>;</expr_stmt></then>
    <else>else
      <expr_stmt><expr><name>aStartIndex</name> = <name>aEndIndex</name></expr>;</expr_stmt></else></if></else></if>
  }</block></then></if>

  <expr_stmt><expr><name>mShiftSelectPivot</name> = <name>aStartIndex</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name>SetCurrentIndex</name><argument_list>(<argument><expr><name>aEndIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>
  
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>start</name> <init>= <expr><name>aStartIndex</name> &lt; <name>aEndIndex</name> ? <name>aStartIndex</name> : <name>aEndIndex</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>end</name> <init>= <expr><name>aStartIndex</name> &lt; <name>aEndIndex</name> ? <name>aEndIndex</name> : <name>aStartIndex</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>aAugment</name> &amp;&amp; <name>mFirstRange</name></expr>)</condition><then> <block>{
    <comment type="line">// We need to remove all the items within our selected range from the selection,</comment>
    <comment type="line">// and then we insert our new range into the list.</comment>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>mFirstRange</name>-&gt;<name>RemoveRange</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <return>return <expr><name>rv</name></expr>;</return></then></if>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsTreeRange</name>*</type> <name>range</name> <init>= <expr>new <call><name>nsTreeRange</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>range</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name><name>range</name>-&gt;<name>Invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>aAugment</name> &amp;&amp; <name>mFirstRange</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>mFirstRange</name>-&gt;<name>Insert</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>mFirstRange</name> = <name>range</name></expr>;</expr_stmt></else></if>

  <expr_stmt><expr><call><name>FireOnSelectHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>ClearRange</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aStartIndex</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aEndIndex</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>SetCurrentIndex</name><argument_list>(<argument><expr><name>aEndIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <if>if <condition>(<expr><name>mFirstRange</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>start</name> <init>= <expr><name>aStartIndex</name> &lt; <name>aEndIndex</name> ? <name>aStartIndex</name> : <name>aEndIndex</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>end</name> <init>= <expr><name>aStartIndex</name> &lt; <name>aEndIndex</name> ? <name>aEndIndex</name> : <name>aStartIndex</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>mFirstRange</name>-&gt;<name>RemoveRange</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>mTree</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>mTree</name>-&gt;<name>InvalidateRange</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  }</block></then></if>
  
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>ClearSelection</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mFirstRange</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mFirstRange</name>-&gt;<name>Invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>delete <name>mFirstRange</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mFirstRange</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><name>mShiftSelectPivot</name> = -1</expr>;</expr_stmt>

  <expr_stmt><expr><call><name>FireOnSelectHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>InvertSelection</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>SelectAll</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mTree</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITreeView</name></expr></argument>&gt;</argument_list></name></type> <name>view</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mTree</name>-&gt;<name>GetView</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>view</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>rowCount</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>view</name>-&gt;<name>GetRowCount</name></name><argument_list>(<argument><expr>&amp;<name>rowCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>single</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetSingle</name><argument_list>(<argument><expr>&amp;<name>single</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <if>if <condition>(<expr><name>rowCount</name> == 0 || (<name>rowCount</name> &gt; 1 &amp;&amp; <name>single</name>)</expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <expr_stmt><expr><name>mShiftSelectPivot</name> = -1</expr>;</expr_stmt>

  <comment type="line">// Invalidate not necessary when clearing selection, since </comment>
  <comment type="line">// we're going to invalidate the world on the SelectAll.</comment>
  <expr_stmt><expr>delete <name>mFirstRange</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>mFirstRange</name> = new <call><name>nsTreeRange</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>rowCount</name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mFirstRange</name>-&gt;<name>Invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>FireOnSelectHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>GetRangeCount</name></name><parameter_list>(<param><decl><type><name>PRInt32</name>*</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsTreeRange</name>*</type> <name>curr</name> <init>= <expr><name>mFirstRange</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>curr</name></expr>)</condition> <block>{
    <expr_stmt><expr><name>count</name>++</expr>;</expr_stmt>
    <expr_stmt><expr><name>curr</name> = <name><name>curr</name>-&gt;<name>mNext</name></name></expr>;</expr_stmt>
  }</block></while>

  <expr_stmt><expr>*<name>aResult</name> = <name>count</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>GetRangeAt</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aIndex</name></decl></param>, <param><decl><type><name>PRInt32</name>*</type> <name>aMin</name></decl></param>, <param><decl><type><name>PRInt32</name>*</type> <name>aMax</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aMin</name> = *<name>aMax</name> = -1</expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>i</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsTreeRange</name>*</type> <name>curr</name> <init>= <expr><name>mFirstRange</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>curr</name></expr>)</condition> <block>{
    <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>i</name> == <name>aIndex</name></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>aMin</name> = <name><name>curr</name>-&gt;<name>mMin</name></name></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>aMax</name> = <name><name>curr</name>-&gt;<name>mMax</name></name></expr>;</expr_stmt>
      <break>break;</break>
    }</block></then></if>
    <expr_stmt><expr><name>curr</name> = <name><name>curr</name>-&gt;<name>mNext</name></name></expr>;</expr_stmt>
  }</block></while>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>GetCount</name></name><parameter_list>(<param><decl><type><name>PRInt32</name> *</type><name>count</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mFirstRange</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>count</name> = <call><name><name>mFirstRange</name>-&gt;<name>Count</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
  <else>else <comment type="line">// No range available, so there's no selected row.</comment>
    <expr_stmt><expr>*<name>count</name> = 0</expr>;</expr_stmt></else></if>
  
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>GetSelectEventsSuppressed</name></name><parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>aSelectEventsSuppressed</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aSelectEventsSuppressed</name> = <name>mSuppressed</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>SetSelectEventsSuppressed</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aSelectEventsSuppressed</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mSuppressed</name> = <name>aSelectEventsSuppressed</name></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>mSuppressed</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>FireOnSelectHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>GetCurrentIndex</name></name><parameter_list>(<param><decl><type><name>PRInt32</name> *</type><name>aCurrentIndex</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aCurrentIndex</name> = <name>mCurrentIndex</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>SetCurrentIndex</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aIndex</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mTree</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr><name>mCurrentIndex</name> == <name>aIndex</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr><name>mCurrentIndex</name> != -1 &amp;&amp; <name>mTree</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>mTree</name>-&gt;<name>InvalidateRow</name></name><argument_list>(<argument><expr><name>mCurrentIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  
  <expr_stmt><expr><name>mCurrentIndex</name> = <name>aIndex</name></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>mTree</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
  
  <if>if <condition>(<expr><name>aIndex</name> != -1</expr>)</condition><then>
    <expr_stmt><expr><call><name><name>mTree</name>-&gt;<name>InvalidateRow</name></name><argument_list>(<argument><expr><name>aIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="line">// Fire DOMMenuItemActive event for tree</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIBoxObject</name></expr></argument>&gt;</argument_list></name></type> <name>boxObject</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mTree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>boxObject</name></expr></argument>, <argument><expr>"no box object!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>boxObject</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return></then></if>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>treeElt</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>boxObject</name>-&gt;<name>GetElement</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>treeElt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINode</name></expr></argument>&gt;</argument_list></name></type> <name>treeDOMNode</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>treeElt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>treeDOMNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsPLDOMEvent</name></expr></argument>&gt;</argument_list></name></type> <name>event</name> <init>=
    <expr>new <call><name>nsPLDOMEvent</name><argument_list>(<argument><expr><name>treeDOMNode</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"DOMMenuItemActive"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>event</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <return>return <expr><call><name><name>event</name>-&gt;<name>PostDOMEvent</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>GetCurrentColumn</name></name><parameter_list>(<param><decl><type><name>nsITreeColumn</name>**</type> <name>aCurrentColumn</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aCurrentColumn</name> = <name>mCurrentColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsTreeSelection</name>::<name>SetCurrentColumn</name></name><parameter_list>(<param><decl><type><name>nsITreeColumn</name>*</type> <name>aCurrentColumn</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mTree</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr><name>mCurrentColumn</name> == <name>aCurrentColumn</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><name>mCurrentColumn</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>mFirstRange</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>mTree</name>-&gt;<name>InvalidateCell</name></name><argument_list>(<argument><expr><name><name>mFirstRange</name>-&gt;<name>mMin</name></name></expr></argument>, <argument><expr><name>mCurrentColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>mCurrentIndex</name> != -1</expr>)</condition><then>
      <expr_stmt><expr><call><name><name>mTree</name>-&gt;<name>InvalidateCell</name></name><argument_list>(<argument><expr><name>mCurrentIndex</name></expr></argument>, <argument><expr><name>mCurrentColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  }</block></then></if>
  
  <expr_stmt><expr><name>mCurrentColumn</name> = <name>aCurrentColumn</name></expr>;</expr_stmt>
  
  <if>if <condition>(<expr><name>mCurrentColumn</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>mFirstRange</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>mTree</name>-&gt;<name>InvalidateCell</name></name><argument_list>(<argument><expr><name><name>mFirstRange</name>-&gt;<name>mMin</name></name></expr></argument>, <argument><expr><name>mCurrentColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>mCurrentIndex</name> != -1</expr>)</condition><then>
      <expr_stmt><expr><call><name><name>mTree</name>-&gt;<name>InvalidateCell</name></name><argument_list>(<argument><expr><name>mCurrentIndex</name></expr></argument>, <argument><expr><name>mCurrentColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_NEW_RANGE</name><parameter_list>(<param><type><name>macro_range</name></type></param>, <param><type><name>macro_selection</name></type></param>, <param><type><name>macro_start</name></type></param>, <param><type><name>macro_end</name></type></param>)</parameter_list></cpp:macro> \
  <cpp:value>{ \
    nsTreeRange* macro_new_range = new nsTreeRange(macro_selection, (macro_start), (macro_end)); \
    if (macro_range) \
      macro_range-&gt;Insert(macro_new_range); \
    else \
      macro_range = macro_new_range; \
  }</cpp:value></cpp:define>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsTreeSelection</name>::<name>AdjustSelection</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aIndex</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aCount</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aCount</name> != 0</expr></argument>, <argument><expr>"adjusting by zero"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>aCount</name></expr>)</condition><then> <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <comment type="line">// adjust mShiftSelectPivot, if necessary</comment>
  <if>if <condition>(<expr>(<name>mShiftSelectPivot</name> != 1) &amp;&amp; (<name>aIndex</name> &lt;= <name>mShiftSelectPivot</name>)</expr>)</condition><then> <block>{
    <comment type="line">// if we are deleting and the delete includes the shift select pivot, reset it</comment>
    <if>if <condition>(<expr><name>aCount</name> &lt; 0 &amp;&amp; (<name>mShiftSelectPivot</name> &lt;= (<name>aIndex</name> -<name>aCount</name> -1))</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>mShiftSelectPivot</name> = -1</expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name>mShiftSelectPivot</name> += <name>aCount</name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then></if>

  <comment type="line">// adjust mCurrentIndex, if necessary</comment>
  <if>if <condition>(<expr>(<name>mCurrentIndex</name> != -1) &amp;&amp; (<name>aIndex</name> &lt;= <name>mCurrentIndex</name>)</expr>)</condition><then> <block>{
    <comment type="line">// if we are deleting and the delete includes the current index, reset it</comment>
    <if>if <condition>(<expr><name>aCount</name> &lt; 0 &amp;&amp; (<name>mCurrentIndex</name> &lt;= (<name>aIndex</name> -<name>aCount</name> -1))</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>mCurrentIndex</name> = -1</expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name>mCurrentIndex</name> += <name>aCount</name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then></if>

  <comment type="line">// no selection, so nothing to do.</comment>
  <if>if <condition>(<expr>!<name>mFirstRange</name></expr>)</condition><then> <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsTreeRange</name>*</type> <name>newRange</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>selChanged</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsTreeRange</name>*</type> <name>curr</name> <init>= <expr><name>mFirstRange</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>curr</name></expr>)</condition> <block>{
    <if>if <condition>(<expr><name>aCount</name> &gt; 0</expr>)</condition><then> <block>{
      <comment type="line">// inserting</comment>
      <if>if <condition>(<expr><name>aIndex</name> &gt; <name><name>curr</name>-&gt;<name>mMax</name></name></expr>)</condition><then> <block>{
        <comment type="line">// adjustment happens after the range, so no change</comment>
        <expr_stmt><expr><call><name>ADD_NEW_RANGE</name><argument_list>(<argument><expr><name>newRange</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>curr</name>-&gt;<name>mMin</name></name></expr></argument>, <argument><expr><name><name>curr</name>-&gt;<name>mMax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then>
      <else>else <if>if <condition>(<expr><name>aIndex</name> &lt;= <name><name>curr</name>-&gt;<name>mMin</name></name></expr>)</condition><then> <block>{  
        <comment type="line">// adjustment happens before the start of the range, so shift down</comment>
        <expr_stmt><expr><call><name>ADD_NEW_RANGE</name><argument_list>(<argument><expr><name>newRange</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>curr</name>-&gt;<name>mMin</name></name> + <name>aCount</name></expr></argument>, <argument><expr><name><name>curr</name>-&gt;<name>mMax</name></name> + <name>aCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>selChanged</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
      }</block></then>
      <else>else <block>{
        <comment type="line">// adjustment happen inside the range.</comment>
        <comment type="line">// break apart the range and create two ranges</comment>
        <expr_stmt><expr><call><name>ADD_NEW_RANGE</name><argument_list>(<argument><expr><name>newRange</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>curr</name>-&gt;<name>mMin</name></name></expr></argument>, <argument><expr><name>aIndex</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ADD_NEW_RANGE</name><argument_list>(<argument><expr><name>newRange</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>aIndex</name> + <name>aCount</name></expr></argument>, <argument><expr><name><name>curr</name>-&gt;<name>mMax</name></name> + <name>aCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>selChanged</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
      }</block></else></if></else></if>
    }</block></then>
    <else>else <block>{
      <comment type="line">// deleting</comment>
      <if>if <condition>(<expr><name>aIndex</name> &gt; <name><name>curr</name>-&gt;<name>mMax</name></name></expr>)</condition><then> <block>{
        <comment type="line">// adjustment happens after the range, so no change</comment>
        <expr_stmt><expr><call><name>ADD_NEW_RANGE</name><argument_list>(<argument><expr><name>newRange</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>curr</name>-&gt;<name>mMin</name></name></expr></argument>, <argument><expr><name><name>curr</name>-&gt;<name>mMax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then>
      <else>else <block>{
        <comment type="line">// remember, aCount is negative</comment>
        <expr_stmt><expr><name>selChanged</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PRInt32</name></type> <name>lastIndexOfAdjustment</name> <init>= <expr><name>aIndex</name> - <name>aCount</name> - 1</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>aIndex</name> &lt;= <name><name>curr</name>-&gt;<name>mMin</name></name></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>lastIndexOfAdjustment</name> &lt; <name><name>curr</name>-&gt;<name>mMin</name></name></expr>)</condition><then> <block>{
            <comment type="line">// adjustment happens before the start of the range, so shift up</comment>
            <expr_stmt><expr><call><name>ADD_NEW_RANGE</name><argument_list>(<argument><expr><name>newRange</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>curr</name>-&gt;<name>mMin</name></name> + <name>aCount</name></expr></argument>, <argument><expr><name><name>curr</name>-&gt;<name>mMax</name></name> + <name>aCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then>
          <else>else <if>if <condition>(<expr><name>lastIndexOfAdjustment</name> &gt;= <name><name>curr</name>-&gt;<name>mMax</name></name></expr>)</condition><then> <block>{
            <comment type="line">// adjustment contains the range.  remove the range by not adding it to the newRange</comment>
          }</block></then>
          <else>else <block>{
            <comment type="line">// adjustment starts before the range, and ends in the middle of it, so trim the range</comment>
            <macro><name>ADD_NEW_RANGE</name><argument_list>(<argument>newRange</argument>, <argument>this</argument>, <argument>aIndex</argument>, <argument>curr-&gt;mMax + aCount</argument>)</argument_list></macro>
          }</block></else></if></else></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>lastIndexOfAdjustment</name> &gt;= <name><name>curr</name>-&gt;<name>mMax</name></name></expr>)</condition><then> <block>{
         <comment type="line">// adjustment starts in the middle of the current range, and contains the end of the range, so trim the range</comment>
         <macro><name>ADD_NEW_RANGE</name><argument_list>(<argument>newRange</argument>, <argument>this</argument>, <argument>curr-&gt;mMin</argument>, <argument>aIndex - 1</argument>)</argument_list></macro>
        }</block></then>
        <else>else <block>{
          <comment type="line">// range contains the adjustment, so shorten the range</comment>
          <macro><name>ADD_NEW_RANGE</name><argument_list>(<argument>newRange</argument>, <argument>this</argument>, <argument>curr-&gt;mMin</argument>, <argument>curr-&gt;mMax + aCount</argument>)</argument_list></macro>
        }</block></else></if></else></if>
      }</block></else></if>
    }</block></else></if>
    <expr_stmt><expr><name>curr</name> = <name><name>curr</name>-&gt;<name>mNext</name></name></expr>;</expr_stmt>
  }</block></while>

  <expr_stmt><expr>delete <name>mFirstRange</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mFirstRange</name> = <name>newRange</name></expr>;</expr_stmt>

  <comment type="line">// Fire the select event</comment>
  <if>if <condition>(<expr><name>selChanged</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>FireOnSelectHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsTreeSelection</name>::<name>InvalidateSelection</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mFirstRange</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>mFirstRange</name>-&gt;<name>Invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsTreeSelection</name>::<name>GetShiftSelectPivot</name></name><parameter_list>(<param><decl><type><name>PRInt32</name>*</type> <name>aIndex</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aIndex</name> = <name>mShiftSelectPivot</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<function><type><name>nsresult</name></type>
<name><name>nsTreeSelection</name>::<name>FireOnSelectHandler</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mSuppressed</name> || !<name>mTree</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIBoxObject</name></expr></argument>&gt;</argument_list></name></type> <name>boxObject</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mTree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>boxObject</name></expr></argument>, <argument><expr>"no box object!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>boxObject</name></expr>)</condition><then>
     <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return></then></if>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>elt</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>boxObject</name>-&gt;<name>GetElement</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINode</name></expr></argument>&gt;</argument_list></name></type> <name>node</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsPLDOMEvent</name></expr></argument>&gt;</argument_list></name></type> <name>event</name> <init>=
    <expr>new <call><name>nsPLDOMEvent</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"select"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>event</name>-&gt;<name>RunDOMEventWhenSafe</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsTreeSelection</name>::<name>SelectCallback</name></name><parameter_list>(<param><decl><type><name>nsITimer</name> *</type><name>aTimer</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aClosure</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsTreeSelection</name></expr></argument>&gt;</argument_list></name></type> <name>self</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsTreeSelection</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aClosure</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>self</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>self</name>-&gt;<name>FireOnSelectHandler</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aTimer</name>-&gt;<name>Cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name>-&gt;<name>mSelectTimer</name></name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////////////</comment>

<function><type><name>nsresult</name></type>
<name>NS_NewTreeSelection</name><parameter_list>(<param><decl><type><name>nsITreeBoxObject</name>*</type> <name>aTree</name></decl></param>, <param><decl><type><name>nsITreeSelection</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aResult</name> = new <call><name>nsTreeSelection</name><argument_list>(<argument><expr><name>aTree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!*<name>aResult</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
</unit>
