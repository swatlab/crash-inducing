<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="00764c2cb97f06bac3fbbe24446da1a62b1e92d8.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */</comment>
<comment type="block">/* vim:expandtab:shiftwidth=4:tabstop=4:
 */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Christopher Blizzard &lt;blizzard@mozilla.org&gt;.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Christopher Blizzard &lt;blizzard@mozilla.org&gt;
 *   Markus G. Kuhn &lt;mkuhn@acm.org&gt;
 *   Richard Verhoeven &lt;river@win.tue.nl&gt;
 *   Frank Tang &lt;ftang@netscape.com&gt; adopt into mozilla
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDragService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIObserverService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsWidgetsCID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsWindow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIServiceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsXPCOM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISupportsPrimitives.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIIOService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFileURL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNetUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsTArray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPrimitiveHelpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prtime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtk/gtk.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdkx.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCRT.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gfxASurface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gfxXlibSurface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gfxContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsImageToPixbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPresShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPresContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISelection.h"</cpp:file></cpp:include>

<comment type="line">// This sets how opaque the drag image is</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRAG_IMAGE_ALPHA_LEVEL</name></cpp:macro> <cpp:value>0.5</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>PRLogModuleInfo</name> *</type><name>sDragLm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>gMimeListType</name><index>[]</index></name> <init>= <expr>"application/x-moz-internal-item-list"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>gMozUrlType</name><index>[]</index></name> <init>= <expr>"_NETSCAPE_URL"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>gTextUriListType</name><index>[]</index></name> <init>= <expr>"text/uri-list"</expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>invisibleSourceDragEnd</name><parameter_list>(<param><decl><type><name>GtkWidget</name>        *</type><name>aWidget</name></decl></param>,
                       <param><decl><type><name>GdkDragContext</name>   *</type><name>aContext</name></decl></param>,
                       <param><decl><type><name>gpointer</name></type>          <name>aData</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>invisibleSourceDragDataGet</name><parameter_list>(<param><decl><type><name>GtkWidget</name>        *</type><name>aWidget</name></decl></param>,
                           <param><decl><type><name>GdkDragContext</name>   *</type><name>aContext</name></decl></param>,
                           <param><decl><type><name>GtkSelectionData</name> *</type><name>aSelectionData</name></decl></param>,
                           <param><decl><type><name>guint</name></type>             <name>aInfo</name></decl></param>,
                           <param><decl><type><name>guint32</name></type>           <name>aTime</name></decl></param>,
                           <param><decl><type><name>gpointer</name></type>          <name>aData</name></decl></param>)</parameter_list>;</function_decl>

<constructor><name><name>nsDragService</name>::<name>nsDragService</name></name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">// We have to destroy the hidden widget before the event loop stops</comment>
    <comment type="line">// running.</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIObserverService</name></expr></argument>&gt;</argument_list></name></type> <name>obsServ</name> <init>=
        <expr><call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/observer-service;1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>obsServ</name>-&gt;<name>AddObserver</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>"quit-application"</expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// our hidden source widget</comment>
    <expr_stmt><expr><name>mHiddenWidget</name> = <call><name>gtk_invisible_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// make sure that the widget is realized so that</comment>
    <comment type="line">// we can use it as a drag source.</comment>
    <expr_stmt><expr><call><name>gtk_widget_realize</name><argument_list>(<argument><expr><name>mHiddenWidget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// hook up our internal signals so that we can get some feedback</comment>
    <comment type="line">// from our drag source</comment>
    <expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>GTK_OBJECT</name><argument_list>(<argument><expr><name>mHiddenWidget</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"drag_data_get"</expr></argument>,
                     <argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>invisibleSourceDragDataGet</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>GTK_OBJECT</name><argument_list>(<argument><expr><name>mHiddenWidget</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"drag_end"</expr></argument>,
                     <argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>invisibleSourceDragEnd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// set up our logging module</comment>
    <if>if <condition>(<expr>!<name>sDragLm</name></expr>)</condition><then>
    <expr_stmt><expr><name>sDragLm</name> = <call><name>PR_NewLogModule</name><argument_list>(<argument><expr>"nsDragService"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("nsDragService::nsDragService")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mTargetWidget</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>mTargetDragContext</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>mTargetTime</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>mCanDrop</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mTargetDragDataReceived</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mTargetDragData</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>mTargetDragDataLen</name> = 0</expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>nsDragService</name>::~<name>nsDragService</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("nsDragService::~nsDragService")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<macro><name>NS_IMPL_ISUPPORTS_INHERITED2</name><argument_list>(<argument>nsDragService</argument>, <argument>nsBaseDragService</argument>,
                             <argument>nsIDragSessionGTK</argument>, <argument>nsIObserver</argument>)</argument_list></macro>

<comment type="line">// nsIObserver</comment>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDragService</name>::<name>Observe</name></name><parameter_list>(<param><decl><type><name>nsISupports</name> *</type><name>aSubject</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aTopic</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>aData</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name><name>nsCRT</name>::<name>strcmp</name></name><argument_list>(<argument><expr><name>aTopic</name></expr></argument>, <argument><expr>"quit-application"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
           <argument><expr>("nsDragService::Observe(\"quit-application\")")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>mHiddenWidget</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>gtk_widget_destroy</name><argument_list>(<argument><expr><name>mHiddenWidget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>mHiddenWidget</name> = 0</expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>TargetResetData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name>NS_NOTREACHED</name><argument_list>(<argument><expr>"unexpected topic"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return>
  }</block></else></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// nsIDragService</comment>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDragService</name>::<name>InvokeDragSession</name></name><parameter_list>(<param><decl><type><name>nsIDOMNode</name> *</type><name>aDOMNode</name></decl></param>,
                                 <param><decl><type><name>nsISupportsArray</name> *</type> <name>aArrayTransferables</name></decl></param>,
                                 <param><decl><type><name>nsIScriptableRegion</name> *</type> <name>aRegion</name></decl></param>,
                                 <param><decl><type><name>PRUint32</name></type> <name>aActionType</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("nsDragService::InvokeDragSession")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsBaseDragService</name>::<name>InvokeDragSession</name></name><argument_list>(<argument><expr><name>aDOMNode</name></expr></argument>,
                                                       <argument><expr><name>aArrayTransferables</name></expr></argument>,
                                                       <argument><expr><name>aRegion</name></expr></argument>, <argument><expr><name>aActionType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// make sure that we have an array of transferables to use</comment>
    <if>if <condition>(<expr>!<name>aArrayTransferables</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return></then></if>
    <comment type="line">// set our reference to the transferables.  this will also addref</comment>
    <comment type="line">// the transferables since we're going to hang onto this beyond the</comment>
    <comment type="line">// length of this call</comment>
    <expr_stmt><expr><name>mSourceDataItems</name> = <name>aArrayTransferables</name></expr>;</expr_stmt>
    <comment type="line">// get the list of items we offer for drags</comment>
    <decl_stmt><decl><type><name>GtkTargetList</name> *</type><name>sourceList</name> <init>= <expr><call><name>GetSourceList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>sourceList</name></expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

    <comment type="line">// save our action type</comment>
    <decl_stmt><decl><type><name>GdkDragAction</name></type> <name>action</name> <init>= <expr><name>GDK_ACTION_DEFAULT</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>aActionType</name> &amp; <name>DRAGDROP_ACTION_COPY</name></expr>)</condition><then>
        <expr_stmt><expr><name>action</name> = <call>(<name>GdkDragAction</name>)<argument_list>(<argument><expr><name>action</name> | <name>GDK_ACTION_COPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>aActionType</name> &amp; <name>DRAGDROP_ACTION_MOVE</name></expr>)</condition><then>
        <expr_stmt><expr><name>action</name> = <call>(<name>GdkDragAction</name>)<argument_list>(<argument><expr><name>action</name> | <name>GDK_ACTION_MOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>aActionType</name> &amp; <name>DRAGDROP_ACTION_LINK</name></expr>)</condition><then>
        <expr_stmt><expr><name>action</name> = <call>(<name>GdkDragAction</name>)<argument_list>(<argument><expr><name>action</name> | <name>GDK_ACTION_LINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <comment type="line">// Create a fake event for the drag so we can pass the time</comment>
    <comment type="line">// (so to speak.)  If we don't do this the drag can end as a</comment>
    <comment type="line">// result of a button release that is actually _earlier_ than</comment>
    <comment type="line">// CurrentTime.  So we use the time on the last button press</comment>
    <comment type="line">// event, as that will always be older than the button release</comment>
    <comment type="line">// that ends any drag.</comment>
    <decl_stmt><decl><type><name>GdkEvent</name></type> <name>event</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>event</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GdkEvent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>event</name>.<name>type</name></name> = <name>GDK_BUTTON_PRESS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>event</name>.<name>button</name>.<name>window</name></name> = <name><name>mHiddenWidget</name>-&gt;<name>window</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>event</name>.<name>button</name>.<name>time</name></name> = <name><name>nsWindow</name>::<name>mLastButtonPressTime</name></name></expr>;</expr_stmt>

    <comment type="line">// start our drag.</comment>
    <decl_stmt><decl><type><name>GdkDragContext</name> *</type><name>context</name> <init>= <expr><call><name>gtk_drag_begin</name><argument_list>(<argument><expr><name>mHiddenWidget</name></expr></argument>,
                                             <argument><expr><name>sourceList</name></expr></argument>,
                                             <argument><expr><name>action</name></expr></argument>,
                                             <argument><expr>1</expr></argument>,
                                             <argument><expr>&amp;<name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>context</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name>PRBool</name></type> <name>needsFallbackIcon</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>nsIntRect</name></type> <name>dragRect</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>nsPresContext</name>*</type> <name>pc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>gfxASurface</name></expr></argument>&gt;</argument_list></name></type> <name>surface</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>mHasImage</name> || <name>mSelection</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>DrawDrag</name><argument_list>(<argument><expr><name>aDOMNode</name></expr></argument>, <argument><expr><name>aRegion</name></expr></argument>, <argument><expr><name>mScreenX</name></expr></argument>, <argument><expr><name>mScreenY</name></expr></argument>,
                   <argument><expr>&amp;<name>dragRect</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>surface</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>PRInt32</name></type> <name>sx</name> <init>= <expr><name>mScreenX</name></expr></init>, <name>sy</name> <init>= <expr><name>mScreenY</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>ConvertToUnscaledDevPixels</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr>&amp;<name>sx</name></expr></argument>, <argument><expr>&amp;<name>sy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <decl_stmt><decl><type><name>PRInt32</name></type> <name>offsetX</name> <init>= <expr><name>sx</name> - <name><name>dragRect</name>.<name>x</name></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>PRInt32</name></type> <name>offsetY</name> <init>= <expr><name>sy</name> - <name><name>dragRect</name>.<name>y</name></name></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr>!<call><name>SetAlphaPixmap</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>offsetX</name></expr></argument>, <argument><expr><name>offsetY</name></expr></argument>, <argument><expr><name>dragRect</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>GdkPixbuf</name>*</type> <name>dragPixbuf</name> <init>=
              <expr><call><name><name>nsImageToPixbuf</name>::<name>SurfaceToPixbuf</name></name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name><name>dragRect</name>.<name>width</name></name></expr></argument>, <argument><expr><name><name>dragRect</name>.<name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>dragPixbuf</name></expr>)</condition><then>
              <expr_stmt><expr><call><name>gtk_drag_set_icon_pixbuf</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>dragPixbuf</name></expr></argument>, <argument><expr><name>offsetX</name></expr></argument>, <argument><expr><name>offsetY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else
              <expr_stmt><expr><name>needsFallbackIcon</name> = <name>PR_TRUE</name></expr>;</expr_stmt></else></if>
          }</block></then></if>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name>needsFallbackIcon</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><name>needsFallbackIcon</name></expr>)</condition><then>
          <expr_stmt><expr><call><name>gtk_drag_set_icon_default</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></else></if>

    <expr_stmt><expr><call><name>gtk_target_list_unref</name><argument_list>(<argument><expr><name>sourceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>StartDragSession</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsDragService</name>::<name>SetAlphaPixmap</name></name><parameter_list>(<param><decl><type><name>gfxASurface</name> *</type><name>aSurface</name></decl></param>,
                                 <param><decl><type><name>GdkDragContext</name> *</type><name>aContext</name></decl></param>,
                                 <param><decl><type><name>PRInt32</name></type> <name>aXOffset</name></decl></param>,
                                 <param><decl><type><name>PRInt32</name></type> <name>aYOffset</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>nsIntRect</name>&amp;</type> <name>dragRect</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>GdkScreen</name>*</type> <name>screen</name> <init>= <expr><call><name>gtk_widget_get_screen</name><argument_list>(<argument><expr><name>mHiddenWidget</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Transparent drag icons need, like a lot of transparency-related things,</comment>
    <comment type="line">// a compositing X window manager</comment>
    <if>if <condition>(<expr>!<call><name>gdk_screen_is_composited</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>GdkColormap</name>*</type> <name>alphaColormap</name> <init>= <expr><call><name>gdk_screen_get_rgba_colormap</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>alphaColormap</name></expr>)</condition><then>
      <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>GdkPixmap</name>*</type> <name>pixmap</name> <init>= <expr><call><name>gdk_pixmap_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>dragRect</name>.<name>width</name></name></expr></argument>, <argument><expr><name><name>dragRect</name>.<name>height</name></name></expr></argument>,
                                       <argument><expr><call><name>gdk_colormap_get_visual</name><argument_list>(<argument><expr><name>alphaColormap</name></expr></argument>)</argument_list></call>-&gt;<name>depth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>pixmap</name></expr>)</condition><then>
      <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>gdk_drawable_set_colormap</name><argument_list>(<argument><expr><call><name>GDK_DRAWABLE</name><argument_list>(<argument><expr><name>pixmap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>alphaColormap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make a gfxXlibSurface wrapped around the pixmap to render on</comment>
    <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>gfxASurface</name></expr></argument>&gt;</argument_list></name></type> <name>xPixmapSurface</name> <init>=
         <expr><call><name><name>nsWindow</name>::<name>GetSurfaceForGdkDrawable</name></name><argument_list>(<argument><expr><call><name>GDK_DRAWABLE</name><argument_list>(<argument><expr><name>pixmap</name></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>dragRect</name>.<name>Size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>xPixmapSurface</name></expr>)</condition><then>
      <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>gfxContext</name></expr></argument>&gt;</argument_list></name></type> <name>xPixmapCtx</name> <init>= <expr>new <call><name>gfxContext</name><argument_list>(<argument><expr><name>xPixmapSurface</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Clear it...</comment>
    <expr_stmt><expr><call><name><name>xPixmapCtx</name>-&gt;<name>SetOperator</name></name><argument_list>(<argument><expr><name><name>gfxContext</name>::<name>OPERATOR_CLEAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>xPixmapCtx</name>-&gt;<name>Paint</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// ...and paint the drag image with translucency</comment>
    <expr_stmt><expr><call><name><name>xPixmapCtx</name>-&gt;<name>SetOperator</name></name><argument_list>(<argument><expr><name><name>gfxContext</name>::<name>OPERATOR_SOURCE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>xPixmapCtx</name>-&gt;<name>SetSource</name></name><argument_list>(<argument><expr><name>aSurface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>xPixmapCtx</name>-&gt;<name>Paint</name></name><argument_list>(<argument><expr><name>DRAG_IMAGE_ALPHA_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// The drag transaction addrefs the pixmap, so we can just unref it from us here</comment>
    <expr_stmt><expr><call><name>gtk_drag_set_icon_pixmap</name><argument_list>(<argument><expr><name>aContext</name></expr></argument>, <argument><expr><name>alphaColormap</name></expr></argument>, <argument><expr><name>pixmap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><name>aXOffset</name></expr></argument>, <argument><expr><name>aYOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>pixmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDragService</name>::<name>StartDragSession</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("nsDragService::StartDragSession")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>nsBaseDragService</name>::<name>StartDragSession</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>
 
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDragService</name>::<name>EndDragSession</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aDoneDrag</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("nsDragService::EndDragSession %d",
                                   <name>aDoneDrag</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// unset our drag action</comment>
    <expr_stmt><expr><call><name>SetDragAction</name><argument_list>(<argument><expr><name>DRAGDROP_ACTION_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>nsBaseDragService</name>::<name>EndDragSession</name></name><argument_list>(<argument><expr><name>aDoneDrag</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">// nsIDragSession</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDragService</name>::<name>SetCanDrop</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aCanDrop</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("nsDragService::SetCanDrop %d",
                                   <name>aCanDrop</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mCanDrop</name> = <name>aCanDrop</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDragService</name>::<name>GetCanDrop</name></name><parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>aCanDrop</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("nsDragService::GetCanDrop")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>aCanDrop</name> = <name>mCanDrop</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// count the number of URIs in some text/uri-list format data.</comment>
<function><type><specifier>static</specifier> <name>PRUint32</name></type>
<name>CountTextUriListItems</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
                      <param><decl><type><name>PRUint32</name></type> <name>datalen</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endPtr</name> <init>= <expr><name>p</name> + <name>datalen</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>p</name> &lt; <name>endPtr</name></expr>)</condition> <block>{
        <comment type="line">// skip whitespace (if any)</comment>
        <while>while <condition>(<expr><name>p</name> &lt; <name>endPtr</name> &amp;&amp; *<name>p</name> != '\0' &amp;&amp; <call><name>isspace</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
            <expr_stmt><expr><name>p</name>++</expr>;</expr_stmt></while>
        <comment type="line">// if we aren't at the end of the line ...</comment>
        <if>if <condition>(<expr><name>p</name> != <name>endPtr</name> &amp;&amp; *<name>p</name> != '\0' &amp;&amp; *<name>p</name> != '\n' &amp;&amp; *<name>p</name> != '\r'</expr>)</condition><then>
            <expr_stmt><expr><name>count</name>++</expr>;</expr_stmt></then></if>
        <comment type="line">// skip to the end of the line</comment>
        <while>while <condition>(<expr><name>p</name> &lt; <name>endPtr</name> &amp;&amp; *<name>p</name> != '\0' &amp;&amp; *<name>p</name> != '\n'</expr>)</condition>
            <expr_stmt><expr><name>p</name>++</expr>;</expr_stmt></while>
        <expr_stmt><expr><name>p</name>++</expr>;</expr_stmt> <comment type="line">// skip the actual newline as well.</comment>
    }</block></while>
    <return>return <expr><name>count</name></expr>;</return>
}</block></function>

<comment type="line">// extract an item from text/uri-list formatted data and convert it to</comment>
<comment type="line">// unicode.</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>GetTextUriListItem</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
                   <param><decl><type><name>PRUint32</name></type> <name>datalen</name></decl></param>,
                   <param><decl><type><name>PRUint32</name></type> <name>aItemIndex</name></decl></param>,
                   <param><decl><type><name>PRUnichar</name> **</type><name>convertedText</name></decl></param>,
                   <param><decl><type><name>PRInt32</name> *</type><name>convertedTextLen</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endPtr</name> <init>= <expr><name>p</name> + <name>datalen</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr>*<name>convertedText</name> = <name>nsnull</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>p</name> &lt; <name>endPtr</name></expr>)</condition> <block>{
        <comment type="line">// skip whitespace (if any)</comment>
        <while>while <condition>(<expr><name>p</name> &lt; <name>endPtr</name> &amp;&amp; *<name>p</name> != '\0' &amp;&amp; <call><name>isspace</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
            <expr_stmt><expr><name>p</name>++</expr>;</expr_stmt></while>
        <comment type="line">// if we aren't at the end of the line, we have a url</comment>
        <if>if <condition>(<expr><name>p</name> != <name>endPtr</name> &amp;&amp; *<name>p</name> != '\0' &amp;&amp; *<name>p</name> != '\n' &amp;&amp; *<name>p</name> != '\r'</expr>)</condition><then>
            <expr_stmt><expr><name>count</name>++</expr>;</expr_stmt></then></if>
        <comment type="line">// this is the item we are after ...</comment>
        <if>if <condition>(<expr><name>aItemIndex</name> + 1 == <name>count</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>q</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>q</name> &lt; <name>endPtr</name> &amp;&amp; *<name>q</name> != '\0' &amp;&amp; *<name>q</name> != '\n' &amp;&amp; *<name>q</name> != '\r'</expr>)</condition>
              <expr_stmt><expr><name>q</name>++</expr>;</expr_stmt></while>
            <expr_stmt><expr><call><name><name>nsPrimitiveHelpers</name>::<name>ConvertPlatformPlainTextToUnicode</name></name><argument_list>(
                                <argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name> - <name>p</name></expr></argument>, <argument><expr><name>convertedText</name></expr></argument>, <argument><expr><name>convertedTextLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
        <comment type="line">// skip to the end of the line</comment>
        <while>while <condition>(<expr><name>p</name> &lt; <name>endPtr</name> &amp;&amp; *<name>p</name> != '\0' &amp;&amp; *<name>p</name> != '\n'</expr>)</condition>
            <expr_stmt><expr><name>p</name>++</expr>;</expr_stmt></while>
        <expr_stmt><expr><name>p</name>++</expr>;</expr_stmt> <comment type="line">// skip the actual newline as well.</comment>
    }</block></while>

    <comment type="line">// didn't find the desired item, so just pass the whole lot</comment>
    <if>if <condition>(<expr>!*<name>convertedText</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>nsPrimitiveHelpers</name>::<name>ConvertPlatformPlainTextToUnicode</name></name><argument_list>(
                            <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>, <argument><expr><name>convertedText</name></expr></argument>, <argument><expr><name>convertedTextLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDragService</name>::<name>GetNumDropItems</name></name><parameter_list>(<param><decl><type><name>PRUint32</name> *</type> <name>aNumItems</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("nsDragService::GetNumDropItems")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>isList</name> <init>= <expr><call><name>IsTargetContextList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>isList</name></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>mSourceDataItems</name>-&gt;<name>Count</name></name><argument_list>(<argument><expr><name>aNumItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <block>{
        <decl_stmt><decl><type><name>GdkAtom</name></type> <name>gdkFlavor</name> <init>= <expr><call><name>gdk_atom_intern</name><argument_list>(<argument><expr><name>gTextUriListType</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GetTargetDragData</name><argument_list>(<argument><expr><name>gdkFlavor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mTargetDragData</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>char</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mTargetDragData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr>*<name>aNumItems</name> = <call><name>CountTextUriListItems</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>mTargetDragDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else
            <expr_stmt><expr>*<name>aNumItems</name> = 1</expr>;</expr_stmt></else></if>
    }</block></else></if>
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("%d items", *<name>aNumItems</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDragService</name>::<name>GetData</name></name><parameter_list>(<param><decl><type><name>nsITransferable</name> *</type> <name>aTransferable</name></decl></param>,
                       <param><decl><type><name>PRUint32</name></type> <name>aItemIndex</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("nsDragService::GetData %d", <name>aItemIndex</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// make sure that we have a transferable</comment>
    <if>if <condition>(<expr>!<name>aTransferable</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return></then></if>

    <comment type="line">// get flavor list that includes all acceptable flavors (including</comment>
    <comment type="line">// ones obtained through conversion). Flavors are nsISupportsStrings</comment>
    <comment type="line">// so that they can be seen from JS.</comment>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_ERROR_FAILURE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupportsArray</name></expr></argument>&gt;</argument_list></name></type> <name>flavorList</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>aTransferable</name>-&gt;<name>FlavorsTransferableCanImport</name></name><argument_list>(
                        <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>flavorList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>

    <comment type="line">// count the number of flavors</comment>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>cnt</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>flavorList</name>-&gt;<name>Count</name></name><argument_list>(<argument><expr>&amp;<name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="line">// check to see if this is an internal list</comment>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>isList</name> <init>= <expr><call><name>IsTargetContextList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>isList</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("it's a list...")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// find a matching flavor</comment>
        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>cnt</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>genericWrapper</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>flavorList</name>-&gt;<name>GetElementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>genericWrapper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupportsCString</name></expr></argument>&gt;</argument_list></name></type> <name>currentFlavor</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>currentFlavor</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>genericWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>currentFlavor</name></expr>)</condition><then>
                <continue>continue;</continue></then></if>

            <decl_stmt><decl><type><name>nsXPIDLCString</name></type> <name>flavorStr</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>currentFlavor</name>-&gt;<name>ToString</name></name><argument_list>(<argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>,
                   <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                   <argument><expr>("flavor is %s\n", (const <name>char</name> *)<name>flavorStr</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// get the item with the right index</comment>
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>genericItem</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mSourceDataItems</name>-&gt;<name>GetElementAt</name></name><argument_list>(<argument><expr><name>aItemIndex</name></expr></argument>,
                                           <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>genericItem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITransferable</name></expr></argument>&gt;</argument_list></name></type> <name>item</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>genericItem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name>item</name></expr>)</condition><then>
                <continue>continue;</continue></then></if>

            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>data</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PRUint32</name></type> <name>tmpDataLen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                   <argument><expr>("trying to get transfer data for %s\n",
                   (const <name>char</name> *)<name>flavorStr</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rv</name> = <call><name><name>item</name>-&gt;<name>GetTransferData</name></name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>,
                                       <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr>&amp;<name>tmpDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("failed.\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("succeeded.\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rv</name> = <call><name><name>aTransferable</name>-&gt;<name>SetTransferData</name></name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>,<argument><expr><name>data</name></expr></argument>,<argument><expr><name>tmpDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>,
                       <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                       <argument><expr>("fail to set transfer data into transferable!\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <comment type="line">// ok, we got the data</comment>
            <return>return <expr><name>NS_OK</name></expr>;</return>
        }</block></for>
        <comment type="line">// if we got this far, we failed</comment>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// Now walk down the list of flavors. When we find one that is</comment>
    <comment type="line">// actually present, copy out the data into the transferable in that</comment>
    <comment type="line">// format. SetTransferData() implicitly handles conversions.</comment>
    <for>for ( <init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>cnt</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr> ) <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>genericWrapper</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>flavorList</name>-&gt;<name>GetElementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>genericWrapper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupportsCString</name></expr></argument>&gt;</argument_list></name></type> <name>currentFlavor</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>currentFlavor</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>genericWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>currentFlavor</name></expr>)</condition><then> <block>{
            <comment type="line">// find our gtk flavor</comment>
            <decl_stmt><decl><type><name>nsXPIDLCString</name></type> <name>flavorStr</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>currentFlavor</name>-&gt;<name>ToString</name></name><argument_list>(<argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>GdkAtom</name></type> <name>gdkFlavor</name> <init>= <expr><call><name>gdk_atom_intern</name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                   <argument><expr>("looking for data in type %s, gdk flavor %ld\n",
                   <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><specifier>const</specifier> <name>char</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>)</argument_list></call>, <name>gdkFlavor</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>PRBool</name></type> <name>dataFound</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>gdkFlavor</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>GetTargetDragData</name><argument_list>(<argument><expr><name>gdkFlavor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>mTargetDragData</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("dataFound = PR_TRUE\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>dataFound</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("dataFound = PR_FALSE\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Dragging and dropping from the file manager would cause us </comment>
                <comment type="line">// to parse the source text as a nsILocalFile URL.</comment>
                <if>if <condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>, <argument><expr><name>kFileMime</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
                    <expr_stmt><expr><name>gdkFlavor</name> = <call><name>gdk_atom_intern</name><argument_list>(<argument><expr><name>kTextMime</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>GetTargetDragData</name><argument_list>(<argument><expr><name>gdkFlavor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>mTargetDragData</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>text</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>char</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mTargetDragData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>PRUnichar</name>*</type> <name>convertedText</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>PRInt32</name></type> <name>convertedTextLen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><call><name>GetTextUriListItem</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>mTargetDragDataLen</name></expr></argument>, <argument><expr><name>aItemIndex</name></expr></argument>,
                                           <argument><expr>&amp;<name>convertedText</name></expr></argument>, <argument><expr>&amp;<name>convertedTextLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if>if <condition>(<expr><name>convertedText</name></expr>)</condition><then> <block>{
                            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIIOService</name></expr></argument>&gt;</argument_list></name></type> <name>ioService</name> <init>= <expr><call><name>do_GetIOService</name><argument_list>(<argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>fileURI</name></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>ioService</name>-&gt;<name>NewURI</name></name><argument_list>(<argument><expr><call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><name>convertedText</name></expr></argument>)</argument_list></call></expr></argument>,
                                                            <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>fileURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFileURL</name></expr></argument>&gt;</argument_list></name></type> <name>fileURL</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>fileURI</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name></type> <name>file</name></decl>;</decl_stmt>
                                    <expr_stmt><expr><name>rv</name> = <call><name><name>fileURL</name>-&gt;<name>GetFile</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                        <comment type="line">// The common wrapping code at the end of </comment>
                                        <comment type="line">// this function assumes the data is text</comment>
                                        <comment type="line">// and calls text-specific operations.</comment>
                                        <comment type="line">// Make a secret hideout here for nsILocalFile</comment>
                                        <comment type="line">// objects and return early.</comment>
                                        <expr_stmt><expr><call><name><name>aTransferable</name>-&gt;<name>SetTransferData</name></name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>, <argument><expr><name>file</name></expr></argument>,
                                                                       <argument><expr><name>convertedTextLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>convertedText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <return>return <expr><name>NS_OK</name></expr>;</return>
                                    }</block></then></if>
                                }</block></then></if>
                            }</block></then></if>
                            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>convertedText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <continue>continue;</continue>
                    }</block></then></if>
                }</block></then></if>

                <comment type="line">// if we are looking for text/unicode and we fail to find it</comment>
                <comment type="line">// on the clipboard first, try again with text/plain. If that</comment>
                <comment type="line">// is present, convert it to unicode.</comment>
                <if>if <condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>, <argument><expr><name>kUnicodeMime</name></expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
                    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                           <argument><expr>("we were looking for text/unicode... \
                           trying again with text/plain\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>gdkFlavor</name> = <call><name>gdk_atom_intern</name><argument_list>(<argument><expr><name>kTextMime</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>GetTargetDragData</name><argument_list>(<argument><expr><name>gdkFlavor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>mTargetDragData</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("Got textplain data\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>castedText</name> <init>=
                                    <expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>char</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mTargetDragData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>PRUnichar</name>*</type> <name>convertedText</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>PRInt32</name></type> <name>convertedTextLen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>nsPrimitiveHelpers</name>::<name>ConvertPlatformPlainTextToUnicode</name></name><argument_list>(
                                            <argument><expr><name>castedText</name></expr></argument>, <argument><expr><name>mTargetDragDataLen</name></expr></argument>,
                                            <argument><expr>&amp;<name>convertedText</name></expr></argument>, <argument><expr>&amp;<name>convertedTextLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>( <expr><name>convertedText</name></expr> )</condition><then> <block>{
                            <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                                   <argument><expr>("successfully converted plain text \
                                   to unicode.\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="line">// out with the old, in with the new</comment>
                            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>mTargetDragData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>mTargetDragData</name> = <name>convertedText</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>mTargetDragDataLen</name> = <name>convertedTextLen</name> * 2</expr>;</expr_stmt>
                            <expr_stmt><expr><name>dataFound</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
                        }</block></then></if> <comment type="line">// if plain text data on clipboard</comment>
                    }</block></then></if> <comment type="line">// if plain text flavor present</comment>
                }</block></then></if> <comment type="line">// if looking for text/unicode</comment>

                <comment type="line">// if we are looking for text/x-moz-url and we failed to find</comment>
                <comment type="line">// it on the clipboard, try again with text/uri-list, and then</comment>
                <comment type="line">// _NETSCAPE_URL</comment>
                <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>, <argument><expr><name>kURLMime</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                           <argument><expr>("we were looking for text/x-moz-url...\
                           trying again with text/uri-list\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>gdkFlavor</name> = <call><name>gdk_atom_intern</name><argument_list>(<argument><expr><name>gTextUriListType</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>GetTargetDragData</name><argument_list>(<argument><expr><name>gdkFlavor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>mTargetDragData</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                               <argument><expr>("Got text/uri-list data\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name> <init>=
                                   <expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>char</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mTargetDragData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>PRUnichar</name>*</type> <name>convertedText</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>PRInt32</name></type> <name>convertedTextLen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><call><name>GetTextUriListItem</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>mTargetDragDataLen</name></expr></argument>, <argument><expr><name>aItemIndex</name></expr></argument>,
                                           <argument><expr>&amp;<name>convertedText</name></expr></argument>, <argument><expr>&amp;<name>convertedTextLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if>if <condition>( <expr><name>convertedText</name></expr> )</condition><then> <block>{
                            <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                                   <argument><expr>("successfully converted \
                                   _NETSCAPE_URL to unicode.\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="line">// out with the old, in with the new</comment>
                            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>mTargetDragData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>mTargetDragData</name> = <name>convertedText</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>mTargetDragDataLen</name> = <name>convertedTextLen</name> * 2</expr>;</expr_stmt>
                            <expr_stmt><expr><name>dataFound</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                               <argument><expr>("failed to get text/uri-list data\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <if>if <condition>(<expr>!<name>dataFound</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                               <argument><expr>("we were looking for text/x-moz-url...\
                               trying again with _NETSCAP_URL\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>gdkFlavor</name> = <call><name>gdk_atom_intern</name><argument_list>(<argument><expr><name>gMozUrlType</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>GetTargetDragData</name><argument_list>(<argument><expr><name>gdkFlavor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>mTargetDragData</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                                   <argument><expr>("Got _NETSCAPE_URL data\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>castedText</name> <init>=
                                  <expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>char</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>mTargetDragData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>PRUnichar</name>*</type> <name>convertedText</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>PRInt32</name></type> <name>convertedTextLen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>nsPrimitiveHelpers</name>::<name>ConvertPlatformPlainTextToUnicode</name></name><argument_list>(<argument><expr><name>castedText</name></expr></argument>, <argument><expr><name>mTargetDragDataLen</name></expr></argument>, <argument><expr>&amp;<name>convertedText</name></expr></argument>, <argument><expr>&amp;<name>convertedTextLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if>if <condition>( <expr><name>convertedText</name></expr> )</condition><then> <block>{
                                <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>,
                                       <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                                       <argument><expr>("successfully converted _NETSCAPE_URL \
                                       to unicode.\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <comment type="line">// out with the old, in with the new</comment>
                                <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>mTargetDragData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>mTargetDragData</name> = <name>convertedText</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name>mTargetDragDataLen</name> = <name>convertedTextLen</name> * 2</expr>;</expr_stmt>
                                <expr_stmt><expr><name>dataFound</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></then>
                        <else>else <block>{
                            <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                                   <argument><expr>("failed to get _NETSCAPE_URL data\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></then></if>
                }</block></then></if>

            }</block></else></if> <comment type="line">// else we try one last ditch effort to find our data</comment>

            <if>if <condition>(<expr><name>dataFound</name></expr>)</condition><then> <block>{
                <comment type="line">// the DOM only wants LF, so convert from MacOS line endings</comment>
                <comment type="line">// to DOM line endings.</comment>
                <expr_stmt><expr><call><name><name>nsLinebreakHelpers</name>::<name>ConvertPlatformToDOMLinebreaks</name></name><argument_list>(
                             <argument><expr><name>flavorStr</name></expr></argument>,
                             <argument><expr>&amp;<name>mTargetDragData</name></expr></argument>,
                             <argument><expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>int</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr>&amp;<name>mTargetDragDataLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
                <comment type="line">// put it into the transferable.</comment>
                <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>genericDataWrapper</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>nsPrimitiveHelpers</name>::<name>CreatePrimitiveForData</name></name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>,
                                    <argument><expr><name>mTargetDragData</name></expr></argument>, <argument><expr><name>mTargetDragDataLen</name></expr></argument>,
                                    <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>genericDataWrapper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>aTransferable</name>-&gt;<name>SetTransferData</name></name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>,
                                               <argument><expr><name>genericDataWrapper</name></expr></argument>,
                                               <argument><expr><name>mTargetDragDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// we found one, get out of this loop!</comment>
                <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("dataFound and converted!\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></then></if> <comment type="line">// if (currentFlavor)</comment>
    }</block></for> <comment type="line">// foreach flavor</comment>

    <return>return <expr><name>NS_OK</name></expr>;</return>
  
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDragService</name>::<name>IsDataFlavorSupported</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aDataFlavor</name></decl></param>,
                                     <param><decl><type><name>PRBool</name> *</type><name>_retval</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("nsDragService::IsDataFlavorSupported %s",
                                   <name>aDataFlavor</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>_retval</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return></then></if>

    <comment type="line">// set this to no by default</comment>
    <expr_stmt><expr>*<name>_retval</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

    <comment type="line">// check to make sure that we have a drag object set, here</comment>
    <if>if <condition>(<expr>!<name>mTargetDragContext</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
               <argument><expr>("*** warning: IsDataFlavorSupported \
               called without a valid drag context!\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// check to see if the target context is a list.</comment>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>isList</name> <init>= <expr><call><name>IsTargetContextList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// if it is, just look in the internal data since we are the source</comment>
    <comment type="line">// for it.</comment>
    <if>if <condition>(<expr><name>isList</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("It's a list..")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PRUint32</name></type> <name>numDragItems</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <comment type="line">// if we don't have mDataItems we didn't start this drag so it's</comment>
        <comment type="line">// an external client trying to fool us.</comment>
        <if>if <condition>(<expr>!<name>mSourceDataItems</name></expr>)</condition><then>
            <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
        <expr_stmt><expr><call><name><name>mSourceDataItems</name>-&gt;<name>Count</name></name><argument_list>(<argument><expr>&amp;<name>numDragItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>PRUint32</name></type> <name>itemIndex</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>itemIndex</name> &lt; <name>numDragItems</name></expr>;</condition> <incr><expr>++<name>itemIndex</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>genericItem</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mSourceDataItems</name>-&gt;<name>GetElementAt</name></name><argument_list>(<argument><expr><name>itemIndex</name></expr></argument>,
                                           <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>genericItem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITransferable</name></expr></argument>&gt;</argument_list></name></type> <name>currItem</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>genericItem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>currItem</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>nsCOMPtr</name> <argument_list>&lt;<argument><expr><name>nsISupportsArray</name></expr></argument>&gt;</argument_list></name></type> <name>flavorList</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>currItem</name>-&gt;<name>FlavorsTransferableCanExport</name></name><argument_list>(
                          <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>flavorList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>flavorList</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>PRUint32</name></type> <name>numFlavors</name></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>flavorList</name>-&gt;<name>Count</name></name><argument_list>( <argument><expr>&amp;<name>numFlavors</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <for>for ( <init><decl><type><name>PRUint32</name></type> <name>flavorIndex</name> <init>= <expr>0</expr></init></decl>;</init>
                          <condition><expr><name>flavorIndex</name> &lt; <name>numFlavors</name></expr> ;</condition>
                          <incr><expr>++<name>flavorIndex</name></expr></incr> ) <block>{
                        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>genericWrapper</name></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>flavorList</name>-&gt;<name>GetElementAt</name></name><argument_list>(<argument><expr><name>flavorIndex</name></expr></argument>,
                                                <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>genericWrapper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupportsCString</name></expr></argument>&gt;</argument_list></name></type> <name>currentFlavor</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>currentFlavor</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>genericWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>currentFlavor</name></expr>)</condition><then> <block>{
                            <decl_stmt><decl><type><name>nsXPIDLCString</name></type> <name>flavorStr</name></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>currentFlavor</name>-&gt;<name>ToString</name></name><argument_list>(<argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                                   <argument><expr>("checking %s against %s\n",
                                   (const <name>char</name> *)<name>flavorStr</name>, <name>aDataFlavor</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>, <argument><expr><name>aDataFlavor</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                                       <argument><expr>("boioioioiooioioioing!\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr>*<name>_retval</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></then></if>
                    }</block></for>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// check the target context vs. this flavor, one at a time</comment>
    <decl_stmt><decl><type><name>GList</name> *</type><name>tmp</name></decl>;</decl_stmt>
    <for>for (<init><expr><name>tmp</name> = <name><name>mTargetDragContext</name>-&gt;<name>targets</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> = <name><name>tmp</name>-&gt;<name>next</name></name></expr></incr>) <block>{
        <comment type="block">/* Bug 331198 */</comment>
        <decl_stmt><decl><type><name>GdkAtom</name></type> <name>atom</name> <init>= <expr><call><name>GDK_POINTER_TO_ATOM</name><argument_list>(<argument><expr><name><name>tmp</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gchar</name> *</type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>name</name> = <call><name>gdk_atom_name</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
               <argument><expr>("checking %s against %s\n", <name>name</name>, <name>aDataFlavor</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>name</name> &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>aDataFlavor</name></expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("good!\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>_retval</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line">// check for automatic text/uri-list -&gt; text/x-moz-url mapping</comment>
        <if>if <condition>(<expr>*<name>_retval</name> == <name>PR_FALSE</name> &amp;&amp; 
            <name>name</name> &amp;&amp;
            (<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>gTextUriListType</name></expr></argument>)</argument_list></call> == 0) &amp;&amp;
            (<call><name>strcmp</name><argument_list>(<argument><expr><name>aDataFlavor</name></expr></argument>, <argument><expr><name>kURLMime</name></expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                   <argument><expr>("good! ( it's text/uri-list and \
                   we're checking against text/x-moz-url )\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>_retval</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line">// check for automatic _NETSCAPE_URL -&gt; text/x-moz-url mapping</comment>
        <if>if <condition>(<expr>*<name>_retval</name> == <name>PR_FALSE</name> &amp;&amp; 
            <name>name</name> &amp;&amp;
            (<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>gMozUrlType</name></expr></argument>)</argument_list></call> == 0) &amp;&amp;
            (<call><name>strcmp</name><argument_list>(<argument><expr><name>aDataFlavor</name></expr></argument>, <argument><expr><name>kURLMime</name></expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                   <argument><expr>("good! ( it's _NETSCAPE_URL and \
                   we're checking against text/x-moz-url )\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>_retval</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line">// check for auto text/plain -&gt; text/unicode mapping</comment>
        <if>if <condition>(<expr>*<name>_retval</name> == <name>PR_FALSE</name> &amp;&amp; 
            <name>name</name> &amp;&amp;
            (<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>kTextMime</name></expr></argument>)</argument_list></call> == 0) &amp;&amp;
            ((<call><name>strcmp</name><argument_list>(<argument><expr><name>aDataFlavor</name></expr></argument>, <argument><expr><name>kUnicodeMime</name></expr></argument>)</argument_list></call> == 0) ||
             (<call><name>strcmp</name><argument_list>(<argument><expr><name>aDataFlavor</name></expr></argument>, <argument><expr><name>kFileMime</name></expr></argument>)</argument_list></call> == 0))</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                   <argument><expr>("good! ( it's text plain and we're checking \
                   against text/unicode or application/x-moz-file)\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>_retval</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// nsIDragSessionGTK</comment>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDragService</name>::<name>TargetSetLastContext</name></name><parameter_list>(<param><decl><type><name>GtkWidget</name>      *</type><name>aWidget</name></decl></param>,
                                    <param><decl><type><name>GdkDragContext</name> *</type><name>aContext</name></decl></param>,
                                    <param><decl><type><name>guint</name></type>           <name>aTime</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("nsDragService::TargetSetLastContext")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mTargetWidget</name> = <name>aWidget</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mTargetDragContext</name> = <name>aContext</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mTargetTime</name> = <name>aTime</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDragService</name>::<name>TargetStartDragMotion</name></name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("nsDragService::TargetStartDragMotion")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mCanDrop</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDragService</name>::<name>TargetEndDragMotion</name></name><parameter_list>(<param><decl><type><name>GtkWidget</name>      *</type><name>aWidget</name></decl></param>,
                                   <param><decl><type><name>GdkDragContext</name> *</type><name>aContext</name></decl></param>,
                                   <param><decl><type><name>guint</name></type>           <name>aTime</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
           <argument><expr>("nsDragService::TargetEndDragMotion %d", <name>mCanDrop</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>mCanDrop</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>GdkDragAction</name></type> <name>action</name></decl>;</decl_stmt>
        <comment type="line">// notify the dragger if we can drop</comment>
        <switch>switch <condition>(<expr><name>mDragAction</name></expr>)</condition> <block>{
        <case>case <expr><name>DRAGDROP_ACTION_COPY</name></expr>:
          <expr_stmt><expr><name>action</name> = <name>GDK_ACTION_COPY</name></expr>;</expr_stmt>
          <break>break;</break>
        </case><case>case <expr><name>DRAGDROP_ACTION_LINK</name></expr>:
          <expr_stmt><expr><name>action</name> = <name>GDK_ACTION_LINK</name></expr>;</expr_stmt>
          <break>break;</break>
        </case><default>default:
          <expr_stmt><expr><name>action</name> = <name>GDK_ACTION_MOVE</name></expr>;</expr_stmt>
          <break>break;</break>
        </default>}</block></switch>
        <expr_stmt><expr><call><name>gdk_drag_status</name><argument_list>(<argument><expr><name>aContext</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>aTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>gdk_drag_status</name><argument_list>(<argument><expr><name>aContext</name></expr></argument>, <argument><expr>(<name>GdkDragAction</name>)0</expr></argument>, <argument><expr><name>aTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDragService</name>::<name>TargetDataReceived</name></name><parameter_list>(<param><decl><type><name>GtkWidget</name>         *</type><name>aWidget</name></decl></param>,
                                  <param><decl><type><name>GdkDragContext</name>    *</type><name>aContext</name></decl></param>,
                                  <param><decl><type><name>gint</name></type>               <name>aX</name></decl></param>,
                                  <param><decl><type><name>gint</name></type>               <name>aY</name></decl></param>,
                                  <param><decl><type><name>GtkSelectionData</name>  *</type><name>aSelectionData</name></decl></param>,
                                  <param><decl><type><name>guint</name></type>              <name>aInfo</name></decl></param>,
                                  <param><decl><type><name>guint32</name></type>            <name>aTime</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("nsDragService::TargetDataReceived")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TargetResetData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mTargetDragDataReceived</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>aSelectionData</name>-&gt;<name>length</name></name> &gt; 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>mTargetDragDataLen</name> = <name><name>aSelectionData</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mTargetDragData</name> = <call><name>g_malloc</name><argument_list>(<argument><expr><name>mTargetDragDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mTargetDragData</name></expr></argument>, <argument><expr><name><name>aSelectionData</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>mTargetDragDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
               <argument><expr>("Failed to get data.  selection data len was %d\n",
                <name><name>aSelectionData</name>-&gt;<name>length</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsDragService</name>::<name>TargetSetTimeCallback</name></name><parameter_list>(<param><decl><type><name>nsIDragSessionGTKTimeCB</name></type> <name>aCallback</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<function><type><name>PRBool</name></type>
<name><name>nsDragService</name>::<name>IsTargetContextList</name></name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PRBool</name></type> <name>retval</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>mTargetDragContext</name></expr>)</condition><then>
        <return>return <expr><name>retval</name></expr>;</return></then></if>

    <comment type="line">// gMimeListType drags only work for drags within a single process.</comment>
    <comment type="line">// The gtk_drag_get_source_widget() function will return NULL if the</comment>
    <comment type="line">// source of the drag is another app, so we use it to check if a</comment>
    <comment type="line">// gMimeListType drop will work or not.</comment>
    <if>if <condition>(<expr><call><name>gtk_drag_get_source_widget</name><argument_list>(<argument><expr><name>mTargetDragContext</name></expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>retval</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>GList</name> *</type><name>tmp</name></decl>;</decl_stmt>

    <comment type="line">// walk the list of context targets and see if one of them is a list</comment>
    <comment type="line">// of items.</comment>
    <for>for (<init><expr><name>tmp</name> = <name><name>mTargetDragContext</name>-&gt;<name>targets</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> = <name><name>tmp</name>-&gt;<name>next</name></name></expr></incr>) <block>{
        <comment type="block">/* Bug 331198 */</comment>
        <decl_stmt><decl><type><name>GdkAtom</name></type> <name>atom</name> <init>= <expr><call><name>GDK_POINTER_TO_ATOM</name><argument_list>(<argument><expr><name><name>tmp</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>gchar</name> *</type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>name</name> = <call><name>gdk_atom_name</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>gMimeListType</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <expr_stmt><expr><name>retval</name> = <name>PR_TRUE</name></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>retval</name></expr>)</condition><then>
            <break>break;</break></then></if>
    }</block></for>
    <return>return <expr><name>retval</name></expr>;</return>
}</block></function>

<comment type="line">// Maximum time to wait for a "drag_received" arrived, in microseconds</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_DND_TIMEOUT</name></cpp:macro> <cpp:value>500000</cpp:value></cpp:define>

<function><type><name>void</name></type>
<name><name>nsDragService</name>::<name>GetTargetDragData</name></name><parameter_list>(<param><decl><type><name>GdkAtom</name></type> <name>aFlavor</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("getting data flavor %d\n", <name>aFlavor</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("mLastWidget is %p and mLastContext is %p\n",
                                   <name>mTargetWidget</name>, <name>mTargetDragContext</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// reset our target data areas</comment>
    <expr_stmt><expr><call><name>TargetResetData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>gtk_drag_get_data</name><argument_list>(<argument><expr><name>mTargetWidget</name></expr></argument>, <argument><expr><name>mTargetDragContext</name></expr></argument>, <argument><expr><name>aFlavor</name></expr></argument>, <argument><expr><name>mTargetTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("about to start inner iteration.")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PRTime</name></type> <name>entryTime</name> <init>= <expr><call><name>PR_Now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr>!<name>mTargetDragDataReceived</name> &amp;&amp; <name>mDoingDrag</name></expr>)</condition> <block>{
        <comment type="line">// check the number of iterations</comment>
        <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("doing iteration...\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PR_Sleep</name><argument_list>(<argument><expr>20*<call><name>PR_TicksPerSecond</name><argument_list>()</argument_list></call>/1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* sleep for 20 ms/iteration */</comment>
        <if>if <condition>(<expr><call><name>PR_Now</name><argument_list>()</argument_list></call>-<name>entryTime</name> &gt; <name>NS_DND_TIMEOUT</name></expr>)</condition><then> <break>break;</break></then></if>
        <expr_stmt><expr><call><name>gtk_main_iteration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("finished inner iteration\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDragService</name>::<name>TargetResetData</name></name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>mTargetDragDataReceived</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <comment type="line">// make sure to free old data if we have to</comment>
    <if>if <condition>(<expr><name>mTargetDragData</name></expr>)</condition><then>
      <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>mTargetDragData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name>mTargetDragData</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>mTargetDragDataLen</name> = 0</expr>;</expr_stmt>
}</block></function>

<function><type><name>GtkTargetList</name> *</type>
<name><name>nsDragService</name>::<name>GetSourceList</name></name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name>mSourceDataItems</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
    <decl_stmt><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>GtkTargetEntry</name>*</expr></argument>&gt;</argument_list></name></type> <name>targetArray</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GtkTargetEntry</name> *</type><name>targets</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GtkTargetList</name>  *</type><name>targetList</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>targetCount</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>numDragItems</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>mSourceDataItems</name>-&gt;<name>Count</name></name><argument_list>(<argument><expr>&amp;<name>numDragItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check to see if we're dragging &gt; 1 item.</comment>
    <if>if <condition>(<expr><name>numDragItems</name> &gt; 1</expr>)</condition><then> <block>{
        <comment type="line">// as the Xdnd protocol only supports a single item (or is it just</comment>
        <comment type="line">// gtk's implementation?), we don't advertise all flavours listed</comment>
        <comment type="line">// in the nsITransferable.</comment>

        <comment type="line">// the application/x-moz-internal-item-list format, which preserves</comment>
        <comment type="line">// all information for drags within the same mozilla instance.</comment>
        <decl_stmt><decl><type><name>GdkAtom</name></type> <name>listAtom</name> <init>= <expr><call><name>gdk_atom_intern</name><argument_list>(<argument><expr><name>gMimeListType</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GtkTargetEntry</name> *</type><name>listTarget</name> <init>=
            <expr>(<name>GtkTargetEntry</name> *)<call><name>g_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GtkTargetEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>listTarget</name>-&gt;<name>target</name></name> = <call><name>g_strdup</name><argument_list>(<argument><expr><name>gMimeListType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>listTarget</name>-&gt;<name>flags</name></name> = 0</expr>;</expr_stmt>
        <comment type="block">/* Bug 331198 */</comment>
        <expr_stmt><expr><name><name>listTarget</name>-&gt;<name>info</name></name> = <call><name>NS_PTR_TO_UINT32</name><argument_list>(<argument><expr><name>listAtom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
               <argument><expr>("automatically adding target %s with id %ld\n",
               <name><name>listTarget</name>-&gt;<name>target</name></name>, <name>listAtom</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>targetArray</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>listTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check what flavours are supported so we can decide what other</comment>
        <comment type="line">// targets to advertise.</comment>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>genericItem</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mSourceDataItems</name>-&gt;<name>GetElementAt</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>genericItem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITransferable</name></expr></argument>&gt;</argument_list></name></type> <name>currItem</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>genericItem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>currItem</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>nsCOMPtr</name> <argument_list>&lt;<argument><expr><name>nsISupportsArray</name></expr></argument>&gt;</argument_list></name></type> <name>flavorList</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>currItem</name>-&gt;<name>FlavorsTransferableCanExport</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>flavorList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>flavorList</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>PRUint32</name></type> <name>numFlavors</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>flavorList</name>-&gt;<name>Count</name></name><argument_list>( <argument><expr>&amp;<name>numFlavors</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <for>for (<init><decl><type><name>PRUint32</name></type> <name>flavorIndex</name> <init>= <expr>0</expr></init></decl>;</init>
                     <condition><expr><name>flavorIndex</name> &lt; <name>numFlavors</name></expr> ;</condition>
                     <incr><expr>++<name>flavorIndex</name></expr></incr> ) <block>{
                    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>genericWrapper</name></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>flavorList</name>-&gt;<name>GetElementAt</name></name><argument_list>(<argument><expr><name>flavorIndex</name></expr></argument>,
                                           <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>genericWrapper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupportsCString</name></expr></argument>&gt;</argument_list></name></type> <name>currentFlavor</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>currentFlavor</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>genericWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>currentFlavor</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>nsXPIDLCString</name></type> <name>flavorStr</name></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>currentFlavor</name>-&gt;<name>ToString</name></name><argument_list>(<argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// check if text/x-moz-url is supported.</comment>
                        <comment type="line">// If so, advertise</comment>
                        <comment type="line">// text/uri-list.</comment>
                        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>, <argument><expr><name>kURLMime</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>listAtom</name> = <call><name>gdk_atom_intern</name><argument_list>(<argument><expr><name>gTextUriListType</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>listTarget</name> =
                             (<name>GtkTargetEntry</name> *)<call><name>g_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GtkTargetEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>listTarget</name>-&gt;<name>target</name></name> = <call><name>g_strdup</name><argument_list>(<argument><expr><name>gTextUriListType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>listTarget</name>-&gt;<name>flags</name></name> = 0</expr>;</expr_stmt>
                            <comment type="block">/* Bug 331198 */</comment>
                            <expr_stmt><expr><name><name>listTarget</name>-&gt;<name>info</name></name> = <call><name>NS_PTR_TO_UINT32</name><argument_list>(<argument><expr><name>listAtom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                                   <argument><expr>("automatically adding target %s with \
                                   id %ld\n", <name><name>listTarget</name>-&gt;<name>target</name></name>, <name>listAtom</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>targetArray</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>listTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if>
                }</block></for> <comment type="line">// foreach flavor in item</comment>
            }</block></then></if> <comment type="line">// if valid flavor list</comment>
        }</block></then></if> <comment type="line">// if item is a transferable</comment>
    }</block></then> <else>else <if>if <condition>(<expr><name>numDragItems</name> == 1</expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>genericItem</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mSourceDataItems</name>-&gt;<name>GetElementAt</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>genericItem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITransferable</name></expr></argument>&gt;</argument_list></name></type> <name>currItem</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>genericItem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>currItem</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>nsCOMPtr</name> <argument_list>&lt;<argument><expr><name>nsISupportsArray</name></expr></argument>&gt;</argument_list></name></type> <name>flavorList</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>currItem</name>-&gt;<name>FlavorsTransferableCanExport</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>flavorList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>flavorList</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>PRUint32</name></type> <name>numFlavors</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>flavorList</name>-&gt;<name>Count</name></name><argument_list>( <argument><expr>&amp;<name>numFlavors</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <for>for (<init><decl><type><name>PRUint32</name></type> <name>flavorIndex</name> <init>= <expr>0</expr></init></decl>;</init>
                     <condition><expr><name>flavorIndex</name> &lt; <name>numFlavors</name></expr> ;</condition>
                     <incr><expr>++<name>flavorIndex</name></expr></incr> ) <block>{
                    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>genericWrapper</name></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>flavorList</name>-&gt;<name>GetElementAt</name></name><argument_list>(<argument><expr><name>flavorIndex</name></expr></argument>,
                                             <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>genericWrapper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupportsCString</name></expr></argument>&gt;</argument_list></name></type> <name>currentFlavor</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>currentFlavor</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>genericWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>currentFlavor</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>nsXPIDLCString</name></type> <name>flavorStr</name></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>currentFlavor</name>-&gt;<name>ToString</name></name><argument_list>(<argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line">// get the atom</comment>
                        <decl_stmt><decl><type><name>GdkAtom</name></type> <name>atom</name> <init>= <expr><call><name>gdk_atom_intern</name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>GtkTargetEntry</name> *</type><name>target</name> <init>=
                          <expr>(<name>GtkTargetEntry</name> *)<call><name>g_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GtkTargetEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name>target</name>-&gt;<name>target</name></name> = <call><name>g_strdup</name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>target</name>-&gt;<name>flags</name></name> = 0</expr>;</expr_stmt>
                        <comment type="block">/* Bug 331198 */</comment>
                        <expr_stmt><expr><name><name>target</name>-&gt;<name>info</name></name> = <call><name>NS_PTR_TO_UINT32</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                               <argument><expr>("adding target %s with id %ld\n",
                               <name><name>target</name>-&gt;<name>target</name></name>, <name>atom</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>targetArray</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line">// Check to see if this is text/unicode.</comment>
                        <comment type="line">// If it is, add text/plain</comment>
                        <comment type="line">// since we automatically support text/plain</comment>
                        <comment type="line">// if we support text/unicode.</comment>
                        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>, <argument><expr><name>kUnicodeMime</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                            <comment type="line">// get the atom for the unicode string</comment>
                            <decl_stmt><decl><type><name>GdkAtom</name></type> <name>plainAtom</name> <init>=
                              <expr><call><name>gdk_atom_intern</name><argument_list>(<argument><expr><name>kTextMime</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>GtkTargetEntry</name> *</type><name>plainTarget</name> <init>=
                             <expr>(<name>GtkTargetEntry</name> *)<call><name>g_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GtkTargetEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><name><name>plainTarget</name>-&gt;<name>target</name></name> = <call><name>g_strdup</name><argument_list>(<argument><expr><name>kTextMime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>plainTarget</name>-&gt;<name>flags</name></name> = 0</expr>;</expr_stmt>
                            <comment type="block">/* Bug 331198 */</comment>
                            <expr_stmt><expr><name><name>plainTarget</name>-&gt;<name>info</name></name> = <call><name>NS_PTR_TO_UINT32</name><argument_list>(<argument><expr><name>plainAtom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                                   <argument><expr>("automatically adding target %s with \
                                   id %ld\n", <name><name>plainTarget</name>-&gt;<name>target</name></name>, <name>plainAtom</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>targetArray</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>plainTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <comment type="line">// Check to see if this is the x-moz-url type.</comment>
                        <comment type="line">// If it is, add _NETSCAPE_URL</comment>
                        <comment type="line">// this is a type used by everybody.</comment>
                        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>flavorStr</name></expr></argument>, <argument><expr><name>kURLMime</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                            <comment type="line">// get the atom name for it</comment>
                            <decl_stmt><decl><type><name>GdkAtom</name></type> <name>urlAtom</name> <init>=
                             <expr><call><name>gdk_atom_intern</name><argument_list>(<argument><expr><name>gMozUrlType</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>GtkTargetEntry</name> *</type><name>urlTarget</name> <init>=
                             <expr>(<name>GtkTargetEntry</name> *)<call><name>g_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GtkTargetEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><name><name>urlTarget</name>-&gt;<name>target</name></name> = <call><name>g_strdup</name><argument_list>(<argument><expr><name>gMozUrlType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>urlTarget</name>-&gt;<name>flags</name></name> = 0</expr>;</expr_stmt>
                            <comment type="block">/* Bug 331198 */</comment>
                            <expr_stmt><expr><name><name>urlTarget</name>-&gt;<name>info</name></name> = <call><name>NS_PTR_TO_UINT32</name><argument_list>(<argument><expr><name>urlAtom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>,
                                   <argument><expr>("automatically adding target %s with \
                                   id %ld\n", <name><name>urlTarget</name>-&gt;<name>target</name></name>, <name>urlAtom</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>targetArray</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>urlTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if>
                }</block></for> <comment type="line">// foreach flavor in item</comment>
            }</block></then></if> <comment type="line">// if valid flavor list</comment>
        }</block></then></if> <comment type="line">// if item is a transferable</comment>
    }</block></then></if></else></if> <comment type="line">// if it is a single item drag</comment>

    <comment type="line">// get all the elements that we created.</comment>
    <expr_stmt><expr><name>targetCount</name> = <call><name><name>targetArray</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>targetCount</name></expr>)</condition><then> <block>{
        <comment type="line">// allocate space to create the list of valid targets</comment>
        <expr_stmt><expr><name>targets</name> =
          (<name>GtkTargetEntry</name> *)<call><name>g_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GtkTargetEntry</name></expr></argument>)</argument_list></sizeof> * <name>targetCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PRUint32</name></type> <name>targetIndex</name></decl>;</decl_stmt>
        <for>for ( <init><expr><name>targetIndex</name> = 0</expr>;</init> <condition><expr><name>targetIndex</name> &lt; <name>targetCount</name></expr>;</condition> <incr><expr>++<name>targetIndex</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>GtkTargetEntry</name> *</type><name>disEntry</name> <init>= <expr><call><name><name>targetArray</name>.<name>ElementAt</name></name><argument_list>(<argument><expr><name>targetIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// this is a string reference but it will be freed later.</comment>
            <expr_stmt><expr><name><name>targets</name><index>[<expr><name>targetIndex</name></expr>]</index></name>.<name>target</name> = <name><name>disEntry</name>-&gt;<name>target</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>targets</name><index>[<expr><name>targetIndex</name></expr>]</index></name>.<name>flags</name> = <name><name>disEntry</name>-&gt;<name>flags</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>targets</name><index>[<expr><name>targetIndex</name></expr>]</index></name>.<name>info</name> = <name><name>disEntry</name>-&gt;<name>info</name></name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>targetList</name> = <call><name>gtk_target_list_new</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>targetCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// clean up the target list</comment>
        <for>for (<init><decl><type><name>PRUint32</name></type> <name>cleanIndex</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>cleanIndex</name> &lt; <name>targetCount</name></expr>;</condition> <incr><expr>++<name>cleanIndex</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>GtkTargetEntry</name> *</type><name>thisTarget</name> <init>= <expr><call><name><name>targetArray</name>.<name>ElementAt</name></name><argument_list>(<argument><expr><name>cleanIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name><name>thisTarget</name>-&gt;<name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>thisTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>targets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>targetList</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsDragService</name>::<name>SourceEndDrag</name></name><parameter_list>(<param><decl><type><name>GdkDragContext</name> *</type><name>aContext</name></decl></param>)</parameter_list>
<block>{
    <comment type="line">// this just releases the list of data items that we provide</comment>
    <expr_stmt><expr><name>mSourceDataItems</name> = <name>nsnull</name></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name>mDoingDrag</name></expr>)</condition><then>
        <return>return;</return></then></if> <comment type="line">// EndDragSession() was called on drop</comment>

    <comment type="line">// Either the drag was aborted or the drop occurred outside the app.</comment>
    <comment type="line">// The dropEffect of mDataTransfer is not updated for motion outside the</comment>
    <comment type="line">// app, but is needed for the dragend event, so set it now.</comment>

    <comment type="line">// aContext-&gt;dest_window will be non-NULL only if the drop succeeded .</comment>
    <decl_stmt><decl><type><name>GdkDragAction</name></type> <name>action</name> <init>=
        <expr><name><name>aContext</name>-&gt;<name>dest_window</name></name> ? <name><name>aContext</name>-&gt;<name>action</name></name> : (<name>GdkDragAction</name>)0</expr></init></decl>;</decl_stmt>

    <comment type="line">// Only one bit of action should be set, but, just in case someone does</comment>
    <comment type="line">// something funny, erring away from MOVE, and not recording unusual</comment>
    <comment type="line">// action combinations as NONE.</comment>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>dropEffect</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>action</name></expr>)</condition><then>
        <expr_stmt><expr><name>dropEffect</name> = <name>DRAGDROP_ACTION_NONE</name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name>action</name> &amp; <name>GDK_ACTION_COPY</name></expr>)</condition><then>
        <expr_stmt><expr><name>dropEffect</name> = <name>DRAGDROP_ACTION_COPY</name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name>action</name> &amp; <name>GDK_ACTION_LINK</name></expr>)</condition><then>
        <expr_stmt><expr><name>dropEffect</name> = <name>DRAGDROP_ACTION_LINK</name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name>action</name> &amp; <name>GDK_ACTION_MOVE</name></expr>)</condition><then>
        <expr_stmt><expr><name>dropEffect</name> = <name>DRAGDROP_ACTION_MOVE</name></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><name>dropEffect</name> = <name>DRAGDROP_ACTION_COPY</name></expr>;</expr_stmt></else></if></else></if></else></if></else></if>
    
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNSDataTransfer</name></expr></argument>&gt;</argument_list></name></type> <name>dataTransfer</name> <init>=
        <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mDataTransfer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>dataTransfer</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>dataTransfer</name>-&gt;<name>SetDropEffectInt</name></name><argument_list>(<argument><expr><name>dropEffect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">// Inform the drag session that we're ending the drag.</comment>
    <expr_stmt><expr><call><name>EndDragSession</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>CreateUriList</name><parameter_list>(<param><decl><type><name>nsISupportsArray</name> *</type><name>items</name></decl></param>, <param><decl><type><name>gchar</name> **</type><name>text</name></decl></param>, <param><decl><type><name>gint</name> *</type><name>length</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GString</name> *</type><name>uriList</name> <init>= <expr><call><name>g_string_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>items</name>-&gt;<name>Count</name></name><argument_list>(<argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>genericItem</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>items</name>-&gt;<name>GetElementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>genericItem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITransferable</name></expr></argument>&gt;</argument_list></name></type> <name>item</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>item</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>genericItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>item</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>PRUint32</name></type> <name>tmpDataLen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>void</name>    *</type><name>tmpData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>data</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>rv</name> = <call><name><name>item</name>-&gt;<name>GetTransferData</name></name><argument_list>(<argument><expr><name>kURLMime</name></expr></argument>,
                                       <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr>&amp;<name>tmpDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>nsPrimitiveHelpers</name>::<name>CreateDataFromPrimitive</name></name><argument_list>(<argument><expr><name>kURLMime</name></expr></argument>,
                                                            <argument><expr><name>data</name></expr></argument>,
                                                            <argument><expr>&amp;<name>tmpData</name></expr></argument>,
                                                            <argument><expr><name>tmpDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>char</name>*</type> <name>plainTextData</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PRUnichar</name>*</type> <name>castedUnicode</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>PRUnichar</name>*</expr></argument>&gt;</argument_list></name>
                                                           <argument_list>(<argument><expr><name>tmpData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PRInt32</name></type> <name>plainTextLen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>nsPrimitiveHelpers</name>::<name>ConvertUnicodeToPlatformPlainText</name></name><argument_list>(
                                    <argument><expr><name>castedUnicode</name></expr></argument>,
                                    <argument><expr><name>tmpDataLen</name> / 2</expr></argument>,
                                    <argument><expr>&amp;<name>plainTextData</name></expr></argument>,
                                    <argument><expr>&amp;<name>plainTextLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>plainTextData</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>PRInt32</name></type> <name>j</name></decl>;</decl_stmt>

                    <comment type="line">// text/x-moz-url is of form url + "\n" + title.</comment>
                    <comment type="line">// We just want the url.</comment>
                    <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>plainTextLen</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>)
                        <if>if <condition>(<expr><name><name>plainTextData</name><index>[<expr><name>j</name></expr>]</index></name> == '\n' ||
                            <name><name>plainTextData</name><index>[<expr><name>j</name></expr>]</index></name> == '\r'</expr>)</condition><then> <block>{
                            <expr_stmt><expr><name><name>plainTextData</name><index>[<expr><name>j</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
                            <break>break;</break>
                        }</block></then></if></for>
                    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>uriList</name></expr></argument>, <argument><expr><name>plainTextData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>g_string_append</name><argument_list>(<argument><expr><name>uriList</name></expr></argument>, <argument><expr>"\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// this wasn't allocated with glib</comment>
                    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>plainTextData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name>tmpData</name></expr>)</condition><then> <block>{
                    <comment type="line">// this wasn't allocated with glib</comment>
                    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmpData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr>*<name>text</name> = <name><name>uriList</name>-&gt;<name>str</name></name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>length</name> = <name><name>uriList</name>-&gt;<name>len</name></name> + 1</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_string_free</name><argument_list>(<argument><expr><name>uriList</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// don't free the data</comment>
}</block></function>


<function><type><name>void</name></type>
<name><name>nsDragService</name>::<name>SourceDataGet</name></name><parameter_list>(<param><decl><type><name>GtkWidget</name>        *</type><name>aWidget</name></decl></param>,
                             <param><decl><type><name>GdkDragContext</name>   *</type><name>aContext</name></decl></param>,
                             <param><decl><type><name>GtkSelectionData</name> *</type><name>aSelectionData</name></decl></param>,
                             <param><decl><type><name>guint</name></type>             <name>aInfo</name></decl></param>,
                             <param><decl><type><name>guint32</name></type>           <name>aTime</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("nsDragService::SourceDataGet")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>GdkAtom</name></type> <name>atom</name> <init>= <expr>(<name>GdkAtom</name>)<name>aInfo</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsXPIDLCString</name></type> <name>mimeFlavor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>gchar</name> *</type><name>typeName</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>typeName</name> = <call><name>gdk_atom_name</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>typeName</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("failed to get atom name.\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("Type is %s\n", <name>typeName</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// make a copy since |nsXPIDLCString| won't use |g_free|...</comment>
    <expr_stmt><expr><call><name><name>mimeFlavor</name>.<name>Adopt</name></name><argument_list>(<argument><expr><call><name><name>nsCRT</name>::<name>strdup</name></name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// check to make sure that we have data items to return.</comment>
    <if>if <condition>(<expr>!<name>mSourceDataItems</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("Failed to get our data items\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>genericItem</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mSourceDataItems</name>-&gt;<name>GetElementAt</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>genericItem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITransferable</name></expr></argument>&gt;</argument_list></name></type> <name>item</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>item</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>genericItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>item</name></expr>)</condition><then> <block>{
        <comment type="line">// if someone was asking for text/plain, lookup unicode instead so</comment>
        <comment type="line">// we can convert it.</comment>
        <decl_stmt><decl><type><name>PRBool</name></type> <name>needToDoConversionToPlainText</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>actualFlavor</name> <init>= <expr><name>mimeFlavor</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mimeFlavor</name></expr></argument>,<argument><expr><name>kTextMime</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>actualFlavor</name> = <name>kUnicodeMime</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>needToDoConversionToPlainText</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
        }</block></then>
        <comment type="line">// if someone was asking for _NETSCAPE_URL we need to convert to</comment>
        <comment type="line">// plain text but we also need to look for x-moz-url</comment>
        <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mimeFlavor</name></expr></argument>, <argument><expr><name>gMozUrlType</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>actualFlavor</name> = <name>kURLMime</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>needToDoConversionToPlainText</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
        }</block></then>
        <comment type="line">// if someone was asking for text/uri-list we need to convert to</comment>
        <comment type="line">// plain text.</comment>
        <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mimeFlavor</name></expr></argument>, <argument><expr><name>gTextUriListType</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>actualFlavor</name> = <name>gTextUriListType</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>needToDoConversionToPlainText</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <expr_stmt><expr><name>actualFlavor</name> = <name>mimeFlavor</name></expr>;</expr_stmt></else></if></else></if></else></if>

        <decl_stmt><decl><type><name>PRUint32</name></type> <name>tmpDataLen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name>    *</type><name>tmpData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>data</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name><name>item</name>-&gt;<name>GetTransferData</name></name><argument_list>(<argument><expr><name>actualFlavor</name></expr></argument>,
                                   <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr>&amp;<name>tmpDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>nsPrimitiveHelpers</name>::<name>CreateDataFromPrimitive</name></name> <argument_list>(<argument><expr><name>actualFlavor</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
                                                         <argument><expr>&amp;<name>tmpData</name></expr></argument>, <argument><expr><name>tmpDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// if required, do the extra work to convert unicode to plain</comment>
            <comment type="line">// text and replace the output values with the plain text.</comment>
            <if>if <condition>(<expr><name>needToDoConversionToPlainText</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>char</name>*</type> <name>plainTextData</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PRUnichar</name>*</type> <name>castedUnicode</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>PRUnichar</name>*</expr></argument>&gt;</argument_list></name>
                                                           <argument_list>(<argument><expr><name>tmpData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PRInt32</name></type> <name>plainTextLen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>nsPrimitiveHelpers</name>::<name>ConvertUnicodeToPlatformPlainText</name></name><argument_list>(
                                    <argument><expr><name>castedUnicode</name></expr></argument>,
                                    <argument><expr><name>tmpDataLen</name> / 2</expr></argument>,
                                    <argument><expr>&amp;<name>plainTextData</name></expr></argument>,
                                    <argument><expr>&amp;<name>plainTextLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>tmpData</name></expr>)</condition><then> <block>{
                    <comment type="line">// this was not allocated using glib</comment>
                    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmpData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tmpData</name> = <name>plainTextData</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tmpDataLen</name> = <name>plainTextLen</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <if>if <condition>(<expr><name>tmpData</name></expr>)</condition><then> <block>{
                <comment type="line">// this copies the data</comment>
                <expr_stmt><expr><call><name>gtk_selection_data_set</name><argument_list>(<argument><expr><name>aSelectionData</name></expr></argument>,
                                       <argument><expr><name><name>aSelectionData</name>-&gt;<name>target</name></name></expr></argument>,
                                       <argument><expr>8</expr></argument>,
                                       <argument><expr>(<name>guchar</name> *)<name>tmpData</name></expr></argument>, <argument><expr><name>tmpDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// this wasn't allocated with glib</comment>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmpData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mimeFlavor</name></expr></argument>, <argument><expr><name>gTextUriListType</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                <comment type="line">// fall back for text/uri-list</comment>
                <decl_stmt><decl><type><name>gchar</name> *</type><name>uriList</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>gint</name></type> <name>length</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>CreateUriList</name><argument_list>(<argument><expr><name>mSourceDataItems</name></expr></argument>, <argument><expr>&amp;<name>uriList</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>gtk_selection_data_set</name><argument_list>(<argument><expr><name>aSelectionData</name></expr></argument>,
                                       <argument><expr><name><name>aSelectionData</name>-&gt;<name>target</name></name></expr></argument>,
                                       <argument><expr>8</expr></argument>, <argument><expr>(<name>guchar</name> *)<name>uriList</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>uriList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>
        }</block></else></if>
    }</block></then></if>
}</block></function>

<comment type="block">/* static */</comment>
<function><type><name>void</name></type>
<name>invisibleSourceDragDataGet</name><parameter_list>(<param><decl><type><name>GtkWidget</name>        *</type><name>aWidget</name></decl></param>,
                           <param><decl><type><name>GdkDragContext</name>   *</type><name>aContext</name></decl></param>,
                           <param><decl><type><name>GtkSelectionData</name> *</type><name>aSelectionData</name></decl></param>,
                           <param><decl><type><name>guint</name></type>             <name>aInfo</name></decl></param>,
                           <param><decl><type><name>guint32</name></type>           <name>aTime</name></decl></param>,
                           <param><decl><type><name>gpointer</name></type>          <name>aData</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("invisibleSourceDragDataGet")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nsDragService</name> *</type><name>dragService</name> <init>= <expr>(<name>nsDragService</name> *)<name>aData</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>dragService</name>-&gt;<name>SourceDataGet</name></name><argument_list>(<argument><expr><name>aWidget</name></expr></argument>, <argument><expr><name>aContext</name></expr></argument>,
                               <argument><expr><name>aSelectionData</name></expr></argument>, <argument><expr><name>aInfo</name></expr></argument>, <argument><expr><name>aTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* static */</comment>
<function><type><name>void</name></type>
<name>invisibleSourceDragEnd</name><parameter_list>(<param><decl><type><name>GtkWidget</name>        *</type><name>aWidget</name></decl></param>,
                       <param><decl><type><name>GdkDragContext</name>   *</type><name>aContext</name></decl></param>,
                       <param><decl><type><name>gpointer</name></type>          <name>aData</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>PR_LOG</name><argument_list>(<argument><expr><name>sDragLm</name></expr></argument>, <argument><expr><name>PR_LOG_DEBUG</name></expr></argument>, <argument><expr>("invisibleSourceDragEnd")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nsDragService</name> *</type><name>dragService</name> <init>= <expr>(<name>nsDragService</name> *)<name>aData</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>gint</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GdkDisplay</name>*</type> <name>display</name> <init>= <expr><call><name>gdk_display_get_default</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>display</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>gdk_display_get_pointer</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>dragService</name>-&gt;<name>SetDragEndPoint</name></name><argument_list>(<argument><expr><call><name>nsIntPoint</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">// The drag has ended.  Release the hostages!</comment>
    <expr_stmt><expr><call><name><name>dragService</name>-&gt;<name>SourceEndDrag</name></name><argument_list>(<argument><expr><name>aContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

</unit>
