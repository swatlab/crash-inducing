<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0052fe65da4ef31ac125d96ab252f56ac1db6762.cpp"><comment type="block">/* vim: se cin sw=2 ts=2 et : */</comment>
<comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla browser.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1999
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Rob Arnold &lt;robarnold@mozilla.com&gt; (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDebug.h"</cpp:file></cpp:include>
<comment type="line">// For GetWindowsVersion</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsWindow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsUXThemeConstants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsUXThemeData.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>PRUnichar</name></type>
<name><name>nsUXThemeData</name>::<name>kThemeLibraryName</name><index>[]</index></name> <init>= <expr>L"uxtheme.dll"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>PRUnichar</name></type>
<name><name>nsUXThemeData</name>::<name>kDwmLibraryName</name><index>[]</index></name> <init>= <expr>L"dwmapi.dll"</expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type>
<name><name>nsUXThemeData</name>::<name>sThemes</name><index>[<expr><name>eUXNumClasses</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HMODULE</name></type>
<name><name>nsUXThemeData</name>::<name>sThemeDLL</name></name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMODULE</name></type>
<name><name>nsUXThemeData</name>::<name>sDwmDLL</name></name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type>
<name><name>nsUXThemeData</name>::<name>sFlatMenus</name></name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRPackedBool</name></type>
<name><name>nsUXThemeData</name>::<name>sIsXPOrLater</name></name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRPackedBool</name></type>
<name><name>nsUXThemeData</name>::<name>sIsVistaOrLater</name></name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRPackedBool</name></type>
<name><name>nsUXThemeData</name>::<name>sHaveCompositor</name></name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>nsUXThemeData</name>::<name>OpenThemeDataPtr</name></name></type> <name><name>nsUXThemeData</name>::<name>openTheme</name></name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>nsUXThemeData</name>::<name>CloseThemeDataPtr</name></name></type> <name><name>nsUXThemeData</name>::<name>closeTheme</name></name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>nsUXThemeData</name>::<name>DrawThemeBackgroundPtr</name></name></type> <name><name>nsUXThemeData</name>::<name>drawThemeBG</name></name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>nsUXThemeData</name>::<name>DrawThemeEdgePtr</name></name></type> <name><name>nsUXThemeData</name>::<name>drawThemeEdge</name></name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>nsUXThemeData</name>::<name>GetThemeContentRectPtr</name></name></type> <name><name>nsUXThemeData</name>::<name>getThemeContentRect</name></name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>nsUXThemeData</name>::<name>GetThemeBackgroundRegionPtr</name></name></type> <name><name>nsUXThemeData</name>::<name>getThemeBackgroundRegion</name></name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>nsUXThemeData</name>::<name>GetThemePartSizePtr</name></name></type> <name><name>nsUXThemeData</name>::<name>getThemePartSize</name></name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>nsUXThemeData</name>::<name>GetThemeSysFontPtr</name></name></type> <name><name>nsUXThemeData</name>::<name>getThemeSysFont</name></name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>nsUXThemeData</name>::<name>GetThemeColorPtr</name></name></type> <name><name>nsUXThemeData</name>::<name>getThemeColor</name></name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>nsUXThemeData</name>::<name>GetThemeMarginsPtr</name></name></type> <name><name>nsUXThemeData</name>::<name>getThemeMargins</name></name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>nsUXThemeData</name>::<name>IsAppThemedPtr</name></name></type> <name><name>nsUXThemeData</name>::<name>isAppThemed</name></name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>nsUXThemeData</name>::<name>GetCurrentThemeNamePtr</name></name></type> <name><name>nsUXThemeData</name>::<name>getCurrentThemeName</name></name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>nsUXThemeData</name>::<name>GetThemeSysColorPtr</name></name></type> <name><name>nsUXThemeData</name>::<name>getThemeSysColor</name></name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>nsUXThemeData</name>::<name>DwmExtendFrameIntoClientAreaProc</name></name></type> <name><name>nsUXThemeData</name>::<name>dwmExtendFrameIntoClientAreaPtr</name></name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>nsUXThemeData</name>::<name>DwmIsCompositionEnabledProc</name></name></type> <name><name>nsUXThemeData</name>::<name>dwmIsCompositionEnabledPtr</name></name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name><name>nsUXThemeData</name>::<name>Teardown</name></name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name>Invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>(<expr><name>sThemeDLL</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>sThemeDLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if<condition>(<expr><name>sDwmDLL</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>sDwmDLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsUXThemeData</name>::<name>Initialize</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>::<name>ZeroMemory</name></name><argument_list>(<argument><expr><name>sThemes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sThemes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>sThemeDLL</name></expr></argument>, <argument><expr>"nsUXThemeData being initialized twice!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sThemeDLL</name> = <call><name>::<name>LoadLibraryW</name></name><argument_list>(<argument><expr><name>kThemeLibraryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>sThemeDLL</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>openTheme</name> = (<name>OpenThemeDataPtr</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>sThemeDLL</name></expr></argument>, <argument><expr>"OpenThemeData"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>closeTheme</name> = (<name>CloseThemeDataPtr</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>sThemeDLL</name></expr></argument>, <argument><expr>"CloseThemeData"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>drawThemeBG</name> = (<name>DrawThemeBackgroundPtr</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>sThemeDLL</name></expr></argument>, <argument><expr>"DrawThemeBackground"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>drawThemeEdge</name> = (<name>DrawThemeEdgePtr</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>sThemeDLL</name></expr></argument>, <argument><expr>"DrawThemeEdge"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>getThemeContentRect</name> = (<name>GetThemeContentRectPtr</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>sThemeDLL</name></expr></argument>, <argument><expr>"GetThemeBackgroundContentRect"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>getThemeBackgroundRegion</name> = (<name>GetThemeBackgroundRegionPtr</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>sThemeDLL</name></expr></argument>, <argument><expr>"GetThemeBackgroundRegion"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>getThemePartSize</name> = (<name>GetThemePartSizePtr</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>sThemeDLL</name></expr></argument>, <argument><expr>"GetThemePartSize"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>getThemeSysFont</name> = (<name>GetThemeSysFontPtr</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>sThemeDLL</name></expr></argument>, <argument><expr>"GetThemeSysFont"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>getThemeColor</name> = (<name>GetThemeColorPtr</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>sThemeDLL</name></expr></argument>, <argument><expr>"GetThemeColor"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>getThemeMargins</name> = (<name>GetThemeMarginsPtr</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>sThemeDLL</name></expr></argument>, <argument><expr>"GetThemeMargins"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>isAppThemed</name> = (<name>IsAppThemedPtr</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>sThemeDLL</name></expr></argument>, <argument><expr>"IsAppThemed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>getCurrentThemeName</name> = (<name>GetCurrentThemeNamePtr</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>sThemeDLL</name></expr></argument>, <argument><expr>"GetCurrentThemeName"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>getThemeSysColor</name> = (<name>GetThemeSysColorPtr</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>sThemeDLL</name></expr></argument>, <argument><expr>"GetThemeSysColor"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><name>sDwmDLL</name> = <call><name>::<name>LoadLibraryW</name></name><argument_list>(<argument><expr><name>kDwmLibraryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>(<expr><name>sDwmDLL</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>dwmExtendFrameIntoClientAreaPtr</name> = (<name>DwmExtendFrameIntoClientAreaProc</name>)<call><name>::<name>GetProcAddress</name></name><argument_list>(<argument><expr><name>sDwmDLL</name></expr></argument>, <argument><expr>"DwmExtendFrameIntoClientArea"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dwmIsCompositionEnabledPtr</name> = (<name>DwmIsCompositionEnabledProc</name>)<call><name>::<name>GetProcAddress</name></name><argument_list>(<argument><expr><name>sDwmDLL</name></expr></argument>, <argument><expr>"DwmIsCompositionEnabled"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckForCompositor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>version</name> <init>= <expr><call><name><name>nsWindow</name>::<name>GetWindowsVersion</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>sIsXPOrLater</name> = <name>version</name> &gt;= <name>WINXP_VERSION</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>sIsVistaOrLater</name> = <name>version</name> &gt;= <name>VISTA_VERSION</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsUXThemeData</name>::<name>Invalidate</name></name><parameter_list>()</parameter_list> <block>{
  <for>for(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>eUXNumClasses</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
    <if>if<condition>(<expr><name><name>sThemes</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>closeTheme</name><argument_list>(<argument><expr><name><name>sThemes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sThemes</name><index>[<expr><name>i</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>
  <if>if <condition>(<expr><name>sIsXPOrLater</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>BOOL</name></type> <name>useFlat</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sFlatMenus</name> = <call><name>::<name>SystemParametersInfo</name></name><argument_list>(<argument><expr><name>SPI_GETFLATMENU</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>useFlat</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> ?
                     <name>useFlat</name> : <name>PR_FALSE</name></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <comment type="line">// Contrary to Microsoft's documentation, SPI_GETFLATMENU will not fail</comment>
    <comment type="line">// on Windows 2000, and it is also possible (though unlikely) for WIN2K</comment>
    <comment type="line">// to be misconfigured in such a way that it would return true, so we</comment>
    <comment type="line">// shall give WIN2K special treatment</comment>
    <expr_stmt><expr><name>sFlatMenus</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>

<function><type><name>HANDLE</name></type>
<name><name>nsUXThemeData</name>::<name>GetTheme</name></name><parameter_list>(<param><decl><type><name>nsUXThemeClass</name></type> <name>cls</name></decl></param>)</parameter_list> <block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>cls</name> &lt; <name>eUXNumClasses</name></expr></argument>, <argument><expr>"Invalid theme class!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>(<expr>!<name>sThemeDLL</name></expr>)</condition><then>
    <return>return <expr><name>NULL</name></expr>;</return></then></if>
  <if>if<condition>(<expr>!<name><name>sThemes</name><index>[<expr><name>cls</name></expr>]</index></name></expr>)</condition><then>
  <block>{
    <expr_stmt><expr><name><name>sThemes</name><index>[<expr><name>cls</name></expr>]</index></name> = <call><name>openTheme</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>GetClassName</name><argument_list>(<argument><expr><name>cls</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name><name>sThemes</name><index>[<expr><name>cls</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><specifier>const</specifier> <name>wchar_t</name> *</type><name><name>nsUXThemeData</name>::<name>GetClassName</name></name><parameter_list>(<param><decl><type><name>nsUXThemeClass</name></type> <name>cls</name></decl></param>)</parameter_list> <block>{
  <switch>switch<condition>(<expr><name>cls</name></expr>)</condition> <block>{
    <case>case <expr><name>eUXButton</name></expr>:
      <return>return <expr>L"Button"</expr>;</return>
    </case><case>case <expr><name>eUXEdit</name></expr>:
      <return>return <expr>L"Edit"</expr>;</return>
    </case><case>case <expr><name>eUXTooltip</name></expr>:
      <return>return <expr>L"Tooltip"</expr>;</return>
    </case><case>case <expr><name>eUXRebar</name></expr>:
      <return>return <expr>L"Rebar"</expr>;</return>
    </case><case>case <expr><name>eUXMediaRebar</name></expr>:
      <return>return <expr>L"Media::Rebar"</expr>;</return>
    </case><case>case <expr><name>eUXCommunicationsRebar</name></expr>:
      <return>return <expr>L"Communications::Rebar"</expr>;</return>
    </case><case>case <expr><name>eUXBrowserTabBarRebar</name></expr>:
      <return>return <expr>L"BrowserTabBar::Rebar"</expr>;</return>
    </case><case>case <expr><name>eUXToolbar</name></expr>:
      <return>return <expr>L"Toolbar"</expr>;</return>
    </case><case>case <expr><name>eUXMediaToolbar</name></expr>:
      <return>return <expr>L"Media::Toolbar"</expr>;</return>
    </case><case>case <expr><name>eUXCommunicationsToolbar</name></expr>:
      <return>return <expr>L"Communications::Toolbar"</expr>;</return>
    </case><case>case <expr><name>eUXProgress</name></expr>:
      <return>return <expr>L"Progress"</expr>;</return>
    </case><case>case <expr><name>eUXTab</name></expr>:
      <return>return <expr>L"Tab"</expr>;</return>
    </case><case>case <expr><name>eUXScrollbar</name></expr>:
      <return>return <expr>L"Scrollbar"</expr>;</return>
    </case><case>case <expr><name>eUXTrackbar</name></expr>:
      <return>return <expr>L"Trackbar"</expr>;</return>
    </case><case>case <expr><name>eUXSpin</name></expr>:
      <return>return <expr>L"Spin"</expr>;</return>
    </case><case>case <expr><name>eUXStatus</name></expr>:
      <return>return <expr>L"Status"</expr>;</return>
    </case><case>case <expr><name>eUXCombobox</name></expr>:
      <return>return <expr>L"Combobox"</expr>;</return>
    </case><case>case <expr><name>eUXHeader</name></expr>:
      <return>return <expr>L"Header"</expr>;</return>
    </case><case>case <expr><name>eUXListview</name></expr>:
      <return>return <expr>L"Listview"</expr>;</return>
    </case><case>case <expr><name>eUXMenu</name></expr>:
      <return>return <expr>L"Menu"</expr>;</return>
    </case><default>default:
      <expr_stmt><expr><call><name>NS_NOTREACHED</name><argument_list>(<argument><expr>"unknown uxtheme class"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr>L""</expr>;</return>
  </default>}</block></switch>
}</block></function>
</unit>
