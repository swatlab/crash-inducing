<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0020317fb59454f6a7a824a3f5ab314b136b165e.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: set ts=8 sw=4 et tw=79:
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code, released
 * March 31, 1998.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<comment type="block">/* This file needs to be included in possibly multiple places. */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_THREADED_INTERP</name></expr></cpp:if>
  <label><name>interrupt</name>:</label>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !JS_THREADED_INTERP */</comment>
  <case>case <expr>-1</expr>:
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>switchMask</name> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !JS_THREADED_INTERP */</comment>
    <block>{
        <decl_stmt><decl><type><name>bool</name></type> <name>moreInterrupts</name> <init>= <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JSTrapHandler</name></type> <name>handler</name> <init>= <expr><name><name>cx</name>-&gt;<name>debugHooks</name>-&gt;<name>interruptHandler</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>handler</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_TRACER</name></cpp:ifdef>
            <if>if <condition>(<expr><call><name>TRACE_RECORDER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name>AbortRecording</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"interrupt handler"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <switch>switch <condition>(<expr><call><name>handler</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>,
                            <argument><expr><name><name>cx</name>-&gt;<name>debugHooks</name>-&gt;<name>interruptHandlerData</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
              <case>case <expr><name>JSTRAP_ERROR</name></expr>:
                <goto>goto <name>error</name>;</goto>
              </case><case>case <expr><name>JSTRAP_CONTINUE</name></expr>:
                <break>break;</break>
              </case><case>case <expr><name>JSTRAP_RETURN</name></expr>:
                <expr_stmt><expr><name><name>fp</name>-&gt;<name>rval</name></name> = <name>rval</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
                <goto>goto <name>forced_return</name>;</goto>
              </case><case>case <expr><name>JSTRAP_THROW</name></expr>:
                <expr_stmt><expr><name><name>cx</name>-&gt;<name>throwing</name></name> = <name>JS_TRUE</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cx</name>-&gt;<name>exception</name></name> = <name>rval</name></expr>;</expr_stmt>
                <goto>goto <name>error</name>;</goto>
              </case><default>default:<empty_stmt>;</empty_stmt>
            </default>}</block></switch>
            <expr_stmt><expr><name>moreInterrupts</name> = true</expr>;</expr_stmt>
        }</block></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_TRACER</name></cpp:ifdef>
        <if>if <condition>(<decl><type><name>TraceRecorder</name>*</type> <name>tr</name> <init>= <expr><call><name>TRACE_RECORDER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><then> <block>{
            <decl_stmt><decl><type><name>AbortableRecordingStatus</name></type> <name>status</name> <init>= <expr><call><name><name>tr</name>-&gt;<name>monitorRecording</name></name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{
              <case>case <expr><name>ARECORD_CONTINUE</name></expr>:
                <expr_stmt><expr><name>moreInterrupts</name> = true</expr>;</expr_stmt>
                <break>break;</break>
              </case><case>case <expr><name>ARECORD_IMACRO</name></expr>:
                <expr_stmt><expr><name>atoms</name> = <call><name>COMMON_ATOMS_START</name><argument_list>(<argument><expr>&amp;<name><name>rt</name>-&gt;<name>atomState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>op</name> = <call><name>JSOp</name><argument_list>(<argument><expr>*<name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>DO_OP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* keep interrupting for op. */</comment>
                <break>break;</break>
              </case><case>case <expr><name>ARECORD_ERROR</name></expr>:
                <comment type="line">// The code at 'error:' aborts the recording.</comment>
                <goto>goto <name>error</name>;</goto>
              </case><case>case <expr><name>ARECORD_ABORTED</name></expr>:
              </case><case>case <expr><name>ARECORD_COMPLETED</name></expr>:
                <break>break;</break>
              </case><case>case <expr><name>ARECORD_STOP</name></expr>:
                <comment type="block">/* A 'stop' error should have already aborted recording. */</comment>
              </case><default>default:
                <expr_stmt><expr><call><name>JS_NOT_REACHED</name><argument_list>(<argument><expr>"Bad recording status"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </default>}</block></switch>
        }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !JS_TRACER */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_THREADED_INTERP</name></expr></cpp:if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_TRACEVIS</name></cpp:ifdef>
        <if>if <condition>(<expr>!<name>moreInterrupts</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>ExitTraceVisState</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>R_ABORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>jumpTable</name> = <name>moreInterrupts</name> ? <name>interruptJumpTable</name> : <name>normalJumpTable</name></expr>;</expr_stmt>
        <macro><name>JS_EXTENSION_</name><argument_list>(<argument>goto *normalJumpTable[op]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name>switchMask</name> = <name>moreInterrupts</name> ? -1 : 0</expr>;</expr_stmt>
        <expr_stmt><expr><name>switchOp</name> = <call><name>intN</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>do_switch</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block>

<comment type="block">/* No-ops for ease of decompilation. */</comment>
<macro><name>ADD_EMPTY_CASE</name><argument_list>(<argument>JSOP_NOP</argument>)</argument_list></macro>
<macro><name>ADD_EMPTY_CASE</name><argument_list>(<argument>JSOP_CONDSWITCH</argument>)</argument_list></macro>
<macro><name>ADD_EMPTY_CASE</name><argument_list>(<argument>JSOP_TRY</argument>)</argument_list></macro>
<macro><name>ADD_EMPTY_CASE</name><argument_list>(<argument>JSOP_TRACE</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_XML_SUPPORT</name></expr></cpp:if>
<macro><name>ADD_EMPTY_CASE</name><argument_list>(<argument>JSOP_STARTXML</argument>)</argument_list></macro>
<macro><name>ADD_EMPTY_CASE</name><argument_list>(<argument>JSOP_STARTXMLEXPR</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>END_EMPTY_CASES</name></type>

<comment type="block">/* ADD_EMPTY_CASE is not used here as JSOP_LINENO_LENGTH == 3. */</comment>
<name>BEGIN_CASE</name><argument_list>(<argument><expr><name>JSOP_LINENO</name></expr></argument>)</argument_list>
<name>END_CASE</name><argument_list>(<argument><expr><name>JSOP_LINENO</name></expr></argument>)</argument_list>

<name>BEGIN_CASE</name><argument_list>(<argument><expr><name>JSOP_PUSH</name></expr></argument>)</argument_list>
    <name>PUSH_OPND</name><argument_list>(<argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_PUSH</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_POP</argument>)</argument_list></macro>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_POP</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_POPN</argument>)</argument_list></macro>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name> -= <call><name>GET_UINT16</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> &lt;= <name><name>regs</name>.<name>sp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <name><name>fp</name>-&gt;<name>blockChain</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT_IF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>,
                 <argument><expr><call><name>OBJ_BLOCK_DEPTH</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> + <call><name>OBJ_BLOCK_COUNT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call>
                 &lt;= <call>(<name>size_t</name>) <argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> - <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>obj</name> = <name><name>fp</name>-&gt;<name>scopeChain</name></name></expr>;</init> <condition><expr><name>obj</name></expr>;</condition> <incr><expr><name>obj</name> = <call><name><name>obj</name>-&gt;<name>getParent</name></name><argument_list>()</argument_list></call></expr></incr>) <block>{
        <expr_stmt><expr><name>clasp</name> = <call><name><name>obj</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>clasp</name> != &amp;<name>js_BlockClass</name> &amp;&amp; <name>clasp</name> != &amp;<name>js_WithClass</name></expr>)</condition><then>
            <continue>continue;</continue></then></if>
        <if>if <condition>(<expr><call><name><name>obj</name>-&gt;<name>getPrivate</name></name><argument_list>()</argument_list></call> != <call><name>js_FloatingFrameIfGenerator</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <break>break;</break></then></if>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> + <call><name>OBJ_BLOCK_DEPTH</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call>
                             + ((<name>clasp</name> == &amp;<name>js_BlockClass</name>)
                                ? <call><name>OBJ_BLOCK_COUNT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call>
                                : 1)
                  &lt;= <name><name>regs</name>.<name>sp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_POPN</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_SETRVAL</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_POPV</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>ASSERT_NOT_THROWING</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fp</name>-&gt;<name>rval</name></name> = <call><name>POP_OPND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_POPV</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ENTERWITH</argument>)</argument_list></macro>
    <if>if <condition>(<expr>!<call><name>js_EnterWith</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>

    <comment type="block">/*
     * We must ensure that different "with" blocks have different stack depth
     * associated with them. This allows the try handler search to properly
     * recover the scope chain. Thus we must keep the stack at least at the
     * current level.
     *
     * We set sp[-1] to the current "with" object to help asserting the
     * enter/leave balance in [leavewith].
     */</comment>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>fp</name>-&gt;<name>scopeChain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_ENTERWITH</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_LEAVEWITH</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name> == <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>fp</name>-&gt;<name>scopeChain</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>js_LeaveWith</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_LEAVEWITH</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_RETURN</argument>)</argument_list></macro>
    <expr_stmt><expr><name><name>fp</name>-&gt;<name>rval</name></name> = <call><name>POP_OPND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* FALL THROUGH */</comment>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_RETRVAL</argument>)</argument_list></macro>    <comment type="block">/* fp-&gt;rval already set */</comment>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_STOP</argument>)</argument_list></macro>
    <comment type="block">/*
     * When the inlined frame exits with an exception or an error, ok will be
     * false after the inline_return label.
     */</comment>
    <expr_stmt><expr><call><name>ASSERT_NOT_THROWING</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_BRANCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>fp</name>-&gt;<name>imacpc</name></name></expr>)</condition><then> <block>{
        <comment type="block">/*
         * If we are at the end of an imacro, return to its caller in the
         * current frame.
         */</comment>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>op</name> == <name>JSOP_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <label><name>end_imacro</name>:</label>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call>(<name>uintN</name>)<argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> - <call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> &lt;= <name><name>script</name>-&gt;<name>nslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>regs</name>.<name>pc</name></name> = <name><name>fp</name>-&gt;<name>imacpc</name></name> + <name><name>js_CodeSpec</name><index>[<expr>*<name><name>fp</name>-&gt;<name>imacpc</name></name></expr>]</index></name>.<name>length</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>fp</name>-&gt;<name>imacpc</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>atoms</name> = <name><name>script</name>-&gt;<name>atomMap</name>.<name>vector</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>op</name> = <call><name>JSOp</name><argument_list>(<argument><expr>*<name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>DO_OP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> == <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name><name>fp</name>-&gt;<name>flags</name></name> &amp; <name>JSFRAME_CONSTRUCTING</name>) &amp;&amp; <call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name><name>fp</name>-&gt;<name>rval</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name><name>fp</name>-&gt;<name>rval</name></name> = <name><name>fp</name>-&gt;<name>thisv</name></name></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>inlineCallCount</name></expr>)</condition><then>
  <label><name>inline_return</name>:</label>
    <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name><name>fp</name>-&gt;<name>blockChain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>js_IsActiveWithOrBlock</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>fp</name>-&gt;<name>scopeChain</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>fp</name>-&gt;<name>down</name>-&gt;<name>regs</name></name> == &amp;<name><name>fp</name>-&gt;<name>callerRegs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>JS_LIKELY</name><argument_list>(<argument><expr><name><name>script</name>-&gt;<name>staticLevel</name></name> &lt; <name>JS_DISPLAY_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name><name>cx</name>-&gt;<name>display</name><index>[<expr><name><name>script</name>-&gt;<name>staticLevel</name></name></expr>]</index></name> = <name><name>fp</name>-&gt;<name>displaySave</name></name></expr>;</expr_stmt></then></if>

        <decl_stmt><decl><type><name>void</name> *</type><name>hookData</name> <init>= <expr><name><name>fp</name>-&gt;<name>hookData</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>JS_UNLIKELY</name><argument_list>(<argument><expr><name>hookData</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>JSInterpreterHook</name></type> <name>hook</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JSBool</name></type> <name>status</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>hook</name> = <name><name>cx</name>-&gt;<name>debugHooks</name>-&gt;<name>callHook</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>hook</name></expr>)</condition><then> <block>{
                <comment type="block">/*
                 * Do not pass &amp;ok directly as exposing the address inhibits
                 * optimizations and uninitialised warnings.
                 */</comment>
                <expr_stmt><expr><name>status</name> = <name>ok</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hook</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>, <argument><expr><name>hookData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ok</name> = <name>status</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CHECK_INTERRUPT_HANDLER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <comment type="block">/*
         * If fp has a call object, sync values and clear the back-
         * pointer. This can happen for a lightweight function if it calls eval
         * unexpectedly (in a way that is hidden from the compiler). See bug
         * 325540.
         */</comment>
        <expr_stmt><expr><call><name><name>fp</name>-&gt;<name>putActivationObjects</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>INCLUDE_MOZILLA_DTRACE</name></cpp:ifdef>
        <comment type="block">/* DTrace function return, inlines */</comment>
        <if>if <condition>(<expr><call><name>JAVASCRIPT_FUNCTION_RVAL_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>jsdtrace_function_rval</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>fp</name>-&gt;<name>fun</name></name></expr></argument>, <argument><expr>&amp;<name><name>fp</name>-&gt;<name>rval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><call><name>JAVASCRIPT_FUNCTION_RETURN_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>jsdtrace_function_return</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>fp</name>-&gt;<name>fun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="block">/* Restore context version only if callee hasn't set version. */</comment>
        <if>if <condition>(<expr><call><name>JS_LIKELY</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>version</name></name> == <name>currentVersion</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>currentVersion</name> = <name><name>fp</name>-&gt;<name>callerVersion</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>currentVersion</name> != <name><name>cx</name>-&gt;<name>version</name></name></expr>)</condition><then>
                <expr_stmt><expr><call><name>js_SetVersion</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>currentVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if>

        <comment type="block">/*
         * If inline-constructing, replace primitive rval with the new object
         * passed in via |this|, and instrument this constructor invocation.
         */</comment>
        <if>if <condition>(<expr><name><name>fp</name>-&gt;<name>flags</name></name> &amp; <name>JSFRAME_CONSTRUCTING</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name><name>fp</name>-&gt;<name>rval</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name><name>fp</name>-&gt;<name>rval</name></name> = <name><name>fp</name>-&gt;<name>thisv</name></name></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name>JS_RUNTIME_METER</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>, <argument><expr><name>constructs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>JSStackFrame</name> *</type><name>down</name> <init>= <expr><name><name>fp</name>-&gt;<name>down</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>recursive</name> <init>= <expr><name><name>fp</name>-&gt;<name>script</name></name> == <name><name>down</name>-&gt;<name>script</name></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Restore caller's registers. */</comment>
        <expr_stmt><expr><name>regs</name> = <name><name>fp</name>-&gt;<name>callerRegs</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name> -= 1 + (<name>size_t</name>) <name><name>fp</name>-&gt;<name>argc</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name> = <name><name>fp</name>-&gt;<name>rval</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>down</name>-&gt;<name>regs</name></name> = &amp;<name>regs</name></expr>;</expr_stmt>

        <comment type="block">/* Pop |fp| from the context. */</comment>
        <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>stack</name></name><argument_list>()</argument_list></call>.<call><name>popInlineFrame</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Sync interpreter registers. */</comment>
        <expr_stmt><expr><name>fp</name> = <name><name>cx</name>-&gt;<name>fp</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>script</name> = <name><name>fp</name>-&gt;<name>script</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>atoms</name> = <call><name>FrameAtomBase</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Resume execution in the calling frame. */</comment>
        <expr_stmt><expr><name>inlineCallCount</name>--</expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>JS_LIKELY</name><argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>js_CodeSpec</name><index>[<expr><call><name>js_GetOpcode</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>]</index></name>.<name>length</name>
                      == <name>JSOP_CALL_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TRACE_0</name><argument_list>(<argument><expr><name>LeaveFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name>TRACE_RECORDER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call> &amp;&amp; <name>recursive</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>*(<name><name>regs</name>.<name>pc</name></name> + <name>JSOP_CALL_LENGTH</name>) == <name>JSOP_TRACE</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>regs</name>.<name>pc</name></name> += <name>JSOP_CALL_LENGTH</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>MONITOR_BRANCH</name><argument_list>(<argument><expr><name>Record_LeaveFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>op</name> = (<name>JSOp</name>)*<name><name>regs</name>.<name>pc</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>DO_OP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <if>if <condition>(<expr>*(<name><name>regs</name>.<name>pc</name></name> + <name>JSOP_CALL_LENGTH</name>) == <name>JSOP_TRACE</name> ||
                *(<name><name>regs</name>.<name>pc</name></name> + <name>JSOP_CALL_LENGTH</name>) == <name>JSOP_NOP</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>JS_STATIC_ASSERT</name><argument_list>(<argument><expr><name>JSOP_TRACE_LENGTH</name> == <name>JSOP_NOP_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>regs</name>.<name>pc</name></name> += <name>JSOP_CALL_LENGTH</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>len</name> = <name>JSOP_TRACE_LENGTH</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>len</name> = <name>JSOP_CALL_LENGTH</name></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name>DO_NEXT_OP</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <goto>goto <name>error</name>;</goto>
    }</block></then></if>
    <goto>goto <name>exit</name>;</goto>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DEFAULT</argument>)</argument_list></macro>
    <expr_stmt><expr>(<name>void</name>) <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* FALL THROUGH */</comment>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GOTO</argument>)</argument_list></macro>
    <expr_stmt><expr><name>len</name> = <call><name>GET_JUMP_OFFSET</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BRANCH</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_GOTO</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_IFEQ</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>POP_BOOLEAN</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>cond</name> == <name>JS_FALSE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>len</name> = <call><name>GET_JUMP_OFFSET</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BRANCH</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_IFEQ</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_IFNE</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>POP_BOOLEAN</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>cond</name> != <name>JS_FALSE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>len</name> = <call><name>GET_JUMP_OFFSET</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BRANCH</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_IFNE</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_OR</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>POP_BOOLEAN</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>cond</name> == <name>JS_TRUE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>len</name> = <call><name>GET_JUMP_OFFSET</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>DO_NEXT_OP</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_OR</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_AND</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>POP_BOOLEAN</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>cond</name> == <name>JS_FALSE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>len</name> = <call><name>GET_JUMP_OFFSET</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>DO_NEXT_OP</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_AND</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DEFAULTX</argument>)</argument_list></macro>
    <expr_stmt><expr>(<name>void</name>) <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* FALL THROUGH */</comment>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GOTOX</argument>)</argument_list></macro>
    <expr_stmt><expr><name>len</name> = <call><name>GET_JUMPX_OFFSET</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BRANCH</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>END_CASE</name><argument_list>(<argument><expr><name>JSOP_GOTOX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_IFEQX</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>POP_BOOLEAN</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>cond</name> == <name>JS_FALSE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>len</name> = <call><name>GET_JUMPX_OFFSET</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BRANCH</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_IFEQX</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_IFNEX</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>POP_BOOLEAN</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>cond</name> != <name>JS_FALSE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>len</name> = <call><name>GET_JUMPX_OFFSET</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BRANCH</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_IFNEX</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ORX</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>POP_BOOLEAN</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>cond</name> == <name>JS_TRUE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>len</name> = <call><name>GET_JUMPX_OFFSET</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>DO_NEXT_OP</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_ORX</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ANDX</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>POP_BOOLEAN</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>cond</name> == <name>JS_FALSE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>len</name> = <call><name>GET_JUMPX_OFFSET</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>DO_NEXT_OP</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_ANDX</argument>)</argument_list></macro>

<comment type="block">/*
 * If the index value at sp[n] is not an int that fits in a jsval, it could
 * be an object (an XML QName, AttributeName, or AnyName), but only if we are
 * compiling with JS_HAS_XML_SUPPORT.  Otherwise convert the index value to a
 * string atom id.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FETCH_ELEMENT_ID</name><parameter_list>(<param><type><name>obj</name></type></param>, <param><type><name>n</name></type></param>, <param><type><name>id</name></type></param>)</parameter_list></cpp:macro>                                          \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        jsval idval_ = FETCH_OPND(n);                                         \
        if (JSVAL_IS_INT(idval_)) {                                           \
            id = INT_JSVAL_TO_JSID(idval_);                                   \
        } else {                                                              \
            if (!js_InternNonIntElementId(cx, obj, idval_, &amp;id))              \
                goto error;                                                   \
            regs.sp[n] = ID_TO_VALUE(id);                                     \
        }                                                                     \
    JS_END_MACRO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRY_BRANCH_AFTER_COND</name><parameter_list>(<param><type><name>cond</name></type></param>,<param><type><name>spdec</name></type></param>)</parameter_list></cpp:macro>                                     \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        uintN diff_;                                                          \
        JS_ASSERT(js_CodeSpec[op].length == 1);                               \
        diff_ = (uintN) regs.pc[1] - (uintN) JSOP_IFEQ;                       \
        if (diff_ &lt;= 1) {                                                     \
            regs.sp -= spdec;                                                 \
            if (cond == (diff_ != 0)) {                                       \
                ++regs.pc;                                                    \
                len = GET_JUMP_OFFSET(regs.pc);                               \
                BRANCH(len);                                                  \
            }                                                                 \
            len = 1 + JSOP_IFEQ_LENGTH;                                       \
            DO_NEXT_OP(len);                                                  \
        }                                                                     \
    JS_END_MACRO</cpp:value></cpp:define>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_IN</argument>)</argument_list></macro>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>js_ReportValueError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSMSG_IN_NOT_OBJECT</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FETCH_ELEMENT_ID</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>lookupProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><name>cond</name> = <name>prop</name> != <name>NULL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>prop</name></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>obj2</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>TRY_BRANCH_AFTER_COND</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>BOOLEAN_TO_JSVAL</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_IN</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ITER</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> &gt; <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> = <name><name>regs</name>.<name>pc</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>js_ValueToIterator</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr>&amp;<name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>CHECK_INTERRUPT_HANDLER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_ITER</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_NEXTITER</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> - 2 &gt;= <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>js_CallIteratorNext</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>CHECK_INTERRUPT_HANDLER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>BOOLEAN_TO_JSVAL</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name> != <name>JSVAL_HOLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_NEXTITER</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ENDITER</argument>)</argument_list></macro>
    <comment type="block">/*
     * Decrease the stack pointer even when !ok -- see comments in the
     * exception capturing code for details.
     */</comment>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> - 2 &gt;= <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>js_CloseIterator</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name> -= 2</expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_ENDITER</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_FORARG</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> - 2 &gt;= <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>slot</name> = <call><name>GET_ARGNO</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <name><name>fp</name>-&gt;<name>fun</name>-&gt;<name>nargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fp</name>-&gt;<name>argv</name><index>[<expr><name>slot</name></expr>]</index></name> = <name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_FORARG</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_FORLOCAL</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> - 2 &gt;= <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>slot</name> = <call><name>GET_SLOTNO</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <name><name>fp</name>-&gt;<name>script</name>-&gt;<name>nslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call><index>[<expr><name>slot</name></expr>]</index> = <name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_FORLOCAL</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_FORNAME</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> - 2 &gt;= <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LOAD_ATOM</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>js_FindProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>obj</name></expr></argument>, <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <if>if <condition>(<expr><name>prop</name></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>obj2</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name>ok</name> = <call><name><name>obj</name>-&gt;<name>setProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_FORNAME</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_FORPROP</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> - 2 &gt;= <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LOAD_ATOM</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FETCH_OBJECT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name><name>obj</name>-&gt;<name>setProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name><name>regs</name>.<name>sp</name><index>[<expr>-2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_FORPROP</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_FORELEM</argument>)</argument_list></macro>
    <comment type="block">/*
     * JSOP_FORELEM simply dups the property identifier at top of stack and
     * lets the subsequent JSOP_ENUMELEM opcode sequence handle the left-hand
     * side expression evaluation and assignment. This opcode exists solely to
     * help the decompiler.
     */</comment>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> - 2 &gt;= <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_FORELEM</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DUP</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> &gt; <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_DUP</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DUP2</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> - 2 &gt;= <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_DUP2</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_SWAP</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> - 2 &gt;= <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-2</expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_SWAP</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_PICK</argument>)</argument_list></macro>
    <expr_stmt><expr><name>i</name> = <name><name>regs</name>.<name>pc</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> - (<name>i</name>+1) &gt;= <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lval</name> = <name><name>regs</name>.<name>sp</name><index>[<expr>-(<name>i</name>+1)</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> - (<name>i</name>+1)</expr></argument>, <argument><expr><name><name>regs</name>.<name>sp</name></name> - <name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jsval</name></expr></argument>)</argument_list></sizeof>*<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name> = <name>lval</name></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_PICK</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPERTY_OP</name><parameter_list>(<param><type><name>n</name></type></param>, <param><type><name>call</name></type></param>)</parameter_list></cpp:macro>                                                  \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        <comment type="block">/* Fetch the left part and resolve it to a non-null object. */</comment>        \
        FETCH_OBJECT(cx, n, lval, obj);                                       \
                                                                              \
        <comment type="block">/* Get or set the property. */</comment>                                        \
        if (!call)                                                            \
            goto error;                                                       \
    JS_END_MACRO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELEMENT_OP</name><parameter_list>(<param><type><name>n</name></type></param>, <param><type><name>call</name></type></param>)</parameter_list></cpp:macro>                                                   \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        <comment type="block">/* Fetch the left part and resolve it to a non-null object. */</comment>        \
        FETCH_OBJECT(cx, n - 1, lval, obj);                                   \
                                                                              \
        <comment type="block">/* Fetch index and convert it to id suitable for use with obj. */</comment>     \
        FETCH_ELEMENT_ID(obj, n, id);                                         \
                                                                              \
        <comment type="block">/* Get or set the element. */</comment>                                         \
        if (!call)                                                            \
            goto error;                                                       \
    JS_END_MACRO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NATIVE_GET</name><parameter_list>(<param><type><name>cx</name></type></param>,<param><type><name>obj</name></type></param>,<param><type><name>pobj</name></type></param>,<param><type><name>sprop</name></type></param>,<param><type><name>getHow</name></type></param>,<param><type><name>vp</name></type></param>)</parameter_list></cpp:macro>                               \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        if (sprop-&gt;hasDefaultGetter()) {                                      \
            <comment type="block">/* Fast path for Object instance properties. */</comment>                   \
            JS_ASSERT((sprop)-&gt;slot != SPROP_INVALID_SLOT ||                  \
                      !sprop-&gt;hasDefaultSetter());                            \
            *vp = ((sprop)-&gt;slot != SPROP_INVALID_SLOT)                       \
                  ? (pobj)-&gt;lockedGetSlot((sprop)-&gt;slot)                      \
                  : JSVAL_VOID;                                               \
        } else {                                                              \
            if (!js_NativeGet(cx, obj, pobj, sprop, getHow, vp))              \
                goto error;                                                   \
        }                                                                     \
    JS_END_MACRO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NATIVE_SET</name><parameter_list>(<param><type><name>cx</name></type></param>,<param><type><name>obj</name></type></param>,<param><type><name>sprop</name></type></param>,<param><type><name>entry</name></type></param>,<param><type><name>vp</name></type></param>)</parameter_list></cpp:macro>                                     \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        TRACE_2(SetPropHit, entry, sprop);                                    \
        if (sprop-&gt;hasDefaultSetter() &amp;&amp;                                      \
            (sprop)-&gt;slot != SPROP_INVALID_SLOT &amp;&amp;                            \
            !(obj)-&gt;scope()-&gt;brandedOrHasMethodBarrier()) {                   \
            <comment type="block">/* Fast path for, e.g., plain Object instance properties. */</comment>      \
            (obj)-&gt;lockedSetSlot((sprop)-&gt;slot, *vp);                         \
        } else {                                                              \
            if (!js_NativeSet(cx, obj, sprop, false, vp))                     \
                goto error;                                                   \
        }                                                                     \
    JS_END_MACRO</cpp:value></cpp:define>

<comment type="block">/*
 * Skip the JSOP_POP typically found after a JSOP_SET* opcode, where oplen is
 * the constant length of the SET opcode sequence, and spdec is the constant
 * by which to decrease the stack pointer to pop all of the SET op's operands.
 *
 * NB: unlike macros that could conceivably be replaced by functions (ignoring
 * goto error), where a call should not have to be braced in order to expand
 * correctly (e.g., in if (cond) FOO(); else BAR()), these three macros lack
 * JS_{BEGIN,END}_MACRO brackets. They are also indented so as to align with
 * nearby opcode code.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_POP_AFTER_SET</name><parameter_list>(<param><type><name>oplen</name></type></param>,<param><type><name>spdec</name></type></param>)</parameter_list></cpp:macro>                                       \
            <cpp:value>if (regs.pc[oplen] == JSOP_POP) {                                 \
                regs.sp -= spdec;                                             \
                regs.pc += oplen + JSOP_POP_LENGTH;                           \
                op = (JSOp) *regs.pc;                                         \
                DO_OP();                                                      \
            }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_SET_CASE</name><parameter_list>(<param><type><name>OP</name></type></param>)</parameter_list></cpp:macro>                                                      \
            <cpp:value>SKIP_POP_AFTER_SET(OP##_LENGTH, 1);                               \
          END_CASE(OP)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_SET_CASE_STORE_RVAL</name><parameter_list>(<param><type><name>OP</name></type></param>,<param><type><name>spdec</name></type></param>)</parameter_list></cpp:macro>                                     \
            <cpp:value>SKIP_POP_AFTER_SET(OP##_LENGTH, spdec);                           \
            rval = FETCH_OPND(-1);                                            \
            regs.sp -= (spdec) - 1;                                           \
            STORE_OPND(-1, rval);                                             \
          END_CASE(OP)</cpp:value></cpp:define>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_SETCONST</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>LOAD_ATOM</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name><name>fp</name>-&gt;<name>varobj</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>defineProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rval</name></expr></argument>,
                             <argument><expr><name>JS_PropertyStub</name></expr></argument>, <argument><expr><name>JS_PropertyStub</name></expr></argument>,
                             <argument><expr><name>JSPROP_ENUMERATE</name> | <name>JSPROP_PERMANENT</name> | <name>JSPROP_READONLY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <goto>goto <name>error</name>;</goto>
    }</block></then></if>
<expr_stmt><expr><call><name>END_SET_CASE</name><argument_list>(<argument><expr><name>JSOP_SETCONST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_DESTRUCTURING</name></expr></cpp:if>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ENUMCONSTELEM</argument>)</argument_list></macro>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FETCH_OBJECT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FETCH_ELEMENT_ID</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>defineProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>,
                             <argument><expr><name>JS_PropertyStub</name></expr></argument>, <argument><expr><name>JS_PropertyStub</name></expr></argument>,
                             <argument><expr><name>JSPROP_ENUMERATE</name> | <name>JSPROP_PERMANENT</name> | <name>JSPROP_READONLY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <goto>goto <name>error</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name> -= 3</expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_ENUMCONSTELEM</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_BINDNAME</argument>)</argument_list></macro>
    <do>do <block>{
        <decl_stmt><decl><type><name>PropertyCacheEntry</name> *</type><name>entry</name></decl>;</decl_stmt>

        <comment type="block">/*
         * We can skip the property lookup for the global object. If the
         * property does not exist anywhere on the scope chain, JSOP_SETNAME
         * adds the property to the global.
         *
         * As a consequence of this optimization for the global object we run
         * its JSRESOLVE_ASSIGNING-tolerant resolve hooks only in JSOP_SETNAME,
         * after the interpreter evaluates the right- hand-side of the
         * assignment, and not here.
         *
         * This should be transparent to the hooks because the script, instead
         * of name = rhs, could have used global.name = rhs given a global
         * object reference, which also calls the hooks only after evaluating
         * the rhs. We desire such resolve hook equivalence between the two
         * forms.
         */</comment>
        <expr_stmt><expr><name>obj</name> = <name><name>fp</name>-&gt;<name>scopeChain</name></name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>getParent</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <break>break;</break></then></if>

        <expr_stmt><expr><call><name>JS_PROPERTY_CACHE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call>.<call><name>test</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ASSERT_VALID_PROPERTY_CACHE_HIT</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>

        <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>obj</name> = <call><name>js_FindIdentifierBase</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>fp</name>-&gt;<name>scopeChain</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block> while <condition>(<expr>0</expr>)</condition>;</do>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_BINDNAME</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_IMACOP</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JS_UPTRDIFF</name><argument_list>(<argument><expr><name><name>fp</name>-&gt;<name>imacpc</name></name></expr></argument>, <argument><expr><name><name>script</name>-&gt;<name>code</name></name></expr></argument>)</argument_list></call> &lt; <name><name>script</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>op</name> = <call><name>JSOp</name><argument_list>(<argument><expr>*<name><name>fp</name>-&gt;<name>imacpc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DO_OP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITWISE_OP</name><parameter_list>(<param><type><name>OP</name></type></param>)</parameter_list></cpp:macro>                                                        \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        FETCH_INT(cx, -2, i);                                                 \
        FETCH_INT(cx, -1, j);                                                 \
        i = i OP j;                                                           \
        regs.sp--;                                                            \
        STORE_INT(cx, -1, i);                                                 \
    JS_END_MACRO</cpp:value></cpp:define>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_BITOR</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>BITWISE_OP</name><argument_list>(<argument><expr>|</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_BITOR</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_BITXOR</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>BITWISE_OP</name><argument_list>(<argument><expr>^</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_BITXOR</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_BITAND</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>BITWISE_OP</name><argument_list>(<argument><expr>&amp;</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_BITAND</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELATIONAL_OP</name><parameter_list>(<param><type><name>OP</name></type></param>)</parameter_list></cpp:macro>                                                     \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        rval = FETCH_OPND(-1);                                                \
        lval = FETCH_OPND(-2);                                                \
        <comment type="block">/* Optimize for two int-tagged operands (typical loop control). */</comment>    \
        if ((lval &amp; rval) &amp; JSVAL_INT) {                                      \
            cond = JSVAL_TO_INT(lval) OP JSVAL_TO_INT(rval);                  \
        } else {                                                              \
            if (!JSVAL_IS_PRIMITIVE(lval))                                    \
                DEFAULT_VALUE(cx, -2, JSTYPE_NUMBER, lval);                   \
            if (!JSVAL_IS_PRIMITIVE(rval))                                    \
                DEFAULT_VALUE(cx, -1, JSTYPE_NUMBER, rval);                   \
            if (JSVAL_IS_STRING(lval) &amp;&amp; JSVAL_IS_STRING(rval)) {             \
                str  = JSVAL_TO_STRING(lval);                                 \
                str2 = JSVAL_TO_STRING(rval);                                 \
                cond = js_CompareStrings(str, str2) OP 0;                     \
            } else {                                                          \
                VALUE_TO_NUMBER(cx, lval, d);                                 \
                VALUE_TO_NUMBER(cx, rval, d2);                                \
                cond = JSDOUBLE_COMPARE(d, OP, d2, JS_FALSE);                 \
            }                                                                 \
        }                                                                     \
        TRY_BRANCH_AFTER_COND(cond, 2);                                       \
        regs.sp--;                                                            \
        STORE_OPND(-1, BOOLEAN_TO_JSVAL(cond));                               \
    JS_END_MACRO</cpp:value></cpp:define>

<comment type="block">/*
 * NB: These macros can't use JS_BEGIN_MACRO/JS_END_MACRO around their bodies
 * because they begin if/else chains, so callers must not put semicolons after
 * the call expressions!
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_XML_SUPPORT</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_EQUALITY_OP</name><parameter_list>(<param><type><name>OP</name></type></param>)</parameter_list></cpp:macro>                                                   \
    <cpp:value>if ((ltmp == JSVAL_OBJECT &amp;&amp;                                              \
         (obj2 = JSVAL_TO_OBJECT(lval)) &amp;&amp;                                    \
         OBJECT_IS_XML(cx, obj2)) ||                                          \
        (rtmp == JSVAL_OBJECT &amp;&amp;                                              \
         (obj2 = JSVAL_TO_OBJECT(rval)) &amp;&amp;                                    \
         OBJECT_IS_XML(cx, obj2))) {                                          \
        if (JSVAL_IS_OBJECT(rval) &amp;&amp; obj2 == JSVAL_TO_OBJECT(rval))           \
            rval = lval;                                                      \
        if (!js_TestXMLEquality(cx, obj2, rval, &amp;cond))                       \
            goto error;                                                       \
        cond = cond OP JS_TRUE;                                               \
    } else</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENDED_EQUALITY_OP</name><parameter_list>(<param><type><name>OP</name></type></param>)</parameter_list></cpp:macro>                                              \
    <cpp:value>if (ltmp == JSVAL_OBJECT &amp;&amp;                                               \
        (obj2 = JSVAL_TO_OBJECT(lval)) &amp;&amp;                                     \
        ((clasp = obj2-&gt;getClass())-&gt;flags &amp; JSCLASS_IS_EXTENDED)) {          \
        JSExtendedClass *xclasp;                                              \
                                                                              \
        xclasp = (JSExtendedClass *) clasp;                                   \
        if (!xclasp-&gt;equality(cx, obj2, rval, &amp;cond))                         \
            goto error;                                                       \
        cond = cond OP JS_TRUE;                                               \
    } else</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_EQUALITY_OP</name><parameter_list>(<param><type><name>OP</name></type></param>)</parameter_list></cpp:macro></cpp:define>             <comment type="block">/* nothing */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENDED_EQUALITY_OP</name><parameter_list>(<param><type><name>OP</name></type></param>)</parameter_list></cpp:macro></cpp:define>        <comment type="block">/* nothing */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EQUALITY_OP</name><parameter_list>(<param><type><name>OP</name></type></param>, <param><type><name>IFNAN</name></type></param>)</parameter_list></cpp:macro>                                                \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        rval = FETCH_OPND(-1);                                                \
        lval = FETCH_OPND(-2);                                                \
        ltmp = JSVAL_TAG(lval);                                               \
        rtmp = JSVAL_TAG(rval);                                               \
        XML_EQUALITY_OP(OP)                                                   \
        if (ltmp == rtmp) {                                                   \
            if (ltmp == JSVAL_STRING) {                                       \
                str  = JSVAL_TO_STRING(lval);                                 \
                str2 = JSVAL_TO_STRING(rval);                                 \
                cond = js_EqualStrings(str, str2) OP JS_TRUE;                 \
            } else if (ltmp == JSVAL_DOUBLE) {                                \
                d  = *JSVAL_TO_DOUBLE(lval);                                  \
                d2 = *JSVAL_TO_DOUBLE(rval);                                  \
                cond = JSDOUBLE_COMPARE(d, OP, d2, IFNAN);                    \
            } else {                                                          \
                EXTENDED_EQUALITY_OP(OP)                                      \
                <comment type="block">/* Handle all undefined (=&gt;NaN) and int combinations. */</comment>      \
                cond = lval OP rval;                                          \
            }                                                                 \
        } else {                                                              \
            if (JSVAL_IS_NULL(lval) || JSVAL_IS_VOID(lval)) {                 \
                cond = (JSVAL_IS_NULL(rval) || JSVAL_IS_VOID(rval)) OP 1;     \
            } else if (JSVAL_IS_NULL(rval) || JSVAL_IS_VOID(rval)) {          \
                cond = 1 OP 0;                                                \
            } else {                                                          \
                if (ltmp == JSVAL_OBJECT) {                                   \
                    DEFAULT_VALUE(cx, -2, JSTYPE_VOID, lval);                 \
                    ltmp = JSVAL_TAG(lval);                                   \
                } else if (rtmp == JSVAL_OBJECT) {                            \
                    DEFAULT_VALUE(cx, -1, JSTYPE_VOID, rval);                 \
                    rtmp = JSVAL_TAG(rval);                                   \
                }                                                             \
                if (ltmp == JSVAL_STRING &amp;&amp; rtmp == JSVAL_STRING) {           \
                    str  = JSVAL_TO_STRING(lval);                             \
                    str2 = JSVAL_TO_STRING(rval);                             \
                    cond = js_EqualStrings(str, str2) OP JS_TRUE;             \
                } else {                                                      \
                    VALUE_TO_NUMBER(cx, lval, d);                             \
                    VALUE_TO_NUMBER(cx, rval, d2);                            \
                    cond = JSDOUBLE_COMPARE(d, OP, d2, IFNAN);                \
                }                                                             \
            }                                                                 \
        }                                                                     \
        TRY_BRANCH_AFTER_COND(cond, 2);                                       \
        regs.sp--;                                                            \
        STORE_OPND(-1, BOOLEAN_TO_JSVAL(cond));                               \
    JS_END_MACRO</cpp:value></cpp:define>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_EQ</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>EQUALITY_OP</name><argument_list>(<argument><expr>==</expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_EQ</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_NE</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>EQUALITY_OP</name><argument_list>(<argument><expr>!=</expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_NE</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRICT_EQUALITY_OP</name><parameter_list>(<param><type><name>OP</name></type></param>)</parameter_list></cpp:macro>                                                \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        rval = FETCH_OPND(-1);                                                \
        lval = FETCH_OPND(-2);                                                \
        cond = js_StrictlyEqual(cx, lval, rval) OP JS_TRUE;                   \
        regs.sp--;                                                            \
        STORE_OPND(-1, BOOLEAN_TO_JSVAL(cond));                               \
    JS_END_MACRO</cpp:value></cpp:define>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_STRICTEQ</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>STRICT_EQUALITY_OP</name><argument_list>(<argument><expr>==</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_STRICTEQ</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_STRICTNE</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>STRICT_EQUALITY_OP</name><argument_list>(<argument><expr>!=</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_STRICTNE</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_CASE</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>STRICT_EQUALITY_OP</name><argument_list>(<argument><expr>==</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>(<name>void</name>) <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>cond</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>len</name> = <call><name>GET_JUMP_OFFSET</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BRANCH</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_CASE</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_CASEX</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>STRICT_EQUALITY_OP</name><argument_list>(<argument><expr>==</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>(<name>void</name>) <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>cond</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>len</name> = <call><name>GET_JUMPX_OFFSET</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BRANCH</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_CASEX</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_LT</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>RELATIONAL_OP</name><argument_list>(<argument><expr>&lt;</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_LT</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_LE</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>RELATIONAL_OP</name><argument_list>(<argument><expr>&lt;=</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_LE</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GT</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>RELATIONAL_OP</name><argument_list>(<argument><expr>&gt;</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_GT</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GE</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>RELATIONAL_OP</name><argument_list>(<argument><expr>&gt;=</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_GE</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EQUALITY_OP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RELATIONAL_OP</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNED_SHIFT_OP</name><parameter_list>(<param><type><name>OP</name></type></param>)</parameter_list></cpp:macro>                                                   \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        FETCH_INT(cx, -2, i);                                                 \
        FETCH_INT(cx, -1, j);                                                 \
        i = i OP (j &amp; 31);                                                    \
        regs.sp--;                                                            \
        STORE_INT(cx, -1, i);                                                 \
    JS_END_MACRO</cpp:value></cpp:define>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_LSH</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>SIGNED_SHIFT_OP</name><argument_list>(<argument><expr>&lt;&lt;</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_LSH</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_RSH</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>SIGNED_SHIFT_OP</name><argument_list>(<argument><expr>&gt;&gt;</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_RSH</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_URSH</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>u</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>FETCH_UINT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FETCH_INT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>u</name> &gt;&gt;= (<name>j</name> &amp; 31)</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STORE_UINT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_URSH</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BITWISE_OP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIGNED_SHIFT_OP</name></cpp:undef>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ADD</argument>)</argument_list></macro>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_XML_SUPPORT</name></expr></cpp:if>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call> &amp;&amp;
        (<name>obj2</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call>, <call><name>OBJECT_IS_XML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>)</argument_list></call>) &amp;&amp;
        <call><name>VALUE_IS_XML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name>js_ConcatenateXML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
        <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{
        <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>DEFAULT_VALUE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr><name>JSTYPE_VOID</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>DEFAULT_VALUE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>JSTYPE_VOID</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr>(<name>cond</name> = <call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call>) || <call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>cond</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>str</name> = <call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>str2</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>str2</name></expr>)</condition><then>
                    <goto>goto <name>error</name>;</goto></then></if>
                <expr_stmt><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>str2</name> = <call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>str</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
                    <goto>goto <name>error</name>;</goto></then></if>
                <expr_stmt><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-2</expr>]</index></name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>str</name> = <call><name>js_ConcatStrings</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
                <goto>goto <name>error</name>;</goto></then></if>
            <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>VALUE_TO_NUMBER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>VALUE_TO_NUMBER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>d</name> += <name>d2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>STORE_NUMBER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_ADD</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_OBJTOSTR</argument>)</argument_list></macro>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>str</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
        <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_OBJTOSTR</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_CONCATN</argument>)</argument_list></macro>
<block>{
    <function_decl><type><name>JSCharBuffer</name></type> <name>buf</name><parameter_list>(<param><decl><type><name>cx</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>argc</name> = <call><name>GET_ARGC</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>vp</name> = <name><name>regs</name>.<name>sp</name></name> - <name>argc</name></expr>;</init> <condition><expr><name>vp</name> &lt; <name><name>regs</name>.<name>sp</name></name></expr>;</condition> <incr><expr><name>vp</name>++</expr></incr>) <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr>*<name>vp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>js_ValueToCharBuffer</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>*<name>vp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block></for>
    <expr_stmt><expr><name>str</name> = <call><name>js_NewStringFromCharBuffer</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name> -= <name>argc</name> - 1</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_CONCATN</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINARY_OP</name><parameter_list>(<param><type><name>OP</name></type></param>)</parameter_list></cpp:macro>                                                         \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        FETCH_NUMBER(cx, -2, d);                                              \
        FETCH_NUMBER(cx, -1, d2);                                             \
        d = d OP d2;                                                          \
        regs.sp--;                                                            \
        STORE_NUMBER(cx, -1, d);                                              \
    JS_END_MACRO</cpp:value></cpp:define>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_SUB</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>BINARY_OP</name><argument_list>(<argument><expr>-</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_SUB</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_MUL</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>BINARY_OP</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_MUL</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DIV</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>FETCH_NUMBER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FETCH_NUMBER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>d2</name> == 0</expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_WIN</name></cpp:ifdef>
        <comment type="block">/* XXX MSVC miscompiles such that (NaN == 0) */</comment>
        <if>if <condition>(<expr><call><name>JSDOUBLE_IS_NaN</name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>rval</name> = <name><name>rt</name>-&gt;<name>NaNValue</name></name></expr>;</expr_stmt></then>
        <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <if>if <condition>(<expr><name>d</name> == 0 || <call><name>JSDOUBLE_IS_NaN</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>rval</name> = <name><name>rt</name>-&gt;<name>NaNValue</name></name></expr>;</expr_stmt></then>
        <else>else <if>if <condition>(<expr><call><name>JSDOUBLE_IS_NEG</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> != <call><name>JSDOUBLE_IS_NEG</name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>rval</name> = <name><name>rt</name>-&gt;<name>negativeInfinityValue</name></name></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name>rval</name> = <name><name>rt</name>-&gt;<name>positiveInfinityValue</name></name></expr>;</expr_stmt></else></if></else></if></else></if>
        <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>d</name> /= <name>d2</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>STORE_NUMBER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_DIV</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_MOD</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>FETCH_NUMBER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FETCH_NUMBER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>d2</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><name><name>rt</name>-&gt;<name>NaNValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>d</name> = <call><name>js_fmod</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>STORE_NUMBER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_MOD</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_NOT</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>POP_BOOLEAN</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><call><name>BOOLEAN_TO_JSVAL</name><argument_list>(<argument><expr>!<name>cond</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_NOT</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_BITNOT</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>FETCH_INT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> = ~<name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STORE_INT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_BITNOT</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_NEG</argument>)</argument_list></macro>
    <comment type="block">/*
     * When the operand is int jsval, INT_FITS_IN_JSVAL(i) implies
     * INT_FITS_IN_JSVAL(-i) unless i is 0 or JSVAL_INT_MIN when the
     * results, -0.0 or JSVAL_INT_MAX + 1, are jsdouble values.
     */</comment>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_INT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call> &amp;&amp;
        <name>rval</name> != <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name>JSVAL_INT_MIN</name></expr></argument>)</argument_list></call> &amp;&amp;
        (<name>i</name> = <call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_STATIC_ASSERT</name><argument_list>(<argument><expr>!<call><name>INT_FITS_IN_JSVAL</name><argument_list>(<argument><expr>-<name>JSVAL_INT_MIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> = -<name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>INT_FITS_IN_JSVAL</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr>!<call><name>ValueToNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
        <expr_stmt><expr><name>d</name> = -<name>d</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>js_NewNumberInRootedValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>&amp;<name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block></else></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_NEG</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_POS</argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>ValueToNumberValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><name>rval</name> = <name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr>;</expr_stmt>
}</block>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_POS</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DELNAME</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>LOAD_ATOM</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>js_FindProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>obj</name></expr></argument>, <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>

    <comment type="block">/* ECMA says to return true if name is undefined or inherited. */</comment>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>JSVAL_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>prop</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>obj2</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>deleteProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_DELNAME</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DELPROP</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>LOAD_ATOM</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PROPERTY_OP</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name><name>obj</name>-&gt;<name>deleteProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_DELPROP</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DELELEM</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>ELEMENT_OP</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name><name>obj</name>-&gt;<name>deleteProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_DELELEM</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_TYPEOFEXPR</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_TYPEOF</argument>)</argument_list></macro>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>type</name> = <call><name>JS_TypeOfValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>atom</name> = <name><name>rt</name>-&gt;<name>atomState</name>.<name>typeAtoms</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>ATOM_KEY</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_TYPEOF</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_VOID</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_VOID</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_INCELEM</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DECELEM</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ELEMINC</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ELEMDEC</argument>)</argument_list></macro>
    <comment type="block">/*
     * Delay fetching of id until we have the object to ensure the proper
     * evaluation order. See bug 372331.
     */</comment>
    <expr_stmt><expr><name>id</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> = -2</expr>;</expr_stmt>
    <goto>goto <name>fetch_incop_obj</name>;</goto>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_INCPROP</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DECPROP</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_PROPINC</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_PROPDEC</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>LOAD_ATOM</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> = -1</expr>;</expr_stmt>

  <label><name>fetch_incop_obj</name>:</label>
    <expr_stmt><expr><call><name>FETCH_OBJECT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>id</name> == 0</expr>)</condition><then>
        <expr_stmt><expr><call><name>FETCH_ELEMENT_ID</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <goto>goto <name>do_incop</name>;</goto>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_INCNAME</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DECNAME</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_NAMEINC</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_NAMEDEC</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>PropertyCacheEntry</name> *</type><name>entry</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>obj</name> = <name><name>fp</name>-&gt;<name>scopeChain</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>JS_PROPERTY_CACHE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call>.<call><name>test</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ASSERT_VALID_PROPERTY_CACHE_HIT</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>obj</name> == <name>obj2</name> &amp;&amp; <call><name><name>entry</name>-&gt;<name>vword</name>.<name>isSlot</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>slot</name> = <call><name><name>entry</name>-&gt;<name>vword</name>.<name>toSlot</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <call><name><name>obj</name>-&gt;<name>scope</name></name><argument_list>()</argument_list></call>-&gt;<name>freeslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rval</name> = <call><name><name>obj</name>-&gt;<name>lockedGetSlot</name></name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>JS_LIKELY</name><argument_list>(<argument><expr><call><name>CAN_DO_FAST_INC_DEC</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>rtmp</name> = <name>rval</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>rval</name> += (<name><name>js_CodeSpec</name><index>[<expr><name>op</name></expr>]</index></name>.<name>format</name> &amp; <name>JOF_INC</name>) ? 2 : -2</expr>;</expr_stmt>
                <if>if <condition>(<expr>!(<name><name>js_CodeSpec</name><index>[<expr><name>op</name></expr>]</index></name>.<name>format</name> &amp; <name>JOF_POST</name>)</expr>)</condition><then>
                    <expr_stmt><expr><name>rtmp</name> = <name>rval</name></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><call><name><name>obj</name>-&gt;<name>lockedSetSlot</name></name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>len</name> = <name>JSOP_INCNAME_LENGTH</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>DO_NEXT_OP</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name>LOAD_ATOM</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>js_FindPropertyHelper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>&amp;<name>obj</name></expr></argument>, <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <if>if <condition>(<expr>!<name>prop</name></expr>)</condition><then>
        <goto>goto <name>atom_not_defined</name>;</goto></then></if>
    <expr_stmt><expr><call><name><name>obj2</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<label><name>do_incop</name>:</label>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>JSCodeSpec</name> *</type><name>cs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsval</name></type> <name>v</name></decl>;</decl_stmt>

    <comment type="block">/*
     * We need a root to store the value to leave on the stack until
     * we have done with obj-&gt;setProperty.
     */</comment>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>JSVAL_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>getProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>

    <expr_stmt><expr><name>cs</name> = &amp;<name><name>js_CodeSpec</name><index>[<expr><name>op</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>cs</name>-&gt;<name>ndefs</name></name> == 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>(<name><name>cs</name>-&gt;<name>format</name></name> &amp; <name>JOF_TMPSLOT_MASK</name>) == <name>JOF_TMPSLOT2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v</name> = <name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JS_LIKELY</name><argument_list>(<argument><expr><call><name>CAN_DO_FAST_INC_DEC</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>jsval</name></type> <name>incr</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>incr</name> = (<name><name>cs</name>-&gt;<name>format</name></name> &amp; <name>JOF_INC</name>) ? 2 : -2</expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>cs</name>-&gt;<name>format</name></name> &amp; <name>JOF_POST</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name> = <name>v</name> + <name>incr</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>v</name> += <name>incr</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name> = <name>v</name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name><name>fp</name>-&gt;<name>flags</name></name> |= <name>JSFRAME_ASSIGNING</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ok</name> = <call><name><name>obj</name>-&gt;<name>setProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>fp</name>-&gt;<name>flags</name></name> &amp;= ~<name>JSFRAME_ASSIGNING</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>

        <comment type="block">/*
         * We must set regs.sp[-1] to v for both post and pre increments
         * as the setter overwrites regs.sp[-1].
         */</comment>
        <expr_stmt><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name> = <name>v</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <comment type="block">/* We need an extra root for the result. */</comment>
        <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>JSVAL_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>js_DoIncDec</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cs</name></expr></argument>, <argument><expr>&amp;<name><name>regs</name>.<name>sp</name><index>[<expr>-2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
        <expr_stmt><expr><name><name>fp</name>-&gt;<name>flags</name></name> |= <name>JSFRAME_ASSIGNING</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ok</name> = <call><name><name>obj</name>-&gt;<name>setProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>fp</name>-&gt;<name>flags</name></name> &amp;= ~<name>JSFRAME_ASSIGNING</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
        <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name><name>cs</name>-&gt;<name>nuses</name></name> == 0</expr>)</condition><then> <block>{
        <comment type="block">/* regs.sp[-1] already contains the result of name increment. */</comment>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>rtmp</name> = <name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name> -= <name><name>cs</name>-&gt;<name>nuses</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name> = <name>rtmp</name></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name>len</name> = <name><name>cs</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DO_NEXT_OP</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>incr</name></decl>, <decl><type ref="prev"/><name>incr2</name></decl>;</decl_stmt>

    <comment type="block">/* Position cases so the most frequent i++ does not need a jump. */</comment>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DECARG</argument>)</argument_list></macro>
    <expr_stmt><expr><name>incr</name> = -2</expr>;</expr_stmt> <expr_stmt><expr><name>incr2</name> = -2</expr>;</expr_stmt> <goto>goto <name>do_arg_incop</name>;</goto>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ARGDEC</argument>)</argument_list></macro>
    <expr_stmt><expr><name>incr</name> = -2</expr>;</expr_stmt> <expr_stmt><expr><name>incr2</name> =  0</expr>;</expr_stmt> <goto>goto <name>do_arg_incop</name>;</goto>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_INCARG</argument>)</argument_list></macro>
    <expr_stmt><expr><name>incr</name> =  2</expr>;</expr_stmt> <expr_stmt><expr><name>incr2</name> =  2</expr>;</expr_stmt> <goto>goto <name>do_arg_incop</name>;</goto>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ARGINC</argument>)</argument_list></macro>
    <expr_stmt><expr><name>incr</name> =  2</expr>;</expr_stmt> <expr_stmt><expr><name>incr2</name> =  0</expr>;</expr_stmt>

  <label><name>do_arg_incop</name>:</label>
    <expr_stmt><expr><name>slot</name> = <call><name>GET_ARGNO</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <name><name>fp</name>-&gt;<name>fun</name>-&gt;<name>nargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER_SLOT_OP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vp</name> = <name><name>fp</name>-&gt;<name>argv</name></name> + <name>slot</name></expr>;</expr_stmt>
    <goto>goto <name>do_int_fast_incop</name>;</goto>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DECLOCAL</argument>)</argument_list></macro>
    <expr_stmt><expr><name>incr</name> = -2</expr>;</expr_stmt> <expr_stmt><expr><name>incr2</name> = -2</expr>;</expr_stmt> <goto>goto <name>do_local_incop</name>;</goto>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_LOCALDEC</argument>)</argument_list></macro>
    <expr_stmt><expr><name>incr</name> = -2</expr>;</expr_stmt> <expr_stmt><expr><name>incr2</name> =  0</expr>;</expr_stmt> <goto>goto <name>do_local_incop</name>;</goto>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_INCLOCAL</argument>)</argument_list></macro>
    <expr_stmt><expr><name>incr</name> =  2</expr>;</expr_stmt> <expr_stmt><expr><name>incr2</name> =  2</expr>;</expr_stmt> <goto>goto <name>do_local_incop</name>;</goto>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_LOCALINC</argument>)</argument_list></macro>
    <expr_stmt><expr><name>incr</name> =  2</expr>;</expr_stmt> <expr_stmt><expr><name>incr2</name> =  0</expr>;</expr_stmt>

  <comment type="block">/*
   * do_local_incop comes right before do_int_fast_incop as we want to
   * avoid an extra jump for variable cases as local++ is more frequent
   * than arg++.
   */</comment>
  <label><name>do_local_incop</name>:</label>
    <expr_stmt><expr><name>slot</name> = <call><name>GET_SLOTNO</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <name><name>fp</name>-&gt;<name>script</name>-&gt;<name>nslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vp</name> = <call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call> + <name>slot</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER_SLOT_OP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vp</name> = <call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call> + <name>slot</name></expr>;</expr_stmt>

  <label><name>do_int_fast_incop</name>:</label>
    <expr_stmt><expr><name>rval</name> = *<name>vp</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JS_LIKELY</name><argument_list>(<argument><expr><call><name>CAN_DO_FAST_INC_DEC</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>vp</name> = <name>rval</name> + <name>incr</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>JSOP_INCARG_LENGTH</name> == <name><name>js_CodeSpec</name><index>[<expr><name>op</name></expr>]</index></name>.<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SKIP_POP_AFTER_SET</name><argument_list>(<argument><expr><name>JSOP_INCARG_LENGTH</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name> + <name>incr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>js_DoIncDec</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>js_CodeSpec</name><index>[<expr><name>op</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block></else></if>
    <expr_stmt><expr><name>len</name> = <name>JSOP_INCARG_LENGTH</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>len</name> == <name><name>js_CodeSpec</name><index>[<expr><name>op</name></expr>]</index></name>.<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DO_NEXT_OP</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<comment type="block">/* NB: This macro doesn't use JS_BEGIN_MACRO/JS_END_MACRO around its body. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_GLOBAL_INCREMENT_OP</name><parameter_list>(<param><type><name>SLOWOP</name></type></param>,<param><type><name>INCR</name></type></param>,<param><type><name>INCR2</name></type></param>)</parameter_list></cpp:macro>                           \
    <cpp:value>op2 = SLOWOP;                                                             \
    incr = INCR;                                                              \
    incr2 = INCR2;                                                            \
    goto do_global_incop</cpp:value></cpp:define>

<block>{
    <decl_stmt><decl><type><name>jsval</name></type> <name>incr</name></decl>, <decl><type ref="prev"/><name>incr2</name></decl>;</decl_stmt>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DECGVAR</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>FAST_GLOBAL_INCREMENT_OP</name><argument_list>(<argument><expr><name>JSOP_DECNAME</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GVARDEC</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>FAST_GLOBAL_INCREMENT_OP</name><argument_list>(<argument><expr><name>JSOP_NAMEDEC</name></expr></argument>, <argument><expr>-2</expr></argument>,  <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_INCGVAR</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>FAST_GLOBAL_INCREMENT_OP</name><argument_list>(<argument><expr><name>JSOP_INCNAME</name></expr></argument>,  <argument><expr>2</expr></argument>,  <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GVARINC</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>FAST_GLOBAL_INCREMENT_OP</name><argument_list>(<argument><expr><name>JSOP_NAMEINC</name></expr></argument>,  <argument><expr>2</expr></argument>,  <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FAST_GLOBAL_INCREMENT_OP</name></cpp:undef>

  <label><name>do_global_incop</name>:</label>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>(<name><name>js_CodeSpec</name><index>[<expr><name>op</name></expr>]</index></name>.<name>format</name> &amp; <name>JOF_TMPSLOT_MASK</name>) ==
              <name>JOF_TMPSLOT2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>slot</name> = <call><name>GET_SLOTNO</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <call><name>GlobalVarCount</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER_SLOT_OP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lval</name> = <call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call><index>[<expr><name>slot</name></expr>]</index></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>op</name> = <name>op2</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>DO_OP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>slot</name> = <call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name><name>fp</name>-&gt;<name>varobj</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call> == <call><name><name>cx</name>-&gt;<name>activeCallStack</name></name><argument_list>()</argument_list></call>-&gt;<call><name>getInitialVarObj</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name><name>cx</name>-&gt;<name>activeCallStack</name></name><argument_list>()</argument_list></call>-&gt;<call><name>getInitialVarObj</name><argument_list>()</argument_list></call>-&gt;<call><name>getSlotMT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JS_LIKELY</name><argument_list>(<argument><expr><call><name>CAN_DO_FAST_INC_DEC</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name> + <name>incr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rval</name> += <name>incr</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>JSVAL_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Extra root */</comment>
        <if>if <condition>(<expr>!<call><name>js_DoIncDec</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>js_CodeSpec</name><index>[<expr><name>op</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>regs</name>.<name>sp</name><index>[<expr>-2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
        <expr_stmt><expr><name>rval</name> = <name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr>--<name><name>regs</name>.<name>sp</name></name></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name><name>fp</name>-&gt;<name>varobj</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call>-&gt;<call><name>setSlotMT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> = <name>JSOP_INCGVAR_LENGTH</name></expr>;</expr_stmt>  <comment type="block">/* all gvar incops are same length */</comment>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>len</name> == <name><name>js_CodeSpec</name><index>[<expr><name>op</name></expr>]</index></name>.<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DO_NEXT_OP</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPUTE_THIS</name><parameter_list>(<param><type><name>cx</name></type></param>, <param><type><name>fp</name></type></param>, <param><type><name>obj</name></type></param>)</parameter_list></cpp:macro>                                             \
    <cpp:value>JS_BEGIN_MACRO                                                            \
        if (!(obj = (fp)-&gt;getThisObject(cx)))                                 \
            goto error;                                                       \
    JS_END_MACRO</cpp:value></cpp:define>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_THIS</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>COMPUTE_THIS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_THIS</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_UNBRANDTHIS</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>COMPUTE_THIS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>unbrand</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_UNBRANDTHIS</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GETTHISPROP</argument>)</argument_list></macro>
    <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>COMPUTE_THIS</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>JSVAL_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>do_getprop_with_obj</name>;</goto>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPUTE_THIS</name></cpp:undef>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GETARGPROP</argument>)</argument_list></macro>
    <expr_stmt><expr><name>i</name> = <name>ARGNO_LEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>slot</name> = <call><name>GET_ARGNO</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <name><name>fp</name>-&gt;<name>fun</name>-&gt;<name>nargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name><name>fp</name>-&gt;<name>argv</name><index>[<expr><name>slot</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>do_getprop_body</name>;</goto>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GETLOCALPROP</argument>)</argument_list></macro>
    <expr_stmt><expr><name>i</name> = <name>SLOTNO_LEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>slot</name> = <call><name>GET_SLOTNO</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <name><name>script</name>-&gt;<name>nslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call><index>[<expr><name>slot</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>do_getprop_body</name>;</goto>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GETPROP</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GETXPROP</argument>)</argument_list></macro>
    <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>

  <label><name>do_getprop_body</name>:</label>
    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <label><name>do_getprop_with_lval</name>:</label>
    <expr_stmt><expr><call><name>VALUE_TO_OBJECT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <label><name>do_getprop_with_obj</name>:</label>
    <do>do <block>{
        <decl_stmt><decl><type><name>JSObject</name> *</type><name>aobj</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PropertyCacheEntry</name> *</type><name>entry</name></decl>;</decl_stmt>

        <comment type="block">/*
         * We do not impose the method read barrier if in an imacro,
         * assuming any property gets it does (e.g., for 'toString'
         * from JSOP_NEW) will not be leaked to the calling script.
         */</comment>
        <expr_stmt><expr><name>aobj</name> = <call><name>js_GetProtoIfDenseArray</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>JS_PROPERTY_CACHE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call>.<call><name>test</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>, <argument><expr><name>aobj</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ASSERT_VALID_PROPERTY_CACHE_HIT</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>aobj</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>entry</name>-&gt;<name>vword</name>.<name>isObject</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>rval</name> = <call><name><name>entry</name>-&gt;<name>vword</name>.<name>toJsval</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>entry</name>-&gt;<name>vword</name>.<name>isSlot</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>slot</name> = <call><name><name>entry</name>-&gt;<name>vword</name>.<name>toSlot</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <call><name><name>obj2</name>-&gt;<name>scope</name></name><argument_list>()</argument_list></call>-&gt;<name>freeslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rval</name> = <call><name><name>obj2</name>-&gt;<name>lockedGetSlot</name></name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name><name>entry</name>-&gt;<name>vword</name>.<name>isSprop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sprop</name> = <call><name><name>entry</name>-&gt;<name>vword</name>.<name>toSprop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>NATIVE_GET</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>sprop</name></expr></argument>,
                           <argument><expr><name><name>fp</name>-&gt;<name>imacpc</name></name> ? <name>JSGET_NO_METHOD_BARRIER</name> : <name>JSGET_METHOD_BARRIER</name></expr></argument>,
                           <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>
            <break>break;</break>
        }</block></then></if>

        <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>JS_LIKELY</name><argument_list>(<argument><expr><name><name>aobj</name>-&gt;<name>map</name>-&gt;<name>ops</name>-&gt;<name>getProperty</name></name> == <name>js_GetProperty</name></expr></argument>)</argument_list></call>
            ? !<call><name>js_GetPropertyHelper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>,
                                    <argument><expr><name><name>fp</name>-&gt;<name>imacpc</name></name>
                                    ? <name>JSGET_CACHE_RESULT</name> | <name>JSGET_NO_METHOD_BARRIER</name>
                                    : <name>JSGET_CACHE_RESULT</name> | <name>JSGET_METHOD_BARRIER</name></expr></argument>,
                                    <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call>
            : !<call><name><name>obj</name>-&gt;<name>getProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <goto>goto <name>error</name>;</goto>
        }</block></then></if>
    }</block> while <condition>(<expr>0</expr>)</condition>;</do>

    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>JSOP_GETPROP_LENGTH</name> + <name>i</name> == <name><name>js_CodeSpec</name><index>[<expr><name>op</name></expr>]</index></name>.<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> = <name>JSOP_GETPROP_LENGTH</name> + <name>i</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>END_VARLEN_CASE</name></type>

<name>BEGIN_CASE</name><argument_list>(<argument><expr><name>JSOP_LENGTH</name></expr></argument>)</argument_list>
    <name>lval</name> <init>= <expr><call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>str</name> = <call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><call><name><name>str</name>-&gt;<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>obj</name>-&gt;<name>isArray</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>jsuint</name></type> <name>length</name> <init>= <expr><call><name><name>obj</name>-&gt;<name>getArrayLength</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>length</name> &lt;= <name>JSVAL_INT_MAX</name></expr>)</condition><then>
                <expr_stmt><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr>!<call><name>js_NewDoubleInRootedValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>jsdouble</name>) <name>length</name></expr></argument>, <argument><expr>&amp;<name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <goto>goto <name>error</name>;</goto></then></if></else></if>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>obj</name>-&gt;<name>isArguments</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name>IsOverriddenArgsLength</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>uint32</name></type> <name>length</name> <init>= <expr><call><name>GetArgsLength</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>INT_FITS_IN_JSVAL</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>i</name> = -2</expr>;</expr_stmt>
            <goto>goto <name>do_getprop_with_lval</name>;</goto>
        }</block></else></if></else></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>i</name> = -2</expr>;</expr_stmt>
        <goto>goto <name>do_getprop_with_lval</name>;</goto>
    }</block></else></if></else></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_LENGTH</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_CALLPROP</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>aobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PropertyCacheEntry</name> *</type><name>entry</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name>JSProtoKey</name></type> <name>protoKey</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>protoKey</name> = <name>JSProto_String</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>JSVAL_IS_NUMBER</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>protoKey</name> = <name>JSProto_Number</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>JSVAL_IS_BOOLEAN</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>protoKey</name> = <name>JSProto_Boolean</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call> || <call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>js_ReportIsNullOrUndefined</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>error</name>;</goto>
        }</block></else></if></else></if></else></if>
        <if>if <condition>(<expr>!<call><name>js_GetClassPrototype</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>protoKey</name></expr></argument>, <argument><expr>&amp;<name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block></else></if>

    <expr_stmt><expr><name>aobj</name> = <call><name>js_GetProtoIfDenseArray</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>JS_PROPERTY_CACHE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call>.<call><name>test</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>, <argument><expr><name>aobj</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ASSERT_VALID_PROPERTY_CACHE_HIT</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>aobj</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>entry</name>-&gt;<name>vword</name>.<name>isObject</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rval</name> = <call><name><name>entry</name>-&gt;<name>vword</name>.<name>toJsval</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>entry</name>-&gt;<name>vword</name>.<name>isSlot</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>slot</name> = <call><name><name>entry</name>-&gt;<name>vword</name>.<name>toSlot</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <call><name><name>obj2</name>-&gt;<name>scope</name></name><argument_list>()</argument_list></call>-&gt;<name>freeslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rval</name> = <call><name><name>obj2</name>-&gt;<name>lockedGetSlot</name></name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name><name>entry</name>-&gt;<name>vword</name>.<name>isSprop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>sprop</name> = <call><name><name>entry</name>-&gt;<name>vword</name>.<name>toSprop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>NATIVE_GET</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>sprop</name></expr></argument>, <argument><expr><name>JSGET_NO_METHOD_BARRIER</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>
        <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>end_callprop</name>;</goto>
    }</block></then></if>

    <comment type="block">/*
     * Cache miss: use the immediate atom that was loaded for us under
     * PropertyCache::test.
     */</comment>
    <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>JSVAL_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name>js_GetMethod</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>,
                          <argument><expr><call><name>JS_LIKELY</name><argument_list>(<argument><expr><name><name>aobj</name>-&gt;<name>map</name>-&gt;<name>ops</name>-&gt;<name>getProperty</name></name> == <name>js_GetProperty</name></expr></argument>)</argument_list></call>
                          ? <name>JSGET_CACHE_RESULT</name> | <name>JSGET_NO_METHOD_BARRIER</name>
                          : <name>JSGET_NO_METHOD_BARRIER</name></expr></argument>,
                          <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <goto>goto <name>error</name>;</goto>
        }</block></then></if>
        <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-2</expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name>-&gt;<name>map</name>-&gt;<name>ops</name>-&gt;<name>getProperty</name></name> == <name>js_GetProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>js_GetPropertyHelper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>,
                                  <argument><expr><name>JSGET_CACHE_RESULT</name> | <name>JSGET_NO_METHOD_BARRIER</name></expr></argument>,
                                  <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <goto>goto <name>error</name>;</goto>
        }</block></then></if>
        <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-2</expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <label><name>end_callprop</name>:</label>
    <comment type="block">/* Wrap primitive lval in object clothing if necessary. */</comment>
    <if>if <condition>(<expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* FIXME: https://bugzilla.mozilla.org/show_bug.cgi?id=412571 */</comment>
        <if>if <condition>(<expr>!<call><name>VALUE_IS_FUNCTION</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call> ||
            (<name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call>,
             <name>fun</name> = <call><name>GET_FUNCTION_PRIVATE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call>,
             !<call><name>PRIMITIVE_THIS_TEST</name><argument_list>(<argument><expr><name>fun</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name>js_PrimitiveToObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <goto>goto <name>error</name>;</goto></then></if>
        }</block></then></if>
    }</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_NO_SUCH_METHOD</name></expr></cpp:if>
    <if>if <condition>(<expr><call><name>JS_UNLIKELY</name><argument_list>(<argument><expr><call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LOAD_ATOM</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-2</expr>]</index></name> = <call><name>ATOM_KEY</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>js_OnUnknownMethod</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>sp</name></name> - 2</expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_CALLPROP</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_UNBRAND</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> - <call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call> &gt;= 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>unbrand</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_UNBRAND</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_SETNAME</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_SETPROP</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_SETMETHOD</argument>)</argument_list></macro>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT_IF</name><argument_list>(<argument><expr><name>op</name> == <name>JSOP_SETMETHOD</name></expr></argument>, <argument><expr><call><name>VALUE_IS_FUNCTION</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT_IF</name><argument_list>(<argument><expr><name>op</name> == <name>JSOP_SETNAME</name></expr></argument>, <argument><expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VALUE_TO_OBJECT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <do>do <block>{
        <decl_stmt><decl><type><name>PropertyCache</name> *</type><name>cache</name> <init>= <expr>&amp;<call><name>JS_PROPERTY_CACHE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PropertyCacheEntry</name> *</type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>atom</name> = <name>NULL</name></expr>;</expr_stmt>

        <comment type="block">/*
         * Probe the property cache, specializing for two important
         * set-property cases. First:
         *
         *   function f(a, b, c) {
         *     var o = {p:a, q:b, r:c};
         *     return o;
         *   }
         *
         * or similar real-world cases, which evolve a newborn native
         * object predicatably through some bounded number of property
         * additions. And second:
         *
         *   o.p = x;
         *
         * in a frequently executed method or loop body, where p will
         * (possibly after the first iteration) always exist in native
         * object o.
         */</comment>
        <if>if <condition>(<expr><call><name><name>cache</name>-&gt;<name>testForSet</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>atom</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="block">/*
             * Fast property cache hit, only partially confirmed by
             * testForSet. We know that the entry applies to regs.pc and
             * that obj's shape matches.
             *
             * The entry predicts either a new property to be added
             * directly to obj by this set, or on an existing "own"
             * property, or on a prototype property that has a setter.
             */</comment>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name><name>entry</name>-&gt;<name>vword</name>.<name>isSprop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>sprop</name> = <call><name><name>entry</name>-&gt;<name>vword</name>.<name>toSprop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name><name>sprop</name>-&gt;<name>writable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_ASSERT_IF</name><argument_list>(<argument><expr><call><name><name>sprop</name>-&gt;<name>hasSlot</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name>-&gt;<name>vcapTag</name></name><argument_list>()</argument_list></call> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>JSScope</name> *</type><name>scope</name> <init>= <expr><call><name><name>obj</name>-&gt;<name>scope</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name><name>scope</name>-&gt;<name>sealed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/*
             * Fastest path: check whether the cached sprop is already
             * in scope and call NATIVE_SET and break to get out of the
             * do-while(0). But we can call NATIVE_SET only if obj owns
             * scope or sprop is shared.
             */</comment>
            <decl_stmt><decl><type><name>bool</name></type> <name>checkForAdd</name></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>sprop</name>-&gt;<name>hasSlot</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>entry</name>-&gt;<name>vcapTag</name></name><argument_list>()</argument_list></call> == 0 ||
                    ((<name>obj2</name> = <call><name><name>obj</name>-&gt;<name>getProto</name></name><argument_list>()</argument_list></call>) &amp;&amp;
                     <call><name><name>obj2</name>-&gt;<name>isNative</name></name><argument_list>()</argument_list></call> &amp;&amp;
                     <call><name><name>obj2</name>-&gt;<name>shape</name></name><argument_list>()</argument_list></call> == <call><name><name>entry</name>-&gt;<name>vshape</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
                    <goto>goto <name>fast_set_propcache_hit</name>;</goto>
                }</block></then></if>

                <comment type="block">/* The cache entry doesn't apply. vshape mismatch. */</comment>
                <expr_stmt><expr><name>checkForAdd</name> = false</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>scope</name>-&gt;<name>isSharedEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>sprop</name> == <call><name><name>scope</name>-&gt;<name>lastProperty</name></name><argument_list>()</argument_list></call> || <call><name><name>scope</name>-&gt;<name>hasProperty</name></name><argument_list>(<argument><expr><name>sprop</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                  <label><name>fast_set_propcache_hit</name>:</label>
                    <expr_stmt><expr><call><name>PCMETER</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>pchits</name></name>++</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>PCMETER</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>setpchits</name></name>++</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>NATIVE_SET</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>sprop</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
                <expr_stmt><expr><name>checkForAdd</name> = <call><name><name>sprop</name>-&gt;<name>hasSlot</name></name><argument_list>()</argument_list></call> &amp;&amp; <name><name>sprop</name>-&gt;<name>parent</name></name> == <call><name><name>scope</name>-&gt;<name>lastProperty</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <comment type="block">/*
                 * We check that cx own obj here and will continue to
                 * own it after js_GetMutableScope returns so we can
                 * continue to skip JS_UNLOCK_OBJ calls.
                 */</comment>
                <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>CX_OWNS_OBJECT_TITLE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>scope</name> = <call><name>js_GetMutableScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>CX_OWNS_OBJECT_TITLE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>scope</name></expr>)</condition><then>
                    <goto>goto <name>error</name>;</goto></then></if>
                <expr_stmt><expr><name>checkForAdd</name> = !<name><name>sprop</name>-&gt;<name>parent</name></name></expr>;</expr_stmt>
            }</block></else></if></else></if>

            <if>if <condition>(<expr><name>checkForAdd</name> &amp;&amp;
                <call><name><name>entry</name>-&gt;<name>vshape</name></name><argument_list>()</argument_list></call> == <name><name>rt</name>-&gt;<name>protoHazardShape</name></name> &amp;&amp;
                <call><name><name>sprop</name>-&gt;<name>hasDefaultSetter</name></name><argument_list>()</argument_list></call> &amp;&amp;
                (<name>slot</name> = <name><name>sprop</name>-&gt;<name>slot</name></name>) == <name><name>scope</name>-&gt;<name>freeslot</name></name></expr>)</condition><then> <block>{
                <comment type="block">/*
                 * Fast path: adding a plain old property that was once
                 * at the frontier of the property tree, whose slot is
                 * next to claim among the allocated slots in obj,
                 * where scope-&gt;table has not been created yet.
                 *
                 * We may want to remove hazard conditions above and
                 * inline compensation code here, depending on
                 * real-world workloads.
                 */</comment>
                <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!(<call><name><name>obj</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call>-&gt;<name>flags</name> &amp;
                            <name>JSCLASS_SHARE_ALL_PROPERTIES</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>PCMETER</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>pchits</name></name>++</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>PCMETER</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>addpchits</name></name>++</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/*
                 * Beware classes such as Function that use the
                 * reserveSlots hook to allocate a number of reserved
                 * slots that may vary with obj.
                 */</comment>
                <if>if <condition>(<expr><name>slot</name> &lt; <call><name><name>obj</name>-&gt;<name>numSlots</name></name><argument_list>()</argument_list></call> &amp;&amp;
                    !<call><name><name>obj</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call>-&gt;<name>reserveSlots</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr>++<name><name>scope</name>-&gt;<name>freeslot</name></name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <if>if <condition>(<expr>!<call><name>js_AllocSlot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name>slot</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <goto>goto <name>error</name>;</goto></then></if>
                }</block></else></if>

                <comment type="block">/*
                 * If this obj's number of reserved slots differed, or
                 * if something created a hash table for scope, we must
                 * pay the price of JSScope::putProperty.
                 *
                 * (A reserveSlots hook can cause scopes of the same
                 * shape to have different freeslot values. This is
                 * what causes the slot != sprop-&gt;slot case. See
                 * js_GetMutableScope.)
                 */</comment>
                <if>if <condition>(<expr><name>slot</name> != <name><name>sprop</name>-&gt;<name>slot</name></name> || <name><name>scope</name>-&gt;<name>table</name></name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>JSScopeProperty</name> *</type><name>sprop2</name> <init>=
                        <expr><call><name><name>scope</name>-&gt;<name>putProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>sprop</name>-&gt;<name>id</name></name></expr></argument>,
                                           <argument><expr><call><name><name>sprop</name>-&gt;<name>getter</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sprop</name>-&gt;<name>setter</name></name><argument_list>()</argument_list></call></expr></argument>,
                                           <argument><expr><name>slot</name></expr></argument>, <argument><expr><call><name><name>sprop</name>-&gt;<name>attributes</name></name><argument_list>()</argument_list></call></expr></argument>,
                                           <argument><expr><call><name><name>sprop</name>-&gt;<name>getFlags</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>sprop</name>-&gt;<name>shortid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr>!<name>sprop2</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>js_FreeSlot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <goto>goto <name>error</name>;</goto>
                    }</block></then></if>
                    <expr_stmt><expr><name>sprop</name> = <name>sprop2</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>scope</name>-&gt;<name>extend</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>sprop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

                <comment type="block">/*
                 * No method change check here because here we are
                 * adding a new property, not updating an existing
                 * slot's value that might contain a method of a
                 * branded scope.
                 */</comment>
                <expr_stmt><expr><call><name>TRACE_2</name><argument_list>(<argument><expr><name>SetPropHit</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>sprop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>obj</name>-&gt;<name>lockedSetSlot</name></name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/*
                 * Purge the property cache of the id we may have just
                 * shadowed in obj's scope and proto chains. We do this
                 * after unlocking obj's scope to avoid lock nesting.
                 */</comment>
                <expr_stmt><expr><call><name>js_PurgeScopeChain</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>sprop</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><call><name>PCMETER</name><argument_list>(<argument><expr><name><name>cache</name>-&gt;<name>setpcmisses</name></name>++</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>atom</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then> <block>{
            <comment type="block">/*
             * Slower property cache hit, fully confirmed by testForSet (in
             * the slow path, via fullTest).
             */</comment>
            <expr_stmt><expr><call><name>ASSERT_VALID_PROPERTY_CACHE_HIT</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>sprop</name> = <name>NULL</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>obj</name> == <name>obj2</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>sprop</name> = <call><name><name>entry</name>-&gt;<name>vword</name>.<name>toSprop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name><name>sprop</name>-&gt;<name>writable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name><name>obj2</name>-&gt;<name>scope</name></name><argument_list>()</argument_list></call>-&gt;<call><name>sealed</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>NATIVE_SET</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>sprop</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>sprop</name></expr>)</condition><then>
                <break>break;</break></then></if>
        }</block></then></if></else></if>

        <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>LOAD_ATOM</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>entry</name> &amp;&amp; <call><name>JS_LIKELY</name><argument_list>(<argument><expr><name><name>obj</name>-&gt;<name>map</name>-&gt;<name>ops</name>-&gt;<name>setProperty</name></name> == <name>js_SetProperty</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>uintN</name></type> <name>defineHow</name> <init>= <expr>(<name>op</name> == <name>JSOP_SETMETHOD</name>)
                              ? <name>JSDNP_CACHE_RESULT</name> | <name>JSDNP_SET_METHOD</name>
                              : <name>JSDNP_CACHE_RESULT</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name>js_SetPropertyHelper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>defineHow</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <goto>goto <name>error</name>;</goto></then></if>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>setProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <goto>goto <name>error</name>;</goto></then></if>
            <expr_stmt><expr><call><name>ABORT_RECORDING</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"Non-native set"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block> while <condition>(<expr>0</expr>)</condition>;</do>
<expr_stmt><expr><call><name>END_SET_CASE_STORE_RVAL</name><argument_list>(<argument><expr><name>JSOP_SETPROP</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GETELEM</argument>)</argument_list></macro>
    <comment type="block">/* Open-coded ELEMENT_OP optimized for strings and dense arrays. */</comment>
    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>JSVAL_IS_INT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>str</name> = <call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> = <call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>(<name>size_t</name>)<name>i</name> &lt; <call><name><name>str</name>-&gt;<name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>str</name> = <call><name><name>JSString</name>::<name>getUnitString</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>size_t</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
                <goto>goto <name>error</name>;</goto></then></if>
            <expr_stmt><expr><name>rval</name> = <call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>end_getelem</name>;</goto>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>VALUE_TO_OBJECT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_INT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name><name>obj</name>-&gt;<name>isDenseArray</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>jsuint</name></type> <name>idx</name> <init>= <expr><call><name>jsuint</name><argument_list>(<argument><expr><call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>idx</name> &lt; <call><name><name>obj</name>-&gt;<name>getArrayLength</name></name><argument_list>()</argument_list></call> &amp;&amp;
                <name>idx</name> &lt; <call><name>js_DenseArrayCapacity</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>rval</name> = <name><name>obj</name>-&gt;<name>dslots</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>rval</name> != <name>JSVAL_HOLE</name></expr>)</condition><then>
                    <goto>goto <name>end_getelem</name>;</goto></then></if>

                <comment type="block">/* Reload rval from the stack in the rare hole case. */</comment>
                <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>obj</name>-&gt;<name>isArguments</name></name><argument_list>()</argument_list></call>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_TRACER</name></cpp:ifdef>
                   &amp;&amp; !<call><name>GetArgsPrivateNative</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                  )</condition><then> <block>{
            <decl_stmt><decl><type><name>uint32</name></type> <name>arg</name> <init>= <expr><call><name>uint32</name><argument_list>(<argument><expr><call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>arg</name> &lt; <call><name>GetArgsLength</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>JSStackFrame</name> *</type><name>afp</name> <init>= <expr>(<name>JSStackFrame</name> *) <call><name><name>obj</name>-&gt;<name>getPrivate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>afp</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>rval</name> = <name><name>afp</name>-&gt;<name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr>;</expr_stmt>
                    <goto>goto <name>end_getelem</name>;</goto>
                }</block></then></if>

                <expr_stmt><expr><name>rval</name> = <call><name>GetArgsSlot</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>rval</name> != <name>JSVAL_HOLE</name></expr>)</condition><then>
                    <goto>goto <name>end_getelem</name>;</goto></then></if>
                <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if></else></if>
        <expr_stmt><expr><name>id</name> = <call><name>INT_JSVAL_TO_JSID</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr>!<call><name>js_InternNonIntElementId</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr>&amp;<name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block></else></if>

    <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>getProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
  <label><name>end_getelem</name>:</label>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_GETELEM</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_CALLELEM</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>ELEMENT_OP</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>js_GetMethod</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>JSGET_NO_METHOD_BARRIER</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_NO_SUCH_METHOD</name></expr></cpp:if>
    <if>if <condition>(<expr><call><name>JS_UNLIKELY</name><argument_list>(<argument><expr><call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-2</expr>]</index></name> = <name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>js_OnUnknownMethod</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>sp</name></name> - 2</expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{
        <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-2</expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_CALLELEM</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_SETELEM</argument>)</argument_list></macro>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FETCH_OBJECT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-3</expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FETCH_ELEMENT_ID</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <do>do <block>{
        <if>if <condition>(<expr><call><name><name>obj</name>-&gt;<name>isDenseArray</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name>JSID_IS_INT</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>jsuint</name></type> <name>length</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>length</name> = <call><name>js_DenseArrayCapacity</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name> = <call><name>JSID_TO_INT</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>(<name>jsuint</name>)<name>i</name> &lt; <name>length</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>obj</name>-&gt;<name>dslots</name><index>[<expr><name>i</name></expr>]</index></name> == <name>JSVAL_HOLE</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><call><name>js_PrototypeHasIndexedProperties</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <break>break;</break></then></if>
                    <if>if <condition>(<expr>(<name>jsuint</name>)<name>i</name> &gt;= <call><name><name>obj</name>-&gt;<name>getArrayLength</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <expr_stmt><expr><call><name><name>obj</name>-&gt;<name>setArrayLength</name></name><argument_list>(<argument><expr><name>i</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                    <expr_stmt><expr><call><name><name>obj</name>-&gt;<name>incArrayCountBy</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name><name>obj</name>-&gt;<name>dslots</name><index>[<expr><name>i</name></expr>]</index></name> = <name>rval</name></expr>;</expr_stmt>
                <goto>goto <name>end_setelem</name>;</goto>
            }</block></then></if>
        }</block></then></if>
    }</block> while <condition>(<expr>0</expr>)</condition>;</do>
    <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>setProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
  <label><name>end_setelem</name>:</label>
<macro><name>END_SET_CASE_STORE_RVAL</name><argument_list>(<argument>JSOP_SETELEM</argument>, <argument>3</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ENUMELEM</argument>)</argument_list></macro>
    <comment type="block">/* Funky: the value to set is under the [obj, id] pair. */</comment>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FETCH_OBJECT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FETCH_ELEMENT_ID</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>setProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name> -= 3</expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_ENUMELEM</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_NEW</argument>)</argument_list></macro>
    <comment type="block">/* Get immediate argc and find the constructor function. */</comment>
    <expr_stmt><expr><name>argc</name> = <call><name>GET_ARGC</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vp</name> = <name><name>regs</name>.<name>sp</name></name> - (2 + <name>argc</name>)</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>vp</name> &gt;= <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Assign lval, obj, and fun exactly as the code at inline_call: expects to
     * find them, to avoid nesting a js_Interpret call via js_InvokeConstructor.
     */</comment>
    <expr_stmt><expr><name>lval</name> = *<name>vp</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>VALUE_IS_FUNCTION</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fun</name> = <call><name>GET_FUNCTION_PRIVATE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>FUN_INTERPRETED</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="block">/* Root as we go using vp[1]. */</comment>
            <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>getProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>,
                                  <argument><expr><call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>atomState</name>.<name>classPrototypeAtom</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr>&amp;<name><name>vp</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <goto>goto <name>error</name>;</goto>
            }</block></then></if>
            <expr_stmt><expr><name>rval</name> = <name><name>vp</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>obj2</name> = <call><name>js_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>js_ObjectClass</name></expr></argument>,
                                <argument><expr><call><name>JSVAL_IS_OBJECT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call> ? <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr></argument>,
                                <argument><expr><call><name><name>obj</name>-&gt;<name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>obj2</name></expr>)</condition><then>
                <goto>goto <name>error</name>;</goto></then></if>

            <if>if <condition>(<expr><call><name><name>fun</name>-&gt;<name>u</name>.<name>i</name>.<name>script</name>-&gt;<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>vp</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name> = <name>vp</name> + 1</expr>;</expr_stmt>
                <goto>goto <name>end_new</name>;</goto>
            }</block></then></if>

            <expr_stmt><expr><name><name>vp</name><index>[<expr>1</expr>]</index></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>flags</name> = <name>JSFRAME_CONSTRUCTING</name></expr>;</expr_stmt>
            <goto>goto <name>inline_call</name>;</goto>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name>js_InvokeConstructor</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>InvokeArgsGuard</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name> = <name>vp</name> + 1</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_INTERRUPT_HANDLER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE_0</name><argument_list>(<argument><expr><name>NativeCallComplete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <label><name>end_new</name>:</label>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_NEW</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_CALL</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_EVAL</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_APPLY</argument>)</argument_list></macro>
    <expr_stmt><expr><name>argc</name> = <call><name>GET_ARGC</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vp</name> = <name><name>regs</name>.<name>sp</name></name> - (<name>argc</name> + 2)</expr>;</expr_stmt>

    <expr_stmt><expr><name>lval</name> = *<name>vp</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>VALUE_IS_FUNCTION</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fun</name> = <call><name>GET_FUNCTION_PRIVATE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Clear frame flags since this is not a constructor call. */</comment>
        <expr_stmt><expr><name>flags</name> = 0</expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>FUN_INTERPRETED</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <label><name>inline_call</name>:</label>
        <block>{
            <decl_stmt><decl><type><name>JSScript</name> *</type><name>newscript</name> <init>= <expr><name><name>fun</name>-&gt;<name>u</name>.<name>i</name>.<name>script</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>JS_UNLIKELY</name><argument_list>(<argument><expr><call><name><name>newscript</name>-&gt;<name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>vp</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name> = <name>vp</name> + 1</expr>;</expr_stmt>
                <goto>goto <name>end_call</name>;</goto>
            }</block></then></if>

            <comment type="block">/* Restrict recursion of lightweight functions. */</comment>
            <if>if <condition>(<expr><call><name>JS_UNLIKELY</name><argument_list>(<argument><expr><name>inlineCallCount</name> &gt;= <name>JS_MAX_INLINE_CALL_COUNT</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>js_ReportOverRecursed</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>error</name>;</goto>
            }</block></then></if>

            <comment type="block">/*
             * Get pointer to new frame/slots, without changing global state.
             * Initialize missing args if there are any.
             */</comment>
            <decl_stmt><decl><type><name>StackSpace</name> &amp;</type><name>stack</name> <init>= <expr><call><name><name>cx</name>-&gt;<name>stack</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uintN</name></type> <name>nslots</name> <init>= <expr><name><name>newscript</name>-&gt;<name>nslots</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uintN</name></type> <name>funargs</name> <init>= <expr><name><name>fun</name>-&gt;<name>nargs</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JSStackFrame</name> *</type><name>newfp</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>argc</name> &lt; <name>funargs</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>uintN</name></type> <name>missing</name> <init>= <expr><name>funargs</name> - <name>argc</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>newfp</name> = <call><name><name>stack</name>.<name>getInlineFrame</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>sp</name></name></expr></argument>, <argument><expr><name>missing</name></expr></argument>, <argument><expr><name>nslots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>newfp</name></expr>)</condition><then>
                    <goto>goto <name>error</name>;</goto></then></if>
                <for>for (<init><decl><type><name>jsval</name> *</type><name>v</name> <init>= <expr><name><name>regs</name>.<name>sp</name></name></expr></init>, *<name>end</name> <init>= <expr><name>v</name> + <name>missing</name></expr></init></decl>;</init> <condition><expr><name>v</name> != <name>end</name></expr>;</condition> <incr><expr>++<name>v</name></expr></incr>)
                    <expr_stmt><expr>*<name>v</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt></for>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>newfp</name> = <call><name><name>stack</name>.<name>getInlineFrame</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>sp</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>nslots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>newfp</name></expr>)</condition><then>
                    <goto>goto <name>error</name>;</goto></then></if>
            }</block></else></if>

            <comment type="block">/* Initialize stack frame. */</comment>
            <expr_stmt><expr><name><name>newfp</name>-&gt;<name>callobj</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>newfp</name>-&gt;<name>argsobj</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>newfp</name>-&gt;<name>script</name></name> = <name>newscript</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>newfp</name>-&gt;<name>fun</name></name> = <name>fun</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>newfp</name>-&gt;<name>argc</name></name> = <name>argc</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>newfp</name>-&gt;<name>argv</name></name> = <name>vp</name> + 2</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>newfp</name>-&gt;<name>rval</name></name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>newfp</name>-&gt;<name>annotation</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>newfp</name>-&gt;<name>scopeChain</name></name> = <name>parent</name> = <call><name><name>obj</name>-&gt;<name>getParent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>newfp</name>-&gt;<name>flags</name></name> = <name>flags</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>newfp</name>-&gt;<name>blockChain</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>JS_LIKELY</name><argument_list>(<argument><expr><name><name>newscript</name>-&gt;<name>staticLevel</name></name> &lt; <name>JS_DISPLAY_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>JSStackFrame</name> **</type><name>disp</name> <init>= <expr>&amp;<name><name>cx</name>-&gt;<name>display</name><index>[<expr><name><name>newscript</name>-&gt;<name>staticLevel</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>newfp</name>-&gt;<name>displaySave</name></name> = *<name>disp</name></expr>;</expr_stmt>
                <expr_stmt><expr>*<name>disp</name> = <name>newfp</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>JSFUN_BOUND_METHOD_TEST</name><argument_list>(<argument><expr><name><name>fun</name>-&gt;<name>flags</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>newfp</name>-&gt;<name>thisv</name></name> = <name><name>vp</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>newfp</name>-&gt;<name>regs</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>newfp</name>-&gt;<name>imacpc</name></name> = <name>NULL</name></expr>;</expr_stmt>

            <comment type="block">/* Push void to initialize local variables. */</comment>
            <decl_stmt><decl><type><name>jsval</name> *</type><name>newsp</name> <init>= <expr><call><name>StackBase</name><argument_list>(<argument><expr><name>newfp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>jsval</name> *</type><name>v</name> <init>= <expr><call><name><name>newfp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>v</name> != <name>newsp</name></expr>;</condition> <incr><expr>++<name>v</name></expr></incr>)
                <expr_stmt><expr>*<name>v</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt></for>

            <comment type="block">/* Scope with a call object parented by callee's parent. */</comment>
            <if>if <condition>(<expr><call><name><name>fun</name>-&gt;<name>isHeavyweight</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name>js_GetCallObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>newfp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <goto>goto <name>error</name>;</goto></then></if>

            <comment type="block">/* Switch version if currentVersion wasn't overridden. */</comment>
            <expr_stmt><expr><name><name>newfp</name>-&gt;<name>callerVersion</name></name> = (<name>JSVersion</name>) <name><name>cx</name>-&gt;<name>version</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>JS_LIKELY</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>version</name></name> == <name>currentVersion</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>currentVersion</name> = (<name>JSVersion</name>) <name><name>newscript</name>-&gt;<name>version</name></name></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name>JS_UNLIKELY</name><argument_list>(<argument><expr><name>currentVersion</name> != <name><name>cx</name>-&gt;<name>version</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name>js_SetVersion</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>currentVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then></if>

            <comment type="block">/* Push the frame and set interpreter registers. */</comment>
            <expr_stmt><expr><name><name>newfp</name>-&gt;<name>callerRegs</name></name> = <name>regs</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>fp</name>-&gt;<name>regs</name></name> = &amp;<name><name>newfp</name>-&gt;<name>callerRegs</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name> = <name>newsp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>regs</name>.<name>pc</name></name> = <name><name>newscript</name>-&gt;<name>code</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>newfp</name>-&gt;<name>regs</name></name> = &amp;<name>regs</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>stack</name>.<name>pushInlineFrame</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>newfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>newfp</name> == <name><name>cx</name>-&gt;<name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Import into locals. */</comment>
            <expr_stmt><expr><name>fp</name> = <name>newfp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>script</name> = <name>newscript</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>atoms</name> = <name><name>script</name>-&gt;<name>atomMap</name>.<name>vector</name></name></expr>;</expr_stmt>

            <comment type="block">/* Call the debugger hook if present. */</comment>
            <if>if <condition>(<decl><type><name>JSInterpreterHook</name></type> <name>hook</name> <init>= <expr><name><name>cx</name>-&gt;<name>debugHooks</name>-&gt;<name>callHook</name></name></expr></init></decl>)</condition><then> <block>{
                <expr_stmt><expr><name><name>fp</name>-&gt;<name>hookData</name></name> = <call><name>hook</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>, <argument><expr>0</expr></argument>,
                                    <argument><expr><name><name>cx</name>-&gt;<name>debugHooks</name>-&gt;<name>callHookData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>CHECK_INTERRUPT_HANDLER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name><name>fp</name>-&gt;<name>hookData</name></name> = <name>NULL</name></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><name>inlineCallCount</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_RUNTIME_METER</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>inlineCalls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>INCLUDE_MOZILLA_DTRACE</name></cpp:ifdef>
            <comment type="block">/* DTrace function entry, inlines */</comment>
            <if>if <condition>(<expr><call><name>JAVASCRIPT_FUNCTION_ENTRY_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name>jsdtrace_function_entry</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <if>if <condition>(<expr><call><name>JAVASCRIPT_FUNCTION_INFO_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name>jsdtrace_function_info</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>fp</name>-&gt;<name>down</name></name></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <if>if <condition>(<expr><call><name>JAVASCRIPT_FUNCTION_ARGS_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name>jsdtrace_function_args</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr><name><name>fp</name>-&gt;<name>argc</name></name></expr></argument>, <argument><expr><name><name>fp</name>-&gt;<name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_TRACER</name></cpp:ifdef>
            <if>if <condition>(<expr><call><name>TRACE_RECORDER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>TRACE_1</name><argument_list>(<argument><expr><name>EnterFrame</name></expr></argument>, <argument><expr><name>inlineCallCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>RESTORE_INTERP_VARS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name><name>fp</name>-&gt;<name>script</name></name> == <name><name>fp</name>-&gt;<name>down</name>-&gt;<name>script</name></name> &amp;&amp;
                       *<name><name>fp</name>-&gt;<name>down</name>-&gt;<name>regs</name>-&gt;<name>pc</name></name> == <name>JSOP_CALL</name> &amp;&amp;
                       *<name><name>fp</name>-&gt;<name>regs</name>-&gt;<name>pc</name></name> == <name>JSOP_TRACE</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>MONITOR_BRANCH</name><argument_list>(<argument><expr><name>Record_EnterFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <comment type="block">/* Load first op and dispatch it (safe since JSOP_STOP). */</comment>
            <expr_stmt><expr><name>op</name> = (<name>JSOp</name>) *<name><name>regs</name>.<name>pc</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>DO_OP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>fun</name>-&gt;<name>flags</name></name> &amp; <name>JSFUN_FAST_NATIVE</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>INCLUDE_MOZILLA_DTRACE</name></cpp:ifdef>
            <comment type="block">/* DTrace function entry, non-inlines */</comment>
            <if>if <condition>(<expr><call><name>VALUE_IS_FUNCTION</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name>JAVASCRIPT_FUNCTION_ENTRY_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name>jsdtrace_function_entry</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <if>if <condition>(<expr><call><name>JAVASCRIPT_FUNCTION_INFO_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name>jsdtrace_function_info</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <if>if <condition>(<expr><call><name>JAVASCRIPT_FUNCTION_ARGS_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name>jsdtrace_function_args</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>vp</name>+2</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>fun</name>-&gt;<name>u</name>.<name>n</name>.<name>extra</name></name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_OBJECT</name><argument_list>(<argument><expr><name><name>vp</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call> ||
                      <call><name>PRIMITIVE_THIS_TEST</name><argument_list>(<argument><expr><name>fun</name></expr></argument>, <argument><expr><name><name>vp</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ok</name> = ((<name>JSFastNative</name>) <name><name>fun</name>-&gt;<name>u</name>.<name>n</name>.<name>native</name></name>)(<name>cx</name>, <name>argc</name>, <name>vp</name>)</expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>INCLUDE_MOZILLA_DTRACE</name></cpp:ifdef>
            <if>if <condition>(<expr><call><name>VALUE_IS_FUNCTION</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name>JAVASCRIPT_FUNCTION_RVAL_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name>jsdtrace_function_rval</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <if>if <condition>(<expr><call><name>JAVASCRIPT_FUNCTION_RETURN_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name>jsdtrace_function_return</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name> = <name>vp</name> + 1</expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then> <block>{
                <comment type="block">/*
                 * If we are executing the JSOP_NEXTITER imacro and a
                 * Stopiteration exception is raised, transform it into a
                 * JSVAL_HOLE return value.  The tracer generates equivalent
                 * code by calling CatchStopIteration_tn.
                 */</comment>
                <if>if <condition>(<expr><name><name>fp</name>-&gt;<name>imacpc</name></name> &amp;&amp; *<name><name>fp</name>-&gt;<name>imacpc</name></name> == <name>JSOP_NEXTITER</name> &amp;&amp;
                    <name><name>cx</name>-&gt;<name>throwing</name></name> &amp;&amp; <call><name>js_ValueIsStopIteration</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>exception</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="line">// pc may point to JSOP_DUP here due to bug 474854.</comment>
                    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>*<name><name>regs</name>.<name>pc</name></name> == <name>JSOP_CALL</name> ||
                              *<name><name>regs</name>.<name>pc</name></name> == <name>JSOP_DUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>cx</name>-&gt;<name>throwing</name></name> = <name>JS_FALSE</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>cx</name>-&gt;<name>exception</name></name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name> = <name>JSVAL_HOLE</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <goto>goto <name>error</name>;</goto>
                }</block></else></if>
            }</block></then></if>
            <expr_stmt><expr><call><name>TRACE_0</name><argument_list>(<argument><expr><name>NativeCallComplete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>end_call</name>;</goto>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><name>ok</name> = <call><name>js_Invoke</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>InvokeArgsGuard</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name> = <name>vp</name> + 1</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_INTERRUPT_HANDLER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>JS_RUNTIME_METER</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>nonInlineCalls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE_0</name><argument_list>(<argument><expr><name>NativeCallComplete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <label><name>end_call</name>:</label>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_CALL</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_SETCALL</argument>)</argument_list></macro>
    <expr_stmt><expr><name>argc</name> = <call><name>GET_ARGC</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vp</name> = <name><name>regs</name>.<name>sp</name></name> - <name>argc</name> - 2</expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>js_Invoke</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>InvokeArgsGuard</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ok</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSMSG_BAD_LEFTSIDE_OF_ASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <goto>goto <name>error</name>;</goto>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_SETCALL</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_NAME</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_CALLNAME</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>PropertyCacheEntry</name> *</type><name>entry</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>obj</name> = <name><name>fp</name>-&gt;<name>scopeChain</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>JS_PROPERTY_CACHE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call>.<call><name>test</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>atom</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ASSERT_VALID_PROPERTY_CACHE_HIT</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>entry</name>-&gt;<name>vword</name>.<name>isObject</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rval</name> = <call><name><name>entry</name>-&gt;<name>vword</name>.<name>toJsval</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>do_push_rval</name>;</goto>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>entry</name>-&gt;<name>vword</name>.<name>isSlot</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>slot</name> = <call><name><name>entry</name>-&gt;<name>vword</name>.<name>toSlot</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <call><name><name>obj2</name>-&gt;<name>scope</name></name><argument_list>()</argument_list></call>-&gt;<name>freeslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rval</name> = <call><name><name>obj2</name>-&gt;<name>lockedGetSlot</name></name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>do_push_rval</name>;</goto>
        }</block></then></if>

        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name><name>entry</name>-&gt;<name>vword</name>.<name>isSprop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sprop</name> = <call><name><name>entry</name>-&gt;<name>vword</name>.<name>toSprop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>do_native_get</name>;</goto>
    }</block></then></if>

    <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>js_FindPropertyHelper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>&amp;<name>obj</name></expr></argument>, <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <if>if <condition>(<expr>!<name>prop</name></expr>)</condition><then> <block>{
        <comment type="block">/* Kludge to allow (typeof foo == "undefined") tests. */</comment>
        <expr_stmt><expr><name>endpc</name> = <name><name>script</name>-&gt;<name>code</name></name> + <name><name>script</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>op2</name> = <call><name>js_GetOpcode</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>pc</name></name> + <name>JSOP_NAME_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>op2</name> == <name>JSOP_TYPEOF</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> = <name>JSOP_NAME_LENGTH</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>DO_NEXT_OP</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <goto>goto <name>atom_not_defined</name>;</goto>
    }</block></then></if>

    <comment type="block">/* Take the slow path if prop was not found in a native object. */</comment>
    <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>isNative</name></name><argument_list>()</argument_list></call> || !<call><name><name>obj2</name>-&gt;<name>isNative</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>obj2</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>getProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>sprop</name> = (<name>JSScopeProperty</name> *)<name>prop</name></expr>;</expr_stmt>
  <label><name>do_native_get</name>:</label>
        <expr_stmt><expr><call><name>NATIVE_GET</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>sprop</name></expr></argument>, <argument><expr><name>JSGET_METHOD_BARRIER</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>obj2</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>(<name>JSProperty</name> *) <name>sprop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <label><name>do_push_rval</name>:</label>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>op</name> == <name>JSOP_CALLNAME</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_NAME</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_UINT16</argument>)</argument_list></macro>
    <expr_stmt><expr><name>i</name> = (<name>jsint</name>) <call><name>GET_UINT16</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_UINT16</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_UINT24</argument>)</argument_list></macro>
    <expr_stmt><expr><name>i</name> = (<name>jsint</name>) <call><name>GET_UINT24</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_UINT24</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_INT8</argument>)</argument_list></macro>
    <expr_stmt><expr><name>i</name> = <call><name>GET_INT8</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_INT8</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_INT32</argument>)</argument_list></macro>
    <expr_stmt><expr><name>i</name> = <call><name>GET_INT32</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_INT32</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_INDEXBASE</argument>)</argument_list></macro>
    <comment type="block">/*
     * Here atoms can exceed script-&gt;atomMap.length as we use atoms as a
     * segment register for object literals as well.
     */</comment>
    <expr_stmt><expr><name>atoms</name> += <call><name>GET_INDEXBASE</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_INDEXBASE</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_INDEXBASE1</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_INDEXBASE2</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_INDEXBASE3</argument>)</argument_list></macro>
    <expr_stmt><expr><name>atoms</name> += (<name>op</name> - <name>JSOP_INDEXBASE1</name> + 1) &lt;&lt; 16</expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_INDEXBASE3</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_RESETBASE0</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_RESETBASE</argument>)</argument_list></macro>
    <expr_stmt><expr><name>atoms</name> = <name><name>script</name>-&gt;<name>atomMap</name>.<name>vector</name></name></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_RESETBASE</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DOUBLE</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name><name>fp</name>-&gt;<name>imacpc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>size_t</name><argument_list>(<argument><expr><name>atoms</name> - <name><name>script</name>-&gt;<name>atomMap</name>.<name>vector</name></name></expr></argument>)</argument_list></call> &lt; <name><name>script</name>-&gt;<name>atomMap</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* FALL THROUGH */</comment>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_STRING</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>LOAD_ATOM</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><call><name>ATOM_KEY</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_DOUBLE</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_OBJECT</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>LOAD_OBJECT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_OBJECT</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_REGEXP</argument>)</argument_list></macro> <block>{
    <comment type="block">/*
     * Push a regexp object cloned from the regexp literal object mapped by the
     * bytecode at pc. ES5 finally fixed this bad old ES3 design flaw which was
     * flouted by many browser-based implementations.
     *
     * We avoid the js_GetScopeChain call here and pass fp-&gt;scopeChain as
     * js_GetClassPrototype uses the latter only to locate the global.
     */</comment>
    <expr_stmt><expr><name>index</name> = <call><name>GET_FULL_INDEX</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>proto</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>js_GetClassPrototype</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>fp</name>-&gt;<name>scopeChain</name></name></expr></argument>, <argument><expr><name>JSProto_RegExp</name></expr></argument>, <argument><expr>&amp;<name>proto</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>js_CloneRegExpObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name><name>script</name>-&gt;<name>getRegExp</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_REGEXP</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ZERO</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>JSVAL_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_ZERO</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ONE</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>JSVAL_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_ONE</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_NULL</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>JSVAL_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_NULL</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_FALSE</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>JSVAL_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_FALSE</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_TRUE</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>JSVAL_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_TRUE</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_TABLESWITCH</argument>)</argument_list></macro>
    <expr_stmt><expr><name>pc2</name> = <name><name>regs</name>.<name>pc</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> = <call><name>GET_JUMP_OFFSET</name><argument_list>(<argument><expr><name>pc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * ECMAv2+ forbids conversion of discriminant, so we will skip to the
     * default case if the discriminant isn't already an int jsval.  (This
     * opcode is emitted only for dense jsint-domain switches.)
     */</comment>
    <expr_stmt><expr><name>rval</name> = <call><name>POP_OPND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_INT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>i</name> = <call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>JSVAL_IS_DOUBLE</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call> &amp;&amp; *<call><name>JSVAL_TO_DOUBLE</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <comment type="block">/* Treat -0 (double) as 0. */</comment>
        <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>DO_NEXT_OP</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if>

    <expr_stmt><expr><name>pc2</name> += <name>JUMP_OFFSET_LEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>low</name> = <call><name>GET_JUMP_OFFSET</name><argument_list>(<argument><expr><name>pc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pc2</name> += <name>JUMP_OFFSET_LEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>high</name> = <call><name>GET_JUMP_OFFSET</name><argument_list>(<argument><expr><name>pc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name> -= <name>low</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>jsuint</name>)<name>i</name> &lt; <call>(<name>jsuint</name>)<argument_list>(<argument><expr><name>high</name> - <name>low</name> + 1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>pc2</name> += <name>JUMP_OFFSET_LEN</name> + <name>JUMP_OFFSET_LEN</name> * <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>off</name> = (<name>jsint</name>) <call><name>GET_JUMP_OFFSET</name><argument_list>(<argument><expr><name>pc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>off</name></expr>)</condition><then>
            <expr_stmt><expr><name>len</name> = <name>off</name></expr>;</expr_stmt></then></if>
    }</block></then></if>
<decl_stmt><decl><type><name>END_VARLEN_CASE</name></type>

<name>BEGIN_CASE</name><argument_list>(<argument><expr><name>JSOP_TABLESWITCHX</name></expr></argument>)</argument_list>
    <name>pc2</name> <init>= <expr><name><name>regs</name>.<name>pc</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>len</name> = <call><name>GET_JUMPX_OFFSET</name><argument_list>(<argument><expr><name>pc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * ECMAv2+ forbids conversion of discriminant, so we will skip to the
     * default case if the discriminant isn't already an int jsval.  (This
     * opcode is emitted only for dense jsint-domain switches.)
     */</comment>
    <expr_stmt><expr><name>rval</name> = <call><name>POP_OPND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_INT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>i</name> = <call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>JSVAL_IS_DOUBLE</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call> &amp;&amp; *<call><name>JSVAL_TO_DOUBLE</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <comment type="block">/* Treat -0 (double) as 0. */</comment>
        <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>DO_NEXT_OP</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if>

    <expr_stmt><expr><name>pc2</name> += <name>JUMPX_OFFSET_LEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>low</name> = <call><name>GET_JUMP_OFFSET</name><argument_list>(<argument><expr><name>pc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pc2</name> += <name>JUMP_OFFSET_LEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>high</name> = <call><name>GET_JUMP_OFFSET</name><argument_list>(<argument><expr><name>pc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name> -= <name>low</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>jsuint</name>)<name>i</name> &lt; <call>(<name>jsuint</name>)<argument_list>(<argument><expr><name>high</name> - <name>low</name> + 1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>pc2</name> += <name>JUMP_OFFSET_LEN</name> + <name>JUMPX_OFFSET_LEN</name> * <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>off</name> = (<name>jsint</name>) <call><name>GET_JUMPX_OFFSET</name><argument_list>(<argument><expr><name>pc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>off</name></expr>)</condition><then>
            <expr_stmt><expr><name>len</name> = <name>off</name></expr>;</expr_stmt></then></if>
    }</block></then></if>
<decl_stmt><decl><type><name>END_VARLEN_CASE</name></type>

<name>BEGIN_CASE</name><argument_list>(<argument><expr><name>JSOP_LOOKUPSWITCHX</name></expr></argument>)</argument_list>
    <name>off</name> <init>= <expr><name>JUMPX_OFFSET_LEN</name></expr></init></decl>;</decl_stmt>
    <goto>goto <name>do_lookup_switch</name>;</goto>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_LOOKUPSWITCH</argument>)</argument_list></macro>
    <expr_stmt><expr><name>off</name> = <name>JUMP_OFFSET_LEN</name></expr>;</expr_stmt>

  <label><name>do_lookup_switch</name>:</label>
    <comment type="block">/*
     * JSOP_LOOKUPSWITCH and JSOP_LOOKUPSWITCHX are never used if any atom
     * index in it would exceed 64K limit.
     */</comment>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name><name>fp</name>-&gt;<name>imacpc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>atoms</name> == <name><name>script</name>-&gt;<name>atomMap</name>.<name>vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pc2</name> = <name><name>regs</name>.<name>pc</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>lval</name> = <call><name>POP_OPND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>end_lookup_switch</name>;</goto></then></if>

    <expr_stmt><expr><name>pc2</name> += <name>off</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>npairs</name> = (<name>jsint</name>) <call><name>GET_UINT16</name><argument_list>(<argument><expr><name>pc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pc2</name> += <name>UINT16_LEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>npairs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* empty switch uses JSOP_TABLESWITCH */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEARCH_PAIRS</name><parameter_list>(<param><type><name>MATCH_CODE</name></type></param>)</parameter_list></cpp:macro>                                              \
    <cpp:value>for (;;) {                                                                \
        JS_ASSERT(GET_INDEX(pc2) &lt; script-&gt;atomMap.length);                   \
        atom = atoms[GET_INDEX(pc2)];                                         \
        rval = ATOM_KEY(atom);                                                \
        MATCH_CODE                                                            \
        pc2 += INDEX_LEN;                                                     \
        if (match)                                                            \
            break;                                                            \
        pc2 += off;                                                           \
        if (--npairs == 0) {                                                  \
            pc2 = regs.pc;                                                    \
            break;                                                            \
        }                                                                     \
    }</cpp:value></cpp:define>

    <if>if <condition>(<expr><call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>str</name> = <call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>SEARCH_PAIRS</name><argument_list>(
            <argument>match = (JSVAL_IS_STRING(rval) &amp;&amp;
                     ((str2 = JSVAL_TO_STRING(rval)) == str ||
                      js_EqualStrings(str2, str)));</argument>
        )</argument_list></macro>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>JSVAL_IS_DOUBLE</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>d</name> = *<call><name>JSVAL_TO_DOUBLE</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>SEARCH_PAIRS</name><argument_list>(
            <argument>match = (JSVAL_IS_DOUBLE(rval) &amp;&amp;
                     *JSVAL_TO_DOUBLE(rval) == d);</argument>
        )</argument_list></macro>
    }</block></then> <else>else <block>{
        <macro><name>SEARCH_PAIRS</name><argument_list>(
            <argument>match = (lval == rval);</argument>
        )</argument_list></macro>
    }</block></else></if></else></if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SEARCH_PAIRS</name></cpp:undef>

  <label><name>end_lookup_switch</name>:</label>
    <expr_stmt><expr><name>len</name> = (<name>op</name> == <name>JSOP_LOOKUPSWITCH</name>)
          ? <call><name>GET_JUMP_OFFSET</name><argument_list>(<argument><expr><name>pc2</name></expr></argument>)</argument_list></call>
          : <call><name>GET_JUMPX_OFFSET</name><argument_list>(<argument><expr><name>pc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>END_VARLEN_CASE</name></type>

<name>BEGIN_CASE</name><parameter_list>(<param><decl><type><name>JSOP_TRAP</name></type></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>JSTrapStatus</name></type> <name>status</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>status</name> = <call><name>JS_HandleTrap</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{
      <case>case <expr><name>JSTRAP_ERROR</name></expr>:
        <goto>goto <name>error</name>;</goto>
      </case><case>case <expr><name>JSTRAP_RETURN</name></expr>:
        <expr_stmt><expr><name><name>fp</name>-&gt;<name>rval</name></name> = <name>rval</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
        <goto>goto <name>forced_return</name>;</goto>
      </case><case>case <expr><name>JSTRAP_THROW</name></expr>:
        <expr_stmt><expr><name><name>cx</name>-&gt;<name>throwing</name></name> = <name>JS_TRUE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cx</name>-&gt;<name>exception</name></name> = <name>rval</name></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
      </case><default>default:
        <break>break;</break>
    </default>}</block></switch>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>status</name> == <name>JSTRAP_CONTINUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_INTERRUPT_HANDLER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_INT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>op</name> = (<name>JSOp</name>) <call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>(<name>uintN</name>)<name>op</name> &lt; (<name>uintN</name>)<name>JSOP_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DO_OP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ARGUMENTS</argument>)</argument_list></macro>
    <if>if <condition>(<expr>!<call><name>js_GetArgsValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_ARGUMENTS</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ARGSUB</argument>)</argument_list></macro>
    <expr_stmt><expr><name>id</name> = <call><name>INT_TO_JSID</name><argument_list>(<argument><expr><call><name>GET_ARGNO</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>js_GetArgsProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_ARGSUB</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ARGCNT</argument>)</argument_list></macro>
    <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name><name>rt</name>-&gt;<name>atomState</name>.<name>lengthAtom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>js_GetArgsProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_ARGCNT</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GETARG</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_CALLARG</argument>)</argument_list></macro>
    <expr_stmt><expr><name>slot</name> = <call><name>GET_ARGNO</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <name><name>fp</name>-&gt;<name>fun</name>-&gt;<name>nargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER_SLOT_OP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name><name>fp</name>-&gt;<name>argv</name><index>[<expr><name>slot</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>op</name> == <name>JSOP_CALLARG</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>JSVAL_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_GETARG</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_SETARG</argument>)</argument_list></macro>
    <expr_stmt><expr><name>slot</name> = <call><name>GET_ARGNO</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <name><name>fp</name>-&gt;<name>fun</name>-&gt;<name>nargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER_SLOT_OP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vp</name> = &amp;<name><name>fp</name>-&gt;<name>argv</name><index>[<expr><name>slot</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>vp</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_SET_CASE</name><argument_list>(<argument>JSOP_SETARG</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GETLOCAL</argument>)</argument_list></macro>
    <expr_stmt><expr><name>slot</name> = <call><name>GET_SLOTNO</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <name><name>script</name>-&gt;<name>nslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call><index>[<expr><name>slot</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_GETLOCAL</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_CALLLOCAL</argument>)</argument_list></macro>
    <expr_stmt><expr><name>slot</name> = <call><name>GET_SLOTNO</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <name><name>script</name>-&gt;<name>nslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call><index>[<expr><name>slot</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>JSVAL_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_CALLLOCAL</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_SETLOCAL</argument>)</argument_list></macro>
    <expr_stmt><expr><name>slot</name> = <call><name>GET_SLOTNO</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <name><name>script</name>-&gt;<name>nslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vp</name> = &amp;<call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call><index>[<expr><name>slot</name></expr>]</index></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>vp</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_SET_CASE</name><argument_list>(<argument>JSOP_SETLOCAL</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GETUPVAR</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_CALLUPVAR</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSUpvarArray</name> *</type><name>uva</name> <init>= <expr><call><name><name>script</name>-&gt;<name>upvars</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>index</name> = <call><name>GET_UINT16</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>index</name> &lt; <name><name>uva</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rval</name> = <call><name>js_GetUpvar</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>script</name>-&gt;<name>staticLevel</name></name></expr></argument>, <argument><expr><name><name>uva</name>-&gt;<name>vector</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>op</name> == <name>JSOP_CALLUPVAR</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>JSVAL_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_GETUPVAR</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GETUPVAR_DBG</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_CALLUPVAR_DBG</argument>)</argument_list></macro>
    <expr_stmt><expr><name>fun</name> = <name><name>fp</name>-&gt;<name>fun</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>FUN_KIND</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call> == <name>JSFUN_INTERPRETED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>fun</name>-&gt;<name>u</name>.<name>i</name>.<name>wrapper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Scope for tempPool mark and local names allocation in it. */</comment>
    <block>{
        <decl_stmt><decl><type><name>void</name> *</type><name>mark</name> <init>= <expr><call><name>JS_ARENA_MARK</name><argument_list>(<argument><expr>&amp;<name><name>cx</name>-&gt;<name>tempPool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>jsuword</name> *</type><name>names</name> <init>= <expr><call><name>js_GetLocalNameArray</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr>&amp;<name><name>cx</name>-&gt;<name>tempPool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>names</name></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>

        <expr_stmt><expr><name>index</name> = <call><name><name>fun</name>-&gt;<name>countArgsAndVars</name></name><argument_list>()</argument_list></call> + <call><name>GET_UINT16</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>atom</name> = <call><name>JS_LOCAL_NAME_TO_ATOM</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ok</name> = <call><name>js_FindProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>obj</name></expr></argument>, <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ARENA_RELEASE</name><argument_list>(<argument><expr>&amp;<name><name>cx</name>-&gt;<name>tempPool</name></name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block>

    <if>if <condition>(<expr>!<name>prop</name></expr>)</condition><then>
        <goto>goto <name>atom_not_defined</name>;</goto></then></if>

    <comment type="block">/* Minimize footprint with generic code instead of NATIVE_GET. */</comment>
    <expr_stmt><expr><call><name><name>obj2</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vp</name> = <name><name>regs</name>.<name>sp</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>JSVAL_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>getProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>

    <if>if <condition>(<expr><name>op</name> == <name>JSOP_CALLUPVAR_DBG</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>JSVAL_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_GETUPVAR_DBG</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GETDSLOT</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_CALLDSLOT</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>fp</name>-&gt;<name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name><name>fp</name>-&gt;<name>argv</name><index>[<expr>-2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name>-&gt;<name>dslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>index</name> = <call><name>GET_UINT16</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>JS_INITIAL_NSLOTS</name> + <name>index</name> &lt; <call><name>jsatomid</name><argument_list>(<argument><expr><name><name>obj</name>-&gt;<name>dslots</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT_IF</name><argument_list>(<argument><expr><call><name><name>obj</name>-&gt;<name>scope</name></name><argument_list>()</argument_list></call>-&gt;<name>object</name> == <name>obj</name></expr></argument>,
                 <argument><expr><name>JS_INITIAL_NSLOTS</name> + <name>index</name> &lt; <call><name><name>obj</name>-&gt;<name>scope</name></name><argument_list>()</argument_list></call>-&gt;<name>freeslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name><name>obj</name>-&gt;<name>dslots</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>op</name> == <name>JSOP_CALLDSLOT</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>JSVAL_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_GETDSLOT</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GETGVAR</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_CALLGVAR</argument>)</argument_list></macro>
    <expr_stmt><expr><name>slot</name> = <call><name>GET_SLOTNO</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <call><name>GlobalVarCount</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER_SLOT_OP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lval</name> = <call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call><index>[<expr><name>slot</name></expr>]</index></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>op</name> = (<name>op</name> == <name>JSOP_GETGVAR</name>) ? <name>JSOP_NAME</name> : <name>JSOP_CALLNAME</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>DO_OP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name><name>fp</name>-&gt;<name>varobj</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call> == <call><name><name>cx</name>-&gt;<name>activeCallStack</name></name><argument_list>()</argument_list></call>-&gt;<call><name>getInitialVarObj</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name><name>cx</name>-&gt;<name>activeCallStack</name></name><argument_list>()</argument_list></call>-&gt;<call><name>getInitialVarObj</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>slot</name> = <call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name><name>obj</name>-&gt;<name>getSlotMT</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>op</name> == <name>JSOP_CALLGVAR</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>JSVAL_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_GETGVAR</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_SETGVAR</argument>)</argument_list></macro>
    <expr_stmt><expr><name>slot</name> = <call><name>GET_SLOTNO</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <call><name>GlobalVarCount</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>METER_SLOT_OP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name><name>fp</name>-&gt;<name>varobj</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call> == <call><name><name>cx</name>-&gt;<name>activeCallStack</name></name><argument_list>()</argument_list></call>-&gt;<call><name>getInitialVarObj</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name><name>cx</name>-&gt;<name>activeCallStack</name></name><argument_list>()</argument_list></call>-&gt;<call><name>getInitialVarObj</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lval</name> = <call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call><index>[<expr><name>slot</name></expr>]</index></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_NULL</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/*
         * Inline-clone and deoptimize JSOP_SETNAME code here because
         * JSOP_SETGVAR has arity 1: [rval], not arity 2: [obj, rval]
         * as JSOP_SETNAME does, where [obj] is due to JSOP_BINDNAME.
         */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_TRACER</name></cpp:ifdef>
        <if>if <condition>(<expr><call><name>TRACE_RECORDER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>AbortRecording</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"SETGVAR with NULL slot"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>LOAD_ATOM</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>setProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>slot</name> = <call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_LOCK_OBJ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>JSScope</name> *</type><name>scope</name> <init>= <expr><call><name><name>obj</name>-&gt;<name>scope</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>scope</name>-&gt;<name>methodWriteBarrier</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_UNLOCK_SCOPE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>error</name>;</goto>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>obj</name>-&gt;<name>lockedSetSlot</name></name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_UNLOCK_SCOPE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
<macro><name>END_SET_CASE</name><argument_list>(<argument>JSOP_SETGVAR</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DEFCONST</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DEFVAR</argument>)</argument_list></macro>
    <expr_stmt><expr><name>index</name> = <call><name>GET_INDEX</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>atom</name> = <name><name>atoms</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="block">/*
     * index is relative to atoms at this point but for global var
     * code below we need the absolute value.
     */</comment>
    <expr_stmt><expr><name>index</name> += <name>atoms</name> - <name><name>script</name>-&gt;<name>atomMap</name>.<name>vector</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name><name>fp</name>-&gt;<name>varobj</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>obj</name>-&gt;<name>map</name>-&gt;<name>ops</name>-&gt;<name>defineProperty</name></name> == <name>js_DefineProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>attrs</name> = <name>JSPROP_ENUMERATE</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!(<name><name>fp</name>-&gt;<name>flags</name></name> &amp; <name>JSFRAME_EVAL</name>)</expr>)</condition><then>
        <expr_stmt><expr><name>attrs</name> |= <name>JSPROP_PERMANENT</name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>op</name> == <name>JSOP_DEFCONST</name></expr>)</condition><then>
        <expr_stmt><expr><name>attrs</name> |= <name>JSPROP_READONLY</name></expr>;</expr_stmt></then></if>

    <comment type="block">/* Lookup id in order to check for redeclaration problems. */</comment>
    <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>prop</name> = <name>NULL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>op</name> == <name>JSOP_DEFVAR</name></expr>)</condition><then> <block>{
        <comment type="block">/*
         * Redundant declaration of a |var|, even one for a non-writable
         * property like |undefined| in ES5, does nothing.
         */</comment>
        <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>lookupProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr>!<call><name>js_CheckRedeclaration</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr>&amp;<name>obj2</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block></else></if>

    <comment type="block">/* Bind a variable only if it's not yet defined. */</comment>
    <if>if <condition>(<expr>!<name>prop</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name>js_DefineNativeProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>, <argument><expr><name>JS_PropertyStub</name></expr></argument>, <argument><expr><name>JS_PropertyStub</name></expr></argument>,
                                     <argument><expr><name>attrs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <goto>goto <name>error</name>;</goto>
        }</block></then></if>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>obj2</name> = <name>obj</name></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/*
     * Try to optimize a property we either just created, or found
     * directly in the global object, that is permanent, has a slot,
     * and has stub getter and setter, into a "fast global" accessed
     * by the JSOP_*GVAR opcodes.
     */</comment>
    <if>if <condition>(<expr>!<name><name>fp</name>-&gt;<name>fun</name></name> &amp;&amp;
        <name>index</name> &lt; <call><name>GlobalVarCount</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> &amp;&amp;
        <name>obj2</name> == <name>obj</name> &amp;&amp;
        <call><name><name>obj</name>-&gt;<name>isNative</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>sprop</name> = (<name>JSScopeProperty</name> *) <name>prop</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>sprop</name>-&gt;<name>configurable</name></name><argument_list>()</argument_list></call> &amp;&amp;
            <call><name>SPROP_HAS_VALID_SLOT</name><argument_list>(<argument><expr><name>sprop</name></expr></argument>, <argument><expr><call><name><name>obj</name>-&gt;<name>scope</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp;
            <call><name><name>sprop</name>-&gt;<name>hasDefaultGetterOrIsMethod</name></name><argument_list>()</argument_list></call> &amp;&amp;
            <call><name><name>sprop</name>-&gt;<name>hasDefaultSetter</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="block">/*
             * Fast globals use frame variables to map the global name's atom
             * index to the permanent varobj slot number, tagged as a jsval.
             * The atom index for the global's name literal is identical to its
             * variable index.
             */</comment>
            <expr_stmt><expr><call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call><index>[<expr><name>index</name></expr>]</index> = <call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name><name>sprop</name>-&gt;<name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>obj2</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_DEFVAR</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DEFFUN</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSPropertyOp</name></type> <name>getter</name></decl>, <decl><type ref="prev"/><name>setter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>doSet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSObject</name> *</type><name>pobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSProperty</name> *</type><name>prop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>old</name></decl>;</decl_stmt>

    <comment type="block">/*
     * A top-level function defined in Global or Eval code (see ECMA-262
     * Ed. 3), or else a SpiderMonkey extension: a named function statement in
     * a compound statement (not at the top statement level of global code, or
     * at the top level of a function body).
     */</comment>
    <expr_stmt><expr><call><name>LOAD_FUNCTION</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>FUN_OBJECT</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>FUN_NULL_CLOSURE</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/*
         * Even a null closure needs a parent for principals finding.
         * FIXME: bug 476950, although debugger users may also demand some kind
         * of scope link for debugger-assisted eval-in-frame.
         */</comment>
        <expr_stmt><expr><name>obj2</name> = <name><name>fp</name>-&gt;<name>scopeChain</name></name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>FUN_FLAT_CLOSURE</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Inline js_GetScopeChain a bit to optimize for the case of a
         * top-level function.
         */</comment>
        <if>if <condition>(<expr>!<name><name>fp</name>-&gt;<name>blockChain</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>obj2</name> = <name><name>fp</name>-&gt;<name>scopeChain</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>obj2</name> = <call><name>js_GetScopeChain</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>obj2</name></expr>)</condition><then>
                <goto>goto <name>error</name>;</goto></then></if>
        }</block></else></if>
    }</block></else></if>

    <comment type="block">/*
     * If static link is not current scope, clone fun's object to link to the
     * current scope via parent. We do this to enable sharing of compiled
     * functions among multiple equivalent scopes, amortizing the cost of
     * compilation over a number of executions.  Examples include XUL scripts
     * and event handlers shared among Firefox or other Mozilla app chrome
     * windows, and user-defined JS functions precompiled and then shared among
     * requests in server-side JS.
     */</comment>
    <if>if <condition>(<expr><call><name><name>obj</name>-&gt;<name>getParent</name></name><argument_list>()</argument_list></call> != <name>obj2</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>obj</name> = <call><name>CloneFunctionObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block></then></if>

    <comment type="block">/*
     * Protect obj from any GC hiding below JSObject::setProperty or
     * JSObject::defineProperty.  All paths from here must flow through the
     * fp-&gt;scopeChain code below the parent-&gt;defineProperty call.
     */</comment>
    <expr_stmt><expr><call><name>MUST_FLOW_THROUGH</name><argument_list>(<argument><expr>"restore_scope"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fp</name>-&gt;<name>scopeChain</name></name> = <name>obj</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * ECMA requires functions defined when entering Eval code to be
     * impermanent.
     */</comment>
    <expr_stmt><expr><name>attrs</name> = (<name><name>fp</name>-&gt;<name>flags</name></name> &amp; <name>JSFRAME_EVAL</name>)
            ? <name>JSPROP_ENUMERATE</name>
            : <name>JSPROP_ENUMERATE</name> | <name>JSPROP_PERMANENT</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Load function flags that are also property attributes.  Getters and
     * setters do not need a slot, their value is stored elsewhere in the
     * property itself, not in obj slots.
     */</comment>
    <expr_stmt><expr><name>getter</name> = <name>setter</name> = <name>JS_PropertyStub</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> = <call><name>JSFUN_GSFLAG2ATTR</name><argument_list>(<argument><expr><name><name>fun</name>-&gt;<name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>flags</name></expr>)</condition><then> <block>{
        <comment type="block">/* Function cannot be both getter a setter. */</comment>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>flags</name> == <name>JSPROP_GETTER</name> || <name>flags</name> == <name>JSPROP_SETTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>attrs</name> |= <name>flags</name> | <name>JSPROP_SHARED</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rval</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>flags</name> == <name>JSPROP_GETTER</name></expr>)</condition><then>
            <expr_stmt><expr><name>getter</name> = <call><name>js_CastAsPropertyOp</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name>setter</name> = <call><name>js_CastAsPropertyOp</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then></if>

    <comment type="block">/*
     * We define the function as a property of the variable object and not the
     * current scope chain even for the case of function expression statements
     * and functions defined by eval inside let or with blocks.
     */</comment>
    <expr_stmt><expr><name>parent</name> = <call><name><name>fp</name>-&gt;<name>varobj</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Check for a const property of the same name -- or any kind of property
     * if executing with the strict option.  We check here at runtime as well
     * as at compile-time, to handle eval as well as multiple HTML script tags.
     */</comment>
    <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name><name>fun</name>-&gt;<name>atom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>prop</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>js_CheckRedeclaration</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr>&amp;<name>pobj</name></expr></argument>, <argument><expr>&amp;<name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <goto>goto <name>restore_scope</name>;</goto></then></if>

    <comment type="block">/*
     * We deviate from 10.1.2 in ECMA 262 v3 and under eval use for function
     * declarations JSObject::setProperty, not JSObject::defineProperty, to
     * preserve the JSOP_PERMANENT attribute of existing properties and make
     * sure that such properties cannot be deleted.
     *
     * We also use JSObject::setProperty for the existing properties of Call
     * objects with matching attributes to preserve the native getters and
     * setters that store the value of the property in the interpreter frame,
     * see bug 467495.
     */</comment>
    <expr_stmt><expr><name>doSet</name> = (<name>attrs</name> == <name>JSPROP_ENUMERATE</name>)</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT_IF</name><argument_list>(<argument><expr><name>doSet</name></expr></argument>, <argument><expr><name><name>fp</name>-&gt;<name>flags</name></name> &amp; <name>JSFRAME_EVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>prop</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>parent</name> == <name>pobj</name> &amp;&amp;
            <call><name><name>parent</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call> == &amp;<name>js_CallClass</name> &amp;&amp;
            (<name>old</name> = ((<name>JSScopeProperty</name> *) <name>prop</name>)-&gt;<call><name>attributes</name><argument_list>()</argument_list></call>,
             !(<name>old</name> &amp; (<name>JSPROP_GETTER</name>|<name>JSPROP_SETTER</name>)) &amp;&amp;
             (<name>old</name> &amp; (<name>JSPROP_ENUMERATE</name>|<name>JSPROP_PERMANENT</name>)) == <name>attrs</name>)</expr>)</condition><then> <block>{
            <comment type="block">/*
             * js_CheckRedeclaration must reject attempts to add a getter or
             * setter to an existing property without a getter or setter.
             */</comment>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!(<name>attrs</name> &amp; ~(<name>JSPROP_ENUMERATE</name>|<name>JSPROP_PERMANENT</name>))</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!(<name>old</name> &amp; <name>JSPROP_READONLY</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>doSet</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>pobj</name>-&gt;<name>dropProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>ok</name> = <name>doSet</name>
         ? <call><name><name>parent</name>-&gt;<name>setProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call>
         : <call><name><name>parent</name>-&gt;<name>defineProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>getter</name></expr></argument>, <argument><expr><name>setter</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <label><name>restore_scope</name>:</label>
    <comment type="block">/* Restore fp-&gt;scopeChain now that obj is defined in fp-&gt;callobj. */</comment>
    <expr_stmt><expr><name><name>fp</name>-&gt;<name>scopeChain</name></name> = <name>obj2</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
}</block>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_DEFFUN</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DEFFUN_FC</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DEFFUN_DBGFC</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>LOAD_FUNCTION</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>obj</name> = (<name>op</name> == <name>JSOP_DEFFUN_FC</name>)
          ? <call><name>js_NewFlatClosure</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call>
          : <call><name>js_NewDebuggableFlatClosure</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><name>rval</name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>attrs</name> = (<name><name>fp</name>-&gt;<name>flags</name></name> &amp; <name>JSFRAME_EVAL</name>)
            ? <name>JSPROP_ENUMERATE</name>
            : <name>JSPROP_ENUMERATE</name> | <name>JSPROP_PERMANENT</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>flags</name> = <call><name>JSFUN_GSFLAG2ATTR</name><argument_list>(<argument><expr><name><name>fun</name>-&gt;<name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>flags</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>attrs</name> |= <name>flags</name> | <name>JSPROP_SHARED</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rval</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>parent</name> = <call><name><name>fp</name>-&gt;<name>varobj</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name><name>fun</name>-&gt;<name>atom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <call><name>js_CheckRedeclaration</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>attrs</name> == <name>JSPROP_ENUMERATE</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>fp</name>-&gt;<name>flags</name></name> &amp; <name>JSFRAME_EVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ok</name> = <call><name><name>parent</name>-&gt;<name>setProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>attrs</name> &amp; <name>JSPROP_PERMANENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>ok</name> = <call><name><name>parent</name>-&gt;<name>defineProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>,
                                        <argument><expr>(<name>flags</name> &amp; <name>JSPROP_GETTER</name>)
                                        ? <call><name>js_CastAsPropertyOp</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call>
                                        : <name>JS_PropertyStub</name></expr></argument>,
                                        <argument><expr>(<name>flags</name> &amp; <name>JSPROP_SETTER</name>)
                                        ? <call><name>js_CastAsPropertyOp</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call>
                                        : <name>JS_PropertyStub</name></expr></argument>,
                                        <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>

    <if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_DEFFUN_FC</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DEFLOCALFUN</argument>)</argument_list></macro>
    <comment type="block">/*
     * Define a local function (i.e., one nested at the top level of another
     * function), parented by the current scope chain, stored in a local
     * variable slot that the compiler allocated.  This is an optimization over
     * JSOP_DEFFUN that avoids requiring a call object for the outer function's
     * activation.
     */</comment>
    <expr_stmt><expr><call><name>LOAD_FUNCTION</name><argument_list>(<argument><expr><name>SLOTNO_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>FUN_INTERPRETED</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>FUN_FLAT_CLOSURE</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>FUN_OBJECT</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>FUN_NULL_CLOSURE</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>obj</name> = <call><name>CloneFunctionObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr><name><name>fp</name>-&gt;<name>scopeChain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>parent</name> = <call><name>js_GetScopeChain</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>parent</name></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>

        <if>if <condition>(<expr><call><name><name>obj</name>-&gt;<name>getParent</name></name><argument_list>()</argument_list></call> != <name>parent</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_TRACER</name></cpp:ifdef>
            <if>if <condition>(<expr><call><name>TRACE_RECORDER</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name>AbortRecording</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>"DEFLOCALFUN for closure"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>obj</name> = <call><name>CloneFunctionObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
                <goto>goto <name>error</name>;</goto></then></if>
        }</block></then></if>
    }</block></else></if>

    <expr_stmt><expr><name>slot</name> = <call><name>GET_SLOTNO</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE_2</name><argument_list>(<argument><expr><name>DefLocalFunSetSlot</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call><index>[<expr><name>slot</name></expr>]</index> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_DEFLOCALFUN</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DEFLOCALFUN_FC</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>LOAD_FUNCTION</name><argument_list>(<argument><expr><name>SLOTNO_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>obj</name> = <call><name>js_NewFlatClosure</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>

    <expr_stmt><expr><name>slot</name> = <call><name>GET_SLOTNO</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE_2</name><argument_list>(<argument><expr><name>DefLocalFunSetSlot</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call><index>[<expr><name>slot</name></expr>]</index> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_DEFLOCALFUN_FC</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DEFLOCALFUN_DBGFC</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>LOAD_FUNCTION</name><argument_list>(<argument><expr><name>SLOTNO_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>obj</name> = <call><name>js_NewDebuggableFlatClosure</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>

    <expr_stmt><expr><name>slot</name> = <call><name>GET_SLOTNO</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call><index>[<expr><name>slot</name></expr>]</index> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_DEFLOCALFUN_DBGFC</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_LAMBDA</argument>)</argument_list></macro>
    <comment type="block">/* Load the specified function object literal. */</comment>
    <expr_stmt><expr><call><name>LOAD_FUNCTION</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>FUN_OBJECT</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* do-while(0) so we can break instead of using a goto. */</comment>
    <do>do <block>{
        <if>if <condition>(<expr><call><name>FUN_NULL_CLOSURE</name><argument_list>(<argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>parent</name> = <name><name>fp</name>-&gt;<name>scopeChain</name></name></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name><name>obj</name>-&gt;<name>getParent</name></name><argument_list>()</argument_list></call> == <name>parent</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>op</name> = <call><name>JSOp</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name><index>[<expr><name>JSOP_LAMBDA_LENGTH</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/*
                 * Optimize ({method: function () { ... }, ...}) and
                 * this.method = function () { ... }; bytecode sequences.
                 */</comment>
                <if>if <condition>(<expr><name>op</name> == <name>JSOP_SETMETHOD</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
                    <expr_stmt><expr><name>op2</name> = <call><name>JSOp</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name><index>[<expr><name>JSOP_LAMBDA_LENGTH</name> + <name>JSOP_SETMETHOD_LENGTH</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>op2</name> == <name>JSOP_POP</name> || <name>op2</name> == <name>JSOP_POPV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name>JSVAL_IS_OBJECT</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call> &amp;&amp;
                        (<name>obj2</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call>) &amp;&amp;
                        <call><name><name>obj2</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call> == &amp;<name>js_ObjectClass</name></expr>)</condition><then> <block>{
                        <break>break;</break>
                    }</block></then></if>
                }</block></then> <else>else <if>if <condition>(<expr><name>op</name> == <name>JSOP_INITMETHOD</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>obj2</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name><name>obj2</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call> == &amp;<name>js_ObjectClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name><name>obj2</name>-&gt;<name>scope</name></name><argument_list>()</argument_list></call>-&gt;<name>object</name> == <name>obj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if></else></if>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>parent</name> = <call><name>js_GetScopeChain</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>parent</name></expr>)</condition><then>
                <goto>goto <name>error</name>;</goto></then></if>
        }</block></else></if>

        <expr_stmt><expr><name>obj</name> = <call><name>CloneFunctionObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block> while <condition>(<expr>0</expr>)</condition>;</do>

    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_LAMBDA</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_LAMBDA_FC</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>LOAD_FUNCTION</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>obj</name> = <call><name>js_NewFlatClosure</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>

    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_LAMBDA_FC</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_LAMBDA_DBGFC</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>LOAD_FUNCTION</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>obj</name> = <call><name>js_NewDebuggableFlatClosure</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>

    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_LAMBDA_DBGFC</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_CALLEE</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name><name>fp</name>-&gt;<name>argv</name><index>[<expr>-2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_CALLEE</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_GETTER_SETTER</name></expr></cpp:if>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GETTER</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_SETTER</argument>)</argument_list></macro>
  <label><name>do_getter_setter</name>:</label>
    <expr_stmt><expr><name>op2</name> = (<name>JSOp</name>) *++<name><name>regs</name>.<name>pc</name></name></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>op2</name></expr>)</condition> <block>{
      <case>case <expr><name>JSOP_INDEXBASE</name></expr>:
        <expr_stmt><expr><name>atoms</name> += <call><name>GET_INDEXBASE</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>regs</name>.<name>pc</name></name> += <name>JSOP_INDEXBASE_LENGTH</name> - 1</expr>;</expr_stmt>
        <goto>goto <name>do_getter_setter</name>;</goto>
      </case><case>case <expr><name>JSOP_INDEXBASE1</name></expr>:
      </case><case>case <expr><name>JSOP_INDEXBASE2</name></expr>:
      </case><case>case <expr><name>JSOP_INDEXBASE3</name></expr>:
        <expr_stmt><expr><name>atoms</name> += (<name>op2</name> - <name>JSOP_INDEXBASE1</name> + 1) &lt;&lt; 16</expr>;</expr_stmt>
        <goto>goto <name>do_getter_setter</name>;</goto>

      </case><case>case <expr><name>JSOP_SETNAME</name></expr>:
      </case><case>case <expr><name>JSOP_SETPROP</name></expr>:
        <expr_stmt><expr><call><name>LOAD_ATOM</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> = -1</expr>;</expr_stmt>
        <goto>goto <name>gs_pop_lval</name>;</goto>

      </case><case>case <expr><name>JSOP_SETELEM</name></expr>:
        <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>id</name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> = -2</expr>;</expr_stmt>
      <label><name>gs_pop_lval</name>:</label>
        <expr_stmt><expr><call><name>FETCH_OBJECT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>i</name> - 1</expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      </case><case>case <expr><name>JSOP_INITPROP</name></expr>:
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> - <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> &gt;= 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>LOAD_ATOM</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>gs_get_lval</name>;</goto>

      </case><default>default:
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>op2</name> == <name>JSOP_INITELEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> - <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> &gt;= 3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>id</name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> = -2</expr>;</expr_stmt>
      <label><name>gs_get_lval</name>:</label>
        <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr><name>i</name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_OBJECT</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </default>}</block></switch>

    <comment type="block">/* Ensure that id has a type suitable for use with obj. */</comment>
    <if>if <condition>(<expr><name>id</name> == 0</expr>)</condition><then>
        <expr_stmt><expr><call><name>FETCH_ELEMENT_ID</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <if>if <condition>(<expr>!<call><name>js_IsCallable</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><name>JSMSG_BAD_GETTER_OR_SETTER</name></expr></argument>,
                             <argument><expr>(<name>op</name> == <name>JSOP_GETTER</name>)
                             ? <name>js_getter_str</name>
                             : <name>js_setter_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    }</block></then></if>

    <comment type="block">/*
     * Getters and setters are just like watchpoints from an access control
     * point of view.
     */</comment>
    <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>checkAccess</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>JSACC_WATCH</name></expr></argument>, <argument><expr>&amp;<name>rtmp</name></expr></argument>, <argument><expr>&amp;<name>attrs</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>

    <if>if <condition>(<expr><name>op</name> == <name>JSOP_GETTER</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>getter</name> = <call><name>js_CastAsPropertyOp</name><argument_list>(<argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>setter</name> = <name>JS_PropertyStub</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>attrs</name> = <name>JSPROP_GETTER</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>getter</name> = <name>JS_PropertyStub</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>setter</name> = <call><name>js_CastAsPropertyOp</name><argument_list>(<argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>attrs</name> = <name>JSPROP_SETTER</name></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name>attrs</name> |= <name>JSPROP_ENUMERATE</name> | <name>JSPROP_SHARED</name></expr>;</expr_stmt>

    <comment type="block">/* Check for a readonly or permanent property of the same name. */</comment>
    <if>if <condition>(<expr>!<call><name>js_CheckRedeclaration</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>

    <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>defineProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>, <argument><expr><name>getter</name></expr></argument>, <argument><expr><name>setter</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>

    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name> += <name>i</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>js_CodeSpec</name><index>[<expr><name>op2</name></expr>]</index></name>.<name>ndefs</name> &gt; <name><name>js_CodeSpec</name><index>[<expr><name>op2</name></expr>]</index></name>.<name>nuses</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>js_CodeSpec</name><index>[<expr><name>op2</name></expr>]</index></name>.<name>ndefs</name> == <name><name>js_CodeSpec</name><index>[<expr><name>op2</name></expr>]</index></name>.<name>nuses</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>len</name> = <name><name>js_CodeSpec</name><index>[<expr><name>op2</name></expr>]</index></name>.<name>length</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DO_NEXT_OP</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JS_HAS_GETTER_SETTER */</comment>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_HOLE</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>JSVAL_HOLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_HOLE</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_NEWARRAY</argument>)</argument_list></macro>
    <expr_stmt><expr><name>len</name> = <call><name>GET_UINT16</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>fp</name>-&gt;<name>assertValidStackDepth</name></name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>js_NewArrayObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>sp</name></name> - <name>len</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name> -= <name>len</name> - 1</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_NEWARRAY</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_NEWINIT</argument>)</argument_list></macro>
    <expr_stmt><expr><name>i</name> = <call><name>GET_INT8</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>i</name> == <name>JSProto_Array</name> || <name>i</name> == <name>JSProto_Object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>i</name> == <name>JSProto_Array</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>obj</name> = <call><name>js_NewArrayObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>obj</name> = <call><name>js_NewObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>js_ObjectClass</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>

        <if>if <condition>(<expr><name><name>regs</name>.<name>pc</name><index>[<expr><name>JSOP_NEWINIT_LENGTH</name></expr>]</index></name> != <name>JSOP_ENDINIT</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>JS_LOCK_OBJ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>JSScope</name> *</type><name>scope</name> <init>= <expr><call><name>js_GetMutableScope</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name>scope</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>JS_UNLOCK_OBJ</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>error</name>;</goto>
            }</block></then></if>

            <comment type="block">/*
             * We cannot assume that js_GetMutableScope above creates a scope
             * owned by cx and skip JS_UNLOCK_SCOPE. A new object debugger
             * hook may add properties to the newly created object, suspend
             * the current request and share the object with other threads.
             */</comment>
            <expr_stmt><expr><call><name>JS_UNLOCK_SCOPE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></else></if>

    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_INTERRUPT_HANDLER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_NEWINIT</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ENDINIT</argument>)</argument_list></macro>
    <comment type="block">/* Re-set the newborn root to the top of this object tree. */</comment>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> - <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> &gt;= 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_OBJECT</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>weakRoots</name>.<name>finalizableNewborns</name><index>[<expr><name>FINALIZE_OBJECT</name></expr>]</index></name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_ENDINIT</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_INITPROP</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_INITMETHOD</argument>)</argument_list></macro>
<block>{
    <comment type="block">/* Load the property's initial value into rval. */</comment>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> - <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> &gt;= 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Load the object being initialized into lval/obj. */</comment>
    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name><name>obj</name>-&gt;<name>isNative</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name><name>obj</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call>-&gt;<name>reserveSlots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!(<call><name><name>obj</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call>-&gt;<name>flags</name> &amp; <name>JSCLASS_SHARE_ALL_PROPERTIES</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>JSScope</name> *</type><name>scope</name> <init>= <expr><call><name><name>obj</name>-&gt;<name>scope</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PropertyCacheEntry</name> *</type><name>entry</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Probe the property cache. 
     *
     * We can not assume that the object created by JSOP_NEWINIT is still
     * single-threaded as the debugger can access it from other threads.
     * So check first.
     *
     * On a hit, if the cached sprop has a non-default setter, it must be
     * __proto__ or __parent__. If sprop-&gt;parent != scope-&gt;lastProperty(),
     * there is a repeated property name. The fast path does not handle these
     * two cases.
     */</comment>
    <if>if <condition>(<expr><call><name>CX_OWNS_OBJECT_TITLE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> &amp;&amp;
        <call><name>JS_PROPERTY_CACHE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call>.<call><name>testForInit</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>, <argument><expr>&amp;<name>sprop</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call> &amp;&amp;
        <call><name><name>sprop</name>-&gt;<name>hasDefaultSetter</name></name><argument_list>()</argument_list></call> &amp;&amp;
        <name><name>sprop</name>-&gt;<name>parent</name></name> == <call><name><name>scope</name>-&gt;<name>lastProperty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
        <comment type="block">/* Fast path. Property cache hit. */</comment>
        <expr_stmt><expr><name>slot</name> = <name><name>sprop</name>-&gt;<name>slot</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> == <name><name>scope</name>-&gt;<name>freeslot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>slot</name> &lt; <call><name><name>obj</name>-&gt;<name>numSlots</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr>++<name><name>scope</name>-&gt;<name>freeslot</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr>!<call><name>js_AllocSlot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>&amp;<name>slot</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <goto>goto <name>error</name>;</goto></then></if>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> == <name><name>sprop</name>-&gt;<name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name><name>scope</name>-&gt;<name>lastProperty</name></name><argument_list>()</argument_list></call> ||
                  <name><name>scope</name>-&gt;<name>shape</name></name> == <call><name><name>scope</name>-&gt;<name>lastProperty</name></name><argument_list>()</argument_list></call>-&gt;<name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>scope</name>-&gt;<name>table</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>JSScopeProperty</name> *</type><name>sprop2</name> <init>=
                <expr><call><name><name>scope</name>-&gt;<name>addProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>sprop</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><call><name><name>sprop</name>-&gt;<name>getter</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sprop</name>-&gt;<name>setter</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>slot</name></expr></argument>,
                                   <argument><expr><call><name><name>sprop</name>-&gt;<name>attributes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sprop</name>-&gt;<name>getFlags</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>sprop</name>-&gt;<name>shortid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name>sprop2</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>js_FreeSlot</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>error</name>;</goto>
            }</block></then></if>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>sprop2</name> == <name>sprop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name><name>scope</name>-&gt;<name>isSharedEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>scope</name>-&gt;<name>extend</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>sprop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="block">/*
         * No method change check here because here we are adding a new
         * property, not updating an existing slot's value that might
         * contain a method of a branded scope.
         */</comment>
        <expr_stmt><expr><call><name>TRACE_2</name><argument_list>(<argument><expr><name>SetPropHit</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>sprop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>obj</name>-&gt;<name>lockedSetSlot</name></name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>PCMETER</name><argument_list>(<argument><expr><call><name>JS_PROPERTY_CACHE</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call>.<name>inipcmisses</name>++</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get the immediate property name into id. */</comment>
        <expr_stmt><expr><call><name>LOAD_ATOM</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>id</name> = <call><name>ATOM_TO_JSID</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Set the property named by obj[id] to rval. */</comment>
        <if>if <condition>(<expr>!<call><name>js_CheckRedeclaration</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>JSPROP_INITIALIZER</name></expr></argument>,
                                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <goto>goto <name>error</name>;</goto>
        }</block></then></if>

        <decl_stmt><decl><type><name>uintN</name></type> <name>defineHow</name> <init>= <expr>(<name>op</name> == <name>JSOP_INITMETHOD</name>)
                          ? <name>JSDNP_CACHE_RESULT</name> | <name>JSDNP_SET_METHOD</name>
                          : <name>JSDNP_CACHE_RESULT</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!(<call><name>JS_UNLIKELY</name><argument_list>(<argument><expr><name>atom</name> == <name><name>cx</name>-&gt;<name>runtime</name>-&gt;<name>atomState</name>.<name>protoAtom</name></name></expr></argument>)</argument_list></call>
              ? <call><name>js_SetPropertyHelper</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>defineHow</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call>
              : <call><name>js_DefineNativeProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                        <argument><expr><name>JSPROP_ENUMERATE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                        <argument><expr><name>defineHow</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <goto>goto <name>error</name>;</goto>
        }</block></then></if>
    }</block></else></if>

    <comment type="block">/* Common tail for property cache hit and miss cases. */</comment>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>END_CASE</name><argument_list>(<argument><expr><name>JSOP_INITPROP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_INITELEM</argument>)</argument_list></macro>
    <comment type="block">/* Pop the element's value into rval. */</comment>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> - <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> &gt;= 3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Find the object being initialized at top of stack. */</comment>
    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Fetch id now that we have obj. */</comment>
    <expr_stmt><expr><call><name>FETCH_ELEMENT_ID</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Check for property redeclaration strict warning (we may be in an object
     * initialiser, not an array initialiser).
     */</comment>
    <if>if <condition>(<expr>!<call><name>js_CheckRedeclaration</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>JSPROP_INITIALIZER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>

    <comment type="block">/*
     * If rval is a hole, do not call JSObject::defineProperty. In this case,
     * obj must be an array, so if the current op is the last element
     * initialiser, set the array length to one greater than id.
     */</comment>
    <if>if <condition>(<expr><name>rval</name> == <name>JSVAL_HOLE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name><name>obj</name>-&gt;<name>isArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSID_IS_INT</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>jsuint</name><argument_list>(<argument><expr><call><name>JSID_TO_INT</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &lt; <name>JS_ARGS_LENGTH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>js_GetOpcode</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>pc</name></name> + <name>JSOP_INITELEM_LENGTH</name></expr></argument>)</argument_list></call> == <name>JSOP_ENDINIT</name> &amp;&amp;
            !<call><name>js_SetLengthProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call>(<name>jsuint</name>) <argument_list>(<argument><expr><call><name>JSID_TO_INT</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> + 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <goto>goto <name>error</name>;</goto>
        }</block></then></if>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>defineProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSPROP_ENUMERATE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block></else></if>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name> -= 2</expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_INITELEM</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_SHARP_VARS</name></expr></cpp:if>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DEFSHARP</argument>)</argument_list></macro>
    <expr_stmt><expr><name>slot</name> = <call><name>GET_UINT16</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> + 1 &lt; <name><name>fp</name>-&gt;<name>script</name>-&gt;<name>nfixed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lval</name> = <call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call><index>[<expr><name>slot</name></expr>]</index></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>obj</name> = <call><name>js_NewArrayObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
        <expr_stmt><expr><call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call><index>[<expr><name>slot</name></expr>]</index> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name>i</name> = (<name>jsint</name>) <call><name>GET_UINT16</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name> + <name>UINT16_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>id</name> = <call><name>INT_TO_JSID</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name></type> <name><name>numBuf</name><index>[<expr>12</expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>JS_snprintf</name><argument_list>(<argument><expr><name>numBuf</name></expr></argument>, <argument><expr>sizeof <name>numBuf</name></expr></argument>, <argument><expr>"%u"</expr></argument>, <argument><expr>(<name>unsigned</name>) <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><name>JSMSG_BAD_SHARP_DEF</name></expr></argument>, <argument><expr><name>numBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    }</block></then></if>
    <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>defineProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>JSPROP_ENUMERATE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_DEFSHARP</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_USESHARP</argument>)</argument_list></macro>
    <expr_stmt><expr><name>slot</name> = <call><name>GET_UINT16</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> + 1 &lt; <name><name>fp</name>-&gt;<name>script</name>-&gt;<name>nfixed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lval</name> = <call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call><index>[<expr><name>slot</name></expr>]</index></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> = (<name>jsint</name>) <call><name>GET_UINT16</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name> + <name>UINT16_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>rval</name> = <name>JSVAL_VOID</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call><index>[<expr><name>slot</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>id</name> = <call><name>INT_TO_JSID</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>getProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block></else></if>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_OBJECT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name></type> <name><name>numBuf</name><index>[<expr>12</expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>JS_snprintf</name><argument_list>(<argument><expr><name>numBuf</name></expr></argument>, <argument><expr>sizeof <name>numBuf</name></expr></argument>, <argument><expr>"%u"</expr></argument>, <argument><expr>(<name>unsigned</name>) <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ReportErrorNumber</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>js_GetErrorMessage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><name>JSMSG_BAD_SHARP_USE</name></expr></argument>, <argument><expr><name>numBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_USESHARP</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_SHARPINIT</argument>)</argument_list></macro>
    <expr_stmt><expr><name>slot</name> = <call><name>GET_UINT16</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> + 1 &lt; <name><name>fp</name>-&gt;<name>script</name>-&gt;<name>nfixed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vp</name> = &amp;<call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call><index>[<expr><name>slot</name></expr>]</index></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <name><name>vp</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>

    <comment type="block">/*
     * We peek ahead safely here because empty initialisers get zero
     * JSOP_SHARPINIT ops, and non-empty ones get two: the first comes
     * immediately after JSOP_NEWINIT followed by one or more property
     * initialisers; and the second comes directly before JSOP_ENDINIT.
     */</comment>
    <if>if <condition>(<expr><name><name>regs</name>.<name>pc</name><index>[<expr><name>JSOP_SHARPINIT_LENGTH</name></expr>]</index></name> != <name>JSOP_ENDINIT</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>rval</name> = <call><name>JSVAL_IS_VOID</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call> ? <name>JSVAL_ONE</name> : <name>rval</name> + 2</expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_INT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rval</name> -= 2</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rval</name> == <name>JSVAL_ZERO</name></expr>)</condition><then>
            <expr_stmt><expr><name><name>vp</name><index>[<expr>0</expr>]</index></name> = <name>JSVAL_VOID</name></expr>;</expr_stmt></then></if>
    }</block></else></if>
    <expr_stmt><expr><name><name>vp</name><index>[<expr>1</expr>]</index></name> = <name>rval</name></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_SHARPINIT</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JS_HAS_SHARP_VARS */</comment>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GOSUB</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>JSVAL_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> = (<name><name>regs</name>.<name>pc</name></name> - <name><name>script</name>-&gt;<name>main</name></name>) + <name>JSOP_GOSUB_LENGTH</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> = <call><name>GET_JUMP_OFFSET</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>END_VARLEN_CASE</name></type>

<name>BEGIN_CASE</name><argument_list>(<argument><expr><name>JSOP_GOSUBX</name></expr></argument>)</argument_list>
    <name>PUSH</name><argument_list>(<argument><expr><name>JSVAL_FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>i</name> = (<name><name>regs</name>.<name>pc</name></name> - <name><name>script</name>-&gt;<name>main</name></name>) + <name>JSOP_GOSUBX_LENGTH</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> = <call><name>GET_JUMPX_OFFSET</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><call><name>INT_TO_JSVAL</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>END_VARLEN_CASE</name></type>

<name>BEGIN_CASE</name><argument_list>(<argument><expr><name>JSOP_RETSUB</name></expr></argument>)</argument_list>
    <comment type="block">/* Pop [exception or hole, retsub pc-index]. */</comment>
    <name>rval</name> <init>= <expr><call><name>POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>lval</name> = <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_BOOLEAN</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_TO_BOOLEAN</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/*
         * Exception was pending during finally, throw it *before* we adjust
         * pc, because pc indexes into script-&gt;trynotes.  This turns out not to
         * be necessary, but it seems clearer.  And it points out a FIXME:
         * 350509, due to Igor Bukanov.
         */</comment>
        <expr_stmt><expr><name><name>cx</name>-&gt;<name>throwing</name></name> = <name>JS_TRUE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cx</name>-&gt;<name>exception</name></name> = <name>rval</name></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_INT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> = <call><name>JSVAL_TO_INT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>regs</name>.<name>pc</name></name> = <name><name>script</name>-&gt;<name>main</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>END_VARLEN_CASE</name></type>

<name>BEGIN_CASE</name><argument_list>(<argument><expr><name>JSOP_EXCEPTION</name></expr></argument>)</argument_list>
    <name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>throwing</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>exception</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>throwing</name></name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_BRANCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_EXCEPTION</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_FINALLY</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>CHECK_BRANCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_FINALLY</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_THROWING</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name><name>cx</name>-&gt;<name>throwing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>throwing</name></name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>exception</name></name> = <call><name>POP_OPND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_THROWING</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_THROW</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name><name>cx</name>-&gt;<name>throwing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_BRANCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>throwing</name></name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cx</name>-&gt;<name>exception</name></name> = <call><name>POP_OPND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* let the code at error try to catch the exception. */</comment>
    <goto>goto <name>error</name>;</goto>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_SETLOCALPOP</argument>)</argument_list></macro>
    <comment type="block">/*
     * The stack must have a block with at least one local slot below the
     * exception object.
     */</comment>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call>(<name>size_t</name>) <argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> - <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &gt;= 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>slot</name> = <call><name>GET_UINT16</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> + 1 &lt; <name><name>script</name>-&gt;<name>nslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call><index>[<expr><name>slot</name></expr>]</index> = <call><name>POP_OPND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_SETLOCALPOP</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_IFPRIMTOP</argument>)</argument_list></macro>
    <comment type="block">/*
     * If the top of stack is of primitive type, jump to our target. Otherwise
     * advance to the next opcode.
     */</comment>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> &gt; <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>len</name> = <call><name>GET_JUMP_OFFSET</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BRANCH</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_IFPRIMTOP</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_PRIMTOP</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> &gt; <call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> = <call><name>GET_INT8</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>js_ReportValueError2</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSMSG_CANT_CONVERT_TO</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr>(<name>i</name> == <name>JSTYPE_VOID</name>) ? "primitive type" : <call><name>JS_TYPE_STR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    }</block></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_PRIMTOP</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_OBJTOP</argument>)</argument_list></macro>
    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>js_ReportValueError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>GET_UINT16</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    }</block></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_OBJTOP</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_INSTANCEOF</argument>)</argument_list></macro>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>JSVAL_IS_PRIMITIVE</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call> ||
        !(<name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call>)-&gt;<name><name>map</name>-&gt;<name>ops</name>-&gt;<name>hasInstance</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>js_ReportValueError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSMSG_BAD_INSTANCEOF_RHS</name></expr></argument>,
                            <argument><expr>-1</expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cond</name> = <name>JS_FALSE</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>map</name>-&gt;<name>ops</name>-&gt;<name>hasInstance</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr>&amp;<name>cond</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>BOOLEAN_TO_JSVAL</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_INSTANCEOF</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_DEBUGGER_KEYWORD</name></expr></cpp:if>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DEBUGGER</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>JSTrapHandler</name></type> <name>handler</name> <init>= <expr><name><name>cx</name>-&gt;<name>debugHooks</name>-&gt;<name>debuggerHandler</name></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>handler</name></expr>)</condition><then> <block>{
        <switch>switch <condition>(<expr><call><name>handler</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>, <argument><expr><name><name>cx</name>-&gt;<name>debugHooks</name>-&gt;<name>debuggerHandlerData</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
        <case>case <expr><name>JSTRAP_ERROR</name></expr>:
            <goto>goto <name>error</name>;</goto>
        </case><case>case <expr><name>JSTRAP_CONTINUE</name></expr>:
            <break>break;</break>
        </case><case>case <expr><name>JSTRAP_RETURN</name></expr>:
            <expr_stmt><expr><name><name>fp</name>-&gt;<name>rval</name></name> = <name>rval</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
            <goto>goto <name>forced_return</name>;</goto>
        </case><case>case <expr><name>JSTRAP_THROW</name></expr>:
            <expr_stmt><expr><name><name>cx</name>-&gt;<name>throwing</name></name> = <name>JS_TRUE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cx</name>-&gt;<name>exception</name></name> = <name>rval</name></expr>;</expr_stmt>
            <goto>goto <name>error</name>;</goto>
        </case><default>default:<empty_stmt>;</empty_stmt>
        </default>}</block></switch>
        <expr_stmt><expr><call><name>CHECK_INTERRUPT_HANDLER</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_DEBUGGER</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JS_HAS_DEBUGGER_KEYWORD */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_XML_SUPPORT</name></expr></cpp:if>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DEFXMLNS</argument>)</argument_list></macro>
    <expr_stmt><expr><name>rval</name> = <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>js_SetDefaultXMLNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_DEFXMLNS</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ANYNAME</argument>)</argument_list></macro>
    <if>if <condition>(<expr>!<call><name>js_GetAnyName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_ANYNAME</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_QNAMEPART</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>LOAD_ATOM</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><call><name>ATOM_KEY</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_QNAMEPART</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_QNAMECONST</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>LOAD_ATOM</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>ATOM_KEY</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>js_ConstructXMLQNameObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_QNAMECONST</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_QNAME</argument>)</argument_list></macro>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>js_ConstructXMLQNameObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_QNAME</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_TOATTRNAME</argument>)</argument_list></macro>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>js_ToAttributeName</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_TOATTRNAME</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_TOATTRVAL</argument>)</argument_list></macro>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>JSVAL_IS_STRING</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name> = <call><name>js_EscapeAttributeValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>JS_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_TOATTRVAL</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ADDATTRNAME</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ADDATTRVAL</argument>)</argument_list></macro>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name> = <call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>str2</name> = <call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name> = <call><name>js_AddAttributePart</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>op</name> == <name>JSOP_ADDATTRNAME</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_ADDATTRNAME</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_BINDXMLNAME</argument>)</argument_list></macro>
    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>js_FindXMLProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr>&amp;<name>obj</name></expr></argument>, <argument><expr>&amp;<name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><call><name>ID_TO_VALUE</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_BINDXMLNAME</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_SETXMLNAME</argument>)</argument_list></macro>
    <expr_stmt><expr><name>obj</name> = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><call><name>FETCH_OPND</name><argument_list>(<argument><expr>-3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FETCH_ELEMENT_ID</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>setProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name> -= 2</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_SETXMLNAME</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_CALLXMLNAME</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_XMLNAME</argument>)</argument_list></macro>
    <expr_stmt><expr><name>lval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>js_FindXMLProperty</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr>&amp;<name>obj</name></expr></argument>, <argument><expr>&amp;<name>id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <if>if <condition>(<expr>!<call><name><name>obj</name>-&gt;<name>getProperty</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>op</name> == <name>JSOP_CALLXMLNAME</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_XMLNAME</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DESCENDANTS</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_DELDESC</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>FETCH_OBJECT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr><name>lval</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>js_GetXMLDescendants</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>

    <if>if <condition>(<expr><name>op</name> == <name>JSOP_DELDESC</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name> = <name>rval</name></expr>;</expr_stmt>          <comment type="block">/* set local root */</comment>
        <if>if <condition>(<expr>!<call><name>js_DeleteXMLListElements</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
        <expr_stmt><expr><name>rval</name> = <name>JSVAL_TRUE</name></expr>;</expr_stmt>      <comment type="block">/* always succeed */</comment>
    }</block></then></if>

    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_DESCENDANTS</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_FILTER</argument>)</argument_list></macro>
    <comment type="block">/*
     * We push the hole value before jumping to [enditer] so we can detect the
     * first iteration and direct js_StepXMLListFilter to initialize filter's
     * state.
     */</comment>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>JSVAL_HOLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> = <call><name>GET_JUMP_OFFSET</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>len</name> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>END_VARLEN_CASE</name></type>

<name>BEGIN_CASE</name><argument_list>(<argument><expr><name>JSOP_ENDFILTER</name></expr></argument>)</argument_list>
    <name>cond</name> <init>= <expr>(<name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name> != <name>JSVAL_HOLE</name>)</expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>cond</name></expr>)</condition><then> <block>{
        <comment type="block">/* Exit the "with" block left from the previous iteration. */</comment>
        <expr_stmt><expr><call><name>js_LeaveWith</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr>!<call><name>js_StepXMLListFilter</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <if>if <condition>(<expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name> != <name>JSVAL_NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/*
         * Decrease sp after EnterWith returns as we use sp[-1] there to root
         * temporaries.
         */</comment>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>VALUE_IS_XML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>regs</name>.<name>sp</name><index>[<expr>-1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>js_EnterWith</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>-2</expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
        <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> = <call><name>GET_JUMP_OFFSET</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>len</name> &lt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BRANCH</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
<expr_stmt><expr><call><name>END_CASE</name><argument_list>(<argument><expr><name>JSOP_ENDFILTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_TOXML</argument>)</argument_list></macro>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>js_ValueToXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_TOXML</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_TOXMLLIST</argument>)</argument_list></macro>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>js_ValueToXMLListObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_TOXMLLIST</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_XMLTAGEXPR</argument>)</argument_list></macro>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_XMLTAGEXPR</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_XMLELTEXPR</argument>)</argument_list></macro>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>VALUE_IS_XML</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>str</name> = <call><name>js_ValueToXMLString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>str</name> = <call><name>js_ValueToString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>str</name></expr>)</condition><then>
            <expr_stmt><expr><name>str</name> = <call><name>js_EscapeElementValue</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></else></if>
    <if>if <condition>(<expr>!<name>str</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>STRING_TO_JSVAL</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_XMLELTEXPR</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_XMLOBJECT</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>LOAD_OBJECT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>js_CloneXMLObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_XMLOBJECT</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_XMLCDATA</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>LOAD_ATOM</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name> = <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>js_NewXMLSpecialObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_TEXT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_XMLCDATA</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_XMLCOMMENT</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>LOAD_ATOM</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name> = <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>js_NewXMLSpecialObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_COMMENT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_XMLCOMMENT</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_XMLPI</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>LOAD_ATOM</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name> = <call><name>ATOM_TO_STRING</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>str2</name> = <call><name>JSVAL_TO_STRING</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>js_NewXMLSpecialObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSXML_CLASS_PROCESSING_INSTRUCTION</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_XMLPI</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GETFUNNS</argument>)</argument_list></macro>
    <if>if <condition>(<expr>!<call><name>js_GetFunctionNamespace</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr>&amp;<name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_GETFUNNS</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JS_HAS_XML_SUPPORT */</comment>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ENTERBLOCK</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>LOAD_OBJECT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>OBJ_IS_CLONED_BLOCK</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> + <call><name>OBJ_BLOCK_DEPTH</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call> == <name><name>regs</name>.<name>sp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vp</name> = <name><name>regs</name>.<name>sp</name></name> + <call><name>OBJ_BLOCK_COUNT</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>regs</name>.<name>sp</name></name> &lt; <name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>vp</name> &lt;= <call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call> + <name><name>script</name>-&gt;<name>nslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name><name>regs</name>.<name>sp</name></name> &lt; <name>vp</name></expr>)</condition> <block>{
        <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>JSVAL_VOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>++</expr>;</expr_stmt>
    }</block></while>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>fp</name>-&gt;<name>blockChain</name></name> == <call><name><name>obj</name>-&gt;<name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * The young end of fp-&gt;scopeChain may omit blocks if we haven't closed
     * over them, but if there are any closure blocks on fp-&gt;scopeChain, they'd
     * better be (clones of) ancestors of the block we're entering now;
     * anything else we should have popped off fp-&gt;scopeChain when we left its
     * static scope.
     */</comment>
    <expr_stmt><expr><name>obj2</name> = <name><name>fp</name>-&gt;<name>scopeChain</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr>(<name>clasp</name> = <call><name><name>obj2</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call>) == &amp;<name>js_WithClass</name></expr>)</condition>
        <expr_stmt><expr><name>obj2</name> = <call><name><name>obj2</name>-&gt;<name>getParent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></while>
    <if>if <condition>(<expr><name>clasp</name> == &amp;<name>js_BlockClass</name> &amp;&amp;
        <call><name><name>obj2</name>-&gt;<name>getPrivate</name></name><argument_list>()</argument_list></call> == <call><name>js_FloatingFrameIfGenerator</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>JSObject</name> *</type><name>youngestProto</name> <init>= <expr><call><name><name>obj2</name>-&gt;<name>getProto</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>OBJ_IS_CLONED_BLOCK</name><argument_list>(<argument><expr><name>youngestProto</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>parent</name> = <name>obj</name></expr>;</expr_stmt>
        <while>while <condition>(<expr>(<name>parent</name> = <call><name><name>parent</name>-&gt;<name>getParent</name></name><argument_list>()</argument_list></call>) != <name>youngestProto</name></expr>)</condition>
            <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>fp</name>-&gt;<name>blockChain</name></name> = <name>obj</name></expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_ENTERBLOCK</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_LEAVEBLOCKEXPR</argument>)</argument_list></macro>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_LEAVEBLOCK</argument>)</argument_list></macro>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name><name>fp</name>-&gt;<name>blockChain</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call> == &amp;<name>js_BlockClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uintN</name></type> <name>blockDepth</name> <init>= <expr><call><name>OBJ_BLOCK_DEPTH</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>fp</name>-&gt;<name>blockChain</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>blockDepth</name> &lt;= <call><name>StackDepth</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="block">/*
     * If we're about to leave the dynamic scope of a block that has been
     * cloned onto fp-&gt;scopeChain, clear its private data, move its locals from
     * the stack into the clone, and pop it off the chain.
     */</comment>
    <expr_stmt><expr><name>obj</name> = <name><name>fp</name>-&gt;<name>scopeChain</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name><name>obj</name>-&gt;<name>getProto</name></name><argument_list>()</argument_list></call> == <name><name>fp</name>-&gt;<name>blockChain</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name><name>obj</name>-&gt;<name>getClass</name></name><argument_list>()</argument_list></call> == &amp;<name>js_BlockClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>js_PutBlockObject</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JS_TRUE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
    }</block></then></if>

    <comment type="block">/* Pop the block chain, too.  */</comment>
    <expr_stmt><expr><name><name>fp</name>-&gt;<name>blockChain</name></name> = <call><name><name>fp</name>-&gt;<name>blockChain</name>-&gt;<name>getParent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Move the result of the expression to the new topmost stack slot. */</comment>
    <if>if <condition>(<expr><name>op</name> == <name>JSOP_LEAVEBLOCKEXPR</name></expr>)</condition><then>
        <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name> -= <call><name>GET_UINT16</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>op</name> == <name>JSOP_LEAVEBLOCKEXPR</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> + <name>blockDepth</name> == <name><name>regs</name>.<name>sp</name></name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>StackBase</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> + <name>blockDepth</name> == <name><name>regs</name>.<name>sp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_LEAVEBLOCK</argument>)</argument_list></macro>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_CALLBUILTIN</argument>)</argument_list></macro>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JS_TRACER</name></cpp:ifdef>
    <expr_stmt><expr><name>obj</name> = <call><name>GetBuiltinFunction</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><call><name>GET_INDEX</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUSH_OPND</name><argument_list>(<argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STORE_OPND</name><argument_list>(<argument><expr>-2</expr></argument>, <argument><expr><call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <goto>goto <name>bad_opcode</name>;</goto>  <comment type="block">/* This is an imacro-only opcode. */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_CALLBUILTIN</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_HAS_GENERATORS</name></expr></cpp:if>
<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_GENERATOR</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>ASSERT_NOT_THROWING</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>regs</name>.<name>pc</name></name> += <name>JSOP_GENERATOR_LENGTH</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name> = <call><name>js_NewGenerator</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>obj</name></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name><name>fp</name>-&gt;<name>callobj</name></name> &amp;&amp; !<name><name>fp</name>-&gt;<name>argsobj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fp</name>-&gt;<name>rval</name></name> = <call><name>OBJECT_TO_JSVAL</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>inlineCallCount</name> != 0</expr>)</condition><then>
        <goto>goto <name>inline_return</name>;</goto></then></if>
    <goto>goto <name>exit</name>;</goto>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_YIELD</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>ASSERT_NOT_THROWING</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name><name>cx</name>-&gt;<name>generatorFor</name></name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call>-&gt;<name>state</name> == <name>JSGEN_CLOSING</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>js_ReportValueError</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>JSMSG_BAD_GENERATOR_YIELD</name></expr></argument>,
                            <argument><expr><name>JSDVG_SEARCH_STACK</name></expr></argument>, <argument><expr><name><name>fp</name>-&gt;<name>argv</name><index>[<expr>-2</expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><name><name>fp</name>-&gt;<name>rval</name></name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fp</name>-&gt;<name>flags</name></name> |= <name>JSFRAME_YIELDING</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>regs</name>.<name>pc</name></name> += <name>JSOP_YIELD_LENGTH</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ok</name> = <name>JS_TRUE</name></expr>;</expr_stmt>
    <goto>goto <name>exit</name>;</goto>

<macro><name>BEGIN_CASE</name><argument_list>(<argument>JSOP_ARRAYPUSH</argument>)</argument_list></macro>
    <expr_stmt><expr><name>slot</name> = <call><name>GET_UINT16</name><argument_list>(<argument><expr><name><name>regs</name>.<name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>script</name>-&gt;<name>nfixed</name></name> &lt;= <name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>slot</name> &lt; <name><name>script</name>-&gt;<name>nslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lval</name> = <call><name><name>fp</name>-&gt;<name>slots</name></name><argument_list>()</argument_list></call><index>[<expr><name>slot</name></expr>]</index></expr>;</expr_stmt>
    <expr_stmt><expr><name>obj</name>  = <call><name>JSVAL_TO_OBJECT</name><argument_list>(<argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rval</name> = <call><name>FETCH_OPND</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>js_ArrayCompPush</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    <expr_stmt><expr><name><name>regs</name>.<name>sp</name></name>--</expr>;</expr_stmt>
<macro><name>END_CASE</name><argument_list>(<argument>JSOP_ARRAYPUSH</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* JS_HAS_GENERATORS */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JS_THREADED_INTERP</name></expr></cpp:if>
  <label><name>L_JSOP_BACKPATCH</name>:</label>
  <label><name>L_JSOP_BACKPATCH_POP</name>:</label>

<cpp:if># <cpp:directive>if</cpp:directive> <expr>!<name>JS_HAS_GENERATORS</name></expr></cpp:if>
  <label><name>L_JSOP_GENERATOR</name>:</label>
  <label><name>L_JSOP_YIELD</name>:</label>
  <label><name>L_JSOP_ARRAYPUSH</name>:</label>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if># <cpp:directive>if</cpp:directive> <expr>!<name>JS_HAS_SHARP_VARS</name></expr></cpp:if>
  <label><name>L_JSOP_DEFSHARP</name>:</label>
  <label><name>L_JSOP_USESHARP</name>:</label>
  <label><name>L_JSOP_SHARPINIT</name>:</label>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if># <cpp:directive>if</cpp:directive> <expr>!<name>JS_HAS_DESTRUCTURING</name></expr></cpp:if>
  <label><name>L_JSOP_ENUMCONSTELEM</name>:</label>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if># <cpp:directive>if</cpp:directive> <expr>!<name>JS_HAS_XML_SUPPORT</name></expr></cpp:if>
  <label><name>L_JSOP_CALLXMLNAME</name>:</label>
  <label><name>L_JSOP_STARTXMLEXPR</name>:</label>
  <label><name>L_JSOP_STARTXML</name>:</label>
  <label><name>L_JSOP_DELDESC</name>:</label>
  <label><name>L_JSOP_GETFUNNS</name>:</label>
  <label><name>L_JSOP_XMLPI</name>:</label>
  <label><name>L_JSOP_XMLCOMMENT</name>:</label>
  <label><name>L_JSOP_XMLCDATA</name>:</label>
  <label><name>L_JSOP_XMLOBJECT</name>:</label>
  <label><name>L_JSOP_XMLELTEXPR</name>:</label>
  <label><name>L_JSOP_XMLTAGEXPR</name>:</label>
  <label><name>L_JSOP_TOXMLLIST</name>:</label>
  <label><name>L_JSOP_TOXML</name>:</label>
  <label><name>L_JSOP_ENDFILTER</name>:</label>
  <label><name>L_JSOP_FILTER</name>:</label>
  <label><name>L_JSOP_DESCENDANTS</name>:</label>
  <label><name>L_JSOP_XMLNAME</name>:</label>
  <label><name>L_JSOP_SETXMLNAME</name>:</label>
  <label><name>L_JSOP_BINDXMLNAME</name>:</label>
  <label><name>L_JSOP_ADDATTRVAL</name>:</label>
  <label><name>L_JSOP_ADDATTRNAME</name>:</label>
  <label><name>L_JSOP_TOATTRVAL</name>:</label>
  <label><name>L_JSOP_TOATTRNAME</name>:</label>
  <label><name>L_JSOP_QNAME</name>:</label>
  <label><name>L_JSOP_QNAMECONST</name>:</label>
  <label><name>L_JSOP_QNAMEPART</name>:</label>
  <label><name>L_JSOP_ANYNAME</name>:</label>
  <label><name>L_JSOP_DEFXMLNS</name>:</label></case>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !JS_THREADED_INTERP */</comment>
</unit>
