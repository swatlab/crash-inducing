<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="003c6c467f9df47c138c329b7abee31a8d9519fb.h"><comment type="block">/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Places code.
 *
 * The Initial Developer of the Original Code is
 * Google Inc.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Brett Wilson &lt;brettw@gmail.com&gt; (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>nsNavHistory_h_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nsNavHistory_h_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozIStorageService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozIStorageConnection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozIStorageValueArray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozIStorageStatement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAutoPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMArray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDataHashtable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsINavHistoryService.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_XUL</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIAutoCompleteSearch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIAutoCompleteResult.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIAutoCompleteSimpleResult.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIBrowserHistory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsICollation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDateTimeFormat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIGlobalHistory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIGlobalHistory3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDownloadHistory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefBranch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIObserver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIObserverService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsServiceManagerUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIStringBundle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsITimer.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_XUL</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsITreeSelection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsITreeView.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsVoidArray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsWeakReference.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsTArray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsINavBookmarksService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsMaybeWeakPtr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNavHistoryExpire.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNavHistoryResult.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNavHistoryQuery.h"</cpp:file></cpp:include>

<comment type="line">// set to use more optimized (in-memory database) link coloring</comment>
<comment type="line">//#define IN_MEMORY_LINKS</comment>

<comment type="line">// define to enable lazy link adding</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAZY_ADD</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUERYUPDATE_TIME</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUERYUPDATE_SIMPLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUERYUPDATE_COMPLEX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUERYUPDATE_COMPLEX_WITH_BOOKMARKS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<comment type="line">// this is a work-around for a problem with the optimizer of sqlite</comment>
<comment type="line">// A sub-select on MAX(visit_date) is slower than this query with our indexes</comment>
<comment type="line">// see Bug #392399 for more details</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQL_STR_FRAGMENT_MAX_VISIT_DATE</name><parameter_list>( <param><type><name>place_relation</name></type></param> )</parameter_list></cpp:macro> \
  <cpp:value>"(SELECT visit_date FROM moz_historyvisits WHERE place_id = " place_relation \
  " AND visit_type NOT IN (0,4) ORDER BY visit_date DESC LIMIT 1)"</cpp:value></cpp:define>

<struct_decl>struct <name>AutoCompleteIntermediateResult</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>AutoCompleteResultComparator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>mozIAnnotationService</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>nsNavHistory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>nsNavBookmarks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QueryKeyValuePair</name></decl>;</decl_stmt>

<comment type="line">// nsNavHistory</comment>

<expr_stmt><expr><name>class</name> <name>nsNavHistory</name> : <name>public</name> <name>nsSupportsWeakReference</name></expr>,
                     <expr><name>public</name> <name>nsINavHistoryService</name></expr>,
                     <expr><name>public</name> <name>nsIObserver</name></expr>,
                     <expr><name>public</name> <name>nsIBrowserHistory</name></expr>,
                     <expr><name>public</name> <name>nsIGlobalHistory3</name></expr>,
                     <expr><name>public</name> <name>nsIDownloadHistory</name></expr>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_XUL</name></cpp:ifdef>
                     , <expr><name>public</name> <name>nsIAutoCompleteSearch</name></expr>,
                     <expr><name>public</name> <name>nsIAutoCompleteSimpleResultListener</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
  <expr><name>friend</name> <name>class</name> <name>AutoCompleteIntermediateResultSet</name></expr>;
  <expr><name>friend</name> <name>class</name> <name>AutoCompleteResultComparator</name></expr>;
<expr><name>public</name>:
  <call><name>nsNavHistory</name><argument_list>()</argument_list></call></expr>;

  <expr><name>NS_DECL_ISUPPORTS</name>

  <name>NS_DECL_NSINAVHISTORYSERVICE</name>
  <name>NS_DECL_NSIGLOBALHISTORY2</name>
  <name>NS_DECL_NSIGLOBALHISTORY3</name>
  <name>NS_DECL_NSIDOWNLOADHISTORY</name>
  <name>NS_DECL_NSIBROWSERHISTORY</name>
  <name>NS_DECL_NSIOBSERVER</name>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_XUL</name></cpp:ifdef>
  <name>NS_DECL_NSIAUTOCOMPLETESEARCH</name>
  <name>NS_DECL_NSIAUTOCOMPLETESIMPLERESULTLISTENER</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <name>nsresult</name> <call><name>Init</name><argument_list>()</argument_list></call></expr>;

  <comment type="block">/**
   * Used by other components in the places directory such as the annotation
   * service to get a reference to this history object. Returns a pointer to
   * the service if it exists. Otherwise creates one. Returns NULL on error.
   */</comment>
  <expr>static <name>nsNavHistory</name>* <macro><name>GetHistoryService</name><argument_list>()</argument_list></macro>
  <block>{
    <if>if <condition>(<expr>! <name>gHistoryService</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsINavHistoryService</name>&gt; <call><name>serv</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/browser/nav-history-service;1"</expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// our constructor should have set the static variable. If it didn't,</comment>
      <comment type="line">// something is wrong.</comment>
      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>gHistoryService</name></expr></argument>, <argument><expr>"History service creation failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block></then></if>}</block></expr>
    <return>return <expr><name>gHistoryService</name></expr>;</return>
  }</block></expr></expr_stmt>

  <comment type="block">/**
   * Call this function before doing any database reads. It will ensure that
   * any data not flushed to the DB yet is flushed.
   */</comment>
  <function><type><name>void</name></type> <name>SyncDB</name><parameter_list>()</parameter_list>
  <block>{
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LAZY_ADD</name></cpp:ifdef>
      <expr_stmt><expr><call><name>CommitLazyMessages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  }</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LAZY_ADD</name></cpp:ifdef>
  <comment type="block">/**
   * Adds a lazy message for adding a favicon. Used by the favicon service so
   * that favicons are handled lazily just like page adds.
   */</comment>
  <function_decl><type><name>nsresult</name></type> <name>AddLazyLoadFaviconMessage</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aPage</name></decl></param>, <param><decl><type><name>nsIURI</name>*</type> <name>aFavicon</name></decl></param>,
                                     <param><decl><type><name>PRBool</name></type> <name>aForceReload</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/**
   * Returns the database ID for the given URI, or 0 if not found and autoCreate
   * is false.
   */</comment>
  <function_decl><type><name>nsresult</name></type> <name>GetUrlIdFor</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>, <param><decl><type><name>PRInt64</name>*</type> <name>aEntryID</name></decl></param>,
                       <param><decl><type><name>PRBool</name></type> <name>aAutoCreate</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>nsresult</name></type> <name>CalculateVisitCount</name><parameter_list>(<param><decl><type><name>PRInt64</name></type> <name>aPlaceId</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aForFrecency</name></decl></param>, <param><decl><type><name>PRInt32</name> *</type><name>aVisitCount</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>nsresult</name></type> <name>UpdateFrecency</name><parameter_list>(<param><decl><type><name>PRInt64</name></type> <name>aPageID</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>isBookmark</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>nsresult</name></type> <name>FixInvalidFrecenciesForExcludedPlaces</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="block">/**
   * Returns a pointer to the storage connection used by history. This
   * connection object is also used by the annotation service and bookmarks, so
   * that things can be grouped into transactions across these components.
   *
   * NOT ADDREFed.
   *
   * This connection can only be used in the thread that created it the
   * history service!
   */</comment>
  <function><type><name>mozIStorageConnection</name>*</type> <name>GetStorageConnection</name><parameter_list>()</parameter_list>
  <block>{
    <return>return <expr><name>mDBConn</name></expr>;</return>
  }</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IN_MEMORY_LINKS</name></cpp:ifdef>
  <function><type><name>mozIStorageConnection</name>*</type> <name>GetMemoryStorageConnection</name><parameter_list>()</parameter_list>
  <block>{
    <return>return <expr><name>mMemDBConn</name></expr>;</return>
  }</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/**
   * These functions return non-owning references to the locale-specific
   * objects for places components. Guaranteed to return non-NULL.
   */</comment>
  <function><type><name>nsIStringBundle</name>*</type> <name>GetBundle</name><parameter_list>()</parameter_list>
    <block>{ <return>return <expr><name>mBundle</name></expr>;</return> }</block></function>
  <function><type><name>nsILocale</name>*</type> <name>GetLocale</name><parameter_list>()</parameter_list>
    <block>{ <return>return <expr><name>mLocale</name></expr>;</return> }</block></function>
  <function><type><name>nsICollation</name>*</type> <name>GetCollation</name><parameter_list>()</parameter_list>
    <block>{ <return>return <expr><name>mCollation</name></expr>;</return> }</block></function>
  <function><type><name>nsIDateTimeFormat</name>*</type> <name>GetDateFormatter</name><parameter_list>()</parameter_list>
    <block>{ <return>return <expr><name>mDateFormatter</name></expr>;</return> }</block></function>

  <comment type="line">// returns true if history has been disabled</comment>
  <function><type><name>PRBool</name></type> <name>IsHistoryDisabled</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>mExpireDaysMax</name> == 0</expr>;</return> }</block></function>

  <comment type="line">// get the statement for selecting a history row by URL</comment>
  <function><type><name>mozIStorageStatement</name>*</type> <name>DBGetURLPageInfo</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>mDBGetURLPageInfo</name></expr>;</return> }</block></function>

  <comment type="line">// Constants for the columns returned by the above statement.</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name>kGetInfoIndex_PageID</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name>kGetInfoIndex_URL</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name>kGetInfoIndex_Title</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name>kGetInfoIndex_RevHost</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name>kGetInfoIndex_VisitCount</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name>kGetInfoIndex_ItemId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name>kGetInfoIndex_ItemDateAdded</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name>kGetInfoIndex_ItemLastModified</name></decl>;</decl_stmt>

  <comment type="line">// select a history row by id</comment>
  <function><type><name>mozIStorageStatement</name>*</type> <name>DBGetIdPageInfo</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>mDBGetIdPageInfo</name></expr>;</return> }</block></function>

  <comment type="line">// Constants for the columns returned by the above statement</comment>
  <comment type="line">// (in addition to the ones above).</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name>kGetInfoIndex_VisitDate</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name>kGetInfoIndex_FaviconURL</name></decl>;</decl_stmt>

  <comment type="line">// used in execute queries to get session ID info (only for visits)</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name>kGetInfoIndex_SessionId</name></decl>;</decl_stmt>

  <comment type="line">// this actually executes a query and gives you results, it is used by</comment>
  <comment type="line">// nsNavHistoryQueryResultNode</comment>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>GetQueryResults</name><argument_list>(<argument><expr><name>nsNavHistoryQueryResultNode</name> *<name>aResultNode</name></expr></argument>,
                           <argument><expr>const <name>nsCOMArray</name>&lt;<name>nsNavHistoryQuery</name>&gt;&amp; <name>aQueries</name></expr></argument>,
                           <argument><expr><name>nsNavHistoryQueryOptions</name> *<name>aOptions</name></expr></argument>,
                           <argument><expr><name>nsCOMArray</name>&lt;<name>nsNavHistoryResultNode</name>&gt;* <name>aResults</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Take a row of kGetInfoIndex_* columns and construct a ResultNode.</comment>
  <comment type="line">// The row must contain the full set of columns.</comment>
  <function_decl><type><name>nsresult</name></type> <name>RowToResult</name><parameter_list>(<param><decl><type><name>mozIStorageValueArray</name>*</type> <name>aRow</name></decl></param>,
                       <param><decl><type><name>nsNavHistoryQueryOptions</name>*</type> <name>aOptions</name></decl></param>,
                       <param><decl><type><name>nsNavHistoryResultNode</name>**</type> <name>aResult</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>nsresult</name></type> <name>QueryRowToResult</name><parameter_list>(<param><decl><type><name>PRInt64</name></type> <name>aItemId</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aURI</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aTitle</name></decl></param>,
                            <param><decl><type><name>PRUint32</name></type> <name>aAccessCount</name></decl></param>, <param><decl><type><name>PRTime</name></type> <name>aTime</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aFavicon</name></decl></param>,
                            <param><decl><type><name>nsNavHistoryResultNode</name>**</type> <name>aNode</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>nsresult</name></type> <name>VisitIdToResultNode</name><parameter_list>(<param><decl><type><name>PRInt64</name></type> <name>visitId</name></decl></param>,
                               <param><decl><type><name>nsNavHistoryQueryOptions</name>*</type> <name>aOptions</name></decl></param>,
                               <param><decl><type><name>nsNavHistoryResultNode</name>**</type> <name>aResult</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>nsresult</name></type> <name>BookmarkIdToResultNode</name><parameter_list>(<param><decl><type><name>PRInt64</name></type> <name>aBookmarkId</name></decl></param>,
                                  <param><decl><type><name>nsNavHistoryQueryOptions</name>*</type> <name>aOptions</name></decl></param>,
                                  <param><decl><type><name>nsNavHistoryResultNode</name>**</type> <name>aResult</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// used by other places components to send history notifications (for example,</comment>
  <comment type="line">// when the favicon has changed)</comment>
  <function><type><name>void</name></type> <name>SendPageChangedNotification</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aWhat</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>)</parameter_list>
  <block>{
    <expr_stmt><expr><call><name>ENUMERATE_WEAKARRAY</name><argument_list>(<argument><expr><name>mObservers</name></expr></argument>, <argument><expr><name>nsINavHistoryObserver</name></expr></argument>,
                        <argument><expr><call><name>OnPageChanged</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><name>aWhat</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="line">// current time optimization</comment>
  <function_decl><type><name>PRTime</name></type> <name>GetNow</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// well-known annotations used by the history and bookmarks systems</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>kAnnotationPreviousEncoding</name><index>[]</index></name></decl>;</decl_stmt>

  <comment type="line">// used by query result nodes to update: see comment on body of CanLiveUpdateQuery</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>PRUint32</name></type> <name>GetUpdateRequirements</name><argument_list>(<argument><expr>const <name>nsCOMArray</name>&lt;<name>nsNavHistoryQuery</name>&gt;&amp; <name>aQueries</name></expr></argument>,
                                        <argument><expr><name>nsNavHistoryQueryOptions</name>* <name>aOptions</name></expr></argument>,
                                        <argument><expr><name>PRBool</name>* <name>aHasSearchTerms</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>EvaluateQueryForNode</name><argument_list>(<argument><expr>const <name>nsCOMArray</name>&lt;<name>nsNavHistoryQuery</name>&gt;&amp; <name>aQueries</name></expr></argument>,
                              <argument><expr><name>nsNavHistoryQueryOptions</name>* <name>aOptions</name></expr></argument>,
                              <argument><expr><name>nsNavHistoryResultNode</name>* <name>aNode</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function_decl><type><specifier>static</specifier> <name>nsresult</name></type> <name>AsciiHostNameFromHostString</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aHostName</name></decl></param>,
                                              <param><decl><type><name>nsACString</name>&amp;</type> <name>aAscii</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DomainNameFromHostName</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsCString</name>&amp;</type> <name>aHostName</name></decl></param>,
                                     <param><decl><type><name>nsACString</name>&amp;</type> <name>aDomainName</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>PRTime</name></type> <name>NormalizeTime</name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aRelative</name></decl></param>, <param><decl><type><name>PRTime</name></type> <name>aOffset</name></decl></param>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>RecursiveGroup</name><argument_list>(<argument><expr><name>nsNavHistoryQueryResultNode</name> *<name>aResultNode</name></expr></argument>,
                          <argument><expr>const <name>nsCOMArray</name>&lt;<name>nsNavHistoryResultNode</name>&gt;&amp; <name>aSource</name></expr></argument>,
                          <argument><expr>const <name>PRUint16</name>* <name>aGroupingMode</name></expr></argument>, <argument><expr><name>PRUint32</name> <name>aGroupCount</name></expr></argument>,
                          <argument><expr><name>nsCOMArray</name>&lt;<name>nsNavHistoryResultNode</name>&gt;* <name>aDest</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Don't use these directly, inside nsNavHistory use UpdateBatchScoper,</comment>
  <comment type="line">// else use nsINavHistoryService::RunInBatchMode</comment>
  <function_decl><type><name>nsresult</name></type> <name>BeginUpdateBatch</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>nsresult</name></type> <name>EndUpdateBatch</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// the level of nesting of batches, 0 when no batches are open</comment>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mBatchLevel</name></decl>;</decl_stmt>

  <comment type="line">// lock for RunInBatchMode</comment>
  <decl_stmt><decl><type><name>PRLock</name>*</type> <name>mLock</name></decl>;</decl_stmt>

  <comment type="line">// true if the outermost batch has an associated transaction that should</comment>
  <comment type="line">// be committed when our batch level reaches 0 again.</comment>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>mBatchHasTransaction</name></decl>;</decl_stmt>

  <comment type="line">// better alternative to QueryStringToQueries (in nsNavHistoryQuery.cpp)</comment>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>QueryStringToQueryArray</name><argument_list>(<argument><expr>const <name>nsACString</name>&amp; <name>aQueryString</name></expr></argument>,
                                   <argument><expr><name>nsCOMArray</name>&lt;<name>nsNavHistoryQuery</name>&gt;* <name>aQueries</name></expr></argument>,
                                   <argument><expr><name>nsNavHistoryQueryOptions</name>** <name>aOptions</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// Import-friendly version of SetPageDetails + AddVisit.</comment>
  <comment type="line">// This method adds a page to history along with a single last visit.</comment>
  <comment type="line">// It is an error to call this method if aURI might already be in history.</comment>
  <comment type="line">// The given aVisitCount should include the given last-visit date.</comment>
  <comment type="line">// aLastVisitDate can be -1 if there is no last visit date to record.</comment>
  <comment type="line">//</comment>
  <comment type="line">// NOTE: This will *replace* existing records for a given URI, creating a</comment>
  <comment type="line">// new place id, and breaking all existing relationships with for that</comment>
  <comment type="line">// id, eg: bookmarks, annotations, tags, etc. This is only for use by</comment>
  <comment type="line">// the import of history.dat on first-run of Places, which currently occurs</comment>
  <comment type="line">// if no places.sqlite file previously exists.</comment>
  <function_decl><type><name>nsresult</name></type> <name>AddPageWithVisit</name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>nsString</name> &amp;</type><name>aTitle</name></decl></param>,
                            <param><decl><type><name>PRBool</name></type> <name>aHidden</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aTyped</name></decl></param>,
                            <param><decl><type><name>PRInt32</name></type> <name>aVisitCount</name></decl></param>,
                            <param><decl><type><name>PRInt32</name></type> <name>aLastVisitTransition</name></decl></param>,
                            <param><decl><type><name>PRTime</name></type> <name>aLastVisitDate</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// Checks the database for any duplicate URLs.  If any are found,</comment>
  <comment type="line">// all but the first are removed.  This must be called after using</comment>
  <comment type="line">// AddPageWithVisit, to ensure that the database is in a consistent state.</comment>
  <function_decl><type><name>nsresult</name></type> <name>RemoveDuplicateURIs</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// sets the schema version in the database to match SCHEMA_VERSION</comment>
  <function_decl><type><name>nsresult</name></type> <name>UpdateSchemaVersion</name><parameter_list>()</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <expr_stmt><expr>~<call><name>nsNavHistory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// used by GetHistoryService</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>nsNavHistory</name>*</type> <name>gHistoryService</name></decl>;</decl_stmt>

<label><name>protected</name>:</label>

  <comment type="line">//</comment>
  <comment type="line">// Constants</comment>
  <comment type="line">//</comment>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIPrefBranch</name>&gt; <name>mPrefBranch</name></expr>;</expr_stmt> <comment type="line">// MAY BE NULL when we are shutting down</comment>
  <expr_stmt><expr><name>nsDataHashtable</name>&lt;<name>nsStringHashKey</name></expr>, <expr><name>int</name>&gt; <name>gExpandedItems</name></expr>;</expr_stmt>

  <comment type="line">//</comment>
  <comment type="line">// Database stuff</comment>
  <comment type="line">//</comment>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageService</name>&gt; <name>mDBService</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageConnection</name>&gt; <name>mDBConn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIFile</name>&gt; <name>mDBFile</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBGetURLPageInfo</name></expr>;</expr_stmt>   <comment type="line">// kGetInfoIndex_* results</comment>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBGetIdPageInfo</name></expr>;</expr_stmt>     <comment type="line">// kGetInfoIndex_* results</comment>

  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBRecentVisitOfURL</name></expr>;</expr_stmt> <comment type="line">// converts URL into most recent visit ID/session ID</comment>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBInsertVisit</name></expr>;</expr_stmt> <comment type="line">// used by AddVisit</comment>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBGetPageVisitStats</name></expr>;</expr_stmt> <comment type="line">// used by AddVisit</comment>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBUpdatePageVisitStats</name></expr>;</expr_stmt> <comment type="line">// used by AddVisit</comment>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBAddNewPage</name></expr>;</expr_stmt> <comment type="line">// used by InternalAddNewPage</comment>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBURIHasTag</name></expr>;</expr_stmt> <comment type="line">// used by UriHasTag</comment>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mFoldersWithAnnotationQuery</name></expr>;</expr_stmt>  <comment type="line">// used by StartSearch and FilterResultSet</comment>

  <comment type="line">// these are used by VisitIdToResultNode for making new result nodes from IDs</comment>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBVisitToURLResult</name></expr>;</expr_stmt> <comment type="line">// kGetInfoIndex_* results</comment>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBVisitToVisitResult</name></expr>;</expr_stmt> <comment type="line">// kGetInfoIndex_* results</comment>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBUrlToUrlResult</name></expr>;</expr_stmt> <comment type="line">// kGetInfoIndex_* results</comment>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBBookmarkToUrlResult</name></expr>;</expr_stmt> <comment type="line">// kGetInfoIndex_* results</comment>

  <comment type="block">/**
   * Recalculates aCount frecencies.  If aRecalcOld, it will also calculate
   * the frecency of aCount history visits that have not occurred recently.
   *
   * @param aCount
   *        The number of entries to update.
   * @param aRecalcOld
   *        Indicates that we should update old visits as well.
   */</comment>
  <function_decl><type><name>nsresult</name></type> <name>RecalculateFrecencies</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aCount</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aRecalcOld</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>nsresult</name></type> <name>RecalculateFrecenciesInternal</name><parameter_list>(<param><decl><type><name>mozIStorageStatement</name> *</type><name>aStatement</name></decl></param>, <param><decl><type><name>PRInt64</name></type> <name>aBindParameter</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aCount</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>nsresult</name></type> <name>CalculateFrecency</name><parameter_list>(<param><decl><type><name>PRInt64</name></type> <name>aPageID</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aTyped</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aVisitCount</name></decl></param>, <param><decl><type><name>nsCAutoString</name> &amp;</type><name>aURL</name></decl></param>, <param><decl><type><name>PRInt32</name> *</type><name>aFrecency</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>nsresult</name></type> <name>CalculateFrecencyInternal</name><parameter_list>(<param><decl><type><name>PRInt64</name></type> <name>aPageID</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aTyped</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aVisitCount</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aIsBookmarked</name></decl></param>, <param><decl><type><name>PRInt32</name> *</type><name>aFrecency</name></decl></param>)</parameter_list>;</function_decl>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBVisitsForFrecency</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBInvalidFrecencies</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBOldFrecencies</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBUpdateFrecencyAndHidden</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBGetPlaceVisitStats</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBGetBookmarkParentsForPlace</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBVisitCountForFrecency</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBTrueVisitCount</name></expr>;</expr_stmt>

  <comment type="block">/**
   * Initializes the database file.  If the database does not exist, was
   * corrupted, or aForceInit is true, we recreate the database.  We also backup
   * the database if it was corrupted or aForceInit is true.
   *
   * @param aForceInit
   *        Indicates if we should close an open database connection or not.
   */</comment>
  <function_decl><type><name>nsresult</name></type> <name>InitDBFile</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aForceInit</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/**
   * Creates a uniquely named backup of the places database.
   */</comment>
  <function_decl><type><name>nsresult</name></type> <name>BackupDBFile</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="block">/**
   * Initializes the database.  This performs any necessary migrations for the
   * database.  All migration is done inside a transaction that is rolled back
   * if any error occurs.  Upon initialization, history is imported, and some
   * preferences that are used are set.
   *
   * @param aMadeChanges [out]
   *        Returns a constant indicating what occurred:
   *        DB_MIGRATION_NONE
   *          No migration occurred.
   *        DB_MIGRATION_CREATED
   *          The database did not exist in the past, and was created.
   *        DB_MIGRATION_UPDATED
   *          The database was migrated to a new version.
   */</comment>
  <function_decl><type><name>nsresult</name></type> <name>InitDB</name><parameter_list>(<param><decl><type><name>PRInt16</name> *</type><name>aMadeChanges</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>nsresult</name></type> <name>InitStatements</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>nsresult</name></type> <name>ForceMigrateBookmarksDB</name><parameter_list>(<param><decl><type><name>mozIStorageConnection</name> *</type><name>aDBConn</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>nsresult</name></type> <name>MigrateV3Up</name><parameter_list>(<param><decl><type><name>mozIStorageConnection</name> *</type><name>aDBConn</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>nsresult</name></type> <name>MigrateV6Up</name><parameter_list>(<param><decl><type><name>mozIStorageConnection</name> *</type><name>aDBConn</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>nsresult</name></type> <name>EnsureCurrentSchema</name><parameter_list>(<param><decl><type><name>mozIStorageConnection</name>*</type> <name>aDBConn</name></decl></param>, <param><decl><type><name>PRBool</name> *</type><name>aMadeChanges</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>nsresult</name></type> <name>CleanUpOnQuit</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IN_MEMORY_LINKS</name></cpp:ifdef>
  <comment type="line">// this is the cache DB in memory used for storing visited URLs</comment>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageConnection</name>&gt; <name>mMemDBConn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mMemDBAddPage</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mMemDBGetPage</name></expr>;</expr_stmt>

  <function_decl><type><name>nsresult</name></type> <name>InitMemDB</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <function_decl><type><name>nsresult</name></type> <name>AddURIInternal</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>, <param><decl><type><name>PRTime</name></type> <name>aTime</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aRedirect</name></decl></param>,
                          <param><decl><type><name>PRBool</name></type> <name>aToplevel</name></decl></param>, <param><decl><type><name>nsIURI</name>*</type> <name>aReferrer</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>nsresult</name></type> <name>AddVisitChain</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>, <param><decl><type><name>PRTime</name></type> <name>aTime</name></decl></param>,
                         <param><decl><type><name>PRBool</name></type> <name>aToplevel</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aRedirect</name></decl></param>,
                         <param><decl><type><name>nsIURI</name>*</type> <name>aReferrer</name></decl></param>, <param><decl><type><name>PRInt64</name>*</type> <name>aVisitID</name></decl></param>,
                         <param><decl><type><name>PRInt64</name>*</type> <name>aSessionID</name></decl></param>, <param><decl><type><name>PRInt64</name>*</type> <name>aRedirectBookmark</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>nsresult</name></type> <name>InternalAddNewPage</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aTitle</name></decl></param>,
                              <param><decl><type><name>PRBool</name></type> <name>aHidden</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aTyped</name></decl></param>,
                              <param><decl><type><name>PRInt32</name></type> <name>aVisitCount</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aCalculateFrecency</name></decl></param>,
                              <param><decl><type><name>PRInt64</name>*</type> <name>aPageID</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>nsresult</name></type> <name>InternalAddVisit</name><parameter_list>(<param><decl><type><name>PRInt64</name></type> <name>aPageID</name></decl></param>, <param><decl><type><name>PRInt64</name></type> <name>aReferringVisit</name></decl></param>,
                            <param><decl><type><name>PRInt64</name></type> <name>aSessionID</name></decl></param>, <param><decl><type><name>PRTime</name></type> <name>aTime</name></decl></param>,
                            <param><decl><type><name>PRInt32</name></type> <name>aTransitionType</name></decl></param>, <param><decl><type><name>PRInt64</name>*</type> <name>aVisitID</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>PRBool</name></type> <name>FindLastVisit</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>, <param><decl><type><name>PRInt64</name>*</type> <name>aVisitID</name></decl></param>,
                       <param><decl><type><name>PRInt64</name>*</type> <name>aSessionID</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>PRBool</name></type> <name>IsURIStringVisited</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>url</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/**
   * This loads all of the preferences that we use into member variables.
   * NOTE:  If mPrefBranch is NULL, this does nothing.
   *
   * @param aInitializing
   *        Indicates if the autocomplete queries should be regenerated or not.
   */</comment>
  <function_decl><type><name>nsresult</name></type> <name>LoadPrefs</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aInitializing</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// Current time optimization</comment>
  <decl_stmt><decl><type><name>PRTime</name></type> <name>mLastNow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>mNowValid</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsITimer</name>&gt; <name>mExpireNowTimer</name></expr>;</expr_stmt>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>expireNowTimerCallback</name><parameter_list>(<param><decl><type><name>nsITimer</name>*</type> <name>aTimer</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aClosure</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// expiration</comment>
  <decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>nsNavHistoryExpire</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsNavHistoryExpire</name></type> <name>mExpire</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LAZY_ADD</name></cpp:ifdef>
  <comment type="line">// lazy add committing</comment>
  <struct>struct <name>LazyMessage</name> <block>{
    <enum>enum <name>MessageType</name> <block>{ <decl><name>Type_Invalid</name></decl>, <decl><name>Type_AddURI</name></decl>, <decl><name>Type_Title</name></decl>, <decl><name>Type_Favicon</name></decl> }</block>;</enum>
    <macro><name>LazyMessage</name><argument_list>()</argument_list></macro>
    <block>{
      <expr_stmt><expr><name>type</name> = <name>Type_Invalid</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>isRedirect</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>isToplevel</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>time</name> = 0</expr>;</expr_stmt>
      <expr_stmt><expr><name>alwaysLoadFavicon</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    }</block>

    <comment type="line">// call this with common parms to initialize. Caller is responsible for</comment>
    <comment type="line">// setting other elements manually depending on type.</comment>
    <function><type><name>nsresult</name></type> <name>Init</name><parameter_list>(<param><decl><type><name>MessageType</name></type> <name>aType</name></decl></param>, <param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>)</parameter_list>
    <block>{
      <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>type</name> = <name>aType</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>aURI</name>-&gt;<name>Clone</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>uri</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>uriSpec</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// common elements</comment>
    <decl_stmt><decl><type><name>MessageType</name></type> <name>type</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIURI</name>&gt; <name>uri</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nsCString</name></type> <name>uriSpec</name></decl>;</decl_stmt> <comment type="line">// stringified version of URI, for quick isVisited</comment>

    <comment type="line">// valid when type == Type_AddURI</comment>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIURI</name>&gt; <name>referrer</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>isRedirect</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>isToplevel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRTime</name></type> <name>time</name></decl>;</decl_stmt>

    <comment type="line">// valid when type == Type_Title</comment>
    <decl_stmt><decl><type><name>nsString</name></type> <name>title</name></decl>;</decl_stmt>

    <comment type="line">// valid when type == LAZY_FAVICON</comment>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIURI</name>&gt; <name>favicon</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>alwaysLoadFavicon</name></decl>;</decl_stmt>
  }</block>;</struct>
  <expr_stmt><expr><name>nsTArray</name>&lt;<name>LazyMessage</name>&gt; <name>mLazyMessages</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsITimer</name>&gt; <name>mLazyTimer</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>mLazyTimerSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>mLazyTimerDeferments</name></decl>;</decl_stmt> <comment type="line">// see StartLazyTimer</comment>
  <function_decl><type><name>nsresult</name></type> <name>StartLazyTimer</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>nsresult</name></type> <name>AddLazyMessage</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>LazyMessage</name>&amp;</type> <name>aMessage</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>LazyTimerCallback</name><parameter_list>(<param><decl><type><name>nsITimer</name>*</type> <name>aTimer</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aClosure</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>CommitLazyMessages</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>ConstructQueryString</name><argument_list>(<argument><expr>const <name>nsCOMArray</name>&lt;<name>nsNavHistoryQuery</name>&gt;&amp; <name>aQueries</name></expr></argument>, 
                                <argument><expr><name>nsNavHistoryQueryOptions</name> *<name>aOptions</name></expr></argument>,
                                <argument><expr><name>nsCString</name> &amp;<name>queryString</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function_decl><type><name>nsresult</name></type> <name>QueryToSelectClause</name><parameter_list>(<param><decl><type><name>nsNavHistoryQuery</name>*</type> <name>aQuery</name></decl></param>,
                               <param><decl><type><name>nsNavHistoryQueryOptions</name>*</type> <name>aOptions</name></decl></param>,
                               <param><decl><type><name>PRInt32</name></type> <name>aStartParameter</name></decl></param>,
                               <param><decl><type><name>nsCString</name>*</type> <name>aClause</name></decl></param>,
                               <param><decl><type><name>PRInt32</name>*</type> <name>aParamCount</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aCommonConditions</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>nsresult</name></type> <name>BindQueryClauseParameters</name><parameter_list>(<param><decl><type><name>mozIStorageStatement</name>*</type> <name>statement</name></decl></param>,
                                     <param><decl><type><name>PRInt32</name></type> <name>aStartParameter</name></decl></param>,
                                     <param><decl><type><name>nsNavHistoryQuery</name>*</type> <name>aQuery</name></decl></param>,
                                     <param><decl><type><name>nsNavHistoryQueryOptions</name>*</type> <name>aOptions</name></decl></param>,
                                     <param><decl><type><name>PRInt32</name>*</type> <name>aParamCount</name></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>ResultsAsList</name><argument_list>(<argument><expr><name>mozIStorageStatement</name>* <name>statement</name></expr></argument>,
                         <argument><expr><name>nsNavHistoryQueryOptions</name>* <name>aOptions</name></expr></argument>,
                         <argument><expr><name>nsCOMArray</name>&lt;<name>nsNavHistoryResultNode</name>&gt;* <name>aResults</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function_decl><type><name>void</name></type> <name>GetAgeInDaysString</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aInt</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>aName</name></decl></param>, 
                          <param><decl><type><name>nsACString</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>void</name></type> <name>GetStringFromName</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>aName</name></decl></param>, <param><decl><type><name>nsACString</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>void</name></type> <name>TitleForDomain</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsCString</name>&amp;</type> <name>domain</name></decl></param>, <param><decl><type><name>nsACString</name>&amp;</type> <name>aTitle</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>nsresult</name></type> <name>SetPageTitleInternal</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aTitle</name></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>GroupByDay</name><argument_list>(<argument><expr><name>nsNavHistoryQueryResultNode</name> *<name>aResultNode</name></expr></argument>,
                      <argument><expr>const <name>nsCOMArray</name>&lt;<name>nsNavHistoryResultNode</name>&gt;&amp; <name>aSource</name></expr></argument>,
                      <argument><expr><name>nsCOMArray</name>&lt;<name>nsNavHistoryResultNode</name>&gt;* <name>aDest</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>GroupByHost</name><argument_list>(<argument><expr><name>nsNavHistoryQueryResultNode</name> *<name>aResultNode</name></expr></argument>,
                       <argument><expr>const <name>nsCOMArray</name>&lt;<name>nsNavHistoryResultNode</name>&gt;&amp; <name>aSource</name></expr></argument>,
                       <argument><expr><name>nsCOMArray</name>&lt;<name>nsNavHistoryResultNode</name>&gt;* <name>aDest</name></expr></argument>,
                       <argument><expr><name>PRBool</name> <name>aIsDomain</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>GroupByFolder</name><argument_list>(<argument><expr><name>nsNavHistoryQueryResultNode</name> *<name>aResultNode</name></expr></argument>,
                         <argument><expr>const <name>nsCOMArray</name>&lt;<name>nsNavHistoryResultNode</name>&gt;&amp; <name>aSource</name></expr></argument>,
                         <argument><expr><name>nsCOMArray</name>&lt;<name>nsNavHistoryResultNode</name>&gt;* <name>aDest</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function_decl><type><name>PRBool</name></type> <name>URIHasTag</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aURISpec</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aTag</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>PRBool</name></type> <name>URIHasAnyTagFromTerms</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aURISpec</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsStringArray</name>&amp;</type> <name>aTerms</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>CreateTermsFromTokens</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsStringArray</name>&amp;</type> <name>aTagTokens</name></decl></param>, <param><decl><type><name>nsStringArray</name>&amp;</type> <name>aTerms</name></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>FilterResultSet</name><argument_list>(<argument><expr><name>nsNavHistoryQueryResultNode</name> *<name>aParentNode</name></expr></argument>,
                           <argument><expr>const <name>nsCOMArray</name>&lt;<name>nsNavHistoryResultNode</name>&gt;&amp; <name>aSet</name></expr></argument>,
                           <argument><expr><name>nsCOMArray</name>&lt;<name>nsNavHistoryResultNode</name>&gt;* <name>aFiltered</name></expr></argument>,
                           <argument><expr>const <name>nsCOMArray</name>&lt;<name>nsNavHistoryQuery</name>&gt;&amp; <name>aQueries</name></expr></argument>,
                           <argument><expr><name>nsNavHistoryQueryOptions</name>* <name>aOptions</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// observers</comment>
  <expr_stmt><expr><name>nsMaybeWeakPtrArray</name>&lt;<name>nsINavHistoryObserver</name>&gt; <name>mObservers</name></expr>;</expr_stmt>

  <comment type="line">// localization</comment>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIStringBundle</name>&gt; <name>mBundle</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsILocale</name>&gt; <name>mLocale</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsICollation</name>&gt; <name>mCollation</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIDateTimeFormat</name>&gt; <name>mDateFormatter</name></expr>;</expr_stmt>

  <comment type="line">// annotation service : MAY BE NULL!</comment>
  <comment type="line">//nsCOMPtr&lt;mozIAnnotationService&gt; mAnnotationService;</comment>

  <comment type="line">// recent events</comment>
  <typedef>typedef <expr_stmt><expr><name>nsDataHashtable</name>&lt;<name>nsCStringHashKey</name></expr>, <expr><name>PRInt64</name>&gt; <name>RecentEventHash</name></expr>;</expr_stmt></typedef>
  <decl_stmt><decl><type><name>RecentEventHash</name></type> <name>mRecentTyped</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>RecentEventHash</name></type> <name>mRecentBookmark</name></decl>;</decl_stmt>

  <function_decl><type><name>PRBool</name></type> <name>CheckIsRecentEvent</name><parameter_list>(<param><decl><type><name>RecentEventHash</name>*</type> <name>hashTable</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>url</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>ExpireNonrecentEvents</name><parameter_list>(<param><decl><type><name>RecentEventHash</name>*</type> <name>hashTable</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// redirect tracking. See GetRedirectFor for a description of how this works.</comment>
  <struct>struct <name>RedirectInfo</name> <block>{
    <decl_stmt><decl><type><name>nsCString</name></type> <name>mSourceURI</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRTime</name></type> <name>mTimeCreated</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>mType</name></decl>;</decl_stmt> <comment type="line">// one of TRANSITION_REDIRECT_[TEMPORARY,PERMANENT]</comment>
  }</block>;</struct>
  <typedef>typedef <expr_stmt><expr><name>nsDataHashtable</name>&lt;<name>nsCStringHashKey</name></expr>, <expr><name>RedirectInfo</name>&gt; <name>RedirectHash</name></expr>;</expr_stmt></typedef>
  <decl_stmt><decl><type><name>RedirectHash</name></type> <name>mRecentRedirects</name></decl>;</decl_stmt>
  <macro><name>PR_STATIC_CALLBACK</name><argument_list>(<argument>PLDHashOperator</argument>)</argument_list></macro> <macro><name>ExpireNonrecentRedirects</name><argument_list>(
      <argument>nsCStringHashKey::KeyType aKey</argument>, <argument>RedirectInfo&amp; aData</argument>, <argument>void* aUserArg</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <function_decl><type><name>PRBool</name></type> <name>GetRedirectFor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aDestination</name></decl></param>, <param><decl><type><name>nsACString</name>&amp;</type> <name>aSource</name></decl></param>,
                        <param><decl><type><name>PRTime</name>*</type> <name>aTime</name></decl></param>, <param><decl><type><name>PRUint32</name>*</type> <name>aRedirectType</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// session tracking</comment>
  <decl_stmt><decl><type><name>PRInt64</name></type> <name>mLastSessionID</name></decl>;</decl_stmt>
  <function><type><name>PRInt64</name></type> <name>GetNewSessionID</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name>mLastSessionID</name> ++</expr>;</expr_stmt> <return>return <expr><name>mLastSessionID</name></expr>;</return> }</block></function>

  <comment type="line">//</comment>
  <comment type="line">// AutoComplete stuff</comment>
  <comment type="line">//</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name>kAutoCompleteIndex_URL</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name>kAutoCompleteIndex_Title</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name>kAutoCompleteIndex_FaviconURL</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name>kAutoCompleteIndex_ItemId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name>kAutoCompleteIndex_ParentId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name>kAutoCompleteIndex_BookmarkTitle</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBAutoCompleteQuery</name></expr>;</expr_stmt> <comment type="line">//  kAutoCompleteIndex_* results</comment>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>mozIStorageStatement</name>&gt; <name>mDBTagAutoCompleteQuery</name></expr>;</expr_stmt> <comment type="line">//  kAutoCompleteIndex_* results</comment>

  <function_decl><type><name>nsresult</name></type> <name>InitAutoComplete</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>nsresult</name></type> <name>CreateAutoCompleteQueries</name><parameter_list>()</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>mAutoCompleteOnlyTyped</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mAutoCompleteMaxResults</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mAutoCompleteSearchChunkSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mAutoCompleteSearchTimeout</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsITimer</name>&gt; <name>mAutoCompleteTimer</name></expr>;</expr_stmt>

  <comment type="line">// Search string and tokens for case-insensitive matching</comment>
  <decl_stmt><decl><type><name>nsString</name></type> <name>mCurrentSearchString</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsStringArray</name></type> <name>mCurrentSearchTokens</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> <name>GenerateSearchTokens</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>AddSearchToken</name><parameter_list>(<param><decl><type><name>nsAutoString</name> &amp;</type><name>aToken</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_XUL</name></cpp:ifdef>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIAutoCompleteObserver</name>&gt; <name>mCurrentListener</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIAutoCompleteSimpleResult</name>&gt; <name>mCurrentResult</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>nsDataHashtable</name>&lt;<name>nsStringHashKey</name></expr>, <expr><name>PRBool</name>&gt; <name>mCurrentResultURLs</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mCurrentChunkOffset</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nsDataHashtable</name>&lt;<name>nsTrimInt64HashKey</name></expr>, <expr><name>PRBool</name>&gt; <name>mLivemarkFeedItemIds</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nsDataHashtable</name>&lt;<name>nsStringHashKey</name></expr>, <expr><name>PRBool</name>&gt; <name>mLivemarkFeedURIs</name></expr>;</expr_stmt>

  <function_decl><type><name>nsresult</name></type> <name>AutoCompleteTypedSearch</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>nsresult</name></type> <name>AutoCompleteFullHistorySearch</name><parameter_list>(<param><decl><type><name>PRBool</name>*</type> <name>aHasMoreResults</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>nsresult</name></type> <name>AutoCompleteTagsSearch</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><name>nsresult</name></type> <name>PerformAutoComplete</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>nsresult</name></type> <name>StartAutoCompleteTimer</name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aMilliseconds</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AutoCompleteTimerCallback</name><parameter_list>(<param><decl><type><name>nsITimer</name>*</type> <name>aTimer</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aClosure</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>DoneSearching</name><parameter_list>()</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mExpireDaysMin</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mExpireDaysMax</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mExpireSites</name></decl>;</decl_stmt>

  <comment type="line">// frecency prefs</comment>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mNumVisitsForFrecency</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mNumCalculateFrecencyOnIdle</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mNumCalculateFrecencyOnMigrate</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mFrecencyUpdateIdleTime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mFirstBucketCutoffInDays</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mSecondBucketCutoffInDays</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mThirdBucketCutoffInDays</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mFourthBucketCutoffInDays</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mFirstBucketWeight</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mSecondBucketWeight</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mThirdBucketWeight</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mFourthBucketWeight</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mDefaultWeight</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mEmbedVisitBonus</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mLinkVisitBonus</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mTypedVisitBonus</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mBookmarkVisitBonus</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mDownloadVisitBonus</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mPermRedirectVisitBonus</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mTempRedirectVisitBonus</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mDefaultVisitBonus</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mUnvisitedBookmarkBonus</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>mUnvisitedTypedBonus</name></decl>;</decl_stmt>

  <comment type="line">// in nsNavHistoryQuery.cpp</comment>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>TokensToQueries</name><argument_list>(<argument><expr>const <name>nsTArray</name>&lt;<name>QueryKeyValuePair</name>&gt;&amp; <name>aTokens</name></expr></argument>,
                           <argument><expr><name>nsCOMArray</name>&lt;<name>nsNavHistoryQuery</name>&gt;* <name>aQueries</name></expr></argument>,
                           <argument><expr><name>nsNavHistoryQueryOptions</name>* <name>aOptions</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="block">/**
   * Used to setup the idle timer used to perform various tasks when the user is
   * idle..
   */</comment>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsITimer</name>&gt; <name>mIdleTimer</name></expr>;</expr_stmt>
  <function_decl><type><name>nsresult</name></type> <name>InitializeIdleTimer</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>IdleTimerCallback</name><parameter_list>(<param><decl><type><name>nsITimer</name>*</type> <name>aTimer</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aClosure</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>nsresult</name></type> <name>OnIdle</name><parameter_list>()</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>PRInt64</name></type> <name>mTagsFolder</name></decl>;</decl_stmt>
  <function_decl><type><name>PRInt64</name></type> <name>GetTagsFolder</name><parameter_list>()</parameter_list>;</function_decl>
};

<comment type="block">/**
 * Shared between the places components, this function binds the given URI as
 * UTF8 to the given parameter for the statement.
 */</comment>
<function_decl><type><name>nsresult</name></type> <name>BindStatementURI</name><parameter_list>(<param><decl><type><name>mozIStorageStatement</name>*</type> <name>statement</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>index</name></decl></param>,
                          <param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLACES_URI_PREFIX</name></cpp:macro> <cpp:value>"place:"</cpp:value></cpp:define>

<comment type="block">/* Returns true if the given URI represents a history query. */</comment>
<function><type><specifier>inline</specifier> <name>PRBool</name></type> <name>IsQueryURI</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsCString</name> &amp;</type><name>uri</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>StringBeginsWith</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr><name>PLACES_URI_PREFIX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Extracts the query string from a query URI. */</comment>
<function><type><specifier>inline</specifier> <specifier>const</specifier> <name>nsDependentCSubstring</name></type> <name>QueryURIToQuery</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsCString</name> &amp;</type><name>uri</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>IsQueryURI</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"should only be called for query URIs"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>Substring</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr><name>PLACES_URI_PREFIX</name></expr></argument>)</argument_list></call>.<call><name>Length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// nsNavHistory_h_</comment>
</unit>
