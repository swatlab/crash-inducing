<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="0011924342a5d660830bab12fb4f273d40965010.h"><comment type="block">/* -*- Mode: C; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2002
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *  Brian Ryner &lt;bryner@brianryner.com&gt;  (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<comment type="block">/**
 * gtkdrawing.h: GTK widget rendering utilities
 *
 * gtkdrawing provides an API for rendering GTK widgets in the
 * current theme to a pixmap or window, without requiring an actual
 * widget instantiation, similar to the Macintosh Appearance Manager
 * or Windows XP's DrawThemeBackground() API.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_GTK_DRAWING_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GTK_DRAWING_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdk.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtk/gtkstyle.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<comment type="block">/*** type definitions ***/</comment>
<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>guint8</name></type> <name>active</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint8</name></type> <name>focused</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint8</name></type> <name>inHover</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint8</name></type> <name>disabled</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint8</name></type> <name>isDefault</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>guint8</name></type> <name>canDefault</name></decl>;</decl_stmt>
  <comment type="block">/* The depressed state is for buttons which remain active for a longer period:
   * activated toggle buttons or buttons showing a popup menu. */</comment>
  <decl_stmt><decl><type><name>guint8</name></type> <name>depressed</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gint32</name></type> <name>curpos</name></decl>;</decl_stmt> <comment type="block">/* curpos and maxpos are used for scrollbars */</comment>
  <decl_stmt><decl><type><name>gint32</name></type> <name>maxpos</name></decl>;</decl_stmt>
}</block></struct></type> <name>GtkWidgetState</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>gint</name></type> <name>slider_width</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gint</name></type> <name>trough_border</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gint</name></type> <name>stepper_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gint</name></type> <name>stepper_spacing</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>gint</name></type> <name>min_slider_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>MozGtkScrollbarMetrics</name>;</typedef>

<comment type="block">/** flags for tab state **/</comment>
<typedef>typedef <type><enum>enum <block>{
  <comment type="block">/* first eight bits are used to pass a margin */</comment>
  <decl><name>MOZ_GTK_TAB_MARGIN_MASK</name>     <init>= <expr>0xFF</expr></init></decl>,
  <comment type="block">/* bottom tabs */</comment>
  <decl><name>MOZ_GTK_TAB_BOTTOM</name>          <init>= <expr>1 &lt;&lt; 8</expr></init></decl>,
  <comment type="block">/* the first tab in the group */</comment>
  <decl><name>MOZ_GTK_TAB_FIRST</name>           <init>= <expr>1 &lt;&lt; 9</expr></init></decl>,
  <comment type="block">/* the selected tab */</comment>
  <decl><name>MOZ_GTK_TAB_SELECTED</name>        <init>= <expr>1 &lt;&lt; 10</expr></init></decl>
}</block></enum></type> <name>GtkTabFlags</name>;</typedef>

<comment type="block">/** flags for menuitems **/</comment>
<typedef>typedef <type><enum>enum <block>{
  <comment type="block">/* menuitem is part of the menubar */</comment>
  <decl><name>MOZ_TOPLEVEL_MENU_ITEM</name>      <init>= <expr>1 &lt;&lt; 0</expr></init></decl>
}</block></enum></type> <name>GtkMenuItemFlags</name>;</typedef>

<comment type="block">/* function type for moz_gtk_enable_style_props */</comment>
<typedef>typedef <function_decl><type><name>gint</name></type> (*<name>style_prop_t</name>)<parameter_list>(<param><decl><type><name>GtkStyle</name>*</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>gchar</name>*</decl></param>, <param><decl><type><name>gint</name></type></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/*** result/error codes ***/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOZ_GTK_SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOZ_GTK_UNKNOWN_WIDGET</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOZ_GTK_UNSAFE_THEME</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>

<comment type="block">/*** widget type constants ***/</comment>
<typedef>typedef <type><enum>enum <block>{
  <comment type="block">/* Paints a GtkButton. flags is a GtkReliefStyle. */</comment>
  <decl><name>MOZ_GTK_BUTTON</name></decl>,
  <comment type="block">/* Paints a GtkCheckButton. flags is a boolean, 1=checked, 0=not checked. */</comment>
  <decl><name>MOZ_GTK_CHECKBUTTON</name></decl>,
  <comment type="block">/* Paints a GtkRadioButton. flags is a boolean, 1=checked, 0=not checked. */</comment>
  <decl><name>MOZ_GTK_RADIOBUTTON</name></decl>,
  <comment type="block">/**
   * Paints the button of a GtkScrollbar. flags is a GtkArrowType giving
   * the arrow direction.
   */</comment>
  <decl><name>MOZ_GTK_SCROLLBAR_BUTTON</name></decl>,
  <comment type="block">/* Paints the trough (track) of a GtkScrollbar. */</comment>
  <decl><name>MOZ_GTK_SCROLLBAR_TRACK_HORIZONTAL</name></decl>,
  <decl><name>MOZ_GTK_SCROLLBAR_TRACK_VERTICAL</name></decl>,
  <comment type="block">/* Paints the slider (thumb) of a GtkScrollbar. */</comment>
  <decl><name>MOZ_GTK_SCROLLBAR_THUMB_HORIZONTAL</name></decl>,
  <decl><name>MOZ_GTK_SCROLLBAR_THUMB_VERTICAL</name></decl>,
  <comment type="block">/* Paints a GtkScale. */</comment>
  <decl><name>MOZ_GTK_SCALE_HORIZONTAL</name></decl>,
  <decl><name>MOZ_GTK_SCALE_VERTICAL</name></decl>,
  <comment type="block">/* Paints a GtkScale thumb. */</comment>
  <decl><name>MOZ_GTK_SCALE_THUMB_HORIZONTAL</name></decl>,
  <decl><name>MOZ_GTK_SCALE_THUMB_VERTICAL</name></decl>,
  <comment type="block">/* Paints a GtkSpinButton */</comment>
  <decl><name>MOZ_GTK_SPINBUTTON</name></decl>,
  <decl><name>MOZ_GTK_SPINBUTTON_UP</name></decl>,
  <decl><name>MOZ_GTK_SPINBUTTON_DOWN</name></decl>,
  <decl><name>MOZ_GTK_SPINBUTTON_ENTRY</name></decl>,
  <comment type="block">/* Paints the gripper of a GtkHandleBox. */</comment>
  <decl><name>MOZ_GTK_GRIPPER</name></decl>,
  <comment type="block">/* Paints a GtkEntry. */</comment>
  <decl><name>MOZ_GTK_ENTRY</name></decl>,
  <comment type="block">/* Paints a GtkOptionMenu. */</comment>
  <decl><name>MOZ_GTK_DROPDOWN</name></decl>,
  <comment type="block">/* Paints a dropdown arrow (a GtkButton containing a down GtkArrow). */</comment>
  <decl><name>MOZ_GTK_DROPDOWN_ARROW</name></decl>,
  <comment type="block">/* Paints the container part of a GtkCheckButton. */</comment>
  <decl><name>MOZ_GTK_CHECKBUTTON_CONTAINER</name></decl>,
  <comment type="block">/* Paints the container part of a GtkRadioButton. */</comment>
  <decl><name>MOZ_GTK_RADIOBUTTON_CONTAINER</name></decl>,
  <comment type="block">/* Paints the label of a GtkCheckButton (focus outline) */</comment>
  <decl><name>MOZ_GTK_CHECKBUTTON_LABEL</name></decl>,
  <comment type="block">/* Paints the label of a GtkRadioButton (focus outline) */</comment>
  <decl><name>MOZ_GTK_RADIOBUTTON_LABEL</name></decl>,
  <comment type="block">/* Paints the background of a GtkHandleBox. */</comment>
  <decl><name>MOZ_GTK_TOOLBAR</name></decl>,
  <comment type="block">/* Paints a toolbar separator */</comment>
  <decl><name>MOZ_GTK_TOOLBAR_SEPARATOR</name></decl>,
  <comment type="block">/* Paints a GtkToolTip */</comment>
  <decl><name>MOZ_GTK_TOOLTIP</name></decl>,
  <comment type="block">/* Paints a GtkFrame (e.g. a status bar panel). */</comment>
  <decl><name>MOZ_GTK_FRAME</name></decl>,
  <comment type="block">/* Paints a resize grip for a GtkWindow */</comment>
  <decl><name>MOZ_GTK_RESIZER</name></decl>,
  <comment type="block">/* Paints a GtkProgressBar. */</comment>
  <decl><name>MOZ_GTK_PROGRESSBAR</name></decl>,
  <comment type="block">/* Paints a progress chunk of a GtkProgressBar. */</comment>
  <decl><name>MOZ_GTK_PROGRESS_CHUNK</name></decl>,
  <comment type="block">/* Paints a tab of a GtkNotebook. flags is a GtkTabFlags, defined above. */</comment>
  <decl><name>MOZ_GTK_TAB</name></decl>,
  <comment type="block">/* Paints the background and border of a GtkNotebook. */</comment>
  <decl><name>MOZ_GTK_TABPANELS</name></decl>,
  <comment type="block">/* Paints the background and border of a GtkTreeView */</comment>
  <decl><name>MOZ_GTK_TREEVIEW</name></decl>,
  <comment type="block">/* Paints treeheader cells */</comment>
  <decl><name>MOZ_GTK_TREE_HEADER_CELL</name></decl>,
  <comment type="block">/* Paints sort arrows in treeheader cells */</comment>
  <decl><name>MOZ_GTK_TREE_HEADER_SORTARROW</name></decl>,
  <comment type="block">/* Paints an expander for a GtkTreeView */</comment>
  <decl><name>MOZ_GTK_TREEVIEW_EXPANDER</name></decl>,
  <comment type="block">/* Paints a GtkExpander */</comment>
  <decl><name>MOZ_GTK_EXPANDER</name></decl>,
  <comment type="block">/* Paints the background of the menu bar. */</comment>
  <decl><name>MOZ_GTK_MENUBAR</name></decl>,
  <comment type="block">/* Paints the background of menus, context menus. */</comment>
  <decl><name>MOZ_GTK_MENUPOPUP</name></decl>,
  <comment type="block">/* Paints the arrow of menuitems that contain submenus */</comment>
  <decl><name>MOZ_GTK_MENUARROW</name></decl>,
  <comment type="block">/* Paints items of menubar and popups. */</comment>
  <decl><name>MOZ_GTK_MENUITEM</name></decl>,
  <decl><name>MOZ_GTK_CHECKMENUITEM</name></decl>,
  <decl><name>MOZ_GTK_RADIOMENUITEM</name></decl>,
  <decl><name>MOZ_GTK_MENUSEPARATOR</name></decl>,
  <comment type="block">/* Paints a GtkVPaned separator */</comment>
  <decl><name>MOZ_GTK_SPLITTER_HORIZONTAL</name></decl>,
  <comment type="block">/* Paints a GtkHPaned separator */</comment>
  <decl><name>MOZ_GTK_SPLITTER_VERTICAL</name></decl>,
  <comment type="block">/* Paints the background of a window, dialog or page. */</comment>
  <decl><name>MOZ_GTK_WINDOW</name></decl>
}</block></enum></type> <name>GtkThemeWidgetType</name>;</typedef>

<comment type="block">/*** General library functions ***/</comment>
<comment type="block">/**
 * Initializes the drawing library.  You must call this function
 * prior to using any other functionality.
 * returns: MOZ_GTK_SUCCESS if there were no errors
 *          MOZ_GTK_UNSAFE_THEME if the current theme engine is known
 *                               to crash with gtkdrawing.
 */</comment>
<function_decl><type><name>gint</name></type> <name>moz_gtk_init</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="block">/**
 * Enable GTK+ 1.2.9+ theme enhancements. You must provide a pointer
 * to the GTK+ 1.2.9+ function "gtk_style_get_prop_experimental".
 * styleGetProp:  pointer to gtk_style_get_prop_experimental
 * 
 * returns: MOZ_GTK_SUCCESS if there was no error, an error code otherwise
 */</comment>
<function_decl><type><name>gint</name></type> <name>moz_gtk_enable_style_props</name><parameter_list>(<param><decl><type><name>style_prop_t</name></type> <name>styleGetProp</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Perform cleanup of the drawing library. You should call this function
 * when your program exits, or you no longer need the library.
 *
 * returns: MOZ_GTK_SUCCESS if there was no error, an error code otherwise
 */</comment>
<function_decl><type><name>gint</name></type> <name>moz_gtk_shutdown</name><parameter_list>()</parameter_list>;</function_decl>


<comment type="block">/*** Widget drawing ***/</comment>
<comment type="block">/**
 * Paint a widget in the current theme.
 * widget:    a constant giving the widget to paint
 * rect:      the bounding rectangle for the widget
 * cliprect:  a clipprect rectangle for this painting operation
 * state:     the state of the widget.  ignored for some widgets.
 * flags:     widget-dependant flags; see the GtkThemeWidgetType definition.
 * direction: the text direction, to draw the widget correctly LTR and RTL.
 */</comment>
<function_decl><type><name>gint</name></type>
<name>moz_gtk_widget_paint</name><parameter_list>(<param><decl><type><name>GtkThemeWidgetType</name></type> <name>widget</name></decl></param>, <param><decl><type><name>GdkDrawable</name>*</type> <name>drawable</name></decl></param>,
                     <param><decl><type><name>GdkRectangle</name>*</type> <name>rect</name></decl></param>, <param><decl><type><name>GdkRectangle</name>*</type> <name>cliprect</name></decl></param>,
                     <param><decl><type><name>GtkWidgetState</name>*</type> <name>state</name></decl></param>, <param><decl><type><name>gint</name></type> <name>flags</name></decl></param>,
                     <param><decl><type><name>GtkTextDirection</name></type> <name>direction</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/*** Widget metrics ***/</comment>
<comment type="block">/**
 * Get the border size of a widget
 * left/right:  [OUT] the widget's left/right border
 * top/bottom:  [OUT] the widget's top/bottom border
 * direction:   the text direction for the widget
 * inhtml:      boolean indicating whether this widget will be drawn as a HTML form control,
 *              in order to workaround a size issue (MOZ_GTK_BUTTON only, ignored otherwise)
 *
 * returns:    MOZ_GTK_SUCCESS if there was no error, an error code otherwise
 */</comment>
<function_decl><type><name>gint</name></type> <name>moz_gtk_get_widget_border</name><parameter_list>(<param><decl><type><name>GtkThemeWidgetType</name></type> <name>widget</name></decl></param>, <param><decl><type><name>gint</name>*</type> <name>left</name></decl></param>, <param><decl><type><name>gint</name>*</type> <name>top</name></decl></param>, 
                               <param><decl><type><name>gint</name>*</type> <name>right</name></decl></param>, <param><decl><type><name>gint</name>*</type> <name>bottom</name></decl></param>, <param><decl><type><name>GtkTextDirection</name></type> <name>direction</name></decl></param>,
                               <param><decl><type><name>gboolean</name></type> <name>inhtml</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Get the desired size of a GtkCheckButton
 * indicator_size:     [OUT] the indicator size
 * indicator_spacing:  [OUT] the spacing between the indicator and its
 *                     container
 *
 * returns:    MOZ_GTK_SUCCESS if there was no error, an error code otherwise
 */</comment>
<function_decl><type><name>gint</name></type>
<name>moz_gtk_checkbox_get_metrics</name><parameter_list>(<param><decl><type><name>gint</name>*</type> <name>indicator_size</name></decl></param>, <param><decl><type><name>gint</name>*</type> <name>indicator_spacing</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Get the desired size of a GtkRadioButton
 * indicator_size:     [OUT] the indicator size
 * indicator_spacing:  [OUT] the spacing between the indicator and its
 *                     container
 *
 * returns:    MOZ_GTK_SUCCESS if there was no error, an error code otherwise
 */</comment>
<function_decl><type><name>gint</name></type>
<name>moz_gtk_radio_get_metrics</name><parameter_list>(<param><decl><type><name>gint</name>*</type> <name>indicator_size</name></decl></param>, <param><decl><type><name>gint</name>*</type> <name>indicator_spacing</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Get the focus metrics for a treeheadercell, button, checkbox, or radio button.
 * widget:             [IN]  the widget to get the focus metrics for    
 * interior_focus:     [OUT] whether the focus is drawn around the
 *                           label (TRUE) or around the whole container (FALSE)
 * focus_width:        [OUT] the width of the focus line
 * focus_pad:          [OUT] the padding between the focus line and children
 *
 * returns:    MOZ_GTK_SUCCESS if there was no error, an error code otherwise
 */</comment>
<function_decl><type><name>gint</name></type>
<name>moz_gtk_widget_get_focus</name><parameter_list>(<param><decl><type><name>GtkWidget</name>*</type> <name>widget</name></decl></param>, <param><decl><type><name>gboolean</name>*</type> <name>interior_focus</name></decl></param>,
                         <param><decl><type><name>gint</name>*</type> <name>focus_width</name></decl></param>, <param><decl><type><name>gint</name>*</type> <name>focus_pad</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Get the desired size of a GtkScale thumb
 * orient:           [IN] the scale orientation
 * thumb_length:     [OUT] the length of the thumb
 * thumb_height:     [OUT] the height of the thumb
 *
 * returns:    MOZ_GTK_SUCCESS if there was no error, an error code otherwise
 */</comment>
<function_decl><type><name>gint</name></type>
<name>moz_gtk_get_scalethumb_metrics</name><parameter_list>(<param><decl><type><name>GtkOrientation</name></type> <name>orient</name></decl></param>, <param><decl><type><name>gint</name>*</type> <name>thumb_length</name></decl></param>, <param><decl><type><name>gint</name>*</type> <name>thumb_height</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Get the desired metrics for a GtkScrollbar
 * metrics:          [IN]  struct which will contain the metrics
 *
 * returns:    MOZ_GTK_SUCCESS if there was no error, an error code otherwise
 */</comment>
<function_decl><type><name>gint</name></type>
<name>moz_gtk_get_scrollbar_metrics</name><parameter_list>(<param><decl><type><name>MozGtkScrollbarMetrics</name>*</type> <name>metrics</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Get the desired size of a dropdown arrow button
 * width:   [OUT] the desired width
 * height:  [OUT] the desired height
 *
 * returns:    MOZ_GTK_SUCCESS if there was no error, an error code otherwise
 */</comment>
<function_decl><type><name>gint</name></type> <name>moz_gtk_get_dropdown_arrow_size</name><parameter_list>(<param><decl><type><name>gint</name>*</type> <name>width</name></decl></param>, <param><decl><type><name>gint</name>*</type> <name>height</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Get the desired size of a toolbar separator
 * size:    [OUT] the desired width
 *
 * returns: MOZ_GTK_SUCCESS if there was no error, an error code otherwise
 */</comment>
<function_decl><type><name>gint</name></type> <name>moz_gtk_get_toolbar_separator_width</name><parameter_list>(<param><decl><type><name>gint</name>*</type> <name>size</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Get the size of a regular GTK expander that shows/hides content
 * size:    [OUT] the size of the GTK expander, size = width = height.
 *
 * returns:    MOZ_GTK_SUCCESS if there was no error, an error code otherwise
 */</comment>
<function_decl><type><name>gint</name></type> <name>moz_gtk_get_expander_size</name><parameter_list>(<param><decl><type><name>gint</name>*</type> <name>size</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Get the size of a treeview's expander (we call them twisties)
 * size:    [OUT] the size of the GTK expander, size = width = height.
 *
 * returns:    MOZ_GTK_SUCCESS if there was no error, an error code otherwise
 */</comment>
<function_decl><type><name>gint</name></type> <name>moz_gtk_get_treeview_expander_size</name><parameter_list>(<param><decl><type><name>gint</name>*</type> <name>size</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Get the desired height of a menu separator
 * size:    [OUT] the desired height
 *
 * returns: MOZ_GTK_SUCCESS if there was no error, an error code otherwise
 */</comment>
<function_decl><type><name>gint</name></type> <name>moz_gtk_get_menu_separator_height</name><parameter_list>(<param><decl><type><name>gint</name>*</type> <name>size</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Get the desired size of a splitter
 * orientation:   [IN]  GTK_ORIENTATION_HORIZONTAL or GTK_ORIENTATION_VERTICAL
 * size:          [OUT] width or height of the splitter handle
 *
 * returns:    MOZ_GTK_SUCCESS if there was no error, an error code otherwise
 */</comment>
<function_decl><type><name>gint</name></type> <name>moz_gtk_splitter_get_metrics</name><parameter_list>(<param><decl><type><name>gint</name></type> <name>orientation</name></decl></param>, <param><decl><type><name>gint</name>*</type> <name>size</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Retrieve an actual GTK scrollbar widget for style analysis. It will not
 * be modified.
 */</comment>
<function_decl><type><name>GtkWidget</name>*</type> <name>moz_gtk_get_scrollbar_widget</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Get the YTHICKNESS of a tab (notebook extension).
 */</comment>
<function_decl><type><name>gint</name></type> <name>moz_gtk_get_tab_thickness</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
