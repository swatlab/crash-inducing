<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="003769d9f995eab2db5f9b910fe4e3854a6db587.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* vim:set tw=80 expandtab softtabstop=2 ts=2 sw=2: */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Mats Palmgren &lt;mats.palmgren@bredband.net&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nscore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGenericHTMLElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIAtom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIContentViewer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsICSSStyleRule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCSSStruct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocumentEncoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLBodyElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMAttr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMDocumentFragment.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMNSHTMLDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMNSHTMLElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMElementCSSInlineStyle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMWindow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIEventListenerManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsMappedAttributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsHTMLStyleSheet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIHTMLDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsILink.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPIDOMWindow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIStyleRule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIURL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNetUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsEscape.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFrame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScrollableFrame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIView.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIViewManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsRange.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPresShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPresContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShellTreeItem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsINameSpaceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsScriptLoader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsRuleData.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPresState.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsILayoutHistoryState.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsHTMLParts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsUnicharUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGkAtoms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIEventStateManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMEvent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMNSEvent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMCSSDeclaration.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsITextControlFrame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIForm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFormControl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLFormElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsHTMLFormElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsFocusManager.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsMutationEvent.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentCID.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMText.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIEditor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIEditorIMESupport.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsEventDispatcher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsLayoutUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentCreatorFunctions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozAutoDocUpdate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsHtml5Module.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsITextControlElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozilla/dom/Element.h"</cpp:file></cpp:include>

<using>using namespace <name><name>mozilla</name>::<name>dom</name></name>;</using>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsThreadUtils.h"</cpp:file></cpp:include>

<class_decl>class <name>nsINodeInfo</name>;</class_decl>
<class_decl>class <name>nsIDOMNodeList</name>;</class_decl>
<class_decl>class <name>nsRuleWalker</name>;</class_decl>

<comment type="line">// XXX todo: add in missing out-of-memory checks</comment>

<comment type="line">//----------------------------------------------------------------------</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GATHER_ELEMENT_USEAGE_STATISTICS</name></cpp:ifdef>

<comment type="line">// static objects that have constructors are kinda bad, but we don't</comment>
<comment type="line">// care here, this is only debugging code!</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>nsHashtable</name></type> <name>sGEUS_ElementCounts</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>GEUS_ElementCreated</name><parameter_list>(<param><decl><type><name>nsINodeInfo</name> *</type><name>aNodeInfo</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>name</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aNodeInfo</name>-&gt;<name>GetLocalName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>nsStringKey</name></type> <name>key</name><parameter_list>(<param><decl><type><name>name</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>count</name> <init>= <expr>(<name>PRInt32</name>)<call><name><name>sGEUS_ElementCounts</name>.<name>Get</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>count</name>++</expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>sGEUS_ElementCounts</name>.<name>Put</name></name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>PRBool</name></type> <name>GEUS_enum_func</name><parameter_list>(<param><decl><type><name>nsHashKey</name> *</type><name>aKey</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aData</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aClosure</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>name_chars</name> <init>= <expr>((<name>nsStringKey</name> *)<name>aKey</name>)-&gt;<call><name>GetString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>NS_ConvertUTF16toUTF8</name></type> <name>name</name><parameter_list>(<param><decl><type><name>name_chars</name></type></decl></param>)</parameter_list>;</function_decl>

  <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr>"%s %d\n"</expr></argument>, <argument><expr><call><name><name>name</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>GEUS_DumpElementCounts</name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr>"Element count statistics:\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>sGEUS_ElementCounts</name>.<name>Enumerate</name></name><argument_list>(<argument><expr><name>GEUS_enum_func</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr>"End of element count statistics:\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>Init</name></name><parameter_list>(<param><decl><type><name>nsINodeInfo</name> *</type><name>aNodeInfo</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>GEUS_ElementCreated</name><argument_list>(<argument><expr><name>aNodeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>nsGenericHTMLElementBase</name>::<name>Init</name></name><argument_list>(<argument><expr><name>aNodeInfo</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**
 * nsAutoFocusEvent is used to dispatch a focus event when a
 * nsGenericHTMLFormElement is binded to the tree with the autofocus attribute
 * enabled.
 */</comment>
<class>class <name>nsAutoFocusEvent</name> <super>: <specifier>public</specifier> <name>nsRunnable</name></super>
<block>{<private type="default">
</private><public>public:
  <constructor><name>nsAutoFocusEvent</name><parameter_list>(<param><decl><type><name>nsGenericHTMLFormElement</name>*</type> <name>aElement</name></decl></param>)</parameter_list> <member_list>: <call><name>mElement</name><argument_list>(<argument><expr><name>aElement</name></expr></argument>)</argument_list></call> </member_list><block>{}</block></constructor>

  <function><type><name>NS_IMETHOD</name></type> <name>Run</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>nsFocusManager</name>*</type> <name>fm</name> <init>= <expr><call><name><name>nsFocusManager</name>::<name>GetFocusManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>fm</name></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_ERROR_NULL_POINTER</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>document</name> <init>= <expr><call><name><name>mElement</name>-&gt;<name>GetOwnerDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>document</name></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// Do not autofocus if an sub-window is focused.</comment>
    <decl_stmt><decl><type><name>nsPIDOMWindow</name>*</type> <name>window</name> <init>= <expr><call><name><name>document</name>-&gt;<name>GetWindow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>window</name> &amp;&amp; <call><name><name>window</name>-&gt;<name>GetFocusedNode</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// If something is focused in the same document, ignore autofocus.</comment>
    <if>if <condition>(<expr>!<call><name><name>fm</name>-&gt;<name>GetFocusedContent</name></name><argument_list>()</argument_list></call> ||
        <call><name><name>fm</name>-&gt;<name>GetFocusedContent</name></name><argument_list>()</argument_list></call>-&gt;<call><name>GetOwnerDoc</name><argument_list>()</argument_list></call> != <name>document</name></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>mElement</name>-&gt;<name>Focus</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></function>
</public><private>private:
  <comment type="line">// NOTE: nsGenericHTMLFormElement is saved as a nsGenericHTMLElement</comment>
  <comment type="line">// because AddRef/Release are ambiguous with nsGenericHTMLFormElement</comment>
  <comment type="line">// and Focus() is declared (and defined) in nsGenericHTMLElement class.</comment>
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsGenericHTMLElement</name></expr></argument>&gt;</argument_list></name></type> <name>mElement</name></decl>;</decl_stmt>
</private>}</block>;</class>

<class>class <name>nsGenericHTMLElementTearoff</name> <super>: <specifier>public</specifier> <name>nsIDOMNSHTMLElement</name>,
                                    <specifier>public</specifier> <name>nsIDOMElementCSSInlineStyle</name></super>
<block>{<private type="default">
  <macro><name>NS_DECL_CYCLE_COLLECTING_ISUPPORTS</name></macro>

  <constructor><name>nsGenericHTMLElementTearoff</name><parameter_list>(<param><decl><type><name>nsGenericHTMLElement</name> *</type><name>aElement</name></decl></param>)</parameter_list>
    <member_list>: <call><name>mElement</name><argument_list>(<argument><expr><name>aElement</name></expr></argument>)</argument_list></call>
  </member_list><block>{
  }</block></constructor>

  <destructor><specifier>virtual</specifier> <name>~<name>nsGenericHTMLElementTearoff</name></name><parameter_list>()</parameter_list>
  <block>{
  }</block></destructor>

  <macro><name>NS_FORWARD_NSIDOMNSHTMLELEMENT</name><argument_list>(<argument>mElement-&gt;</argument>)</argument_list></macro>
  <macro><name>NS_FORWARD_NSIDOMELEMENTCSSINLINESTYLE</name><argument_list>(<argument>mElement-&gt;</argument>)</argument_list></macro>

  <constructor><name>NS_DECL_CYCLE_COLLECTION_CLASS_AMBIGUOUS</name><parameter_list>(<param><decl><type><name>nsGenericHTMLElementTearoff</name></type></decl></param>,
                                           <param><decl><type><name>nsIDOMNSHTMLElement</name></type></decl></param>)</parameter_list>

<specifier>private</specifier></constructor>:
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsGenericHTMLElement</name></expr></argument>&gt;</argument_list></name></type> <name>mElement</name></decl>;</decl_stmt>
</private>}</block>;</class>

<macro><name>NS_IMPL_CYCLE_COLLECTION_1</name><argument_list>(<argument>nsGenericHTMLElementTearoff</argument>, <argument>mElement</argument>)</argument_list></macro>

<macro><name>NS_IMPL_CYCLE_COLLECTING_ADDREF_AMBIGUOUS</name><argument_list>(<argument>nsGenericHTMLElementTearoff</argument>,
                                          <argument>nsIDOMNSHTMLElement</argument>)</argument_list></macro>
<macro><name>NS_IMPL_CYCLE_COLLECTING_RELEASE_AMBIGUOUS</name><argument_list>(<argument>nsGenericHTMLElementTearoff</argument>,
                                           <argument>nsIDOMNSHTMLElement</argument>)</argument_list></macro>

<macro><name>NS_INTERFACE_TABLE_HEAD</name><argument_list>(<argument>nsGenericHTMLElementTearoff</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_TABLE_INHERITED2</name><argument_list>(<argument>nsGenericHTMLElementTearoff</argument>,
                                <argument>nsIDOMNSHTMLElement</argument>,
                                <argument>nsIDOMElementCSSInlineStyle</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_TABLE_TO_MAP_SEGUE_CYCLE_COLLECTION</name><argument_list>(<argument>nsGenericHTMLElementTearoff</argument>)</argument_list></macro>
<macro><name>NS_INTERFACE_MAP_END_AGGREGATED</name><argument_list>(<argument>mElement</argument>)</argument_list></macro>


<macro><name>NS_IMPL_INT_ATTR</name><argument_list>(<argument>nsGenericHTMLElement</argument>, <argument>TabIndex</argument>, <argument>tabindex</argument>)</argument_list></macro>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>DOMQueryInterface</name></name><parameter_list>(<param><decl><type><name>nsIDOMHTMLElement</name> *</type><name>aElement</name></decl></param>,
                                        <param><decl><type><name>REFNSIID</name></type> <name>aIID</name></decl></param>, <param><decl><type><name>void</name> **</type><name>aInstancePtr</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aInstancePtr</name></expr></argument>, <argument><expr>"null out param"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_ERROR_FAILURE</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>NS_INTERFACE_TABLE_BEGIN</name></type>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsIDOMHTMLElement</name></expr></argument>, <argument><expr><name>nsIDOMNode</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsIDOMHTMLElement</name></expr></argument>, <argument><expr><name>nsIDOMElement</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsIDOMHTMLElement</name></expr></argument>, <argument><expr><name>nsIDOMHTMLElement</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_TABLE_END_WITH_PTR</name><argument_list>(<argument><expr><name>aElement</name></expr></argument>)</argument_list>

  <name>NS_INTERFACE_TABLE_TO_MAP_SEGUE</name>
  <name>NS_INTERFACE_MAP_ENTRY_TEAROFF</name><argument_list>(<argument><expr><name>nsIDOMNSHTMLElement</name></expr></argument>,
                                 <argument><expr>new <call><name>nsGenericHTMLElementTearoff</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY_TEAROFF</name><argument_list>(<argument><expr><name>nsIDOMElementCSSInlineStyle</name></expr></argument>,
                                 <argument><expr>new <call><name>nsGenericHTMLElementTearoff</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_END</name>

<comment type="line">// No closing bracket, becuase NS_INTERFACE_MAP_END does that for us.</comment>
    
<name>nsresult</name>
<name><name>nsGenericHTMLElement</name>::<name>CopyInnerTo</name></name><argument_list>(<argument><expr><name>nsGenericElement</name>* <name>aDst</name></expr></argument>)</argument_list> const
<argument_list>{
  <argument><expr><name>nsresult</name> <name>rv</name></expr></argument>;
  <argument><expr><name>PRInt32</name> <name>i</name></expr></argument>, <argument><expr><name>count</name> = <call><name>GetAttrCount</name><argument_list>()</argument_list></call></expr></argument>;
  for <argument><expr>(<name>i</name> = 0; <name>i</name> &lt; <name>count</name>; ++<name>i</name>) <block>{
    <expr>const <name>nsAttrName</name> *<name>name</name> = <call><name><name>mAttrsAndChildren</name>.<name>AttrNameAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;
    <expr>const <name>nsAttrValue</name> *<name>value</name> = <call><name><name>mAttrsAndChildren</name>.<name>AttrAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;
    <if>if <condition>(<expr><call><name><name>name</name>-&gt;<name>Equals</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>style</name></name></expr></argument>, <argument><expr><name>kNameSpaceID_None</name></expr></argument>)</argument_list></call> &amp;&amp;
        <call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eCSSStyleRule</name></name></expr>)</condition><then> <expr_stmt><expr><block>{
      <comment type="line">// We can't just set this as a string, because that will fail</comment>
      <comment type="line">// to reparse the string into style data until the node is</comment>
      <comment type="line">// inserted into the document.  Clone the HTMLValue instead.</comment>
      <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsICSSRule</name></expr></argument>&gt;</argument_list></name> <name>ruleClone</name></expr>;
      <name>rv</name> = <call><name><name>value</name>-&gt;<name>GetCSSStyleRuleValue</name></name><argument_list>()</argument_list></call>-&gt;<call><name>Clone</name><argument_list>(<argument><expr>*<call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>ruleClone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt></then></if>
      <call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></block></expr></argument>;

      <argument><expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsICSSStyleRule</name></expr></argument>&gt;</argument_list></name> <name>styleRule</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>ruleClone</name></expr></argument>)</argument_list></call></expr></argument>;
      <argument><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>styleRule</name></expr></argument>, <argument><expr><name>NS_ERROR_UNEXPECTED</name></expr></argument>)</argument_list></call></expr></argument>;

      <argument><expr><name>rv</name> = <call><name><name>aDst</name>-&gt;<name>SetInlineStyleRule</name></name><argument_list>(<argument><expr><name>styleRule</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></argument>;
      <argument><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>;

      continue;
    }</argument_list>

    <name>nsAutoString</name> <name>valStr</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>value</name>-&gt;<name>ToString</name></name><argument_list>(<argument><expr><name>valStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>aDst</name>-&gt;<name>SetAttr</name></name><argument_list>(<argument><expr><call><name><name>name</name>-&gt;<name>NamespaceID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>name</name>-&gt;<name>LocalName</name></name><argument_list>()</argument_list></call></expr></argument>,
                       <argument><expr><call><name><name>name</name>-&gt;<name>GetPrefix</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>valStr</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}

nsresult
<macro><name>nsGenericHTMLElement</name></macro><expr_stmt><expr><name>::<name>GetTagName</name></name>(<name>nsAString</name>&amp; <name>aTagName</name>)
<block>{
  <return>return <expr><call><name>GetNodeName</name><argument_list>(<argument><expr><name>aTagName</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsGenericHTMLElement</name>::<name>SetAttribute</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aName</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrName</name>*</type> <name>name</name> <init>= <expr><call><name>InternalGetExistingAttrNameFromQName</name><argument_list>(<argument><expr><name>aName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>name</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>CheckQName</name></name><argument_list>(<argument><expr><name>aName</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIAtom</name></expr></argument>&gt;</argument_list></name></type> <name>nameAtom</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>IsInHTMLDocument</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsAutoString</name></type> <name>lower</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>ASCIIToLower</name></name><argument_list>(<argument><expr><name>aName</name></expr></argument>, <argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nameAtom</name> = <call><name>do_GetAtom</name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
      <expr_stmt><expr><name>nameAtom</name> = <call><name>do_GetAtom</name><argument_list>(<argument><expr><name>aName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>nameAtom</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>SetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name>nameAtom</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name>SetAttr</name><argument_list>(<argument><expr><call><name><name>name</name>-&gt;<name>NamespaceID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>name</name>-&gt;<name>LocalName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>name</name>-&gt;<name>GetPrefix</name></name><argument_list>()</argument_list></call></expr></argument>,
                 <argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetNodeName</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aNodeName</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>mNodeInfo</name>-&gt;<name>GetQualifiedName</name></name><argument_list>(<argument><expr><name>aNodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>IsInHTMLDocument</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>ASCIIToUpper</name></name><argument_list>(<argument><expr><name>aNodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetElementsByTagName</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aTagname</name></decl></param>,
                                           <param><decl><type><name>nsIDOMNodeList</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Only lowercase the name if this is an HTML document.</comment>
  <if>if <condition>(<expr><call><name>IsInHTMLDocument</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>lower</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>ASCIIToLower</name></name><argument_list>(<argument><expr><name>aTagname</name></expr></argument>, <argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>nsGenericHTMLElementBase</name>::<name>GetElementsByTagName</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name><name>nsGenericHTMLElementBase</name>::<name>GetElementsByTagName</name></name><argument_list>(<argument><expr><name>aTagname</name></expr></argument>, <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">// Implementation for nsIDOMHTMLElement</comment>
<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetId</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aId</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>id</name></name></expr></argument>, <argument><expr><name>aId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>SetId</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aId</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>id</name></name></expr></argument>, <argument><expr><name>aId</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetTitle</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aTitle</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>title</name></name></expr></argument>, <argument><expr><name>aTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>SetTitle</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aTitle</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>title</name></name></expr></argument>, <argument><expr><name>aTitle</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetLang</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aLang</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>lang</name></name></expr></argument>, <argument><expr><name>aLang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>SetLang</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aLang</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>lang</name></name></expr></argument>, <argument><expr><name>aLang</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>nsAttrValue</name>::<name>EnumTable</name></name></type> <name><name>kDirTable</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr>"ltr"</expr>, <expr><name>NS_STYLE_DIRECTION_LTR</name></expr> }</block></expr>,
  <expr><block>{ <expr>"rtl"</expr>, <expr><name>NS_STYLE_DIRECTION_RTL</name></expr> }</block></expr>,
  <expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetDir</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aDir</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>attr</name> <init>= <expr><call><name><name>mAttrsAndChildren</name>.<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>dir</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>attr</name> &amp;&amp; <call><name><name>attr</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eEnum</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>attr</name>-&gt;<name>ToString</name></name><argument_list>(<argument><expr><name>aDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <expr_stmt><expr><call><name><name>aDir</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>SetDir</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aDir</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>dir</name></name></expr></argument>, <argument><expr><name>aDir</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetClassName</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aClassName</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>_class</name></name></expr></argument>, <argument><expr><name>aClassName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>SetClassName</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aClassName</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>_class</name></name></expr></argument>, <argument><expr><name>aClassName</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>IsBody</name><parameter_list>(<param><decl><type><name>nsIContent</name> *</type><name>aContent</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>aContent</name>-&gt;<name>NodeInfo</name></name><argument_list>()</argument_list></call>-&gt;<call><name>Equals</name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>body</name></name></expr></argument>)</argument_list></call> &amp;&amp;
         <call><name><name>aContent</name>-&gt;<name>IsHTML</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PRBool</name></type> <name>IS_TABLE_CELL</name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>frameType</name></decl></param>)</parameter_list> <block>{
  <return>return <expr><name><name>nsGkAtoms</name>::<name>tableCellFrame</name></name> == <name>frameType</name> ||
    <name><name>nsGkAtoms</name>::<name>bcTableCellFrame</name></name> == <name>frameType</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>IsOffsetParent</name><parameter_list>(<param><decl><type><name>nsIFrame</name>*</type> <name>aFrame</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIAtom</name>*</type> <name>frameType</name> <init>= <expr><call><name><name>aFrame</name>-&gt;<name>GetType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr>(<call><name>IS_TABLE_CELL</name><argument_list>(<argument><expr><name>frameType</name></expr></argument>)</argument_list></call> ||
          <name>frameType</name> == <name><name>nsGkAtoms</name>::<name>tableFrame</name></name>)</expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetOffsetRect</name></name><parameter_list>(<param><decl><type><name>nsRect</name>&amp;</type> <name>aRect</name></decl></param>, <param><decl><type><name>nsIContent</name>**</type> <name>aOffsetParent</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aOffsetParent</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>aRect</name> = <call><name>nsRect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>frame</name> <init>= <expr><call><name>GetStyledFrame</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>frame</name></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>parent</name> <init>= <expr><call><name><name>frame</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsPoint</name></type> <name>origin</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>parent</name> &amp;&amp; <call><name><name>parent</name>-&gt;<name>GetType</name></name><argument_list>()</argument_list></call> == <name><name>nsGkAtoms</name>::<name>tableOuterFrame</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>origin</name> = <call><name><name>parent</name>-&gt;<name>GetPositionIgnoringScrolling</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>parent</name> = <call><name><name>parent</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>Element</name>*</type> <name>docElement</name> <init>= <expr><call><name>GetCurrentDoc</name><argument_list>()</argument_list></call>-&gt;<call><name>GetRootElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsIContent</name>*</type> <name>content</name> <init>= <expr><call><name><name>frame</name>-&gt;<name>GetContent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>content</name> &amp;&amp; (<call><name>IsBody</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call> || <name>content</name> == <name>docElement</name>)</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>parent</name> = <name>frame</name></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>PRBool</name></type> <name>isPositioned</name> <init>= <expr><call><name><name>frame</name>-&gt;<name>GetStyleDisplay</name></name><argument_list>()</argument_list></call>-&gt;<call><name>IsPositioned</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>PRBool</name></type> <name>isAbsolutelyPositioned</name> <init>=
      <expr><call><name><name>frame</name>-&gt;<name>GetStyleDisplay</name></name><argument_list>()</argument_list></call>-&gt;<call><name>IsAbsolutelyPositioned</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>origin</name> += <call><name><name>frame</name>-&gt;<name>GetPositionIgnoringScrolling</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <for>for ( <init>;</init> <condition><expr><name>parent</name></expr> ;</condition> <incr><expr><name>parent</name> = <call><name><name>parent</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call></expr></incr>) <block>{
      <expr_stmt><expr><name>content</name> = <call><name><name>parent</name>-&gt;<name>GetContent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Stop at the first ancestor that is positioned.</comment>
      <if>if <condition>(<expr><call><name><name>parent</name>-&gt;<name>GetStyleDisplay</name></name><argument_list>()</argument_list></call>-&gt;<call><name>IsPositioned</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>aOffsetParent</name> = <name>content</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aOffsetParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      }</block></then></if>

      <comment type="line">// Add the parent's origin to our own to get to the</comment>
      <comment type="line">// right coordinate system.</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>PRBool</name></type> <name>isOffsetParent</name> <init>= <expr>!<name>isPositioned</name> &amp;&amp; <call><name>IsOffsetParent</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>isAbsolutelyPositioned</name> &amp;&amp; !<name>isOffsetParent</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>origin</name> += <call><name><name>parent</name>-&gt;<name>GetPositionIgnoringScrolling</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><name>content</name></expr>)</condition><then> <block>{
        <comment type="line">// If we've hit the document element, break here.</comment>
        <if>if <condition>(<expr><name>content</name> == <name>docElement</name></expr>)</condition><then> <block>{
          <break>break;</break>
        }</block></then></if>

        <comment type="line">// Break if the ancestor frame type makes it suitable as offset parent</comment>
        <comment type="line">// and this element is *not* positioned or if we found the body element.</comment>
        <if>if <condition>(<expr><name>isOffsetParent</name> || <call><name>IsBody</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr>*<name>aOffsetParent</name> = <name>content</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aOffsetParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        }</block></then></if>
      }</block></then></if>
    }</block></for>

    <if>if <condition>(<expr><name>isAbsolutelyPositioned</name> &amp;&amp; !*<name>aOffsetParent</name></expr>)</condition><then> <block>{
      <comment type="line">// If this element is absolutely positioned, but we don't have</comment>
      <comment type="line">// an offset parent it means this element is an absolutely</comment>
      <comment type="line">// positioned child that's not nested inside another positioned</comment>
      <comment type="line">// element, in this case the element's frame's parent is the</comment>
      <comment type="line">// frame for the HTML element so we fail to find the body in the</comment>
      <comment type="line">// parent chain. We want the offset parent in this case to be</comment>
      <comment type="line">// the body, so we just get the body element from the document.</comment>

      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLDocument</name></expr></argument>&gt;</argument_list></name></type> <name>html_doc</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name>GetCurrentDoc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>html_doc</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLElement</name></expr></argument>&gt;</argument_list></name></type> <name>html_element</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>html_doc</name>-&gt;<name>GetBody</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>html_element</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>html_element</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>html_element</name></expr></argument>, <argument><expr><name>aOffsetParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
    }</block></then></if>
  }</block></else></if>

  <comment type="line">// Subtract the parent border unless it uses border-box sizing.</comment>
  <if>if <condition>(<expr><name>parent</name> &amp;&amp;
      <call><name><name>parent</name>-&gt;<name>GetStylePosition</name></name><argument_list>()</argument_list></call>-&gt;<name>mBoxSizing</name> != <name>NS_STYLE_BOX_SIZING_BORDER</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleBorder</name>*</type> <name>border</name> <init>= <expr><call><name><name>parent</name>-&gt;<name>GetStyleBorder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>origin</name>.<name>x</name></name> -= <call><name><name>border</name>-&gt;<name>GetActualBorderWidth</name></name><argument_list>(<argument><expr><name>NS_SIDE_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>origin</name>.<name>y</name></name> -= <call><name><name>border</name>-&gt;<name>GetActualBorderWidth</name></name><argument_list>(<argument><expr><name>NS_SIDE_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// XXX We should really consider subtracting out padding for</comment>
  <comment type="line">// content-box sizing, but we should see what IE does....</comment>

  <comment type="line">// Convert to pixels.</comment>
  <expr_stmt><expr><name><name>aRect</name>.<name>x</name></name> = <call><name><name>nsPresContext</name>::<name>AppUnitsToIntCSSPixels</name></name><argument_list>(<argument><expr><name><name>origin</name>.<name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aRect</name>.<name>y</name></name> = <call><name><name>nsPresContext</name>::<name>AppUnitsToIntCSSPixels</name></name><argument_list>(<argument><expr><name><name>origin</name>.<name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Get the union of all rectangles in this and continuation frames.</comment>
  <comment type="line">// It doesn't really matter what we use as aRelativeTo here, since</comment>
  <comment type="line">// we only care about the size. We just have to use something non-null.</comment>
  <decl_stmt><decl><type><name>nsRect</name></type> <name>rcFrame</name> <init>= <expr><call><name><name>nsLayoutUtils</name>::<name>GetAllInFlowRectsUnion</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>aRect</name>.<name>width</name></name> = <call><name><name>nsPresContext</name>::<name>AppUnitsToIntCSSPixels</name></name><argument_list>(<argument><expr><name><name>rcFrame</name>.<name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aRect</name>.<name>height</name></name> = <call><name><name>nsPresContext</name>::<name>AppUnitsToIntCSSPixels</name></name><argument_list>(<argument><expr><name><name>rcFrame</name>.<name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetOffsetTop</name></name><parameter_list>(<param><decl><type><name>PRInt32</name>*</type> <name>aOffsetTop</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsRect</name></type> <name>rcFrame</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>parent</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetOffsetRect</name><argument_list>(<argument><expr><name>rcFrame</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aOffsetTop</name> = <name><name>rcFrame</name>.<name>y</name></name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetOffsetLeft</name></name><parameter_list>(<param><decl><type><name>PRInt32</name>*</type> <name>aOffsetLeft</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsRect</name></type> <name>rcFrame</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>parent</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetOffsetRect</name><argument_list>(<argument><expr><name>rcFrame</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aOffsetLeft</name> = <name><name>rcFrame</name>.<name>x</name></name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetOffsetWidth</name></name><parameter_list>(<param><decl><type><name>PRInt32</name>*</type> <name>aOffsetWidth</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsRect</name></type> <name>rcFrame</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>parent</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetOffsetRect</name><argument_list>(<argument><expr><name>rcFrame</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aOffsetWidth</name> = <name><name>rcFrame</name>.<name>width</name></name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetOffsetHeight</name></name><parameter_list>(<param><decl><type><name>PRInt32</name>*</type> <name>aOffsetHeight</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsRect</name></type> <name>rcFrame</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>parent</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetOffsetRect</name><argument_list>(<argument><expr><name>rcFrame</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aOffsetHeight</name> = <name><name>rcFrame</name>.<name>height</name></name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetOffsetParent</name></name><parameter_list>(<param><decl><type><name>nsIDOMElement</name>**</type> <name>aOffsetParent</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsRect</name></type> <name>rcFrame</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>parent</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetOffsetRect</name><argument_list>(<argument><expr><name>rcFrame</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>parent</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>aOffsetParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr>*<name>aOffsetParent</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetInnerHTML</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aInnerHTML</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aInnerHTML</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>doc</name> <init>= <expr><call><name>GetOwnerDoc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>doc</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return> <comment type="line">// We rely on the document for doing HTML conversion</comment>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>contentType</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>IsInHTMLDocument</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>contentType</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"text/html"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name><name>doc</name>-&gt;<name>GetContentType</name></name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocumentEncoder</name></expr></argument>&gt;</argument_list></name></type> <name>docEncoder</name> <init>= <expr><call><name><name>doc</name>-&gt;<name>GetCachedEncoder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>docEncoder</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>docEncoder</name> =
      <call><name>do_CreateInstance</name><argument_list>(<argument><expr><call><name>PromiseFlatCString</name><argument_list>(
        <argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>NS_DOC_ENCODER_CONTRACTID_BASE</name></expr></argument>)</argument_list></call> +
        <call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call></expr></argument>
      )</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr>!(<name>docEncoder</name> || <call><name><name>doc</name>-&gt;<name>IsHTML</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
    <comment type="line">// This could be some type for which we create a synthetic document.  Try</comment>
    <comment type="line">// again as XML</comment>
    <expr_stmt><expr><call><name><name>contentType</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"application/xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>docEncoder</name> = <call><name>do_CreateInstance</name><argument_list>(<argument><expr><name>NS_DOC_ENCODER_CONTRACTID_BASE</name> "application/xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>docEncoder</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rv</name> = <call><name><name>docEncoder</name>-&gt;<name>NativeInit</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>contentType</name></expr></argument>,
                              <argument><expr><name><name>nsIDocumentEncoder</name>::<name>OutputEncodeBasicEntities</name></name> |
                              <comment type="line">// Output DOM-standard newlines</comment>
                              <name><name>nsIDocumentEncoder</name>::<name>OutputLFLineBreak</name></name> |
                              <comment type="line">// Don't do linebreaking that's not present in</comment>
                              <comment type="line">// the source</comment>
                              <name><name>nsIDocumentEncoder</name>::<name>OutputRaw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>docEncoder</name>-&gt;<name>SetNativeContainerNode</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>docEncoder</name>-&gt;<name>EncodeToString</name></name><argument_list>(<argument><expr><name>aInnerHTML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>doc</name>-&gt;<name>SetCachedEncoder</name></name><argument_list>(<argument><expr><call><name><name>docEncoder</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>SetInnerHTML</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aInnerHTML</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>doc</name> <init>= <expr><call><name>GetOwnerDoc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// This BeginUpdate/EndUpdate pair is important to make us reenable the</comment>
  <comment type="line">// scriptloader before the last EndUpdate call.</comment>
  <function_decl><type><name>mozAutoDocUpdate</name></type> <name>updateBatch</name><parameter_list>(<param><decl><type><name>doc</name></type></decl></param>, <param><decl><type><name>UPDATE_CONTENT_MODEL</name></type></decl></param>, <param><decl><type><name>PR_TRUE</name></type></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// Batch possible DOMSubtreeModified events.</comment>
  <function_decl><type><name>mozAutoSubtreeModified</name></type> <name>subtree</name><parameter_list>(<param><decl><type><name>doc</name></type></decl></param>, <param><decl><type><name>nsnull</name></type></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// Remove childnodes</comment>
  <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>SetNodeTextContent</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>EmptyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocumentFragment</name></expr></argument>&gt;</argument_list></name></type> <name>df</name></decl>;</decl_stmt>

  <comment type="line">// Strong ref since appendChild can fire events</comment>
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsScriptLoader</name></expr></argument>&gt;</argument_list></name></type> <name>loader</name> <init>= <expr><call><name><name>doc</name>-&gt;<name>ScriptLoader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>scripts_enabled</name> <init>= <expr><call><name><name>loader</name>-&gt;<name>GetEnabled</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>loader</name>-&gt;<name>SetEnabled</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name><name>doc</name>-&gt;<name>IsHTML</name></name><argument_list>()</argument_list></call> &amp;&amp; <name><name>nsHtml5Module</name>::<name>sEnabled</name></name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIParser</name></expr></argument>&gt;</argument_list></name></type> <name>parser</name> <init>= <expr><call><name><name>doc</name>-&gt;<name>GetFragmentParser</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>parser</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>parser</name>-&gt;<name>Reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>parser</name> = <call><name><name>nsHtml5Module</name>::<name>NewHtml5Parser</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <decl_stmt><decl><type><name>PRInt32</name></type> <name>oldChildCount</name> <init>= <expr><call><name>GetChildCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>parser</name>-&gt;<name>ParseFragment</name></name><argument_list>(<argument><expr><name>aInnerHTML</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>Tag</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetNameSpaceID</name><argument_list>()</argument_list></call></expr></argument>,
                          <argument><expr><call><name><name>doc</name>-&gt;<name>GetCompatibilityMode</name></name><argument_list>()</argument_list></call> == <name>eCompatibility_NavQuirks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>doc</name>-&gt;<name>SetFragmentParser</name></name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// HTML5 parser has notified, but not fired mutation events.</comment>
    <comment type="line">// Fire mutation events. Optimize for the case when there are no listeners</comment>
    <decl_stmt><decl><type><name>nsPIDOMWindow</name>*</type> <name>window</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>newChildCount</name> <init>= <expr><call><name>GetChildCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>newChildCount</name> &amp;&amp;
        (((<name>window</name> = <call><name><name>doc</name>-&gt;<name>GetInnerWindow</name></name><argument_list>()</argument_list></call>) &amp;&amp;
          <call><name><name>window</name>-&gt;<name>HasMutationListeners</name></name><argument_list>(<argument><expr><name>NS_EVENT_BITS_MUTATION_NODEINSERTED</name></expr></argument>)</argument_list></call>) ||
         !<name>window</name>)</expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>childNodes</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>newChildCount</name> - <name>oldChildCount</name> &gt;= 0</expr></argument>,
                   <argument><expr>"What, some unexpected dom mutation has happened?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>childNodes</name>.<name>SetCapacity</name></name><argument_list>(<argument><expr><name>newChildCount</name> - <name>oldChildCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><expr><name><name>nsINode</name>::<name>ChildIterator</name></name> <call><name>iter</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr>!<call><name><name>iter</name>.<name>IsDone</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><call><name><name>iter</name>.<name>Next</name></name><argument_list>()</argument_list></call></expr></incr>) <block>{
        <expr_stmt><expr><call><name><name>childNodes</name>.<name>AppendObject</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
      <expr_stmt><expr><call><name><name>nsGenericElement</name>::<name>FireNodeInserted</name></name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>childNodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><name>rv</name> = <call><name><name>nsContentUtils</name>::<name>CreateContextualFragment</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aInnerHTML</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>,
                                                  <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINode</name></expr></argument>&gt;</argument_list></name></type> <name>fragment</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsINode</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>-&gt;<call><name>AppendChild</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></else></if>

  <if>if <condition>(<expr><name>scripts_enabled</name></expr>)</condition><then> <block>{
    <comment type="line">// If we disabled scripts, re-enable them now that we're</comment>
    <comment type="line">// done. Don't fire JS timeouts when enabling the context here.</comment>

    <expr_stmt><expr><call><name><name>loader</name>-&gt;<name>SetEnabled</name></name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>ScrollIntoView</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aTop</name></decl></param>, <param><decl><type><name>PRUint8</name></type> <name>optional_argc</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIDocument</name> *</type><name>document</name> <init>= <expr><call><name>GetCurrentDoc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>document</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// Get the presentation shell</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>presShell</name> <init>= <expr><call><name><name>document</name>-&gt;<name>GetShell</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>presShell</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr>!<name>optional_argc</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>aTop</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRIntn</name></type> <name>vpercent</name> <init>= <expr><name>aTop</name> ? <name>NS_PRESSHELL_SCROLL_TOP</name> :
    <name>NS_PRESSHELL_SCROLL_BOTTOM</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>presShell</name>-&gt;<name>ScrollContentIntoView</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>vpercent</name></expr></argument>,
                                   <argument><expr><name>NS_PRESSHELL_SCROLL_ANYWHERE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetSpellcheck</name></name><parameter_list>(<param><decl><type><name>PRBool</name>*</type> <name>aSpellcheck</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aSpellcheck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aSpellcheck</name> = <name>PR_FALSE</name></expr>;</expr_stmt>              <comment type="line">// Default answer is to not spellcheck</comment>

  <comment type="line">// Has the state has been explicitly set?</comment>
  <decl_stmt><decl><type><name>nsIContent</name>*</type> <name>node</name></decl>;</decl_stmt>
  <for>for (<init><expr><name>node</name> = <name>this</name></expr>;</init> <condition><expr><name>node</name></expr>;</condition> <incr><expr><name>node</name> = <call><name><name>node</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call></expr></incr>) <block>{
    <if>if <condition>(<expr><call><name><name>node</name>-&gt;<name>IsHTML</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><specifier>static</specifier> <name><name>nsIContent</name>::<name>AttrValuesArray</name></name></type> <name><name>strings</name><index>[]</index></name> <init>=
        <expr><block>{<expr>&amp;<name><name>nsGkAtoms</name>::<name>_true</name></name></expr>, <expr>&amp;<name><name>nsGkAtoms</name>::<name>_false</name></name></expr>, <expr><name>nsnull</name></expr>}</block></expr></init></decl>;</decl_stmt>
      <switch>switch <condition>(<expr><call><name><name>node</name>-&gt;<name>FindAttrValueIn</name></name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>spellcheck</name></name></expr></argument>,
                                    <argument><expr><name>strings</name></expr></argument>, <argument><expr><name>eCaseMatters</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
        <case>case <expr>0</expr>:                         <comment type="line">// spellcheck = "true"</comment>
          <expr_stmt><expr>*<name>aSpellcheck</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
          <comment type="line">// Fall through</comment>
        </case><case>case <expr>1</expr>:                         <comment type="line">// spellcheck = "false"</comment>
          <return>return <expr><name>NS_OK</name></expr>;</return>
      </case>}</block></switch>
    }</block></then></if>
  }</block></for>

  <comment type="line">// Is this a chrome element?</comment>
  <if>if <condition>(<expr><call><name><name>nsContentUtils</name>::<name>IsChromeDoc</name></name><argument_list>(<argument><expr><call><name>GetOwnerDoc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>                       <comment type="line">// Not spellchecked by default</comment>
  }</block></then></if>

  <if>if <condition>(<expr><call><name>IsCurrentBodyElement</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIHTMLDocument</name></expr></argument>&gt;</argument_list></name></type> <name>doc</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name>GetCurrentDoc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>doc</name></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>aSpellcheck</name> = <call><name><name>doc</name>-&gt;<name>IsEditingOn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// Is this element editable?</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFormControl</name></expr></argument>&gt;</argument_list></name></type> <name>formControl</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>formControl</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>                       <comment type="line">// Not spellchecked by default</comment>
  }</block></then></if>

  <comment type="line">// Is this a multiline plaintext input?</comment>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>controlType</name> <init>= <expr><call><name><name>formControl</name>-&gt;<name>GetType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>controlType</name> == <name>NS_FORM_TEXTAREA</name></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aSpellcheck</name> = <name>PR_TRUE</name></expr>;</expr_stmt>             <comment type="line">// Spellchecked by default</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// Is this anything other than an input text?</comment>
  <comment type="line">// Other inputs are not spellchecked.</comment>
  <if>if <condition>(<expr><name>controlType</name> != <name>NS_FORM_INPUT_TEXT</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>                       <comment type="line">// Not spellchecked by default</comment>
  }</block></then></if>

  <comment type="line">// Does the user want input text spellchecked by default?</comment>
  <comment type="line">// NOTE: Do not reflect a pref value of 0 back to the DOM getter.</comment>
  <comment type="line">// The web page should not know if the user has disabled spellchecking.</comment>
  <comment type="line">// We'll catch this in the editor itself.</comment>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>spellcheckLevel</name> <init>=
    <expr><call><name><name>nsContentUtils</name>::<name>GetIntPref</name></name><argument_list>(<argument><expr>"layout.spellcheckDefault"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>spellcheckLevel</name> == 2</expr>)</condition><then> <block>{           <comment type="line">// "Spellcheck multi- and single-line"</comment>
    <expr_stmt><expr>*<name>aSpellcheck</name> = <name>PR_TRUE</name></expr>;</expr_stmt>             <comment type="line">// Spellchecked by default</comment>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsGenericHTMLElement</name>::<name>SetSpellcheck</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aSpellcheck</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aSpellcheck</name></expr>)</condition><then> <block>{
    <return>return <expr><call><name>SetAttrHelper</name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>spellcheck</name></name></expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"true"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name>SetAttrHelper</name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>spellcheck</name></name></expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"false"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetDraggable</name></name><parameter_list>(<param><decl><type><name>PRBool</name>*</type> <name>aDraggable</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aDraggable</name> = <call><name>AttrValueIs</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>draggable</name></name></expr></argument>,
                             <argument><expr><name><name>nsGkAtoms</name>::<name>_true</name></name></expr></argument>, <argument><expr><name>eIgnoreCase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsGenericHTMLElement</name>::<name>SetDraggable</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aDraggable</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>SetAttrHelper</name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>draggable</name></name></expr></argument>,
                       <argument><expr><name>aDraggable</name> ? <call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"true"</expr></argument>)</argument_list></call> :
                                    <call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"false"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLElement</name>::<name>InNavQuirksMode</name></name><parameter_list>(<param><decl><type><name>nsIDocument</name>*</type> <name>aDoc</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>aDoc</name> &amp;&amp; <call><name><name>aDoc</name>-&gt;<name>GetCompatibilityMode</name></name><argument_list>()</argument_list></call> == <name>eCompatibility_NavQuirks</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLElement</name>::<name>UpdateEditableState</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// XXX Should we do this only when in a document?</comment>
  <decl_stmt><decl><type><name>ContentEditableTristate</name></type> <name>value</name> <init>= <expr><call><name>GetContentEditableValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>value</name> != <name>eInherit</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>SetEditableFlag</name><argument_list>(<argument><expr>!!<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>nsStyledElement</name>::<name>UpdateEditableState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>BindToTree</name></name><parameter_list>(<param><decl><type><name>nsIDocument</name>*</type> <name>aDocument</name></decl></param>, <param><decl><type><name>nsIContent</name>*</type> <name>aParent</name></decl></param>,
                                 <param><decl><type><name>nsIContent</name>*</type> <name>aBindingParent</name></decl></param>,
                                 <param><decl><type><name>PRBool</name></type> <name>aCompileEventHandlers</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsGenericHTMLElementBase</name>::<name>BindToTree</name></name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>, <argument><expr><name>aParent</name></expr></argument>,
                                                     <argument><expr><name>aBindingParent</name></expr></argument>,
                                                     <argument><expr><name>aCompileEventHandlers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>aDocument</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><call><name>HasFlag</name><argument_list>(<argument><expr><name>NODE_HAS_NAME</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>aDocument</name>-&gt;
        <name>AddToNameTable</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>GetParsedAttr</name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>name</name></name></expr></argument>)</argument_list></call>-&gt;<call><name>GetAtomValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><call><name>HasFlag</name><argument_list>(<argument><expr><name>NODE_IS_EDITABLE</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>GetContentEditableValue</name><argument_list>()</argument_list></call> == <name>eTrue</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIHTMLDocument</name></expr></argument>&gt;</argument_list></name></type> <name>htmlDocument</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>htmlDocument</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>htmlDocument</name>-&gt;<name>ChangeContentEditableCount</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLElement</name>::<name>UnbindFromTree</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aDeep</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aNullParent</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>RemoveFromNameTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>GetContentEditableValue</name><argument_list>()</argument_list></call> == <name>eTrue</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIHTMLDocument</name></expr></argument>&gt;</argument_list></name></type> <name>htmlDocument</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name>GetCurrentDoc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>htmlDocument</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>htmlDocument</name>-&gt;<name>ChangeContentEditableCount</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>nsStyledElement</name>::<name>UnbindFromTree</name></name><argument_list>(<argument><expr><name>aDeep</name></expr></argument>, <argument><expr><name>aNullParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>nsHTMLFormElement</name>*</type>
<name><name>nsGenericHTMLElement</name>::<name>FindForm</name></name><parameter_list>(<param><decl><type><name>nsHTMLFormElement</name>*</type> <name>aCurrentForm</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Make sure we don't end up finding a form that's anonymous from</comment>
  <comment type="line">// our point of view.</comment>
  <decl_stmt><decl><type><name>nsIContent</name>*</type> <name>bindingParent</name> <init>= <expr><call><name>GetBindingParent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsIContent</name>*</type> <name>content</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>content</name> != <name>bindingParent</name> &amp;&amp; <name>content</name></expr>)</condition> <block>{
    <comment type="line">// If the current ancestor is a form, return it as our form</comment>
    <if>if <condition>(<expr><call><name><name>content</name>-&gt;<name>Tag</name></name><argument_list>()</argument_list></call> == <name><name>nsGkAtoms</name>::<name>form</name></name> &amp;&amp;
        <call><name><name>content</name>-&gt;<name>IsHTML</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
      <if>if <condition>(<expr>!<call><name><name>nsContentUtils</name>::<name>IsInSameAnonymousTree</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="line">// It's possible that we started unbinding at |content| or</comment>
        <comment type="line">// some ancestor of it, and |content| and |this| used to all be</comment>
        <comment type="line">// anonymous.  Check for this the hard way.</comment>
        <for>for (<init><decl><type><name>nsIContent</name>*</type> <name>child</name> <init>= <expr><name>this</name></expr></init></decl>;</init> <condition><expr><name>child</name> != <name>content</name></expr>;</condition>
             <incr><expr><name>child</name> = <call><name><name>child</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call></expr></incr>) <block>{
          <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>child</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call>-&gt;<call><name>IndexOf</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> != -1</expr></argument>,
                       <argument><expr>"Walked too far?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
      }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <return>return <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsHTMLFormElement</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>nsIContent</name> *</type><name>prevContent</name> <init>= <expr><name>content</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>content</name> = <call><name><name>prevContent</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name>content</name> &amp;&amp; <name>aCurrentForm</name></expr>)</condition><then> <block>{
      <comment type="line">// We got to the root of the subtree we're in, and we're being removed</comment>
      <comment type="line">// from the DOM (the only time we get into this method with a non-null</comment>
      <comment type="line">// aCurrentForm).  Check whether aCurrentForm is in the same subtree.  If</comment>
      <comment type="line">// it is, we want to return aCurrentForm, since this case means that</comment>
      <comment type="line">// we're one of those inputs-in-a-table that have a hacked mForm pointer</comment>
      <comment type="line">// and a subtree containing both us and the form got removed from the</comment>
      <comment type="line">// DOM.</comment>
      <if>if <condition>(<expr><call><name><name>nsContentUtils</name>::<name>ContentIsDescendantOf</name></name><argument_list>(<argument><expr><name>aCurrentForm</name></expr></argument>, <argument><expr><name>prevContent</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>aCurrentForm</name></expr>;</return>
      }</block></then></if>
    }</block></then></if>
  }</block></while>

  <return>return <expr><name>nsnull</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>IsArea</name><parameter_list>(<param><decl><type><name>nsIContent</name> *</type><name>aContent</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr>(<call><name><name>aContent</name>-&gt;<name>Tag</name></name><argument_list>()</argument_list></call> == <name><name>nsGkAtoms</name>::<name>area</name></name> &amp;&amp;
          <call><name><name>aContent</name>-&gt;<name>IsHTML</name></name><argument_list>()</argument_list></call>)</expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLElement</name>::<name>CheckHandleEventForAnchorsPreconditions</name></name><parameter_list>(<param><decl><type><name>nsEventChainVisitor</name>&amp;</type> <name>aVisitor</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><call><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILink</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr>"should be called only when |this| implements |nsILink|"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name><name>aVisitor</name>.<name>mPresContext</name></name></expr>)</condition><then> <block>{
    <comment type="line">// We need a pres context to do link stuff. Some events (e.g. mutation</comment>
    <comment type="line">// events) don't have one.</comment>
    <comment type="line">// XXX: ideally, shouldn't we be able to do what we need without one?</comment>
    <return>return <expr><name>PR_FALSE</name></expr>;</return> 
  }</block></then></if>

  <comment type="line">//Need to check if we hit an imagemap area and if so see if we're handling</comment>
  <comment type="line">//the event on that map or on a link farther up the tree.  If we're on a</comment>
  <comment type="line">//link farther up, do nothing.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type> <name>target</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aVisitor</name>.<name>mPresContext</name>-&gt;<name>EventStateManager</name></name><argument_list>()</argument_list></call>-&gt;
    <call><name>GetEventTargetContent</name><argument_list>(<argument><expr><name><name>aVisitor</name>.<name>mEvent</name></name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr>!<name>target</name> || !<call><name>IsArea</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call> || <call><name>IsArea</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>PreHandleEventForAnchors</name></name><parameter_list>(<param><decl><type><name>nsEventChainPreVisitor</name>&amp;</type> <name>aVisitor</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsGenericHTMLElementBase</name>::<name>PreHandleEvent</name></name><argument_list>(<argument><expr><name>aVisitor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<call><name>CheckHandleEventForAnchorsPreconditions</name><argument_list>(<argument><expr><name>aVisitor</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name>PreHandleEventForLinks</name><argument_list>(<argument><expr><name>aVisitor</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>PostHandleEventForAnchors</name></name><parameter_list>(<param><decl><type><name>nsEventChainPostVisitor</name>&amp;</type> <name>aVisitor</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>CheckHandleEventForAnchorsPreconditions</name><argument_list>(<argument><expr><name>aVisitor</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name>PostHandleEventForLinks</name><argument_list>(<argument><expr><name>aVisitor</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLElement</name>::<name>IsHTMLLink</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>**</type> <name>aURI</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr>"Must provide aURI out param"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aURI</name> = <call><name>GetHrefURIForAnchors</name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// We promise out param is non-null if we return true, so base rv on it</comment>
  <return>return <expr>*<name>aURI</name> != <name>nsnull</name></expr>;</return>
}</block></function>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetHrefURIForAnchors</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <comment type="line">// This is used by the three nsILink implementations and</comment>
  <comment type="line">// nsHTMLStyleElement.</comment>

  <comment type="line">// Get href= attribute (relative URI).</comment>

  <comment type="line">// We use the nsAttrValue's copy of the URI string to avoid copying.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetURIAttr</name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>href</name></name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>uri</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetHrefURIToMutate</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>**</type> <name>aURI</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>GetURIAttr</name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>href</name></name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>AfterSetAttr</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aNamespaceID</name></decl></param>, <param><decl><type><name>nsIAtom</name>*</type> <name>aName</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>nsAString</name>*</type> <name>aValue</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aNamespaceID</name> == <name>kNameSpaceID_None</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><call><name><name>nsContentUtils</name>::<name>IsEventAttributeName</name></name><argument_list>(<argument><expr><name>aName</name></expr></argument>, <argument><expr><name>EventNameType_HTML</name></expr></argument>)</argument_list></call> &amp;&amp; <name>aValue</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>AddScriptEventListener</name><argument_list>(<argument><expr><name>aName</name></expr></argument>, <argument><expr>*<name>aValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>aNotify</name> &amp;&amp; <name>aName</name> == <name><name>nsGkAtoms</name>::<name>spellcheck</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>SyncEditorsOnSubtree</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>
  }</block></then></if>

  <return>return <expr><call><name><name>nsGenericHTMLElementBase</name>::<name>AfterSetAttr</name></name><argument_list>(<argument><expr><name>aNamespaceID</name></expr></argument>, <argument><expr><name>aName</name></expr></argument>,
                                                <argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetEventListenerManagerForAttr</name></name><parameter_list>(<param><decl><type><name>nsIEventListenerManager</name>**</type> <name>aManager</name></decl></param>,
                                                     <param><decl><type><name>nsISupports</name>**</type> <name>aTarget</name></decl></param>,
                                                     <param><decl><type><name>PRBool</name>*</type> <name>aDefer</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Attributes on the body and frameset tags get set on the global object</comment>
  <if>if <condition>(<expr><call><name><name>mNodeInfo</name>-&gt;<name>Equals</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>body</name></name></expr></argument>)</argument_list></call> ||
      <call><name><name>mNodeInfo</name>-&gt;<name>Equals</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>frameset</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsPIDOMWindow</name> *</type><name>win</name></decl>;</decl_stmt>

    <comment type="line">// If we have a document, and it has a window, add the event</comment>
    <comment type="line">// listener on the window (the inner window). If not, proceed as</comment>
    <comment type="line">// normal.</comment>
    <comment type="line">// XXXbz sXBL/XBL2 issue: should we instead use GetCurrentDoc() here,</comment>
    <comment type="line">// override BindToTree for those classes and munge event listeners there?</comment>
    <decl_stmt><decl><type><name>nsIDocument</name> *</type><name>document</name> <init>= <expr><call><name>GetOwnerDoc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// FIXME (https://bugzilla.mozilla.org/show_bug.cgi?id=431767)</comment>
    <comment type="line">// nsDocument::GetInnerWindow can return an outer window in some cases,</comment>
    <comment type="line">// we don't want to stick an event listener on an outer window, so</comment>
    <comment type="line">// bail if it does.</comment>
    <if>if <condition>(<expr><name>document</name> &amp;&amp;
        (<name>win</name> = <call><name><name>document</name>-&gt;<name>GetInnerWindow</name></name><argument_list>()</argument_list></call>) &amp;&amp; <call><name><name>win</name>-&gt;<name>IsInnerWindow</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsPIDOMEventTarget</name></expr></argument>&gt;</argument_list></name></type> <name>piTarget</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>piTarget</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr>*<name>aManager</name> = <call><name><name>piTarget</name>-&gt;<name>GetListenerManager</name></name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>*<name>aManager</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aTarget</name> = <name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr>*<name>aDefer</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr>*<name>aManager</name> = <name>nsnull</name></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>aTarget</name> = <name>nsnull</name></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>aDefer</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name><name>nsGenericHTMLElementBase</name>::<name>GetEventListenerManagerForAttr</name></name><argument_list>(<argument><expr><name>aManager</name></expr></argument>,
                                                                  <argument><expr><name>aTarget</name></expr></argument>,
                                                                  <argument><expr><name>aDefer</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>SetAttr</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aNameSpaceID</name></decl></param>, <param><decl><type><name>nsIAtom</name>*</type> <name>aName</name></decl></param>,
                              <param><decl><type><name>nsIAtom</name>*</type> <name>aPrefix</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>,
                              <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRBool</name></type> <name>contentEditable</name> <init>= <expr><name>aNameSpaceID</name> == <name>kNameSpaceID_None</name> &amp;&amp;
                           <name>aName</name> == <name><name>nsGkAtoms</name>::<name>contenteditable</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>change</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>contentEditable</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>change</name> = <call><name>GetContentEditableValue</name><argument_list>()</argument_list></call> == <name>eTrue</name> ? -1 : 0</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetFlags</name><argument_list>(<argument><expr><name>NODE_MAY_HAVE_CONTENT_EDITABLE_ATTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsStyledElement</name>::<name>SetAttr</name></name><argument_list>(<argument><expr><name>aNameSpaceID</name></expr></argument>, <argument><expr><name>aName</name></expr></argument>, <argument><expr><name>aPrefix</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>,
                                         <argument><expr><name>aNotify</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>contentEditable</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><call><name><name>aValue</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call> || <call><name><name>aValue</name>.<name>LowerCaseEqualsLiteral</name></name><argument_list>(<argument><expr>"true"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>change</name> += 1</expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>ChangeEditableState</name><argument_list>(<argument><expr><name>change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>UnsetAttr</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aNameSpaceID</name></decl></param>, <param><decl><type><name>nsIAtom</name>*</type> <name>aAttribute</name></decl></param>,
                                <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRBool</name></type> <name>contentEditable</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>contentEditableChange</name></decl>;</decl_stmt>

  <comment type="line">// Check for event handlers</comment>
  <if>if <condition>(<expr><name>aNameSpaceID</name> == <name>kNameSpaceID_None</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>name</name></name></expr>)</condition><then> <block>{
      <comment type="line">// Have to do this before clearing flag. See RemoveFromNameTable</comment>
      <expr_stmt><expr><call><name>RemoveFromNameTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>UnsetFlags</name><argument_list>(<argument><expr><name>NODE_HAS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>contenteditable</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>contentEditable</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>contentEditableChange</name> = <call><name>GetContentEditableValue</name><argument_list>()</argument_list></call> == <name>eTrue</name> ? -1 : 0</expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name><name>nsContentUtils</name>::<name>IsEventAttributeName</name></name><argument_list>(<argument><expr><name>aAttribute</name></expr></argument>,
                                                  <argument><expr><name>EventNameType_HTML</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsIEventListenerManager</name>*</type> <name>manager</name> <init>= <expr><call><name>GetListenerManager</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>manager</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>manager</name>-&gt;<name>RemoveScriptEventListener</name></name><argument_list>(<argument><expr><name>aAttribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if></else></if></else></if>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsGenericHTMLElementBase</name>::<name>UnsetAttr</name></name><argument_list>(<argument><expr><name>aNameSpaceID</name></expr></argument>, <argument><expr><name>aAttribute</name></expr></argument>,
                                                    <argument><expr><name>aNotify</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>contentEditable</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>ChangeEditableState</name><argument_list>(<argument><expr><name>contentEditableChange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetBaseTarget</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aBaseTarget</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>ownerDoc</name> <init>= <expr><call><name>GetOwnerDoc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>ownerDoc</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>ownerDoc</name>-&gt;<name>GetBaseTarget</name></name><argument_list>(<argument><expr><name>aBaseTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name><name>aBaseTarget</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>

<comment type="line">//----------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>CanHaveName</name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aTag</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>aTag</name> == <name><name>nsGkAtoms</name>::<name>img</name></name> ||
         <name>aTag</name> == <name><name>nsGkAtoms</name>::<name>form</name></name> ||
         <name>aTag</name> == <name><name>nsGkAtoms</name>::<name>applet</name></name> ||
         <name>aTag</name> == <name><name>nsGkAtoms</name>::<name>embed</name></name> ||
         <name>aTag</name> == <name><name>nsGkAtoms</name>::<name>object</name></name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLElement</name>::<name>ParseAttribute</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aNamespaceID</name></decl></param>,
                                     <param><decl><type><name>nsIAtom</name>*</type> <name>aAttribute</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>,
                                     <param><decl><type><name>nsAttrValue</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aNamespaceID</name> == <name>kNameSpaceID_None</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>dir</name></name></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>aResult</name>.<name>ParseEnumValue</name></name><argument_list>(<argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>kDirTable</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
  
    <if>if <condition>(<expr><name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>tabindex</name></name></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>aResult</name>.<name>ParseIntWithBounds</name></name><argument_list>(<argument><expr><name>aValue</name></expr></argument>, <argument><expr>-32768</expr></argument>, <argument><expr>32767</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>name</name></name></expr>)</condition><then> <block>{
      <comment type="line">// Store name as an atom.  name="" means that the element has no name,</comment>
      <comment type="line">// not that it has an emptystring as the name.</comment>
      <expr_stmt><expr><call><name>RemoveFromNameTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name><name>aValue</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>UnsetFlags</name><argument_list>(<argument><expr><name>NODE_HAS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>PR_FALSE</name></expr>;</return>
      }</block></then></if>

      <expr_stmt><expr><call><name><name>aResult</name>.<name>ParseAtom</name></name><argument_list>(<argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name>CanHaveName</name><argument_list>(<argument><expr><call><name>Tag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>SetFlags</name><argument_list>(<argument><expr><name>NODE_HAS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>AddToNameTable</name><argument_list>(<argument><expr><call><name><name>aResult</name>.<name>GetAtomValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      
      <return>return <expr><name>PR_TRUE</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>contenteditable</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>aResult</name>.<name>ParseAtom</name></name><argument_list>(<argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>PR_TRUE</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><call><name><name>nsGenericHTMLElementBase</name>::<name>ParseAttribute</name></name><argument_list>(<argument><expr><name>aNamespaceID</name></expr></argument>, <argument><expr><name>aAttribute</name></expr></argument>,
                                                  <argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLElement</name>::<name>IsAttributeMapped</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsIAtom</name>*</type> <name>aAttribute</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>MappedAttributeEntry</name>* <specifier>const</specifier></type> <name><name>map</name><index>[]</index></name> <init>= <expr><block>{
    <expr><name>sCommonAttributeMap</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  
  <return>return <expr><call><name>FindAttributeDependence</name><argument_list>(<argument><expr><name>aAttribute</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><call><name>NS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsMapRuleToAttributesFunc</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetAttributeMappingFunction</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr>&amp;<name>MapCommonAttributesInto</name></expr>;</return>
}</block></function>

<function><type><name>nsIFormControlFrame</name>*</type>
<name><name>nsGenericHTMLElement</name>::<name>GetFormControlFrame</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aFlushFrames</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aFlushFrames</name> &amp;&amp; <call><name>IsInDoc</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// Cause a flush of the frames, so we get up-to-date frame information</comment>
    <expr_stmt><expr><call><name>GetCurrentDoc</name><argument_list>()</argument_list></call>-&gt;<call><name>FlushPendingNotifications</name><argument_list>(<argument><expr><name>Flush_Frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>frame</name> <init>= <expr><call><name>GetPrimaryFrame</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>frame</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsIFormControlFrame</name>*</type> <name>form_frame</name> <init>= <expr><call><name>do_QueryFrame</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>form_frame</name></expr>)</condition><then> <block>{
      <return>return <expr><name>form_frame</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// If we have generated content, the primary frame will be a</comment>
    <comment type="line">// wrapper frame..  out real frame will be in its child list.</comment>
    <for>for (<init><expr><name>frame</name> = <call><name><name>frame</name>-&gt;<name>GetFirstChild</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</init>
         <condition><expr><name>frame</name></expr>;</condition>
         <incr><expr><name>frame</name> = <call><name><name>frame</name>-&gt;<name>GetNextSibling</name></name><argument_list>()</argument_list></call></expr></incr>) <block>{
      <expr_stmt><expr><name>form_frame</name> = <call><name>do_QueryFrame</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>form_frame</name></expr>)</condition><then> <block>{
        <return>return <expr><name>form_frame</name></expr>;</return>
      }</block></then></if>
    }</block></for>
  }</block></then></if>

  <return>return <expr><name>nsnull</name></expr>;</return>
}</block></function>

<comment type="block">/* static */</comment> <function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetPrimaryPresState</name></name><parameter_list>(<param><decl><type><name>nsGenericHTMLElement</name>*</type> <name>aContent</name></decl></param>,
                                          <param><decl><type><name>nsPresState</name>**</type> <name>aPresState</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aPresState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>aPresState</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>result</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILayoutHistoryState</name></expr></argument>&gt;</argument_list></name></type> <name>history</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>key</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetLayoutHistoryAndKey</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>history</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>history</name></expr>)</condition><then> <block>{
    <comment type="line">// Get the pres state for this key, if it doesn't exist, create one</comment>
    <expr_stmt><expr><name>result</name> = <call><name><name>history</name>-&gt;<name>GetState</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>aPresState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!*<name>aPresState</name></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>aPresState</name> = new <call><name>nsPresState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>!*<name>aPresState</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
      }</block></then></if>
        
      <expr_stmt><expr><name>result</name> = <call><name><name>history</name>-&gt;<name>AddState</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>*<name>aPresState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><name>result</name></expr>;</return>
}</block></function>


<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetLayoutHistoryAndKey</name></name><parameter_list>(<param><decl><type><name>nsGenericHTMLElement</name>*</type> <name>aContent</name></decl></param>,
                                             <param><decl><type><name>PRBool</name></type> <name>aRead</name></decl></param>,
                                             <param><decl><type><name>nsILayoutHistoryState</name>**</type> <name>aHistory</name></decl></param>,
                                             <param><decl><type><name>nsACString</name>&amp;</type> <name>aKey</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">//</comment>
  <comment type="line">// Get the pres shell</comment>
  <comment type="line">//</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></type> <name>doc</name> <init>= <expr><call><name><name>aContent</name>-&gt;<name>GetDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>doc</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <comment type="line">//</comment>
  <comment type="line">// Get the history (don't bother with the key if the history is not there)</comment>
  <comment type="line">//</comment>
  <expr_stmt><expr>*<name>aHistory</name> = <call><name><name>doc</name>-&gt;<name>GetLayoutHistoryState</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!*<name>aHistory</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><name>aRead</name> &amp;&amp; !<call><name>(*<name>aHistory</name>)-&gt;<name>HasStates</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr>*<name>aHistory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <comment type="line">//</comment>
  <comment type="line">// Get the state key</comment>
  <comment type="line">//</comment>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>GenerateStateKey</name></name><argument_list>(<argument><expr><name>aContent</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>,
                                                 <argument><expr><name><name>nsIStatefulFrame</name>::<name>eNoID</name></name></expr></argument>,
                                                 <argument><expr><name>aKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr>*<name>aHistory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// If the state key is blank, this is anonymous content or for</comment>
  <comment type="line">// whatever reason we are not supposed to save/restore state.</comment>
  <if>if <condition>(<expr><call><name><name>aKey</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr>*<name>aHistory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// Add something unique to content so layout doesn't muck us up</comment>
  <expr_stmt><expr><name>aKey</name> += "-C"</expr>;</expr_stmt>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLElement</name>::<name>RestoreFormControlState</name></name><parameter_list>(<param><decl><type><name>nsGenericHTMLElement</name>*</type> <name>aContent</name></decl></param>,
                                              <param><decl><type><name>nsIFormControl</name>*</type> <name>aControl</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILayoutHistoryState</name></expr></argument>&gt;</argument_list></name></type> <name>history</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>key</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetLayoutHistoryAndKey</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>,
                                       <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>history</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>history</name></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsPresState</name> *</type><name>state</name></decl>;</decl_stmt>
  <comment type="line">// Get the pres state for this key</comment>
  <expr_stmt><expr><name>rv</name> = <call><name><name>history</name>-&gt;<name>GetState</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>state</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRBool</name></type> <name>result</name> <init>= <expr><call><name><name>aControl</name>-&gt;<name>RestoreState</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>history</name>-&gt;<name>RemoveState</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<comment type="line">// XXX This creates a dependency between content and frames</comment>
<function><type><name>nsPresContext</name>*</type>
<name><name>nsGenericHTMLElement</name>::<name>GetPresContext</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// Get the document</comment>
  <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>doc</name> <init>= <expr><call><name>GetDocument</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>doc</name></expr>)</condition><then> <block>{
    <comment type="line">// Get presentation shell 0</comment>
    <decl_stmt><decl><type><name>nsIPresShell</name> *</type><name>presShell</name> <init>= <expr><call><name><name>doc</name>-&gt;<name>GetShell</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>presShell</name></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>presShell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><name>nsnull</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>nsAttrValue</name>::<name>EnumTable</name></name></type> <name><name>kAlignTable</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr>"left"</expr>,      <expr><name>NS_STYLE_TEXT_ALIGN_LEFT</name></expr> }</block></expr>,
  <expr><block>{ <expr>"right"</expr>,     <expr><name>NS_STYLE_TEXT_ALIGN_RIGHT</name></expr> }</block></expr>,

  <expr><block>{ <expr>"top"</expr>,       <expr><name>NS_STYLE_VERTICAL_ALIGN_TOP</name></expr> }</block></expr>,
  <expr><block>{ <expr>"middle"</expr>,    <expr><name>NS_STYLE_VERTICAL_ALIGN_MIDDLE_WITH_BASELINE</name></expr> }</block></expr>,
  <expr><block>{ <expr>"bottom"</expr>,    <expr><name>NS_STYLE_VERTICAL_ALIGN_BASELINE</name></expr> }</block></expr>,

  <expr><block>{ <expr>"center"</expr>,    <expr><name>NS_STYLE_VERTICAL_ALIGN_MIDDLE_WITH_BASELINE</name></expr> }</block></expr>,
  <expr><block>{ <expr>"baseline"</expr>,  <expr><name>NS_STYLE_VERTICAL_ALIGN_BASELINE</name></expr> }</block></expr>,

  <expr><block>{ <expr>"texttop"</expr>,   <expr><name>NS_STYLE_VERTICAL_ALIGN_TEXT_TOP</name></expr> }</block></expr>,
  <expr><block>{ <expr>"absmiddle"</expr>, <expr><name>NS_STYLE_VERTICAL_ALIGN_MIDDLE</name></expr> }</block></expr>,
  <expr><block>{ <expr>"abscenter"</expr>, <expr><name>NS_STYLE_VERTICAL_ALIGN_MIDDLE</name></expr> }</block></expr>,
  <expr><block>{ <expr>"absbottom"</expr>, <expr><name>NS_STYLE_VERTICAL_ALIGN_BOTTOM</name></expr> }</block></expr>,
  <expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>nsAttrValue</name>::<name>EnumTable</name></name></type> <name><name>kDivAlignTable</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr>"left"</expr>, <expr><name>NS_STYLE_TEXT_ALIGN_MOZ_LEFT</name></expr> }</block></expr>,
  <expr><block>{ <expr>"right"</expr>, <expr><name>NS_STYLE_TEXT_ALIGN_MOZ_RIGHT</name></expr> }</block></expr>,
  <expr><block>{ <expr>"center"</expr>, <expr><name>NS_STYLE_TEXT_ALIGN_MOZ_CENTER</name></expr> }</block></expr>,
  <expr><block>{ <expr>"middle"</expr>, <expr><name>NS_STYLE_TEXT_ALIGN_MOZ_CENTER</name></expr> }</block></expr>,
  <expr><block>{ <expr>"justify"</expr>, <expr><name>NS_STYLE_TEXT_ALIGN_JUSTIFY</name></expr> }</block></expr>,
  <expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>nsAttrValue</name>::<name>EnumTable</name></name></type> <name><name>kFrameborderTable</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr>"yes"</expr>, <expr><name>NS_STYLE_FRAME_YES</name></expr> }</block></expr>,
  <expr><block>{ <expr>"no"</expr>, <expr><name>NS_STYLE_FRAME_NO</name></expr> }</block></expr>,
  <expr><block>{ <expr>"1"</expr>, <expr><name>NS_STYLE_FRAME_1</name></expr> }</block></expr>,
  <expr><block>{ <expr>"0"</expr>, <expr><name>NS_STYLE_FRAME_0</name></expr> }</block></expr>,
  <expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>nsAttrValue</name>::<name>EnumTable</name></name></type> <name><name>kScrollingTable</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr>"yes"</expr>, <expr><name>NS_STYLE_FRAME_YES</name></expr> }</block></expr>,
  <expr><block>{ <expr>"no"</expr>, <expr><name>NS_STYLE_FRAME_NO</name></expr> }</block></expr>,
  <expr><block>{ <expr>"on"</expr>, <expr><name>NS_STYLE_FRAME_ON</name></expr> }</block></expr>,
  <expr><block>{ <expr>"off"</expr>, <expr><name>NS_STYLE_FRAME_OFF</name></expr> }</block></expr>,
  <expr><block>{ <expr>"scroll"</expr>, <expr><name>NS_STYLE_FRAME_SCROLL</name></expr> }</block></expr>,
  <expr><block>{ <expr>"noscroll"</expr>, <expr><name>NS_STYLE_FRAME_NOSCROLL</name></expr> }</block></expr>,
  <expr><block>{ <expr>"auto"</expr>, <expr><name>NS_STYLE_FRAME_AUTO</name></expr> }</block></expr>,
  <expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>nsAttrValue</name>::<name>EnumTable</name></name></type> <name><name>kTableVAlignTable</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr>"top"</expr>,     <expr><name>NS_STYLE_VERTICAL_ALIGN_TOP</name></expr> }</block></expr>,
  <expr><block>{ <expr>"middle"</expr>,  <expr><name>NS_STYLE_VERTICAL_ALIGN_MIDDLE</name></expr> }</block></expr>,
  <expr><block>{ <expr>"bottom"</expr>,  <expr><name>NS_STYLE_VERTICAL_ALIGN_BOTTOM</name></expr> }</block></expr>,
  <expr><block>{ <expr>"baseline"</expr>,<expr><name>NS_STYLE_VERTICAL_ALIGN_BASELINE</name></expr> }</block></expr>,
  <expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLElement</name>::<name>ParseAlignValue</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aString</name></decl></param>,
                                      <param><decl><type><name>nsAttrValue</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>aResult</name>.<name>ParseEnumValue</name></name><argument_list>(<argument><expr><name>aString</name></expr></argument>, <argument><expr><name>kAlignTable</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">//----------------------------------------</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>nsAttrValue</name>::<name>EnumTable</name></name></type> <name><name>kTableHAlignTable</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr>"left"</expr>,   <expr><name>NS_STYLE_TEXT_ALIGN_LEFT</name></expr> }</block></expr>,
  <expr><block>{ <expr>"right"</expr>,  <expr><name>NS_STYLE_TEXT_ALIGN_RIGHT</name></expr> }</block></expr>,
  <expr><block>{ <expr>"center"</expr>, <expr><name>NS_STYLE_TEXT_ALIGN_CENTER</name></expr> }</block></expr>,
  <expr><block>{ <expr>"char"</expr>,   <expr><name>NS_STYLE_TEXT_ALIGN_CHAR</name></expr> }</block></expr>,
  <expr><block>{ <expr>"justify"</expr>,<expr><name>NS_STYLE_TEXT_ALIGN_JUSTIFY</name></expr> }</block></expr>,
  <expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLElement</name>::<name>ParseTableHAlignValue</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aString</name></decl></param>,
                                            <param><decl><type><name>nsAttrValue</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>aResult</name>.<name>ParseEnumValue</name></name><argument_list>(<argument><expr><name>aString</name></expr></argument>, <argument><expr><name>kTableHAlignTable</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">//----------------------------------------</comment>

<comment type="line">// This table is used for td, th, tr, col, thead, tbody and tfoot.</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>nsAttrValue</name>::<name>EnumTable</name></name></type> <name><name>kTableCellHAlignTable</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr>"left"</expr>,   <expr><name>NS_STYLE_TEXT_ALIGN_MOZ_LEFT</name></expr> }</block></expr>,
  <expr><block>{ <expr>"right"</expr>,  <expr><name>NS_STYLE_TEXT_ALIGN_MOZ_RIGHT</name></expr> }</block></expr>,
  <expr><block>{ <expr>"center"</expr>, <expr><name>NS_STYLE_TEXT_ALIGN_MOZ_CENTER</name></expr> }</block></expr>,
  <expr><block>{ <expr>"char"</expr>,   <expr><name>NS_STYLE_TEXT_ALIGN_CHAR</name></expr> }</block></expr>,
  <expr><block>{ <expr>"justify"</expr>,<expr><name>NS_STYLE_TEXT_ALIGN_JUSTIFY</name></expr> }</block></expr>,
  <expr><block>{ <expr>"middle"</expr>, <expr><name>NS_STYLE_TEXT_ALIGN_MOZ_CENTER</name></expr> }</block></expr>,
  <expr><block>{ <expr>"absmiddle"</expr>, <expr><name>NS_STYLE_TEXT_ALIGN_CENTER</name></expr> }</block></expr>,
  <expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLElement</name>::<name>ParseTableCellHAlignValue</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aString</name></decl></param>,
                                                <param><decl><type><name>nsAttrValue</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>aResult</name>.<name>ParseEnumValue</name></name><argument_list>(<argument><expr><name>aString</name></expr></argument>, <argument><expr><name>kTableCellHAlignTable</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">//----------------------------------------</comment>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLElement</name>::<name>ParseTableVAlignValue</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aString</name></decl></param>,
                                            <param><decl><type><name>nsAttrValue</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>aResult</name>.<name>ParseEnumValue</name></name><argument_list>(<argument><expr><name>aString</name></expr></argument>, <argument><expr><name>kTableVAlignTable</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLElement</name>::<name>ParseDivAlignValue</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aString</name></decl></param>,
                                         <param><decl><type><name>nsAttrValue</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>aResult</name>.<name>ParseEnumValue</name></name><argument_list>(<argument><expr><name>aString</name></expr></argument>, <argument><expr><name>kDivAlignTable</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLElement</name>::<name>ParseImageAttribute</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aAttribute</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aString</name></decl></param>,
                                          <param><decl><type><name>nsAttrValue</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>(<name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>width</name></name>) ||
      (<name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>height</name></name>)</expr>)</condition><then> <block>{
    <return>return <expr><call><name><name>aResult</name>.<name>ParseSpecialIntValue</name></name><argument_list>(<argument><expr><name>aString</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then>
  <else>else <if>if <condition>(<expr>(<name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>hspace</name></name>) ||
           (<name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>vspace</name></name>) ||
           (<name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>border</name></name>)</expr>)</condition><then> <block>{
    <return>return <expr><call><name><name>aResult</name>.<name>ParseIntWithBounds</name></name><argument_list>(<argument><expr><name>aString</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if></else></if>
  <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLElement</name>::<name>ParseFrameborderValue</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aString</name></decl></param>,
                                            <param><decl><type><name>nsAttrValue</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>aResult</name>.<name>ParseEnumValue</name></name><argument_list>(<argument><expr><name>aString</name></expr></argument>, <argument><expr><name>kFrameborderTable</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLElement</name>::<name>ParseScrollingValue</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aString</name></decl></param>,
                                          <param><decl><type><name>nsAttrValue</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>aResult</name>.<name>ParseEnumValue</name></name><argument_list>(<argument><expr><name>aString</name></expr></argument>, <argument><expr><name>kScrollingTable</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block" format="doxygen">/**
 * Handle attributes common to all html elements
 */</comment>
<function><type><name>void</name></type>
<name><name>nsGenericHTMLElement</name>::<name>MapCommonAttributesInto</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsMappedAttributes</name>*</type> <name>aAttributes</name></decl></param>,
                                              <param><decl><type><name>nsRuleData</name>*</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>aData</name>-&gt;<name>mSIDs</name></name> &amp; <call><name>NS_STYLE_INHERIT_BIT</name><argument_list>(<argument><expr><name>UserInterface</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsRuleDataUserInterface</name> *</type><name>ui</name> <init>= <expr><name><name>aData</name>-&gt;<name>mUserInterfaceData</name></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>ui</name>-&gt;<name>mUserModify</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>value</name> <init>=
        <expr><call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>contenteditable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>value</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name><name>value</name>-&gt;<name>Equals</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>_empty</name></name></expr></argument>, <argument><expr><name>eCaseMatters</name></expr></argument>)</argument_list></call> ||
            <call><name><name>value</name>-&gt;<name>Equals</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>_true</name></name></expr></argument>, <argument><expr><name>eIgnoreCase</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>ui</name>-&gt;<name>mUserModify</name>.<name>SetIntValue</name></name><argument_list>(<argument><expr><name>NS_STYLE_USER_MODIFY_READ_WRITE</name></expr></argument>,
                                      <argument><expr><name>eCSSUnit_Enumerated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>value</name>-&gt;<name>Equals</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>_false</name></name></expr></argument>, <argument><expr><name>eIgnoreCase</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ui</name>-&gt;<name>mUserModify</name>.<name>SetIntValue</name></name><argument_list>(<argument><expr><name>NS_STYLE_USER_MODIFY_READ_ONLY</name></expr></argument>,
                                        <argument><expr><name>eCSSUnit_Enumerated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>
  <if>if <condition>(<expr><name><name>aData</name>-&gt;<name>mSIDs</name></name> &amp; <call><name>NS_STYLE_INHERIT_BIT</name><argument_list>(<argument><expr><name>Visibility</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>value</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>lang</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>value</name> &amp;&amp; <call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eString</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mDisplayData</name>-&gt;<name>mLang</name>.<name>SetStringValue</name></name><argument_list>(<argument><expr><call><name><name>value</name>-&gt;<name>GetStringValue</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                <argument><expr><name>eCSSUnit_Ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLFormElement</name>::<name>UpdateEditableFormControlState</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// nsCSSFrameConstructor::MaybeConstructLazily is based on the logic of this</comment>
  <comment type="line">// function, so should be kept in sync with that.</comment>

  <decl_stmt><decl><type><name>ContentEditableTristate</name></type> <name>value</name> <init>= <expr><call><name>GetContentEditableValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>value</name> != <name>eInherit</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>SetEditableFlag</name><argument_list>(<argument><expr>!!<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsIContent</name> *</type><name>parent</name> <init>= <expr><call><name>GetParent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>parent</name> &amp;&amp; <call><name><name>parent</name>-&gt;<name>HasFlag</name></name><argument_list>(<argument><expr><name>NODE_IS_EDITABLE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>SetEditableFlag</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <if>if <condition>(<expr>!<call><name>IsTextControl</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>SetEditableFlag</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <comment type="line">// If not contentEditable we still need to check the readonly attribute.</comment>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>roState</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetBoolAttr</name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>readonly</name></name></expr></argument>, <argument><expr>&amp;<name>roState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SetEditableFlag</name><argument_list>(<argument><expr>!<name>roState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="block">/* static */</comment> <decl_stmt><decl><type><specifier>const</specifier> <name><name>nsGenericHTMLElement</name>::<name>MappedAttributeEntry</name></name></type>
<name><name>nsGenericHTMLElement</name>::<name>sCommonAttributeMap</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>contenteditable</name></name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>lang</name></name></expr> }</block></expr>,
  <expr><block>{ <expr><name>nsnull</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* static */</comment> <decl_stmt><decl><type><specifier>const</specifier> <name><name>nsGenericElement</name>::<name>MappedAttributeEntry</name></name></type>
<name><name>nsGenericHTMLElement</name>::<name>sImageMarginSizeAttributeMap</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>width</name></name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>height</name></name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>hspace</name></name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>vspace</name></name></expr> }</block></expr>,
  <expr><block>{ <expr><name>nsnull</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* static */</comment> <decl_stmt><decl><type><specifier>const</specifier> <name><name>nsGenericElement</name>::<name>MappedAttributeEntry</name></name></type>
<name><name>nsGenericHTMLElement</name>::<name>sImageAlignAttributeMap</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>align</name></name></expr> }</block></expr>,
  <expr><block>{ <expr><name>nsnull</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* static */</comment> <decl_stmt><decl><type><specifier>const</specifier> <name><name>nsGenericElement</name>::<name>MappedAttributeEntry</name></name></type>
<name><name>nsGenericHTMLElement</name>::<name>sDivAlignAttributeMap</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>align</name></name></expr> }</block></expr>,
  <expr><block>{ <expr><name>nsnull</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* static */</comment> <decl_stmt><decl><type><specifier>const</specifier> <name><name>nsGenericElement</name>::<name>MappedAttributeEntry</name></name></type>
<name><name>nsGenericHTMLElement</name>::<name>sImageBorderAttributeMap</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>border</name></name></expr> }</block></expr>,
  <expr><block>{ <expr><name>nsnull</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* static */</comment> <decl_stmt><decl><type><specifier>const</specifier> <name><name>nsGenericElement</name>::<name>MappedAttributeEntry</name></name></type>
<name><name>nsGenericHTMLElement</name>::<name>sBackgroundAttributeMap</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>background</name></name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>bgcolor</name></name></expr> }</block></expr>,
  <expr><block>{ <expr><name>nsnull</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* static */</comment> <decl_stmt><decl><type><specifier>const</specifier> <name><name>nsGenericElement</name>::<name>MappedAttributeEntry</name></name></type>
<name><name>nsGenericHTMLElement</name>::<name>sBackgroundColorAttributeMap</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>bgcolor</name></name></expr> }</block></expr>,
  <expr><block>{ <expr><name>nsnull</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* static */</comment> <decl_stmt><decl><type><specifier>const</specifier> <name><name>nsGenericElement</name>::<name>MappedAttributeEntry</name></name></type>
<name><name>nsGenericHTMLElement</name>::<name>sScrollingAttributeMap</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>scrolling</name></name></expr> }</block></expr>,
  <expr><block>{ <expr><name>nsnull</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLElement</name>::<name>MapImageAlignAttributeInto</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsMappedAttributes</name>*</type> <name>aAttributes</name></decl></param>,
                                                 <param><decl><type><name>nsRuleData</name>*</type> <name>aRuleData</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>aRuleData</name>-&gt;<name>mSIDs</name></name> &amp; (<call><name>NS_STYLE_INHERIT_BIT</name><argument_list>(<argument><expr><name>Display</name></expr></argument>)</argument_list></call> |
                          <call><name>NS_STYLE_INHERIT_BIT</name><argument_list>(<argument><expr><name>TextReset</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>value</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>align</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>value</name> &amp;&amp; <call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eEnum</name></name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>PRInt32</name></type> <name>align</name> <init>= <expr><call><name><name>value</name>-&gt;<name>GetEnumValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>(<name><name>aRuleData</name>-&gt;<name>mSIDs</name></name> &amp; <call><name>NS_STYLE_INHERIT_BIT</name><argument_list>(<argument><expr><name>Display</name></expr></argument>)</argument_list></call>) &amp;&amp;
          <call><name><name>aRuleData</name>-&gt;<name>mDisplayData</name>-&gt;<name>mFloat</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>align</name> == <name>NS_STYLE_TEXT_ALIGN_LEFT</name></expr>)</condition><then>
          <expr_stmt><expr><call><name><name>aRuleData</name>-&gt;<name>mDisplayData</name>-&gt;<name>mFloat</name>.<name>SetIntValue</name></name><argument_list>(<argument><expr><name>NS_STYLE_FLOAT_LEFT</name></expr></argument>, <argument><expr><name>eCSSUnit_Enumerated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else <if>if <condition>(<expr><name>align</name> == <name>NS_STYLE_TEXT_ALIGN_RIGHT</name></expr>)</condition><then>
          <expr_stmt><expr><call><name><name>aRuleData</name>-&gt;<name>mDisplayData</name>-&gt;<name>mFloat</name>.<name>SetIntValue</name></name><argument_list>(<argument><expr><name>NS_STYLE_FLOAT_RIGHT</name></expr></argument>, <argument><expr><name>eCSSUnit_Enumerated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
      }</block></then></if>
      <if>if <condition>(<expr>(<name><name>aRuleData</name>-&gt;<name>mSIDs</name></name> &amp; <call><name>NS_STYLE_INHERIT_BIT</name><argument_list>(<argument><expr><name>TextReset</name></expr></argument>)</argument_list></call>) &amp;&amp;
          <call><name><name>aRuleData</name>-&gt;<name>mTextData</name>-&gt;<name>mVerticalAlign</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then> <block>{
        <switch>switch <condition>(<expr><name>align</name></expr>)</condition> <block>{
        <case>case <expr><name>NS_STYLE_TEXT_ALIGN_LEFT</name></expr>:
        </case><case>case <expr><name>NS_STYLE_TEXT_ALIGN_RIGHT</name></expr>:
          <break>break;</break>
        </case><default>default:
          <expr_stmt><expr><call><name><name>aRuleData</name>-&gt;<name>mTextData</name>-&gt;<name>mVerticalAlign</name>.<name>SetIntValue</name></name><argument_list>(<argument><expr><name>align</name></expr></argument>, <argument><expr><name>eCSSUnit_Enumerated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </default>}</block></switch>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLElement</name>::<name>MapDivAlignAttributeInto</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsMappedAttributes</name>*</type> <name>aAttributes</name></decl></param>,
                                               <param><decl><type><name>nsRuleData</name>*</type> <name>aRuleData</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>aRuleData</name>-&gt;<name>mSIDs</name></name> &amp; <call><name>NS_STYLE_INHERIT_BIT</name><argument_list>(<argument><expr><name>Text</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><call><name><name>aRuleData</name>-&gt;<name>mTextData</name>-&gt;<name>mTextAlign</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then> <block>{
      <comment type="line">// align: enum</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>value</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>align</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>value</name> &amp;&amp; <call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eEnum</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>aRuleData</name>-&gt;<name>mTextData</name>-&gt;<name>mTextAlign</name>.<name>SetIntValue</name></name><argument_list>(<argument><expr><call><name><name>value</name>-&gt;<name>GetEnumValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>eCSSUnit_Enumerated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>
  }</block></then></if>
}</block></function>


<function><type><name>void</name></type>
<name><name>nsGenericHTMLElement</name>::<name>MapImageMarginAttributeInto</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsMappedAttributes</name>*</type> <name>aAttributes</name></decl></param>,
                                                  <param><decl><type><name>nsRuleData</name>*</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!(<name><name>aData</name>-&gt;<name>mSIDs</name></name> &amp; <call><name>NS_STYLE_INHERIT_BIT</name><argument_list>(<argument><expr><name>Margin</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <return>return;</return></then></if>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>value</name></decl>;</decl_stmt>

  <comment type="line">// hspace: value</comment>
  <expr_stmt><expr><name>value</name> = <call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>hspace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>value</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsCSSValue</name></type> <name>hval</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eInteger</name></name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>hval</name>.<name>SetFloatValue</name></name><argument_list>(<argument><expr>(<name>float</name>)<call><name><name>value</name>-&gt;<name>GetIntegerValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>eCSSUnit_Pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>ePercent</name></name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>hval</name>.<name>SetPercentValue</name></name><argument_list>(<argument><expr><call><name><name>value</name>-&gt;<name>GetPercentValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>

    <if>if <condition>(<expr><call><name><name>hval</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> != <name>eCSSUnit_Null</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsCSSRect</name>&amp;</type> <name>margin</name> <init>= <expr><name><name>aData</name>-&gt;<name>mMarginData</name>-&gt;<name>mMargin</name></name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name><name>margin</name>.<name>mLeft</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>margin</name>.<name>mLeft</name></name> = <name>hval</name></expr>;</expr_stmt></then></if>
      <if>if <condition>(<expr><call><name><name>margin</name>.<name>mRight</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>margin</name>.<name>mRight</name></name> = <name>hval</name></expr>;</expr_stmt></then></if>
    }</block></then></if>
  }</block></then></if>

  <comment type="line">// vspace: value</comment>
  <expr_stmt><expr><name>value</name> = <call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>vspace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>value</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsCSSValue</name></type> <name>vval</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eInteger</name></name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>vval</name>.<name>SetFloatValue</name></name><argument_list>(<argument><expr>(<name>float</name>)<call><name><name>value</name>-&gt;<name>GetIntegerValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>eCSSUnit_Pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>ePercent</name></name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>vval</name>.<name>SetPercentValue</name></name><argument_list>(<argument><expr><call><name><name>value</name>-&gt;<name>GetPercentValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
  
    <if>if <condition>(<expr><call><name><name>vval</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> != <name>eCSSUnit_Null</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsCSSRect</name>&amp;</type> <name>margin</name> <init>= <expr><name><name>aData</name>-&gt;<name>mMarginData</name>-&gt;<name>mMargin</name></name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name><name>margin</name>.<name>mTop</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>margin</name>.<name>mTop</name></name> = <name>vval</name></expr>;</expr_stmt></then></if>
      <if>if <condition>(<expr><call><name><name>margin</name>.<name>mBottom</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>margin</name>.<name>mBottom</name></name> = <name>vval</name></expr>;</expr_stmt></then></if>
    }</block></then></if>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLElement</name>::<name>MapImageSizeAttributesInto</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsMappedAttributes</name>*</type> <name>aAttributes</name></decl></param>,
                                                 <param><decl><type><name>nsRuleData</name>*</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!(<name><name>aData</name>-&gt;<name>mSIDs</name></name> &amp; <call><name>NS_STYLE_INHERIT_BIT</name><argument_list>(<argument><expr><name>Position</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <return>return;</return></then></if>

  <comment type="line">// width: value</comment>
  <if>if <condition>(<expr><call><name><name>aData</name>-&gt;<name>mPositionData</name>-&gt;<name>mWidth</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>value</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>width</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>value</name> &amp;&amp; <call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eInteger</name></name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mPositionData</name>-&gt;<name>mWidth</name>.<name>SetFloatValue</name></name><argument_list>(<argument><expr>(<name>float</name>)<call><name><name>value</name>-&gt;<name>GetIntegerValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>eCSSUnit_Pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name>value</name> &amp;&amp; <call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>ePercent</name></name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mPositionData</name>-&gt;<name>mWidth</name>.<name>SetPercentValue</name></name><argument_list>(<argument><expr><call><name><name>value</name>-&gt;<name>GetPercentValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
  }</block></then></if>

  <comment type="line">// height: value</comment>
  <if>if <condition>(<expr><call><name><name>aData</name>-&gt;<name>mPositionData</name>-&gt;<name>mHeight</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>value</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>value</name> &amp;&amp; <call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eInteger</name></name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mPositionData</name>-&gt;<name>mHeight</name>.<name>SetFloatValue</name></name><argument_list>(<argument><expr>(<name>float</name>)<call><name><name>value</name>-&gt;<name>GetIntegerValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>eCSSUnit_Pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then> 
    <else>else <if>if <condition>(<expr><name>value</name> &amp;&amp; <call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>ePercent</name></name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mPositionData</name>-&gt;<name>mHeight</name>.<name>SetPercentValue</name></name><argument_list>(<argument><expr><call><name><name>value</name>-&gt;<name>GetPercentValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>    
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLElement</name>::<name>MapImageBorderAttributeInto</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsMappedAttributes</name>*</type> <name>aAttributes</name></decl></param>,
                                                  <param><decl><type><name>nsRuleData</name>*</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!(<name><name>aData</name>-&gt;<name>mSIDs</name></name> &amp; <call><name>NS_STYLE_INHERIT_BIT</name><argument_list>(<argument><expr><name>Border</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <return>return;</return></then></if>

  <comment type="line">// border: pixels</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>value</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>border</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then>
    <return>return;</return></then></if>
  
  <decl_stmt><decl><type><name>nscoord</name></type> <name>val</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eInteger</name></name></expr>)</condition><then>
    <expr_stmt><expr><name>val</name> = <call><name><name>value</name>-&gt;<name>GetIntegerValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

  <decl_stmt><decl><type><name>nsCSSRect</name>&amp;</type> <name>borderWidth</name> <init>= <expr><name><name>aData</name>-&gt;<name>mMarginData</name>-&gt;<name>mBorderWidth</name></name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name><name>borderWidth</name>.<name>mLeft</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>borderWidth</name>.<name>mLeft</name>.<name>SetFloatValue</name></name><argument_list>(<argument><expr>(<name>float</name>)<name>val</name></expr></argument>, <argument><expr><name>eCSSUnit_Pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><call><name><name>borderWidth</name>.<name>mTop</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>borderWidth</name>.<name>mTop</name>.<name>SetFloatValue</name></name><argument_list>(<argument><expr>(<name>float</name>)<name>val</name></expr></argument>, <argument><expr><name>eCSSUnit_Pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><call><name><name>borderWidth</name>.<name>mRight</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>borderWidth</name>.<name>mRight</name>.<name>SetFloatValue</name></name><argument_list>(<argument><expr>(<name>float</name>)<name>val</name></expr></argument>, <argument><expr><name>eCSSUnit_Pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><call><name><name>borderWidth</name>.<name>mBottom</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>borderWidth</name>.<name>mBottom</name>.<name>SetFloatValue</name></name><argument_list>(<argument><expr>(<name>float</name>)<name>val</name></expr></argument>, <argument><expr><name>eCSSUnit_Pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <decl_stmt><decl><type><name>nsCSSRect</name>&amp;</type> <name>borderStyle</name> <init>= <expr><name><name>aData</name>-&gt;<name>mMarginData</name>-&gt;<name>mBorderStyle</name></name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name><name>borderStyle</name>.<name>mLeft</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>borderStyle</name>.<name>mLeft</name>.<name>SetIntValue</name></name><argument_list>(<argument><expr><name>NS_STYLE_BORDER_STYLE_SOLID</name></expr></argument>, <argument><expr><name>eCSSUnit_Enumerated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><call><name><name>borderStyle</name>.<name>mTop</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>borderStyle</name>.<name>mTop</name>.<name>SetIntValue</name></name><argument_list>(<argument><expr><name>NS_STYLE_BORDER_STYLE_SOLID</name></expr></argument>, <argument><expr><name>eCSSUnit_Enumerated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><call><name><name>borderStyle</name>.<name>mRight</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>borderStyle</name>.<name>mRight</name>.<name>SetIntValue</name></name><argument_list>(<argument><expr><name>NS_STYLE_BORDER_STYLE_SOLID</name></expr></argument>, <argument><expr><name>eCSSUnit_Enumerated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><call><name><name>borderStyle</name>.<name>mBottom</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>borderStyle</name>.<name>mBottom</name>.<name>SetIntValue</name></name><argument_list>(<argument><expr><name>NS_STYLE_BORDER_STYLE_SOLID</name></expr></argument>, <argument><expr><name>eCSSUnit_Enumerated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <decl_stmt><decl><type><name>nsCSSRect</name>&amp;</type> <name>borderColor</name> <init>= <expr><name><name>aData</name>-&gt;<name>mMarginData</name>-&gt;<name>mBorderColor</name></name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name><name>borderColor</name>.<name>mLeft</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>borderColor</name>.<name>mLeft</name>.<name>SetIntValue</name></name><argument_list>(<argument><expr><name>NS_STYLE_COLOR_MOZ_USE_TEXT_COLOR</name></expr></argument>, <argument><expr><name>eCSSUnit_Enumerated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><call><name><name>borderColor</name>.<name>mTop</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>borderColor</name>.<name>mTop</name>.<name>SetIntValue</name></name><argument_list>(<argument><expr><name>NS_STYLE_COLOR_MOZ_USE_TEXT_COLOR</name></expr></argument>, <argument><expr><name>eCSSUnit_Enumerated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><call><name><name>borderColor</name>.<name>mRight</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>borderColor</name>.<name>mRight</name>.<name>SetIntValue</name></name><argument_list>(<argument><expr><name>NS_STYLE_COLOR_MOZ_USE_TEXT_COLOR</name></expr></argument>, <argument><expr><name>eCSSUnit_Enumerated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><call><name><name>borderColor</name>.<name>mBottom</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>borderColor</name>.<name>mBottom</name>.<name>SetIntValue</name></name><argument_list>(<argument><expr><name>NS_STYLE_COLOR_MOZ_USE_TEXT_COLOR</name></expr></argument>, <argument><expr><name>eCSSUnit_Enumerated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLElement</name>::<name>MapBackgroundInto</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsMappedAttributes</name>*</type> <name>aAttributes</name></decl></param>,
                                        <param><decl><type><name>nsRuleData</name>*</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!(<name><name>aData</name>-&gt;<name>mSIDs</name></name> &amp; <call><name>NS_STYLE_INHERIT_BIT</name><argument_list>(<argument><expr><name>Background</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <return>return;</return></then></if>

  <decl_stmt><decl><type><name>nsPresContext</name>*</type> <name>presContext</name> <init>= <expr><name><name>aData</name>-&gt;<name>mPresContext</name></name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name><name>aData</name>-&gt;<name>mColorData</name>-&gt;<name>mBackImage</name></name> &amp;&amp; <call><name><name>presContext</name>-&gt;<name>UseDocumentColors</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// background</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>value</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>background</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>value</name> &amp;&amp; <call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eString</name></name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>nsString</name>&amp;</type> <name>spec</name> <init>= <expr><call><name><name>value</name>-&gt;<name>GetStringValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<call><name><name>spec</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <comment type="line">// Resolve url to an absolute url</comment>
        <comment type="line">// XXX this breaks if the HTML element has an xml:base</comment>
        <comment type="line">// attribute (the xml:base will not be taken into account)</comment>
        <comment type="line">// as well as elements with _baseHref set. We need to be able</comment>
        <comment type="line">// to get to the element somehow, or store the base URI in the</comment>
        <comment type="line">// attributes.</comment>
        <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>doc</name> <init>= <expr><call><name><name>presContext</name>-&gt;<name>Document</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsContentUtils</name>::<name>NewURIWithDocumentCharset</name></name><argument_list>(
            <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>, <argument><expr><call><name><name>doc</name>-&gt;<name>GetDocBaseURI</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <comment type="line">// Note that this should generally succeed here, due to the way</comment>
          <comment type="line">// |spec| is created.  Maybe we should just add an nsStringBuffer</comment>
          <comment type="line">// accessor on nsAttrValue?</comment>
          <decl_stmt><decl><type><name>nsStringBuffer</name>*</type> <name>buffer</name> <init>= <expr><call><name><name>nsCSSValue</name>::<name>BufferFromString</name></name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><call><name>NS_LIKELY</name><argument_list>(<argument><expr><name>buffer</name> != 0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// XXXbz it would be nice to assert that doc-&gt;NodePrincipal() is</comment>
            <comment type="line">// the same as the principal of the node (which we'd need to store</comment>
            <comment type="line">// in the mapped attrs or something?)</comment>
            <decl_stmt><decl><type><name><name>nsCSSValue</name>::<name>Image</name></name> *</type><name>img</name> <init>=
              <expr>new <call><name><name>nsCSSValue</name>::<name>Image</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name><name>doc</name>-&gt;<name>GetDocumentURI</name></name><argument_list>()</argument_list></call></expr></argument>,
                                    <argument><expr><call><name><name>doc</name>-&gt;<name>NodePrincipal</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>buffer</name>-&gt;<name>Release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>NS_LIKELY</name><argument_list>(<argument><expr><name>img</name> != 0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
              <comment type="line">// Use nsRuleDataColor's temporary mTempBackImage to</comment>
              <comment type="line">// make a value list.</comment>
              <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mColorData</name>-&gt;<name>mTempBackImage</name>.<name>mValue</name>.<name>SetImageValue</name></name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>aData</name>-&gt;<name>mColorData</name>-&gt;<name>mBackImage</name></name> =
                &amp;<name><name>aData</name>-&gt;<name>mColorData</name>-&gt;<name>mTempBackImage</name></name></expr>;</expr_stmt>
            }</block></then></if>
          }</block></then></if>
        }</block></then></if>
      }</block></then>
      <else>else <if>if <condition>(<expr><call><name><name>presContext</name>-&gt;<name>CompatibilityMode</name></name><argument_list>()</argument_list></call> == <name>eCompatibility_NavQuirks</name></expr>)</condition><then> <block>{
        <comment type="line">// in NavQuirks mode, allow the empty string to set the</comment>
        <comment type="line">// background to empty</comment>
        <comment type="line">// Use nsRuleDataColor's temporary mTempBackImage to make a value list.</comment>
        <expr_stmt><expr><name><name>aData</name>-&gt;<name>mColorData</name>-&gt;<name>mBackImage</name></name> = <name>nsnull</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mColorData</name>-&gt;<name>mTempBackImage</name>.<name>mValue</name>.<name>SetNoneValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aData</name>-&gt;<name>mColorData</name>-&gt;<name>mBackImage</name></name> = &amp;<name><name>aData</name>-&gt;<name>mColorData</name>-&gt;<name>mTempBackImage</name></name></expr>;</expr_stmt>
      }</block></then></if></else></if>
    }</block></then></if>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLElement</name>::<name>MapBGColorInto</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsMappedAttributes</name>*</type> <name>aAttributes</name></decl></param>,
                                     <param><decl><type><name>nsRuleData</name>*</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!(<name><name>aData</name>-&gt;<name>mSIDs</name></name> &amp; <call><name>NS_STYLE_INHERIT_BIT</name><argument_list>(<argument><expr><name>Background</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <return>return;</return></then></if>

  <if>if <condition>(<expr><call><name><name>aData</name>-&gt;<name>mColorData</name>-&gt;<name>mBackColor</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name> &amp;&amp;
      <call><name><name>aData</name>-&gt;<name>mPresContext</name>-&gt;<name>UseDocumentColors</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>value</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>bgcolor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nscolor</name></type> <name>color</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>value</name> &amp;&amp; <call><name><name>value</name>-&gt;<name>GetColorValue</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mColorData</name>-&gt;<name>mBackColor</name>.<name>SetColorValue</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLElement</name>::<name>MapBackgroundAttributesInto</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsMappedAttributes</name>*</type> <name>aAttributes</name></decl></param>,
                                                  <param><decl><type><name>nsRuleData</name>*</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>MapBackgroundInto</name><argument_list>(<argument><expr><name>aAttributes</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MapBGColorInto</name><argument_list>(<argument><expr><name>aAttributes</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLElement</name>::<name>MapScrollingAttributeInto</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsMappedAttributes</name>*</type> <name>aAttributes</name></decl></param>,
                                                <param><decl><type><name>nsRuleData</name>*</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!(<name><name>aData</name>-&gt;<name>mSIDs</name></name> &amp; <call><name>NS_STYLE_INHERIT_BIT</name><argument_list>(<argument><expr><name>Display</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <return>return;</return></then></if>

  <comment type="line">// scrolling</comment>
  <decl_stmt><decl><type><name>nsCSSValue</name>*</type> <name><name>overflowValues</name><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{
    <expr>&amp;<name><name>aData</name>-&gt;<name>mDisplayData</name>-&gt;<name>mOverflowX</name></name></expr>,
    <expr>&amp;<name><name>aData</name>-&gt;<name>mDisplayData</name>-&gt;<name>mOverflowY</name></name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name>NS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>overflowValues</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <if>if <condition>(<expr><name><name>overflowValues</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<call><name>GetUnit</name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>value</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>scrolling</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>value</name> &amp;&amp; <call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eEnum</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PRInt32</name></type> <name>mappedValue</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><call><name><name>value</name>-&gt;<name>GetEnumValue</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
          <case>case <expr><name>NS_STYLE_FRAME_ON</name></expr>:
          </case><case>case <expr><name>NS_STYLE_FRAME_SCROLL</name></expr>:
          </case><case>case <expr><name>NS_STYLE_FRAME_YES</name></expr>:
            <expr_stmt><expr><name>mappedValue</name> = <name>NS_STYLE_OVERFLOW_SCROLL</name></expr>;</expr_stmt>
            <break>break;</break>

          </case><case>case <expr><name>NS_STYLE_FRAME_OFF</name></expr>:
          </case><case>case <expr><name>NS_STYLE_FRAME_NOSCROLL</name></expr>:
          </case><case>case <expr><name>NS_STYLE_FRAME_NO</name></expr>:
            <expr_stmt><expr><name>mappedValue</name> = <name>NS_STYLE_OVERFLOW_HIDDEN</name></expr>;</expr_stmt>
            <break>break;</break>
        
          </case><case>case <expr><name>NS_STYLE_FRAME_AUTO</name></expr>:
            <expr_stmt><expr><name>mappedValue</name> = <name>NS_STYLE_OVERFLOW_AUTO</name></expr>;</expr_stmt>
            <break>break;</break>

          </case><default>default:
            <expr_stmt><expr><call><name>NS_NOTREACHED</name><argument_list>(<argument><expr>"unexpected value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mappedValue</name> = <name>NS_STYLE_OVERFLOW_AUTO</name></expr>;</expr_stmt>
            <break>break;</break>
        </default>}</block></switch>
        <expr_stmt><expr><name><name>overflowValues</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<call><name>SetIntValue</name><argument_list>(<argument><expr><name>mappedValue</name></expr></argument>, <argument><expr><name>eCSSUnit_Enumerated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></for>
}</block></function>

<comment type="line">//----------------------------------------------------------------------</comment>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetAttrHelper</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aAttr</name></decl></param>, <param><decl><type><name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name>aAttr</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>SetAttrHelper</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aAttr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>SetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name>aAttr</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetStringAttrWithDefault</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aAttr</name></decl></param>,
                                               <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>aDefault</name></decl></param>,
                                               <param><decl><type><name>nsAString</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name>aAttr</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>CopyASCIItoUTF16</name><argument_list>(<argument><expr><name>aDefault</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>SetBoolAttr</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aAttr</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aValue</name></expr>)</condition><then> <block>{
    <return>return <expr><call><name>SetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name>aAttr</name></expr></argument>, <argument><expr><call><name>EmptyString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name>UnsetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name>aAttr</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetBoolAttr</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aAttr</name></decl></param>, <param><decl><type><name>PRBool</name>*</type> <name>aValue</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <expr_stmt><expr>*<name>aValue</name> = <call><name>HasAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name>aAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetIntAttr</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aAttr</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aDefault</name></decl></param>, <param><decl><type><name>PRInt32</name>*</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>attrVal</name> <init>= <expr><call><name><name>mAttrsAndChildren</name>.<name>GetAttr</name></name><argument_list>(<argument><expr><name>aAttr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>attrVal</name> &amp;&amp; <call><name><name>attrVal</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eInteger</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aResult</name> = <call><name><name>attrVal</name>-&gt;<name>GetIntegerValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <expr_stmt><expr>*<name>aResult</name> = <name>aDefault</name></expr>;</expr_stmt>
  }</block></else></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>SetIntAttr</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aAttr</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>value</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>value</name>.<name>AppendInt</name></name><argument_list>(<argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>SetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name>aAttr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetFloatAttr</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aAttr</name></decl></param>, <param><decl><type><name>float</name></type> <name>aDefault</name></decl></param>, <param><decl><type><name>float</name>*</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>attrVal</name> <init>= <expr><call><name><name>mAttrsAndChildren</name>.<name>GetAttr</name></name><argument_list>(<argument><expr><name>aAttr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>attrVal</name> &amp;&amp; <call><name><name>attrVal</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eFloatValue</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aResult</name> = <call><name><name>attrVal</name>-&gt;<name>GetFloatValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <expr_stmt><expr>*<name>aResult</name> = <name>aDefault</name></expr>;</expr_stmt>
  }</block></else></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>SetFloatAttr</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aAttr</name></decl></param>, <param><decl><type><name>float</name></type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>value</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>value</name>.<name>AppendFloat</name></name><argument_list>(<argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>SetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name>aAttr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetURIAttr</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aAttr</name></decl></param>, <param><decl><type><name>nsIAtom</name>*</type> <name>aBaseAttr</name></decl></param>, <param><decl><type><name>nsAString</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>hadAttr</name> <init>= <expr><call><name>GetURIAttr</name><argument_list>(<argument><expr><name>aAttr</name></expr></argument>, <argument><expr><name>aBaseAttr</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>hadAttr</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>aResult</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr>!<name>uri</name></expr>)</condition><then> <block>{
    <comment type="line">// Just return the attr value</comment>
    <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name>aAttr</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>spec</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>uri</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CopyUTF8toUTF16</name><argument_list>(<argument><expr><name>spec</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetURIAttr</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aAttr</name></decl></param>, <param><decl><type><name>nsIAtom</name>*</type> <name>aBaseAttr</name></decl></param>,
                                 <param><decl><type><name>PRBool</name></type> <name>aCloneIfCached</name></decl></param>, <param><decl><type><name>nsIURI</name>**</type> <name>aURI</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <expr_stmt><expr>*<name>aURI</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>attr</name> <init>= <expr><call><name><name>mAttrsAndChildren</name>.<name>GetAttr</name></name><argument_list>(<argument><expr><name>aAttr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>attr</name></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>baseURI</name> <init>= <expr><call><name>GetBaseURI</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>aBaseAttr</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>baseAttrValue</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name>aBaseAttr</name></expr></argument>, <argument><expr><name>baseAttrValue</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>baseAttrURI</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>=
        <expr><call><name><name>nsContentUtils</name>::<name>NewURIWithDocumentCharset</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>baseAttrURI</name></expr></argument>)</argument_list></call></expr></argument>,
                                                  <argument><expr><name>baseAttrValue</name></expr></argument>, <argument><expr><call><name>GetOwnerDoc</name><argument_list>()</argument_list></call></expr></argument>,
                                                  <argument><expr><name>baseURI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>PR_TRUE</name></expr>;</return>
      }</block></then></if>
      <expr_stmt><expr><call><name><name>baseURI</name>.<name>swap</name></name><argument_list>(<argument><expr><name>baseAttrURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <comment type="line">// Don't care about return value.  If it fails, we still want to</comment>
  <comment type="line">// return PR_TRUE, and *aURI will be null.</comment>
  <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>NewURIWithDocumentCharset</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>,
                                            <argument><expr><call><name><name>attr</name>-&gt;<name>GetStringValue</name></name><argument_list>()</argument_list></call></expr></argument>,
                                            <argument><expr><call><name>GetOwnerDoc</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>baseURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetURIListAttr</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aAttr</name></decl></param>, <param><decl><type><name>nsAString</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aResult</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>value</name></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name>aAttr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>doc</name> <init>= <expr><call><name>GetOwnerDoc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>baseURI</name> <init>= <expr><call><name>GetBaseURI</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// Value contains relative URIs split on spaces (U+0020)</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>start</name> <init>= <expr><call><name><name>value</name>.<name>BeginReading</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>end</name>   <init>= <expr><call><name><name>value</name>.<name>EndReading</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>iter</name>  <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
  <for>for (<init>;</init><condition>;</condition><incr/>) <block>{
    <if>if <condition>(<expr><name>iter</name> &lt; <name>end</name> &amp;&amp; *<name>iter</name> != ' '</expr>)</condition><then> <block>{
      <expr_stmt><expr>++<name>iter</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{  <comment type="line">// iter is pointing at either end or a space</comment>
      <while>while <condition>(<expr>*<name>start</name> == ' ' &amp;&amp; <name>start</name> &lt; <name>iter</name></expr>)</condition>
        <expr_stmt><expr>++<name>start</name></expr>;</expr_stmt></while>
      <if>if <condition>(<expr><name>iter</name> != <name>start</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name><name>aResult</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
          <expr_stmt><expr><call><name><name>aResult</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name>PRUnichar</name><argument_list>(<argument><expr>' '</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <decl_stmt><decl><type><specifier>const</specifier> <name>nsSubstring</name>&amp;</type> <name>uriPart</name> <init>= <expr><call><name>Substring</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>attrURI</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>NewURIWithDocumentCharset</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>attrURI</name></expr></argument>)</argument_list></call></expr></argument>,
                                                  <argument><expr><name>uriPart</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>, <argument><expr><name>baseURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>attrURI</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>spec</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>attrURI</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>AppendUTF8toUTF16</name><argument_list>(<argument><expr><name>spec</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>aResult</name>.<name>Append</name></name><argument_list>(<argument><expr><name>uriPart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></then></if>
      <expr_stmt><expr><name>start</name> = <name>iter</name> = <name>iter</name> + 1</expr>;</expr_stmt>
      <if>if <condition>(<expr><name>iter</name> &gt;= <name>end</name></expr>)</condition><then>
        <break>break;</break></then></if>
    }</block></else></if>
  }</block></for>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetEnumAttr</name></name><parameter_list>(<param><decl><type><name>nsIAtom</name>*</type> <name>aAttr</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>aDefault</name></decl></param>,
                                  <param><decl><type><name>nsAString</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>attrVal</name> <init>= <expr><call><name><name>mAttrsAndChildren</name>.<name>GetAttr</name></name><argument_list>(<argument><expr><name>aAttr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>aResult</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>attrVal</name> &amp;&amp; <call><name><name>attrVal</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eEnum</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>attrVal</name>-&gt;<name>GetEnumString</name></name><argument_list>(<argument><expr><name>aResult</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name>AppendASCIItoUTF16</name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>aDefault</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetContentEditable</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aContentEditable</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ContentEditableTristate</name></type> <name>value</name> <init>= <expr><call><name>GetContentEditableValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>value</name> == <name>eTrue</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>aContentEditable</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><name>value</name> == <name>eFalse</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>aContentEditable</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"false"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <expr_stmt><expr><call><name><name>aContentEditable</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"inherit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if></else></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>SetContentEditable</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aContentEditable</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsString</name></type> <name>contentEditable</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ToLowerCase</name><argument_list>(<argument><expr><name>aContentEditable</name></expr></argument>, <argument><expr><name>contentEditable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name><name>contentEditable</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"inherit"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>UnsetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>contenteditable</name></name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr>!<call><name><name>contentEditable</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"true"</expr></argument>)</argument_list></call> &amp;&amp;
      !<call><name><name>contentEditable</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"false"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_ERROR_DOM_SYNTAX_ERR</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>SetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>contenteditable</name></name></expr></argument>, <argument><expr><name>contentEditable</name></expr></argument>,
          <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetIsContentEditable</name></name><parameter_list>(<param><decl><type><name>PRBool</name>*</type> <name>aContentEditable</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aContentEditable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><decl><type><name>nsIContent</name>*</type> <name>node</name> <init>= <expr><name>this</name></expr></init></decl>;</init> <condition><expr><name>node</name></expr>;</condition> <incr><expr><name>node</name> = <call><name><name>node</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call></expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsGenericHTMLElement</name>*</type> <name>element</name> <init>= <expr><call><name>FromContent</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>element</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>ContentEditableTristate</name></type> <name>value</name> <init>= <expr><call><name><name>element</name>-&gt;<name>GetContentEditableValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>value</name> != <name>eInherit</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>aContentEditable</name> = <name>value</name> == <name>eTrue</name></expr>;</expr_stmt>
        <return>return <expr><name>NS_OK</name></expr>;</return>
      }</block></then></if>
    }</block></then></if>
  }</block></for>

  <expr_stmt><expr>*<name>aContentEditable</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">//----------------------------------------------------------------------</comment>

<macro><name>NS_IMPL_INT_ATTR_DEFAULT_VALUE</name><argument_list>(<argument>nsGenericHTMLFrameElement</argument>, <argument>TabIndex</argument>, <argument>tabindex</argument>, <argument>0</argument>)</argument_list></macro>

<constructor><name><name>nsGenericHTMLFormElement</name>::<name>nsGenericHTMLFormElement</name></name><parameter_list>(<param><decl><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsINodeInfo</name></expr></argument>&gt;</argument_list></name></type> <name>aNodeInfo</name></decl></param>)</parameter_list>
  <member_list>: <call><name>nsGenericHTMLElement</name><argument_list>(<argument><expr><name>aNodeInfo</name></expr></argument>)</argument_list></call>,
    <call><name>mForm</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>
</member_list><block>{
}</block></constructor>

<destructor><name><name>nsGenericHTMLFormElement</name>::~<name>nsGenericHTMLFormElement</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// Check that this element doesn't know anything about its form at this point.</comment>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>mForm</name></expr></argument>, <argument><expr>"How did we get here?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<macro><name>NS_IMPL_QUERY_INTERFACE_INHERITED1</name><argument_list>(<argument>nsGenericHTMLFormElement</argument>,
                                   <argument>nsGenericHTMLElement</argument>,
                                   <argument>nsIFormControl</argument>)</argument_list></macro>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLFormElement</name>::<name>IsNodeOfType</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aFlags</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr>!(<name>aFlags</name> &amp; ~(<name>eCONTENT</name> | <name>eHTML_FORM_CONTROL</name>))</expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLFormElement</name>::<name>SaveSubtreeState</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SaveState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>nsGenericHTMLElement</name>::<name>SaveSubtreeState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLFormElement</name>::<name>SetForm</name></name><parameter_list>(<param><decl><type><name>nsIDOMHTMLFormElement</name>*</type> <name>aForm</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aForm</name></expr></argument>, <argument><expr>"Don't pass null here"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>mForm</name></expr></argument>,
               <argument><expr>"We don't support switching from one non-null form to another."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// keep a *weak* ref to the form here</comment>
  <expr_stmt><expr><name>mForm</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsHTMLFormElement</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLFormElement</name>::<name>ClearForm</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aRemoveFromForm</name></decl></param>,
                                    <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>(<name>mForm</name> != <name>nsnull</name>) == <call><name>HasFlag</name><argument_list>(<argument><expr><name>ADDED_TO_FORM</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr>"Form control should have had flag set correctly"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>mForm</name></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>
  
  <if>if <condition>(<expr><name>aRemoveFromForm</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>nameVal</name></decl>, <decl><type ref="prev"/><name>idVal</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>name</name></name></expr></argument>, <argument><expr><name>nameVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>id</name></name></expr></argument>, <argument><expr><name>idVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>mForm</name>-&gt;<name>RemoveElement</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name><name>nameVal</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mForm</name>-&gt;<name>RemoveElementFromTable</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>nameVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name><name>idVal</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mForm</name>-&gt;<name>RemoveElementFromTable</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>idVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <expr_stmt><expr><call><name>UnsetFlags</name><argument_list>(<argument><expr><name>ADDED_TO_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mForm</name> = <name>nsnull</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>Element</name>*</type>
<name><name>nsGenericHTMLFormElement</name>::<name>GetFormElement</name></name><parameter_list>()</parameter_list>
<block>{
  <return>return <expr><name>mForm</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLFormElement</name>::<name>GetForm</name></name><parameter_list>(<param><decl><type><name>nsIDOMHTMLFormElement</name>**</type> <name>aForm</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aForm</name> = <name>mForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>PRUint32</name></type>
<name><name>nsGenericHTMLFormElement</name>::<name>GetDesiredIMEState</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIEditor</name></expr></argument>&gt;</argument_list></name></type> <name>editor</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetEditorInternal</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>editor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> || !<name>editor</name></expr>)</condition><then>
    <return>return <expr><call><name><name>nsGenericHTMLElement</name>::<name>GetDesiredIMEState</name></name><argument_list>()</argument_list></call></expr>;</return></then></if>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIEditorIMESupport</name></expr></argument>&gt;</argument_list></name></type> <name>imeEditor</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>editor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>imeEditor</name></expr>)</condition><then>
    <return>return <expr><call><name><name>nsGenericHTMLElement</name>::<name>GetDesiredIMEState</name></name><argument_list>()</argument_list></call></expr>;</return></then></if>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>state</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>imeEditor</name>-&gt;<name>GetPreferredIMEState</name></name><argument_list>(<argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><call><name><name>nsGenericHTMLElement</name>::<name>GetDesiredIMEState</name></name><argument_list>()</argument_list></call></expr>;</return></then></if>
  <return>return <expr><name>state</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLFrameElement</name>::<name>IsHTMLFocusable</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aWithMouse</name></decl></param>,
                                           <param><decl><type><name>PRBool</name> *</type><name>aIsFocusable</name></decl></param>,
                                           <param><decl><type><name>PRInt32</name> *</type><name>aTabIndex</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name><name>nsGenericHTMLElement</name>::<name>IsHTMLFocusable</name></name><argument_list>(<argument><expr><name>aWithMouse</name></expr></argument>, <argument><expr><name>aIsFocusable</name></expr></argument>, <argument><expr><name>aTabIndex</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_TRUE</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// If there is no subdocument, docshell or content viewer, it's not tabbable</comment>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>isFocusable</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsIDocument</name> *</type><name>doc</name> <init>= <expr><call><name>GetCurrentDoc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>doc</name></expr>)</condition><then> <block>{
    <comment type="line">// XXXbz should this use GetOwnerDoc() for GetSubDocumentFor?</comment>
    <comment type="line">// sXBL/XBL2 issue!</comment>
    <decl_stmt><decl><type><name>nsIDocument</name> *</type><name>subDoc</name> <init>= <expr><call><name><name>doc</name>-&gt;<name>GetSubDocumentFor</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>subDoc</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>container</name> <init>= <expr><call><name><name>subDoc</name>-&gt;<name>GetContainer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocShell</name></expr></argument>&gt;</argument_list></name></type> <name>docShell</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>container</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>docShell</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContentViewer</name></expr></argument>&gt;</argument_list></name></type> <name>contentViewer</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>docShell</name>-&gt;<name>GetContentViewer</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>contentViewer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>contentViewer</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>isFocusable</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
          <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContentViewer</name></expr></argument>&gt;</argument_list></name></type> <name>zombieViewer</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>contentViewer</name>-&gt;<name>GetPreviousViewer</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>zombieViewer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>zombieViewer</name></expr>)</condition><then> <block>{
            <comment type="line">// If there are 2 viewers for the current docshell, that </comment>
            <comment type="line">// means the current document is a zombie document.</comment>
            <comment type="line">// Only navigate into the frame/iframe if it's not a zombie.</comment>
            <expr_stmt><expr><name>isFocusable</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then></if>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>

  <expr_stmt><expr>*<name>aIsFocusable</name> = <name>isFocusable</name></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>isFocusable</name> &amp;&amp; <name>aTabIndex</name></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aTabIndex</name> = -1</expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLFormElement</name>::<name>BindToTree</name></name><parameter_list>(<param><decl><type><name>nsIDocument</name>*</type> <name>aDocument</name></decl></param>,
                                     <param><decl><type><name>nsIContent</name>*</type> <name>aParent</name></decl></param>,
                                     <param><decl><type><name>nsIContent</name>*</type> <name>aBindingParent</name></decl></param>,
                                     <param><decl><type><name>PRBool</name></type> <name>aCompileEventHandlers</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsGenericHTMLElement</name>::<name>BindToTree</name></name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>, <argument><expr><name>aParent</name></expr></argument>,
                                                 <argument><expr><name>aBindingParent</name></expr></argument>,
                                                 <argument><expr><name>aCompileEventHandlers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// An autofocus event has to be launched if the autofocus attribute is</comment>
  <comment type="line">// specified and the element accept the autofocus attribute. In addition,</comment>
  <comment type="line">// the document should not be already loaded and the "browser.autofocus"</comment>
  <comment type="line">// preference should be 'true'.</comment>
  <if>if <condition>(<expr><call><name>AcceptAutofocus</name><argument_list>()</argument_list></call> &amp;&amp; <call><name>HasAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>autofocus</name></name></expr></argument>)</argument_list></call> &amp;&amp;
      <name>aDocument</name> &amp;&amp;
      <call><name><name>aDocument</name>-&gt;<name>GetReadyStateEnum</name></name><argument_list>()</argument_list></call> != <name><name>nsIDocument</name>::<name>READYSTATE_COMPLETE</name></name> &amp;&amp;
      <call><name><name>nsContentUtils</name>::<name>GetBoolPref</name></name><argument_list>(<argument><expr>"browser.autofocus"</expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIRunnable</name></expr></argument>&gt;</argument_list></name></type> <name>event</name> <init>= <expr>new <call><name>nsAutoFocusEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>NS_DispatchToCurrentThread</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr>!<name>aParent</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>hadForm</name> <init>= <expr>(<name>mForm</name> != <name>nsnull</name>)</expr></init></decl>;</decl_stmt>
  
  <if>if <condition>(<expr>!<name>mForm</name></expr>)</condition><then> <block>{
    <comment type="line">// We now have a parent, so we may have picked up an ancestor form.  Search</comment>
    <comment type="line">// for it.  Note that if mForm is already set we don't want to do this,</comment>
    <comment type="line">// because that means someone (probably the content sink) has already set</comment>
    <comment type="line">// it to the right value.  Also note that even if being bound here didn't</comment>
    <comment type="line">// change our parent, we still need to search, since our parent chain</comment>
    <comment type="line">// probably changed _somewhere_.</comment>
    <expr_stmt><expr><name>mForm</name> = <call><name>FindForm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><name>mForm</name> &amp;&amp; !<call><name>HasFlag</name><argument_list>(<argument><expr><name>ADDED_TO_FORM</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// Now we need to add ourselves to the form</comment>
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>nameVal</name></decl>, <decl><type ref="prev"/><name>idVal</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>name</name></name></expr></argument>, <argument><expr><name>nameVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>id</name></name></expr></argument>, <argument><expr><name>idVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>SetFlags</name><argument_list>(<argument><expr><name>ADDED_TO_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Notify only if we just found this mForm.</comment>
    <expr_stmt><expr><call><name><name>mForm</name>-&gt;<name>AddElement</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>!<name>hadForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if>if <condition>(<expr>!<call><name><name>nameVal</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mForm</name>-&gt;<name>AddElementToTable</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>nameVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name><name>idVal</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mForm</name>-&gt;<name>AddElementToTable</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>idVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLFormElement</name>::<name>UnbindFromTree</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aDeep</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aNullParent</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Save state before doing anything</comment>
  <expr_stmt><expr><call><name>SaveState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
  <if>if <condition>(<expr><name>mForm</name></expr>)</condition><then> <block>{
    <comment type="line">// Might need to unset mForm</comment>
    <if>if <condition>(<expr><name>aNullParent</name></expr>)</condition><then> <block>{
      <comment type="line">// No more parent means no more form</comment>
      <expr_stmt><expr><call><name>ClearForm</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <comment type="line">// Recheck whether we should still have an mForm.</comment>
      <if>if <condition>(<expr>!<call><name>FindForm</name><argument_list>(<argument><expr><name>mForm</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ClearForm</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>UnsetFlags</name><argument_list>(<argument><expr><name>MAYBE_ORPHAN_FORM_ELEMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></else></if>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>nsGenericHTMLElement</name>::<name>UnbindFromTree</name></name><argument_list>(<argument><expr><name>aDeep</name></expr></argument>, <argument><expr><name>aNullParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLFormElement</name>::<name>BeforeSetAttr</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aNameSpaceID</name></decl></param>, <param><decl><type><name>nsIAtom</name>*</type> <name>aName</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>nsAString</name>*</type> <name>aValue</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aNameSpaceID</name> == <name>kNameSpaceID_None</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>tmp</name></decl>;</decl_stmt>

    <comment type="line">// remove the control from the hashtable as needed</comment>

    <if>if <condition>(<expr><name>mForm</name> &amp;&amp; (<name>aName</name> == <name><name>nsGkAtoms</name>::<name>name</name></name> || <name>aName</name> == <name><name>nsGkAtoms</name>::<name>id</name></name>)</expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name>aName</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>!<call><name><name>tmp</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>mForm</name>-&gt;<name>RemoveElementFromTable</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>mForm</name> &amp;&amp; <name>aName</name> == <name><name>nsGkAtoms</name>::<name>type</name></name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>doc</name> <init>= <expr><call><name>GetCurrentDoc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>MOZ_AUTO_DOC_UPDATE</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>UPDATE_CONTENT_STATE</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>name</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>!<call><name><name>tmp</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>mForm</name>-&gt;<name>RemoveElementFromTable</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>id</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>!<call><name><name>tmp</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>mForm</name>-&gt;<name>RemoveElementFromTable</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><call><name><name>mForm</name>-&gt;<name>RemoveElement</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Removing the element from the form can make it not be the default</comment>
      <comment type="line">// control anymore.  Go ahead and notify on that change, though we might</comment>
      <comment type="line">// end up readding and becoming the default control again in</comment>
      <comment type="line">// AfterSetAttr.</comment>
      <if>if <condition>(<expr><name>doc</name> &amp;&amp; <name>aNotify</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>doc</name>-&gt;<name>ContentStatesChanged</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>NS_EVENT_STATE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><call><name><name>nsGenericHTMLElement</name>::<name>BeforeSetAttr</name></name><argument_list>(<argument><expr><name>aNameSpaceID</name></expr></argument>, <argument><expr><name>aName</name></expr></argument>,
                                             <argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLFormElement</name>::<name>AfterSetAttr</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aNameSpaceID</name></decl></param>, <param><decl><type><name>nsIAtom</name>*</type> <name>aName</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>nsAString</name>*</type> <name>aValue</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aNameSpaceID</name> == <name>kNameSpaceID_None</name></expr>)</condition><then> <block>{
    <comment type="line">// add the control to the hashtable as needed</comment>

    <if>if <condition>(<expr><name>mForm</name> &amp;&amp; (<name>aName</name> == <name><name>nsGkAtoms</name>::<name>name</name></name> || <name>aName</name> == <name><name>nsGkAtoms</name>::<name>id</name></name>) &amp;&amp;
        <name>aValue</name></expr>)</condition><then> <block>{
      <if>if <condition>(<expr>!<call><name><name>aValue</name>-&gt;<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>mForm</name>-&gt;<name>AddElementToTable</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>*<name>aValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>mForm</name> &amp;&amp; <name>aName</name> == <name><name>nsGkAtoms</name>::<name>type</name></name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>doc</name> <init>= <expr><call><name>GetDocument</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>MOZ_AUTO_DOC_UPDATE</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>UPDATE_CONTENT_STATE</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <decl_stmt><decl><type><name>nsAutoString</name></type> <name>tmp</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>name</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>!<call><name><name>tmp</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>mForm</name>-&gt;<name>AddElementToTable</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>id</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>!<call><name><name>tmp</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>mForm</name>-&gt;<name>AddElementToTable</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><call><name><name>mForm</name>-&gt;<name>AddElement</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Adding the element to the form can make it be the default control .</comment>
      <comment type="line">// Go ahead and notify on that change.</comment>
      <comment type="line">// Note: no need to notify on CanBeDisabled(), since type attr</comment>
      <comment type="line">// changes can't affect that.</comment>
      <if>if <condition>(<expr><name>doc</name> &amp;&amp; <name>aNotify</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>doc</name>-&gt;<name>ContentStatesChanged</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>NS_EVENT_STATE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><call><name><name>nsGenericHTMLElement</name>::<name>AfterSetAttr</name></name><argument_list>(<argument><expr><name>aNameSpaceID</name></expr></argument>, <argument><expr><name>aName</name></expr></argument>,
                                            <argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLFormElement</name>::<name>PreHandleEvent</name></name><parameter_list>(<param><decl><type><name>nsEventChainPreVisitor</name>&amp;</type> <name>aVisitor</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name>NS_IS_TRUSTED_EVENT</name><argument_list>(<argument><expr><name><name>aVisitor</name>.<name>mEvent</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <switch>switch <condition>(<expr><name><name>aVisitor</name>.<name>mEvent</name>-&gt;<name>message</name></name></expr>)</condition> <block>{
      <case>case <expr><name>NS_FOCUS_CONTENT</name></expr>:
      <block>{
        <comment type="line">// Check to see if focus has bubbled up from a form control's</comment>
        <comment type="line">// child textfield or button.  If that's the case, don't focus</comment>
        <comment type="line">// this parent file control -- leave focus on the child.</comment>
        <decl_stmt><decl><type><name>nsIFormControlFrame</name>*</type> <name>formControlFrame</name> <init>= <expr><call><name>GetFormControlFrame</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>formControlFrame</name> &amp;&amp;
            <name><name>aVisitor</name>.<name>mEvent</name>-&gt;<name>originalTarget</name></name> == <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsINode</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <expr_stmt><expr><call><name><name>formControlFrame</name>-&gt;<name>SetFocus</name></name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <break>break;</break>
      }</block>
      </case><case>case <expr><name>NS_BLUR_CONTENT</name></expr>:
      <block>{
        <decl_stmt><decl><type><name>nsIFormControlFrame</name>*</type> <name>formControlFrame</name> <init>= <expr><call><name>GetFormControlFrame</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>formControlFrame</name></expr>)</condition><then>
          <expr_stmt><expr><call><name><name>formControlFrame</name>-&gt;<name>SetFocus</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <break>break;</break>
      }</block>
    </case>}</block></switch>
  }</block></then></if>

  <return>return <expr><call><name><name>nsGenericHTMLElement</name>::<name>PreHandleEvent</name></name><argument_list>(<argument><expr><name>aVisitor</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLFormElement</name>::<name>CanBeDisabled</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>type</name> <init>= <expr><call><name>GetType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// It's easier to test the types that _cannot_ be disabled</comment>
  <return>return
    <expr><name>type</name> != <name>NS_FORM_LABEL</name> &amp;&amp;
    <name>type</name> != <name>NS_FORM_FIELDSET</name> &amp;&amp;
    <name>type</name> != <name>NS_FORM_OBJECT</name> &amp;&amp;
    <name>type</name> != <name>NS_FORM_OUTPUT</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLFormElement</name>::<name>IsSubmitControl</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>type</name> <init>= <expr><call><name>GetType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>type</name> == <name>NS_FORM_INPUT_SUBMIT</name> ||
         <name>type</name> == <name>NS_FORM_BUTTON_SUBMIT</name> ||
         <name>type</name> == <name>NS_FORM_INPUT_IMAGE</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLFormElement</name>::<name>IsTextControl</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aExcludePassword</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>type</name> <init>= <expr><call><name>GetType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>nsGenericHTMLFormElement</name>::<name>IsSingleLineTextControl</name></name><argument_list>(<argument><expr><name>aExcludePassword</name></expr></argument>)</argument_list></call> ||
         <name>type</name> == <name>NS_FORM_TEXTAREA</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLFormElement</name>::<name>IsSingleLineTextControlInternal</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aExcludePassword</name></decl></param>,
                                                          <param><decl><type><name>PRInt32</name></type> <name>aType</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><name>aType</name> == <name>NS_FORM_INPUT_TEXT</name> ||
         <name>aType</name> == <name>NS_FORM_INPUT_SEARCH</name> ||
         <name>aType</name> == <name>NS_FORM_INPUT_TEL</name> ||
         (!<name>aExcludePassword</name> &amp;&amp; <name>aType</name> == <name>NS_FORM_INPUT_PASSWORD</name>)</expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLFormElement</name>::<name>IsSingleLineTextControl</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aExcludePassword</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><call><name>IsSingleLineTextControlInternal</name><argument_list>(<argument><expr><name>aExcludePassword</name></expr></argument>, <argument><expr><call><name>GetType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLFormElement</name>::<name>IsLabelableControl</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <comment type="line">// Check for non-labelable form controls as they are not numerous.</comment>
  <comment type="line">// TODO: datalist should be added to this list.</comment>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>type</name> <init>= <expr><call><name>GetType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>type</name> != <name>NS_FORM_FIELDSET</name> &amp;&amp;
         <name>type</name> != <name>NS_FORM_LABEL</name> &amp;&amp;
         <name>type</name> != <name>NS_FORM_OBJECT</name></expr>;</return>
}</block></function>

<function><type><name>PRInt32</name></type>
<name><name>nsGenericHTMLFormElement</name>::<name>IntrinsicState</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <comment type="line">// If you add attribute-dependent states here, you need to add them them to</comment>
  <comment type="line">// AfterSetAttr too.  And add them to AfterSetAttr for all subclasses that</comment>
  <comment type="line">// implement IntrinsicState() and are affected by that attribute.</comment>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>state</name> <init>= <expr><call><name><name>nsGenericHTMLElement</name>::<name>IntrinsicState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>CanBeDisabled</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// :enabled/:disabled</comment>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>disabled</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetBoolAttr</name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>disabled</name></name></expr></argument>, <argument><expr>&amp;<name>disabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>disabled</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>state</name> |= <name>NS_EVENT_STATE_DISABLED</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>state</name> &amp;= ~<name>NS_EVENT_STATE_ENABLED</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>state</name> &amp;= ~<name>NS_EVENT_STATE_DISABLED</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>state</name> |= <name>NS_EVENT_STATE_ENABLED</name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then></if>
  
  <if>if <condition>(<expr><name>mForm</name> &amp;&amp; <call><name><name>mForm</name>-&gt;<name>IsDefaultSubmitElement</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>IsSubmitControl</name><argument_list>()</argument_list></call></expr></argument>,
                   <argument><expr>"Default submit element that isn't a submit control."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// We are the default submit element (:default)</comment>
      <expr_stmt><expr><name>state</name> |= <name>NS_EVENT_STATE_DEFAULT</name></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>state</name></expr>;</return>
}</block></function>

<function><type><name><name>nsGenericHTMLFormElement</name>::<name>FocusTristate</name></name></type>
<name><name>nsGenericHTMLFormElement</name>::<name>FocusState</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// We can't be focused if we aren't in a document</comment>
  <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>doc</name> <init>= <expr><call><name>GetCurrentDoc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>doc</name></expr>)</condition><then>
    <return>return <expr><name>eUnfocusable</name></expr>;</return></then></if>

  <comment type="line">// first see if we are disabled or not. If disabled then do nothing.</comment>
  <if>if <condition>(<expr><call><name>HasAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>disabled</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>eUnfocusable</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// If the window is not active, do not allow the focus to bring the</comment>
  <comment type="line">// window to the front.  We update the focus controller, but do</comment>
  <comment type="line">// nothing else.</comment>
  <decl_stmt><decl><type><name>nsPIDOMWindow</name>*</type> <name>win</name> <init>= <expr><call><name><name>doc</name>-&gt;<name>GetWindow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>win</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMWindow</name></expr></argument>&gt;</argument_list></name></type> <name>rootWindow</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name><name>win</name>-&gt;<name>GetPrivateRoot</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFocusManager</name></expr></argument>&gt;</argument_list></name></type> <name>fm</name> <init>= <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>FOCUSMANAGER_CONTRACTID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>fm</name> &amp;&amp; <name>rootWindow</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMWindow</name></expr></argument>&gt;</argument_list></name></type> <name>activeWindow</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>fm</name>-&gt;<name>GetActiveWindow</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>activeWindow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>activeWindow</name> == <name>rootWindow</name></expr>)</condition><then> <block>{
        <return>return <expr><name>eActiveWindow</name></expr>;</return>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>

  <return>return <expr><name>eInactiveWindow</name></expr>;</return>
}</block></function>

<comment type="line">//----------------------------------------------------------------------</comment>

<destructor><name><name>nsGenericHTMLFrameElement</name>::~<name>nsGenericHTMLFrameElement</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mFrameLoader</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mFrameLoader</name>-&gt;<name>Destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></destructor>

<macro><name>NS_IMPL_CYCLE_COLLECTION_CLASS</name><argument_list>(<argument>nsGenericHTMLFrameElement</argument>)</argument_list></macro>
<macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED</name><argument_list>(<argument>nsGenericHTMLFrameElement</argument>,
                                                  <argument>nsGenericHTMLElement</argument>)</argument_list></macro>
  <macro><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument>mFrameLoader</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END</name></type>

<name>NS_INTERFACE_TABLE_HEAD</name><argument_list>(<argument><expr><name>nsGenericHTMLFrameElement</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_TABLE_INHERITED2</name><argument_list>(<argument><expr><name>nsGenericHTMLFrameElement</name></expr></argument>,
                                <argument><expr><name>nsIDOMNSHTMLFrameElement</name></expr></argument>,
                                <argument><expr><name>nsIFrameLoaderOwner</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_TABLE_TO_MAP_SEGUE_CYCLE_COLLECTION</name><argument_list>(<argument><expr><name>nsGenericHTMLFrameElement</name></expr></argument>)</argument_list>
<name>NS_INTERFACE_MAP_END_INHERITING</name><argument_list>(<argument><expr><name>nsGenericHTMLElement</name></expr></argument>)</argument_list>

<name>nsresult</name>
<name><name>nsGenericHTMLFrameElement</name>::<name>GetContentDocument</name></name><argument_list>(<argument><expr><name>nsIDOMDocument</name>** <name>aContentDocument</name></expr></argument>)</argument_list>
<argument_list>{
  <argument><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aContentDocument</name></expr></argument>, <argument><expr>"Null out param"</expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr>*<name>aContentDocument</name> = <name>nsnull</name></expr></argument>;

  <argument><expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMWindow</name></expr></argument>&gt;</argument_list></name> <name>win</name></expr></argument>;
  <argument><expr><call><name>GetContentWindow</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

  if <argument><expr>(!<name>win</name>) <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></expr></argument>

  <return>return <expr><call><name><name>win</name>-&gt;<name>GetDocument</name></name><argument_list>(<argument><expr><name>aContentDocument</name></expr></argument>)</argument_list></call></expr>;</return></argument_list></decl></decl_stmt>
}

NS_IMETHODIMP
<macro><name>nsGenericHTMLFrameElement</name></macro><expr_stmt><expr><name>::<name>GetContentWindow</name></name>(<name>nsIDOMWindow</name>** <name>aContentWindow</name>)
<block>{
  <expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aContentWindow</name></expr></argument>, <argument><expr>"Null out param"</expr></argument>)</argument_list></call></expr>;
  <expr>*<name>aContentWindow</name> = <name>nsnull</name></expr>;

  <expr><name>nsresult</name> <name>rv</name> = <call><name>EnsureFrameLoader</name><argument_list>()</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;

  <if>if <condition>(<expr>!<name>mFrameLoader</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  <expr_stmt/></block></then></if>}</block>

  <name>PRBool</name> <name>depthTooGreat</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mFrameLoader</name>-&gt;<name>GetDepthTooGreat</name></name><argument_list>(<argument><expr>&amp;<name>depthTooGreat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>depthTooGreat</name></expr>)</condition><then> <block>{
    <comment type="line">// Claim to have no contentWindow</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>
  
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocShell</name></expr></argument>&gt;</argument_list></name></type> <name>doc_shell</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>mFrameLoader</name>-&gt;<name>GetDocShell</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>doc_shell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsPIDOMWindow</name></expr></argument>&gt;</argument_list></name></type> <name>win</name><argument_list>(<argument><expr><call><name>do_GetInterface</name><argument_list>(<argument><expr><name>doc_shell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>win</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>win</name>-&gt;<name>IsOuterWindow</name></name><argument_list>()</argument_list></call></expr></argument>,
               <argument><expr>"Uh, this window should always be an outer window!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>aContentWindow</name></expr></argument>)</argument_list></call></expr>;</return>
}

nsresult
<macro><name>nsGenericHTMLFrameElement</name></macro><expr_stmt><expr><name>::<name>EnsureFrameLoader</name></name>()
<block>{
  <if>if <condition>(<expr>!<call><name>GetParent</name><argument_list>()</argument_list></call> || !<call><name>IsInDoc</name><argument_list>()</argument_list></call> || <name>mFrameLoader</name></expr>)</condition><then> <block>{
    <comment type="line">// If frame loader is there, we just keep it around, cached</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  <expr_stmt/></block></then></if>}</block>

  <name>mFrameLoader</name> = <call><name><name>nsFrameLoader</name>::<name>Create</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsGenericHTMLFrameElement</name></macro><expr_stmt><expr><name>::<name>GetFrameLoader</name></name>(<name>nsIFrameLoader</name> **<name>aFrameLoader</name>)
<block>{
  <expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aFrameLoader</name> = <name>mFrameLoader</name></expr></argument>)</argument_list></call></expr>;
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></expr></expr_stmt>

<macro><name>NS_IMETHODIMP_</name><argument_list>(<argument>already_AddRefed&lt;nsFrameLoader&gt;</argument>)</argument_list></macro>
<macro><name>nsGenericHTMLFrameElement</name></macro><expr_stmt><expr><name>::<name>GetFrameLoader</name></name>()
<block>{
  <expr><name>nsFrameLoader</name>* <name>loader</name> = <name>mFrameLoader</name></expr>;
  <expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;
  <return>return <expr><name>loader</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsGenericHTMLFrameElement</name>::<name>SwapFrameLoaders</name></name><parameter_list>(<param><decl><type><name>nsIFrameLoaderOwner</name>*</type> <name>aOtherOwner</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// We don't support this yet</comment>
  <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLFrameElement</name>::<name>LoadSrc</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>EnsureFrameLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>mFrameLoader</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>rv</name> = <call><name><name>mFrameLoader</name>-&gt;<name>LoadFrame</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"failed to load URL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLFrameElement</name>::<name>BindToTree</name></name><parameter_list>(<param><decl><type><name>nsIDocument</name>*</type> <name>aDocument</name></decl></param>,
                                      <param><decl><type><name>nsIContent</name>*</type> <name>aParent</name></decl></param>,
                                      <param><decl><type><name>nsIContent</name>*</type> <name>aBindingParent</name></decl></param>,
                                      <param><decl><type><name>PRBool</name></type> <name>aCompileEventHandlers</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsGenericHTMLElement</name>::<name>BindToTree</name></name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>, <argument><expr><name>aParent</name></expr></argument>,
                                                 <argument><expr><name>aBindingParent</name></expr></argument>,
                                                 <argument><expr><name>aCompileEventHandlers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>aDocument</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<call><name><name>nsContentUtils</name>::<name>IsSafeToRunScript</name></name><argument_list>()</argument_list></call></expr></argument>,
                 <argument><expr>"Missing a script blocker!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// We're in a document now.  Kick off the frame load.</comment>
    <expr_stmt><expr><call><name>LoadSrc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  
  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLFrameElement</name>::<name>UnbindFromTree</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aDeep</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aNullParent</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mFrameLoader</name></expr>)</condition><then> <block>{
    <comment type="line">// This iframe is being taken out of the document, destroy the</comment>
    <comment type="line">// iframe's frame loader (doing that will tear down the window in</comment>
    <comment type="line">// this iframe).</comment>
    <comment type="line">// XXXbz we really want to only partially destroy the frame</comment>
    <comment type="line">// loader... we don't want to tear down the docshell.  Food for</comment>
    <comment type="line">// later bug.</comment>
    <expr_stmt><expr><call><name><name>mFrameLoader</name>-&gt;<name>Destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mFrameLoader</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>nsGenericHTMLElement</name>::<name>UnbindFromTree</name></name><argument_list>(<argument><expr><name>aDeep</name></expr></argument>, <argument><expr><name>aNullParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLFrameElement</name>::<name>SetAttr</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aNameSpaceID</name></decl></param>, <param><decl><type><name>nsIAtom</name>*</type> <name>aName</name></decl></param>,
                                   <param><decl><type><name>nsIAtom</name>*</type> <name>aPrefix</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>,
                                   <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsGenericHTMLElement</name>::<name>SetAttr</name></name><argument_list>(<argument><expr><name>aNameSpaceID</name></expr></argument>, <argument><expr><name>aName</name></expr></argument>, <argument><expr><name>aPrefix</name></expr></argument>,
                                              <argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if>if <condition>(<expr><name>aNameSpaceID</name> == <name>kNameSpaceID_None</name> &amp;&amp;
      <name>aName</name> == <name><name>nsGkAtoms</name>::<name>src</name></name></expr>)</condition><then> <block>{
    <comment type="line">// Don't propagate error here. The attribute was successfully set, that's</comment>
    <comment type="line">// what we should reflect.</comment>
    <expr_stmt><expr><call><name>LoadSrc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLFrameElement</name>::<name>DestroyContent</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mFrameLoader</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mFrameLoader</name>-&gt;<name>Destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mFrameLoader</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>nsGenericHTMLElement</name>::<name>DestroyContent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLFrameElement</name>::<name>CopyInnerTo</name></name><parameter_list>(<param><decl><type><name>nsGenericElement</name>*</type> <name>aDest</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsGenericHTMLElement</name>::<name>CopyInnerTo</name></name><argument_list>(<argument><expr><name>aDest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>doc</name> <init>= <expr><call><name><name>aDest</name>-&gt;<name>GetOwnerDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name><name>doc</name>-&gt;<name>IsStaticDocument</name></name><argument_list>()</argument_list></call> &amp;&amp; <name>mFrameLoader</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsGenericHTMLFrameElement</name>*</type> <name>dest</name> <init>=
      <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsGenericHTMLFrameElement</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aDest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsFrameLoader</name>*</type> <name>fl</name> <init>= <expr><call><name><name>nsFrameLoader</name>::<name>Create</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_STATE</name><argument_list>(<argument><expr><name>fl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dest</name>-&gt;<name>mFrameLoader</name></name> = <name>fl</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsFrameLoader</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>mFrameLoader</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>-&gt;<call><name>CreateStaticClone</name><argument_list>(<argument><expr><name>fl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<comment type="line">//----------------------------------------------------------------------</comment>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>Blur</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>ShouldBlur</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>doc</name> <init>= <expr><call><name>GetCurrentDoc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>doc</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsIDOMWindow</name>*</type> <name>win</name> <init>= <expr><call><name><name>doc</name>-&gt;<name>GetWindow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsIFocusManager</name>*</type> <name>fm</name> <init>= <expr><call><name><name>nsFocusManager</name>::<name>GetFocusManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr>(<name>win</name> &amp;&amp; <name>fm</name>) ? <call><name><name>fm</name>-&gt;<name>ClearFocus</name></name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call> : <name>NS_OK</name></expr>;</return>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>Focus</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIFocusManager</name>*</type> <name>fm</name> <init>= <expr><call><name><name>nsFocusManager</name>::<name>GetFocusManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>elem</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>fm</name> ? <call><name><name>fm</name>-&gt;<name>SetFocus</name></name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> : <name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLElement</name>::<name>IsHTMLFocusable</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aWithMouse</name></decl></param>,
                                      <param><decl><type><name>PRBool</name> *</type><name>aIsFocusable</name></decl></param>,
                                      <param><decl><type><name>PRInt32</name> *</type><name>aTabIndex</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIDocument</name> *</type><name>doc</name> <init>= <expr><call><name>GetCurrentDoc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>doc</name> || <call><name><name>doc</name>-&gt;<name>HasFlag</name></name><argument_list>(<argument><expr><name>NODE_IS_EDITABLE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// In designMode documents we only allow focusing the document.</comment>
    <if>if <condition>(<expr><name>aTabIndex</name></expr>)</condition><then> <block>{
      <expr_stmt><expr>*<name>aTabIndex</name> = -1</expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr>*<name>aIsFocusable</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

    <return>return <expr><name>PR_TRUE</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>tabIndex</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>   <comment type="line">// Default value for non HTML elements with -moz-user-focus</comment>
  <expr_stmt><expr><call><name>GetTabIndex</name><argument_list>(<argument><expr>&amp;<name>tabIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>override</name></decl>, <decl><type ref="prev"/><name>disabled</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>IsEditableRoot</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// Editable roots should always be focusable.</comment>
    <expr_stmt><expr><name>override</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

    <comment type="line">// Ignore the disabled attribute in editable contentEditable/designMode</comment>
    <comment type="line">// roots.</comment>
    <if>if <condition>(<expr>!<call><name>HasAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>tabindex</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <comment type="line">// The default value for tabindex should be 0 for editable</comment>
      <comment type="line">// contentEditable roots.</comment>
      <expr_stmt><expr><name>tabIndex</name> = 0</expr>;</expr_stmt>
    }</block></then></if>
  }</block></then>
  <else>else <block>{
    <expr_stmt><expr><name>override</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

    <comment type="line">// Just check for disabled attribute on form controls</comment>
    <expr_stmt><expr><name>disabled</name> = <call><name>HasAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>disabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>disabled</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>tabIndex</name> = -1</expr>;</expr_stmt>
    }</block></then></if>
  }</block></else></if>

  <if>if <condition>(<expr><name>aTabIndex</name></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aTabIndex</name> = <name>tabIndex</name></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// If a tabindex is specified at all, or the default tabindex is 0, we're focusable</comment>
  <expr_stmt><expr>*<name>aIsFocusable</name> = 
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XP_MACOSX</name></cpp:ifdef>
    <comment type="line">// can only focus with the mouse on Mac if editable</comment>
    (!<name>aWithMouse</name> || <name>override</name>) &amp;&amp;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    (<name>tabIndex</name> &gt;= 0 || (!<name>disabled</name> &amp;&amp; <call><name>HasAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>tabindex</name></name></expr></argument>)</argument_list></call>))</expr>;</expr_stmt>

  <return>return <expr><name>override</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLElement</name>::<name>RegUnRegAccessKey</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aDoReg</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// first check to see if we have an access key</comment>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>accessKey</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>accesskey</name></name></expr></argument>, <argument><expr><name>accessKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name><name>accessKey</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>

  <comment type="line">// We have an access key, so get the ESM from the pres context.</comment>
  <decl_stmt><decl><type><name>nsPresContext</name> *</type><name>presContext</name> <init>= <expr><call><name>GetPresContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>presContext</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsIEventStateManager</name> *</type><name>esm</name> <init>= <expr><call><name><name>presContext</name>-&gt;<name>EventStateManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Register or unregister as appropriate.</comment>
    <if>if <condition>(<expr><name>aDoReg</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>esm</name>-&gt;<name>RegisterAccessKey</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>(<name>PRUint32</name>)<call><name><name>accessKey</name>.<name>First</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>esm</name>-&gt;<name>UnregisterAccessKey</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>(<name>PRUint32</name>)<call><name><name>accessKey</name>.<name>First</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLElement</name>::<name>PerformAccesskey</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aKeyCausesActivation</name></decl></param>,
                                       <param><decl><type><name>PRBool</name></type> <name>aIsTrustedEvent</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsPresContext</name> *</type><name>presContext</name> <init>= <expr><call><name>GetPresContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>presContext</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <comment type="line">// It's hard to say what HTML4 wants us to do in all cases.</comment>
  <decl_stmt><decl><type><name>nsIFocusManager</name>*</type> <name>fm</name> <init>= <expr><call><name><name>nsFocusManager</name>::<name>GetFocusManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>fm</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMElement</name></expr></argument>&gt;</argument_list></name></type> <name>elem</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>fm</name>-&gt;<name>SetFocus</name></name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr><name><name>nsIFocusManager</name>::<name>FLAG_BYKEY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><name>aKeyCausesActivation</name></expr>)</condition><then> <block>{
    <comment type="line">// Click on it if the users prefs indicate to do so.</comment>
    <function_decl><type><name>nsMouseEvent</name></type> <name>event</name><parameter_list>(<param><decl><type><name>aIsTrustedEvent</name></type></decl></param>, <param><decl><type><name>NS_MOUSE_CLICK</name></type></decl></param>,
                       <param><decl><type><name>nsnull</name></type></decl></param>, <param><decl><type><name><name>nsMouseEvent</name>::<name>eReal</name></name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name><name>event</name>.<name>inputSource</name></name> = <name><name>nsIDOMNSMouseEvent</name>::<name>MOZ_SOURCE_KEYBOARD</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsAutoPopupStatePusher</name></type> <name>popupStatePusher</name><argument_list>(<argument><expr><name>aIsTrustedEvent</name> ?
                                            <name>openAllowed</name> : <name>openAbused</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>nsEventDispatcher</name>::<name>Dispatch</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>presContext</name></expr></argument>, <argument><expr>&amp;<name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><specifier>const</specifier> <name>nsAttrName</name>*</type>
<name><name>nsGenericHTMLElement</name>::<name>InternalGetExistingAttrNameFromQName</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aStr</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <if>if <condition>(<expr><call><name>IsInHTMLDocument</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>lower</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>ASCIIToLower</name></name><argument_list>(<argument><expr><name>aStr</name></expr></argument>, <argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>mAttrsAndChildren</name>.<name>GetExistingAttrNameFromQName</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name><name>mAttrsAndChildren</name>.<name>GetExistingAttrNameFromQName</name></name><argument_list>(<argument><expr><name>aStr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetEditor</name></name><parameter_list>(<param><decl><type><name>nsIEditor</name>**</type> <name>aEditor</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aEditor</name> = <name>nsnull</name></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<call><name><name>nsContentUtils</name>::<name>IsCallerTrustedForWrite</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_DOM_SECURITY_ERR</name></expr>;</return></then></if>

  <return>return <expr><call><name>GetEditorInternal</name><argument_list>(<argument><expr><name>aEditor</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetEditorInternal</name></name><parameter_list>(<param><decl><type><name>nsIEditor</name>**</type> <name>aEditor</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aEditor</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsITextControlElement</name></expr></argument>&gt;</argument_list></name></type> <name>textCtrl</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>textCtrl</name></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aEditor</name> = <call><name><name>textCtrl</name>-&gt;<name>GetTextEditor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aEditor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsIEditor</name></expr></argument>&gt;</argument_list></name></type>
<name><name>nsGenericHTMLElement</name>::<name>GetAssociatedEditor</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// If contenteditable is ever implemented, it might need to do something different here?</comment>

  <decl_stmt><decl><type><name>nsIEditor</name>*</type> <name>editor</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetEditorInternal</name><argument_list>(<argument><expr>&amp;<name>editor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>editor</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLElement</name>::<name>IsCurrentBodyElement</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLBodyElement</name></expr></argument>&gt;</argument_list></name></type> <name>bodyElement</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>bodyElement</name></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLDocument</name></expr></argument>&gt;</argument_list></name></type> <name>htmlDocument</name> <init>=
    <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name>GetCurrentDoc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>htmlDocument</name></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMHTMLElement</name></expr></argument>&gt;</argument_list></name></type> <name>htmlElement</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>htmlDocument</name>-&gt;<name>GetBody</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>htmlElement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>htmlElement</name> == <name>bodyElement</name></expr>;</return>
}</block></function>

<comment type="line">// static</comment>
<function><type><name>void</name></type>
<name><name>nsGenericHTMLElement</name>::<name>SyncEditorsOnSubtree</name></name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type> <name>content</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Sync this node */</comment>
  <decl_stmt><decl><type><name>nsGenericHTMLElement</name>*</type> <name>element</name> <init>= <expr><call><name>FromContent</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>element</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIEditor</name></expr></argument>&gt;</argument_list></name></type> <name>editor</name> <init>= <expr><call><name><name>element</name>-&gt;<name>GetAssociatedEditor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>editor</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>editor</name>-&gt;<name>SyncRealTimeSpell</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <comment type="block">/* Sync all children */</comment>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>childCount</name> <init>= <expr><call><name><name>content</name>-&gt;<name>GetChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>childCount</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsIContent</name>*</type> <name>childContent</name> <init>= <expr><call><name><name>content</name>-&gt;<name>GetChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>childContent</name></expr></argument>,
                 <argument><expr>"DOM mutated unexpectedly while syncing editors!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>childContent</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>SyncEditorsOnSubtree</name><argument_list>(<argument><expr><name>childContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLElement</name>::<name>RecompileScriptEventListeners</name></name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><call><name><name>mAttrsAndChildren</name>.<name>AttrCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrName</name> *</type><name>name</name> <init>= <expr><call><name><name>mAttrsAndChildren</name>.<name>AttrNameAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Eventlistenener-attributes are always in the null namespace</comment>
        <if>if <condition>(<expr>!<call><name><name>name</name>-&gt;<name>IsAtom</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <continue>continue;</continue>
        }</block></then></if>

        <decl_stmt><decl><type><name>nsIAtom</name> *</type><name>attr</name> <init>= <expr><call><name><name>name</name>-&gt;<name>Atom</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>nsContentUtils</name>::<name>IsEventAttributeName</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>EventNameType_HTML</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <continue>continue;</continue>
        }</block></then></if>

        <decl_stmt><decl><type><name>nsAutoString</name></type> <name>value</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>AddScriptEventListener</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsGenericHTMLElement</name>::<name>IsEditableRoot</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <decl_stmt><decl><type><name>nsIDocument</name> *</type><name>document</name> <init>= <expr><call><name>GetCurrentDoc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>document</name></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><call><name><name>document</name>-&gt;<name>HasFlag</name></name><argument_list>(<argument><expr><name>NODE_IS_EDITABLE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><call><name>GetContentEditableValue</name><argument_list>()</argument_list></call> != <name>eTrue</name></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsIContent</name> *</type><name>parent</name> <init>= <expr><call><name>GetParent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr>!<name>parent</name> || !<call><name><name>parent</name>-&gt;<name>HasFlag</name></name><argument_list>(<argument><expr><name>NODE_IS_EDITABLE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>MakeContentDescendantsEditable</name><parameter_list>(<param><decl><type><name>nsIContent</name> *</type><name>aContent</name></decl></param>, <param><decl><type><name>nsIDocument</name> *</type><name>aDocument</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>stateBefore</name> <init>= <expr><call><name><name>aContent</name>-&gt;<name>IntrinsicState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>aContent</name>-&gt;<name>UpdateEditableState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>aDocument</name> &amp;&amp; <name>stateBefore</name> != <call><name><name>aContent</name>-&gt;<name>IntrinsicState</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>aDocument</name>-&gt;<name>ContentStatesChanged</name></name><argument_list>(<argument><expr><name>aContent</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                                    <argument><expr><name>NS_EVENT_STATE_MOZ_READONLY</name> |
                                    <name>NS_EVENT_STATE_MOZ_READWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name><name>aContent</name>-&gt;<name>GetChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsIContent</name> *</type><name>child</name> <init>= <expr><call><name><name>aContent</name>-&gt;<name>GetChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name><name>child</name>-&gt;<name>HasAttr</name></name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>contenteditable</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>MakeContentDescendantsEditable</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>aDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsGenericHTMLElement</name>::<name>ChangeEditableState</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aChange</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>document</name> <init>= <expr><call><name>GetCurrentDoc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>document</name></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>

  <if>if <condition>(<expr><name>aChange</name> != 0</expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIHTMLDocument</name></expr></argument>&gt;</argument_list></name></type> <name>htmlDocument</name> <init>=
      <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>htmlDocument</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>htmlDocument</name>-&gt;<name>ChangeContentEditableCount</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>aChange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <if>if <condition>(<expr><call><name><name>document</name>-&gt;<name>HasFlag</name></name><argument_list>(<argument><expr><name>NODE_IS_EDITABLE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>document</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name>MakeContentDescendantsEditable</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
