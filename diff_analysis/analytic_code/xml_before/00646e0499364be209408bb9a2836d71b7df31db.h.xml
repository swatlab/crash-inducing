<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="00646e0499364be209408bb9a2836d71b7df31db.h"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1999
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<comment type="block">/* internal interface for all rule types in a CSS style sheet */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>nsICSSRule_h___</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nsICSSRule_h___</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIStyleRule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMCSSRule.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>nsCSSStyleSheet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>nsICSSGroupRule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>nsAString</name></decl>;</decl_stmt>

<comment type="line">// IID for the nsICSSRule interface {2a1fef35-eee9-4a5d-bc87-e2228acc926b}</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_ICSS_RULE_IID</name></cpp:macro>     \
<cpp:value>{ 0x2a1fef35, 0xeee9, 0x4a5d, \
 { 0xbc, 0x87, 0xe2, 0x22, 0x8a, 0xcc, 0x92, 0x6b } }</cpp:value></cpp:define>


<comment type="line">// inheriting from nsIStyleRule is only for style rules, not other rule types</comment>
<expr_stmt><expr><name>class</name> <name>nsICSSRule</name> : <name>public</name> <name>nsIStyleRule</name> <block>{
<expr><name>public</name>:
  <call><name>NS_DECLARE_STATIC_IID_ACCESSOR</name><argument_list>(<argument><expr><name>NS_ICSS_RULE_IID</name></expr></argument>)</argument_list></call>
  <comment type="line">// The constants in this list must maintain the following invariants:</comment>
  <comment type="line">//   If a rule of type N must appear before a rule of type M in stylesheets</comment>
  <comment type="line">//   then N &lt; M</comment>
  <comment type="line">// Note that nsCSSStyleSheet::RebuildChildList assumes that no other kinds of</comment>
  <comment type="line">// rules can come between two rules of type IMPORT_RULE.</comment>
  enum <block>{
    <expr><name>UNKNOWN_RULE</name> = 0</expr>,
    <expr><name>CHARSET_RULE</name></expr>,
    <expr><name>IMPORT_RULE</name></expr>,
    <expr><name>NAMESPACE_RULE</name></expr>,
    <expr><name>STYLE_RULE</name></expr>,
    <expr><name>MEDIA_RULE</name></expr>,
    <expr><name>FONT_FACE_RULE</name></expr>,
    <expr><name>PAGE_RULE</name></expr>,
    <expr><name>DOCUMENT_RULE</name></expr>
  }</block></expr>;

  <expr><name>NS_IMETHOD</name> <macro><name>GetType</name><argument_list>(<argument>PRInt32&amp; aType</argument>)</argument_list></macro> const = 0</expr>;

  <expr><name>NS_IMETHOD</name> <macro><name>GetStyleSheet</name><argument_list>(<argument>nsIStyleSheet*&amp; aSheet</argument>)</argument_list></macro> const = 0</expr>;
  <expr><name>NS_IMETHOD</name> <call><name>SetStyleSheet</name><argument_list>(<argument><expr><name>nsCSSStyleSheet</name>* <name>aSheet</name></expr></argument>)</argument_list></call> = 0</expr>;
  <expr><name>NS_IMETHOD</name> <call><name>SetParentRule</name><argument_list>(<argument><expr><name>nsICSSGroupRule</name>* <name>aRule</name></expr></argument>)</argument_list></call> = 0</expr>;

  <expr><name>NS_IMETHOD</name> <macro><name>Clone</name><argument_list>(<argument>nsICSSRule*&amp; aClone</argument>)</argument_list></macro> const = 0</expr>;

  <comment type="line">// Note that this returns null for inline style rules since they aren't</comment>
  <comment type="line">// supposed to have a DOM rule representation (and our code wouldn't work).</comment>
  <expr><name>nsresult</name> <macro><name>GetDOMRule</name><argument_list>(<argument>nsIDOMCSSRule** aDOMRule</argument>)</argument_list></macro>
  <block>{
    <expr><name>nsresult</name> <name>rv</name></expr>;
    <expr><call><name>NS_IF_ADDREF</name><argument_list>(<argument><expr>*<name>aDOMRule</name> = <call><name>GetDOMRuleWeak</name><argument_list>(<argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <return>return <expr><name>rv</name></expr>;</return></block></expr>
  }</block>
  <name>virtual</name> <name>nsIDOMCSSRule</name>* <call><name>GetDOMRuleWeak</name><argument_list>(<argument><expr><name>nsresult</name>* <name>aResult</name></expr></argument>)</argument_list></call> = 0</expr>;</expr_stmt>
};

<macro><name>NS_DEFINE_STATIC_IID_ACCESSOR</name><argument_list>(<argument>nsICSSRule</argument>, <argument>NS_ICSS_RULE_IID</argument>)</argument_list></macro>

<comment type="block">/* Define global NS_New* functions for rules that don't need their own
   interfaces here */</comment>
<function_decl><type><name>nsresult</name></type>
<name>NS_NewCSSCharsetRule</name><parameter_list>(<param><decl><type><name>nsICSSRule</name>**</type> <name>aInstancePtrResult</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aEncoding</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* nsICSSRule_h___ */</comment>
</unit>
