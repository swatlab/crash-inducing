<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="006dfff7e5eb0e0677157a607614f55a918f6758.c"><comment type="block">/* cairo - a vector graphics library with display and print output
 *
 * Copyright Â© 2005 Red Hat, Inc
 *
 * This library is free software; you can redistribute it and/or
 * modify it either under the terms of the GNU Lesser General Public
 * License version 2.1 as published by the Free Software Foundation
 * (the "LGPL") or, at your option, under the terms of the Mozilla
 * Public License Version 1.1 (the "MPL"). If you do not alter this
 * notice, a recipient may use your version of this file under either
 * the MPL or the LGPL.
 *
 * You should have received a copy of the LGPL along with this library
 * in the file COPYING-LGPL-2.1; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * You should have received a copy of the MPL along with this library
 * in the file COPYING-MPL-1.1
 *
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY
 * OF ANY KIND, either express or implied. See the LGPL or the MPL for
 * the specific language governing rights and limitations.
 *
 * The Original Code is the cairo graphics library.
 *
 * The Initial Developer of the Original Code is Red Hat, Inc.
 *
 * Contributor(s):
 *	Carl Worth &lt;cworth@cworth.org&gt;
 */</comment>

<comment type="block">/* This isn't a "real" surface, but just something to be used by the
 * test suite to test a mythical backend that uses nothing but
 * fallbacks.
 *
 * The defining feature of this backend is that it has as many %NULL
 * backend function entries as possible. The ones that aren't %NULL are
 * simply those that must be implemented to have working fallbacks.
 * (Except for create_similar---fallbacks would work fine without
 * that---I implemented it here in order to create as many surfaces as
 * possible of type test_fallback_surface_t during the test suite
 * run).
 *
 * It's possible that this code might serve as a good starting point
 * for someone working on bringing up a new backend, starting with the
 * minimal all-fallbacks approach and working up gradually from
 * there.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cairoint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test-fallback-surface.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>_test_fallback_surface</name> <block>{
    <decl_stmt><decl><type><name>cairo_surface_t</name></type> <name>base</name></decl>;</decl_stmt>

    <comment type="block">/* This is a cairo_image_surface to hold the actual contents. */</comment>
    <decl_stmt><decl><type><name>cairo_surface_t</name> *</type><name>backing</name></decl>;</decl_stmt>
}</block></struct></type> <name>test_fallback_surface_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>cairo_surface_backend_t</name></type> <name>test_fallback_surface_backend</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>slim_hidden_proto</name> <argument_list>(<argument><expr><name>_cairo_test_fallback_surface_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>cairo_surface_t</name> *</type>
<name>_cairo_test_fallback_surface_create</name> <parameter_list>(<param><decl><type><name>cairo_content_t</name></type>	<name>content</name></decl></param>,
			       <param><decl><type><name>int</name></type>		<name>width</name></decl></param>,
			       <param><decl><type><name>int</name></type>		<name>height</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>test_fallback_surface_t</name> *</type><name>surface</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cairo_surface_t</name> *</type><name>backing</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>backing</name> = <call><name>_cairo_image_surface_create_with_content</name> <argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>cairo_surface_status</name> <argument_list>(<argument><expr><name>backing</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<return>return <expr><name>backing</name></expr>;</return></then></if>

    <expr_stmt><expr><name>surface</name> = <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>test_fallback_surface_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>surface</name> == <name>NULL</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>cairo_surface_destroy</name> <argument_list>(<argument><expr><name>backing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>_cairo_surface_create_in_error</name> <argument_list>(<argument><expr><call><name>_cairo_error</name> <argument_list>(<argument><expr><name>CAIRO_STATUS_NO_MEMORY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>_cairo_surface_init</name> <argument_list>(<argument><expr>&amp;<name><name>surface</name>-&gt;<name>base</name></name></expr></argument>, <argument><expr>&amp;<name>test_fallback_surface_backend</name></expr></argument>,
			 <argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>surface</name>-&gt;<name>backing</name></name> = <name>backing</name></expr>;</expr_stmt>

    <return>return <expr>&amp;<name><name>surface</name>-&gt;<name>base</name></name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>slim_hidden_def</name> <argument_list>(<argument><expr><name>_cairo_test_fallback_surface_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>cairo_surface_t</name> *</type>
<name>_test_fallback_surface_create_similar</name> <parameter_list>(<param><decl><type><name>void</name>		*</type><name>abstract_surface</name></decl></param>,
				       <param><decl><type><name>cairo_content_t</name></type>	 <name>content</name></decl></param>,
				       <param><decl><type><name>int</name></type>		 <name>width</name></decl></param>,
				       <param><decl><type><name>int</name></type>		 <name>height</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>CAIRO_CONTENT_VALID</name> <argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>_cairo_test_fallback_surface_create</name> <argument_list>(<argument><expr><name>content</name></expr></argument>,
					  <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>cairo_status_t</name></type>
<name>_test_fallback_surface_finish</name> <parameter_list>(<param><decl><type><name>void</name> *</type><name>abstract_surface</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>test_fallback_surface_t</name> *</type><name>surface</name> <init>= <expr><name>abstract_surface</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>cairo_surface_destroy</name> <argument_list>(<argument><expr><name><name>surface</name>-&gt;<name>backing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>CAIRO_STATUS_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>cairo_status_t</name></type>
<name>_test_fallback_surface_acquire_source_image</name> <parameter_list>(<param><decl><type><name>void</name>	     *</type><name>abstract_surface</name></decl></param>,
					     <param><decl><type><name>cairo_image_surface_t</name> **</type><name>image_out</name></decl></param>,
					     <param><decl><type><name>void</name>		 **</type><name>image_extra</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>test_fallback_surface_t</name> *</type><name>surface</name> <init>= <expr><name>abstract_surface</name></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>_cairo_surface_acquire_source_image</name> <argument_list>(<argument><expr><name><name>surface</name>-&gt;<name>backing</name></name></expr></argument>,
						<argument><expr><name>image_out</name></expr></argument>, <argument><expr><name>image_extra</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_test_fallback_surface_release_source_image</name> <parameter_list>(<param><decl><type><name>void</name>	     *</type><name>abstract_surface</name></decl></param>,
					     <param><decl><type><name>cairo_image_surface_t</name>	*</type><name>image</name></decl></param>,
					     <param><decl><type><name>void</name>		  *</type><name>image_extra</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>test_fallback_surface_t</name> *</type><name>surface</name> <init>= <expr><name>abstract_surface</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>_cairo_surface_release_source_image</name> <argument_list>(<argument><expr><name><name>surface</name>-&gt;<name>backing</name></name></expr></argument>,
					 <argument><expr><name>image</name></expr></argument>, <argument><expr><name>image_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>cairo_status_t</name></type>
<name>_test_fallback_surface_acquire_dest_image</name> <parameter_list>(<param><decl><type><name>void</name>		           *</type><name>abstract_surface</name></decl></param>,
					   <param><decl><type><name>cairo_rectangle_int_t</name>   *</type><name>interest_rect</name></decl></param>,
					   <param><decl><type><name>cairo_image_surface_t</name>  **</type><name>image_out</name></decl></param>,
					   <param><decl><type><name>cairo_rectangle_int_t</name>   *</type><name>image_rect_out</name></decl></param>,
					   <param><decl><type><name>void</name>			  **</type><name>image_extra</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>test_fallback_surface_t</name> *</type><name>surface</name> <init>= <expr><name>abstract_surface</name></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>_cairo_surface_acquire_dest_image</name> <argument_list>(<argument><expr><name><name>surface</name>-&gt;<name>backing</name></name></expr></argument>,
					      <argument><expr><name>interest_rect</name></expr></argument>,
					      <argument><expr><name>image_out</name></expr></argument>,
					      <argument><expr><name>image_rect_out</name></expr></argument>,
					      <argument><expr><name>image_extra</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>_test_fallback_surface_release_dest_image</name> <parameter_list>(<param><decl><type><name>void</name>			   *</type><name>abstract_surface</name></decl></param>,
					   <param><decl><type><name>cairo_rectangle_int_t</name>   *</type><name>interest_rect</name></decl></param>,
					   <param><decl><type><name>cairo_image_surface_t</name>   *</type><name>image</name></decl></param>,
					   <param><decl><type><name>cairo_rectangle_int_t</name>   *</type><name>image_rect</name></decl></param>,
					   <param><decl><type><name>void</name>			   *</type><name>image_extra</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>test_fallback_surface_t</name> *</type><name>surface</name> <init>= <expr><name>abstract_surface</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>_cairo_surface_release_dest_image</name> <argument_list>(<argument><expr><name><name>surface</name>-&gt;<name>backing</name></name></expr></argument>,
				       <argument><expr><name>interest_rect</name></expr></argument>,
				       <argument><expr><name>image</name></expr></argument>,
				       <argument><expr><name>image_rect</name></expr></argument>,
				       <argument><expr><name>image_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>cairo_status_t</name></type>
<name>_test_fallback_surface_clone_similar</name> <parameter_list>(<param><decl><type><name>void</name>		  *</type><name>abstract_surface</name></decl></param>,
				      <param><decl><type><name>cairo_surface_t</name>     *</type><name>src</name></decl></param>,
				      <param><decl><type><name>int</name></type>                  <name>src_x</name></decl></param>,
				      <param><decl><type><name>int</name></type>                  <name>src_y</name></decl></param>,
				      <param><decl><type><name>int</name></type>                  <name>width</name></decl></param>,
				      <param><decl><type><name>int</name></type>                  <name>height</name></decl></param>,
				      <param><decl><type><name>cairo_surface_t</name>    **</type><name>clone_out</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>test_fallback_surface_t</name> *</type><name>surface</name> <init>= <expr><name>abstract_surface</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>src</name>-&gt;<name>backend</name></name> == <name><name>surface</name>-&gt;<name>base</name>.<name>backend</name></name></expr>)</condition><then> <block>{
	<expr_stmt><expr>*<name>clone_out</name> = <call><name>cairo_surface_reference</name> <argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>CAIRO_STATUS_SUCCESS</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>CAIRO_INT_STATUS_UNSUPPORTED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>cairo_int_status_t</name></type>
<name>_test_fallback_surface_get_extents</name> <parameter_list>(<param><decl><type><name>void</name>		  *</type><name>abstract_surface</name></decl></param>,
				    <param><decl><type><name>cairo_rectangle_int_t</name> *</type><name>rectangle</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>test_fallback_surface_t</name> *</type><name>surface</name> <init>= <expr><name>abstract_surface</name></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>_cairo_surface_get_extents</name> <argument_list>(<argument><expr><name><name>surface</name>-&gt;<name>backing</name></name></expr></argument>, <argument><expr><name>rectangle</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>cairo_surface_backend_t</name></type> <name>test_fallback_surface_backend</name> <init>= <expr><block>{
    <expr><name>CAIRO_INTERNAL_SURFACE_TYPE_TEST_FALLBACK</name></expr>,
    <expr><name>_test_fallback_surface_create_similar</name></expr>,
    <expr><name>_test_fallback_surface_finish</name></expr>,
    <expr><name>_test_fallback_surface_acquire_source_image</name></expr>,
    <expr><name>_test_fallback_surface_release_source_image</name></expr>,
    <expr><name>_test_fallback_surface_acquire_dest_image</name></expr>,
    <expr><name>_test_fallback_surface_release_dest_image</name></expr>,
    <expr><name>_test_fallback_surface_clone_similar</name></expr>,
    <expr><name>NULL</name></expr>, <comment type="block">/* composite */</comment>
    <expr><name>NULL</name></expr>, <comment type="block">/* fill_rectangles */</comment>
    <expr><name>NULL</name></expr>, <comment type="block">/* composite_trapezoids */</comment>
    <expr><name>NULL</name></expr>, <comment type="block">/* copy_page */</comment>
    <expr><name>NULL</name></expr>, <comment type="block">/* show_page */</comment>
    <expr><name>NULL</name></expr>, <comment type="block">/* set_clip_region */</comment>
    <expr><name>NULL</name></expr>, <comment type="block">/* intersect_clip_path */</comment>
    <expr><name>_test_fallback_surface_get_extents</name></expr>,
    <expr><name>NULL</name></expr>, <comment type="block">/* old_show_glyphs */</comment>
    <expr><name>NULL</name></expr>, <comment type="block">/* get_font_options */</comment>
    <expr><name>NULL</name></expr>, <comment type="block">/* flush */</comment>
    <expr><name>NULL</name></expr>, <comment type="block">/* mark_dirty_rectangle */</comment>
    <expr><name>NULL</name></expr>, <comment type="block">/* scaled_font_fini */</comment>
    <expr><name>NULL</name></expr>, <comment type="block">/* scaled_glyph_fini */</comment>
    <expr><name>NULL</name></expr>, <comment type="block">/* paint */</comment>
    <expr><name>NULL</name></expr>, <comment type="block">/* mask */</comment>
    <expr><name>NULL</name></expr>, <comment type="block">/* stroke */</comment>
    <expr><name>NULL</name></expr>, <comment type="block">/* fill */</comment>
    <expr><name>NULL</name></expr>, <comment type="block">/* show_glyphs */</comment>
    <expr><name>NULL</name></expr>  <comment type="block">/* snapshot */</comment>
}</block></expr></init></decl>;</decl_stmt>
</unit>
