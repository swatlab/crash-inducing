<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="001d8f593e05e2748d1debf11228d8b2dedd6dfc.h"><comment type="line">// Copyright (c) 2006, Google Inc.</comment>
<comment type="line">// All rights reserved.</comment>
<comment type="line">//</comment>
<comment type="line">// Redistribution and use in source and binary forms, with or without</comment>
<comment type="line">// modification, are permitted provided that the following conditions are</comment>
<comment type="line">// met:</comment>
<comment type="line">//</comment>
<comment type="line">//     * Redistributions of source code must retain the above copyright</comment>
<comment type="line">// notice, this list of conditions and the following disclaimer.</comment>
<comment type="line">//     * Redistributions in binary form must reproduce the above</comment>
<comment type="line">// copyright notice, this list of conditions and the following disclaimer</comment>
<comment type="line">// in the documentation and/or other materials provided with the</comment>
<comment type="line">// distribution.</comment>
<comment type="line">//     * Neither the name of Google Inc. nor the names of its</comment>
<comment type="line">// contributors may be used to endorse or promote products derived from</comment>
<comment type="line">// this software without specific prior written permission.</comment>
<comment type="line">//</comment>
<comment type="line">// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</comment>
<comment type="line">// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</comment>
<comment type="line">// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</comment>
<comment type="line">// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</comment>
<comment type="line">// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</comment>
<comment type="line">// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</comment>
<comment type="line">// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</comment>
<comment type="line">// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</comment>
<comment type="line">// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</comment>
<comment type="line">// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</comment>
<comment type="line">// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</comment>

<comment type="line">// The caller may implement the SymbolSupplier abstract base class</comment>
<comment type="line">// to provide symbols for a given module.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GOOGLE_BREAKPAD_PROCESSOR_SYMBOL_SUPPLIER_H__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GOOGLE_BREAKPAD_PROCESSOR_SYMBOL_SUPPLIER_H__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>google_breakpad</name> <block>{

<expr_stmt><expr><name>using</name> <name>std</name>::<name>string</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeModule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SystemInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SymbolSupplier</name> <block>{
 <label><name>public</name>:</label>
  <comment type="line">// Result type for GetSymbolFile</comment>
  <enum>enum <name>SymbolResult</name> <block>{
    <comment type="line">// no symbols were found, but continue processing</comment>
    <decl><name>NOT_FOUND</name></decl>,

    <comment type="line">// symbols were found, and the path has been placed in symbol_file</comment>
    <decl><name>FOUND</name></decl>,

    <comment type="line">// stops processing the minidump immediately</comment>
    <decl><name>INTERRUPT</name></decl>
  }</block>;</enum>

  <expr_stmt><expr><name>virtual</name> ~<macro><name>SymbolSupplier</name><argument_list>()</argument_list></macro> <block>{}</block>

  <comment type="line">// Retrieves the symbol file for the given CodeModule, placing the</comment>
  <comment type="line">// path in symbol_file if successful.  system_info contains strings</comment>
  <comment type="line">// identifying the operating system and CPU; SymbolSupplier may use to help</comment>
  <comment type="line">// locate the symbol file.  system_info may be NULL or its fields may be</comment>
  <comment type="line">// empty if these values are unknown.</comment>
  <name>virtual</name> <name>SymbolResult</name> <call><name>GetSymbolFile</name><argument_list>(<argument><expr>const <name>CodeModule</name> *<name>module</name></expr></argument>,
                                     <argument><expr>const <name>SystemInfo</name> *<name>system_info</name></expr></argument>,
                                     <argument><expr><name>string</name> *<name>symbol_file</name></expr></argument>)</argument_list></call> = 0</expr>;</expr_stmt>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}</block></decl></decl_stmt>  <comment type="line">// namespace google_breakpad</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// GOOGLE_BREAKPAD_PROCESSOR_SYMBOL_SUPPLIER_H__</comment>
</unit>
