<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="0052d9084a46bb6182d4ae10555aaadb04aa4745.h"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Aaron Leventhal &lt;aaronl@netscape.com&gt; (original author)
 *   Alexander Surkov &lt;surkov.alexander@gmail.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_nsHTMLAreaAccessible_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_nsHTMLAreaAccessible_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsHTMLLinkAccessible.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsHTMLImageAccessibleWrap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLMapElement.h"</cpp:file></cpp:include>

<comment type="block">/**
 * Used for HTML image maps.
 */</comment>
<expr_stmt><expr><name>class</name> <name>nsHTMLImageMapAccessible</name> : <name>public</name> <name>nsHTMLImageAccessibleWrap</name>
<block>{
<expr><name>public</name>:
  <call><name>nsHTMLImageMapAccessible</name><argument_list>(<argument><expr><name>nsIContent</name> *<name>aContent</name></expr></argument>, <argument><expr><name>nsIWeakReference</name> *<name>aShell</name></expr></argument>,
                           <argument><expr><name>nsIDOMHTMLMapElement</name> *<name>aMapElm</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// nsISupports and cycle collector</comment>
  <expr><name>NS_DECL_ISUPPORTS_INHERITED</name>

  <comment type="line">// nsIAccessibleHyperLink</comment>
  <name>NS_IMETHOD</name> <call><name>GetAnchorCount</name><argument_list>(<argument><expr><name>PRInt32</name> *<name>aAnchorCount</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>NS_IMETHOD</name> <macro><name>GetURI</name><argument_list>(<argument>PRInt32 aIndex</argument>, <argument>nsIURI **aURI</argument>)</argument_list></macro></expr>;
  <expr><name>NS_IMETHOD</name> <macro><name>GetAnchor</name><argument_list>(<argument>PRInt32 aIndex</argument>, <argument>nsIAccessible **aAccessible</argument>)</argument_list></macro></expr>;

  <comment type="line">// nsAccessible</comment>
  <expr><name>virtual</name> <name>nsresult</name> <call><name>GetRoleInternal</name><argument_list>(<argument><expr><name>PRUint32</name> *<name>aRole</name></expr></argument>)</argument_list></call></expr>;

<expr><name>protected</name>:

  <comment type="line">// nsAccessible</comment>
  <name>virtual</name> <name>void</name> <call><name>CacheChildren</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name>:
  <comment type="line">// Reference on linked map element if any.</comment>
  <name>nsCOMPtr</name>&lt;<name>nsIDOMHTMLMapElement</name>&gt; <name>mMapElement</name></expr>;
}</block></expr>;</expr_stmt>


<comment type="block">/**
 * Accessible for image map areas - must be child of image.
 */</comment>
<expr_stmt><expr><name>class</name> <name>nsHTMLAreaAccessible</name> : <name>public</name> <name>nsHTMLLinkAccessible</name>
<block>{
<expr><name>public</name>:
  <name>using</name> <name>nsAccessible</name>::<name>GetChildAtPoint</name></expr>;

  <expr><call><name>nsHTMLAreaAccessible</name><argument_list>(<argument><expr><name>nsIContent</name> *<name>aContent</name></expr></argument>, <argument><expr><name>nsIWeakReference</name> *<name>aShell</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// nsIAccessible</comment>
  <expr><name>NS_IMETHOD</name> <call><name>GetDescription</name><argument_list>(<argument><expr><name>nsAString</name>&amp; <name>aDescription</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>NS_IMETHOD</name> <call><name>GetBounds</name><argument_list>(<argument><expr><name>PRInt32</name> *<name>x</name></expr></argument>, <argument><expr><name>PRInt32</name> *<name>y</name></expr></argument>, <argument><expr><name>PRInt32</name> *<name>width</name></expr></argument>, <argument><expr><name>PRInt32</name> *<name>height</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// nsAccessible</comment>
  <expr><name>virtual</name> <name>nsresult</name> <call><name>GetNameInternal</name><argument_list>(<argument><expr><name>nsAString</name>&amp; <name>aName</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>virtual</name> <name>nsresult</name> <call><name>GetStateInternal</name><argument_list>(<argument><expr><name>PRUint32</name> *<name>aState</name></expr></argument>, <argument><expr><name>PRUint32</name> *<name>aExtraState</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>virtual</name> <name>nsresult</name> <macro><name>GetChildAtPoint</name><argument_list>(<argument>PRInt32 aX</argument>, <argument>PRInt32 aY</argument>,
                                   <argument>PRBool aDeepestChild</argument>,
                                   <argument>nsIAccessible **aChild</argument>)</argument_list></macro></expr>;

<expr><name>protected</name>:

  <comment type="line">// nsAccessible</comment>
  <name>virtual</name> <name>void</name> <call><name>CacheChildren</name><argument_list>()</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
</unit>
