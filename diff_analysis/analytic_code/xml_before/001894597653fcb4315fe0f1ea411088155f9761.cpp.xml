<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="001894597653fcb4315fe0f1ea411088155f9761.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: sw=4 ts=4 et :
 */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Plugin App.
 *
 * The Initial Developer of the Original Code is
 *   Chris Jones &lt;jones.chris.g@gmail.com&gt;
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozilla/ipc/RPCChannel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozilla/ipc/ProtocolUtils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsTraceRefcnt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPC_ASSERT</name><parameter_list>(<param><type><name>_cond</name></type></param>, <param><type>...</type></param>)</parameter_list></cpp:macro>                                      \
    <cpp:value>do {                                                            \
        if (!(_cond))                                               \
            DebugAbort(__FILE__, __LINE__, #_cond,## __VA_ARGS__);  \
    } while (0)</cpp:value></cpp:define>

<using>using <name><name>mozilla</name>::<name>MutexAutoLock</name></name>;</using>
<using>using <name><name>mozilla</name>::<name>MutexAutoUnlock</name></name>;</using>

<template>template<parameter_list>&lt;&gt;</parameter_list>
<struct>struct <name><name>RunnableMethodTraits</name><argument_list>&lt;<argument><expr><name><name>mozilla</name>::<name>ipc</name>::<name>RPCChannel</name></name></expr></argument>&gt;</argument_list></name>
<block>{<public type="default">
    <function><type><specifier>static</specifier> <name>void</name></type> <name>RetainCallee</name><parameter_list>(<param><decl><type><name><name>mozilla</name>::<name>ipc</name>::<name>RPCChannel</name></name>*</type> <name>obj</name></decl></param>)</parameter_list> <block>{ }</block></function>
    <function><type><specifier>static</specifier> <name>void</name></type> <name>ReleaseCallee</name><parameter_list>(<param><decl><type><name><name>mozilla</name>::<name>ipc</name>::<name>RPCChannel</name></name>*</type> <name>obj</name></decl></param>)</parameter_list> <block>{ }</block></function>
</public>}</block>;</struct></template>


<namespace>namespace
<block>{

<comment type="line">// Async (from the sending side's perspective)</comment>
<class>class <name>BlockChildMessage</name> <super>: <specifier>public</specifier> <name><name>IPC</name>::<name>Message</name></name></super>
<block>{<private type="default">
</private><public>public:
    <enum>enum <block>{ <decl><name>ID</name> <init>= <expr><name>BLOCK_CHILD_MESSAGE_TYPE</name></expr></init></decl> }</block>;</enum>
    <constructor><name>BlockChildMessage</name><parameter_list>()</parameter_list> <member_list>:
        <call><name>Message</name><argument_list>(<argument><expr><name>MSG_ROUTING_NONE</name></expr></argument>, <argument><expr><name>ID</name></expr></argument>, <argument><expr><name><name>IPC</name>::<name>Message</name>::<name>PRIORITY_NORMAL</name></name></expr></argument>)</argument_list></call>
    </member_list><block>{ }</block></constructor>
</public>}</block>;</class>

<comment type="line">// Async</comment>
<class>class <name>UnblockChildMessage</name> <super>: <specifier>public</specifier> <name><name>IPC</name>::<name>Message</name></name></super>
<block>{<private type="default">
</private><public>public:
    <enum>enum <block>{ <decl><name>ID</name> <init>= <expr><name>UNBLOCK_CHILD_MESSAGE_TYPE</name></expr></init></decl> }</block>;</enum>
    <constructor><name>UnblockChildMessage</name><parameter_list>()</parameter_list> <member_list>:
        <call><name>Message</name><argument_list>(<argument><expr><name>MSG_ROUTING_NONE</name></expr></argument>, <argument><expr><name>ID</name></expr></argument>, <argument><expr><name><name>IPC</name>::<name>Message</name>::<name>PRIORITY_NORMAL</name></name></expr></argument>)</argument_list></call>
    </member_list><block>{ }</block></constructor>
</public>}</block>;</class>

}</block></namespace> <comment type="line">// namespace &lt;anon&gt;</comment>


<namespace>namespace <name>mozilla</name> <block>{
<namespace>namespace <name>ipc</name> <block>{

<constructor><name><name>RPCChannel</name>::<name>RPCChannel</name></name><parameter_list>(<param><decl><type><name>RPCListener</name>*</type> <name>aListener</name></decl></param>)</parameter_list>
  <member_list>: <call><name>SyncChannel</name><argument_list>(<argument><expr><name>aListener</name></expr></argument>)</argument_list></call>,
    <call><name>mPending</name><argument_list>()</argument_list></call>,
    <call><name>mStack</name><argument_list>()</argument_list></call>,
    <call><name>mOutOfTurnReplies</name><argument_list>()</argument_list></call>,
    <call><name>mDeferred</name><argument_list>()</argument_list></call>,
    <call><name>mRemoteStackDepthGuess</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>,
    <call><name>mBlockedOnParent</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call>,
    <call><name>mSawRPCOutMsg</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call>
</member_list><block>{
    <expr_stmt><expr><call><name>MOZ_COUNT_CTOR</name><argument_list>(<argument><expr><name>RPCChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>mDequeueOneTask</name> = new <call><name>RefCountedTask</name><argument_list>(<argument><expr><call><name>NewRunnableMethod</name><argument_list>(
                                                 <argument><expr><name>this</name></expr></argument>,
                                                 <argument><expr>&amp;<name><name>RPCChannel</name>::<name>OnMaybeDequeueOne</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name>RPCChannel</name>::~<name>RPCChannel</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>MOZ_COUNT_DTOR</name><argument_list>(<argument><expr><name>RPCChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RPC_ASSERT</name><argument_list>(<argument><expr><call><name><name>mCxxStackFrames</name>.<name>empty</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"mismatched CxxStackFrame ctor/dtors"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<function><type><name>void</name></type>
<name><name>RPCChannel</name>::<name>Clear</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>mDequeueOneTask</name>-&gt;<name>Cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>AsyncChannel</name>::<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>bool</name></type>
<name><name>RPCChannel</name>::<name>EventOccurred</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
    <expr_stmt><expr><call><name>AssertWorkerThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mMutex</name>.<name>AssertCurrentThreadOwns</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RPC_ASSERT</name><argument_list>(<argument><expr><call><name>StackDepth</name><argument_list>()</argument_list></call> &gt; 0</expr></argument>, <argument><expr>"not in wait loop"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr>(!<call><name>Connected</name><argument_list>()</argument_list></call> ||
            !<call><name><name>mPending</name>.<name>empty</name></name><argument_list>()</argument_list></call> ||
            (!<call><name><name>mOutOfTurnReplies</name>.<name>empty</name></name><argument_list>()</argument_list></call> &amp;&amp;
             <call><name><name>mOutOfTurnReplies</name>.<name>find</name></name><argument_list>(<argument><expr><call><name><name>mStack</name>.<name>top</name></name><argument_list>()</argument_list></call>.<call><name>seqno</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
             != <call><name><name>mOutOfTurnReplies</name>.<name>end</name></name><argument_list>()</argument_list></call>))</expr>;</return>
}</block></function>

<function><type><name>bool</name></type>
<name><name>RPCChannel</name>::<name>Send</name></name><parameter_list>(<param><decl><type><name>Message</name>*</type> <name>msg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Message</name></type> <name>copy</name> <init>= <expr>*<name>msg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CxxStackFrame</name></type> <name>f</name><argument_list>(<argument><expr>*<name>this</name></expr></argument>, <argument><expr><name>OUT_MESSAGE</name></expr></argument>, <argument><expr>&amp;<name>copy</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><call><name><name>AsyncChannel</name>::<name>Send</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>bool</name></type>
<name><name>RPCChannel</name>::<name>Send</name></name><parameter_list>(<param><decl><type><name>Message</name>*</type> <name>msg</name></decl></param>, <param><decl><type><name>Message</name>*</type> <name>reply</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Message</name></type> <name>copy</name> <init>= <expr>*<name>msg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CxxStackFrame</name></type> <name>f</name><argument_list>(<argument><expr>*<name>this</name></expr></argument>, <argument><expr><name>OUT_MESSAGE</name></expr></argument>, <argument><expr>&amp;<name>copy</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><call><name><name>SyncChannel</name>::<name>Send</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>bool</name></type>
<name><name>RPCChannel</name>::<name>Call</name></name><parameter_list>(<param><decl><type><name>Message</name>*</type> <name>msg</name></decl></param>, <param><decl><type><name>Message</name>*</type> <name>reply</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>AssertWorkerThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mMutex</name>.<name>AssertNotCurrentThreadOwns</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RPC_ASSERT</name><argument_list>(<argument><expr>!<call><name>ProcessingSyncMessage</name><argument_list>()</argument_list></call></expr></argument>,
               <argument><expr>"violation of sync handler invariant"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RPC_ASSERT</name><argument_list>(<argument><expr><call><name><name>msg</name>-&gt;<name>is_rpc</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"can only Call() RPC messages here"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OS_WIN</name></cpp:ifdef>
    <decl_stmt><decl><type><name>SyncStackFrame</name></type> <name>frame</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>Message</name></type> <name>copy</name> <init>= <expr>*<name>msg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CxxStackFrame</name></type> <name>f</name><argument_list>(<argument><expr>*<name>this</name></expr></argument>, <argument><expr><name>OUT_MESSAGE</name></expr></argument>, <argument><expr>&amp;<name>copy</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <function_decl><type><name>MutexAutoLock</name></type> <name>lock</name><parameter_list>(<param><decl><type><name>mMutex</name></type></decl></param>)</parameter_list>;</function_decl>

    <if>if <condition>(<expr>!<call><name>Connected</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ReportConnectionError</name><argument_list>(<argument><expr>"RPCChannel"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>false</expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>msg</name>-&gt;<name>set_seqno</name></name><argument_list>(<argument><expr><call><name>NextSeqno</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>msg</name>-&gt;<name>set_rpc_remote_stack_depth_guess</name></name><argument_list>(<argument><expr><name>mRemoteStackDepthGuess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>msg</name>-&gt;<name>set_rpc_local_stack_depth</name></name><argument_list>(<argument><expr>1 + <call><name>StackDepth</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mStack</name>.<name>push</name></name><argument_list>(<argument><expr>*<name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SendThroughTransport</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr>1</expr>)</condition> <block>{
        <comment type="line">// if a handler invoked by *Dispatch*() spun a nested event</comment>
        <comment type="line">// loop, and the connection was broken during that loop, we</comment>
        <comment type="line">// might have already processed the OnError event. if so,</comment>
        <comment type="line">// trying another loop iteration will be futile because</comment>
        <comment type="line">// channel state will have been cleared</comment>
        <if>if <condition>(<expr>!<call><name>Connected</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ReportConnectionError</name><argument_list>(<argument><expr>"RPCChannel"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <comment type="line">// now might be the time to process a message deferred because</comment>
        <comment type="line">// of race resolution</comment>
        <expr_stmt><expr><call><name>MaybeProcessDeferredIncall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// here we're waiting for something to happen. see long</comment>
        <comment type="line">// comment about the queue in RPCChannel.h</comment>
        <while>while <condition>(<expr>!<call><name>EventOccurred</name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>bool</name></type> <name>maybeTimedOut</name> <init>= <expr>!<call><name><name>RPCChannel</name>::<name>WaitForNotify</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name>EventOccurred</name><argument_list>()</argument_list></call> ||
                <comment type="line">// we might have received a "subtly deferred" message</comment>
                <comment type="line">// in a nested loop that it's now time to process</comment>
                (!<name>maybeTimedOut</name> &amp;&amp;
                 (!<call><name><name>mDeferred</name>.<name>empty</name></name><argument_list>()</argument_list></call> || !<call><name><name>mOutOfTurnReplies</name>.<name>empty</name></name><argument_list>()</argument_list></call>))</expr>)</condition><then>
                <break>break;</break></then></if>

            <if>if <condition>(<expr><name>maybeTimedOut</name> &amp;&amp; !<call><name>ShouldContinueFromTimeout</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return <expr>false</expr>;</return></then></if>
        }</block></while>

        <if>if <condition>(<expr>!<call><name>Connected</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ReportConnectionError</name><argument_list>(<argument><expr>"RPCChannel"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>Message</name></type> <name>recvd</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>MessageMap</name>::<name>iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>mOutOfTurnReplies</name>.<name>empty</name></name><argument_list>()</argument_list></call> &amp;&amp;
            ((<name>it</name> = <call><name><name>mOutOfTurnReplies</name>.<name>find</name></name><argument_list>(<argument><expr><call><name><name>mStack</name>.<name>top</name></name><argument_list>()</argument_list></call>.<call><name>seqno</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>) !=
            <call><name><name>mOutOfTurnReplies</name>.<name>end</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>recvd</name> = <name><name>it</name>-&gt;<name>second</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mOutOfTurnReplies</name>.<name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr>!<call><name><name>mPending</name>.<name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>recvd</name> = <call><name><name>mPending</name>.<name>front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mPending</name>.<name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <comment type="line">// because of subtleties with nested event loops, it's</comment>
            <comment type="line">// possible that we got here and nothing happened.  or, we</comment>
            <comment type="line">// might have a deferred in-call that needs to be</comment>
            <comment type="line">// processed.  either way, we won't break the inner while</comment>
            <comment type="line">// loop again until something new happens.</comment>
            <continue>continue;</continue>
        }</block></else></if></else></if>

        <if>if <condition>(<expr>!<call><name><name>recvd</name>.<name>is_sync</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>recvd</name>.<name>is_rpc</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <function_decl><type><name>MutexAutoUnlock</name></type> <name>unlock</name><parameter_list>(<param><decl><type><name>mMutex</name></type></decl></param>)</parameter_list>;</function_decl>

            <decl_stmt><decl><type><name>CxxStackFrame</name></type> <name>f</name><argument_list>(<argument><expr>*<name>this</name></expr></argument>, <argument><expr><name>IN_MESSAGE</name></expr></argument>, <argument><expr>&amp;<name>recvd</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>AsyncChannel</name>::<name>OnDispatchMessage</name></name><argument_list>(<argument><expr><name>recvd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue>continue;</continue>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>recvd</name>.<name>is_sync</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>RPC_ASSERT</name><argument_list>(<argument><expr><call><name><name>mPending</name>.<name>empty</name></name><argument_list>()</argument_list></call></expr></argument>,
                       <argument><expr>"other side should have been blocked"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <function_decl><type><name>MutexAutoUnlock</name></type> <name>unlock</name><parameter_list>(<param><decl><type><name>mMutex</name></type></decl></param>)</parameter_list>;</function_decl>

            <decl_stmt><decl><type><name>CxxStackFrame</name></type> <name>f</name><argument_list>(<argument><expr>*<name>this</name></expr></argument>, <argument><expr><name>IN_MESSAGE</name></expr></argument>, <argument><expr>&amp;<name>recvd</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>SyncChannel</name>::<name>OnDispatchMessage</name></name><argument_list>(<argument><expr><name>recvd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue>continue;</continue>
        }</block></then></if>

        <expr_stmt><expr><call><name>RPC_ASSERT</name><argument_list>(<argument><expr><call><name><name>recvd</name>.<name>is_rpc</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"wtf???"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>recvd</name>.<name>is_reply</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>RPC_ASSERT</name><argument_list>(<argument><expr>0 &lt; <call><name><name>mStack</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"invalid RPC stack"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>Message</name>&amp;</type> <name>outcall</name> <init>= <expr><call><name><name>mStack</name>.<name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// in the parent, seqno's increase from 0, and in the</comment>
            <comment type="line">// child, they decrease from 0</comment>
            <if>if <condition>(<expr>(!<name>mChild</name> &amp;&amp; <call><name><name>recvd</name>.<name>seqno</name></name><argument_list>()</argument_list></call> &lt; <call><name><name>outcall</name>.<name>seqno</name></name><argument_list>()</argument_list></call>) ||
                (<name>mChild</name> &amp;&amp; <call><name><name>recvd</name>.<name>seqno</name></name><argument_list>()</argument_list></call> &gt; <call><name><name>outcall</name>.<name>seqno</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>mOutOfTurnReplies</name><index>[<expr><call><name><name>recvd</name>.<name>seqno</name></name><argument_list>()</argument_list></call></expr>]</index></name> = <name>recvd</name></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>

            <comment type="line">// FIXME/cjones: handle error</comment>
            <expr_stmt><expr><call><name>RPC_ASSERT</name><argument_list>(
                <argument><expr><call><name><name>recvd</name>.<name>is_reply_error</name></name><argument_list>()</argument_list></call> ||
                (<call><name><name>recvd</name>.<name>type</name></name><argument_list>()</argument_list></call> == (<call><name><name>outcall</name>.<name>type</name></name><argument_list>()</argument_list></call>+1) &amp;&amp;
                 <call><name><name>recvd</name>.<name>seqno</name></name><argument_list>()</argument_list></call> == <call><name><name>outcall</name>.<name>seqno</name></name><argument_list>()</argument_list></call>)</expr></argument>,
                <argument><expr>"somebody's misbehavin'"</expr></argument>, <argument><expr>"rpc"</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// we received a reply to our most recent outstanding</comment>
            <comment type="line">// call.  pop this frame and return the reply</comment>
            <expr_stmt><expr><call><name><name>mStack</name>.<name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>bool</name></type> <name>isError</name> <init>= <expr><call><name><name>recvd</name>.<name>is_reply_error</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name>isError</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>reply</name> = <name>recvd</name></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr>0 == <call><name>StackDepth</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>RPC_ASSERT</name><argument_list>(
                    <argument><expr><call><name><name>mOutOfTurnReplies</name>.<name>empty</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr>"still have pending replies with no pending out-calls"</expr></argument>,
                    <argument><expr>"rpc"</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// finished with this RPC stack frame</comment>
            <return>return <expr>!<name>isError</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// in-call.  process in a new stack frame.</comment>

        <comment type="line">// "snapshot" the current stack depth while we own the Mutex</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>stackDepth</name> <init>= <expr><call><name>StackDepth</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <block>{
            <function_decl><type><name>MutexAutoUnlock</name></type> <name>unlock</name><parameter_list>(<param><decl><type><name>mMutex</name></type></decl></param>)</parameter_list>;</function_decl>
            <comment type="line">// someone called in to us from the other side.  handle the call</comment>
            <decl_stmt><decl><type><name>CxxStackFrame</name></type> <name>f</name><argument_list>(<argument><expr>*<name>this</name></expr></argument>, <argument><expr><name>IN_MESSAGE</name></expr></argument>, <argument><expr>&amp;<name>recvd</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>Incall</name><argument_list>(<argument><expr><name>recvd</name></expr></argument>, <argument><expr><name>stackDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// FIXME/cjones: error handling</comment>
        }</block>
    }</block></while>

    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><name>bool</name></type>
<name><name>RPCChannel</name>::<name>MaybeProcessDeferredIncall</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>AssertWorkerThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mMutex</name>.<name>AssertCurrentThreadOwns</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>mDeferred</name>.<name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>

    <decl_stmt><decl><type><name>size_t</name></type> <name>stackDepth</name> <init>= <expr><call><name>StackDepth</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// the other side can only *under*-estimate our actual stack depth</comment>
    <expr_stmt><expr><call><name>RPC_ASSERT</name><argument_list>(<argument><expr><call><name><name>mDeferred</name>.<name>top</name></name><argument_list>()</argument_list></call>.<call><name>rpc_remote_stack_depth_guess</name><argument_list>()</argument_list></call> &lt;= <name>stackDepth</name></expr></argument>,
               <argument><expr>"fatal logic error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>mDeferred</name>.<name>top</name></name><argument_list>()</argument_list></call>.<call><name>rpc_remote_stack_depth_guess</name><argument_list>()</argument_list></call> &lt; <name>stackDepth</name></expr>)</condition><then>
        <return>return <expr>false</expr>;</return></then></if>

    <comment type="line">// time to process this message</comment>
    <decl_stmt><decl><type><name>Message</name></type> <name>call</name> <init>= <expr><call><name><name>mDeferred</name>.<name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mDeferred</name>.<name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// fix up fudge factor we added to account for race</comment>
    <expr_stmt><expr><call><name>RPC_ASSERT</name><argument_list>(<argument><expr>0 &lt; <name>mRemoteStackDepthGuess</name></expr></argument>, <argument><expr>"fatal logic error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>--<name>mRemoteStackDepthGuess</name></expr>;</expr_stmt>

    <function_decl><type><name>MutexAutoUnlock</name></type> <name>unlock</name><parameter_list>(<param><decl><type><name>mMutex</name></type></decl></param>)</parameter_list>;</function_decl>

    <if>if <condition>(<expr><call><name>LoggingEnabled</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"  (processing deferred in-call)\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <decl_stmt><decl><type><name>CxxStackFrame</name></type> <name>f</name><argument_list>(<argument><expr>*<name>this</name></expr></argument>, <argument><expr><name>IN_MESSAGE</name></expr></argument>, <argument><expr>&amp;<name>call</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>Incall</name><argument_list>(<argument><expr><name>call</name></expr></argument>, <argument><expr><name>stackDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>RPCChannel</name>::<name>EnqueuePendingMessages</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>AssertWorkerThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mMutex</name>.<name>AssertCurrentThreadOwns</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <for>for (<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>mDeferred</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
        <expr_stmt><expr><call><name><name>mWorkerLoop</name>-&gt;<name>PostTask</name></name><argument_list>(
            <argument><expr><name>FROM_HERE</name></expr></argument>,
            <argument><expr>new <call><name>DequeueTask</name><argument_list>(<argument><expr><name>mDequeueOneTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

    <comment type="line">// XXX performance tuning knob: could process all or k pending</comment>
    <comment type="line">// messages here, rather than enqueuing for later processing</comment>

    <for>for (<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>mPending</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
        <expr_stmt><expr><call><name><name>mWorkerLoop</name>-&gt;<name>PostTask</name></name><argument_list>(
            <argument><expr><name>FROM_HERE</name></expr></argument>,
            <argument><expr>new <call><name>DequeueTask</name><argument_list>(<argument><expr><name>mDequeueOneTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
}</block></function>

<function><type><name>void</name></type>
<name><name>RPCChannel</name>::<name>FlushPendingRPCQueue</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>AssertWorkerThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mMutex</name>.<name>AssertNotCurrentThreadOwns</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <block>{
        <function_decl><type><name>MutexAutoLock</name></type> <name>lock</name><parameter_list>(<param><decl><type><name>mMutex</name></type></decl></param>)</parameter_list>;</function_decl>

        <if>if <condition>(<expr><call><name><name>mDeferred</name>.<name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>mPending</name>.<name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return;</return></then></if>

            <decl_stmt><decl><type><specifier>const</specifier> <name>Message</name>&amp;</type> <name>last</name> <init>= <expr><call><name><name>mPending</name>.<name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>last</name>.<name>is_rpc</name></name><argument_list>()</argument_list></call> || <call><name><name>last</name>.<name>is_reply</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return;</return></then></if>
        }</block></then></if>
    }</block>

    <while>while <condition>(<expr><call><name>OnMaybeDequeueOne</name><argument_list>()</argument_list></call></expr>)</condition><empty_stmt>;</empty_stmt></while>
}</block></function>

<function><type><name>bool</name></type>
<name><name>RPCChannel</name>::<name>OnMaybeDequeueOne</name></name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">// XXX performance tuning knob: could process all or k pending</comment>
    <comment type="line">// messages here</comment>

    <expr_stmt><expr><call><name>AssertWorkerThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mMutex</name>.<name>AssertNotCurrentThreadOwns</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Message</name></type> <name>recvd</name></decl>;</decl_stmt>
    <block>{
        <function_decl><type><name>MutexAutoLock</name></type> <name>lock</name><parameter_list>(<param><decl><type><name>mMutex</name></type></decl></param>)</parameter_list>;</function_decl>

        <if>if <condition>(<expr>!<call><name>Connected</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ReportConnectionError</name><argument_list>(<argument><expr>"RPCChannel"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name><name>mDeferred</name>.<name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr><call><name>MaybeProcessDeferredIncall</name><argument_list>()</argument_list></call></expr>;</return></then></if>

        <if>if <condition>(<expr><call><name><name>mPending</name>.<name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <return>return <expr>false</expr>;</return></then></if>

        <expr_stmt><expr><name>recvd</name> = <call><name><name>mPending</name>.<name>front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mPending</name>.<name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block>

    <if>if <condition>(<expr><call><name>IsOnCxxStack</name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>recvd</name>.<name>is_rpc</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>recvd</name>.<name>is_reply</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <comment type="line">// We probably just received a reply in a nested loop for an</comment>
        <comment type="line">// RPC call sent before entering that loop.</comment>
        <expr_stmt><expr><name><name>mOutOfTurnReplies</name><index>[<expr><call><name><name>recvd</name>.<name>seqno</name></name><argument_list>()</argument_list></call></expr>]</index></name> = <name>recvd</name></expr>;</expr_stmt>
        <return>return <expr>false</expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>CxxStackFrame</name></type> <name>f</name><argument_list>(<argument><expr>*<name>this</name></expr></argument>, <argument><expr><name>IN_MESSAGE</name></expr></argument>, <argument><expr>&amp;<name>recvd</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>recvd</name>.<name>is_rpc</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>Incall</name><argument_list>(<argument><expr><name>recvd</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name><name>recvd</name>.<name>is_sync</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>SyncChannel</name>::<name>OnDispatchMessage</name></name><argument_list>(<argument><expr><name>recvd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><call><name><name>AsyncChannel</name>::<name>OnDispatchMessage</name></name><argument_list>(<argument><expr><name>recvd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>

    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>RPCChannel</name>::<name>Incall</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>Message</name>&amp;</type> <name>call</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>stackDepth</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>AssertWorkerThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mMutex</name>.<name>AssertNotCurrentThreadOwns</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RPC_ASSERT</name><argument_list>(<argument><expr><call><name><name>call</name>.<name>is_rpc</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>call</name>.<name>is_reply</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"wrong message type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Race detection: see the long comment near</comment>
    <comment type="line">// mRemoteStackDepthGuess in RPCChannel.h.  "Remote" stack depth</comment>
    <comment type="line">// means our side, and "local" means other side.</comment>
    <if>if <condition>(<expr><call><name><name>call</name>.<name>rpc_remote_stack_depth_guess</name></name><argument_list>()</argument_list></call> != <name>stackDepth</name></expr>)</condition><then> <block>{
        <comment type="line">// RPC in-calls have raced.</comment>
        <comment type="line">// the "winner", if there is one, gets to defer processing of</comment>
        <comment type="line">// the other side's in-call</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>defer</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>winner</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><call><name>Listener</name><argument_list>()</argument_list></call>-&gt;<call><name>MediateRPCRace</name><argument_list>(<argument><expr><name>mChild</name> ? <name>call</name> : <call><name><name>mStack</name>.<name>top</name></name><argument_list>()</argument_list></call></expr></argument>,
                                           <argument><expr><name>mChild</name> ? <call><name><name>mStack</name>.<name>top</name></name><argument_list>()</argument_list></call> : <name>call</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
        <case>case <expr><name>RRPChildWins</name></expr>:
            <expr_stmt><expr><name>winner</name> = "child"</expr>;</expr_stmt>
            <expr_stmt><expr><name>defer</name> = <name>mChild</name></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>RRPParentWins</name></expr>:
            <expr_stmt><expr><name>winner</name> = "parent"</expr>;</expr_stmt>
            <expr_stmt><expr><name>defer</name> = !<name>mChild</name></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>RRPError</name></expr>:
            <expr_stmt><expr><call><name>NS_RUNTIMEABORT</name><argument_list>(<argument><expr>"NYI: 'Error' RPC race policy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </case><default>default:
            <expr_stmt><expr><call><name>NS_RUNTIMEABORT</name><argument_list>(<argument><expr>"not reached"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </default>}</block></switch>

        <if>if <condition>(<expr><call><name>LoggingEnabled</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"  (%s won, so we're%sdeferring)\n"</expr></argument>,
                    <argument><expr><name>winner</name></expr></argument>, <argument><expr><name>defer</name> ? " " : " not "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>defer</name></expr>)</condition><then> <block>{
            <comment type="line">// we now know the other side's stack has one more frame</comment>
            <comment type="line">// than we thought</comment>
            <expr_stmt><expr>++<name>mRemoteStackDepthGuess</name></expr>;</expr_stmt> <comment type="line">// decremented in MaybeProcessDeferred()</comment>
            <expr_stmt><expr><call><name><name>mDeferred</name>.<name>push</name></name><argument_list>(<argument><expr><name>call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// we "lost" and need to process the other side's in-call.</comment>
        <comment type="line">// don't need to fix up the mRemoteStackDepthGuess here,</comment>
        <comment type="line">// because we're just about to increment it in DispatchCall(),</comment>
        <comment type="line">// which will make it correct again</comment>
    }</block></then></if>

    <expr_stmt><expr><call><name>DispatchIncall</name><argument_list>(<argument><expr><name>call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>RPCChannel</name>::<name>DispatchIncall</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>Message</name>&amp;</type> <name>call</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>AssertWorkerThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mMutex</name>.<name>AssertNotCurrentThreadOwns</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RPC_ASSERT</name><argument_list>(<argument><expr><call><name><name>call</name>.<name>is_rpc</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>call</name>.<name>is_reply</name></name><argument_list>()</argument_list></call></expr></argument>,
               <argument><expr>"wrong message type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Message</name>*</type> <name>reply</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr>++<name>mRemoteStackDepthGuess</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Result</name></type> <name>rv</name> <init>= <expr><call><name>Listener</name><argument_list>()</argument_list></call>-&gt;<call><name>OnCallReceived</name><argument_list>(<argument><expr><name>call</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr>--<name>mRemoteStackDepthGuess</name></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>MaybeHandleError</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr>"RPCChannel"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>delete <name>reply</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>reply</name> = new <call><name>Message</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>reply</name>-&gt;<name>set_rpc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>reply</name>-&gt;<name>set_reply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>reply</name>-&gt;<name>set_reply_error</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>reply</name>-&gt;<name>set_seqno</name></name><argument_list>(<argument><expr><call><name><name>call</name>.<name>seqno</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block>{
        <function_decl><type><name>MutexAutoLock</name></type> <name>lock</name><parameter_list>(<param><decl><type><name>mMutex</name></type></decl></param>)</parameter_list>;</function_decl>
        <if>if <condition>(<expr><name>ChannelConnected</name> == <name>mChannelState</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SendThroughTransport</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block>
}</block></function>

<function><type><name>bool</name></type>
<name><name>RPCChannel</name>::<name>BlockChild</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>AssertWorkerThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>mChild</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>NS_RUNTIMEABORT</name><argument_list>(<argument><expr>"child tried to block parent"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>SendSpecialMessage</name><argument_list>(<argument><expr>new <call><name>BlockChildMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><name>bool</name></type>
<name><name>RPCChannel</name>::<name>UnblockChild</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>AssertWorkerThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>mChild</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>NS_RUNTIMEABORT</name><argument_list>(<argument><expr>"child tried to unblock parent"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>SendSpecialMessage</name><argument_list>(<argument><expr>new <call><name>UnblockChildMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>true</expr>;</return>
}</block></function>

<function><type><name>bool</name></type>
<name><name>RPCChannel</name>::<name>OnSpecialMessage</name></name><parameter_list>(<param><decl><type><name>uint16</name></type> <name>id</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>Message</name>&amp;</type> <name>msg</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>AssertWorkerThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{
    <case>case <expr><name>BLOCK_CHILD_MESSAGE_TYPE</name></expr>:
        <expr_stmt><expr><call><name>BlockOnParent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>

    </case><case>case <expr><name>UNBLOCK_CHILD_MESSAGE_TYPE</name></expr>:
        <expr_stmt><expr><call><name>UnblockFromParent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>

    </case><default>default:
        <return>return <expr><call><name><name>SyncChannel</name>::<name>OnSpecialMessage</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
    </default>}</block></switch>
}</block></function>

<function><type><name>void</name></type>
<name><name>RPCChannel</name>::<name>BlockOnParent</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>AssertWorkerThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name>mChild</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>NS_RUNTIMEABORT</name><argument_list>(<argument><expr>"child tried to block parent"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <function_decl><type><name>MutexAutoLock</name></type> <name>lock</name><parameter_list>(<param><decl><type><name>mMutex</name></type></decl></param>)</parameter_list>;</function_decl>

    <if>if <condition>(<expr><name>mBlockedOnParent</name> || <call><name>AwaitingSyncReply</name><argument_list>()</argument_list></call> || 0 &lt; <call><name>StackDepth</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>NS_RUNTIMEABORT</name><argument_list>(<argument><expr>"attempt to block child when it's already blocked"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name>mBlockedOnParent</name> = true</expr>;</expr_stmt>
    <do>do <block>{
        <comment type="line">// XXX this dispatch loop shares some similarities with the</comment>
        <comment type="line">// one in Call(), but the logic is simpler and different</comment>
        <comment type="line">// enough IMHO to warrant its own dispatch loop</comment>
        <while>while <condition>(<expr><call><name>Connected</name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>mPending</name>.<name>empty</name></name><argument_list>()</argument_list></call> &amp;&amp; <name>mBlockedOnParent</name></expr>)</condition> <block>{
            <expr_stmt><expr><call><name>WaitForNotify</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <if>if <condition>(<expr>!<call><name>Connected</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>mBlockedOnParent</name> = false</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ReportConnectionError</name><argument_list>(<argument><expr>"RPCChannel"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name><name>mPending</name>.<name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Message</name></type> <name>recvd</name> <init>= <expr><call><name><name>mPending</name>.<name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mPending</name>.<name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <function_decl><type><name>MutexAutoUnlock</name></type> <name>unlock</name><parameter_list>(<param><decl><type><name>mMutex</name></type></decl></param>)</parameter_list>;</function_decl>

            <decl_stmt><decl><type><name>CxxStackFrame</name></type> <name>f</name><argument_list>(<argument><expr>*<name>this</name></expr></argument>, <argument><expr><name>IN_MESSAGE</name></expr></argument>, <argument><expr>&amp;<name>recvd</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>recvd</name>.<name>is_rpc</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// stack depth must be 0 here</comment>
                <expr_stmt><expr><call><name>Incall</name><argument_list>(<argument><expr><name>recvd</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name><name>recvd</name>.<name>is_sync</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>SyncChannel</name>::<name>OnDispatchMessage</name></name><argument_list>(<argument><expr><name>recvd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>AsyncChannel</name>::<name>OnDispatchMessage</name></name><argument_list>(<argument><expr><name>recvd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></then></if>
    }</block> while <condition>(<expr><name>mBlockedOnParent</name></expr>)</condition>;</do>

    <expr_stmt><expr><call><name>EnqueuePendingMessages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>RPCChannel</name>::<name>UnblockFromParent</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>AssertWorkerThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name>mChild</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>NS_RUNTIMEABORT</name><argument_list>(<argument><expr>"child tried to block parent"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <function_decl><type><name>MutexAutoLock</name></type> <name>lock</name><parameter_list>(<param><decl><type><name>mMutex</name></type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>mBlockedOnParent</name> = false</expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>RPCChannel</name>::<name>ExitedCxxStack</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>Listener</name><argument_list>()</argument_list></call>-&gt;<call><name>OnExitedCxxStack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>mSawRPCOutMsg</name></expr>)</condition><then> <block>{
        <function_decl><type><name>MutexAutoLock</name></type> <name>lock</name><parameter_list>(<param><decl><type><name>mMutex</name></type></decl></param>)</parameter_list>;</function_decl>
        <comment type="line">// see long comment in OnMaybeDequeueOne()</comment>
        <expr_stmt><expr><call><name>EnqueuePendingMessages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mSawRPCOutMsg</name> = false</expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>RPCChannel</name>::<name>DebugAbort</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>line</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>cond</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>why</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>type</name></decl></param>, <param><decl><type><name>bool</name></type> <name>reply</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
            <argument><expr>"###!!! [RPCChannel][%s][%s:%d] "
            "Assertion (%s) failed.  %s (triggered by %s%s)\n"</expr></argument>,
            <argument><expr><name>mChild</name> ? "Child" : "Parent"</expr></argument>,
            <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>,
            <argument><expr><name>why</name></expr></argument>,
            <argument><expr><name>type</name></expr></argument>, <argument><expr><name>reply</name> ? "reply" : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// technically we need the mutex for this, but we're dying anyway</comment>
    <expr_stmt><expr><call><name>DumpRPCStack</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"  "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"  remote RPC stack guess: %lu\n"</expr></argument>,
            <argument><expr><name>mRemoteStackDepthGuess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"  deferred stack size: %lu\n"</expr></argument>,
            <argument><expr><call><name><name>mDeferred</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"  out-of-turn RPC replies stack size: %lu\n"</expr></argument>,
            <argument><expr><call><name><name>mOutOfTurnReplies</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"  Pending queue size: %lu, front to back:\n"</expr></argument>,
            <argument><expr><call><name><name>mPending</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>MessageQueue</name></type> <name>pending</name> <init>= <expr><name>mPending</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr>!<call><name><name>pending</name>.<name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"    [ %s%s ]\n"</expr></argument>,
                <argument><expr><call><name><name>pending</name>.<name>front</name></name><argument_list>()</argument_list></call>.<call><name>is_rpc</name><argument_list>()</argument_list></call> ? "rpc" :
                (<call><name><name>pending</name>.<name>front</name></name><argument_list>()</argument_list></call>.<call><name>is_sync</name><argument_list>()</argument_list></call> ? "sync" : "async")</expr></argument>,
                <argument><expr><call><name><name>pending</name>.<name>front</name></name><argument_list>()</argument_list></call>.<call><name>is_reply</name><argument_list>()</argument_list></call> ? "reply" : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pending</name>.<name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <expr_stmt><expr><call><name>NS_RUNTIMEABORT</name><argument_list>(<argument><expr><name>why</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>RPCChannel</name>::<name>DumpRPCStack</name></name><parameter_list>(<param><decl><type><name>FILE</name>*</type> <name>outfile</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>* <specifier>const</specifier></type> <name>pfx</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
    <expr_stmt><expr><call><name>NS_WARN_IF_FALSE</name><argument_list>(<argument><expr><call><name><name>MessageLoop</name>::<name>current</name></name><argument_list>()</argument_list></call> != <name>mWorkerLoop</name></expr></argument>,
                     <argument><expr>"The worker thread had better be paused in a debugger!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name>outfile</name></expr>)</condition><then>
        <expr_stmt><expr><name>outfile</name> = <name>stdout</name></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr>"%sRPCChannel 'backtrace':\n"</expr></argument>, <argument><expr><name>pfx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// print a python-style backtrace, first frame to last</comment>
    <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>mCxxStackFrames</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <decl_stmt><decl><type><name>int32</name></type> <name>id</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>dir</name></decl>, *<decl><type ref="prev"/><name>sems</name></decl>, *<decl><type ref="prev"/><name>name</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>mCxxStackFrames</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>Describe</name><argument_list>(<argument><expr>&amp;<name>id</name></expr></argument>, <argument><expr>&amp;<name>dir</name></expr></argument>, <argument><expr>&amp;<name>sems</name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr>"%s[(%u) %s %s %s(actor=%d) ]\n"</expr></argument>, <argument><expr><name>pfx</name></expr></argument>,
                <argument><expr><name>i</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>sems</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<comment type="line">//</comment>
<comment type="line">// The methods below run in the context of the IO thread, and can proxy</comment>
<comment type="line">// back to the methods above</comment>
<comment type="line">//</comment>

<function><type><name>void</name></type>
<name><name>RPCChannel</name>::<name>OnMessageReceived</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>Message</name>&amp;</type> <name>msg</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>AssertIOThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>MutexAutoLock</name></type> <name>lock</name><parameter_list>(<param><decl><type><name>mMutex</name></type></decl></param>)</parameter_list>;</function_decl>

    <if>if <condition>(<expr><call><name>MaybeInterceptSpecialIOMessage</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return;</return></then></if>

    <comment type="line">// regardless of the RPC stack, if we're awaiting a sync reply, we</comment>
    <comment type="line">// know that it needs to be immediately handled to unblock us.</comment>
    <if>if <condition>(<expr><call><name>AwaitingSyncReply</name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>msg</name>.<name>is_sync</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <comment type="line">// wake up worker thread waiting at SyncChannel::Send</comment>
        <expr_stmt><expr><name>mRecvd</name> = <name>msg</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NotifyWorkerThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>mPending</name>.<name>push</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>0 == <call><name>StackDepth</name><argument_list>()</argument_list></call> &amp;&amp; !<name>mBlockedOnParent</name></expr>)</condition><then> <block>{
        <comment type="line">// the worker thread might be idle, make sure it wakes up</comment>
        <expr_stmt><expr><call><name><name>mWorkerLoop</name>-&gt;<name>PostTask</name></name><argument_list>(<argument><expr><name>FROM_HERE</name></expr></argument>, <argument><expr>new <call><name>DequeueTask</name><argument_list>(<argument><expr><name>mDequeueOneTask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>AwaitingSyncReply</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>NotifyWorkerThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if></else></if>
}</block></function>


<function><type><name>void</name></type>
<name><name>RPCChannel</name>::<name>OnChannelError</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>AssertIOThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>MutexAutoLock</name></type> <name>lock</name><parameter_list>(<param><decl><type><name>mMutex</name></type></decl></param>)</parameter_list>;</function_decl>

    <if>if <condition>(<expr><name>ChannelClosing</name> != <name>mChannelState</name></expr>)</condition><then>
        <expr_stmt><expr><name>mChannelState</name> = <name>ChannelError</name></expr>;</expr_stmt></then></if>

    <comment type="line">// skip SyncChannel::OnError(); we subsume its duties</comment>
    <if>if <condition>(<expr><call><name>AwaitingSyncReply</name><argument_list>()</argument_list></call> || 0 &lt; <call><name>StackDepth</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>NotifyWorkerThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><call><name>PostErrorNotifyTask</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

}</block></namespace> <comment type="line">// namespace ipc</comment>
}</block></namespace> <comment type="line">// namespace mozilla</comment>

</unit>
