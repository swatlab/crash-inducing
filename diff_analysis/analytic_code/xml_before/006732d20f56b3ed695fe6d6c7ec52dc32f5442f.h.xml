<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="006732d20f56b3ed695fe6d6c7ec52dc32f5442f.h"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla SVG project.
 *
 * The Initial Developer of the Original Code is
 * Crocodile Clips Ltd..
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Alex Fritze &lt;alex.fritze@crocodile-clips.com&gt; (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NS_SVGPOINTLIST_H__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NS_SVGPOINTLIST_H__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsSVGValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISVGValueObserver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsWeakReference.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMSVGPointList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsVoidArray.h"</cpp:file></cpp:include>


<expr_stmt><expr><name>class</name> <name>nsSVGPointList</name> : <name>public</name> <name>nsSVGValue</name></expr>,
                       <expr><name>public</name> <name>nsIDOMSVGPointList</name></expr>,
                       <expr><name>public</name> <name>nsISVGValueObserver</name>
<block>{
<expr><name>public</name>:
  static <name>nsresult</name> <call><name>Create</name><argument_list>(<argument><expr>const <name>nsAString</name>&amp; <name>aValue</name></expr></argument>, <argument><expr><name>nsISVGValue</name>** <name>aResult</name></expr></argument>)</argument_list></call></expr>;
  <expr>static <name>nsresult</name> <call><name>Create</name><argument_list>(<argument><expr><name>nsIDOMSVGPointList</name>** <name>aResult</name></expr></argument>)</argument_list></call></expr>;
  
<expr><name>protected</name>:
  <call><name>nsSVGPointList</name><argument_list>()</argument_list></call></expr>;
  <expr><name>virtual</name> ~<call><name>nsSVGPointList</name><argument_list>()</argument_list></call></expr>;
  
<expr><name>public</name>:
  <comment type="line">// nsISupports interface:</comment>
  <name>NS_DECL_ISUPPORTS</name>

  <comment type="line">// nsIDOMSVGPointList interface:</comment>
  <name>NS_DECL_NSIDOMSVGPOINTLIST</name>
  
  <comment type="line">// remainder of nsISVGValue interface:</comment>
  <name>NS_IMETHOD</name> <call><name>SetValueString</name><argument_list>(<argument><expr>const <name>nsAString</name>&amp; <name>aValue</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>NS_IMETHOD</name> <call><name>GetValueString</name><argument_list>(<argument><expr><name>nsAString</name>&amp; <name>aValue</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// nsISVGValueObserver</comment>
  <expr><name>NS_IMETHOD</name> <macro><name>WillModifySVGObservable</name><argument_list>(<argument>nsISVGValue* observable</argument>,
                                     <argument>modificationType aModType</argument>)</argument_list></macro></expr>;
  <expr><name>NS_IMETHOD</name> <macro><name>DidModifySVGObservable</name> <argument_list>(<argument>nsISVGValue* observable</argument>,
                                     <argument>modificationType aModType</argument>)</argument_list></macro></expr>;
  
  <comment type="line">// nsISupportsWeakReference</comment>
  <comment type="line">// implementation inherited from nsSupportsWeakReference</comment>

  
  <comment type="line">// other methods:</comment>
  <expr><name>nsIDOMSVGPoint</name>* <macro><name>ElementAt</name><argument_list>(<argument>PRInt32 index</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>AppendElement</name><argument_list>(<argument><expr><name>nsIDOMSVGPoint</name>* <name>aElement</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>RemoveElementAt</name><argument_list>(<argument>PRInt32 index</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>InsertElementAt</name><argument_list>(<argument>nsIDOMSVGPoint* aElement</argument>, <argument>PRInt32 index</argument>)</argument_list></macro></expr>;
  
<expr><name>protected</name>:
  <name>void</name> <call><name>ReleasePoints</name><argument_list>()</argument_list></call></expr>;
  
  <expr><name>nsAutoVoidArray</name> <name>mPoints</name></expr>;
}</block></expr>;</expr_stmt>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//__NS_SVGPOINTLIST_H__</comment>
</unit>
