<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="007fcabab709604df64a3d466095030f07001027.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* vim: set ts=2 sw=2 et tw=80: */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Mozilla Japan.
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Masayuki Nakano &lt;masayuki@d-toybox.com&gt;
 *   Ningjie Chen &lt;chenn@email.uc.edu&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIMEStateManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIWidget.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIViewManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIViewObserver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPresShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISupports.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPIDOMWindow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIInterfaceRequestorUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIEditorDocShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIContent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPresContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMWindow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsINode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFrame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsRange.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMRange.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISelection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISelectionPrivate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISelectionListener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISelectionController.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIMutationObserver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentEventHandler.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/******************************************************************/</comment>
<comment type="block">/* nsIMEStateManager                                              */</comment>
<comment type="block" format="doxygen">/******************************************************************/</comment>

<decl_stmt><decl><type><name>nsIContent</name>*</type>    <name><name>nsIMEStateManager</name>::<name>sContent</name></name>      <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nsPresContext</name>*</type> <name><name>nsIMEStateManager</name>::<name>sPresContext</name></name>  <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PRBool</name></type>         <name><name>nsIMEStateManager</name>::<name>sInstalledMenuKeyboardListener</name></name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nsTextStateManager</name>*</type> <name><name>nsIMEStateManager</name>::<name>sTextStateObserver</name></name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

<function><type><name>nsresult</name></type>
<name><name>nsIMEStateManager</name>::<name>OnDestroyPresContext</name></name><parameter_list>(<param><decl><type><name>nsPresContext</name>*</type> <name>aPresContext</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aPresContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>aPresContext</name> != <name>sPresContext</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIWidget</name></expr></argument>&gt;</argument_list></name></type> <name>widget</name> <init>= <expr><call><name>GetWidget</name><argument_list>(<argument><expr><name>sPresContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>widget</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>newState</name> <init>= <expr><call><name>GetNewIMEState</name><argument_list>(<argument><expr><name>sPresContext</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SetIMEState</name><argument_list>(<argument><expr><name>newState</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><name>sContent</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>sPresContext</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>OnTextStateBlur</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsIMEStateManager</name>::<name>OnRemoveContent</name></name><parameter_list>(<param><decl><type><name>nsPresContext</name>*</type> <name>aPresContext</name></decl></param>,
                                   <param><decl><type><name>nsIContent</name>*</type> <name>aContent</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aPresContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>sPresContext</name> || !<name>sContent</name> ||
      <name>aPresContext</name> != <name>sPresContext</name> ||
      <name>aContent</name> != <name>sContent</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <comment type="line">// Current IME transaction should commit</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIWidget</name></expr></argument>&gt;</argument_list></name></type> <name>widget</name> <init>= <expr><call><name>GetWidget</name><argument_list>(<argument><expr><name>sPresContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>widget</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>widget</name>-&gt;<name>CancelIMEComposition</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>widget</name>-&gt;<name>ResetInputState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>newState</name> <init>= <expr><call><name>GetNewIMEState</name><argument_list>(<argument><expr><name>sPresContext</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SetIMEState</name><argument_list>(<argument><expr><name>newState</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><name>sContent</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>sPresContext</name> = <name>nsnull</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsIMEStateManager</name>::<name>OnChangeFocus</name></name><parameter_list>(<param><decl><type><name>nsPresContext</name>*</type> <name>aPresContext</name></decl></param>,
                                 <param><decl><type><name>nsIContent</name>*</type> <name>aContent</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aPresContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIWidget</name></expr></argument>&gt;</argument_list></name></type> <name>widget</name> <init>= <expr><call><name>GetWidget</name><argument_list>(<argument><expr><name>aPresContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>widget</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>newState</name> <init>= <expr><call><name>GetNewIMEState</name><argument_list>(<argument><expr><name>aPresContext</name></expr></argument>, <argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>aPresContext</name> == <name>sPresContext</name> &amp;&amp; <name>aContent</name> == <name>sContent</name></expr>)</condition><then> <block>{
    <comment type="line">// actual focus isn't changing, but if IME enabled state is changing,</comment>
    <comment type="line">// we should do it.</comment>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>newEnabledState</name> <init>= <expr><name>newState</name> &amp; <name><name>nsIContent</name>::<name>IME_STATUS_MASK_ENABLED</name></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>newEnabledState</name> == 0</expr>)</condition><then> <block>{
      <comment type="line">// the enabled state isn't changing, we should do nothing.</comment>
      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>enabled</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name><name>widget</name>-&gt;<name>GetIMEEnabled</name></name><argument_list>(<argument><expr>&amp;<name>enabled</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <comment type="line">// this platform doesn't support IME controlling</comment>
      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>enabled</name> ==
        <call><name><name>nsContentUtils</name>::<name>GetWidgetStatusFromIMEStatus</name></name><argument_list>(<argument><expr><name>newEnabledState</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <comment type="line">// the enabled state isn't changing.</comment>
      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <comment type="line">// Current IME transaction should commit</comment>
  <if>if <condition>(<expr><name>sPresContext</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIWidget</name></expr></argument>&gt;</argument_list></name></type> <name>oldWidget</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>sPresContext</name> == <name>aPresContext</name></expr>)</condition><then>
      <expr_stmt><expr><name>oldWidget</name> = <name>widget</name></expr>;</expr_stmt></then>
    <else>else
      <expr_stmt><expr><name>oldWidget</name> = <call><name>GetWidget</name><argument_list>(<argument><expr><name>sPresContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    <if>if <condition>(<expr><name>oldWidget</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>oldWidget</name>-&gt;<name>ResetInputState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
  }</block></then></if>

  <if>if <condition>(<expr><name>newState</name> != <name><name>nsIContent</name>::<name>IME_STATUS_NONE</name></name></expr>)</condition><then> <block>{
    <comment type="line">// Update IME state for new focus widget</comment>
    <expr_stmt><expr><call><name>SetIMEState</name><argument_list>(<argument><expr><name>newState</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><name>sPresContext</name> = <name>aPresContext</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>sContent</name> = <name>aContent</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIMEStateManager</name>::<name>OnInstalledMenuKeyboardListener</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aInstalling</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>sInstalledMenuKeyboardListener</name> = <name>aInstalling</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>OnChangeFocus</name><argument_list>(<argument><expr><name>sPresContext</name></expr></argument>, <argument><expr><name>sContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIMEStateManager</name>::<name>UpdateIMEState</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aNewIMEState</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>sPresContext</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"ISM doesn't know which editor has focus"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aNewIMEState</name> != 0</expr></argument>, <argument><expr>"aNewIMEState doesn't specify new state."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIWidget</name></expr></argument>&gt;</argument_list></name></type> <name>widget</name> <init>= <expr><call><name>GetWidget</name><argument_list>(<argument><expr><name>sPresContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>widget</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"focused widget is not found"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <comment type="line">// Don't update IME state when enabled state isn't actually changed.</comment>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>currentEnabledState</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>widget</name>-&gt;<name>GetIMEEnabled</name></name><argument_list>(<argument><expr>&amp;<name>currentEnabledState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return;</return> <comment type="line">// This platform doesn't support controling the IME state.</comment>
  }</block></then></if>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>newEnabledState</name> <init>= <expr><name>aNewIMEState</name> &amp; <name><name>nsIContent</name>::<name>IME_STATUS_MASK_ENABLED</name></name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>currentEnabledState</name> ==
        <call><name><name>nsContentUtils</name>::<name>GetWidgetStatusFromIMEStatus</name></name><argument_list>(<argument><expr><name>newEnabledState</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>

  <comment type="line">// commit current composition</comment>
  <expr_stmt><expr><call><name><name>widget</name>-&gt;<name>ResetInputState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SetIMEState</name><argument_list>(<argument><expr><name>aNewIMEState</name></expr></argument>, <argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>PRUint32</name></type>
<name><name>nsIMEStateManager</name>::<name>GetNewIMEState</name></name><parameter_list>(<param><decl><type><name>nsPresContext</name>*</type> <name>aPresContext</name></decl></param>,
                                  <param><decl><type><name>nsIContent</name>*</type>    <name>aContent</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// On Printing or Print Preview, we don't need IME.</comment>
  <if>if <condition>(<expr><call><name><name>aPresContext</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsPresContext</name>::<name>eContext_PrintPreview</name></name> ||
      <call><name><name>aPresContext</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsPresContext</name>::<name>eContext_Print</name></name></expr>)</condition><then> <block>{
    <return>return <expr><name><name>nsIContent</name>::<name>IME_STATUS_DISABLE</name></name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><name>sInstalledMenuKeyboardListener</name></expr>)</condition><then>
    <return>return <expr><name><name>nsIContent</name>::<name>IME_STATUS_DISABLE</name></name></expr>;</return></then></if>

  <if>if <condition>(<expr>!<name>aContent</name></expr>)</condition><then> <block>{
    <comment type="line">// Even if there are no focused content, the focused document might be</comment>
    <comment type="line">// editable, such case is design mode.</comment>
    <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>doc</name> <init>= <expr><call><name><name>aPresContext</name>-&gt;<name>Document</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>doc</name> &amp;&amp; <call><name><name>doc</name>-&gt;<name>HasFlag</name></name><argument_list>(<argument><expr><name>NODE_IS_EDITABLE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <return>return <expr><name><name>nsIContent</name>::<name>IME_STATUS_ENABLE</name></name></expr>;</return></then></if>
    <return>return <expr><name><name>nsIContent</name>::<name>IME_STATUS_DISABLE</name></name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name><name>aContent</name>-&gt;<name>GetDesiredIMEState</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsIMEStateManager</name>::<name>SetIMEState</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aState</name></decl></param>,
                               <param><decl><type><name>nsIWidget</name>*</type> <name>aWidget</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aState</name> &amp; <name><name>nsIContent</name>::<name>IME_STATUS_MASK_ENABLED</name></name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>state</name> <init>=
      <expr><call><name><name>nsContentUtils</name>::<name>GetWidgetStatusFromIMEStatus</name></name><argument_list>(<argument><expr><name>aState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>aWidget</name>-&gt;<name>SetIMEEnabled</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr><name>aState</name> &amp; <name><name>nsIContent</name>::<name>IME_STATUS_MASK_OPENED</name></name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRBool</name></type> <name>open</name> <init>= <expr>!!(<name>aState</name> &amp; <name><name>nsIContent</name>::<name>IME_STATUS_OPEN</name></name>)</expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>aWidget</name>-&gt;<name>SetIMEOpenState</name></name><argument_list>(<argument><expr><name>open</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>nsIWidget</name>*</type>
<name><name>nsIMEStateManager</name>::<name>GetWidget</name></name><parameter_list>(<param><decl><type><name>nsPresContext</name>*</type> <name>aPresContext</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIPresShell</name>*</type> <name>shell</name> <init>= <expr><call><name><name>aPresContext</name>-&gt;<name>GetPresShell</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>shell</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIViewManager</name>*</type> <name>vm</name> <init>= <expr><call><name><name>shell</name>-&gt;<name>GetViewManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>vm</name></expr>)</condition><then>
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIWidget</name></expr></argument>&gt;</argument_list></name></type> <name>widget</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>vm</name>-&gt;<name>GetRootWidget</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>widget</name></expr>;</return>
}</block></function>


<comment type="line">// nsTextStateManager notifies widget of any text and selection changes</comment>
<comment type="line">//  in the currently focused editor</comment>
<comment type="line">// sTextStateObserver points to the currently active nsTextStateManager</comment>
<comment type="line">// sTextStateObserver is null if there is no focused editor</comment>

<class>class <name>nsTextStateManager</name> <super>: <specifier>public</specifier> <name>nsISelectionListener</name>,
                           <specifier>public</specifier> <name>nsStubMutationObserver</name></super>
<block>{<private type="default">
</private><public>public:
  <constructor_decl><name>nsTextStateManager</name><parameter_list>()</parameter_list>;</constructor_decl>

  <function_decl><type><name>NS_DECL_ISUPPORTS</name>
  <name>NS_DECL_NSISELECTIONLISTENER</name>
  <name>NS_DECL_NSIMUTATIONOBSERVER_CHARACTERDATACHANGED</name>
  <name>NS_DECL_NSIMUTATIONOBSERVER_CONTENTAPPENDED</name>
  <name>NS_DECL_NSIMUTATIONOBSERVER_CONTENTINSERTED</name>
  <name>NS_DECL_NSIMUTATIONOBSERVER_CONTENTREMOVED</name>

  <name>nsresult</name></type> <name>Init</name><parameter_list>(<param><decl><type><name>nsIWidget</name>*</type> <name>aWidget</name></decl></param>,
                <param><decl><type><name>nsPresContext</name>*</type> <name>aPresContext</name></decl></param>,
                <param><decl><type><name>nsINode</name>*</type> <name>aNode</name></decl></param>,
                <param><decl><type><name>PRBool</name></type> <name>aWantUpdates</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type>     <name>Destroy</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIWidget</name></expr></argument>&gt;</argument_list></name></type>            <name>mWidget</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISelection</name></expr></argument>&gt;</argument_list></name></type>         <name>mSel</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContent</name></expr></argument>&gt;</argument_list></name></type>           <name>mRootContent</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINode</name></expr></argument>&gt;</argument_list></name></type>              <name>mEditableNode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type>                         <name>mDestroying</name></decl>;</decl_stmt>

</public><private>private:
  <function_decl><type><name>void</name></type> <name>NotifyContentAdded</name><parameter_list>(<param><decl><type><name>nsINode</name>*</type> <name>aContainer</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aStart</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aEnd</name></decl></param>)</parameter_list>;</function_decl>
</private>}</block>;</class>

<constructor><name><name>nsTextStateManager</name>::<name>nsTextStateManager</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><name>mDestroying</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
}</block></constructor>

<function><type><name>nsresult</name></type>
<name><name>nsTextStateManager</name>::<name>Init</name></name><parameter_list>(<param><decl><type><name>nsIWidget</name>*</type> <name>aWidget</name></decl></param>,
                         <param><decl><type><name>nsPresContext</name>*</type> <name>aPresContext</name></decl></param>,
                         <param><decl><type><name>nsINode</name>*</type> <name>aNode</name></decl></param>,
                         <param><decl><type><name>PRBool</name></type> <name>aWantUpdates</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mWidget</name> = <name>aWidget</name></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>aWantUpdates</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mEditableNode</name> = <name>aNode</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsIPresShell</name>*</type> <name>presShell</name> <init>= <expr><call><name><name>aPresContext</name>-&gt;<name>PresShell</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// get selection and root content</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISelectionController</name></expr></argument>&gt;</argument_list></name></type> <name>selCon</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name><name>aNode</name>-&gt;<name>IsNodeOfType</name></name><argument_list>(<argument><expr><name><name>nsINode</name>::<name>eCONTENT</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>frame</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIContent</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aNode</name></expr></argument>)</argument_list></call>-&gt;<call><name>GetPrimaryFrame</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>NS_ERROR_UNEXPECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>frame</name>-&gt;<name>GetSelectionController</name></name><argument_list>(<argument><expr><name>aPresContext</name></expr></argument>,
                                  <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>selCon</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <comment type="line">// aNode is a document</comment>
    <expr_stmt><expr><name>selCon</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>presShell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>selCon</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISelection</name></expr></argument>&gt;</argument_list></name></type> <name>sel</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>selCon</name>-&gt;<name>GetSelection</name></name><argument_list>(<argument><expr><name><name>nsISelectionController</name>::<name>SELECTION_NORMAL</name></name></expr></argument>,
                                     <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>sel</name></expr></argument>, <argument><expr><name>NS_ERROR_UNEXPECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMRange</name></expr></argument>&gt;</argument_list></name></type> <name>selDomRange</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>sel</name>-&gt;<name>GetRangeAt</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>selDomRange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIRange</name></expr></argument>&gt;</argument_list></name></type> <name>selRange</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>selDomRange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>selRange</name> &amp;&amp; <call><name><name>selRange</name>-&gt;<name>GetStartParent</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NS_ERROR_UNEXPECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mRootContent</name> = <call><name><name>selRange</name>-&gt;<name>GetStartParent</name></name><argument_list>()</argument_list></call>-&gt;
                     <call><name>GetSelectionRootContent</name><argument_list>(<argument><expr><name>presShell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>mRootContent</name> &amp;&amp; <call><name><name>aNode</name>-&gt;<name>IsNodeOfType</name></name><argument_list>(<argument><expr><name><name>nsINode</name>::<name>eDOCUMENT</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// The document node is editable, but there are no contents, this document</comment>
    <comment type="line">// is not editable.</comment>
    <return>return <expr><name>NS_ERROR_NOT_AVAILABLE</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mRootContent</name></expr></argument>, <argument><expr><name>NS_ERROR_UNEXPECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// add text change observer</comment>
  <expr_stmt><expr><call><name><name>mRootContent</name>-&gt;<name>AddMutationObserver</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// add selection change listener</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISelectionPrivate</name></expr></argument>&gt;</argument_list></name></type> <name>selPrivate</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>selPrivate</name></expr></argument>, <argument><expr><name>NS_ERROR_UNEXPECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>selPrivate</name>-&gt;<name>AddSelectionListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mSel</name> = <name>sel</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>mEditableNode</name> = <name>aNode</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsTextStateManager</name>::<name>Destroy</name></name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>mSel</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISelectionPrivate</name></expr></argument>&gt;</argument_list></name></type> <name>selPrivate</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>mSel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>selPrivate</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>selPrivate</name>-&gt;<name>RemoveSelectionListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name>mSel</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr><name>mRootContent</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>mRootContent</name>-&gt;<name>RemoveMutationObserver</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mRootContent</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><name>mEditableNode</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mWidget</name> = <name>nsnull</name></expr>;</expr_stmt>
}</block></function>

<macro><name>NS_IMPL_ISUPPORTS2</name><argument_list>(<argument>nsTextStateManager</argument>,
                   <argument>nsIMutationObserver</argument>,
                   <argument>nsISelectionListener</argument>)</argument_list></macro>

<comment type="line">// Helper class, used for selection change notification</comment>
<class>class <name>SelectionChangeEvent</name> <super>: <specifier>public</specifier> <name>nsRunnable</name></super> <block>{<private type="default">
</private><public>public:
  <constructor><name>SelectionChangeEvent</name><parameter_list>(<param><decl><type><name>nsIWidget</name> *</type><name>widget</name></decl></param>)</parameter_list>
    <member_list>: <call><name>mWidget</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call>
  </member_list><block>{
  }</block></constructor>

  <function><type><name>NS_IMETHOD</name></type> <name>Run</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>mWidget</name>-&gt;<name>OnIMESelectionChange</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></function>

</public><private>private:
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIWidget</name></expr></argument>&gt;</argument_list></name></type> <name>mWidget</name></decl>;</decl_stmt>
</private>}</block>;</class>

<function><type><name>nsresult</name></type>
<name><name>nsTextStateManager</name>::<name>NotifySelectionChanged</name></name><parameter_list>(<param><decl><type><name>nsIDOMDocument</name>*</type> <name>aDoc</name></decl></param>,
                                           <param><decl><type><name>nsISelection</name>*</type> <name>aSel</name></decl></param>,
                                           <param><decl><type><name>PRInt16</name></type> <name>aReason</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>aSel</name>-&gt;<name>GetRangeCount</name></name><argument_list>(<argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>count</name> &gt; 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>AddScriptRunner</name></name><argument_list>(<argument><expr>new <call><name>SelectionChangeEvent</name><argument_list>(<argument><expr><name>mWidget</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// Helper class, used for text change notification</comment>
<class>class <name>TextChangeEvent</name> <super>: <specifier>public</specifier> <name>nsRunnable</name></super> <block>{<private type="default">
</private><public>public:
  <constructor><name>TextChangeEvent</name><parameter_list>(<param><decl><type><name>nsIWidget</name> *</type><name>widget</name></decl></param>,
                  <param><decl><type><name>PRUint32</name></type> <name>start</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>oldEnd</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>newEnd</name></decl></param>)</parameter_list>
    <member_list>: <call><name>mWidget</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call>
    , <call><name>mStart</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call>
    , <call><name>mOldEnd</name><argument_list>(<argument><expr><name>oldEnd</name></expr></argument>)</argument_list></call>
    , <call><name>mNewEnd</name><argument_list>(<argument><expr><name>newEnd</name></expr></argument>)</argument_list></call>
  </member_list><block>{
  }</block></constructor>

  <function><type><name>NS_IMETHOD</name></type> <name>Run</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>mWidget</name>-&gt;<name>OnIMETextChange</name></name><argument_list>(<argument><expr><name>mStart</name></expr></argument>, <argument><expr><name>mOldEnd</name></expr></argument>, <argument><expr><name>mNewEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></function>

</public><private>private:
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIWidget</name></expr></argument>&gt;</argument_list></name></type> <name>mWidget</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>mStart</name></decl>, <decl><type ref="prev"/><name>mOldEnd</name></decl>, <decl><type ref="prev"/><name>mNewEnd</name></decl>;</decl_stmt>
</private>}</block>;</class>

<function><type><name>void</name></type>
<name><name>nsTextStateManager</name>::<name>CharacterDataChanged</name></name><parameter_list>(<param><decl><type><name>nsIDocument</name>*</type> <name>aDocument</name></decl></param>,
                                         <param><decl><type><name>nsIContent</name>*</type> <name>aContent</name></decl></param>,
                                         <param><decl><type><name>CharacterDataChangeInfo</name>*</type> <name>aInfo</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>aContent</name>-&gt;<name>IsNodeOfType</name></name><argument_list>(<argument><expr><name><name>nsINode</name>::<name>eTEXT</name></name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr>"character data changed for non-text node"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>offset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <comment type="line">// get offsets of change and fire notification</comment>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name><name>nsContentEventHandler</name>::<name>GetFlatTextOffsetOfRange</name></name><argument_list>(
                    <argument><expr><name>mRootContent</name></expr></argument>, <argument><expr><name>aContent</name></expr></argument>, <argument><expr><name><name>aInfo</name>-&gt;<name>mChangeStart</name></name></expr></argument>, <argument><expr>&amp;<name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>oldEnd</name> <init>= <expr><name>offset</name> + <name><name>aInfo</name>-&gt;<name>mChangeEnd</name></name> - <name><name>aInfo</name>-&gt;<name>mChangeStart</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>newEnd</name> <init>= <expr><name>offset</name> + <name><name>aInfo</name>-&gt;<name>mReplaceLength</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>AddScriptRunner</name></name><argument_list>(
      <argument><expr>new <call><name>TextChangeEvent</name><argument_list>(<argument><expr><name>mWidget</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>oldEnd</name></expr></argument>, <argument><expr><name>newEnd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsTextStateManager</name>::<name>NotifyContentAdded</name></name><parameter_list>(<param><decl><type><name>nsINode</name>*</type> <name>aContainer</name></decl></param>,
                                       <param><decl><type><name>PRInt32</name></type> <name>aStartIndex</name></decl></param>,
                                       <param><decl><type><name>PRInt32</name></type> <name>aEndIndex</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>offset</name> <init>= <expr>0</expr></init>, <name>newOffset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name><name>nsContentEventHandler</name>::<name>GetFlatTextOffsetOfRange</name></name><argument_list>(
                    <argument><expr><name>mRootContent</name></expr></argument>, <argument><expr><name>aContainer</name></expr></argument>, <argument><expr><name>aStartIndex</name></expr></argument>, <argument><expr>&amp;<name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>

  <comment type="line">// get offset at the end of the last added node</comment>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name><name>nsContentEventHandler</name>::<name>GetFlatTextOffsetOfRange</name></name><argument_list>(
                    <argument><expr><call><name><name>aContainer</name>-&gt;<name>GetChildAt</name></name><argument_list>(<argument><expr><name>aStartIndex</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>aContainer</name></expr></argument>, <argument><expr><name>aEndIndex</name></expr></argument>, <argument><expr>&amp;<name>newOffset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>

  <comment type="line">// fire notification</comment>
  <if>if <condition>(<expr><name>newOffset</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>AddScriptRunner</name></name><argument_list>(
        <argument><expr>new <call><name>TextChangeEvent</name><argument_list>(<argument><expr><name>mWidget</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name> + <name>newOffset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsTextStateManager</name>::<name>ContentAppended</name></name><parameter_list>(<param><decl><type><name>nsIDocument</name>*</type> <name>aDocument</name></decl></param>,
                                    <param><decl><type><name>nsIContent</name>*</type> <name>aContainer</name></decl></param>,
                                    <param><decl><type><name>nsIContent</name>*</type> <name>aFirstNewContent</name></decl></param>,
                                    <param><decl><type><name>PRInt32</name></type> <name>aNewIndexInContainer</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NotifyContentAdded</name><argument_list>(<argument><expr><name>aContainer</name></expr></argument>, <argument><expr><name>aNewIndexInContainer</name></expr></argument>,
                     <argument><expr><call><name><name>aContainer</name>-&gt;<name>GetChildCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsTextStateManager</name>::<name>ContentInserted</name></name><parameter_list>(<param><decl><type><name>nsIDocument</name>*</type> <name>aDocument</name></decl></param>,
                                     <param><decl><type><name>nsIContent</name>*</type> <name>aContainer</name></decl></param>,
                                     <param><decl><type><name>nsIContent</name>*</type> <name>aChild</name></decl></param>,
                                     <param><decl><type><name>PRInt32</name></type> <name>aIndexInContainer</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NotifyContentAdded</name><argument_list>(<argument><expr><call><name>NODE_FROM</name><argument_list>(<argument><expr><name>aContainer</name></expr></argument>, <argument><expr><name>aDocument</name></expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><name>aIndexInContainer</name></expr></argument>, <argument><expr><name>aIndexInContainer</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsTextStateManager</name>::<name>ContentRemoved</name></name><parameter_list>(<param><decl><type><name>nsIDocument</name>*</type> <name>aDocument</name></decl></param>,
                                   <param><decl><type><name>nsIContent</name>*</type> <name>aContainer</name></decl></param>,
                                   <param><decl><type><name>nsIContent</name>*</type> <name>aChild</name></decl></param>,
                                   <param><decl><type><name>PRInt32</name></type> <name>aIndexInContainer</name></decl></param>,
                                   <param><decl><type><name>nsIContent</name>*</type> <name>aPreviousSibling</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>offset</name> <init>= <expr>0</expr></init>, <name>childOffset</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name><name>nsContentEventHandler</name>::<name>GetFlatTextOffsetOfRange</name></name><argument_list>(
                    <argument><expr><name>mRootContent</name></expr></argument>, <argument><expr><call><name>NODE_FROM</name><argument_list>(<argument><expr><name>aContainer</name></expr></argument>, <argument><expr><name>aDocument</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>aIndexInContainer</name></expr></argument>, <argument><expr>&amp;<name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>

  <comment type="line">// get offset at the end of the deleted node</comment>
  <if>if <condition>(<expr><call><name><name>aChild</name>-&gt;<name>IsNodeOfType</name></name><argument_list>(<argument><expr><name><name>nsINode</name>::<name>eTEXT</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><name>childOffset</name> = <call><name><name>aChild</name>-&gt;<name>TextLength</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr>0 &lt; <call><name><name>aChild</name>-&gt;<name>GetChildCount</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><name>childOffset</name> = <call><name><name>aChild</name>-&gt;<name>GetChildCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if></else></if>

  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><call><name><name>nsContentEventHandler</name>::<name>GetFlatTextOffsetOfRange</name></name><argument_list>(
                    <argument><expr><name>aChild</name></expr></argument>, <argument><expr><name>aChild</name></expr></argument>, <argument><expr><name>childOffset</name></expr></argument>, <argument><expr>&amp;<name>childOffset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>

  <comment type="line">// fire notification</comment>
  <if>if <condition>(<expr><name>childOffset</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>AddScriptRunner</name></name><argument_list>(
        <argument><expr>new <call><name>TextChangeEvent</name><argument_list>(<argument><expr><name>mWidget</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name> + <name>childOffset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>nsINode</name>*</type> <name>GetRootEditableNode</name><parameter_list>(<param><decl><type><name>nsPresContext</name>*</type> <name>aPresContext</name></decl></param>,
                                    <param><decl><type><name>nsIContent</name>*</type> <name>aContent</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aContent</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsINode</name>*</type> <name>root</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsINode</name>*</type> <name>node</name> <init>= <expr><name>aContent</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>node</name> &amp;&amp; <call><name><name>node</name>-&gt;<name>IsEditable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
      <expr_stmt><expr><name>root</name> = <name>node</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>node</name> = <call><name><name>node</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>root</name></expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr><name>aPresContext</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>document</name> <init>= <expr><call><name><name>aPresContext</name>-&gt;<name>Document</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>document</name> &amp;&amp; <call><name><name>document</name>-&gt;<name>IsEditable</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
      <return>return <expr><name>document</name></expr>;</return></then></if>
  }</block></then></if>
  <return>return <expr><name>nsnull</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsIMEStateManager</name>::<name>OnTextStateBlur</name></name><parameter_list>(<param><decl><type><name>nsPresContext</name>*</type> <name>aPresContext</name></decl></param>,
                                   <param><decl><type><name>nsIContent</name>*</type> <name>aContent</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>sTextStateObserver</name> || <name><name>sTextStateObserver</name>-&gt;<name>mDestroying</name></name> ||
      <name><name>sTextStateObserver</name>-&gt;<name>mEditableNode</name></name> ==
          <call><name>GetRootEditableNode</name><argument_list>(<argument><expr><name>aPresContext</name></expr></argument>, <argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <expr_stmt><expr><name><name>sTextStateObserver</name>-&gt;<name>mDestroying</name></name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>sTextStateObserver</name>-&gt;<name>mWidget</name>-&gt;<name>OnIMEFocusChange</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>sTextStateObserver</name>-&gt;<name>Destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name>sTextStateObserver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsIMEStateManager</name>::<name>OnTextStateFocus</name></name><parameter_list>(<param><decl><type><name>nsPresContext</name>*</type> <name>aPresContext</name></decl></param>,
                                    <param><decl><type><name>nsIContent</name>*</type> <name>aContent</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>sTextStateObserver</name></expr>)</condition><then> <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsINode</name> *</type><name>editableNode</name> <init>= <expr><call><name>GetRootEditableNode</name><argument_list>(<argument><expr><name>aPresContext</name></expr></argument>, <argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>editableNode</name></expr>)</condition><then> <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsIPresShell</name>*</type> <name>shell</name> <init>= <expr><call><name><name>aPresContext</name>-&gt;<name>GetPresShell</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>shell</name></expr></argument>, <argument><expr><name>NS_ERROR_NOT_AVAILABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>nsIViewManager</name>*</type> <name>vm</name> <init>= <expr><call><name><name>shell</name>-&gt;<name>GetViewManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>vm</name></expr></argument>, <argument><expr><name>NS_ERROR_NOT_AVAILABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIWidget</name></expr></argument>&gt;</argument_list></name></type> <name>widget</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>vm</name>-&gt;<name>GetRootWidget</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NS_ERROR_NOT_AVAILABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>widget</name></expr>)</condition><then> <block>{
    <return>return <expr><name>NS_OK</name></expr>;</return> <comment type="line">// Sometimes, there are no widgets.</comment>
  }</block></then></if>

  <expr_stmt><expr><name>rv</name> = <call><name><name>widget</name>-&gt;<name>OnIMEFocusChange</name></name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>rv</name> == <name>NS_ERROR_NOT_IMPLEMENTED</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>wantUpdates</name> <init>= <expr><name>rv</name> != <name>NS_SUCCESS_IME_NO_UPDATES</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// OnIMEFocusChange may cause focus and sTextStateObserver to change</comment>
  <comment type="line">// In that case return and keep the current sTextStateObserver</comment>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr>!<name>sTextStateObserver</name></expr></argument>, <argument><expr><name>NS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>sTextStateObserver</name> = new <call><name>nsTextStateManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>sTextStateObserver</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name>sTextStateObserver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>sTextStateObserver</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>aPresContext</name></expr></argument>,
                                <argument><expr><name>editableNode</name></expr></argument>, <argument><expr><name>wantUpdates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name><name>sTextStateObserver</name>-&gt;<name>mDestroying</name></name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sTextStateObserver</name>-&gt;<name>Destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name>sTextStateObserver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>widget</name>-&gt;<name>OnIMEFocusChange</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsIMEStateManager</name>::<name>GetFocusSelectionAndRoot</name></name><parameter_list>(<param><decl><type><name>nsISelection</name>**</type> <name>aSel</name></decl></param>,
                                            <param><decl><type><name>nsIContent</name>**</type> <name>aRoot</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>sTextStateObserver</name> || !<name><name>sTextStateObserver</name>-&gt;<name>mEditableNode</name></name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_NOT_AVAILABLE</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name><name>sTextStateObserver</name>-&gt;<name>mSel</name></name> &amp;&amp; <name><name>sTextStateObserver</name>-&gt;<name>mRootContent</name></name></expr></argument>,
               <argument><expr>"uninitialized text state observer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aSel</name> = <name><name>sTextStateObserver</name>-&gt;<name>mSel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aRoot</name> = <name><name>sTextStateObserver</name>-&gt;<name>mRootContent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
</unit>
