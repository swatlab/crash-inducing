<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0012009e6f6cc2c09a84e78db2c9e535a3a40026.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* vim:set tw=80 expandtab softtabstop=2 ts=2 sw=2: */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Daniel Glazman &lt;glazman@netscape.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsReadableUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsUnicharUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMHTMLAnchorElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMNSHTMLAnchorElement2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMEventReceiver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIHTMLDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGenericHTMLElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsILink.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGkAtoms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStyleConsts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPresContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIEventStateManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIURL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIEventStateManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMEvent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNetUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCRT.h"</cpp:file></cpp:include>

<comment type="line">// For GetText().</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIContentIterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMText.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIEnumerator.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPresShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocument.h"</cpp:file></cpp:include>

<function_decl><type><name>nsresult</name></type> <name>NS_NewContentIterator</name><parameter_list>(<param><decl><type><name>nsIContentIterator</name>**</type> <name>aInstancePtrResult</name></decl></param>)</parameter_list>;</function_decl>

<class>class <name>nsHTMLAnchorElement</name> <super>: <specifier>public</specifier> <name>nsGenericHTMLElement</name>,
                            <specifier>public</specifier> <name>nsIDOMHTMLAnchorElement</name>,
                            <specifier>public</specifier> <name>nsIDOMNSHTMLAnchorElement2</name>,
                            <specifier>public</specifier> <name>nsILink</name></super>
<block>{<private type="default">
</private><public>public:
  <constructor_decl><name>nsHTMLAnchorElement</name><parameter_list>(<param><decl><type><name>nsINodeInfo</name> *</type><name>aNodeInfo</name></decl></param>)</parameter_list>;</constructor_decl>
  <destructor_decl><specifier>virtual</specifier> <name>~<name>nsHTMLAnchorElement</name></name><parameter_list>()</parameter_list>;</destructor_decl>

  <comment type="line">// nsISupports</comment>
  <decl_stmt><decl><type><name>NS_DECL_ISUPPORTS_INHERITED</name></type>

  <comment type="line">// nsIDOMNode</comment>
  <name>NS_FORWARD_NSIDOMNODE</name><argument_list>(<argument><expr><name><name>nsGenericHTMLElement</name>::</name></expr></argument>)</argument_list>

  <comment type="line">// nsIDOMElement</comment>
  <name>NS_FORWARD_NSIDOMELEMENT</name><argument_list>(<argument><expr><name><name>nsGenericHTMLElement</name>::</name></expr></argument>)</argument_list>

  <comment type="line">// nsIDOMHTMLElement</comment>
  <name>NS_FORWARD_NSIDOMHTMLELEMENT</name><argument_list>(<argument><expr><name><name>nsGenericHTMLElement</name>::</name></expr></argument>)</argument_list>

  <comment type="line">// nsIDOMHTMLAnchorElement</comment>
  <name>NS_DECL_NSIDOMHTMLANCHORELEMENT</name>  

  <comment type="line">// nsIDOMNSHTMLAnchorElement</comment>
  <name>NS_DECL_NSIDOMNSHTMLANCHORELEMENT</name>

  <comment type="line">// nsIDOMNSHTMLAnchorElement2</comment>
  <name>NS_DECL_NSIDOMNSHTMLANCHORELEMENT2</name>

  <comment type="line">// nsILink</comment>
  <name>NS_IMETHOD</name> <name>GetLinkState</name><argument_list>(<argument><expr><name>nsLinkState</name> &amp;<name>aState</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>SetLinkState</name><parameter_list>(<param><decl><type><name>nsLinkState</name></type> <name>aState</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>GetHrefURI</name><parameter_list>(<param><decl><type><name>nsIURI</name>**</type> <name>aURI</name></decl></param>)</parameter_list>;</function_decl>
  <function><type><name>NS_IMETHOD</name></type> <name>LinkAdded</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>NS_OK</name></expr>;</return> }</block></function>
  <function><type><name>NS_IMETHOD</name></type> <name>LinkRemoved</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>NS_OK</name></expr>;</return> }</block></function>

  <function_decl><type><specifier>virtual</specifier> <name>nsresult</name></type> <name>BindToTree</name><parameter_list>(<param><decl><type><name>nsIDocument</name>*</type> <name>aDocument</name></decl></param>, <param><decl><type><name>nsIContent</name>*</type> <name>aParent</name></decl></param>,
                              <param><decl><type><name>nsIContent</name>*</type> <name>aBindingParent</name></decl></param>,
                              <param><decl><type><name>PRBool</name></type> <name>aCompileEventHandlers</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>UnbindFromTree</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aDeep</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl></param>,
                              <name>PRBool</name> <name>aNullParent</name> = <name>PR_TRUE</name>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>SetFocus</name><parameter_list>(<param><decl><type><name>nsPresContext</name>*</type> <name>aPresContext</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>PRBool</name></type> <name>IsFocusable</name><parameter_list>(<param><decl><type><name>PRBool</name> *</type><name>aTabIndex</name> <init>= <expr><name>nsnull</name></expr></init></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>virtual</specifier> <name>nsresult</name></type> <name>PostHandleEvent</name><parameter_list>(<param><decl><type><name>nsEventChainPostVisitor</name>&amp;</type> <name>aVisitor</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>PRBool</name></type> <name>IsLink</name><parameter_list>(<param><decl><type><name>nsIURI</name>**</type> <name>aURI</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>void</name></type> <name>GetLinkTarget</name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aTarget</name></decl></param>)</parameter_list>;</function_decl>

  <function><type><name>nsresult</name></type> <name>SetAttr</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aNameSpaceID</name></decl></param>, <param><decl><type><name>nsIAtom</name>*</type> <name>aName</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>
  <block>{
    <return>return <expr><call><name>SetAttr</name><argument_list>(<argument><expr><name>aNameSpaceID</name></expr></argument>, <argument><expr><name>aName</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
  <function_decl><type><specifier>virtual</specifier> <name>nsresult</name></type> <name>SetAttr</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aNameSpaceID</name></decl></param>, <param><decl><type><name>nsIAtom</name>*</type> <name>aName</name></decl></param>,
                           <param><decl><type><name>nsIAtom</name>*</type> <name>aPrefix</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>,
                           <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>virtual</specifier> <name>nsresult</name></type> <name>UnsetAttr</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aNameSpaceID</name></decl></param>, <param><decl><type><name>nsIAtom</name>*</type> <name>aAttribute</name></decl></param>,
                             <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>virtual</specifier> <name>nsresult</name></type> <name>Clone</name><parameter_list>(<param><decl><type><name>nsINodeInfo</name> *</type><name>aNodeInfo</name></decl></param>, <param><decl><type><name>nsINode</name> **</type><name>aResult</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

</public><protected>protected:
  <comment type="line">// The cached visited state</comment>
  <decl_stmt><decl><type><name>nsLinkState</name></type> <name>mLinkState</name></decl>;</decl_stmt>
</protected>}</block>;</class>


<macro><name>NS_IMPL_NS_NEW_HTML_ELEMENT</name><argument_list>(<argument>Anchor</argument>)</argument_list></macro>


<constructor><name><name>nsHTMLAnchorElement</name>::<name>nsHTMLAnchorElement</name></name><parameter_list>(<param><decl><type><name>nsINodeInfo</name> *</type><name>aNodeInfo</name></decl></param>)</parameter_list>
  <member_list>: <call><name>nsGenericHTMLElement</name><argument_list>(<argument><expr><name>aNodeInfo</name></expr></argument>)</argument_list></call>,
    <call><name>mLinkState</name><argument_list>(<argument><expr><name>eLinkState_Unknown</name></expr></argument>)</argument_list></call>
</member_list><block>{
}</block></constructor>

<destructor><name><name>nsHTMLAnchorElement</name>::~<name>nsHTMLAnchorElement</name></name><parameter_list>()</parameter_list>
<block>{
}</block></destructor>


<macro><name>NS_IMPL_ADDREF_INHERITED</name><argument_list>(<argument>nsHTMLAnchorElement</argument>, <argument>nsGenericElement</argument>)</argument_list></macro> 
<macro><name>NS_IMPL_RELEASE_INHERITED</name><argument_list>(<argument>nsHTMLAnchorElement</argument>, <argument>nsGenericElement</argument>)</argument_list></macro> 


<comment type="line">// QueryInterface implementation for nsHTMLAnchorElement</comment>
<macro><name>NS_HTML_CONTENT_INTERFACE_MAP_BEGIN</name><argument_list>(<argument>nsHTMLAnchorElement</argument>, <argument>nsGenericHTMLElement</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsIDOMHTMLAnchorElement</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsIDOMNSHTMLAnchorElement</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsIDOMNSHTMLAnchorElement2</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsILink</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_MAP_ENTRY_CONTENT_CLASSINFO</name><argument_list>(<argument>HTMLAnchorElement</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>NS_HTML_CONTENT_INTERFACE_MAP_END</name></type>


<name>NS_IMPL_ELEMENT_CLONE</name><argument_list>(<argument><expr><name>nsHTMLAnchorElement</name></expr></argument>)</argument_list>


<name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument><expr><name>nsHTMLAnchorElement</name></expr></argument>, <argument><expr><name>Charset</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list>
<name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument><expr><name>nsHTMLAnchorElement</name></expr></argument>, <argument><expr><name>Coords</name></expr></argument>, <argument><expr><name>coords</name></expr></argument>)</argument_list>
<name>NS_IMPL_URI_ATTR</name><argument_list>(<argument><expr><name>nsHTMLAnchorElement</name></expr></argument>, <argument><expr><name>Href</name></expr></argument>, <argument><expr><name>href</name></expr></argument>)</argument_list>
<name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument><expr><name>nsHTMLAnchorElement</name></expr></argument>, <argument><expr><name>Hreflang</name></expr></argument>, <argument><expr><name>hreflang</name></expr></argument>)</argument_list>
<name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument><expr><name>nsHTMLAnchorElement</name></expr></argument>, <argument><expr><name>Name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list>
<name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument><expr><name>nsHTMLAnchorElement</name></expr></argument>, <argument><expr><name>Rel</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list>
<name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument><expr><name>nsHTMLAnchorElement</name></expr></argument>, <argument><expr><name>Rev</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list>
<name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument><expr><name>nsHTMLAnchorElement</name></expr></argument>, <argument><expr><name>Shape</name></expr></argument>, <argument><expr><name>shape</name></expr></argument>)</argument_list>
<name>NS_IMPL_INT_ATTR_DEFAULT_VALUE</name><argument_list>(<argument><expr><name>nsHTMLAnchorElement</name></expr></argument>, <argument><expr><name>TabIndex</name></expr></argument>, <argument><expr><name>tabindex</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list>
<name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument><expr><name>nsHTMLAnchorElement</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list>
<name>NS_IMPL_STRING_ATTR</name><argument_list>(<argument><expr><name>nsHTMLAnchorElement</name></expr></argument>, <argument><expr><name>AccessKey</name></expr></argument>, <argument><expr><name>accesskey</name></expr></argument>)</argument_list>


<name>nsresult</name>
<name><name>nsHTMLAnchorElement</name>::<name>BindToTree</name></name><argument_list>(<argument><expr><name>nsIDocument</name>* <name>aDocument</name></expr></argument>, <argument><expr><name>nsIContent</name>* <name>aParent</name></expr></argument>,
                                <argument><expr><name>nsIContent</name>* <name>aBindingParent</name></expr></argument>,
                                <argument><expr><name>PRBool</name> <name>aCompileEventHandlers</name></expr></argument>)</argument_list>
<argument_list>{
  <argument><expr><name>nsresult</name> <name>rv</name> = <call><name><name>nsGenericHTMLElement</name>::<name>BindToTree</name></name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>, <argument><expr><name>aParent</name></expr></argument>,
                                                 <argument><expr><name>aBindingParent</name></expr></argument>,
                                                 <argument><expr><name>aCompileEventHandlers</name></expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>;

  if <argument><expr>(<name>aDocument</name>) <block>{
    <expr><call><name>RegUnRegAccessKey</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;
  }</block></expr></argument>

  <return>return <expr><name>rv</name></expr>;</return></argument_list></decl></decl_stmt>
}

void
<macro><name>nsHTMLAnchorElement</name></macro><expr_stmt><expr><name>::<name>UnbindFromTree</name></name>(<name>PRBool</name> <name>aDeep</name>, <name>PRBool</name> <name>aNullParent</name>)
<block>{
  <if>if <condition>(<expr><call><name>IsInDoc</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>RegUnRegAccessKey</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetCurrentDoc</name><argument_list>()</argument_list></call>-&gt;<call><name>ForgetLink</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// If this link is ever reinserted into a document, it might</comment>
    <comment type="line">// be under a different xml:base, so forget the cached state now</comment>
    <expr_stmt><expr><name>mLinkState</name> = <name>eLinkState_Unknown</name></expr>;</expr_stmt>
  <expr_stmt/></block></then></if>}</block>
    
  <call><name><name>nsGenericHTMLElement</name>::<name>UnbindFromTree</name></name><argument_list>(<argument><expr><name>aDeep</name></expr></argument>, <argument><expr><name>aNullParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

NS_IMETHODIMP
<macro><name>nsHTMLAnchorElement</name></macro><expr_stmt><expr><name>::<name>Blur</name></name>()
<block>{
  <if>if <condition>(<expr><call><name>ShouldBlur</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>SetElementFocus</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt/></block></then></if>}</block></expr></expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsHTMLAnchorElement</name></macro><expr_stmt><expr><name>::<name>Focus</name></name>()
<block>{
  <if>if <condition>(<expr><call><name>ShouldFocus</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>SetElementFocus</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt/></block></then></if>}</block></expr></expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}

void
<macro><name>nsHTMLAnchorElement</name></macro><expr_stmt><expr><name>::<name>SetFocus</name></name>(<name>nsPresContext</name>* <name>aPresContext</name>)
<block>{
  <if>if <condition>(<expr>!<name>aPresContext</name></expr>)</condition><then> <block>{
    <return>return;</return>
  <expr_stmt/></block></then></if>}</block>

  <comment type="line">// don't make the link grab the focus if there is no link handler</comment>
  <name>nsILinkHandler</name> *<name>handler</name> = <call><name><name>aPresContext</name>-&gt;<name>GetLinkHandler</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>handler</name> &amp;&amp; <call><name><name>aPresContext</name>-&gt;<name>EventStateManager</name></name><argument_list>()</argument_list></call>-&gt;
                               <call><name>SetContentState</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>NS_EVENT_STATE_FOCUS</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>presShell</name> <init>= <expr><call><name><name>aPresContext</name>-&gt;<name>GetPresShell</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>presShell</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>presShell</name>-&gt;<name>ScrollContentIntoView</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>NS_PRESSHELL_SCROLL_IF_NOT_VISIBLE</name></expr></argument>,
                                       <argument><expr><name>NS_PRESSHELL_SCROLL_IF_NOT_VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
}

PRBool
<macro><name>nsHTMLAnchorElement</name></macro><expr_stmt><expr><name>::<name>IsFocusable</name></name>(<name>PRInt32</name> *<name>aTabIndex</name>)
<block>{
  <if>if <condition>(<expr>!<call><name><name>nsGenericHTMLElement</name>::<name>IsFocusable</name></name><argument_list>(<argument><expr><name>aTabIndex</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  <expr_stmt/></block></then></if>}</block></expr></expr_stmt>

  <if>if <condition>(<expr>!<call><name>HasAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>tabindex</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// check whether we're actually a link</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>absURI</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>IsLink</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>absURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <comment type="line">// Not tabbable or focusable without href (bug 17605), unless</comment>
      <comment type="line">// forced to be via presence of nonnegative tabindex attribute</comment>
      <if>if <condition>(<expr><name>aTabIndex</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>aTabIndex</name> = -1</expr>;</expr_stmt>
      }</block></then></if>
      <return>return <expr><name>PR_FALSE</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <if>if <condition>(<expr><name>aTabIndex</name> &amp;&amp; (<name>sTabFocusModel</name> &amp; <name>eTabFocus_linksMask</name>) == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aTabIndex</name> = -1</expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}

nsresult
<macro><name>nsHTMLAnchorElement</name></macro><expr_stmt><expr><name>::<name>PostHandleEvent</name></name>(<name>nsEventChainPostVisitor</name>&amp; <name>aVisitor</name>)
<block>{
  <return>return <expr><call><name>PostHandleEventForAnchors</name><argument_list>(<argument><expr><name>aVisitor</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>PRBool</name></type>
<name><name>nsHTMLAnchorElement</name>::<name>IsLink</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>**</type> <name>aURI</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><call><name>IsHTMLLink</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsHTMLAnchorElement</name>::<name>GetLinkTarget</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aTarget</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>target</name></name></expr></argument>, <argument><expr><name>aTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name><name>aTarget</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>GetBaseTarget</name><argument_list>(<argument><expr><name>aTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLAnchorElement</name>::<name>GetTarget</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>GetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>target</name></name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>GetBaseTarget</name><argument_list>(<argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLAnchorElement</name>::<name>SetTarget</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>SetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>target</name></name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>    
<name><name>nsHTMLAnchorElement</name>::<name>GetProtocol</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aProtocol</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>href</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetHref</name><argument_list>(<argument><expr><name>href</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <comment type="line">// XXX this should really use GetHrefURI and not do so much string stuff</comment>
  <return>return <expr><call><name>GetProtocolFromHrefString</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr><name>aProtocol</name></expr></argument>, <argument><expr><call><name>GetOwnerDoc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLAnchorElement</name>::<name>SetProtocol</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aProtocol</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>href</name></decl>, <decl><type ref="prev"/><name>new_href</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetHref</name><argument_list>(<argument><expr><name>href</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rv</name> = <call><name>SetProtocolInHrefString</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr><name>aProtocol</name></expr></argument>, <argument><expr><name>new_href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <comment type="line">// Ignore failures to be compatible with NS4</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <return>return <expr><call><name>SetHref</name><argument_list>(<argument><expr><name>new_href</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>    
<name><name>nsHTMLAnchorElement</name>::<name>GetHost</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aHost</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>href</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetHref</name><argument_list>(<argument><expr><name>href</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <return>return <expr><call><name>GetHostFromHrefString</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr><name>aHost</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLAnchorElement</name>::<name>SetHost</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aHost</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>href</name></decl>, <decl><type ref="prev"/><name>new_href</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetHref</name><argument_list>(<argument><expr><name>href</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rv</name> = <call><name>SetHostInHrefString</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr><name>aHost</name></expr></argument>, <argument><expr><name>new_href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <comment type="line">// Ignore failures to be compatible with NS4</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <return>return <expr><call><name>SetHref</name><argument_list>(<argument><expr><name>new_href</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>    
<name><name>nsHTMLAnchorElement</name>::<name>GetHostname</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aHostname</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>href</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetHref</name><argument_list>(<argument><expr><name>href</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <return>return <expr><call><name>GetHostnameFromHrefString</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr><name>aHostname</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLAnchorElement</name>::<name>SetHostname</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aHostname</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>href</name></decl>, <decl><type ref="prev"/><name>new_href</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetHref</name><argument_list>(<argument><expr><name>href</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rv</name> = <call><name>SetHostnameInHrefString</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr><name>aHostname</name></expr></argument>, <argument><expr><name>new_href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <comment type="line">// Ignore failures to be compatible with NS4</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
  
  <return>return <expr><call><name>SetHref</name><argument_list>(<argument><expr><name>new_href</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>    
<name><name>nsHTMLAnchorElement</name>::<name>GetPathname</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aPathname</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>href</name></decl>;</decl_stmt>
 
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetHref</name><argument_list>(<argument><expr><name>href</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <return>return <expr><call><name>GetPathnameFromHrefString</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr><name>aPathname</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLAnchorElement</name>::<name>SetPathname</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aPathname</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>href</name></decl>, <decl><type ref="prev"/><name>new_href</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetHref</name><argument_list>(<argument><expr><name>href</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rv</name> = <call><name>SetPathnameInHrefString</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr><name>aPathname</name></expr></argument>, <argument><expr><name>new_href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <comment type="line">// Ignore failures to be compatible with NS4</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <return>return <expr><call><name>SetHref</name><argument_list>(<argument><expr><name>new_href</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>    
<name><name>nsHTMLAnchorElement</name>::<name>GetSearch</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aSearch</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>href</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetHref</name><argument_list>(<argument><expr><name>href</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <return>return <expr><call><name>GetSearchFromHrefString</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr><name>aSearch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLAnchorElement</name>::<name>SetSearch</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aSearch</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>href</name></decl>, <decl><type ref="prev"/><name>new_href</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetHref</name><argument_list>(<argument><expr><name>href</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rv</name> = <call><name>SetSearchInHrefString</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr><name>aSearch</name></expr></argument>, <argument><expr><name>new_href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <comment type="line">// Ignore failures to be compatible with NS4</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <return>return <expr><call><name>SetHref</name><argument_list>(<argument><expr><name>new_href</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>    
<name><name>nsHTMLAnchorElement</name>::<name>GetPort</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aPort</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>href</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetHref</name><argument_list>(<argument><expr><name>href</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <return>return <expr><call><name>GetPortFromHrefString</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr><name>aPort</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLAnchorElement</name>::<name>SetPort</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aPort</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>href</name></decl>, <decl><type ref="prev"/><name>new_href</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetHref</name><argument_list>(<argument><expr><name>href</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rv</name> = <call><name>SetPortInHrefString</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr><name>aPort</name></expr></argument>, <argument><expr><name>new_href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <comment type="line">// Ignore failures to be compatible with NS4</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
  
  <return>return <expr><call><name>SetHref</name><argument_list>(<argument><expr><name>new_href</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>    
<name><name>nsHTMLAnchorElement</name>::<name>GetHash</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aHash</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>href</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetHref</name><argument_list>(<argument><expr><name>href</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <return>return <expr><call><name>GetHashFromHrefString</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr><name>aHash</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLAnchorElement</name>::<name>SetHash</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aHash</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>href</name></decl>, <decl><type ref="prev"/><name>new_href</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetHref</name><argument_list>(<argument><expr><name>href</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rv</name> = <call><name>SetHashInHrefString</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr><name>aHash</name></expr></argument>, <argument><expr><name>new_href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <comment type="line">// Ignore failures to be compatible with NS4</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <return>return <expr><call><name>SetHref</name><argument_list>(<argument><expr><name>new_href</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>    
<name><name>nsHTMLAnchorElement</name>::<name>GetText</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aText</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aText</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Since this is a Netscape 4 proprietary attribute, we have to implement</comment>
  <comment type="line">// the same behavior. Basically it is returning the last text node of</comment>
  <comment type="line">// of the anchor. Returns an empty string if there is no text node.</comment>
  <comment type="line">// The nsIContentIterator does exactly what we want, if we start the </comment>
  <comment type="line">// iteration from the end.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIContentIterator</name></expr></argument>&gt;</argument_list></name></type> <name>iter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_NewContentIterator</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Initialize the content iterator with the children of the anchor</comment>
  <expr_stmt><expr><call><name><name>iter</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Position the iterator. Last() is the anchor itself, this is not what we </comment>
  <comment type="line">// want. Prev() positions the iterator to the last child of the anchor,</comment>
  <comment type="line">// starting at the deepest level of children, just like NS4 does.</comment>
  <expr_stmt><expr><call><name><name>iter</name>-&gt;<name>Last</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>iter</name>-&gt;<name>Prev</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <while>while<condition>(<expr>!<call><name><name>iter</name>-&gt;<name>IsDone</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMText</name></expr></argument>&gt;</argument_list></name></type> <name>textNode</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><call><name><name>iter</name>-&gt;<name>GetCurrentNode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>textNode</name></expr>)</condition><then> <block>{
      <comment type="line">// The current node is a text node. Get its value and break the loop.</comment>
      <expr_stmt><expr><call><name><name>textNode</name>-&gt;<name>GetData</name></name><argument_list>(<argument><expr><name>aText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>iter</name>-&gt;<name>Prev</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></while>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLAnchorElement</name>::<name>ToString</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aSource</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetHref</name><argument_list>(<argument><expr><name>aSource</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>    
<name><name>nsHTMLAnchorElement</name>::<name>GetPing</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetURIListAttr</name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>ping</name></name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLAnchorElement</name>::<name>SetPing</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>SetAttr</name><argument_list>(<argument><expr><name>kNameSpaceID_None</name></expr></argument>, <argument><expr><name><name>nsGkAtoms</name>::<name>ping</name></name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLAnchorElement</name>::<name>GetLinkState</name></name><parameter_list>(<param><decl><type><name>nsLinkState</name> &amp;</type><name>aState</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>aState</name> = <name>mLinkState</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLAnchorElement</name>::<name>SetLinkState</name></name><parameter_list>(<param><decl><type><name>nsLinkState</name></type> <name>aState</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>mLinkState</name> = <name>aState</name></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsHTMLAnchorElement</name>::<name>GetHrefURI</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>**</type> <name>aURI</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetHrefURIForAnchors</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsHTMLAnchorElement</name>::<name>SetAttr</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aNameSpaceID</name></decl></param>, <param><decl><type><name>nsIAtom</name>*</type> <name>aName</name></decl></param>,
                             <param><decl><type><name>nsIAtom</name>*</type> <name>aPrefix</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>,
                             <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aName</name> == <name><name>nsGkAtoms</name>::<name>href</name></name> &amp;&amp; <name>kNameSpaceID_None</name> == <name>aNameSpaceID</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>val</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetHref</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name><name>val</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>doc</name> <init>= <expr><call><name>GetCurrentDoc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>doc</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>doc</name>-&gt;<name>ForgetLink</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// The change to 'href' will cause style reresolution which will</comment>
        <comment type="line">// eventually recompute the link state and re-add this element</comment>
        <comment type="line">// to the link map if necessary.</comment>
      }</block></then></if>
      <expr_stmt><expr><call><name>SetLinkState</name><argument_list>(<argument><expr><name>eLinkState_Unknown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <if>if <condition>(<expr><name>aName</name> == <name><name>nsGkAtoms</name>::<name>accesskey</name></name> &amp;&amp; <name>kNameSpaceID_None</name> == <name>aNameSpaceID</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>RegUnRegAccessKey</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsGenericHTMLElement</name>::<name>SetAttr</name></name><argument_list>(<argument><expr><name>aNameSpaceID</name></expr></argument>, <argument><expr><name>aName</name></expr></argument>, <argument><expr><name>aPrefix</name></expr></argument>,
                                              <argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>aName</name> == <name><name>nsGkAtoms</name>::<name>accesskey</name></name> &amp;&amp; <name>kNameSpaceID_None</name> == <name>aNameSpaceID</name> &amp;&amp;
      !<call><name><name>aValue</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>RegUnRegAccessKey</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsHTMLAnchorElement</name>::<name>UnsetAttr</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aNameSpaceID</name></decl></param>, <param><decl><type><name>nsIAtom</name>*</type> <name>aAttribute</name></decl></param>,
                               <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>href</name></name> &amp;&amp; <name>kNameSpaceID_None</name> == <name>aNameSpaceID</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>SetLinkState</name><argument_list>(<argument><expr><name>eLinkState_Unknown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>accesskey</name></name> &amp;&amp;
      <name>kNameSpaceID_None</name> == <name>aNameSpaceID</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>RegUnRegAccessKey</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><call><name><name>nsGenericHTMLElement</name>::<name>UnsetAttr</name></name><argument_list>(<argument><expr><name>aNameSpaceID</name></expr></argument>, <argument><expr><name>aAttribute</name></expr></argument>, <argument><expr><name>aNotify</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
