<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="003f517785b94522d33ce2e7431473e363cd5f47.cpp"><comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla XPCOM.
 *
 * The Initial Developer of the Original Code is
 * Benjamin Smedberg &lt;benjamin@smedbergs.us&gt;
 *
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Mozilla Foundation &lt;http://www.mozilla.org/&gt;. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsINIParserImpl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsILocalFile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsINIParser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStringEnumerator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsVoidArray.h"</cpp:file></cpp:include>

<class>class <name>nsINIParserImpl</name> <super>:
  <specifier>public</specifier> <name>nsIINIParser</name></super>
<block>{<private type="default">
</private><public>public:
  <function><type><name>NS_DECL_ISUPPORTS</name>
  <name>NS_DECL_NSIINIPARSER</name>

  <name>nsresult</name></type> <name>Init</name><parameter_list>(<param><decl><type><name>nsILocalFile</name>*</type> <name>aINIFile</name></decl></param>)</parameter_list> <block>{
    <return>return <expr><call><name><name>mParser</name>.<name>Init</name></name><argument_list>(<argument><expr><name>aINIFile</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

</public><private>private:
  <decl_stmt><decl><type><name>nsINIParser</name></type> <name>mParser</name></decl>;</decl_stmt>
</private>}</block>;</class>

<macro><name>NS_IMPL_ISUPPORTS2</name><argument_list>(<argument>nsINIParserFactory</argument>,
                   <argument>nsIINIParserFactory</argument>,
                   <argument>nsIFactory</argument>)</argument_list></macro>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsINIParserFactory</name>::<name>CreateINIParser</name></name><parameter_list>(<param><decl><type><name>nsILocalFile</name>*</type> <name>aINIFile</name></decl></param>,
                                    <param><decl><type><name>nsIINIParser</name>* *</type><name>aResult</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aResult</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsINIParserImpl</name></expr></argument>&gt;</argument_list></name></type> <name>p</name><argument_list>(<argument><expr>new <call><name>nsINIParserImpl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>p</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>aINIFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aResult</name> = <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsINIParserFactory</name>::<name>CreateInstance</name></name><parameter_list>(<param><decl><type><name>nsISupports</name>*</type> <name>aOuter</name></decl></param>,
                                   <param><decl><type><name>REFNSIID</name></type> <name>aIID</name></decl></param>,
                                   <param><decl><type><name>void</name> **</type><name>aResult</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ENSURE_NO_AGGREGATION</name><argument_list>(<argument><expr><name>aOuter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// We are our own singleton.</comment>
  <return>return <expr><call><name>QueryInterface</name><argument_list>(<argument><expr><name>aIID</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsINIParserFactory</name>::<name>LockFactory</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aLock</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<macro><name>NS_IMPL_ISUPPORTS1</name><argument_list>(<argument>nsINIParserImpl</argument>,
                   <argument>nsIINIParser</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>SectionCB</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>aSection</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aClosure</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsCStringArray</name> *</type><name>strings</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsCStringArray</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aClosure</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>strings</name>-&gt;<name>AppendCString</name></name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>aSection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsINIParserImpl</name>::<name>GetSections</name></name><parameter_list>(<param><decl><type><name>nsIUTF8StringEnumerator</name>* *</type><name>aResult</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsCStringArray</name> *</type><name>strings</name> <init>= <expr>new <name>nsCStringArray</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>strings</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>mParser</name>.<name>GetSections</name></name><argument_list>(<argument><expr><name>SectionCB</name></expr></argument>, <argument><expr><name>strings</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><name>rv</name> = <call><name>NS_NewUTF8StringEnumerator</name><argument_list>(<argument><expr><name>aResult</name></expr></argument>, <argument><expr><name>strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr>delete <name>strings</name></expr>;</expr_stmt></then></if>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>KeyCB</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>aKey</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aValue</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aClosure</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsCStringArray</name> *</type><name>strings</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsCStringArray</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>aClosure</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>strings</name>-&gt;<name>AppendCString</name></name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>aKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsINIParserImpl</name>::<name>GetKeys</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aSection</name></decl></param>,
                         <param><decl><type><name>nsIUTF8StringEnumerator</name>* *</type><name>aResult</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsCStringArray</name> *</type><name>strings</name> <init>= <expr>new <name>nsCStringArray</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>strings</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>mParser</name>.<name>GetStrings</name></name><argument_list>(<argument><expr><call><name>PromiseFlatCString</name><argument_list>(<argument><expr><name>aSection</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>,
                                   <argument><expr><name>KeyCB</name></expr></argument>, <argument><expr><name>strings</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><name>rv</name> = <call><name>NS_NewUTF8StringEnumerator</name><argument_list>(<argument><expr><name>aResult</name></expr></argument>, <argument><expr><name>strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr>delete <name>strings</name></expr>;</expr_stmt></then></if>

  <return>return <expr><name>rv</name></expr>;</return>

}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsINIParserImpl</name>::<name>GetString</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aSection</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aKey</name></decl></param>,
                           <param><decl><type><name>nsACString</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>mParser</name>.<name>GetString</name></name><argument_list>(<argument><expr><call><name>PromiseFlatCString</name><argument_list>(<argument><expr><name>aSection</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>,
                           <argument><expr><call><name>PromiseFlatCString</name><argument_list>(<argument><expr><name>aKey</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>,
                           <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
