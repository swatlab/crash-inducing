<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="007fc3bb1e9d407ae69436a428ff48480c6c31c3.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Daniel Glazman &lt;glazman@netscape.com&gt;
 *   Boris Zbarsky &lt;bzbarsky@mit.edu&gt;
 *   Christopher A. Aillon &lt;christopher@aillon.com&gt;
 *   Mats Palmgren &lt;mats.palmgren@bredband.net&gt;
 *   Christian Biesinger &lt;cbiesinger@web.de&gt;
 *   Michael Ventnor &lt;m.ventnor@gmail.com&gt;
 *   Jonathon Jongsma &lt;jonathon.jongsma@collabora.co.uk&gt;, Collabora Ltd.
 *   L. David Baron &lt;dbaron@dbaron.org&gt;, Mozilla Corporation
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<comment type="block">/* DOM object returned from element.getComputedStyle() */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsComputedDOMStyle.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPrintfCString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMNSCSS2Properties.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMCSSPrimitiveValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStyleContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScrollableFrame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prprf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCSSProps.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCSSKeywords.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMCSSRect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGkAtoms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsHTMLReflowState.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsThemeConstants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStyleUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStyleStructInlines.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPresContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocument.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCSSPseudoElements.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStyleSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"imgIRequest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsLayoutUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsFrameManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCSSKeywords.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStyleCoord.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDisplayList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMCSSDeclaration.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_bzbarsky</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_caillon</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_ComputedDOMStyle</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * This is the implementation of the readonly CSSStyleDeclaration that is
 * returned by the getComputedStyle() function.
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>nsComputedDOMStyle</name> *</type><name>sCachedComputedDOMStyle</name></decl>;</decl_stmt>

<function><type><name>nsresult</name></type>
<name>NS_NewComputedDOMStyle</name><parameter_list>(<param><decl><type><name>nsIDOMElement</name> *</type><name>aElement</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsAString</name> &amp;</type><name>aPseudoElt</name></decl></param>,
                       <param><decl><type><name>nsIPresShell</name> *</type><name>aPresShell</name></decl></param>,
                       <param><decl><type><name>nsComputedDOMStyle</name> **</type><name>aComputedStyle</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsComputedDOMStyle</name></expr></argument>&gt;</argument_list></name></type> <name>computedStyle</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>sCachedComputedDOMStyle</name></expr>)</condition><then> <block>{
    <comment type="line">// There's an unused nsComputedDOMStyle cached, use it.</comment>
    <comment type="line">// But before we use it, re-initialize the object.</comment>

    <comment type="line">// Oh yeah baby, placement new!</comment>
    <expr_stmt><expr><name>computedStyle</name> = new (<name>sCachedComputedDOMStyle</name>) <call><name>nsComputedDOMStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>sCachedComputedDOMStyle</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <comment type="line">// No nsComputedDOMStyle cached, create a new one.</comment>

    <expr_stmt><expr><name>computedStyle</name> = new <call><name>nsComputedDOMStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>computedStyle</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>computedStyle</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><name>aElement</name></expr></argument>, <argument><expr><name>aPseudoElt</name></expr></argument>, <argument><expr><name>aPresShell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aComputedStyle</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>computedStyle</name>.<name>swap</name></name><argument_list>(<argument><expr>*<name>aComputedStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>nsIFrame</name>*</type>
<name>GetContainingBlockFor</name><parameter_list>(<param><decl><type><name>nsIFrame</name>*</type> <name>aFrame</name></decl></param>)</parameter_list> <block>{
  <if>if <condition>(<expr>!<name>aFrame</name></expr>)</condition><then> <block>{
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>
  <return>return <expr><call><name><name>nsHTMLReflowState</name>::<name>GetContainingBlockFor</name></name><argument_list>(<argument><expr><name>aFrame</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<constructor><name><name>nsComputedDOMStyle</name>::<name>nsComputedDOMStyle</name></name><parameter_list>()</parameter_list>
  <member_list>: <call><name>mDocumentWeak</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>, <call><name>mOuterFrame</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>,
    <call><name>mInnerFrame</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>, <call><name>mPresShell</name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call>, <call><name>mAppUnitsPerInch</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>
</member_list><block>{
}</block></constructor>


<destructor><name><name>nsComputedDOMStyle</name>::~<name>nsComputedDOMStyle</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>ClearWrapper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<function><type><name>void</name></type>
<name><name>nsComputedDOMStyle</name>::<name>Shutdown</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// We want to de-allocate without calling the dtor since we</comment>
  <comment type="line">// already did that manually in doDestroyComputedDOMStyle(),</comment>
  <comment type="line">// so cast our cached object to something that doesn't know</comment>
  <comment type="line">// about our dtor.</comment>
  <expr_stmt><expr>delete <call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>char</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>sCachedComputedDOMStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sCachedComputedDOMStyle</name> = <name>nsnull</name></expr>;</expr_stmt>
}</block></function>


<macro><name>NS_IMPL_CYCLE_COLLECTION_CLASS</name><argument_list>(<argument>nsComputedDOMStyle</argument>)</argument_list></macro>
<macro><name>NS_IMPL_CYCLE_COLLECTION_ROOT_BEGIN</name><argument_list>(<argument>nsComputedDOMStyle</argument>)</argument_list></macro>
  <decl_stmt><decl><type><name>NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER</name>
<name>NS_IMPL_CYCLE_COLLECTION_ROOT_END</name></type>
<name>NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN</name><argument_list>(<argument><expr><name>nsComputedDOMStyle</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR</name><argument_list>(<argument><expr><name>mContent</name></expr></argument>)</argument_list>
<name>NS_IMPL_CYCLE_COLLECTION_UNLINK_END</name>
<name>NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN</name><argument_list>(<argument><expr><name>nsComputedDOMStyle</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_TRACE_PRESERVED_WRAPPER</name>
<name>NS_IMPL_CYCLE_COLLECTION_TRACE_END</name>
<name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN</name><argument_list>(<argument><expr><name>nsComputedDOMStyle</name></expr></argument>)</argument_list>
  <name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_SCRIPT_OBJECTS</name>
  <name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR</name><argument_list>(<argument><expr><name>mContent</name></expr></argument>)</argument_list>
<name>NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END</name>

<comment type="line">// QueryInterface implementation for nsComputedDOMStyle</comment>
<name>NS_INTERFACE_TABLE_HEAD</name><argument_list>(<argument><expr><name>nsComputedDOMStyle</name></expr></argument>)</argument_list>
  <name>NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY</name>
  <name>NS_OFFSET_AND_INTERFACE_TABLE_BEGIN</name><argument_list>(<argument><expr><name>nsComputedDOMStyle</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsComputedDOMStyle</name></expr></argument>, <argument><expr><name>nsICSSDeclaration</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsComputedDOMStyle</name></expr></argument>,
                             <argument><expr><name>nsIDOMCSSStyleDeclaration</name></expr></argument>)</argument_list>
    <name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument><expr><name>nsComputedDOMStyle</name></expr></argument>, <argument><expr><name>nsISupports</name></expr></argument>)</argument_list>
  <name>NS_OFFSET_AND_INTERFACE_TABLE_END</name>
  <name>NS_OFFSET_AND_INTERFACE_TABLE_TO_MAP_SEGUE</name>
  <name>NS_INTERFACE_MAP_ENTRIES_CYCLE_COLLECTION</name><argument_list>(<argument><expr><name>nsComputedDOMStyle</name></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY_AGGREGATED</name><argument_list>(<argument><expr><name>nsIDOMCSS2Properties</name></expr></argument>,
                                    <argument><expr>new <call><name>CSS2PropertiesTearoff</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY_AGGREGATED</name><argument_list>(<argument><expr><name>nsIDOMNSCSS2Properties</name></expr></argument>,
                                    <argument><expr>new <call><name>CSS2PropertiesTearoff</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
  <name>NS_INTERFACE_MAP_ENTRY_CONTENT_CLASSINFO</name><argument_list>(<argument><expr><name>ComputedCSSStyleDeclaration</name></expr></argument>)</argument_list>
<name>NS_INTERFACE_MAP_END</name>


static <name>void</name> <name>doDestroyComputedDOMStyle</name><argument_list>(<argument><expr><name>nsComputedDOMStyle</name> *<name>aComputedStyle</name></expr></argument>)</argument_list>
<argument_list>{
  if <argument><expr>(!<name>sCachedComputedDOMStyle</name>) <block>{
    <comment type="line">// The cache is empty, store aComputedStyle in the cache.</comment>

    <expr><name>sCachedComputedDOMStyle</name> = <name>aComputedStyle</name></expr>;
    <expr><call><name><name>sCachedComputedDOMStyle</name>-&gt;~<name>nsComputedDOMStyle</name></name><argument_list>()</argument_list></call></expr>;
  }</block></expr></argument> <else>else <expr_stmt><expr><block>{
    <comment type="line">// The cache is full, delete aComputedStyle</comment>

    <expr>delete <name>aComputedStyle</name></expr>;
  }</block></expr></expr_stmt></else>
}</argument_list>

<name>NS_IMPL_CYCLE_COLLECTING_ADDREF</name><argument_list>(<argument><expr><name>nsComputedDOMStyle</name></expr></argument>)</argument_list>
<name>NS_IMPL_CYCLE_COLLECTING_RELEASE_WITH_DESTROY</name><argument_list>(<argument><expr><name>nsComputedDOMStyle</name></expr></argument>,
                                              <argument><expr><call><name>doDestroyComputedDOMStyle</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>


<name>NS_IMETHODIMP</name>
<name><name>nsComputedDOMStyle</name>::<name>Init</name></name><argument_list>(<argument><expr><name>nsIDOMElement</name> *<name>aElement</name></expr></argument>,
                         <argument><expr>const <name>nsAString</name>&amp; <name>aPseudoElt</name></expr></argument>,
                         <argument><expr><name>nsIPresShell</name> *<name>aPresShell</name></expr></argument>)</argument_list>
<argument_list>{
  <argument><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>aPresShell</name></expr></argument>)</argument_list></call></expr></argument>;

  <argument><expr><name>mDocumentWeak</name> = <call><name>do_GetWeakReference</name><argument_list>(<argument><expr><call><name><name>aPresShell</name>-&gt;<name>GetDocument</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

  <argument><expr><name>mContent</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aElement</name></expr></argument>)</argument_list></call></expr></argument>;
  if <argument><expr>(!<name>mContent</name>) <block>{
    <comment type="line">// This should not happen, all our elements support nsIContent!</comment>

    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></expr></argument>

  <if>if <condition>(<expr>!<call><name>DOMStringIsNull</name><argument_list>(<argument><expr><name>aPseudoElt</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>aPseudoElt</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call> &amp;&amp;
      <call><name><name>aPseudoElt</name>.<name>First</name></name><argument_list>()</argument_list></call> == <call><name>PRUnichar</name><argument_list>(<argument><expr>':'</expr></argument>)</argument_list></call></expr>)</condition><then> <expr_stmt><expr><block>{
    <comment type="line">// deal with two-colon forms of aPseudoElt</comment>
    <expr><name><name>nsAString</name>::<name>const_iterator</name></name> <name>start</name></expr>, <expr><name>end</name></expr>;
    <call><name><name>aPseudoElt</name>.<name>BeginReading</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt></then></if></argument_list></decl></decl_stmt>
    <expr_stmt><expr><call><name><name>aPseudoElt</name>.<name>EndReading</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>start</name> != <name>end</name></expr></argument>, <argument><expr>"aPseudoElt is not empty!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>++<name>start</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>haveTwoColons</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>start</name> == <name>end</name> || *<name>start</name> != <call><name>PRUnichar</name><argument_list>(<argument><expr>':'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>--<name>start</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>haveTwoColons</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>mPseudo</name> = <call><name>do_GetAtom</name><argument_list>(<argument><expr><call><name>Substring</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mPseudo</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// There aren't any non-CSS2 pseudo-elements with a single ':'</comment>
    <if>if <condition>(<expr>!<name>haveTwoColons</name> &amp;&amp;
        !<call><name><name>nsCSSPseudoElements</name>::<name>IsCSS2PseudoElement</name></name><argument_list>(<argument><expr><name>mPseudo</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <comment type="line">// XXXbz I'd really rather we threw an exception or something, but</comment>
      <comment type="line">// the DOM spec sucks.</comment>
      <expr_stmt><expr><name>mPseudo</name> = <name>nsnull</name></expr>;</expr_stmt>
    }</block></then></if>
  }

  nsPresContext <expr_stmt><expr>*<name>presCtx</name> = <call><name><name>aPresShell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>presCtx</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mAppUnitsPerInch</name> = <call><name><name>presCtx</name>-&gt;<name>AppUnitsPerInch</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsComputedDOMStyle</name></macro><expr_stmt><expr><name>::<name>GetPropertyValue</name></name>(const <name>nsCSSProperty</name> <name>aPropID</name>,
                                     <name>nsAString</name>&amp; <name>aValue</name>)
<block>{
  <comment type="line">// This is mostly to avoid code duplication with GetPropertyCSSValue(); if</comment>
  <comment type="line">// perf ever becomes an issue here (doubtful), we can look into changing</comment>
  <comment type="line">// this.</comment>
  <return>return <expr><call><name>GetPropertyValue</name><argument_list>(
    <argument><expr><call><name>NS_ConvertASCIItoUTF16</name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::<name>GetStringValue</name></name><argument_list>(<argument><expr><name>aPropID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
    <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsComputedDOMStyle</name>::<name>SetPropertyValue</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsCSSProperty</name></type> <name>aPropID</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_DOM_NO_MODIFICATION_ALLOWED_ERR</name></expr>;</return>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetCssText</name></name><parameter_list>(<param><decl><type><name>nsAString</name>&amp;</type> <name>aCssText</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aCssText</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsComputedDOMStyle</name>::<name>SetCssText</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aCssText</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_DOM_NO_MODIFICATION_ALLOWED_ERR</name></expr>;</return>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetLength</name></name><parameter_list>(<param><decl><type><name>PRUint32</name>*</type> <name>aLength</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aLength</name></expr></argument>, <argument><expr>"Null aLength!  Prepare to die!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>(<name>void</name>)<call><name>GetQueryablePropertyMap</name><argument_list>(<argument><expr><name>aLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetParentRule</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSRule</name>**</type> <name>aParentRule</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aParentRule</name> = <name>nsnull</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetPropertyValue</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aPropertyName</name></decl></param>,
                                     <param><decl><type><name>nsAString</name>&amp;</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMCSSValue</name></expr></argument>&gt;</argument_list></name></type> <name>val</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>aReturn</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetPropertyCSSValue</name><argument_list>(<argument><expr><name>aPropertyName</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>val</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rv</name> = <call><name><name>val</name>-&gt;<name>GetCssText</name></name><argument_list>(<argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>nsStyleContext</name>*</type>
<name>GetStyleContextForFrame</name><parameter_list>(<param><decl><type><name>nsIFrame</name>*</type> <name>aFrame</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsStyleContext</name>*</type> <name>styleContext</name> <init>= <expr><call><name><name>aFrame</name>-&gt;<name>GetStyleContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* For tables the primary frame is the "outer frame" but the style
   * rules are applied to the "inner frame".  Luckily, the "outer
   * frame" actually inherits style from the "inner frame" so we can
   * just move one level up in the style context hierarchy....
   */</comment>
  <if>if <condition>(<expr><call><name><name>aFrame</name>-&gt;<name>GetType</name></name><argument_list>()</argument_list></call> == <name><name>nsGkAtoms</name>::<name>tableOuterFrame</name></name></expr>)</condition><then>
    <return>return <expr><call><name><name>styleContext</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>styleContext</name></expr>;</return>
}</block></function>    

<comment type="block">/* static */</comment>
<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsStyleContext</name></expr></argument>&gt;</argument_list></name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetStyleContextForContent</name></name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type> <name>aContent</name></decl></param>,
                                              <param><decl><type><name>nsIAtom</name>*</type> <name>aPseudo</name></decl></param>,
                                              <param><decl><type><name>nsIPresShell</name>*</type> <name>aPresShell</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>aContent</name>-&gt;<name>IsNodeOfType</name></name><argument_list>(<argument><expr><name><name>nsINode</name>::<name>eELEMENT</name></name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr>"aContent must be an element"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>aPseudo</name></expr>)</condition><then> <block>{
    <comment type="line">// If there's no pres shell, get it from the content</comment>
    <if>if <condition>(<expr>!<name>aPresShell</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>aPresShell</name> = <call><name>GetPresShellForContent</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>!<name>aPresShell</name></expr>)</condition><then>
        <return>return <expr><name>nsnull</name></expr>;</return></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>aPresShell</name>-&gt;<name>FlushPendingNotifications</name></name><argument_list>(<argument><expr><name>Flush_Style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><call><name>GetStyleContextForContentNoFlush</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>, <argument><expr><name>aPseudo</name></expr></argument>, <argument><expr><name>aPresShell</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* static */</comment>
<function><type><name><name>already_AddRefed</name><argument_list>&lt;<argument><expr><name>nsStyleContext</name></expr></argument>&gt;</argument_list></name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetStyleContextForContentNoFlush</name></name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type> <name>aContent</name></decl></param>,
                                                     <param><decl><type><name>nsIAtom</name>*</type> <name>aPseudo</name></decl></param>,
                                                     <param><decl><type><name>nsIPresShell</name>*</type> <name>aPresShell</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ABORT_IF_FALSE</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>, <argument><expr>"NULL content node"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// If there's no pres shell, get it from the content</comment>
  <if>if <condition>(<expr>!<name>aPresShell</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>aPresShell</name> = <call><name>GetPresShellForContent</name><argument_list>(<argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>aPresShell</name></expr>)</condition><then>
      <return>return <expr><name>nsnull</name></expr>;</return></then></if>
  }</block></then></if>

  <if>if <condition>(<expr>!<name>aPseudo</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>frame</name> <init>= <expr><call><name><name>aPresShell</name>-&gt;<name>GetPrimaryFrameFor</name></name><argument_list>(<argument><expr><name>aContent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>frame</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsStyleContext</name>*</type> <name>result</name> <init>= <expr><call><name>GetStyleContextForFrame</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// Don't use the style context if it was influenced by</comment>
      <comment type="line">// pseudo-elements, since then it's not the primary style</comment>
      <comment type="line">// for this element.</comment>
      <if>if <condition>(<expr>!<call><name><name>result</name>-&gt;<name>HasPseudoElementData</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <comment type="line">// this function returns an addrefed style context</comment>
        <expr_stmt><expr><call><name><name>result</name>-&gt;<name>AddRef</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>

  <comment type="line">// No frame has been created or we have a pseudo, so resolve the</comment>
  <comment type="line">// style ourselves</comment>
  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsStyleContext</name></expr></argument>&gt;</argument_list></name></type> <name>parentContext</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsIContent</name>*</type> <name>parent</name> <init>= <expr><name>aPseudo</name> ? <name>aContent</name> : <call><name><name>aContent</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// Don't resolve parent context for document fragments.</comment>
  <if>if <condition>(<expr><name>parent</name> &amp;&amp; <call><name><name>parent</name>-&gt;<name>IsNodeOfType</name></name><argument_list>(<argument><expr><name><name>nsINode</name>::<name>eELEMENT</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><name>parentContext</name> = <call><name>GetStyleContextForContent</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>aPresShell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <decl_stmt><decl><type><name>nsPresContext</name> *</type><name>presContext</name> <init>= <expr><call><name><name>aPresShell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>presContext</name></expr>)</condition><then>
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsStyleSet</name> *</type><name>styleSet</name> <init>= <expr><call><name><name>aPresShell</name>-&gt;<name>StyleSet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>aPseudo</name></expr>)</condition><then> <block>{
    <return>return <expr><call><name><name>styleSet</name>-&gt;<name>ResolvePseudoStyleFor</name></name><argument_list>(<argument><expr><name>aContent</name></expr></argument>, <argument><expr><name>aPseudo</name></expr></argument>, <argument><expr><name>parentContext</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name><name>styleSet</name>-&gt;<name>ResolveStyleFor</name></name><argument_list>(<argument><expr><name>aContent</name></expr></argument>, <argument><expr><name>parentContext</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* static */</comment>
<function><type><name>nsIPresShell</name>*</type>
<name><name>nsComputedDOMStyle</name>::<name>GetPresShellForContent</name></name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type> <name>aContent</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>currentDoc</name> <init>= <expr><call><name><name>aContent</name>-&gt;<name>GetCurrentDoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>currentDoc</name></expr>)</condition><then>
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>

  <return>return <expr><call><name><name>currentDoc</name>-&gt;<name>GetPrimaryShell</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetPropertyCSSValue</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aPropertyName</name></decl></param>,
                                        <param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<name>mStyleContextHolder</name></expr></argument>, <argument><expr>"bad state"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>aReturn</name> = <name>nsnull</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></type> <name>document</name> <init>= <expr><call><name>do_QueryReferent</name><argument_list>(<argument><expr><name>mDocumentWeak</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name>NS_ERROR_NOT_AVAILABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsCSSProperty</name></type> <name>prop</name> <init>= <expr><call><name><name>nsCSSProps</name>::<name>LookupProperty</name></name><argument_list>(<argument><expr><name>aPropertyName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>ComputedStyleMapEntry</name>*</type> <name>propEntry</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <block>{
    <decl_stmt><decl><type><name>PRUint32</name></type> <name>length</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>ComputedStyleMapEntry</name>*</type> <name>propMap</name> <init>= <expr><call><name>GetQueryablePropertyMap</name><argument_list>(<argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
      <if>if <condition>(<expr><name>prop</name> == <name><name>propMap</name><index>[<expr><name>i</name></expr>]</index></name>.<name>mProperty</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>propEntry</name> = &amp;<name><name>propMap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <break>break;</break>
      }</block></then></if>
    }</block></for>
  }</block>
  <if>if <condition>(<expr>!<name>propEntry</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_ComputedDOMStyle</name></cpp:ifdef>
    <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr><call><name>PromiseFlatCString</name><argument_list>(<argument><expr><call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><name>aPropertyName</name></expr></argument>)</argument_list></call> + 
                                  <call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>" is not queryable!"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// NOTE:  For branches, we should flush here for compatibility!</comment>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <comment type="line">// Flush _before_ getting the presshell, since that could create a new</comment>
  <comment type="line">// presshell.  Also note that we want to flush the style on the document</comment>
  <comment type="line">// we're computing style in, not on the document mContent is in -- the two</comment>
  <comment type="line">// may be different.</comment>
  <expr_stmt><expr><call><name><name>document</name>-&gt;<name>FlushPendingNotifications</name></name><argument_list>(
    <argument><expr><name><name>propEntry</name>-&gt;<name>mNeedsLayoutFlush</name></name> ? <name>Flush_Layout</name> : <name>Flush_Style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <expr_stmt><expr><name>mFlushedPendingReflows</name> = <name><name>propEntry</name>-&gt;<name>mNeedsLayoutFlush</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>mPresShell</name> = <call><name><name>document</name>-&gt;<name>GetPrimaryShell</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mPresShell</name> &amp;&amp; <call><name><name>mPresShell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call></expr></argument>,
                 <argument><expr><name>NS_ERROR_NOT_AVAILABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mOuterFrame</name> = <call><name><name>mPresShell</name>-&gt;<name>GetPrimaryFrameFor</name></name><argument_list>(<argument><expr><name>mContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mInnerFrame</name> = <name>mOuterFrame</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>mOuterFrame</name> &amp;&amp; !<name>mPseudo</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsIAtom</name>*</type> <name>type</name> <init>= <expr><call><name><name>mOuterFrame</name>-&gt;<name>GetType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>type</name> == <name><name>nsGkAtoms</name>::<name>tableOuterFrame</name></name></expr>)</condition><then> <block>{
      <comment type="line">// If the frame is an outer table frame then we should get the style</comment>
      <comment type="line">// from the inner table frame.</comment>
      <expr_stmt><expr><name>mInnerFrame</name> = <call><name><name>mOuterFrame</name>-&gt;<name>GetFirstChild</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>mInnerFrame</name></expr></argument>, <argument><expr>"Outer table must have an inner"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr>!<call><name><name>mInnerFrame</name>-&gt;<name>GetNextSibling</name></name><argument_list>()</argument_list></call></expr></argument>,
                   <argument><expr>"Outer table frames should have just one child, the inner "
                   "table"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>mStyleContextHolder</name> = <call><name><name>mInnerFrame</name>-&gt;<name>GetStyleContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>mStyleContextHolder</name></expr></argument>, <argument><expr>"Frame without style context?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr>!<name>mStyleContextHolder</name> || <call><name><name>mStyleContextHolder</name>-&gt;<name>HasPseudoElementData</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <if>if <condition>(<expr><name>mStyleContextHolder</name></expr>)</condition><then> <block>{
      <comment type="line">// We want to check that going through this path because of</comment>
      <comment type="line">// HasPseudoElementData is rare, because it slows us down a good</comment>
      <comment type="line">// bit.  So check that we're really inside something associated</comment>
      <comment type="line">// with a pseudo-element that contains elements.</comment>
      <decl_stmt><decl><type><name>nsStyleContext</name> *</type><name>topWithPseudoElementData</name> <init>= <expr><name>mStyleContextHolder</name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><call><name><name>topWithPseudoElementData</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call>-&gt;<call><name>HasPseudoElementData</name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <expr_stmt><expr><name>topWithPseudoElementData</name> = <call><name><name>topWithPseudoElementData</name>-&gt;<name>GetParent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></while>
      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>nsCSSPseudoElements</name>::<name>PseudoElementContainsElements</name></name><argument_list>(
                     <argument><expr><call><name><name>topWithPseudoElementData</name>-&gt;<name>GetPseudo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr>"we should be in a pseudo-element that is expected to "
                   "contain elements"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="line">// Need to resolve a style context</comment>
    <expr_stmt><expr><name>mStyleContextHolder</name> =
      <call><name><name>nsComputedDOMStyle</name>::<name>GetStyleContextForContent</name></name><argument_list>(<argument><expr><name>mContent</name></expr></argument>,
                                                    <argument><expr><name>mPseudo</name></expr></argument>,
                                                    <argument><expr><name>mPresShell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>mStyleContextHolder</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>mPseudo</name> || !<call><name><name>mStyleContextHolder</name>-&gt;<name>HasPseudoElementData</name></name><argument_list>()</argument_list></call></expr></argument>,
                 <argument><expr>"should not have pseudo-element data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// Call our pointer-to-member-function.</comment>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr>(<name><name>this</name>-&gt;*</name>(<name><name>propEntry</name>-&gt;<name>mGetter</name></name>))(<name>aReturn</name>)</expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aReturn</name> = <name>nsnull</name></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><name>mOuterFrame</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mInnerFrame</name> = <name>nsnull</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mPresShell</name> = <name>nsnull</name></expr>;</expr_stmt>

  <comment type="line">// Release the current style context for it should be re-resolved</comment>
  <comment type="line">// whenever a frame is not available.</comment>
  <expr_stmt><expr><name>mStyleContextHolder</name> = <name>nsnull</name></expr>;</expr_stmt>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsComputedDOMStyle</name>::<name>RemoveProperty</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aPropertyName</name></decl></param>,
                                   <param><decl><type><name>nsAString</name>&amp;</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_DOM_NO_MODIFICATION_ALLOWED_ERR</name></expr>;</return>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetPropertyPriority</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aPropertyName</name></decl></param>,
                                        <param><decl><type><name>nsAString</name>&amp;</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aReturn</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsComputedDOMStyle</name>::<name>SetProperty</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aPropertyName</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aValue</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aPriority</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>NS_ERROR_DOM_NO_MODIFICATION_ALLOWED_ERR</name></expr>;</return>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsComputedDOMStyle</name>::<name>Item</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aIndex</name></decl></param>, <param><decl><type><name>nsAString</name>&amp;</type> <name>aReturn</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aReturn</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>length</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>ComputedStyleMapEntry</name>*</type> <name>propMap</name> <init>= <expr><call><name>GetQueryablePropertyMap</name><argument_list>(<argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>aIndex</name> &lt; <name>length</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>CopyASCIItoUTF16</name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::<name>GetStringValue</name></name><argument_list>(<argument><expr><name><name>propMap</name><index>[<expr><name>aIndex</name></expr>]</index></name>.<name>mProperty</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>aReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<comment type="line">// Property getters...</comment>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBinding</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleDisplay</name>*</type> <name>display</name> <init>= <expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>display</name>-&gt;<name>mBinding</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetURI</name></name><argument_list>(<argument><expr><name><name>display</name>-&gt;<name>mBinding</name>-&gt;<name>mURI</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetClear</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call>-&gt;<name>mBreakType</name></expr></argument>,
                                               <argument><expr><name><name>nsCSSProps</name>::<name>kClearKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetCssFloat</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call>-&gt;<name>mFloats</name></expr></argument>,
                                               <argument><expr><name><name>nsCSSProps</name>::<name>kFloatKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBottom</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetOffsetWidthFor</name><argument_list>(<argument><expr><name>NS_SIDE_BOTTOM</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetStackSizing</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><call><name>GetStyleXUL</name><argument_list>()</argument_list></call>-&gt;<name>mStretchStack</name> ? <name>eCSSKeyword_stretch_to_fit</name> :
                <name>eCSSKeyword_ignore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>SetToRGBAColor</name></name><parameter_list>(<param><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>aValue</name></decl></param>,
                                   <param><decl><type><name>nscolor</name></type> <name>aColor</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name>NS_GET_A</name><argument_list>(<argument><expr><name>aColor</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_transparent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>red</name>   <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>green</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>blue</name>  <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>alpha</name>  <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>red</name> &amp;&amp; <name>green</name> &amp;&amp; <name>blue</name> &amp;&amp; <name>alpha</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRUint8</name></type> <name>a</name> <init>= <expr><call><name>NS_GET_A</name><argument_list>(<argument><expr><name>aColor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsDOMCSSRGBColor</name> *</type><name>rgbColor</name> <init>=
      <expr>new <call><name>nsDOMCSSRGBColor</name><argument_list>(<argument><expr><name>red</name></expr></argument>, <argument><expr><name>green</name></expr></argument>, <argument><expr><name>blue</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>a</name> &lt; 255</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>rgbColor</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>red</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><call><name>NS_GET_R</name><argument_list>(<argument><expr><name>aColor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>green</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><call><name>NS_GET_G</name><argument_list>(<argument><expr><name>aColor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>blue</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><call><name>NS_GET_B</name><argument_list>(<argument><expr><name>aColor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>alpha</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><call><name><name>nsStyleUtil</name>::<name>ColorComponentToFloat</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>SetColor</name></name><argument_list>(<argument><expr><name>rgbColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <expr_stmt><expr>delete <name>red</name></expr>;</expr_stmt>
  <expr_stmt><expr>delete <name>green</name></expr>;</expr_stmt>
  <expr_stmt><expr>delete <name>blue</name></expr>;</expr_stmt>
  <expr_stmt><expr>delete <name>alpha</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetColor</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleColor</name>*</type> <name>color</name> <init>= <expr><call><name>GetStyleColor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>SetToRGBAColor</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>color</name>-&gt;<name>mColor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetOpacity</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call>-&gt;<name>mOpacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetColumnCount</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleColumn</name>*</type> <name>column</name> <init>= <expr><call><name>GetStyleColumn</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>column</name>-&gt;<name>mColumnCount</name></name> == <name>NS_STYLE_COLUMN_COUNT_AUTO</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><name><name>column</name>-&gt;<name>mColumnCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetColumnWidth</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// XXX fix the auto case. When we actually have a column frame, I think</comment>
  <comment type="line">// we should return the computed column width.</comment>
  <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GetStyleColumn</name><argument_list>()</argument_list></call>-&gt;<name>mColumnWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetColumnGap</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleColumn</name>*</type> <name>column</name> <init>= <expr><call><name>GetStyleColumn</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name><name>column</name>-&gt;<name>mColumnGap</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eStyleUnit_Normal</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><call><name>GetStyleFont</name><argument_list>()</argument_list></call>-&gt;<name><name>mFont</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GetStyleColumn</name><argument_list>()</argument_list></call>-&gt;<name>mColumnGap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetColumnRuleWidth</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>val</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><call><name>GetStyleColumn</name><argument_list>()</argument_list></call>-&gt;<call><name>GetComputedColumnRuleWidth</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetColumnRuleStyle</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>val</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>
  
  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleColumn</name><argument_list>()</argument_list></call>-&gt;<name>mColumnRuleStyle</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kBorderStyleKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetColumnRuleColor</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>val</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleColumn</name>*</type> <name>column</name> <init>= <expr><call><name>GetStyleColumn</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nscolor</name></type> <name>ruleColor</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name><name>column</name>-&gt;<name>mColumnRuleColorIsForeground</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>ruleColor</name> = <call><name>GetStyleColor</name><argument_list>()</argument_list></call>-&gt;<name>mColor</name></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><name>ruleColor</name> = <name><name>column</name>-&gt;<name>mColumnRuleColor</name></name></expr>;</expr_stmt>
  }</block></else></if>

  <expr_stmt><expr><call><name>SetToRGBAColor</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>ruleColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetContent</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleContent</name> *</type><name>content</name> <init>= <expr><call><name>GetStyleContent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name><name>content</name>-&gt;<name>ContentCount</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><call><name><name>content</name>-&gt;<name>ContentCount</name></name><argument_list>()</argument_list></call> == 1 &amp;&amp;
      <call><name><name>content</name>-&gt;<name>ContentAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<name>mType</name> == <name>eStyleContentType_AltContent</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword__moz_alt_content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init>, <name>i_end</name> <init>= <expr><call><name><name>content</name>-&gt;<name>ContentCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>i_end</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>val</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleContentData</name> &amp;</type><name>data</name> <init>= <expr><call><name><name>content</name>-&gt;<name>ContentAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name><name>data</name>.<name>mType</name></name></expr>)</condition> <block>{
      <case>case <expr><name>eStyleContentType_String</name></expr>:
        <block>{
          <decl_stmt><decl><type><name>nsString</name></type> <name>str</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>nsStyleUtil</name>::<name>AppendEscapedCSSString</name></name><argument_list>(
            <argument><expr><call><name>nsDependentString</name><argument_list>(<argument><expr><name><name>data</name>.<name>mContent</name>.<name>mString</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetString</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <break>break;</break>
      </case><case>case <expr><name>eStyleContentType_Image</name></expr>:
        <block>{
          <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
          <if>if <condition>(<expr><name><name>data</name>.<name>mContent</name>.<name>mImage</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>data</name>.<name>mContent</name>.<name>mImage</name>-&gt;<name>GetURI</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
          <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetURI</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <break>break;</break>
      </case><case>case <expr><name>eStyleContentType_Attr</name></expr>:
        <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetString</name></name><argument_list>(<argument><expr><call><name>nsDependentString</name><argument_list>(<argument><expr><name><name>data</name>.<name>mContent</name>.<name>mString</name></name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><name><name>nsIDOMCSSPrimitiveValue</name>::<name>CSS_ATTR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </case><case>case <expr><name>eStyleContentType_Counter</name></expr>:
      </case><case>case <expr><name>eStyleContentType_Counters</name></expr>:
        <block>{
          <comment type="block">/* FIXME: counters should really use an object */</comment>
          <decl_stmt><decl><type><name>nsAutoString</name></type> <name>str</name></decl>;</decl_stmt>
          <if>if <condition>(<expr><name><name>data</name>.<name>mType</name></name> == <name>eStyleContentType_Counter</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>str</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>"counter("</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then>
          <else>else <block>{
            <expr_stmt><expr><call><name><name>str</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>"counters("</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></else></if>
          <comment type="line">// WRITE ME</comment>
          <decl_stmt><decl><type><name><name>nsCSSValue</name>::<name>Array</name></name> *</type><name>a</name> <init>= <expr><name><name>data</name>.<name>mContent</name>.<name>mCounters</name></name></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name><name>str</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name><name>a</name>-&gt;<name>Item</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>GetStringBufferValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>PRInt32</name></type> <name>typeItem</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name><name>data</name>.<name>mType</name></name> == <name>eStyleContentType_Counters</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>typeItem</name> = 2</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>str</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>nsStyleUtil</name>::<name>AppendEscapedCSSString</name></name><argument_list>(
              <argument><expr><call><name>nsDependentString</name><argument_list>(<argument><expr><call><name><name>a</name>-&gt;<name>Item</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>.<call><name>GetStringBufferValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
          <expr_stmt><expr><call><name>NS_ABORT_IF_FALSE</name><argument_list>(<argument><expr><name>eCSSUnit_None</name> != <call><name><name>a</name>-&gt;<name>Item</name></name><argument_list>(<argument><expr><name>typeItem</name></expr></argument>)</argument_list></call>.<call><name>GetUnit</name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr>"'none' should be handled  as enumerated value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>PRInt32</name></type> <name>type</name> <init>= <expr><call><name><name>a</name>-&gt;<name>Item</name></name><argument_list>(<argument><expr><name>typeItem</name></expr></argument>)</argument_list></call>.<call><name>GetIntValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>type</name> != <name>NS_STYLE_LIST_STYLE_DECIMAL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>str</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>AppendASCIItoUTF16</name><argument_list>(
              <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeyword</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>nsCSSProps</name>::<name>kListStyleKTable</name></name></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>

          <expr_stmt><expr><call><name><name>str</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name>PRUnichar</name><argument_list>(<argument><expr>')'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetString</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>nsIDOMCSSPrimitiveValue</name>::<name>CSS_COUNTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <break>break;</break>
      </case><case>case <expr><name>eStyleContentType_OpenQuote</name></expr>:
        <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_open_quote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </case><case>case <expr><name>eStyleContentType_CloseQuote</name></expr>:
        <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_close_quote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </case><case>case <expr><name>eStyleContentType_NoOpenQuote</name></expr>:
        <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_no_open_quote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </case><case>case <expr><name>eStyleContentType_NoCloseQuote</name></expr>:
        <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_no_close_quote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </case><case>case <expr><name>eStyleContentType_AltContent</name></expr>:
      </case><default>default:
        <expr_stmt><expr><call><name>NS_NOTREACHED</name><argument_list>(<argument><expr>"unexpected type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </default>}</block></switch>
  }</block></for>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetCounterIncrement</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleContent</name> *</type><name>content</name> <init>= <expr><call><name>GetStyleContent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name><name>content</name>-&gt;<name>CounterIncrementCount</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init>, <name>i_end</name> <init>= <expr><call><name><name>content</name>-&gt;<name>CounterIncrementCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>i_end</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>name</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>name</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>name</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>
    
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>value</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>value</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>value</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleCounterData</name> *</type><name>data</name> <init>= <expr><call><name><name>content</name>-&gt;<name>GetCounterIncrementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>name</name>-&gt;<name>SetString</name></name><argument_list>(<argument><expr><name><name>data</name>-&gt;<name>mCounter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>value</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><name><name>data</name>-&gt;<name>mValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// XXX This should really be integer</comment>
  }</block></for>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Convert the stored representation into a list of two values and then hand
 * it back.
 */</comment>
<function><type><name>nsresult</name></type> <name><name>nsComputedDOMStyle</name>::<name>GetMozTransformOrigin</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name> **</type><name>aValue</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* We need to build up a list of two values.  We'll call them
   * width and height.
   */</comment>
  <decl_stmt><decl><type><name><name>nsAutoPtr</name><argument_list>&lt;<argument><expr><name>nsROCSSPrimitiveValue</name></expr></argument>&gt;</argument_list></name></type> <name>width</name><argument_list>(<argument><expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsAutoPtr</name><argument_list>&lt;<argument><expr><name>nsROCSSPrimitiveValue</name></expr></argument>&gt;</argument_list></name></type> <name>height</name><argument_list>(<argument><expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>width</name> || !<name>height</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <comment type="block">/* Now, get the values. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleDisplay</name>*</type> <name>display</name> <init>= <expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>display</name>-&gt;<name>mTransformOrigin</name><index>[<expr>0</expr>]</index></name></expr></argument>,
                  <argument><expr>&amp;<name><name>nsComputedDOMStyle</name>::<name>GetFrameBoundsWidthForTransform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>display</name>-&gt;<name>mTransformOrigin</name><index>[<expr>1</expr>]</index></name></expr></argument>,
                  <argument><expr>&amp;<name><name>nsComputedDOMStyle</name>::<name>GetFrameBoundsHeightForTransform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Store things as a value list, fail if we can't get one. */</comment>
  <decl_stmt><decl><type><name><name>nsAutoPtr</name><argument_list>&lt;<argument><expr><name>nsDOMCSSValueList</name></expr></argument>&gt;</argument_list></name></type> <name>valueList</name><argument_list>(<argument><expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>valueList</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <comment type="block">/* Chain on width and height, fail if we can't. */</comment>
  <if>if <condition>(<expr>!<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name><name>width</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name><name>height</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Release the pointer and call query interface!  We're done. */</comment>
  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><call><name><name>valueList</name>.<name>forget</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* If the property is "none", hand back "none" wrapped in a value.
 * Otherwise, compute the aggregate transform matrix and hands it back in a
 * "matrix" wrapper.
 */</comment>
<function><type><name>nsresult</name></type> <name><name>nsComputedDOMStyle</name>::<name>GetMozTransform</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name> **</type><name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name>NUM_FLOATS</name> <init>= <expr>4</expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* First, get the display data.  We'll need it. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleDisplay</name>*</type> <name>display</name> <init>= <expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* If the "no transforms" flag is set, then we should construct a
   * single-element entry and hand it back.
   */</comment>
  <if>if <condition>(<expr>!<name><name>display</name>-&gt;<name>mTransformPresent</name></name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name><argument_list>(<argument><expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>val</name></expr>)</condition><then>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>
    
    <comment type="block">/* Set it to "none." */</comment>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>
  
  <comment type="block">/* Otherwise, we need to compute the current value of the transform matrix,
   * store it in a string, and hand it back to the caller.
   */</comment>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>resultString</name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"matrix("</expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  
  <comment type="block">/* Now, we need to convert the matrix into a string.  We'll start by taking
   * the first four entries and converting them directly to floating-point
   * values.
   */</comment>
  <for>for (<init><decl><type><name>PRInt32</name></type> <name>index</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>index</name> &lt; <name>NUM_FLOATS</name></expr>;</condition> <incr><expr>++<name>index</name></expr></incr>) <block>{
    <expr_stmt><expr><call><name><name>resultString</name>.<name>AppendFloat</name></name><argument_list>(<argument><expr><call><name><name>display</name>-&gt;<name>mTransform</name>.<name>GetMainMatrixEntry</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>resultString</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <comment type="block">/* Use the inner frame for width and height.  If we fail, assume zero.
   * TODO: There is no good way for us to represent the case where there's no
   * frame, which is problematic.  The reason is that when we have percentage
   * transforms, there are a total of four stored matrix entries that influence
   * the transform based on the size of the element.  However, this poses a
   * problem, because only two of these values can be explicitly referenced
   * using the named transforms.  Until a real solution is found, we'll just
   * use this approach.
   */</comment>
  <decl_stmt><decl><type><name>nsRect</name></type> <name>bounds</name> <init>=
    <expr>(<name>mInnerFrame</name> ? <call><name><name>nsDisplayTransform</name>::<name>GetFrameBoundsForTransform</name></name><argument_list>(<argument><expr><name>mInnerFrame</name></expr></argument>)</argument_list></call> :
     <call><name>nsRect</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>

  <comment type="block">/* Now, compute the dX and dY components by adding the stored coord value
   * (in CSS pixels) to the translate values.
   */</comment>
  
  <decl_stmt><decl><type><name>float</name></type> <name>deltaX</name> <init>= <expr><call><name><name>nsPresContext</name>::<name>AppUnitsToFloatCSSPixels</name></name>
    <argument_list>(<argument><expr><call><name><name>display</name>-&gt;<name>mTransform</name>.<name>GetXTranslation</name></name><argument_list>(<argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>float</name></type> <name>deltaY</name> <init>= <expr><call><name><name>nsPresContext</name>::<name>AppUnitsToFloatCSSPixels</name></name>
    <argument_list>(<argument><expr><call><name><name>display</name>-&gt;<name>mTransform</name>.<name>GetYTranslation</name></name><argument_list>(<argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     

  <comment type="block">/* Append these values! */</comment>
  <expr_stmt><expr><call><name><name>resultString</name>.<name>AppendFloat</name></name><argument_list>(<argument><expr><name>deltaX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>resultString</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"px, "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>resultString</name>.<name>AppendFloat</name></name><argument_list>(<argument><expr><name>deltaY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>resultString</name>.<name>Append</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"px)"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create a value to hold our result. */</comment>
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>rv</name><argument_list>(<argument><expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>rv</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name><name>rv</name>-&gt;<name>SetString</name></name><argument_list>(<argument><expr><name>resultString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetCounterReset</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleContent</name> *</type><name>content</name> <init>= <expr><call><name>GetStyleContent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name><name>content</name>-&gt;<name>CounterResetCount</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init>, <name>i_end</name> <init>= <expr><call><name><name>content</name>-&gt;<name>CounterResetCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>i_end</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>name</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>name</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>name</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>
    
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>value</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>value</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>value</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleCounterData</name> *</type><name>data</name> <init>= <expr><call><name><name>content</name>-&gt;<name>GetCounterResetAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>name</name>-&gt;<name>SetString</name></name><argument_list>(<argument><expr><name><name>data</name>-&gt;<name>mCounter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>value</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><name><name>data</name>-&gt;<name>mValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// XXX This should really be integer</comment>
  }</block></for>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetQuotes</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleQuotes</name> *</type><name>quotes</name> <init>= <expr><call><name>GetStyleQuotes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name><name>quotes</name>-&gt;<name>QuotesCount</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init>, <name>i_end</name> <init>= <expr><call><name><name>quotes</name>-&gt;<name>QuotesCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>i_end</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>openVal</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>openVal</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>openVal</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>openVal</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>
    
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>closeVal</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>closeVal</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>closeVal</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>closeVal</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>nsString</name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>nsStyleUtil</name>::<name>AppendEscapedCSSString</name></name><argument_list>(<argument><expr>*<call><name><name>quotes</name>-&gt;<name>OpenQuoteAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>openVal</name>-&gt;<name>SetString</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>s</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>nsStyleUtil</name>::<name>AppendEscapedCSSString</name></name><argument_list>(<argument><expr>*<call><name><name>quotes</name>-&gt;<name>CloseQuoteAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>closeVal</name>-&gt;<name>SetString</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetFontFamily</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleFont</name>*</type> <name>font</name> <init>= <expr><call><name>GetStyleFont</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></type> <name>doc</name> <init>= <expr><call><name>do_QueryReferent</name><argument_list>(<argument><expr><name>mDocumentWeak</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr>"document is required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>nsIPresShell</name>*</type> <name>presShell</name> <init>= <expr><call><name><name>doc</name>-&gt;<name>GetPrimaryShell</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>presShell</name></expr></argument>, <argument><expr>"pres shell is required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>nsPresContext</name> *</type><name>presContext</name> <init>= <expr><call><name><name>presShell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>presContext</name></expr></argument>, <argument><expr>"pres context is required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsString</name>&amp;</type> <name>fontName</name> <init>= <expr><name><name>font</name>-&gt;<name>mFont</name>.<name>name</name></name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name><name>font</name>-&gt;<name>mGenericID</name></name> == <name>kGenericFont_NONE</name> &amp;&amp; !<name><name>font</name>-&gt;<name>mFont</name>.<name>systemFont</name></name></expr>)</condition><then> <block>{ 
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsFont</name>*</type> <name>defaultFont</name> <init>=
      <expr><call><name><name>presContext</name>-&gt;<name>GetDefaultFont</name></name><argument_list>(<argument><expr><name>kPresContext_DefaultVariableFont_ID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PRInt32</name></type> <name>lendiff</name> <init>= <expr><call><name><name>fontName</name>.<name>Length</name></name><argument_list>()</argument_list></call> - <call><name><name>defaultFont</name>-&gt;<name>name</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>lendiff</name> &gt; 0</expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetString</name></name><argument_list>(<argument><expr><call><name>Substring</name><argument_list>(<argument><expr><name>fontName</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>lendiff</name>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// -1 removes comma</comment>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetString</name></name><argument_list>(<argument><expr><name>fontName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetString</name></name><argument_list>(<argument><expr><name>fontName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetFontSize</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Note: GetStyleFont()-&gt;mSize is the 'computed size';</comment>
  <comment type="line">// GetStyleFont()-&gt;mFont.size is the 'actual size'</comment>
  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><call><name>GetStyleFont</name><argument_list>()</argument_list></call>-&gt;<name>mSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetFontSizeAdjust</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleFont</name> *</type><name>font</name> <init>= <expr><call><name>GetStyleFont</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>font</name>-&gt;<name>mFont</name>.<name>sizeAdjust</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><name><name>font</name>-&gt;<name>mFont</name>.<name>sizeAdjust</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetFontStretch</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleFont</name>*</type> <name>font</name> <init>= <expr><call><name>GetStyleFont</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// The computed value space isn't actually representable in string</comment>
  <comment type="line">// form, so just represent anything with widers or narrowers in it as</comment>
  <comment type="line">// 'wider' or 'narrower'.</comment>
  <expr_stmt><expr><call><name>PR_STATIC_ASSERT</name><argument_list>(<argument><expr><name>NS_FONT_STRETCH_NARROWER</name> % 2 == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PR_STATIC_ASSERT</name><argument_list>(<argument><expr><name>NS_FONT_STRETCH_WIDER</name> % 2 == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PR_STATIC_ASSERT</name><argument_list>(<argument><expr><name>NS_FONT_STRETCH_NARROWER</name> + <name>NS_FONT_STRETCH_WIDER</name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PR_STATIC_ASSERT</name><argument_list>(<argument><expr><name>NS_FONT_STRETCH_NARROWER</name> &lt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRInt16</name></type> <name>stretch</name> <init>= <expr><name><name>font</name>-&gt;<name>mFont</name>.<name>stretch</name></name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>stretch</name> &lt;= <name>NS_FONT_STRETCH_NARROWER</name> / 2</expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_narrower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <if>if <condition>(<expr><name>stretch</name> &gt;= <name>NS_FONT_STRETCH_WIDER</name> / 2</expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_wider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
      <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><name>stretch</name></expr></argument>, <argument><expr><name><name>nsCSSProps</name>::<name>kFontStretchKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetFontStyle</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleFont</name><argument_list>()</argument_list></call>-&gt;<name><name>mFont</name>.<name>style</name></name></expr></argument>,
                                               <argument><expr><name><name>nsCSSProps</name>::<name>kFontStyleKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetFontWeight</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleFont</name>*</type> <name>font</name> <init>= <expr><call><name>GetStyleFont</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PRUint16</name></type> <name>weight</name> <init>= <expr><name><name>font</name>-&gt;<name>mFont</name>.<name>weight</name></name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>weight</name> % 100 == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><name><name>font</name>-&gt;<name>mFont</name>.<name>weight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <if>if <condition>(<expr><name>weight</name> % 100 &gt; 50</expr>)</condition><then> <block>{
    <comment type="line">// FIXME: This doesn't represent the full range of computed values,</comment>
    <comment type="line">// but at least it's legal CSS.</comment>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_lighter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <comment type="line">// FIXME: This doesn't represent the full range of computed values,</comment>
    <comment type="line">// but at least it's legal CSS.</comment>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_bolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetFontVariant</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleFont</name><argument_list>()</argument_list></call>-&gt;<name><name>mFont</name>.<name>variant</name></name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kFontVariantKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBackgroundList</name></name><parameter_list>(<param><decl><type><name>PRUint8</name></type> <name><name>nsStyleBackground</name>::<name>Layer</name>::* <name>aMember</name></name></decl></param>,
                                      <param><decl><type><name>PRUint32</name></type> <name><name>nsStyleBackground</name>::* <name>aCount</name></name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>PRInt32</name></type> <name><name>aTable</name><index>[]</index></name></decl></param>,
                                      <param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleBackground</name>*</type> <name>bg</name> <init>= <expr><call><name>GetStyleBackground</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init>, <name>i_end</name> <init>= <expr><name><name>bg</name>-&gt;*<name>aCount</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>i_end</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>val</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><name><name>bg</name>-&gt;<name>mLayers</name><index>[<expr><name>i</name></expr>]</index></name>.*<name>aMember</name></expr></argument>,
                                                 <argument><expr><name>aTable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBackgroundAttachment</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBackgroundList</name><argument_list>(<argument><expr>&amp;<name><name>nsStyleBackground</name>::<name>Layer</name>::<name>mAttachment</name></name></expr></argument>,
                           <argument><expr>&amp;<name><name>nsStyleBackground</name>::<name>mAttachmentCount</name></name></expr></argument>,
                           <argument><expr><name><name>nsCSSProps</name>::<name>kBackgroundAttachmentKTable</name></name></expr></argument>,
                           <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBackgroundClip</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBackgroundList</name><argument_list>(<argument><expr>&amp;<name><name>nsStyleBackground</name>::<name>Layer</name>::<name>mClip</name></name></expr></argument>,
                           <argument><expr>&amp;<name><name>nsStyleBackground</name>::<name>mClipCount</name></name></expr></argument>,
                           <argument><expr><name><name>nsCSSProps</name>::<name>kBackgroundClipKTable</name></name></expr></argument>,
                           <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBackgroundColor</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleBackground</name>*</type> <name>color</name> <init>= <expr><call><name>GetStyleBackground</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>SetToRGBAColor</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>color</name>-&gt;<name>mBackgroundColor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>AppendCSSGradientLength</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsStyleCoord</name>&amp;</type> <name>aValue</name></decl></param>,
                        <param><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>aPrimitive</name></decl></param>,
                        <param><decl><type><name>nsAString</name>&amp;</type> <name>aString</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>tokenString</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name><name>aValue</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eStyleUnit_Coord</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>aPrimitive</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><call><name><name>aValue</name>.<name>GetCoordValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name><name>aPrimitive</name>-&gt;<name>SetPercent</name></name><argument_list>(<argument><expr><call><name><name>aValue</name>.<name>GetPercentValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
  <expr_stmt><expr><call><name><name>aPrimitive</name>-&gt;<name>GetCssText</name></name><argument_list>(<argument><expr><name>tokenString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>aString</name>.<name>Append</name></name><argument_list>(<argument><expr><name>tokenString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetCSSGradientString</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsStyleGradient</name>*</type> <name>aGradient</name></decl></param>,
                                         <param><decl><type><name>nsAString</name>&amp;</type> <name>aString</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>aGradient</name>-&gt;<name>mRepeating</name></name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name><name>aGradient</name>-&gt;<name>mShape</name></name> == <name>NS_STYLE_GRADIENT_SHAPE_LINEAR</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>aString</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"-moz-repeating-linear-gradient("</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
      <expr_stmt><expr><call><name><name>aString</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"-moz-repeating-radial-gradient("</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
  }</block></then> <else>else <block>{
    <if>if <condition>(<expr><name><name>aGradient</name>-&gt;<name>mShape</name></name> == <name>NS_STYLE_GRADIENT_SHAPE_LINEAR</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>aString</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"-moz-linear-gradient("</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
      <expr_stmt><expr><call><name><name>aString</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"-moz-radial-gradient("</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
  }</block></else></if>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>needSep</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>tokenString</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>tmpVal</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>tmpVal</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <if>if <condition>(<expr><name><name>aGradient</name>-&gt;<name>mBgPosX</name>.<name>mUnit</name></name> != <name>eStyleUnit_None</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>AppendCSSGradientLength</name><argument_list>(<argument><expr><name><name>aGradient</name>-&gt;<name>mBgPosX</name></name></expr></argument>, <argument><expr><name>tmpVal</name></expr></argument>, <argument><expr><name>aString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>needSep</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr><name><name>aGradient</name>-&gt;<name>mBgPosY</name>.<name>mUnit</name></name> != <name>eStyleUnit_None</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>needSep</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>aString</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>AppendCSSGradientLength</name><argument_list>(<argument><expr><name><name>aGradient</name>-&gt;<name>mBgPosY</name></name></expr></argument>, <argument><expr><name>tmpVal</name></expr></argument>, <argument><expr><name>aString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>needSep</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr><name><name>aGradient</name>-&gt;<name>mAngle</name>.<name>mUnit</name></name> != <name>eStyleUnit_None</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>needSep</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>aString</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>tmpVal</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><call><name><name>aGradient</name>-&gt;<name>mAngle</name>.<name>GetAngleValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tmpVal</name>-&gt;<name>GetCssText</name></name><argument_list>(<argument><expr><name>tokenString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aString</name>.<name>Append</name></name><argument_list>(<argument><expr><name>tokenString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name><name>aGradient</name>-&gt;<name>mAngle</name>.<name>mUnit</name></name></expr>)</condition> <block>{
    <case>case <expr><name>eStyleUnit_Degree</name></expr>: <expr_stmt><expr><call><name><name>aString</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>"deg"</expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>eStyleUnit_Grad</name></expr>: <expr_stmt><expr><call><name><name>aString</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>"grad"</expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>eStyleUnit_Radian</name></expr>: <expr_stmt><expr><call><name><name>aString</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>"rad"</expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    </case><default>default: <expr_stmt><expr><call><name>NS_NOTREACHED</name><argument_list>(<argument><expr>"unrecognized angle unit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </default>}</block></switch>
    <expr_stmt><expr><name>needSep</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><name><name>aGradient</name>-&gt;<name>mShape</name></name> != <name>NS_STYLE_GRADIENT_SHAPE_LINEAR</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>needSep</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>aString</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>AppendASCIItoUTF16</name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::
                       <name>ValueToKeyword</name></name><argument_list>(<argument><expr><name><name>aGradient</name>-&gt;<name>mShape</name></name></expr></argument>,
                                      <argument><expr><name><name>nsCSSProps</name>::<name>kRadialGradientShapeKTable</name></name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><name>aString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>aGradient</name>-&gt;<name>mSize</name></name> != <name>NS_STYLE_GRADIENT_SIZE_FARTHEST_CORNER</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>aString</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>AppendASCIItoUTF16</name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::
                         <name>ValueToKeyword</name></name><argument_list>(<argument><expr><name><name>aGradient</name>-&gt;<name>mSize</name></name></expr></argument>,
                                        <argument><expr><name><name>nsCSSProps</name>::<name>kRadialGradientSizeKTable</name></name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name>aString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>needSep</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  }</block></then></if>


  <comment type="line">// color stops</comment>
  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>aGradient</name>-&gt;<name>mStops</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <if>if <condition>(<expr><name>needSep</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>aString</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>SetToRGBAColor</name><argument_list>(<argument><expr><name>tmpVal</name></expr></argument>, <argument><expr><name><name>aGradient</name>-&gt;<name>mStops</name><index>[<expr><name>i</name></expr>]</index></name>.<name>mColor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>tmpVal</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>tmpVal</name>-&gt;<name>GetCssText</name></name><argument_list>(<argument><expr><name>tokenString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aString</name>.<name>Append</name></name><argument_list>(<argument><expr><name>tokenString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>aGradient</name>-&gt;<name>mStops</name><index>[<expr><name>i</name></expr>]</index></name>.<name><name>mLocation</name>.<name>mUnit</name></name> != <name>eStyleUnit_None</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>aString</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>AppendCSSGradientLength</name><argument_list>(<argument><expr><name><name>aGradient</name>-&gt;<name>mStops</name><index>[<expr><name>i</name></expr>]</index></name>.<name>mLocation</name></expr></argument>, <argument><expr><name>tmpVal</name></expr></argument>, <argument><expr><name>aString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>needSep</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  }</block></for>

  <expr_stmt><expr>delete <name>tmpVal</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>aString</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="line">// -moz-image-rect(&lt;uri&gt;, &lt;top&gt;, &lt;right&gt;, &lt;bottom&gt;, &lt;left&gt;)</comment>
<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetImageRectString</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>nsStyleSides</name>&amp;</type> <name>aCropRect</name></decl></param>,
                                       <param><decl><type><name>nsString</name>&amp;</type> <name>aString</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsDOMCSSValueList</name>*</type> <name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// &lt;uri&gt;</comment>
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>valURI</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>valURI</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>valURI</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <name>valURI</name></expr>;</expr_stmt>
    <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name><name>valURI</name>-&gt;<name>SetURI</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// &lt;top&gt;, &lt;right&gt;, &lt;bottom&gt;, &lt;left&gt;</comment>
  <macro><name>NS_FOR_CSS_SIDES</name><argument_list>(<argument>side</argument>)</argument_list></macro> <block>{
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>valSide</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>valSide</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>valSide</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valSide</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>valSide</name></expr></argument>, <argument><expr><call><name><name>aCropRect</name>.<name>Get</name></name><argument_list>(<argument><expr><name>side</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>argumentString</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>valueList</name>-&gt;<name>GetCssText</name></name><argument_list>(<argument><expr><name>argumentString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>aString</name> = <call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"-moz-image-rect("</expr></argument>)</argument_list></call> +
            <name>argumentString</name> +
            <call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>SetValueToStyleImage</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsStyleImage</name>&amp;</type> <name>aStyleImage</name></decl></param>,
                                         <param><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <switch>switch <condition>(<expr><call><name><name>aStyleImage</name>.<name>GetType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
    <case>case <expr><name>eStyleImageType_Image</name></expr>:
    <block>{
      <decl_stmt><decl><type><name>imgIRequest</name> *</type><name>req</name> <init>= <expr><call><name><name>aStyleImage</name>.<name>GetImageData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>req</name>-&gt;<name>GetURI</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleSides</name>*</type> <name>cropRect</name> <init>= <expr><call><name><name>aStyleImage</name>.<name>GetCropRect</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>cropRect</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>nsAutoString</name></type> <name>imageRectString</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetImageRectString</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr>*<name>cropRect</name></expr></argument>, <argument><expr><name>imageRectString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>SetString</name></name><argument_list>(<argument><expr><name>imageRectString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>SetURI</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
      <break>break;</break>
    }</block>
    </case><case>case <expr><name>eStyleImageType_Gradient</name></expr>:
    <block>{
      <decl_stmt><decl><type><name>nsAutoString</name></type> <name>gradientString</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetCSSGradientString</name><argument_list>(<argument><expr><call><name><name>aStyleImage</name>.<name>GetGradientData</name></name><argument_list>()</argument_list></call></expr></argument>,
                                         <argument><expr><name>gradientString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>SetString</name></name><argument_list>(<argument><expr><name>gradientString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    }</block>
    </case><case>case <expr><name>eStyleImageType_Null</name></expr>:
      <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </case><default>default:
      <expr_stmt><expr><call><name>NS_NOTREACHED</name><argument_list>(<argument><expr>"unexpected image type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return>
  </default>}</block></switch>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBackgroundImage</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleBackground</name>*</type> <name>bg</name> <init>= <expr><call><name>GetStyleBackground</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init>, <name>i_end</name> <init>= <expr><name><name>bg</name>-&gt;<name>mImageCount</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>i_end</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>val</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleImage</name>&amp;</type> <name>image</name> <init>= <expr><name><name>bg</name>-&gt;<name>mLayers</name><index>[<expr><name>i</name></expr>]</index></name>.<name>mImage</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>SetValueToStyleImage</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>
  }</block></for>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBackgroundInlinePolicy</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(
                  <argument><expr><call><name>GetStyleBackground</name><argument_list>()</argument_list></call>-&gt;<name>mBackgroundInlinePolicy</name></expr></argument>,
                  <argument><expr><name><name>nsCSSProps</name>::<name>kBackgroundInlinePolicyKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>  
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBackgroundOrigin</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBackgroundList</name><argument_list>(<argument><expr>&amp;<name><name>nsStyleBackground</name>::<name>Layer</name>::<name>mOrigin</name></name></expr></argument>,
                           <argument><expr>&amp;<name><name>nsStyleBackground</name>::<name>mOriginCount</name></name></expr></argument>,
                           <argument><expr><name><name>nsCSSProps</name>::<name>kBackgroundOriginKTable</name></name></expr></argument>,
                           <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBackgroundPosition</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleBackground</name>*</type> <name>bg</name> <init>= <expr><call><name>GetStyleBackground</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init>, <name>i_end</name> <init>= <expr><name><name>bg</name>-&gt;<name>mPositionCount</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>i_end</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>itemList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>itemList</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>itemList</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>itemList</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>valX</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>valX</name> || !<call><name><name>itemList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>valX</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>valX</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>valY</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>valY</name> || !<call><name><name>itemList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>valY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>valY</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>const</specifier> <name><name>nsStyleBackground</name>::<name>Position</name></name> &amp;</type><name>pos</name> <init>= <expr><name><name>bg</name>-&gt;<name>mLayers</name><index>[<expr><name>i</name></expr>]</index></name>.<name>mPosition</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>pos</name>.<name>mXIsPercent</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>valX</name>-&gt;<name>SetPercent</name></name><argument_list>(<argument><expr><name><name>pos</name>.<name>mXPosition</name>.<name>mFloat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>valX</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name><name>pos</name>.<name>mXPosition</name>.<name>mCoord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name><name>pos</name>.<name>mYIsPercent</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>valY</name>-&gt;<name>SetPercent</name></name><argument_list>(<argument><expr><name><name>pos</name>.<name>mYPosition</name>.<name>mFloat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>valY</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name><name>pos</name>.<name>mYPosition</name>.<name>mCoord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></for>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>  
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBackgroundRepeat</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBackgroundList</name><argument_list>(<argument><expr>&amp;<name><name>nsStyleBackground</name>::<name>Layer</name>::<name>mRepeat</name></name></expr></argument>,
                           <argument><expr>&amp;<name><name>nsStyleBackground</name>::<name>mRepeatCount</name></name></expr></argument>,
                           <argument><expr><name><name>nsCSSProps</name>::<name>kBackgroundRepeatKTable</name></name></expr></argument>,
                           <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetMozBackgroundSize</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleBackground</name>*</type> <name>bg</name> <init>= <expr><call><name>GetStyleBackground</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init>, <name>i_end</name> <init>= <expr><name><name>bg</name>-&gt;<name>mSizeCount</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>i_end</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>nsStyleBackground</name>::<name>Size</name></name> &amp;</type><name>size</name> <init>= <expr><name><name>bg</name>-&gt;<name>mLayers</name><index>[<expr><name>i</name></expr>]</index></name>.<name>mSize</name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name><name>size</name>.<name>mWidthType</name></name></expr>)</condition> <block>{
      <case>case <expr><name><name>nsStyleBackground</name>::<name>Size</name>::<name>eContain</name></name></expr>:
      </case><case>case <expr><name><name>nsStyleBackground</name>::<name>Size</name>::<name>eCover</name></name></expr>: <block>{
        <expr_stmt><expr><call><name>NS_ABORT_IF_FALSE</name><argument_list>(<argument><expr><name><name>size</name>.<name>mWidthType</name></name> == <name><name>size</name>.<name>mHeightType</name></name></expr></argument>,
                          <argument><expr>"unsynced types"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>nsCSSKeyword</name></type> <name>keyword</name> <init>= <expr><name><name>size</name>.<name>mWidthType</name></name> == <name><name>nsStyleBackground</name>::<name>Size</name>::<name>eContain</name></name>
                             ? <name>eCSSKeyword_contain</name>
                             : <name>eCSSKeyword_cover</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>val</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
          <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>
          <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>keyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      }</block>
      </case><default>default: <block>{
        <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>itemList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>itemList</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>itemList</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
          <expr_stmt><expr>delete <name>itemList</name></expr>;</expr_stmt>
          <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>valX</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>valY</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>valX</name> || !<call><name><name>itemList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>valX</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
          <expr_stmt><expr>delete <name>valX</name></expr>;</expr_stmt>
          <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>valY</name> || !<call><name><name>itemList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>valY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
          <expr_stmt><expr>delete <name>valY</name></expr>;</expr_stmt>
          <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>size</name>.<name>mWidthType</name></name> == <name><name>nsStyleBackground</name>::<name>Size</name>::<name>eAuto</name></name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>valX</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name><name>size</name>.<name>mWidthType</name></name> == <name><name>nsStyleBackground</name>::<name>Size</name>::<name>ePercentage</name></name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>valX</name>-&gt;<name>SetPercent</name></name><argument_list>(<argument><expr><name><name>size</name>.<name>mWidth</name>.<name>mFloat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name>NS_ABORT_IF_FALSE</name><argument_list>(<argument><expr><name><name>size</name>.<name>mWidthType</name></name> == <name><name>nsStyleBackground</name>::<name>Size</name>::<name>eLength</name></name></expr></argument>,
                            <argument><expr>"bad mWidthType"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>valX</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name><name>size</name>.<name>mWidth</name>.<name>mCoord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>

        <if>if <condition>(<expr><name><name>size</name>.<name>mHeightType</name></name> == <name><name>nsStyleBackground</name>::<name>Size</name>::<name>eAuto</name></name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>valY</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name><name>size</name>.<name>mHeightType</name></name> == <name><name>nsStyleBackground</name>::<name>Size</name>::<name>ePercentage</name></name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>valY</name>-&gt;<name>SetPercent</name></name><argument_list>(<argument><expr><name><name>size</name>.<name>mHeight</name>.<name>mFloat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name>NS_ABORT_IF_FALSE</name><argument_list>(<argument><expr><name><name>size</name>.<name>mHeightType</name></name> == <name><name>nsStyleBackground</name>::<name>Size</name>::<name>eLength</name></name></expr></argument>,
                            <argument><expr>"bad mHeightType"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>valY</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name><name>size</name>.<name>mHeight</name>.<name>mCoord</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>
        <break>break;</break>
      }</block>
    </default>}</block></switch>
  }</block></for>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetPadding</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// return null per spec.</comment>
  <expr_stmt><expr>*<name>aValue</name> = <name>nsnull</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetPaddingTop</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetPaddingWidthFor</name><argument_list>(<argument><expr><name>NS_SIDE_TOP</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetPaddingBottom</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetPaddingWidthFor</name><argument_list>(<argument><expr><name>NS_SIDE_BOTTOM</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetPaddingLeft</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetPaddingWidthFor</name><argument_list>(<argument><expr><name>NS_SIDE_LEFT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetPaddingRight</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetPaddingWidthFor</name><argument_list>(<argument><expr><name>NS_SIDE_RIGHT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderCollapse</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleTableBorder</name><argument_list>()</argument_list></call>-&gt;<name>mBorderCollapse</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kBorderCollapseKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderSpacing</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>xSpacing</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>xSpacing</name></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr>!<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>xSpacing</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
    <expr_stmt><expr>delete <name>xSpacing</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>
    
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>ySpacing</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>ySpacing</name></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr>!<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>ySpacing</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
    <expr_stmt><expr>delete <name>ySpacing</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleTableBorder</name> *</type><name>border</name> <init>= <expr><call><name>GetStyleTableBorder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>xSpacing</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name><name>border</name>-&gt;<name>mBorderSpacingX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>ySpacing</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name><name>border</name>-&gt;<name>mBorderSpacingY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetCaptionSide</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleTableBorder</name><argument_list>()</argument_list></call>-&gt;<name>mCaptionSide</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kCaptionSideKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetEmptyCells</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleTableBorder</name><argument_list>()</argument_list></call>-&gt;<name>mEmptyCells</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kEmptyCellsKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetTableLayout</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleTable</name><argument_list>()</argument_list></call>-&gt;<name>mLayoutStrategy</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kTableLayoutKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderStyle</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// return null per spec.</comment>
  <expr_stmt><expr>*<name>aValue</name> = <name>nsnull</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderTopStyle</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBorderStyleFor</name><argument_list>(<argument><expr><name>NS_SIDE_TOP</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderBottomStyle</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBorderStyleFor</name><argument_list>(<argument><expr><name>NS_SIDE_BOTTOM</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderLeftStyle</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBorderStyleFor</name><argument_list>(<argument><expr><name>NS_SIDE_LEFT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderRightStyle</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBorderStyleFor</name><argument_list>(<argument><expr><name>NS_SIDE_RIGHT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderBottomColors</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBorderColorsFor</name><argument_list>(<argument><expr><name>NS_SIDE_BOTTOM</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderLeftColors</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBorderColorsFor</name><argument_list>(<argument><expr><name>NS_SIDE_LEFT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderRightColors</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBorderColorsFor</name><argument_list>(<argument><expr><name>NS_SIDE_RIGHT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderTopColors</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBorderColorsFor</name><argument_list>(<argument><expr><name>NS_SIDE_TOP</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderRadiusBottomLeft</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetEllipseRadii</name><argument_list>(<argument><expr><call><name>GetStyleBorder</name><argument_list>()</argument_list></call>-&gt;<name>mBorderRadius</name></expr></argument>,
                         <argument><expr><name>NS_CORNER_BOTTOM_LEFT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderRadiusBottomRight</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetEllipseRadii</name><argument_list>(<argument><expr><call><name>GetStyleBorder</name><argument_list>()</argument_list></call>-&gt;<name>mBorderRadius</name></expr></argument>,
                         <argument><expr><name>NS_CORNER_BOTTOM_RIGHT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderRadiusTopLeft</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetEllipseRadii</name><argument_list>(<argument><expr><call><name>GetStyleBorder</name><argument_list>()</argument_list></call>-&gt;<name>mBorderRadius</name></expr></argument>,
                         <argument><expr><name>NS_CORNER_TOP_LEFT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderRadiusTopRight</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetEllipseRadii</name><argument_list>(<argument><expr><call><name>GetStyleBorder</name><argument_list>()</argument_list></call>-&gt;<name>mBorderRadius</name></expr></argument>,
                         <argument><expr><name>NS_CORNER_TOP_RIGHT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderWidth</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// return null per spec.</comment>
  <expr_stmt><expr>*<name>aValue</name> = <name>nsnull</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderTopWidth</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBorderWidthFor</name><argument_list>(<argument><expr><name>NS_SIDE_TOP</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderBottomWidth</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBorderWidthFor</name><argument_list>(<argument><expr><name>NS_SIDE_BOTTOM</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderLeftWidth</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBorderWidthFor</name><argument_list>(<argument><expr><name>NS_SIDE_LEFT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderRightWidth</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBorderWidthFor</name><argument_list>(<argument><expr><name>NS_SIDE_RIGHT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderTopColor</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBorderColorFor</name><argument_list>(<argument><expr><name>NS_SIDE_TOP</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderBottomColor</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBorderColorFor</name><argument_list>(<argument><expr><name>NS_SIDE_BOTTOM</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderLeftColor</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBorderColorFor</name><argument_list>(<argument><expr><name>NS_SIDE_LEFT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderRightColor</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetBorderColorFor</name><argument_list>(<argument><expr><name>NS_SIDE_RIGHT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetMarginWidth</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// return null per spec.</comment>
  <expr_stmt><expr>*<name>aValue</name> = <name>nsnull</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetMarginTopWidth</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetMarginWidthFor</name><argument_list>(<argument><expr><name>NS_SIDE_TOP</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetMarginBottomWidth</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetMarginWidthFor</name><argument_list>(<argument><expr><name>NS_SIDE_BOTTOM</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetMarginLeftWidth</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetMarginWidthFor</name><argument_list>(<argument><expr><name>NS_SIDE_LEFT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetMarginRightWidth</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetMarginWidthFor</name><argument_list>(<argument><expr><name>NS_SIDE_RIGHT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetMarkerOffset</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GetStyleContent</name><argument_list>()</argument_list></call>-&gt;<name>mMarkerOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetOutline</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// return null per spec.</comment>
  <expr_stmt><expr>*<name>aValue</name> = <name>nsnull</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetOutlineWidth</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleOutline</name>*</type> <name>outline</name> <init>= <expr><call><name>GetStyleOutline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nscoord</name></type> <name>width</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name><name>outline</name>-&gt;<name>GetOutlineStyle</name></name><argument_list>()</argument_list></call> == <name>NS_STYLE_BORDER_STYLE_NONE</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>outline</name>-&gt;<name>GetOutlineWidth</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call> &amp;&amp; <name>width</name> == 0</expr></argument>,
                 <argument><expr>"unexpected width"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>width</name> = 0</expr>;</expr_stmt>
  }</block></then> <else>else <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>res</name> <init>=
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr><call><name><name>outline</name>-&gt;<name>GetOutlineWidth</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr>"percent outline doesn't exist"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetOutlineStyle</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleOutline</name><argument_list>()</argument_list></call>-&gt;<call><name>GetOutlineStyle</name><argument_list>()</argument_list></call></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kOutlineStyleKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetOutlineOffset</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><call><name>GetStyleOutline</name><argument_list>()</argument_list></call>-&gt;<name>mOutlineOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetOutlineRadiusBottomLeft</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetEllipseRadii</name><argument_list>(<argument><expr><call><name>GetStyleOutline</name><argument_list>()</argument_list></call>-&gt;<name>mOutlineRadius</name></expr></argument>,
                         <argument><expr><name>NS_CORNER_BOTTOM_LEFT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetOutlineRadiusBottomRight</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetEllipseRadii</name><argument_list>(<argument><expr><call><name>GetStyleOutline</name><argument_list>()</argument_list></call>-&gt;<name>mOutlineRadius</name></expr></argument>,
                         <argument><expr><name>NS_CORNER_BOTTOM_RIGHT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetOutlineRadiusTopLeft</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetEllipseRadii</name><argument_list>(<argument><expr><call><name>GetStyleOutline</name><argument_list>()</argument_list></call>-&gt;<name>mOutlineRadius</name></expr></argument>,
                         <argument><expr><name>NS_CORNER_TOP_LEFT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetOutlineRadiusTopRight</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetEllipseRadii</name><argument_list>(<argument><expr><call><name>GetStyleOutline</name><argument_list>()</argument_list></call>-&gt;<name>mOutlineRadius</name></expr></argument>,
                         <argument><expr><name>NS_CORNER_TOP_RIGHT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetOutlineColor</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nscolor</name></type> <name>color</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GFX_HAS_INVERT</name></cpp:ifdef>
  <expr_stmt><expr><call><name>GetStyleOutline</name><argument_list>()</argument_list></call>-&gt;<call><name>GetOutlineColor</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if>if <condition>(<expr>!<call><name>GetStyleOutline</name><argument_list>()</argument_list></call>-&gt;<call><name>GetOutlineColor</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><name>color</name> = <call><name>GetStyleColor</name><argument_list>()</argument_list></call>-&gt;<name>mColor</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>SetToRGBAColor</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetEllipseRadii</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsStyleCorners</name>&amp;</type> <name>aRadius</name></decl></param>,
                                    <param><decl><type><name>PRUint8</name></type> <name>aFullCorner</name></decl></param>,
                                    <param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleCoord</name>&amp;</type> <name>radiusX</name>
    <init>= <expr><call><name><name>aRadius</name>.<name>Get</name></name><argument_list>(<argument><expr><call><name>NS_FULL_TO_HALF_CORNER</name><argument_list>(<argument><expr><name>aFullCorner</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleCoord</name>&amp;</type> <name>radiusY</name>
    <init>= <expr><call><name><name>aRadius</name>.<name>Get</name></name><argument_list>(<argument><expr><call><name>NS_FULL_TO_HALF_CORNER</name><argument_list>(<argument><expr><name>aFullCorner</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <comment type="line">// for compatibility, return a single value if X and Y are equal</comment>
  <if>if <condition>(<expr><name>radiusX</name> == <name>radiusY</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>radiusX</name></expr></argument>,
                    <argument><expr>&amp;<name><name>nsComputedDOMStyle</name>::<name>GetFrameBorderRectWidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then> <else>else <block>{
    <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>valX</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>valX</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>valX</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valX</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>valY</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>valY</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>valY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valY</name></expr>;</expr_stmt>
      <comment type="line">// valX deleted by valueList destructor</comment>
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>valX</name></expr></argument>, <argument><expr><name>radiusX</name></expr></argument>,
                    <argument><expr>&amp;<name><name>nsComputedDOMStyle</name>::<name>GetFrameBorderRectWidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>valY</name></expr></argument>, <argument><expr><name>radiusY</name></expr></argument>,
                    <argument><expr>&amp;<name><name>nsComputedDOMStyle</name>::<name>GetFrameBorderRectWidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></else></if>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetCSSShadowArray</name></name><parameter_list>(<param><decl><type><name>nsCSSShadowArray</name>*</type> <name>aArray</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>nscolor</name>&amp;</type> <name>aDefaultColor</name></decl></param>,
                                      <param><decl><type><name>PRBool</name></type> <name>aIsBoxShadow</name></decl></param>,
                                      <param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>aArray</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr>static <name>nscoord</name> <name><name>nsCSSShadowItem</name>::*</name> const <name><name>shadowValuesNoSpread</name><index>[]</index></name> = <block>{
    <expr>&amp;<name><name>nsCSSShadowItem</name>::<name>mXOffset</name></name></expr>,
    <expr>&amp;<name><name>nsCSSShadowItem</name>::<name>mYOffset</name></name></expr>,
    <expr>&amp;<name><name>nsCSSShadowItem</name>::<name>mRadius</name></name></expr>
  }</block></expr>;</expr_stmt>

  <expr_stmt><expr>static <name>nscoord</name> <name><name>nsCSSShadowItem</name>::*</name> const <name><name>shadowValuesWithSpread</name><index>[]</index></name> = <block>{
    <expr>&amp;<name><name>nsCSSShadowItem</name>::<name>mXOffset</name></name></expr>,
    <expr>&amp;<name><name>nsCSSShadowItem</name>::<name>mYOffset</name></name></expr>,
    <expr>&amp;<name><name>nsCSSShadowItem</name>::<name>mRadius</name></name></expr>,
    <expr>&amp;<name><name>nsCSSShadowItem</name>::<name>mSpread</name></name></expr>
  }</block></expr>;</expr_stmt>

  <expr_stmt><expr><name>nscoord</name> <name><name>nsCSSShadowItem</name>::*</name> const * <name>shadowValues</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>shadowValuesLength</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>aIsBoxShadow</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>shadowValues</name> = <name>shadowValuesWithSpread</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>shadowValuesLength</name> = <call><name>NS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>shadowValuesWithSpread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><name>shadowValues</name> = <name>shadowValuesNoSpread</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>shadowValuesLength</name> = <call><name>NS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>shadowValuesNoSpread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><decl><type><name>nsCSSShadowItem</name> *</type><name>item</name> <init>= <expr><call><name><name>aArray</name>-&gt;<name>ShadowAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init>,
                   *<name>item_end</name> <init>= <expr><name>item</name> + <call><name><name>aArray</name>-&gt;<name>Length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
       <condition><expr><name>item</name> &lt; <name>item_end</name></expr>;</condition> <incr><expr>++<name>item</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>itemList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>itemList</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>itemList</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>itemList</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// Color is either the specified shadow color or the foreground color</comment>
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>val</name> || !<call><name><name>itemList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>nscolor</name></type> <name>shadowColor</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>item</name>-&gt;<name>mHasColor</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>shadowColor</name> = <name><name>item</name>-&gt;<name>mColor</name></name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>shadowColor</name> = <name>aDefaultColor</name></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>SetToRGBAColor</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>shadowColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set the offsets, blur radius, and spread if available</comment>
    <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>shadowValuesLength</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
      <expr_stmt><expr><name>val</name> = <call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>!<name>val</name> || !<call><name><name>itemList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>
        <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
      }</block></then></if>
      <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name><name>item</name>-&gt;*</name>(<name><name>shadowValues</name><index>[<expr><name>i</name></expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <if>if <condition>(<expr><name><name>item</name>-&gt;<name>mInset</name></name> &amp;&amp; <name>aIsBoxShadow</name></expr>)</condition><then> <block>{
      <comment type="line">// This is an inset box-shadow</comment>
      <expr_stmt><expr><name>val</name> = <call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>!<name>val</name> || !<call><name><name>itemList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>
        <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
      }</block></then></if>
      <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
        <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><name>NS_STYLE_BOX_SHADOW_INSET</name></expr></argument>,
                                       <argument><expr><name><name>nsCSSProps</name>::<name>kBoxShadowTypeKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBoxShadow</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetCSSShadowArray</name><argument_list>(<argument><expr><call><name>GetStyleBorder</name><argument_list>()</argument_list></call>-&gt;<name>mBoxShadow</name></expr></argument>,
                           <argument><expr><call><name>GetStyleColor</name><argument_list>()</argument_list></call>-&gt;<name>mColor</name></expr></argument>,
                           <argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetZIndex</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GetStylePosition</name><argument_list>()</argument_list></call>-&gt;<name>mZIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetListStyleImage</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleList</name>*</type> <name>list</name> <init>= <expr><call><name>GetStyleList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name><name>list</name>-&gt;<name>mListStyleImage</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>list</name>-&gt;<name>mListStyleImage</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>list</name>-&gt;<name>mListStyleImage</name>-&gt;<name>GetURI</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetURI</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
    
  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetListStylePosition</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleList</name><argument_list>()</argument_list></call>-&gt;<name>mListStylePosition</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kListStylePositionKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetListStyleType</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleList</name><argument_list>()</argument_list></call>-&gt;<name>mListStyleType</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kListStyleKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetImageRegion</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleList</name>*</type> <name>list</name> <init>= <expr><call><name>GetStyleList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>topVal</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>rightVal</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>bottomVal</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>leftVal</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name><name>list</name>-&gt;<name>mImageRegion</name>.<name>width</name></name> &lt;= 0 || <name><name>list</name>-&gt;<name>mImageRegion</name>.<name>height</name></name> &lt;= 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <comment type="line">// create the cssvalues for the sides, stick them in the rect object</comment>
    <expr_stmt><expr><name>topVal</name> = <call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rightVal</name> = <call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bottomVal</name> = <call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>leftVal</name> = <call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>topVal</name> &amp;&amp; <name>rightVal</name> &amp;&amp; <name>bottomVal</name> &amp;&amp; <name>leftVal</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsDOMCSSRect</name> *</type> <name>domRect</name> <init>= <expr>new <call><name>nsDOMCSSRect</name><argument_list>(<argument><expr><name>topVal</name></expr></argument>, <argument><expr><name>rightVal</name></expr></argument>,
                                                <argument><expr><name>bottomVal</name></expr></argument>, <argument><expr><name>leftVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>domRect</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>topVal</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name><name>list</name>-&gt;<name>mImageRegion</name>.<name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rightVal</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name><name>list</name>-&gt;<name>mImageRegion</name>.<name>width</name></name> + <name><name>list</name>-&gt;<name>mImageRegion</name>.<name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bottomVal</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name><name>list</name>-&gt;<name>mImageRegion</name>.<name>height</name></name> + <name><name>list</name>-&gt;<name>mImageRegion</name>.<name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>leftVal</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name><name>list</name>-&gt;<name>mImageRegion</name>.<name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetRect</name></name><argument_list>(<argument><expr><name>domRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></else></if>

  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <name>topVal</name></expr>;</expr_stmt>
    <expr_stmt><expr>delete <name>rightVal</name></expr>;</expr_stmt>
    <expr_stmt><expr>delete <name>bottomVal</name></expr>;</expr_stmt>
    <expr_stmt><expr>delete <name>leftVal</name></expr>;</expr_stmt>
    <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>

    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>
  
  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetLineHeight</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nscoord</name></type> <name>lineHeight</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>GetLineHeightCoord</name><argument_list>(<argument><expr><name>lineHeight</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name>lineHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GetStyleText</name><argument_list>()</argument_list></call>-&gt;<name>mLineHeight</name></expr></argument>,
                    <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name><name>nsCSSProps</name>::<name>kLineHeightKTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetVerticalAlign</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GetStyleTextReset</name><argument_list>()</argument_list></call>-&gt;<name>mVerticalAlign</name></expr></argument>,
                  <argument><expr>&amp;<name><name>nsComputedDOMStyle</name>::<name>GetLineHeightCoord</name></name></expr></argument>,
                  <argument><expr><name><name>nsCSSProps</name>::<name>kVerticalAlignKTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetTextAlign</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleText</name><argument_list>()</argument_list></call>-&gt;<name>mTextAlign</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kTextAlignKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetTextDecoration</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>intValue</name> <init>= <expr><call><name>GetStyleTextReset</name><argument_list>()</argument_list></call>-&gt;<name>mTextDecoration</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>NS_STYLE_TEXT_DECORATION_NONE</name> == <name>intValue</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <decl_stmt><decl><type><name>nsAutoString</name></type> <name>decorationString</name></decl>;</decl_stmt>
    <comment type="line">// Clear the -moz-anchor-decoration bit and the OVERRIDE_ALL bits -- we</comment>
    <comment type="line">// don't want these to appear in the computed style.</comment>
    <expr_stmt><expr><name>intValue</name> &amp;= ~(<name>NS_STYLE_TEXT_DECORATION_PREF_ANCHORS</name> |
                  <name>NS_STYLE_TEXT_DECORATION_OVERRIDE_ALL</name>)</expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>nsStyleUtil</name>::<name>AppendBitmaskCSSValue</name></name><argument_list>(<argument><expr><name>eCSSProperty_text_decoration</name></expr></argument>, <argument><expr><name>intValue</name></expr></argument>,
                                       <argument><expr><name>NS_STYLE_TEXT_DECORATION_UNDERLINE</name></expr></argument>,
                                       <argument><expr><name>NS_STYLE_TEXT_DECORATION_BLINK</name></expr></argument>,
                                       <argument><expr><name>decorationString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetString</name></name><argument_list>(<argument><expr><name>decorationString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetTextIndent</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GetStyleText</name><argument_list>()</argument_list></call>-&gt;<name>mTextIndent</name></expr></argument>,
                  <argument><expr>&amp;<name><name>nsComputedDOMStyle</name>::<name>GetCBContentWidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetTextShadow</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetCSSShadowArray</name><argument_list>(<argument><expr><call><name>GetStyleText</name><argument_list>()</argument_list></call>-&gt;<name>mTextShadow</name></expr></argument>,
                           <argument><expr><call><name>GetStyleColor</name><argument_list>()</argument_list></call>-&gt;<name>mColor</name></expr></argument>,
                           <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetTextTransform</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleText</name><argument_list>()</argument_list></call>-&gt;<name>mTextTransform</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kTextTransformKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetMozTabSize</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><call><name>GetStyleText</name><argument_list>()</argument_list></call>-&gt;<name>mTabSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetLetterSpacing</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GetStyleText</name><argument_list>()</argument_list></call>-&gt;<name>mLetterSpacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetWordSpacing</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><call><name>GetStyleText</name><argument_list>()</argument_list></call>-&gt;<name>mWordSpacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetWhiteSpace</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleText</name><argument_list>()</argument_list></call>-&gt;<name>mWhiteSpace</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kWhitespaceKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetWindowShadow</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleUIReset</name><argument_list>()</argument_list></call>-&gt;<name>mWindowShadow</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kWindowShadowKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetWordWrap</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleText</name><argument_list>()</argument_list></call>-&gt;<name>mWordWrap</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kWordwrapKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetPointerEvents</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleVisibility</name><argument_list>()</argument_list></call>-&gt;<name>mPointerEvents</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kPointerEventsKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetVisibility</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleVisibility</name><argument_list>()</argument_list></call>-&gt;<name>mVisible</name></expr></argument>,
                                               <argument><expr><name><name>nsCSSProps</name>::<name>kVisibilityKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetDirection</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleVisibility</name><argument_list>()</argument_list></call>-&gt;<name>mDirection</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kDirectionKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetUnicodeBidi</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleTextReset</name><argument_list>()</argument_list></call>-&gt;<name>mUnicodeBidi</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kUnicodeBidiKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetCursor</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleUserInterface</name> *</type><name>ui</name> <init>= <expr><call><name>GetStyleUserInterface</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for (<init><decl><type><name>nsCursorImage</name> *</type><name>item</name> <init>= <expr><name><name>ui</name>-&gt;<name>mCursorArray</name></name></expr></init>,
         *<name>item_end</name> <init>= <expr><name><name>ui</name>-&gt;<name>mCursorArray</name></name> + <name><name>ui</name>-&gt;<name>mCursorArrayLength</name></name></expr></init></decl>;</init>
       <condition><expr><name>item</name> &lt; <name>item_end</name></expr>;</condition> <incr><expr>++<name>item</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>itemList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>itemList</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>itemList</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>itemList</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>item</name>-&gt;<name>mImage</name>-&gt;<name>GetURI</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>val</name> || !<call><name><name>itemList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetURI</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>item</name>-&gt;<name>mHaveHotspot</name></name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>valX</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>valX</name> || !<call><name><name>itemList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>valX</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>delete <name>valX</name></expr>;</expr_stmt>
        <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
      }</block></then></if>
      <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>valY</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>valY</name> || !<call><name><name>itemList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>valY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>delete <name>valY</name></expr>;</expr_stmt>
        <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
      }</block></then></if>

      <expr_stmt><expr><call><name><name>valX</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><name><name>item</name>-&gt;<name>mHotspotX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>valY</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><name><name>item</name>-&gt;<name>mHotspotY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>

  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>val</name></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><name><name>ui</name>-&gt;<name>mCursor</name></name></expr></argument>,
                                               <argument><expr><name><name>nsCSSProps</name>::<name>kCursorKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
    <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetAppearance</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call>-&gt;<name>mAppearance</name></expr></argument>,
                                               <argument><expr><name><name>nsCSSProps</name>::<name>kAppearanceKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBoxAlign</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleXUL</name><argument_list>()</argument_list></call>-&gt;<name>mBoxAlign</name></expr></argument>,
                                               <argument><expr><name><name>nsCSSProps</name>::<name>kBoxAlignKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBoxDirection</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleXUL</name><argument_list>()</argument_list></call>-&gt;<name>mBoxDirection</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kBoxDirectionKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBoxFlex</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><call><name>GetStyleXUL</name><argument_list>()</argument_list></call>-&gt;<name>mBoxFlex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBoxOrdinalGroup</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><call><name>GetStyleXUL</name><argument_list>()</argument_list></call>-&gt;<name>mBoxOrdinal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBoxOrient</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleXUL</name><argument_list>()</argument_list></call>-&gt;<name>mBoxOrient</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kBoxOrientKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBoxPack</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleXUL</name><argument_list>()</argument_list></call>-&gt;<name>mBoxPack</name></expr></argument>,
                                               <argument><expr><name><name>nsCSSProps</name>::<name>kBoxPackKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBoxSizing</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStylePosition</name><argument_list>()</argument_list></call>-&gt;<name>mBoxSizing</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kBoxSizingKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderImage</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleBorder</name>*</type> <name>border</name> <init>= <expr><call><name>GetStyleBorder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <comment type="line">// none</comment>
  <if>if <condition>(<expr>!<call><name><name>border</name>-&gt;<name>GetBorderImage</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>valNone</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valNone</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>valNone</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valNone</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>
  
  <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="line">// uri</comment>
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>valURI</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>valURI</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>valURI</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <name>valURI</name></expr>;</expr_stmt>
    <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>border</name>-&gt;<name>GetBorderImage</name></name><argument_list>()</argument_list></call>-&gt;<call><name>GetURI</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>valURI</name>-&gt;<name>SetURI</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="line">// four split numbers</comment>
  <macro><name>NS_FOR_CSS_SIDES</name><argument_list>(<argument>side</argument>)</argument_list></macro> <block>{
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>valSplit</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>valSplit</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>valSplit</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valSplit</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>valSplit</name></expr></argument>, <argument><expr><call><name><name>border</name>-&gt;<name>mBorderImageSplit</name>.<name>Get</name></name><argument_list>(<argument><expr><name>side</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                    <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  
  <comment type="line">// copy of border-width</comment>
  <if>if <condition>(<expr><name><name>border</name>-&gt;<name>mHaveBorderImageWidth</name></name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>slash</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>slash</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>slash</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>slash</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>slash</name>-&gt;<name>SetString</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>NS_FOR_CSS_SIDES</name><argument_list>(<argument>side</argument>)</argument_list></macro> <block>{
      <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>borderWidth</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>borderWidth</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>borderWidth</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>delete <name>borderWidth</name></expr>;</expr_stmt>
        <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
      }</block></then></if>
      <decl_stmt><decl><type><name>nscoord</name></type> <name>width</name> <init>= <expr><call><name>GetStyleBorder</name><argument_list>()</argument_list></call>-&gt;<call><name><name>mBorderImageWidth</name>.<name>side</name></name><argument_list>(<argument><expr><name>side</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>borderWidth</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
  }</block></then></if>
  
  <comment type="line">// first keyword</comment>
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>keyword</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>keyword</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>keyword</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <name>keyword</name></expr>;</expr_stmt>
    <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name><name>keyword</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleBorder</name><argument_list>()</argument_list></call>-&gt;<name>mBorderImageHFill</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kBorderImageKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="line">// second keyword</comment>
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>keyword2</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>keyword2</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>keyword2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <name>keyword2</name></expr>;</expr_stmt>
    <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name><name>keyword2</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleBorder</name><argument_list>()</argument_list></call>-&gt;<name>mBorderImageVFill</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kBorderImageKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetFloatEdge</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleBorder</name><argument_list>()</argument_list></call>-&gt;<name>mFloatEdge</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kFloatEdgeKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetForceBrokenImageIcon</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><call><name>GetStyleUIReset</name><argument_list>()</argument_list></call>-&gt;<name>mForceBrokenImageIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetIMEMode</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleUIReset</name><argument_list>()</argument_list></call>-&gt;<name>mIMEMode</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kIMEModeKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetUserFocus</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleUserInterface</name><argument_list>()</argument_list></call>-&gt;<name>mUserFocus</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kUserFocusKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetUserInput</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleUserInterface</name><argument_list>()</argument_list></call>-&gt;<name>mUserInput</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kUserInputKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetUserModify</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleUserInterface</name><argument_list>()</argument_list></call>-&gt;<name>mUserModify</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kUserModifyKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetUserSelect</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleUIReset</name><argument_list>()</argument_list></call>-&gt;<name>mUserSelect</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kUserSelectKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetDisplay</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call>-&gt;<name>mDisplay</name></expr></argument>,
                                               <argument><expr><name><name>nsCSSProps</name>::<name>kDisplayKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetPosition</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call>-&gt;<name>mPosition</name></expr></argument>,
                                               <argument><expr><name><name>nsCSSProps</name>::<name>kPositionKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetClip</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleDisplay</name>*</type> <name>display</name> <init>= <expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>topVal</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>rightVal</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>bottomVal</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>leftVal</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name><name>display</name>-&gt;<name>mClipFlags</name></name> == <name>NS_STYLE_CLIP_AUTO</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <comment type="line">// create the cssvalues for the sides, stick them in the rect object</comment>
    <expr_stmt><expr><name>topVal</name> = <call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rightVal</name> = <call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bottomVal</name> = <call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>leftVal</name> = <call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>topVal</name> &amp;&amp; <name>rightVal</name> &amp;&amp; <name>bottomVal</name> &amp;&amp; <name>leftVal</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsDOMCSSRect</name> *</type> <name>domRect</name> <init>= <expr>new <call><name>nsDOMCSSRect</name><argument_list>(<argument><expr><name>topVal</name></expr></argument>, <argument><expr><name>rightVal</name></expr></argument>,
                                                <argument><expr><name>bottomVal</name></expr></argument>, <argument><expr><name>leftVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>domRect</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>display</name>-&gt;<name>mClipFlags</name></name> &amp; <name>NS_STYLE_CLIP_TOP_AUTO</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>topVal</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>topVal</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name><name>display</name>-&gt;<name>mClip</name>.<name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        
        <if>if <condition>(<expr><name><name>display</name>-&gt;<name>mClipFlags</name></name> &amp; <name>NS_STYLE_CLIP_RIGHT_AUTO</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>rightVal</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>rightVal</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name><name>display</name>-&gt;<name>mClip</name>.<name>width</name></name> + <name><name>display</name>-&gt;<name>mClip</name>.<name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        
        <if>if <condition>(<expr><name><name>display</name>-&gt;<name>mClipFlags</name></name> &amp; <name>NS_STYLE_CLIP_BOTTOM_AUTO</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>bottomVal</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>bottomVal</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name><name>display</name>-&gt;<name>mClip</name>.<name>height</name></name> + <name><name>display</name>-&gt;<name>mClip</name>.<name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        
        <if>if <condition>(<expr><name><name>display</name>-&gt;<name>mClipFlags</name></name> &amp; <name>NS_STYLE_CLIP_LEFT_AUTO</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>leftVal</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>leftVal</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name><name>display</name>-&gt;<name>mClip</name>.<name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetRect</name></name><argument_list>(<argument><expr><name>domRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></else></if>

  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <name>topVal</name></expr>;</expr_stmt>
    <expr_stmt><expr>delete <name>rightVal</name></expr>;</expr_stmt>
    <expr_stmt><expr>delete <name>bottomVal</name></expr>;</expr_stmt>
    <expr_stmt><expr>delete <name>leftVal</name></expr>;</expr_stmt>
    <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>

    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>
  
  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetOverflow</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleDisplay</name>*</type> <name>display</name> <init>= <expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>display</name>-&gt;<name>mOverflowX</name></name> != <name><name>display</name>-&gt;<name>mOverflowY</name></name></expr>)</condition><then> <block>{
    <comment type="line">// No value to return.  We can't express this combination of</comment>
    <comment type="line">// values as a shorthand.</comment>
    <expr_stmt><expr>*<name>aValue</name> = <name>nsnull</name></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
  }</block></then></if>
  
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><name><name>display</name>-&gt;<name>mOverflowX</name></name></expr></argument>,
                                               <argument><expr><name><name>nsCSSProps</name>::<name>kOverflowKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetOverflowX</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call>-&gt;<name>mOverflowX</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kOverflowSubKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetOverflowY</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call>-&gt;<name>mOverflowY</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kOverflowSubKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetPageBreakAfter</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleDisplay</name> *</type><name>display</name> <init>= <expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>display</name>-&gt;<name>mBreakAfter</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_always</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetPageBreakBefore</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleDisplay</name> *</type><name>display</name> <init>= <expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>display</name>-&gt;<name>mBreakBefore</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_always</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetHeight</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>calcHeight</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
  
  <if>if <condition>(<expr><name>mInnerFrame</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>calcHeight</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleDisplay</name>*</type> <name>displayData</name> <init>= <expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>displayData</name>-&gt;<name>mDisplay</name></name> == <name>NS_STYLE_DISPLAY_INLINE</name> &amp;&amp;
        !(<call><name><name>mInnerFrame</name>-&gt;<name>IsFrameOfType</name></name><argument_list>(<argument><expr><name><name>nsIFrame</name>::<name>eReplaced</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
      <expr_stmt><expr><name>calcHeight</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <if>if <condition>(<expr><name>calcHeight</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>AssertFlushedPendingReflows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><call><name><name>mInnerFrame</name>-&gt;<name>GetContentRect</name></name><argument_list>()</argument_list></call>.<name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsStylePosition</name> *</type><name>positionData</name> <init>= <expr><call><name>GetStylePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>nscoord</name></type> <name>minHeight</name> <init>=
      <expr><call><name>StyleCoordToNSCoord</name><argument_list>(<argument><expr><name><name>positionData</name>-&gt;<name>mMinHeight</name></name></expr></argument>,
                          <argument><expr>&amp;<name><name>nsComputedDOMStyle</name>::<name>GetCBContentHeight</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>nscoord</name></type> <name>maxHeight</name> <init>=
      <expr><call><name>StyleCoordToNSCoord</name><argument_list>(<argument><expr><name><name>positionData</name>-&gt;<name>mMaxHeight</name></name></expr></argument>,
                          <argument><expr>&amp;<name><name>nsComputedDOMStyle</name>::<name>GetCBContentHeight</name></name></expr></argument>,
                          <argument><expr><name>nscoord_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>positionData</name>-&gt;<name>mHeight</name></name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                    <argument><expr><name>minHeight</name></expr></argument>, <argument><expr><name>maxHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
  
  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetWidth</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>calcWidth</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>mInnerFrame</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>calcWidth</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleDisplay</name> *</type><name>displayData</name> <init>= <expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>displayData</name>-&gt;<name>mDisplay</name></name> == <name>NS_STYLE_DISPLAY_INLINE</name> &amp;&amp;
        !(<call><name><name>mInnerFrame</name>-&gt;<name>IsFrameOfType</name></name><argument_list>(<argument><expr><name><name>nsIFrame</name>::<name>eReplaced</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
      <expr_stmt><expr><name>calcWidth</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <if>if <condition>(<expr><name>calcWidth</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>AssertFlushedPendingReflows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><call><name><name>mInnerFrame</name>-&gt;<name>GetContentRect</name></name><argument_list>()</argument_list></call>.<name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsStylePosition</name> *</type><name>positionData</name> <init>= <expr><call><name>GetStylePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>nscoord</name></type> <name>minWidth</name> <init>=
      <expr><call><name>StyleCoordToNSCoord</name><argument_list>(<argument><expr><name><name>positionData</name>-&gt;<name>mMinWidth</name></name></expr></argument>,
                          <argument><expr>&amp;<name><name>nsComputedDOMStyle</name>::<name>GetCBContentWidth</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>nscoord</name></type> <name>maxWidth</name> <init>=
      <expr><call><name>StyleCoordToNSCoord</name><argument_list>(<argument><expr><name><name>positionData</name>-&gt;<name>mMaxWidth</name></name></expr></argument>,
                          <argument><expr>&amp;<name><name>nsComputedDOMStyle</name>::<name>GetCBContentWidth</name></name></expr></argument>,
                          <argument><expr><name>nscoord_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>positionData</name>-&gt;<name>mWidth</name></name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                    <argument><expr><name><name>nsCSSProps</name>::<name>kWidthKTable</name></name></expr></argument>, <argument><expr><name>minWidth</name></expr></argument>, <argument><expr><name>maxWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetMaxHeight</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GetStylePosition</name><argument_list>()</argument_list></call>-&gt;<name>mMaxHeight</name></expr></argument>,
                  <argument><expr>&amp;<name><name>nsComputedDOMStyle</name>::<name>GetCBContentHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetMaxWidth</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GetStylePosition</name><argument_list>()</argument_list></call>-&gt;<name>mMaxWidth</name></expr></argument>,
                  <argument><expr>&amp;<name><name>nsComputedDOMStyle</name>::<name>GetCBContentWidth</name></name></expr></argument>,
                  <argument><expr><name><name>nsCSSProps</name>::<name>kWidthKTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetMinHeight</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GetStylePosition</name><argument_list>()</argument_list></call>-&gt;<name>mMinHeight</name></expr></argument>,
                  <argument><expr>&amp;<name><name>nsComputedDOMStyle</name>::<name>GetCBContentHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetMinWidth</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GetStylePosition</name><argument_list>()</argument_list></call>-&gt;<name>mMinWidth</name></expr></argument>,
                  <argument><expr>&amp;<name><name>nsComputedDOMStyle</name>::<name>GetCBContentWidth</name></name></expr></argument>,
                  <argument><expr><name><name>nsCSSProps</name>::<name>kWidthKTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetLeft</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetOffsetWidthFor</name><argument_list>(<argument><expr><name>NS_SIDE_LEFT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetRight</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetOffsetWidthFor</name><argument_list>(<argument><expr><name>NS_SIDE_RIGHT</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetTop</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetOffsetWidthFor</name><argument_list>(<argument><expr><name>NS_SIDE_TOP</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsROCSSPrimitiveValue</name>*</type>
<name><name>nsComputedDOMStyle</name>::<name>GetROCSSPrimitiveValue</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>primitiveValue</name> <init>= <expr>new <call><name>nsROCSSPrimitiveValue</name><argument_list>(<argument><expr><name>mAppUnitsPerInch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>primitiveValue</name> != 0</expr></argument>, <argument><expr>"ran out of memory"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>primitiveValue</name></expr>;</return>
}</block></function>

<function><type><name>nsDOMCSSValueList</name>*</type>
<name><name>nsComputedDOMStyle</name>::<name>GetROCSSValueList</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aCommaDelimited</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr>new <call><name>nsDOMCSSValueList</name><argument_list>(<argument><expr><name>aCommaDelimited</name></expr></argument>,
                                                       <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>valueList</name> != 0</expr></argument>, <argument><expr>"ran out of memory"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>valueList</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetOffsetWidthFor</name></name><parameter_list>(<param><decl><type><name>PRUint8</name></type> <name>aSide</name></decl></param>, <param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleDisplay</name>*</type> <name>display</name> <init>= <expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>AssertFlushedPendingReflows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>display</name>-&gt;<name>mPosition</name></name></expr>)</condition> <block>{
    <case>case <expr><name>NS_STYLE_POSITION_STATIC</name></expr>:
      <expr_stmt><expr><name>rv</name> = <call><name>GetStaticOffset</name><argument_list>(<argument><expr><name>aSide</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </case><case>case <expr><name>NS_STYLE_POSITION_RELATIVE</name></expr>:
      <expr_stmt><expr><name>rv</name> = <call><name>GetRelativeOffset</name><argument_list>(<argument><expr><name>aSide</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </case><case>case <expr><name>NS_STYLE_POSITION_ABSOLUTE</name></expr>:
    </case><case>case <expr><name>NS_STYLE_POSITION_FIXED</name></expr>:
      <expr_stmt><expr><name>rv</name> = <call><name>GetAbsoluteOffset</name><argument_list>(<argument><expr><name>aSide</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </case><default>default:
      <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Invalid position"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </default>}</block></switch>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetAbsoluteOffset</name></name><parameter_list>(<param><decl><type><name>PRUint8</name></type> <name>aSide</name></decl></param>, <param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>container</name> <init>= <expr><call><name>GetContainingBlockFor</name><argument_list>(<argument><expr><name>mOuterFrame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>container</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsMargin</name></type> <name>margin</name> <init>= <expr><call><name><name>mOuterFrame</name>-&gt;<name>GetUsedMargin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsMargin</name></type> <name>border</name> <init>= <expr><call><name><name>container</name>-&gt;<name>GetUsedBorder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsMargin</name></type> <name>scrollbarSizes</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsRect</name></type> <name>rect</name> <init>= <expr><call><name><name>mOuterFrame</name>-&gt;<name>GetRect</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsRect</name></type> <name>containerRect</name> <init>= <expr><call><name><name>container</name>-&gt;<name>GetRect</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      
    <if>if <condition>(<expr><call><name><name>container</name>-&gt;<name>GetType</name></name><argument_list>()</argument_list></call> == <name><name>nsGkAtoms</name>::<name>viewportFrame</name></name></expr>)</condition><then> <block>{
      <comment type="line">// For absolutely positioned frames scrollbars are taken into</comment>
      <comment type="line">// account by virtue of getting a containing block that does</comment>
      <comment type="line">// _not_ include the scrollbars.  For fixed positioned frames,</comment>
      <comment type="line">// the containing block is the viewport, which _does_ include</comment>
      <comment type="line">// scrollbars.  We have to do some extra work.</comment>
      <comment type="line">// the first child in the default frame list is what we want</comment>
      <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>scrollingChild</name> <init>= <expr><call><name><name>container</name>-&gt;<name>GetFirstChild</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>nsIScrollableFrame</name> *</type><name>scrollFrame</name> <init>= <expr><call><name>do_QueryFrame</name><argument_list>(<argument><expr><name>scrollingChild</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>scrollFrame</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>scrollbarSizes</name> = <call><name><name>scrollFrame</name>-&gt;<name>GetActualScrollbarSizes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>

    <decl_stmt><decl><type><name>nscoord</name></type> <name>offset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>aSide</name></expr>)</condition> <block>{
      <case>case <expr><name>NS_SIDE_TOP</name></expr>:
        <expr_stmt><expr><name>offset</name> = <name><name>rect</name>.<name>y</name></name> - <name><name>margin</name>.<name>top</name></name> - <name><name>border</name>.<name>top</name></name> - <name><name>scrollbarSizes</name>.<name>top</name></name></expr>;</expr_stmt>

        <break>break;</break>
      </case><case>case <expr><name>NS_SIDE_RIGHT</name></expr>:
        <expr_stmt><expr><name>offset</name> = <name><name>containerRect</name>.<name>width</name></name> - <name><name>rect</name>.<name>width</name></name> -
          <name><name>rect</name>.<name>x</name></name> - <name><name>margin</name>.<name>right</name></name> - <name><name>border</name>.<name>right</name></name> - <name><name>scrollbarSizes</name>.<name>right</name></name></expr>;</expr_stmt>

        <break>break;</break>
      </case><case>case <expr><name>NS_SIDE_BOTTOM</name></expr>:
        <expr_stmt><expr><name>offset</name> = <name><name>containerRect</name>.<name>height</name></name> - <name><name>rect</name>.<name>height</name></name> -
          <name><name>rect</name>.<name>y</name></name> - <name><name>margin</name>.<name>bottom</name></name> - <name><name>border</name>.<name>bottom</name></name> - <name><name>scrollbarSizes</name>.<name>bottom</name></name></expr>;</expr_stmt>

        <break>break;</break>
      </case><case>case <expr><name>NS_SIDE_LEFT</name></expr>:
        <expr_stmt><expr><name>offset</name> = <name><name>rect</name>.<name>x</name></name> - <name><name>margin</name>.<name>left</name></name> - <name><name>border</name>.<name>left</name></name> - <name><name>scrollbarSizes</name>.<name>left</name></name></expr>;</expr_stmt>

        <break>break;</break>
      </case><default>default:
        <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Invalid side"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </default>}</block></switch>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <comment type="line">// XXX no frame.  This property makes no sense</comment>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>NS_SIDE_TOP</name> == 0) &amp;&amp; (<name>NS_SIDE_RIGHT</name> == 1) &amp;&amp; (<name>NS_SIDE_BOTTOM</name> == 2) &amp;&amp; (<name>NS_SIDE_LEFT</name> == 3)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_OPPOSITE_SIDE</name><parameter_list>(<param><type><name>s_</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((s_) + 2) &amp; 3)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> "Somebody changed the side constants."</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetRelativeOffset</name></name><parameter_list>(<param><decl><type><name>PRUint8</name></type> <name>aSide</name></decl></param>, <param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStylePosition</name>*</type> <name>positionData</name> <init>= <expr><call><name>GetStylePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>sign</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsStyleCoord</name></type> <name>coord</name> <init>= <expr><call><name><name>positionData</name>-&gt;<name>mOffset</name>.<name>Get</name></name><argument_list>(<argument><expr><name>aSide</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>coord</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eStyleUnit_Coord</name> ||
               <call><name><name>coord</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eStyleUnit_Percent</name> ||
               <call><name><name>coord</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eStyleUnit_Auto</name></expr></argument>,
               <argument><expr>"Unexpected unit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if>if <condition>(<expr><call><name><name>coord</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eStyleUnit_Auto</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>coord</name> = <call><name><name>positionData</name>-&gt;<name>mOffset</name>.<name>Get</name></name><argument_list>(<argument><expr><call><name>NS_OPPOSITE_SIDE</name><argument_list>(<argument><expr><name>aSide</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sign</name> = -1</expr>;</expr_stmt>
  }</block></then></if>
  <decl_stmt><decl><type><name>PercentageBaseGetter</name></type> <name>baseGetter</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>aSide</name> == <name>NS_SIDE_LEFT</name> || <name>aSide</name> == <name>NS_SIDE_RIGHT</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>baseGetter</name> = &amp;<name><name>nsComputedDOMStyle</name>::<name>GetCBContentWidth</name></name></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><name>baseGetter</name> = &amp;<name><name>nsComputedDOMStyle</name>::<name>GetCBContentHeight</name></name></expr>;</expr_stmt>
  }</block></else></if>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name>sign</name> * <call><name>StyleCoordToNSCoord</name><argument_list>(<argument><expr><name>coord</name></expr></argument>, <argument><expr><name>baseGetter</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetStaticOffset</name></name><parameter_list>(<param><decl><type><name>PRUint8</name></type> <name>aSide</name></decl></param>, <param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>

<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GetStylePosition</name><argument_list>()</argument_list></call>-&gt;<call><name><name>mOffset</name>.<name>Get</name></name><argument_list>(<argument><expr><name>aSide</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetPaddingWidthFor</name></name><parameter_list>(<param><decl><type><name>PRUint8</name></type> <name>aSide</name></decl></param>, <param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>mInnerFrame</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GetStylePadding</name><argument_list>()</argument_list></call>-&gt;<call><name><name>mPadding</name>.<name>Get</name></name><argument_list>(<argument><expr><name>aSide</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name>AssertFlushedPendingReflows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><call><name><name>mInnerFrame</name>-&gt;<name>GetUsedPadding</name></name><argument_list>()</argument_list></call>.<call><name>side</name><argument_list>(<argument><expr><name>aSide</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetLineHeightCoord</name></name><parameter_list>(<param><decl><type><name>nscoord</name>&amp;</type> <name>aCoord</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>AssertFlushedPendingReflows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nscoord</name></type> <name>blockHeight</name> <init>= <expr><name>NS_AUTOHEIGHT</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>GetStyleText</name><argument_list>()</argument_list></call>-&gt;<call><name><name>mLineHeight</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eStyleUnit_Enumerated</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr>!<name>mInnerFrame</name></expr>)</condition><then>
      <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

    <if>if <condition>(<expr><call><name><name>mInnerFrame</name>-&gt;<name>IsContainingBlock</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>blockHeight</name> = <call><name><name>mInnerFrame</name>-&gt;<name>GetContentRect</name></name><argument_list>()</argument_list></call>.<name>height</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>GetCBContentHeight</name><argument_list>(<argument><expr><name>blockHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then></if>

  <expr_stmt><expr><name>aCoord</name> = <call><name><name>nsHTMLReflowState</name>::<name>CalcLineHeight</name></name><argument_list>(<argument><expr><name>mStyleContextHolder</name></expr></argument>,
                                             <argument><expr><name>blockHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="line">// CalcLineHeight uses font-&gt;mFont.size, but we want to use</comment>
  <comment type="line">// font-&gt;mSize as the font size.  Adjust for that.  Also adjust for</comment>
  <comment type="line">// the text zoom, if any.</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleFont</name>*</type> <name>font</name> <init>= <expr><call><name>GetStyleFont</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>aCoord</name> = <call><name>NSToCoordRound</name><argument_list>(<argument><expr>(<call><name>float</name><argument_list>(<argument><expr><name>aCoord</name></expr></argument>)</argument_list></call> *
                           (<call><name>float</name><argument_list>(<argument><expr><name><name>font</name>-&gt;<name>mSize</name></name></expr></argument>)</argument_list></call> / <call><name>float</name><argument_list>(<argument><expr><name><name>font</name>-&gt;<name>mFont</name>.<name>size</name></name></expr></argument>)</argument_list></call>)) /
                          <call><name><name>mPresShell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call>-&gt;<call><name>TextZoom</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderColorsFor</name></name><parameter_list>(<param><decl><type><name>PRUint8</name></type> <name>aSide</name></decl></param>, <param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleBorder</name> *</type><name>border</name> <init>= <expr><call><name>GetStyleBorder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>border</name>-&gt;<name>mBorderColors</name></name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsBorderColors</name>*</type> <name>borderColors</name> <init>= <expr><name><name>border</name>-&gt;<name>mBorderColors</name><index>[<expr><name>aSide</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>borderColors</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <do>do <block>{
        <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>primitive</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>primitive</name></expr>)</condition><then> <block>{
          <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>

          <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>SetToRGBAColor</name><argument_list>(<argument><expr><name>primitive</name></expr></argument>, <argument><expr><name><name>borderColors</name>-&gt;<name>mColor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
          <expr_stmt><expr>delete <name>primitive</name></expr>;</expr_stmt>
          <return>return <expr><name>rv</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>PRBool</name></type> <name>success</name> <init>= <expr><call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>primitive</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>success</name></expr>)</condition><then> <block>{
          <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
          <expr_stmt><expr>delete <name>primitive</name></expr>;</expr_stmt>

          <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>borderColors</name> = <name><name>borderColors</name>-&gt;<name>mNext</name></name></expr>;</expr_stmt>
      }</block> while <condition>(<expr><name>borderColors</name></expr>)</condition>;</do>

      <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderWidthFor</name></name><parameter_list>(<param><decl><type><name>PRUint8</name></type> <name>aSide</name></decl></param>, <param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nscoord</name></type> <name>width</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>mInnerFrame</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>AssertFlushedPendingReflows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>width</name> = <call><name><name>mInnerFrame</name>-&gt;<name>GetUsedBorder</name></name><argument_list>()</argument_list></call>.<call><name>side</name><argument_list>(<argument><expr><name>aSide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><name>width</name> = <call><name>GetStyleBorder</name><argument_list>()</argument_list></call>-&gt;<call><name>GetActualBorderWidth</name><argument_list>(<argument><expr><name>aSide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderColorFor</name></name><parameter_list>(<param><decl><type><name>PRUint8</name></type> <name>aSide</name></decl></param>, <param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nscolor</name></type> <name>color</name></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name>PRBool</name></type> <name>foreground</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetStyleBorder</name><argument_list>()</argument_list></call>-&gt;<call><name>GetBorderColor</name><argument_list>(<argument><expr><name>aSide</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>foreground</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>foreground</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>color</name> = <call><name>GetStyleColor</name><argument_list>()</argument_list></call>-&gt;<name>mColor</name></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>SetToRGBAColor</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetMarginWidthFor</name></name><parameter_list>(<param><decl><type><name>PRUint8</name></type> <name>aSide</name></decl></param>, <param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>mInnerFrame</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GetStyleMargin</name><argument_list>()</argument_list></call>-&gt;<call><name><name>mMargin</name>.<name>Get</name></name><argument_list>(<argument><expr><name>aSide</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><call><name>AssertFlushedPendingReflows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><call><name><name>mInnerFrame</name>-&gt;<name>GetUsedMargin</name></name><argument_list>()</argument_list></call>.<call><name>side</name><argument_list>(<argument><expr><name>aSide</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetBorderStyleFor</name></name><parameter_list>(<param><decl><type><name>PRUint8</name></type> <name>aSide</name></decl></param>, <param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleBorder</name><argument_list>()</argument_list></call>-&gt;<call><name>GetBorderStyle</name><argument_list>(<argument><expr><name>aSide</name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kBorderStyleKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsComputedDOMStyle</name>::<name>SetValueToCoord</name></name><parameter_list>(<param><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>aValue</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>nsStyleCoord</name>&amp;</type> <name>aCoord</name></decl></param>,
                                    <param><decl><type><name>PercentageBaseGetter</name></type> <name>aPercentageBaseGetter</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>PRInt32</name></type> <name><name>aTable</name><index>[]</index></name></decl></param>,
                                    <param><decl><type><name>nscoord</name></type> <name>aMinAppUnits</name></decl></param>,
                                    <param><decl><type><name>nscoord</name></type> <name>aMaxAppUnits</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aValue</name></expr></argument>, <argument><expr>"Must have a value to work with"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <switch>switch <condition>(<expr><call><name><name>aCoord</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
    <case>case <expr><name>eStyleUnit_Normal</name></expr>:
      <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_normal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
      
    </case><case>case <expr><name>eStyleUnit_Auto</name></expr>:
      <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_auto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
      
    </case><case>case <expr><name>eStyleUnit_Percent</name></expr>:
      <block>{
        <decl_stmt><decl><type><name>nscoord</name></type> <name>percentageBase</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>aPercentageBaseGetter</name> &amp;&amp;
            <call>(<name><name>this</name>-&gt;*<name>aPercentageBaseGetter</name></name>)<argument_list>(<argument><expr><name>percentageBase</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>nscoord</name></type> <name>val</name> <init>= <expr><call><name>nscoord</name><argument_list>(<argument><expr><call><name><name>aCoord</name>.<name>GetPercentValue</name></name><argument_list>()</argument_list></call> * <name>percentageBase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><call><name>NS_MAX</name><argument_list>(<argument><expr><name>aMinAppUnits</name></expr></argument>, <argument><expr><call><name>NS_MIN</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aMaxAppUnits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>SetPercent</name></name><argument_list>(<argument><expr><call><name><name>aCoord</name>.<name>GetPercentValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block>
      <break>break;</break>
      
    </case><case>case <expr><name>eStyleUnit_Factor</name></expr>:
      <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><call><name><name>aCoord</name>.<name>GetFactorValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
      
    </case><case>case <expr><name>eStyleUnit_Coord</name></expr>:
      <block>{
        <decl_stmt><decl><type><name>nscoord</name></type> <name>val</name> <init>= <expr><call><name><name>aCoord</name>.<name>GetCoordValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>SetAppUnits</name></name><argument_list>(<argument><expr><call><name>NS_MAX</name><argument_list>(<argument><expr><name>aMinAppUnits</name></expr></argument>, <argument><expr><call><name>NS_MIN</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aMaxAppUnits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block>
      <break>break;</break>
      
    </case><case>case <expr><name>eStyleUnit_Integer</name></expr>:
      <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><call><name><name>aCoord</name>.<name>GetIntValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
      
    </case><case>case <expr><name>eStyleUnit_Enumerated</name></expr>:
      <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aTable</name></expr></argument>, <argument><expr>"Must have table to handle this case"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name><name>aCoord</name>.<name>GetIntValue</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                      <argument><expr><name>aTable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
      
    </case><case>case <expr><name>eStyleUnit_None</name></expr>:
      <expr_stmt><expr><call><name><name>aValue</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
      
    </case><default>default:
      <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Can't handle this unit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </default>}</block></switch>
}</block></function>

<function><type><name>nscoord</name></type>
<name><name>nsComputedDOMStyle</name>::<name>StyleCoordToNSCoord</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsStyleCoord</name>&amp;</type> <name>aCoord</name></decl></param>,
                                        <param><decl><type><name>PercentageBaseGetter</name></type> <name>aPercentageBaseGetter</name></decl></param>,
                                        <param><decl><type><name>nscoord</name></type> <name>aDefaultValue</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr><name>aPercentageBaseGetter</name></expr></argument>, <argument><expr>"Must have a percentage base getter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><call><name><name>aCoord</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
    <case>case <expr><name>eStyleUnit_Coord</name></expr>:
      <return>return <expr><call><name><name>aCoord</name>.<name>GetCoordValue</name></name><argument_list>()</argument_list></call></expr>;</return>
    </case><case>case <expr><name>eStyleUnit_Percent</name></expr>:
      <block>{
        <decl_stmt><decl><type><name>nscoord</name></type> <name>percentageBase</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call>(<name><name>this</name>-&gt;*<name>aPercentageBaseGetter</name></name>)<argument_list>(<argument><expr><name>percentageBase</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <return>return <expr><call><name>nscoord</name><argument_list>(<argument><expr><call><name><name>aCoord</name>.<name>GetPercentValue</name></name><argument_list>()</argument_list></call> * <name>percentageBase</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
      }</block>
      <comment type="line">// Fall through to returning aDefaultValue if we have no percentage base.</comment>
    </case><default>default:
      <break>break;</break>
  </default>}</block></switch>
      
  <return>return <expr><name>aDefaultValue</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetCBContentWidth</name></name><parameter_list>(<param><decl><type><name>nscoord</name>&amp;</type> <name>aWidth</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mOuterFrame</name></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>container</name> <init>= <expr><call><name>GetContainingBlockFor</name><argument_list>(<argument><expr><name>mOuterFrame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>container</name></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>AssertFlushedPendingReflows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>aWidth</name> = <call><name><name>container</name>-&gt;<name>GetContentRect</name></name><argument_list>()</argument_list></call>.<name>width</name></expr>;</expr_stmt>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetCBContentHeight</name></name><parameter_list>(<param><decl><type><name>nscoord</name>&amp;</type> <name>aHeight</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mOuterFrame</name></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>container</name> <init>= <expr><call><name>GetContainingBlockFor</name><argument_list>(<argument><expr><name>mOuterFrame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>container</name></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>AssertFlushedPendingReflows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>aHeight</name> = <call><name><name>container</name>-&gt;<name>GetContentRect</name></name><argument_list>()</argument_list></call>.<name>height</name></expr>;</expr_stmt>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetFrameBorderRectWidth</name></name><parameter_list>(<param><decl><type><name>nscoord</name>&amp;</type> <name>aWidth</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>mInnerFrame</name></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>AssertFlushedPendingReflows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>aWidth</name> = <call><name><name>mInnerFrame</name>-&gt;<name>GetSize</name></name><argument_list>()</argument_list></call>.<name>width</name></expr>;</expr_stmt>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetFrameBoundsWidthForTransform</name></name><parameter_list>(<param><decl><type><name>nscoord</name>&amp;</type> <name>aWidth</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// We need a frame to work with.</comment>
  <if>if <condition>(<expr>!<name>mInnerFrame</name></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>AssertFlushedPendingReflows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Check to see that we're transformed.</comment>
  <if>if <condition>(<expr>!<call><name><name>mInnerFrame</name>-&gt;<name>GetStyleDisplay</name></name><argument_list>()</argument_list></call>-&gt;<call><name>HasTransform</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <expr_stmt><expr><name>aWidth</name> = <call><name><name>nsDisplayTransform</name>::<name>GetFrameBoundsForTransform</name></name><argument_list>(<argument><expr><name>mInnerFrame</name></expr></argument>)</argument_list></call>.<name>width</name></expr>;</expr_stmt>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetFrameBoundsHeightForTransform</name></name><parameter_list>(<param><decl><type><name>nscoord</name>&amp;</type> <name>aHeight</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// We need a frame to work with.</comment>
  <if>if <condition>(<expr>!<name>mInnerFrame</name></expr>)</condition><then> <block>{
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>AssertFlushedPendingReflows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Check to see that we're transformed.</comment>
  <if>if <condition>(<expr>!<call><name><name>mInnerFrame</name>-&gt;<name>GetStyleDisplay</name></name><argument_list>()</argument_list></call>-&gt;<call><name>HasTransform</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <expr_stmt><expr><name>aHeight</name> = <call><name><name>nsDisplayTransform</name>::<name>GetFrameBoundsForTransform</name></name><argument_list>(<argument><expr><name>mInnerFrame</name></expr></argument>)</argument_list></call>.<name>height</name></expr>;</expr_stmt>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SVG</name></cpp:ifdef>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetSVGPaintFor</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aFill</name></decl></param>,
                                   <param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleSVG</name>*</type> <name>svg</name> <init>= <expr><call><name>GetStyleSVG</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleSVGPaint</name>*</type> <name>paint</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>aFill</name></expr>)</condition><then>
    <expr_stmt><expr><name>paint</name> = &amp;<name><name>svg</name>-&gt;<name>mFill</name></name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>paint</name> = &amp;<name><name>svg</name>-&gt;<name>mStroke</name></name></expr>;</expr_stmt></else></if>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>paintString</name></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name><name>paint</name>-&gt;<name>mType</name></name></expr>)</condition> <block>{
  <case>case <expr><name>eStyleSVGPaintType_None</name></expr>:
  <block>{
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  }</block>
  </case><case>case <expr><name>eStyleSVGPaintType_Color</name></expr>:
  <block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>SetToRGBAColor</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>paint</name>-&gt;<name>mPaint</name>.<name>mColor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>
      <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>
    <break>break;</break>
  }</block>
  </case><case>case <expr><name>eStyleSVGPaintType_Server</name></expr>:
  <block>{
    <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>fallback</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>fallback</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>fallback</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>fallback</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetURI</name></name><argument_list>(<argument><expr><name><name>paint</name>-&gt;<name>mPaint</name>.<name>mPaintServer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>SetToRGBAColor</name><argument_list>(<argument><expr><name>fallback</name></expr></argument>, <argument><expr><name><name>paint</name>-&gt;<name>mFallbackColor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block>
  </case>}</block></switch>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetFill</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetSVGPaintFor</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetStroke</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>GetSVGPaintFor</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetMarkerEnd</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleSVG</name>*</type> <name>svg</name> <init>= <expr><call><name>GetStyleSVG</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>svg</name>-&gt;<name>mMarkerEnd</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetURI</name></name><argument_list>(<argument><expr><name><name>svg</name>-&gt;<name>mMarkerEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetMarkerMid</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleSVG</name>*</type> <name>svg</name> <init>= <expr><call><name>GetStyleSVG</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>svg</name>-&gt;<name>mMarkerMid</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetURI</name></name><argument_list>(<argument><expr><name><name>svg</name>-&gt;<name>mMarkerMid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetMarkerStart</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleSVG</name>*</type> <name>svg</name> <init>= <expr><call><name>GetStyleSVG</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>svg</name>-&gt;<name>mMarkerStart</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetURI</name></name><argument_list>(<argument><expr><name><name>svg</name>-&gt;<name>mMarkerStart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetStrokeDasharray</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleSVG</name>*</type> <name>svg</name> <init>= <expr><call><name>GetStyleSVG</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name><name>svg</name>-&gt;<name>mStrokeDasharrayLength</name></name> || !<name><name>svg</name>-&gt;<name>mStrokeDasharray</name></name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>svg</name>-&gt;<name>mStrokeDasharrayLength</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>dash</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>dash</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>dash</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>dash</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>dash</name></expr></argument>, <argument><expr><name><name>svg</name>-&gt;<name>mStrokeDasharray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetStrokeDashoffset</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GetStyleSVG</name><argument_list>()</argument_list></call>-&gt;<name>mStrokeDashoffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetStrokeWidth</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SetValueToCoord</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GetStyleSVG</name><argument_list>()</argument_list></call>-&gt;<name>mStrokeWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetFillOpacity</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><call><name>GetStyleSVG</name><argument_list>()</argument_list></call>-&gt;<name>mFillOpacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetFloodOpacity</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><call><name>GetStyleSVGReset</name><argument_list>()</argument_list></call>-&gt;<name>mFloodOpacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetStopOpacity</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><call><name>GetStyleSVGReset</name><argument_list>()</argument_list></call>-&gt;<name>mStopOpacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetStrokeMiterlimit</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><call><name>GetStyleSVG</name><argument_list>()</argument_list></call>-&gt;<name>mStrokeMiterlimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetStrokeOpacity</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetNumber</name></name><argument_list>(<argument><expr><call><name>GetStyleSVG</name><argument_list>()</argument_list></call>-&gt;<name>mStrokeOpacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetClipRule</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(
                  <argument><expr><call><name>GetStyleSVG</name><argument_list>()</argument_list></call>-&gt;<name>mClipRule</name></expr></argument>, <argument><expr><name><name>nsCSSProps</name>::<name>kFillRuleKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetFillRule</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(
                  <argument><expr><call><name>GetStyleSVG</name><argument_list>()</argument_list></call>-&gt;<name>mFillRule</name></expr></argument>, <argument><expr><name><name>nsCSSProps</name>::<name>kFillRuleKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetStrokeLinecap</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleSVG</name><argument_list>()</argument_list></call>-&gt;<name>mStrokeLinecap</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kStrokeLinecapKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetStrokeLinejoin</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleSVG</name><argument_list>()</argument_list></call>-&gt;<name>mStrokeLinejoin</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kStrokeLinejoinKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetTextAnchor</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleSVG</name><argument_list>()</argument_list></call>-&gt;<name>mTextAnchor</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kTextAnchorKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetColorInterpolation</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleSVG</name><argument_list>()</argument_list></call>-&gt;<name>mColorInterpolation</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kColorInterpolationKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetColorInterpolationFilters</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleSVG</name><argument_list>()</argument_list></call>-&gt;<name>mColorInterpolationFilters</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kColorInterpolationKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetDominantBaseline</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleSVGReset</name><argument_list>()</argument_list></call>-&gt;<name>mDominantBaseline</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kDominantBaselineKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetImageRendering</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleSVG</name><argument_list>()</argument_list></call>-&gt;<name>mImageRendering</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kImageRenderingKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetShapeRendering</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleSVG</name><argument_list>()</argument_list></call>-&gt;<name>mShapeRendering</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kShapeRenderingKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetTextRendering</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(
    <argument><expr><call><name><name>nsCSSProps</name>::<name>ValueToKeywordEnum</name></name><argument_list>(<argument><expr><call><name>GetStyleSVG</name><argument_list>()</argument_list></call>-&gt;<name>mTextRendering</name></expr></argument>,
                                   <argument><expr><name><name>nsCSSProps</name>::<name>kTextRenderingKTable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetFloodColor</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>SetToRGBAColor</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GetStyleSVGReset</name><argument_list>()</argument_list></call>-&gt;<name>mFloodColor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetLightingColor</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>SetToRGBAColor</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GetStyleSVGReset</name><argument_list>()</argument_list></call>-&gt;<name>mLightingColor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetStopColor</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name> *</type><name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>SetToRGBAColor</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GetStyleSVGReset</name><argument_list>()</argument_list></call>-&gt;<name>mStopColor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>delete <name>val</name></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetClipPath</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleSVGReset</name>*</type> <name>svg</name> <init>= <expr><call><name>GetStyleSVGReset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>svg</name>-&gt;<name>mClipPath</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetURI</name></name><argument_list>(<argument><expr><name><name>svg</name>-&gt;<name>mClipPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetFilter</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleSVGReset</name>*</type> <name>svg</name> <init>= <expr><call><name>GetStyleSVGReset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>svg</name>-&gt;<name>mFilter</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetURI</name></name><argument_list>(<argument><expr><name><name>svg</name>-&gt;<name>mFilter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetMask</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>val</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleSVGReset</name>*</type> <name>svg</name> <init>= <expr><call><name>GetStyleSVGReset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>svg</name>-&gt;<name>mMask</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetURI</name></name><argument_list>(<argument><expr><name><name>svg</name>-&gt;<name>mMask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name><name>val</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// MOZ_SVG</comment>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetTransitionDelay</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleDisplay</name>*</type> <name>display</name> <init>= <expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ABORT_IF_FALSE</name><argument_list>(<argument><expr><name><name>display</name>-&gt;<name>mTransitionDelayCount</name></name> &gt; 0</expr></argument>,
                    <argument><expr>"first item must be explicit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <do>do <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsTransition</name> *</type><name>transition</name> <init>= <expr>&amp;<name><name>display</name>-&gt;<name>mTransitions</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>delay</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>delay</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>delay</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>delay</name>-&gt;<name>SetTime</name></name><argument_list>(<argument><expr>(<name>float</name>)<call><name><name>transition</name>-&gt;<name>GetDelay</name></name><argument_list>()</argument_list></call> / (<name>float</name>)<name>PR_MSEC_PER_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block> while <condition>(<expr>++<name>i</name> &lt; <name><name>display</name>-&gt;<name>mTransitionDelayCount</name></name></expr>)</condition>;</do>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetTransitionDuration</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleDisplay</name>*</type> <name>display</name> <init>= <expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ABORT_IF_FALSE</name><argument_list>(<argument><expr><name><name>display</name>-&gt;<name>mTransitionDurationCount</name></name> &gt; 0</expr></argument>,
                    <argument><expr>"first item must be explicit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <do>do <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsTransition</name> *</type><name>transition</name> <init>= <expr>&amp;<name><name>display</name>-&gt;<name>mTransitions</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>duration</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>duration</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>duration</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>duration</name>-&gt;<name>SetTime</name></name><argument_list>(<argument><expr>(<name>float</name>)<call><name><name>transition</name>-&gt;<name>GetDuration</name></name><argument_list>()</argument_list></call> / (<name>float</name>)<name>PR_MSEC_PER_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block> while <condition>(<expr>++<name>i</name> &lt; <name><name>display</name>-&gt;<name>mTransitionDurationCount</name></name></expr>)</condition>;</do>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetTransitionProperty</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleDisplay</name>*</type> <name>display</name> <init>= <expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ABORT_IF_FALSE</name><argument_list>(<argument><expr><name><name>display</name>-&gt;<name>mTransitionPropertyCount</name></name> &gt; 0</expr></argument>,
                    <argument><expr>"first item must be explicit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <do>do <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsTransition</name> *</type><name>transition</name> <init>= <expr>&amp;<name><name>display</name>-&gt;<name>mTransitions</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>property</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>property</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>property</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>nsCSSProperty</name></type> <name>cssprop</name> <init>= <expr><call><name><name>transition</name>-&gt;<name>GetProperty</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>cssprop</name> == <name>eCSSPropertyExtra_all_properties</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>property</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name>cssprop</name> == <name>eCSSPropertyExtra_no_properties</name></expr>)</condition><then>
      <expr_stmt><expr><call><name><name>property</name>-&gt;<name>SetIdent</name></name><argument_list>(<argument><expr><name>eCSSKeyword_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name>cssprop</name> == <name>eCSSProperty_UNKNOWN</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>transition</name>-&gt;<name>GetUnknownProperty</name></name><argument_list>()</argument_list></call>-&gt;<call><name>GetUTF8String</name><argument_list>(<argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>property</name>-&gt;<name>SetString</name></name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// really want SetIdent</comment>
    }</block></then>
    <else>else
      <expr_stmt><expr><call><name><name>property</name>-&gt;<name>SetString</name></name><argument_list>(<argument><expr><call><name><name>nsCSSProps</name>::<name>GetStringValue</name></name><argument_list>(<argument><expr><name>cssprop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if>
  }</block> while <condition>(<expr>++<name>i</name> &lt; <name><name>display</name>-&gt;<name>mTransitionPropertyCount</name></name></expr>)</condition>;</do>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsComputedDOMStyle</name>::<name>GetTransitionTimingFunction</name></name><parameter_list>(<param><decl><type><name>nsIDOMCSSValue</name>**</type> <name>aValue</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsStyleDisplay</name>*</type> <name>display</name> <init>= <expr><call><name>GetStyleDisplay</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsDOMCSSValueList</name> *</type><name>valueList</name> <init>= <expr><call><name>GetROCSSValueList</name><argument_list>(<argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ABORT_IF_FALSE</name><argument_list>(<argument><expr><name><name>display</name>-&gt;<name>mTransitionTimingFunctionCount</name></name> &gt; 0</expr></argument>,
                    <argument><expr>"first item must be explicit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <do>do <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsTransition</name> *</type><name>transition</name> <init>= <expr>&amp;<name><name>display</name>-&gt;<name>mTransitions</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsROCSSPrimitiveValue</name>*</type> <name>timingFunction</name> <init>= <expr><call><name>GetROCSSPrimitiveValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>timingFunction</name> || !<call><name><name>valueList</name>-&gt;<name>AppendCSSValue</name></name><argument_list>(<argument><expr><name>timingFunction</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr>delete <name>valueList</name></expr>;</expr_stmt>
      <expr_stmt><expr>delete <name>timingFunction</name></expr>;</expr_stmt>
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// set the value from the cubic-bezier control points</comment>
    <comment type="line">// (We could try to regenerate the keywords if we want.)</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsTimingFunction</name>&amp;</type> <name>tf</name> <init>= <expr><call><name><name>transition</name>-&gt;<name>GetTimingFunction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>timingFunction</name>-&gt;<name>SetString</name></name><argument_list>(
      <argument><expr><call><name>nsPrintfCString</name><argument_list>(<argument><expr>64</expr></argument>, <argument><expr>"cubic-bezier(%f, %f, %f, %f)"</expr></argument>,
                          <argument><expr><name><name>tf</name>.<name>mX1</name></name></expr></argument>, <argument><expr><name><name>tf</name>.<name>mY1</name></name></expr></argument>, <argument><expr><name><name>tf</name>.<name>mX2</name></name></expr></argument>, <argument><expr><name><name>tf</name>.<name>mY2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block> while <condition>(<expr>++<name>i</name> &lt; <name><name>display</name>-&gt;<name>mTransitionTimingFunctionCount</name></name></expr>)</condition>;</do>

  <return>return <expr><call><name>CallQueryInterface</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPUTED_STYLE_MAP_ENTRY</name><parameter_list>(<param><type><name>_prop</name></type></param>, <param><type><name>_method</name></type></param>)</parameter_list></cpp:macro>              \
  <cpp:value>{ eCSSProperty_##_prop, &amp;nsComputedDOMStyle::Get##_method, PR_FALSE }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><parameter_list>(<param><type><name>_prop</name></type></param>, <param><type><name>_method</name></type></param>)</parameter_list></cpp:macro>       \
  <cpp:value>{ eCSSProperty_##_prop, &amp;nsComputedDOMStyle::Get##_method, PR_TRUE }</cpp:value></cpp:define>

<function><type><specifier>const</specifier> <name><name>nsComputedDOMStyle</name>::<name>ComputedStyleMapEntry</name></name>*</type>
<name><name>nsComputedDOMStyle</name>::<name>GetQueryablePropertyMap</name></name><parameter_list>(<param><decl><type><name>PRUint32</name>*</type> <name>aLength</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* ******************************************************************* *\
   * Properties below are listed in alphabetical order.                  *
   * Please keep them that way.                                          *
   *                                                                     *
   * Properties commented out with // are not yet implemented            *
   * Properties commented out with //// are shorthands and not queryable *
  \* ******************************************************************* */</comment>
  <decl_stmt><decl><type><specifier>static</specifier>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>XP_MACOSX</name></cpp:ifndef>
    <comment type="line">// XXX If this actually fixes the bustage, replace this with an</comment>
    <comment type="line">// autoconf test.</comment>
  <specifier>const</specifier>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <name>ComputedStyleMapEntry</name></type> <name><name>map</name><index>[]</index></name> <init>= <expr><block>{
    <comment type="block">/* ****************************** *\
     * Implementations of CSS2 styles *
    \* ****************************** */</comment>

    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(azimuth,                    Azimuth),</comment>
    <comment type="line" format="doxygen">//// COMPUTED_STYLE_MAP_ENTRY(background,               Background),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>background_attachment</name></expr></argument>,         <argument><expr><name>BackgroundAttachment</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>background_color</name></expr></argument>,              <argument><expr><name>BackgroundColor</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>background_image</name></expr></argument>,              <argument><expr><name>BackgroundImage</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>background_position</name></expr></argument>,           <argument><expr><name>BackgroundPosition</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>background_repeat</name></expr></argument>,             <argument><expr><name>BackgroundRepeat</name></expr></argument>)</argument_list></call></expr>,
    <comment type="line" format="doxygen">//// COMPUTED_STYLE_MAP_ENTRY(border,                   Border),</comment>
    <comment type="line" format="doxygen">//// COMPUTED_STYLE_MAP_ENTRY(border_bottom,            BorderBottom),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>border_bottom_color</name></expr></argument>,           <argument><expr><name>BorderBottomColor</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>border_bottom_style</name></expr></argument>,           <argument><expr><name>BorderBottomStyle</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>border_bottom_width</name></expr></argument>,    <argument><expr><name>BorderBottomWidth</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>border_collapse</name></expr></argument>,               <argument><expr><name>BorderCollapse</name></expr></argument>)</argument_list></call></expr>,
    <comment type="line" format="doxygen">//// COMPUTED_STYLE_MAP_ENTRY(border_color,             BorderColor),</comment>
    <comment type="line" format="doxygen">//// COMPUTED_STYLE_MAP_ENTRY(border_left,              BorderLeft),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>border_left_color</name></expr></argument>,             <argument><expr><name>BorderLeftColor</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>border_left_style</name></expr></argument>,             <argument><expr><name>BorderLeftStyle</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>border_left_width</name></expr></argument>,      <argument><expr><name>BorderLeftWidth</name></expr></argument>)</argument_list></call></expr>,
    <comment type="line" format="doxygen">//// COMPUTED_STYLE_MAP_ENTRY(border_right,             BorderRight),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>border_right_color</name></expr></argument>,            <argument><expr><name>BorderRightColor</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>border_right_style</name></expr></argument>,            <argument><expr><name>BorderRightStyle</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>border_right_width</name></expr></argument>,     <argument><expr><name>BorderRightWidth</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>border_spacing</name></expr></argument>,                <argument><expr><name>BorderSpacing</name></expr></argument>)</argument_list></call></expr>,
    <comment type="line" format="doxygen">//// COMPUTED_STYLE_MAP_ENTRY(border_style,             BorderStyle),</comment>
    <comment type="line" format="doxygen">//// COMPUTED_STYLE_MAP_ENTRY(border_top,               BorderTop),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>border_top_color</name></expr></argument>,              <argument><expr><name>BorderTopColor</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>border_top_style</name></expr></argument>,              <argument><expr><name>BorderTopStyle</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>border_top_width</name></expr></argument>,       <argument><expr><name>BorderTopWidth</name></expr></argument>)</argument_list></call></expr>,
    <comment type="line" format="doxygen">//// COMPUTED_STYLE_MAP_ENTRY(border_width,             BorderWidth),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>bottom</name></expr></argument>,                 <argument><expr><name>Bottom</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>caption_side</name></expr></argument>,                  <argument><expr><name>CaptionSide</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>clear</name></expr></argument>,                         <argument><expr><name>Clear</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>clip</name></expr></argument>,                          <argument><expr><name>Clip</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>color</name></expr></argument>,                         <argument><expr><name>Color</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>content</name></expr></argument>,                       <argument><expr><name>Content</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>counter_increment</name></expr></argument>,             <argument><expr><name>CounterIncrement</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>counter_reset</name></expr></argument>,                 <argument><expr><name>CounterReset</name></expr></argument>)</argument_list></call></expr>,
    <comment type="line" format="doxygen">//// COMPUTED_STYLE_MAP_ENTRY(cue,                      Cue),</comment>
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(cue_after,                  CueAfter),</comment>
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(cue_before,                 CueBefore),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>,                        <argument><expr><name>Cursor</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>direction</name></expr></argument>,                     <argument><expr><name>Direction</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>display</name></expr></argument>,                       <argument><expr><name>Display</name></expr></argument>)</argument_list></call></expr>,
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(elevation,                  Elevation),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>empty_cells</name></expr></argument>,                   <argument><expr><name>EmptyCells</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>float</name></expr></argument>,                         <argument><expr><name>CssFloat</name></expr></argument>)</argument_list></call></expr>,
    <comment type="line" format="doxygen">//// COMPUTED_STYLE_MAP_ENTRY(font,                     Font),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>font_family</name></expr></argument>,                   <argument><expr><name>FontFamily</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>font_size</name></expr></argument>,                     <argument><expr><name>FontSize</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>font_size_adjust</name></expr></argument>,              <argument><expr><name>FontSizeAdjust</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>font_stretch</name></expr></argument>,                  <argument><expr><name>FontStretch</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>font_style</name></expr></argument>,                    <argument><expr><name>FontStyle</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>font_variant</name></expr></argument>,                  <argument><expr><name>FontVariant</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>font_weight</name></expr></argument>,                   <argument><expr><name>FontWeight</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>height</name></expr></argument>,                 <argument><expr><name>Height</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>left</name></expr></argument>,                   <argument><expr><name>Left</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>letter_spacing</name></expr></argument>,                <argument><expr><name>LetterSpacing</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>line_height</name></expr></argument>,            <argument><expr><name>LineHeight</name></expr></argument>)</argument_list></call></expr>,
    <comment type="line" format="doxygen">//// COMPUTED_STYLE_MAP_ENTRY(list_style,               ListStyle),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>list_style_image</name></expr></argument>,              <argument><expr><name>ListStyleImage</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>list_style_position</name></expr></argument>,           <argument><expr><name>ListStylePosition</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>list_style_type</name></expr></argument>,               <argument><expr><name>ListStyleType</name></expr></argument>)</argument_list></call></expr>,
    <comment type="line" format="doxygen">//// COMPUTED_STYLE_MAP_ENTRY(margin,                   Margin),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>margin_bottom</name></expr></argument>,          <argument><expr><name>MarginBottomWidth</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>margin_left</name></expr></argument>,            <argument><expr><name>MarginLeftWidth</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>margin_right</name></expr></argument>,           <argument><expr><name>MarginRightWidth</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>margin_top</name></expr></argument>,             <argument><expr><name>MarginTopWidth</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>marker_offset</name></expr></argument>,                 <argument><expr><name>MarkerOffset</name></expr></argument>)</argument_list></call></expr>,
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(marks,                      Marks),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>max_height</name></expr></argument>,             <argument><expr><name>MaxHeight</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>max_width</name></expr></argument>,              <argument><expr><name>MaxWidth</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>min_height</name></expr></argument>,             <argument><expr><name>MinHeight</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>min_width</name></expr></argument>,              <argument><expr><name>MinWidth</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>ime_mode</name></expr></argument>,                      <argument><expr><name>IMEMode</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>opacity</name></expr></argument>,                       <argument><expr><name>Opacity</name></expr></argument>)</argument_list></call></expr>,
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(orphans,                    Orphans),</comment>
    <comment type="line" format="doxygen">//// COMPUTED_STYLE_MAP_ENTRY(outline,                  Outline),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>outline_color</name></expr></argument>,                 <argument><expr><name>OutlineColor</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>outline_style</name></expr></argument>,                 <argument><expr><name>OutlineStyle</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>outline_width</name></expr></argument>,                 <argument><expr><name>OutlineWidth</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>outline_offset</name></expr></argument>,                <argument><expr><name>OutlineOffset</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>overflow</name></expr></argument>,                      <argument><expr><name>Overflow</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>overflow_x</name></expr></argument>,                    <argument><expr><name>OverflowX</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>overflow_y</name></expr></argument>,                    <argument><expr><name>OverflowY</name></expr></argument>)</argument_list></call></expr>,
    <comment type="line" format="doxygen">//// COMPUTED_STYLE_MAP_ENTRY(padding,                  Padding),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>padding_bottom</name></expr></argument>,         <argument><expr><name>PaddingBottom</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>padding_left</name></expr></argument>,           <argument><expr><name>PaddingLeft</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>padding_right</name></expr></argument>,          <argument><expr><name>PaddingRight</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>padding_top</name></expr></argument>,            <argument><expr><name>PaddingTop</name></expr></argument>)</argument_list></call></expr>,
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(page,                       Page),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>page_break_after</name></expr></argument>,              <argument><expr><name>PageBreakAfter</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>page_break_before</name></expr></argument>,             <argument><expr><name>PageBreakBefore</name></expr></argument>)</argument_list></call></expr>,
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(page_break_inside,          PageBreakInside),</comment>
    <comment type="line" format="doxygen">//// COMPUTED_STYLE_MAP_ENTRY(pause,                    Pause),</comment>
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(pause_after,                PauseAfter),</comment>
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(pause_before,               PauseBefore),</comment>
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(pitch,                      Pitch),</comment>
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(pitch_range,                PitchRange),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>pointer_events</name></expr></argument>,                <argument><expr><name>PointerEvents</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>position</name></expr></argument>,                      <argument><expr><name>Position</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>quotes</name></expr></argument>,                        <argument><expr><name>Quotes</name></expr></argument>)</argument_list></call></expr>,
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(richness,                   Richness),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>right</name></expr></argument>,                  <argument><expr><name>Right</name></expr></argument>)</argument_list></call></expr>,
    <comment type="line" format="doxygen">//// COMPUTED_STYLE_MAP_ENTRY(size,                     Size),</comment>
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(speak,                      Speak),</comment>
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(speak_header,               SpeakHeader),</comment>
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(speak_numeral,              SpeakNumeral),</comment>
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(speak_punctuation,          SpeakPunctuation),</comment>
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(speech_rate,                SpeechRate),</comment>
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(stress,                     Stress),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>table_layout</name></expr></argument>,                  <argument><expr><name>TableLayout</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>text_align</name></expr></argument>,                    <argument><expr><name>TextAlign</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>text_decoration</name></expr></argument>,               <argument><expr><name>TextDecoration</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>text_indent</name></expr></argument>,            <argument><expr><name>TextIndent</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>text_shadow</name></expr></argument>,                   <argument><expr><name>TextShadow</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>text_transform</name></expr></argument>,                <argument><expr><name>TextTransform</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>top</name></expr></argument>,                    <argument><expr><name>Top</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>unicode_bidi</name></expr></argument>,                  <argument><expr><name>UnicodeBidi</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>vertical_align</name></expr></argument>,         <argument><expr><name>VerticalAlign</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>visibility</name></expr></argument>,                    <argument><expr><name>Visibility</name></expr></argument>)</argument_list></call></expr>,
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(voice_family,               VoiceFamily),</comment>
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(volume,                     Volume),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>white_space</name></expr></argument>,                   <argument><expr><name>WhiteSpace</name></expr></argument>)</argument_list></call></expr>,
    <comment type="line">// COMPUTED_STYLE_MAP_ENTRY(widows,                     Widows),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>width</name></expr></argument>,                  <argument><expr><name>Width</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>word_spacing</name></expr></argument>,                  <argument><expr><name>WordSpacing</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>z_index</name></expr></argument>,                       <argument><expr><name>ZIndex</name></expr></argument>)</argument_list></call></expr>,

    <comment type="block">/* ******************************* *\
     * Implementations of -moz- styles *
    \* ******************************* */</comment>

    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>appearance</name></expr></argument>,                    <argument><expr><name>Appearance</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>_moz_background_clip</name></expr></argument>,          <argument><expr><name>BackgroundClip</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>_moz_background_inline_policy</name></expr></argument>, <argument><expr><name>BackgroundInlinePolicy</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>_moz_background_origin</name></expr></argument>,        <argument><expr><name>BackgroundOrigin</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>_moz_background_size</name></expr></argument>,          <argument><expr><name>MozBackgroundSize</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>binding</name></expr></argument>,                       <argument><expr><name>Binding</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>border_bottom_colors</name></expr></argument>,          <argument><expr><name>BorderBottomColors</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>border_image</name></expr></argument>,                  <argument><expr><name>BorderImage</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>border_left_colors</name></expr></argument>,            <argument><expr><name>BorderLeftColors</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>border_right_colors</name></expr></argument>,           <argument><expr><name>BorderRightColors</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>border_top_colors</name></expr></argument>,             <argument><expr><name>BorderTopColors</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>_moz_border_radius_bottomLeft</name></expr></argument>, <argument><expr><name>BorderRadiusBottomLeft</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>_moz_border_radius_bottomRight</name></expr></argument>,<argument><expr><name>BorderRadiusBottomRight</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>_moz_border_radius_topLeft</name></expr></argument>,    <argument><expr><name>BorderRadiusTopLeft</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>_moz_border_radius_topRight</name></expr></argument>,   <argument><expr><name>BorderRadiusTopRight</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>box_align</name></expr></argument>,                     <argument><expr><name>BoxAlign</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>box_direction</name></expr></argument>,                 <argument><expr><name>BoxDirection</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>box_flex</name></expr></argument>,                      <argument><expr><name>BoxFlex</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>box_ordinal_group</name></expr></argument>,             <argument><expr><name>BoxOrdinalGroup</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>box_orient</name></expr></argument>,                    <argument><expr><name>BoxOrient</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>box_pack</name></expr></argument>,                      <argument><expr><name>BoxPack</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>box_shadow</name></expr></argument>,                    <argument><expr><name>BoxShadow</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>box_sizing</name></expr></argument>,                    <argument><expr><name>BoxSizing</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>_moz_column_count</name></expr></argument>,             <argument><expr><name>ColumnCount</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>_moz_column_width</name></expr></argument>,             <argument><expr><name>ColumnWidth</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>_moz_column_gap</name></expr></argument>,               <argument><expr><name>ColumnGap</name></expr></argument>)</argument_list></call></expr>,
    <comment type="line" format="doxygen">//// COMPUTED_STYLE_MAP_ENTRY(_moz_column_rule,         ColumnRule),</comment>
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>_moz_column_rule_color</name></expr></argument>,        <argument><expr><name>ColumnRuleColor</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>_moz_column_rule_width</name></expr></argument>,        <argument><expr><name>ColumnRuleWidth</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>_moz_column_rule_style</name></expr></argument>,        <argument><expr><name>ColumnRuleStyle</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>float_edge</name></expr></argument>,                    <argument><expr><name>FloatEdge</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>force_broken_image_icon</name></expr></argument>,  <argument><expr><name>ForceBrokenImageIcon</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>image_region</name></expr></argument>,                  <argument><expr><name>ImageRegion</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>_moz_outline_radius_bottomLeft</name></expr></argument>, <argument><expr><name>OutlineRadiusBottomLeft</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>_moz_outline_radius_bottomRight</name></expr></argument>,<argument><expr><name>OutlineRadiusBottomRight</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>_moz_outline_radius_topLeft</name></expr></argument>,    <argument><expr><name>OutlineRadiusTopLeft</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>_moz_outline_radius_topRight</name></expr></argument>,   <argument><expr><name>OutlineRadiusTopRight</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>stack_sizing</name></expr></argument>,                  <argument><expr><name>StackSizing</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>_moz_tab_size</name></expr></argument>,                 <argument><expr><name>MozTabSize</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>_moz_transform</name></expr></argument>,         <argument><expr><name>MozTransform</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY_LAYOUT</name><argument_list>(<argument><expr><name>_moz_transform_origin</name></expr></argument>,  <argument><expr><name>MozTransformOrigin</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>user_focus</name></expr></argument>,                    <argument><expr><name>UserFocus</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>user_input</name></expr></argument>,                    <argument><expr><name>UserInput</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>user_modify</name></expr></argument>,                   <argument><expr><name>UserModify</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>user_select</name></expr></argument>,                   <argument><expr><name>UserSelect</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>transition_delay</name></expr></argument>,              <argument><expr><name>TransitionDelay</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>transition_duration</name></expr></argument>,           <argument><expr><name>TransitionDuration</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>transition_property</name></expr></argument>,           <argument><expr><name>TransitionProperty</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>transition_timing_function</name></expr></argument>,    <argument><expr><name>TransitionTimingFunction</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>_moz_window_shadow</name></expr></argument>,            <argument><expr><name>WindowShadow</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>word_wrap</name></expr></argument>,                     <argument><expr><name>WordWrap</name></expr></argument>)</argument_list></call></expr>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_SVG</name></cpp:ifdef>
    ,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>clip_path</name></expr></argument>,                     <argument><expr><name>ClipPath</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>clip_rule</name></expr></argument>,                     <argument><expr><name>ClipRule</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>color_interpolation</name></expr></argument>,           <argument><expr><name>ColorInterpolation</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>color_interpolation_filters</name></expr></argument>,   <argument><expr><name>ColorInterpolationFilters</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>dominant_baseline</name></expr></argument>,             <argument><expr><name>DominantBaseline</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>fill</name></expr></argument>,                          <argument><expr><name>Fill</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>fill_opacity</name></expr></argument>,                  <argument><expr><name>FillOpacity</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>fill_rule</name></expr></argument>,                     <argument><expr><name>FillRule</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>filter</name></expr></argument>,                        <argument><expr><name>Filter</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>flood_color</name></expr></argument>,                   <argument><expr><name>FloodColor</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>flood_opacity</name></expr></argument>,                 <argument><expr><name>FloodOpacity</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>lighting_color</name></expr></argument>,                <argument><expr><name>LightingColor</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>image_rendering</name></expr></argument>,               <argument><expr><name>ImageRendering</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>mask</name></expr></argument>,                          <argument><expr><name>Mask</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>marker_end</name></expr></argument>,                    <argument><expr><name>MarkerEnd</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>marker_mid</name></expr></argument>,                    <argument><expr><name>MarkerMid</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>marker_start</name></expr></argument>,                  <argument><expr><name>MarkerStart</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>shape_rendering</name></expr></argument>,               <argument><expr><name>ShapeRendering</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>stop_color</name></expr></argument>,                    <argument><expr><name>StopColor</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>stop_opacity</name></expr></argument>,                  <argument><expr><name>StopOpacity</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>stroke</name></expr></argument>,                        <argument><expr><name>Stroke</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>stroke_dasharray</name></expr></argument>,              <argument><expr><name>StrokeDasharray</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>stroke_dashoffset</name></expr></argument>,             <argument><expr><name>StrokeDashoffset</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>stroke_linecap</name></expr></argument>,                <argument><expr><name>StrokeLinecap</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>stroke_linejoin</name></expr></argument>,               <argument><expr><name>StrokeLinejoin</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>stroke_miterlimit</name></expr></argument>,             <argument><expr><name>StrokeMiterlimit</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>stroke_opacity</name></expr></argument>,                <argument><expr><name>StrokeOpacity</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>stroke_width</name></expr></argument>,                  <argument><expr><name>StrokeWidth</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument><expr><name>text_anchor</name></expr></argument>,                   <argument><expr><name>TextAnchor</name></expr></argument>)</argument_list></call></expr>,
    <macro><name>COMPUTED_STYLE_MAP_ENTRY</name><argument_list>(<argument>text_rendering</argument>,                <argument>TextRendering</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>aLength</name> = <call><name>NS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>map</name></expr>;</return>
}</block></function>

</unit>
