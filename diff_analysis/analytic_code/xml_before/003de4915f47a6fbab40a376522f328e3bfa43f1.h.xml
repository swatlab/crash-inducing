<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="003de4915f47a6fbab40a376522f328e3bfa43f1.h"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   David Drinan. (ddrinan@netscape.com)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_NSKEYGENHANDLER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_NSKEYGENHANDLER_H_</name></cpp:macro></cpp:define>
<comment type="line">// Form Processor </comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFormProcessor.h"</cpp:file></cpp:include> 

<function_decl><type><name>nsresult</name></type> <name>GetSlotWithMechanism</name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>mechanism</name></decl></param>,
                              <param><decl><type><name>nsIInterfaceRequestor</name> *</type><name>ctx</name></decl></param>,
                              <param><decl><type><name>PK11SlotInfo</name> **</type><name>retSlot</name></decl></param>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_RSA_KEYGEN_PE</name></cpp:macro> <cpp:value>65537L</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_RSA_KEYGEN_ALG</name></cpp:macro> <cpp:value>SEC_OID_PKCS1_MD5_WITH_RSA_ENCRYPTION</cpp:value></cpp:define>

<function_decl><type><name>SECKEYECParams</name> *</type><name>decode_ec_params</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>curve</name></decl></param>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>class</name> <name>nsKeygenFormProcessor</name> : <name>public</name> <name>nsIFormProcessor</name> <block>{ 
<expr><name>public</name>: 
  <call><name>nsKeygenFormProcessor</name><argument_list>()</argument_list></call></expr>; 
  <expr><name>virtual</name> ~<call><name>nsKeygenFormProcessor</name><argument_list>()</argument_list></call></expr>;
  <expr><name>nsresult</name> <call><name>Init</name><argument_list>()</argument_list></call></expr>;

  <expr><name>NS_IMETHOD</name> <call><name>ProcessValue</name><argument_list>(<argument><expr><name>nsIDOMHTMLElement</name> *<name>aElement</name></expr></argument>, 
                          <argument><expr>const <name>nsAString</name>&amp; <name>aName</name></expr></argument>, 
                          <argument><expr><name>nsAString</name>&amp; <name>aValue</name></expr></argument>)</argument_list></call></expr>; 

  <expr><name>NS_IMETHOD</name> <call><name>ProvideContent</name><argument_list>(<argument><expr>const <name>nsAString</name>&amp; <name>aFormType</name></expr></argument>, 
                            <argument><expr><name>nsStringArray</name>&amp; <name>aContent</name></expr></argument>, 
                            <argument><expr><name>nsAString</name>&amp; <name>aAttribute</name></expr></argument>)</argument_list></call></expr>; 
  <expr><name>NS_DECL_ISUPPORTS</name> 

  static <name>NS_METHOD</name> <call><name>Create</name><argument_list>(<argument><expr><name>nsISupports</name>* <name>aOuter</name></expr></argument>, <argument><expr>const <name>nsIID</name>&amp; <name>aIID</name></expr></argument>, <argument><expr><name>void</name>* *<name>aResult</name></expr></argument>)</argument_list></call></expr>;

<expr><name>protected</name>:
  <name>nsresult</name> <call><name>GetPublicKey</name><argument_list>(<argument><expr><name>nsAString</name>&amp; <name>aValue</name></expr></argument>, <argument><expr><name>nsAString</name>&amp; <name>aChallenge</name></expr></argument>, 
			<argument><expr><name>nsAFlatString</name>&amp; <name>akeyType</name></expr></argument>, <argument><expr><name>nsAString</name>&amp; <name>aOutPublicKey</name></expr></argument>,
			<argument><expr><name>nsAString</name>&amp; <name>aPqg</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>nsresult</name> <macro><name>GetSlot</name><argument_list>(<argument>PRUint32 aMechanism</argument>, <argument>PK11SlotInfo** aSlot</argument>)</argument_list></macro></expr>;
<expr><name>private</name>:
  <name>nsCOMPtr</name>&lt;<name>nsIInterfaceRequestor</name>&gt; <name>m_ctx</name></expr>;

  <typedef>typedef <type><struct>struct <name>SECKeySizeChoiceInfoStr</name> <block>{
      <decl_stmt><decl><type><name>nsString</name></type> <name>name</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
  <expr_stmt/></block></struct></type></typedef>}</block> <name>SECKeySizeChoiceInfo</name></expr>;</expr_stmt>

  <enum>enum <block>{ <decl><name>number_of_key_size_choices</name> <init>= <expr>2</expr></init></decl> }</block>;</enum>

  <decl_stmt><decl><type><name>SECKeySizeChoiceInfo</name></type> <name><name>mSECKeySizeChoiceList</name><index>[<expr><name>number_of_key_size_choices</name></expr>]</index></name></decl>;</decl_stmt>
};

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//_NSKEYGENHANDLER_H_</comment>
</unit>
