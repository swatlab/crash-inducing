<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="006c051c07232c49566066f3daea49b9ff901199.h"><comment type="block">/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: set ts=4 sw=4 et tw=99:
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla SpiderMonkey JavaScript 1.9 code, released
 * May 28, 2008.
 *
 * The Initial Developer of the Original Code is
 *   Brendan Eich &lt;brendan@mozilla.org&gt;
 *
 * Contributor(s):
 *   David Anderson &lt;danderson@mozilla.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>defined</name> <name>jsjaeger_framestate_h__</name> &amp;&amp; <name>defined</name> <name>JS_METHODJIT</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jsjaeger_framestate_h__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"methodjit/MachineRegs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"methodjit/FrameEntry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CodeGenIncludes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ImmutableSync.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jscompartment.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>js</name> <block>{
<decl_stmt><decl><type><name>namespace</name></type> <name>mjit</name> <block>{

<struct>struct <name>StateRemat</name> <block>{
    <typedef>typedef <expr_stmt><expr><name>JSC</name>::<name>MacroAssembler</name>::<name>RegisterID</name> <name>RegisterID</name></expr>;</expr_stmt></typedef>
    <union>union <block>{
        <expr_stmt><expr><name>RegisterID</name> <name>reg</name> : 31</expr>;</expr_stmt>
        <expr_stmt><expr><name>uint32</name> <name>offset</name>  : 31</expr>;</expr_stmt>
    }</block>;</union>
    <expr_stmt><expr><name>bool</name> <name>inReg</name> : 1</expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>Uses</name> <block>{
    <macro><name>explicit</name></macro> <macro><name>Uses</name><argument_list>(<argument>uint32 nuses</argument>)</argument_list></macro>
      : <macro><name>nuses</name><argument_list>(<argument>nuses</argument>)</argument_list></macro>
    <block>{ }</block>
    <decl_stmt><decl><type><name>uint32</name></type> <name>nuses</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>Changes</name> <block>{
    <macro><name>explicit</name></macro> <macro><name>Changes</name><argument_list>(<argument>uint32 nchanges</argument>)</argument_list></macro>
      : <macro><name>nchanges</name><argument_list>(<argument>nchanges</argument>)</argument_list></macro>
    <block>{ }</block>
    <decl_stmt><decl><type><name>uint32</name></type> <name>nchanges</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>MaybeRegisterID</name> <block>{
    <typedef>typedef <expr_stmt><expr><name>JSC</name>::<name>MacroAssembler</name>::<name>RegisterID</name> <name>RegisterID</name></expr>;</expr_stmt></typedef>

  <label><name>public</name>:</label>
    <expr_stmt><expr><call><name>MaybeRegisterID</name><argument_list>()</argument_list></call>
      : <call><name>reg_</name><argument_list>(<argument><expr><name>Registers</name>::<name>ReturnReg</name></expr></argument>)</argument_list></call></expr>, <macro><name>set</name><argument_list>(<argument>false</argument>)</argument_list></macro>
    <expr><block>{ }</block>

    <macro><name>MaybeRegisterID</name><argument_list>(<argument>RegisterID reg</argument>)</argument_list></macro>
      : <call><name>reg_</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>, <macro><name>set</name><argument_list>(<argument>true</argument>)</argument_list></macro>
    <expr><block>{ }</block>

    inline <name>RegisterID</name> <macro><name>reg</name><argument_list>()</argument_list></macro> const <block>{ <expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>; <return>return <expr><name>reg_</name></expr>;</return> }</block></expr></expr_stmt>
    <function><type><specifier>inline</specifier> <name>void</name></type> <name>setReg</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>RegisterID</name></type> <name>r</name></decl></param>)</parameter_list> <block>{ <expr_stmt><expr><name>reg_</name> = <name>r</name></expr>;</expr_stmt> <expr_stmt><expr><name>set</name> = <name>true</name></expr>;</expr_stmt> }</block></function>
    <expr_stmt><expr>inline <name>bool</name> <macro><name>isSet</name><argument_list>()</argument_list></macro> const <block>{ <return>return <expr><name>set</name></expr>;</return> }</block></expr></expr_stmt>

    <decl_stmt><decl><type><name>MaybeRegisterID</name> &amp;</type> <name>operator</name> <init>=<expr>(const <name>MaybeRegisterID</name> &amp;<name>other</name>) <block>{
        <expr><name>set</name> = <name><name>other</name>.<name>set</name></name></expr>;
        <expr><name>reg_</name> = <name><name>other</name>.<name>reg_</name></name></expr>;
        <return>return <expr>*<name>this</name></expr>;</return>
    }</block></expr></init></decl></decl_stmt>

    <decl_stmt><decl><type><name>MaybeRegisterID</name> &amp;</type> <name>operator</name> <init>=<expr>(<name>RegisterID</name> <name>r</name>) <block>{
        <expr><call><name>setReg</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;
        <return>return <expr>*<name>this</name></expr>;</return>
    }</block></expr></init></decl></decl_stmt>

  <label><name>private</name>:</label>
    <decl_stmt><decl><type><name>RegisterID</name></type> <name>reg_</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>set</name></decl>;</decl_stmt>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block">/*
 * The FrameState keeps track of values on the frame during compilation.
 * The compiler can query FrameState for information about arguments, locals,
 * and stack slots (all hereby referred to as "slots"). Slot information can
 * be requested in constant time. For each slot there is a FrameEntry *. If
 * this is non-NULL, it contains valid information and can be returned.
 *
 * The register allocator keeps track of registers as being in one of two
 * states. These are:
 *
 * 1) Unowned. Some code in the compiler is working on a register.
 * 2) Owned. The FrameState owns the register, and may spill it at any time.
 *
 * ------------------ Implementation Details ------------------
 * 
 * Observations:
 *
 * 1) We totally blow away known information quite often; branches, merge points.
 * 2) Every time we need a slow call, we must sync everything.
 * 3) Efficient side-exits need to quickly deltize state snapshots.
 * 4) Syncing is limited to constants and registers.
 * 5) Once a value is tracked, there is no reason to "forget" it until #1.
 * 
 * With these in mind, we want to make sure that the compiler doesn't degrade
 * badly as functions get larger.
 *
 * If the FE is NULL, a new one is allocated, initialized, and stored. They
 * are allocated from a pool such that (fe - pool) can be used to compute
 * the slot's Address.
 *
 * We keep a side vector of all tracked FrameEntry * to quickly generate
 * memory stores and clear the tracker.
 *
 * It is still possible to get really bad behavior with a very large script
 * that doesn't have branches or calls. That's okay, having this code in
 * minimizes damage and lets us introduce a hard cut-off point.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>FrameState</name>
<block>{
    <decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ImmutableSync</name></decl>;</decl_stmt>

    <typedef>typedef <expr_stmt><expr><name>JSC</name>::<name>MacroAssembler</name>::<name>RegisterID</name> <name>RegisterID</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>JSC</name>::<name>MacroAssembler</name>::<name>FPRegisterID</name> <name>FPRegisterID</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>JSC</name>::<name>MacroAssembler</name>::<name>Address</name> <name>Address</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>JSC</name>::<name>MacroAssembler</name>::<name>Jump</name> <name>Jump</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>JSC</name>::<name>MacroAssembler</name>::<name>Imm32</name> <name>Imm32</name></expr>;</expr_stmt></typedef>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32</name></type> <name>InvalidIndex</name> <init>= <expr>0xFFFFFFFF</expr></init></decl>;</decl_stmt>

    <struct>struct <name>Tracker</name> <block>{
        <expr_stmt><expr><call><name>Tracker</name><argument_list>()</argument_list></call>
          : <call><name>entries</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>, <macro><name>nentries</name><argument_list>(<argument>0</argument>)</argument_list></macro>
        <expr><block>{ }</block>

        <name>void</name> <macro><name>add</name><argument_list>(<argument>FrameEntry *fe</argument>)</argument_list></macro> <block>{
            <expr><name><name>entries</name><index>[<expr><name>nentries</name>++</expr>]</index></name> = <name>fe</name></expr>;
        }</block>

        <name>void</name> <macro><name>reset</name><argument_list>()</argument_list></macro> <block>{
            <expr><name>nentries</name> = 0</expr>;
        }</block>

        <name>FrameEntry</name> * <name><name>operator</name> <index>[]</index></name>(<name>uint32</name> <name>n</name>) const <block>{
            <expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>n</name> &lt; <name>nentries</name></expr></argument>)</argument_list></call></expr>;
            <return>return <expr><name><name>entries</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
        }</block></expr></expr_stmt>

        <decl_stmt><decl><type><name>FrameEntry</name> **</type><name>entries</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32</name></type> <name>nentries</name></decl>;</decl_stmt>
    }</block>;</struct>

    <struct>struct <name>RegisterState</name> <block>{
        <macro><name>RegisterState</name><argument_list>()</argument_list></macro>
        <block>{ }</block>

        <macro><name>RegisterState</name><argument_list>(<argument>FrameEntry *fe</argument>, <argument>RematInfo::RematType type</argument>)</argument_list></macro>
          : <expr_stmt><expr><call><name>fe</name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>, <macro><name>type</name><argument_list>(<argument>type</argument>)</argument_list></macro>
        <expr><block>{ }</block>

        <comment type="block">/* FrameEntry owning this register, or NULL if not owned by a frame. */</comment>
        <name>FrameEntry</name> *<name>fe</name></expr>;</expr_stmt>

        <comment type="block">/* Hack - simplifies register allocation for pairs. */</comment>
        <decl_stmt><decl><type><name>FrameEntry</name> *</type><name>save</name></decl>;</decl_stmt>
        
        <comment type="block">/* Part of the FrameEntry that owns the FE. */</comment>
        <expr_stmt><expr><name>RematInfo</name>::<name>RematType</name> <name>type</name></expr>;</expr_stmt>
    }</block>;</struct>

  <label><name>public</name>:</label>
    <expr_stmt><expr><call><name>FrameState</name><argument_list>(<argument><expr><name>JSContext</name> *<name>cx</name></expr></argument>, <argument><expr><name>JSScript</name> *<name>script</name></expr></argument>, <argument><expr><name>Assembler</name> &amp;<name>masm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>~<call><name>FrameState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>bool</name></type> <name>init</name><parameter_list>(<param><decl><type><name>uint32</name></type> <name>nargs</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Pushes a synced slot.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>pushSynced</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block">/*
     * Pushes a slot that has a known, synced type and payload.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>pushSyncedType</name><parameter_list>(<param><decl><type><name>JSValueType</name></type> <name>type</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Pushes a slot that has a known, synced type and payload.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>pushSynced</name><parameter_list>(<param><decl><type><name>JSValueType</name></type> <name>type</name></decl></param>, <param><decl><type><name>RegisterID</name></type> <name>reg</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Pushes a constant value.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>push</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>Value</name> &amp;</type><name>v</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Loads a value from memory and pushes it.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>push</name><parameter_list>(<param><decl><type><name>Address</name></type> <name>address</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Pushes a known type and allocated payload onto the operation stack.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>pushTypedPayload</name><parameter_list>(<param><decl><type><name>JSValueType</name></type> <name>type</name></decl></param>, <param><decl><type><name>RegisterID</name></type> <name>payload</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Pushes a type register and data register pair.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>pushRegs</name><parameter_list>(<param><decl><type><name>RegisterID</name></type> <name>type</name></decl></param>, <param><decl><type><name>RegisterID</name></type> <name>data</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Pushes a known type and allocated payload onto the operation stack.
     * This must be used when the type is known, but cannot be propagated
     * because it is not known to be correct at a slow-path merge point.
     *
     * The caller guarantees that the tag was a fast-path check; that is,
     * the value it replaces on the stack had the same tag if the fast-path
     * was taken.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>pushUntypedPayload</name><parameter_list>(<param><decl><type><name>JSValueType</name></type> <name>type</name></decl></param>, <param><decl><type><name>RegisterID</name></type> <name>payload</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Pushes a number onto the operation stack.
     *
     * If asInt32 is set to true, then the FS will attempt to optimize
     * syncing the type as int32. Only use this parameter when the fast-path
     * guaranteed that the stack slot was guarded to be an int32 originally.
     *
     * For example, checking LHS and RHS as ints guarantees that if the LHS
     * was synced, then popping both and pushing a maybe-int32 does not need
     * to be synced.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>pushNumber</name><parameter_list>(<param><decl><type><name>MaybeRegisterID</name></type> <name>payload</name></decl></param>, <param><decl><type><name>bool</name></type> <name>asInt32</name> <init>= <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Pushes an int32 onto the operation stack. This is a specialized version
     * of pushNumber. The caller must guarantee that (a) an int32 is to be 
     * pushed on the inline path, and (b) if any slow path pushes a double,
     * the slow path also stores the double to memory.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>pushInt32</name><parameter_list>(<param><decl><type><name>RegisterID</name></type> <name>payload</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Pops a value off the operation stack, freeing any of its resources.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>pop</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block">/*
     * Pops a number of values off the operation stack, freeing any of their
     * resources.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>popn</name><parameter_list>(<param><decl><type><name>uint32</name></type> <name>n</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Returns true iff lhs and rhs are copies of the same FrameEntry.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>bool</name></type> <name>haveSameBacking</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>lhs</name></decl></param>, <param><decl><type><name>FrameEntry</name> *</type><name>rhs</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Temporarily increase and decrease local variable depth.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>enterBlock</name><parameter_list>(<param><decl><type><name>uint32</name></type> <name>n</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>leaveBlock</name><parameter_list>(<param><decl><type><name>uint32</name></type> <name>n</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Pushes a copy of a local variable.
     */</comment>
    <function_decl><type><name>void</name></type> <name>pushLocal</name><parameter_list>(<param><decl><type><name>uint32</name></type> <name>n</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Allocates a temporary register for a FrameEntry's type. The register
     * can be spilled or clobbered by the frame. The compiler may only operate
     * on it temporarily, and must take care not to clobber it.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>RegisterID</name></type> <name>tempRegForType</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Try to use a register already allocated for fe's type, but if one
     * is not already available, use fallback.
     *
     * Note: this does NOT change fe's type-register remat info. It's supposed
     * to be a super lightweight/transparent operation.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>RegisterID</name></type> <name>tempRegForType</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>, <param><decl><type><name>RegisterID</name></type> <name>fallback</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Returns a register that is guaranteed to contain the frame entry's
     * data payload. The compiler may not modify the contents of the register.
     * The compiler should NOT explicitly free it.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>RegisterID</name></type> <name>tempRegForData</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Same as above, except register must match identically.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>RegisterID</name></type> <name>tempRegInMaskForData</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>, <param><decl><type><name>uint32</name></type> <name>mask</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Same as above, except loads into reg (using masm) if the entry does not
     * already have a register, and does not change the frame state in doing so.
     */</comment>
    <decl_stmt><decl><type><specifier>inline</specifier> <name>RegisterID</name></type> <name>tempRegForData</name><argument_list>(<argument><expr><name>FrameEntry</name> *<name>fe</name></expr></argument>, <argument><expr><name>RegisterID</name> <name>reg</name></expr></argument>, <argument><expr><name>Assembler</name> &amp;<name>masm</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <comment type="block">/*
     * Forcibly loads the type tag for the specified FrameEntry
     * into a register already marked as owning the type.
     */</comment>
    <decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>emitLoadTypeTag</name><argument_list>(<argument><expr><name>FrameEntry</name> *<name>fe</name></expr></argument>, <argument><expr><name>RegisterID</name> <name>reg</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>emitLoadTypeTag</name><argument_list>(<argument><expr><name>Assembler</name> &amp;<name>masm</name></expr></argument>, <argument><expr><name>FrameEntry</name> *<name>fe</name></expr></argument>, <argument><expr><name>RegisterID</name> <name>reg</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <comment type="block">/*
     * Convert an integer to a double without applying
     * additional Register pressure.
     */</comment>
    <decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>convertInt32ToDouble</name><argument_list>(<argument><expr><name>Assembler</name> &amp;<name>masm</name></expr></argument>, <argument><expr><name>FrameEntry</name> *<name>fe</name></expr></argument>,
                                     <argument><expr><name>FPRegisterID</name> <name>fpreg</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <comment type="block">/*
     * Dive into a FrameEntry and check whether it's in a register.
     */</comment>
    <decl_stmt><decl><type><specifier>inline</specifier> <name>bool</name></type> <name>peekTypeInRegister</name><argument_list>(<argument><expr><name>FrameEntry</name> *<name>fe</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <comment type="block">/*
     * Allocates a register for a FrameEntry's data, such that the compiler
     * can modify it in-place.
     *
     * The caller guarantees the FrameEntry will not be observed again. This
     * allows the compiler to avoid spilling. Only call this if the FE is
     * going to be popped before stubcc joins/guards or the end of the current
     * opcode.
     */</comment>
    <function_decl><type><name>RegisterID</name></type> <name>ownRegForData</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Allocates a register for a FrameEntry's type, such that the compiler
     * can modify it in-place.
     *
     * The caller guarantees the FrameEntry will not be observed again. This
     * allows the compiler to avoid spilling. Only call this if the FE is
     * going to be popped before stubcc joins/guards or the end of the current
     * opcode.
     */</comment>
    <function_decl><type><name>RegisterID</name></type> <name>ownRegForType</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Allocates a register for a FrameEntry's data, such that the compiler
     * can modify it in-place. The actual FE is not modified.
     */</comment>
    <function_decl><type><name>RegisterID</name></type> <name>copyDataIntoReg</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>copyDataIntoReg</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>, <param><decl><type><name>RegisterID</name></type> <name>exact</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>RegisterID</name></type> <name>copyDataIntoReg</name><parameter_list>(<param><decl><type><name>Assembler</name> &amp;</type><name>masm</name></decl></param>, <param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Allocates a FPRegister for a FrameEntry, such that the compiler
     * can modify it in-place. The FrameState is not modified.
     */</comment>
    <function_decl><type><name>FPRegisterID</name></type> <name>copyEntryIntoFPReg</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>, <param><decl><type><name>FPRegisterID</name></type> <name>fpreg</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>FPRegisterID</name></type> <name>copyEntryIntoFPReg</name><parameter_list>(<param><decl><type><name>Assembler</name> &amp;</type><name>masm</name></decl></param>, <param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>,
                                    <param><decl><type><name>FPRegisterID</name></type> <name>fpreg</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Allocates a register for a FrameEntry's type, such that the compiler
     * can modify it in-place. The actual FE is not modified.
     */</comment>
    <function_decl><type><name>RegisterID</name></type> <name>copyTypeIntoReg</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Returns a register that contains the constant Int32 value of the
     * frame entry's data payload.
     * Since the register is not bound to a FrameEntry,
     * it MUST be explicitly freed with freeReg().
     */</comment>
    <function_decl><type><name>RegisterID</name></type> <name>copyInt32ConstantIntoReg</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>RegisterID</name></type> <name>copyInt32ConstantIntoReg</name><parameter_list>(<param><decl><type><name>Assembler</name> &amp;</type><name>masm</name></decl></param>, <param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Gets registers for the components of fe where needed,
     * pins them and stores into vr.
     */</comment>
    <function_decl><type><name>void</name></type> <name>pinEntry</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>, <param><decl><type><name>ValueRemat</name> &amp;</type><name>vr</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/* Unpins registers from a call to pinEntry. */</comment>
    <function_decl><type><name>void</name></type> <name>unpinEntry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>ValueRemat</name> &amp;</type><name>vr</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/* Syncs fe to memory, given its state as constructed by a call to pinEntry. */</comment>
    <function_decl><type><name>void</name></type> <name>syncEntry</name><parameter_list>(<param><decl><type><name>Assembler</name> &amp;</type><name>masm</name></decl></param>, <param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>ValueRemat</name> &amp;</type><name>vr</name></decl></param>)</parameter_list>;</function_decl>

    <struct>struct <name>BinaryAlloc</name> <block>{
        <decl_stmt><decl><type><name>MaybeRegisterID</name></type> <name>lhsType</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MaybeRegisterID</name></type> <name>lhsData</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MaybeRegisterID</name></type> <name>rhsType</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MaybeRegisterID</name></type> <name>rhsData</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MaybeRegisterID</name></type> <name>extraFree</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RegisterID</name></type> <name>result</name></decl>;</decl_stmt>  <comment type="line">// mutable result reg</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>resultHasRhs</name></decl>;</decl_stmt>  <comment type="line">// whether the result has the RHS instead of the LHS</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>lhsNeedsRemat</name></decl>;</decl_stmt> <comment type="line">// whether LHS needs memory remat</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>rhsNeedsRemat</name></decl>;</decl_stmt> <comment type="line">// whether RHS needs memory remat</comment>
    }</block>;</struct>

    <comment type="block">/*
     * Ensures that the two given FrameEntries have registers for both their
     * type and data. The register allocations are returned in a struct.
     *
     * One mutable register is allocated as well, holding the LHS payload. If
     * this would cause a spill that could be avoided by using a mutable RHS,
     * and the operation is commutative, then the resultHasRhs is set to true.
     */</comment>
    <function_decl><type><name>void</name></type> <name>allocForBinary</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>lhs</name></decl></param>, <param><decl><type><name>FrameEntry</name> *</type><name>rhs</name></decl></param>, <param><decl><type><name>JSOp</name></type> <name>op</name></decl></param>, <param><decl><type><name>BinaryAlloc</name> &amp;</type><name>alloc</name></decl></param>,
                        <param><decl><type><name>bool</name></type> <name>resultNeeded</name> <init>= <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/* Ensures that an FE has both type and data remat'd in registers. */</comment>
    <function_decl><type><name>void</name></type> <name>ensureFullRegs</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Similar to allocForBinary, except works when the LHS and RHS have the
     * same backing FE. Only a reduced subset of BinaryAlloc is used:
     *   lhsType
     *   lhsData
     *   result
     *   lhsNeedsRemat
     */</comment>
    <function_decl><type><name>void</name></type> <name>allocForSameBinary</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>, <param><decl><type><name>JSOp</name></type> <name>op</name></decl></param>, <param><decl><type><name>BinaryAlloc</name> &amp;</type><name>alloc</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/* Loads an FE into an fp reg. */</comment>
    <decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>loadDouble</name><argument_list>(<argument><expr><name>FrameEntry</name> *<name>fe</name></expr></argument>, <argument><expr><name>FPRegisterID</name> <name>fpReg</name></expr></argument>, <argument><expr><name>Assembler</name> &amp;<name>masm</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <comment type="block">/*
     * Slightly more specialized version when more precise register
     * information is known.
     */</comment>
    <decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>loadDouble</name><argument_list>(<argument><expr><name>RegisterID</name> <name>type</name></expr></argument>, <argument><expr><name>RegisterID</name> <name>data</name></expr></argument>, <argument><expr><name>FrameEntry</name> *<name>fe</name></expr></argument>, <argument><expr><name>FPRegisterID</name> <name>fpReg</name></expr></argument>,
                           <argument><expr><name>Assembler</name> &amp;<name>masm</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <comment type="block">/*
     * Types don't always have to be in registers, sometimes the compiler
     * can use addresses and avoid spilling. If this FrameEntry has a synced
     * address and no register, this returns true.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>bool</name></type> <name>shouldAvoidTypeRemat</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Payloads don't always have to be in registers, sometimes the compiler
     * can use addresses and avoid spilling. If this FrameEntry has a synced
     * address and no register, this returns true.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>bool</name></type> <name>shouldAvoidDataRemat</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Frees a temporary register. If this register is being tracked, then it
     * is not spilled; the backing data becomes invalidated!
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>freeReg</name><parameter_list>(<param><decl><type><name>RegisterID</name></type> <name>reg</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Allocates a register. If none are free, one may be spilled from the
     * tracker. If there are none available for spilling in the tracker,
     * then this is considered a compiler bug and an assert will fire.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>RegisterID</name></type> <name>allocReg</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block">/*
     * Allocates a register, except using a mask.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>RegisterID</name></type> <name>allocReg</name><parameter_list>(<param><decl><type><name>uint32</name></type> <name>mask</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Allocates a specific register, evicting it if it's not avaliable.
     */</comment>
    <function_decl><type><name>void</name></type> <name>takeReg</name><parameter_list>(<param><decl><type><name>RegisterID</name></type> <name>reg</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Returns a FrameEntry * for a slot on the operation stack.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>FrameEntry</name> *</type><name>peek</name><parameter_list>(<param><decl><type><name>int32</name></type> <name>depth</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Fully stores a FrameEntry at an arbitrary address. popHint specifies
     * how hard the register allocator should try to keep the FE in registers.
     */</comment>
    <function_decl><type><name>void</name></type> <name>storeTo</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>, <param><decl><type><name>Address</name></type> <name>address</name></decl></param>, <param><decl><type><name>bool</name></type> <name>popHint</name> <init>= <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Stores the top stack slot back to a local variable.
     */</comment>
    <function_decl><type><name>void</name></type> <name>storeLocal</name><parameter_list>(<param><decl><type><name>uint32</name></type> <name>n</name></decl></param>, <param><decl><type><name>bool</name></type> <name>popGuaranteed</name> <init>= <expr><name>false</name></expr></init></decl></param>, <name>bool</name> <name>typeChange</name> = <name>true</name>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Restores state from a slow path.
     */</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>merge</name><argument_list>(<argument><expr><name>Assembler</name> &amp;<name>masm</name></expr></argument>, <argument><expr><name>Changes</name> <name>changes</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <comment type="block">/*
     * Writes unsynced stores to an arbitrary buffer.
     */</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>sync</name><argument_list>(<argument><expr><name>Assembler</name> &amp;<name>masm</name></expr></argument>, <argument><expr><name>Uses</name> <name>uses</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <comment type="block">/*
     * Syncs all outstanding stores to memory and possibly kills regs in the
     * process.  The top [ignored..uses-1] frame entries will be synced.
     */</comment>
    <function_decl><type><name>void</name></type> <name>syncAndKill</name><parameter_list>(<param><decl><type><name>Registers</name></type> <name>kill</name></decl></param>, <param><decl><type><name>Uses</name></type> <name>uses</name></decl></param>, <param><decl><type><name>Uses</name></type> <name>ignored</name></decl></param>)</parameter_list>;</function_decl>
    <function><type><name>void</name></type> <name>syncAndKill</name><parameter_list>(<param><decl><type><name>Registers</name></type> <name>kill</name></decl></param>, <param><decl><type><name>Uses</name></type> <name>uses</name></decl></param>)</parameter_list> <block>{ <expr_stmt><expr><call><name>syncAndKill</name><argument_list>(<argument><expr><name>kill</name></expr></argument>, <argument><expr><name>uses</name></expr></argument>, <argument><expr><call><name>Uses</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>

    <comment type="block">/*
     * Reset the register state.
     */</comment>
    <function_decl><type><name>void</name></type> <name>resetRegState</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block">/*
     * Clear all tracker entries, syncing all outstanding stores in the process.
     * The stack depth is in case some merge points' edges did not immediately
     * precede the current instruction.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>forgetEverything</name><parameter_list>(<param><decl><type><name>uint32</name></type> <name>newStackDepth</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Same as above, except the stack depth is not changed. This is used for
     * branching opcodes.
     */</comment>
    <function_decl><type><name>void</name></type> <name>forgetEverything</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block">/*
     * Throw away the entire frame state, without syncing anything.
     */</comment>
    <function_decl><type><name>void</name></type> <name>throwaway</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block">/*
     * Mark an existing slot with a type.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>learnType</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>, <param><decl><type><name>JSValueType</name></type> <name>type</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Forget a type, syncing in the process.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>forgetType</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Helper function. Tests if a slot's type is null. Condition should
     * be Equal or NotEqual.
     */</comment>
    <decl_stmt><decl><type><specifier>inline</specifier> <name>Jump</name></type> <name>testNull</name><argument_list>(<argument><expr><name>Assembler</name>::<name>Condition</name> <name>cond</name></expr></argument>, <argument><expr><name>FrameEntry</name> *<name>fe</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block">/*
     * Helper function. Tests if a slot's type is an integer. Condition should
     * be Equal or NotEqual.
     */</comment>
    <decl_stmt><decl><type><specifier>inline</specifier> <name>Jump</name></type> <name>testInt32</name><argument_list>(<argument><expr><name>Assembler</name>::<name>Condition</name> <name>cond</name></expr></argument>, <argument><expr><name>FrameEntry</name> *<name>fe</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block">/*
     * Helper function. Tests if a slot's type is a double. Condition should
     * be Equal or Not Equal.
     */</comment>
    <decl_stmt><decl><type><specifier>inline</specifier> <name>Jump</name></type> <name>testDouble</name><argument_list>(<argument><expr><name>Assembler</name>::<name>Condition</name> <name>cond</name></expr></argument>, <argument><expr><name>FrameEntry</name> *<name>fe</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block">/*
     * Helper function. Tests if a slot's type is a boolean. Condition should
     * be Equal or NotEqual.
     */</comment>
    <decl_stmt><decl><type><specifier>inline</specifier> <name>Jump</name></type> <name>testBoolean</name><argument_list>(<argument><expr><name>Assembler</name>::<name>Condition</name> <name>cond</name></expr></argument>, <argument><expr><name>FrameEntry</name> *<name>fe</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block">/*
     * Helper function. Tests if a slot's type is a string. Condition should
     * be Equal or NotEqual.
     */</comment>
    <decl_stmt><decl><type><specifier>inline</specifier> <name>Jump</name></type> <name>testString</name><argument_list>(<argument><expr><name>Assembler</name>::<name>Condition</name> <name>cond</name></expr></argument>, <argument><expr><name>FrameEntry</name> *<name>fe</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block">/*
     * Helper function. Tests if a slot's type is a non-funobj. Condition should
     * be Equal or NotEqual.
     */</comment>
    <decl_stmt><decl><type><specifier>inline</specifier> <name>Jump</name></type> <name>testObject</name><argument_list>(<argument><expr><name>Assembler</name>::<name>Condition</name> <name>cond</name></expr></argument>, <argument><expr><name>FrameEntry</name> *<name>fe</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block">/*
     * Helper function. Tests if a slot's type is primitve. Condition should
     * be Equal or NotEqual.
     */</comment>
    <decl_stmt><decl><type><specifier>inline</specifier> <name>Jump</name></type> <name>testPrimitive</name><argument_list>(<argument><expr><name>Assembler</name>::<name>Condition</name> <name>cond</name></expr></argument>, <argument><expr><name>FrameEntry</name> *<name>fe</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block">/*
     * Marks a register such that it cannot be spilled by the register
     * allocator. Any pinned registers must be unpinned at the end of the op.
     * Note: This function should only be used on registers tied to FEs.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>pinReg</name><parameter_list>(<param><decl><type><name>RegisterID</name></type> <name>reg</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Unpins a previously pinned register.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>unpinReg</name><parameter_list>(<param><decl><type><name>RegisterID</name></type> <name>reg</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Dups the top item on the stack.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>dup</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block">/*
     * Dups the top 2 items on the stack.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>dup2</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block">/*
     * Dups an item n-deep in the stack. n must be &lt; 0
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>dupAt</name><parameter_list>(<param><decl><type><name>int32</name></type> <name>n</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * If the frameentry is a copy, give it its own registers.
     * This may only be called on the topmost fe.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>giveOwnRegs</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Returns the current stack depth of the frame.
     */</comment>
    <expr_stmt><expr><name>uint32</name> <macro><name>stackDepth</name><argument_list>()</argument_list></macro> const <block>{ <return>return <expr><name>sp</name> - <name>spBase</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>uint32</name> <macro><name>frameDepth</name><argument_list>()</argument_list></macro> const <block>{ <return>return <expr><call><name>stackDepth</name><argument_list>()</argument_list></call> + <name><name>script</name>-&gt;<name>nfixed</name></name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr>inline <name>FrameEntry</name> *<macro><name>tosFe</name><argument_list>()</argument_list></macro> const</expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><name>void</name> <macro><name>assertValidRegisterState</name><argument_list>()</argument_list></macro> const</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>Address</name></type> <name>addressOf</name><argument_list>(<argument><expr>const <name>FrameEntry</name> *<name>fe</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Address</name></type> <name>addressForDataRemat</name><argument_list>(<argument><expr>const <name>FrameEntry</name> *<name>fe</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>inline</specifier> <name>StateRemat</name></type> <name>dataRematInfo</name><argument_list>(<argument><expr>const <name>FrameEntry</name> *<name>fe</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <comment type="block">/*
     * This is similar to freeReg(ownRegForData(fe)) - except no movement takes place.
     * The fe is simply invalidated as if it were popped. This can be used to free
     * registers in the working area of the stack. Obviously, this can only be called
     * in infallible code that will pop these entries soon after.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>eviscerate</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Moves the top of the stack down N slots, popping each item above it.
     * Caller guarantees the slots below have been observed and eviscerated.
     */</comment>
    <function_decl><type><name>void</name></type> <name>shimmy</name><parameter_list>(<param><decl><type><name>uint32</name></type> <name>n</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Stores the top item on the stack to a stack slot, count down from the
     * current stack depth. For example, to move the top (-1) to -3, you would
     * call shift(-2).
     */</comment>
    <function_decl><type><name>void</name></type> <name>shift</name><parameter_list>(<param><decl><type><name>int32</name></type> <name>n</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="block">/*
     * Notifies the frame of a slot that can escape. Returns whether or not
     * the slot was added.
     */</comment>
    <function_decl><type><specifier>inline</specifier> <name>bool</name></type> <name>addEscaping</name><parameter_list>(<param><decl><type><name>uint32</name></type> <name>local</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><specifier>inline</specifier> <name>void</name></type> <name>setInTryBlock</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>inTryBlock</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>-&gt;<name>inTryBlock</name></name> = <name>inTryBlock</name></expr>;</expr_stmt>
    }</block></function>

  <label><name>private</name>:</label>
    <decl_stmt><decl><type><specifier>inline</specifier> <name>RegisterID</name></type> <name>allocReg</name><argument_list>(<argument><expr><name>FrameEntry</name> *<name>fe</name></expr></argument>, <argument><expr><name>RematInfo</name>::<name>RematType</name> <name>type</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>forgetReg</name><parameter_list>(<param><decl><type><name>RegisterID</name></type> <name>reg</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>RegisterID</name></type> <name>evictSomeReg</name><parameter_list>(<param><decl><type><name>uint32</name></type> <name>mask</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>evictReg</name><parameter_list>(<param><decl><type><name>RegisterID</name></type> <name>reg</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>inline</specifier> <name>FrameEntry</name> *</type><name>rawPush</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><specifier>inline</specifier> <name>FrameEntry</name> *</type><name>addToTracker</name><parameter_list>(<param><decl><type><name>uint32</name></type> <name>index</name></decl></param>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>syncType</name><argument_list>(<argument><expr>const <name>FrameEntry</name> *<name>fe</name></expr></argument>, <argument><expr><name>Address</name> <name>to</name></expr></argument>, <argument><expr><name>Assembler</name> &amp;<name>masm</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>inline</specifier> <name>void</name></type> <name>syncData</name><argument_list>(<argument><expr>const <name>FrameEntry</name> *<name>fe</name></expr></argument>, <argument><expr><name>Address</name> <name>to</name></expr></argument>, <argument><expr><name>Assembler</name> &amp;<name>masm</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
    <function_decl><type><specifier>inline</specifier> <name>FrameEntry</name> *</type><name>getLocal</name><parameter_list>(<param><decl><type><name>uint32</name></type> <name>slot</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>forgetAllRegs</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>inline</specifier> <name>void</name></type> <name>swapInTracker</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>lhs</name></decl></param>, <param><decl><type><name>FrameEntry</name> *</type><name>rhs</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>inline</specifier> <name>uint32</name></type> <name>localIndex</name><parameter_list>(<param><decl><type><name>uint32</name></type> <name>n</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>pushCopyOf</name><parameter_list>(<param><decl><type><name>uint32</name></type> <name>index</name></decl></param>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>void</name></type> <name>syncFancy</name><argument_list>(<argument><expr><name>Assembler</name> &amp;<name>masm</name></expr></argument>, <argument><expr><name>Registers</name> <name>avail</name></expr></argument>, <argument><expr><name>uint32</name> <name>resumeAt</name></expr></argument>,
                   <argument><expr><name>FrameEntry</name> *<name>bottom</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>inline</specifier> <name>bool</name></type> <name>tryFastDoubleLoad</name><argument_list>(<argument><expr><name>FrameEntry</name> *<name>fe</name></expr></argument>, <argument><expr><name>FPRegisterID</name> <name>fpReg</name></expr></argument>, <argument><expr><name>Assembler</name> &amp;<name>masm</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <comment type="block">/*
     * "Uncopies" the backing store of a FrameEntry that has been copied. The
     * original FrameEntry is not invalidated; this is the responsibility of
     * the caller. The caller can check isCopied() to see if the registers
     * were moved to a copy.
     *
     * Later addition: uncopy() returns the first copy found.
     */</comment>
    <function_decl><type><name>FrameEntry</name> *</type><name>uncopy</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>original</name></decl></param>)</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name>FrameEntry</name> *</type><name>entryFor</name><argument_list>(<argument><expr><name>uint32</name> <name>index</name></expr></argument>)</argument_list> const <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name><name>base</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>&amp;<name><name>entries</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
    }</block></decl></decl_stmt>

    <function><type><name>void</name></type> <name>moveOwnership</name><parameter_list>(<param><decl><type><name>RegisterID</name></type> <name>reg</name></decl></param>, <param><decl><type><name>FrameEntry</name> *</type><name>newFe</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>regstate</name><index>[<expr><name>reg</name></expr>]</index></name>.<name>fe</name> = <name>newFe</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>RegisterID</name></type> <name>evictSomeReg</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>evictSomeReg</name><argument_list>(<argument><expr><name>Registers</name>::<name>AvailRegs</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>uint32</name></type> <name>indexOf</name><parameter_list>(<param><decl><type><name>int32</name></type> <name>depth</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>uint32</name><argument_list>(<argument><expr>(<name>sp</name> + <name>depth</name>) - <name>base</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>uint32</name></type> <name>indexOfFe</name><parameter_list>(<param><decl><type><name>FrameEntry</name> *</type><name>fe</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>uint32</name><argument_list>(<argument><expr><name>fe</name> - <name>entries</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

  <label><name>private</name>:</label>
    <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSScript</name> *</type><name>script</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name>nargs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Assembler</name> &amp;</type><name>masm</name></decl>;</decl_stmt>

    <comment type="block">/* All allocated registers. */</comment>
    <decl_stmt><decl><type><name>Registers</name></type> <name>freeRegs</name></decl>;</decl_stmt>

    <comment type="block">/* Cache of FrameEntry objects. */</comment>
    <decl_stmt><decl><type><name>FrameEntry</name> *</type><name>entries</name></decl>;</decl_stmt>

    <comment type="block">/* Base pointer of the FrameEntry vector. */</comment>
    <decl_stmt><decl><type><name>FrameEntry</name> **</type><name>base</name></decl>;</decl_stmt>

    <comment type="block">/* Base pointer for arguments. */</comment>
    <decl_stmt><decl><type><name>FrameEntry</name> **</type><name>args</name></decl>;</decl_stmt>

    <comment type="block">/* Base pointer for local variables. */</comment>
    <decl_stmt><decl><type><name>FrameEntry</name> **</type><name>locals</name></decl>;</decl_stmt>

    <comment type="block">/* Base pointer for the stack. */</comment>
    <decl_stmt><decl><type><name>FrameEntry</name> **</type><name>spBase</name></decl>;</decl_stmt>

    <comment type="block">/* Dynamic stack pointer. */</comment>
    <decl_stmt><decl><type><name>FrameEntry</name> **</type><name>sp</name></decl>;</decl_stmt>

    <comment type="block">/* Vector of tracked slot indexes. */</comment>
    <decl_stmt><decl><type><name>Tracker</name></type> <name>tracker</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Register ownership state. This can't be used alone; to find whether an
     * entry is active, you must check the allocated registers.
     */</comment>
    <decl_stmt><decl><type><name>RegisterState</name></type> <name><name>regstate</name><index>[<expr><name>Assembler</name>::<name>TotalRegisters</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>mutable</name> <name>ImmutableSync</name></type> <name>reifier</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint32</name> *</type><name>escaping</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>eval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>inTryBlock</name></decl>;</decl_stmt>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}</block></decl></decl_stmt> <comment type="block">/* namespace mjit */</comment>
}</block></decl></decl_stmt> <comment type="block">/* namespace js */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* jsjaeger_framestate_h__ */</comment>

</unit>
