<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="002a3869e3acddd7b0a1bb83dcf66654cdea14a1.h"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>nsFirstLetterFrame_h__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nsFirstLetterFrame_h__</name></cpp:macro></cpp:define>

<comment type="block">/* rendering object for CSS :first-letter pseudo-element */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsHTMLContainerFrame.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nsFirstLetterFrameSuper</name></cpp:macro> <cpp:value>nsHTMLContainerFrame</cpp:value></cpp:define>

<expr_stmt><expr><name>class</name> <name>nsFirstLetterFrame</name> : <name>public</name> <name>nsFirstLetterFrameSuper</name> <block>{
<expr><name>public</name>:
  <name>NS_DECL_FRAMEARENA_HELPERS</name>

  <call><name>nsFirstLetterFrame</name><argument_list>(<argument><expr><name>nsStyleContext</name>* <name>aContext</name></expr></argument>)</argument_list></call> : <macro><name>nsHTMLContainerFrame</name><argument_list>(<argument>aContext</argument>)</argument_list></macro> <block>{}</block>

  <name>NS_IMETHOD</name> <call><name>Init</name><argument_list>(<argument><expr><name>nsIContent</name>*      <name>aContent</name></expr></argument>,
                  <argument><expr><name>nsIFrame</name>*        <name>aParent</name></expr></argument>,
                  <argument><expr><name>nsIFrame</name>*        <name>aPrevInFlow</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>NS_IMETHOD</name> <call><name>SetInitialChildList</name><argument_list>(<argument><expr><name>nsIAtom</name>*        <name>aListName</name></expr></argument>,
                                 <argument><expr><name>nsFrameList</name>&amp;    <name>aChildList</name></expr></argument>)</argument_list></call></expr>;
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NS_DEBUG</name></cpp:ifdef>
  <expr><name>NS_IMETHOD</name> <macro><name>GetFrameName</name><argument_list>(<argument>nsAString&amp; aResult</argument>)</argument_list></macro> const</expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><name>virtual</name> <name>nsIAtom</name>* <macro><name>GetType</name><argument_list>()</argument_list></macro> const</expr>;

  <expr><name>virtual</name> <name>PRBool</name> <macro><name>IsFrameOfType</name><argument_list>(<argument>PRUint32 aFlags</argument>)</argument_list></macro> const
  <block>{
    <if>if <condition>(<expr>!<call><name>GetStyleDisplay</name><argument_list>()</argument_list></call>-&gt;<call><name>IsFloating</name><argument_list>()</argument_list></call></expr>)</condition><then>
      <expr_stmt><expr><name>aFlags</name> = <name>aFlags</name> &amp; ~(<name>nsIFrame</name>::<name>eLineParticipant</name>)</expr>;</expr_stmt></then></if></block></expr>
    <return>return <expr><name>nsFirstLetterFrameSuper</name>::<call><name>IsFrameOfType</name><argument_list>(<argument><expr><name>aFlags</name> &amp;
      ~(<name>nsIFrame</name>::<name>eBidiInlineContainer</name>)</expr></argument>)</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>

  <function_decl><type><name>virtual</name> <name>nscoord</name></type> <name>GetMinWidth</name><parameter_list>(<param><decl><type><name>nsIRenderingContext</name> *</type><name>aRenderingContext</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>nscoord</name></type> <name>GetPrefWidth</name><parameter_list>(<param><decl><type><name>nsIRenderingContext</name> *</type><name>aRenderingContext</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>AddInlineMinWidth</name><parameter_list>(<param><decl><type><name>nsIRenderingContext</name> *</type><name>aRenderingContext</name></decl></param>,
                                 <param><decl><type><name>InlineMinWidthData</name> *</type><name>aData</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>AddInlinePrefWidth</name><parameter_list>(<param><decl><type><name>nsIRenderingContext</name> *</type><name>aRenderingContext</name></decl></param>,
                                  <param><decl><type><name>InlinePrefWidthData</name> *</type><name>aData</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>nsSize</name></type> <name>ComputeSize</name><parameter_list>(<param><decl><type><name>nsIRenderingContext</name> *</type><name>aRenderingContext</name></decl></param>,
                             <param><decl><type><name>nsSize</name></type> <name>aCBSize</name></decl></param>, <param><decl><type><name>nscoord</name></type> <name>aAvailableWidth</name></decl></param>,
                             <param><decl><type><name>nsSize</name></type> <name>aMargin</name></decl></param>, <param><decl><type><name>nsSize</name></type> <name>aBorder</name></decl></param>, <param><decl><type><name>nsSize</name></type> <name>aPadding</name></decl></param>,
                             <param><decl><type><name>PRBool</name></type> <name>aShrinkWrap</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>Reflow</name><parameter_list>(<param><decl><type><name>nsPresContext</name>*</type>          <name>aPresContext</name></decl></param>,
                    <param><decl><type><name>nsHTMLReflowMetrics</name>&amp;</type>     <name>aDesiredSize</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>nsHTMLReflowState</name>&amp;</type> <name>aReflowState</name></decl></param>,
                    <param><decl><type><name>nsReflowStatus</name>&amp;</type>          <name>aStatus</name></decl></param>)</parameter_list>;</function_decl>

  <expr_stmt><expr><name>virtual</name> <name>PRBool</name> <macro><name>CanContinueTextRun</name><argument_list>()</argument_list></macro> const</expr>;</expr_stmt>

<comment type="line">//override of nsFrame method</comment>
  <function_decl><type><name>NS_IMETHOD</name></type> <name>GetChildFrameContainingOffset</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>inContentOffset</name></decl></param>,
                                           <param><decl><type><name>PRBool</name></type> <name>inHint</name></decl></param>,
                                           <param><decl><type><name>PRInt32</name>*</type> <name>outFrameContentOffset</name></decl></param>,
                                           <param><decl><type><name>nsIFrame</name> **</type><name>outChildFrame</name></decl></param>)</parameter_list>;</function_decl>

  <expr_stmt><expr><name>nscoord</name> <macro><name>GetFirstLetterBaseline</name><argument_list>()</argument_list></macro> const <block>{ <return>return <expr><name>mBaseline</name></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// For floating first letter frames, create a continuation for aChild and</comment>
  <comment type="line">// place it in the correct place. aContinuation is an outparam for the</comment>
  <comment type="line">// continuation that is created. aIsFluid determines if the continuation is</comment>
  <comment type="line">// fluid or not.</comment>
  <function_decl><type><name>nsresult</name></type> <name>CreateContinuationForFloatingParent</name><parameter_list>(<param><decl><type><name>nsPresContext</name>*</type> <name>aPresContext</name></decl></param>,
                                               <param><decl><type><name>nsIFrame</name>*</type> <name>aChild</name></decl></param>,
                                               <param><decl><type><name>nsIFrame</name>**</type> <name>aContinuation</name></decl></param>,
                                               <param><decl><type><name>PRBool</name></type> <name>aIsFluid</name></decl></param>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
  <decl_stmt><decl><type><name>nscoord</name></type> <name>mBaseline</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>virtual</name> <name>PRIntn</name> <macro><name>GetSkipSides</name><argument_list>()</argument_list></macro> const</expr>;</expr_stmt>

  <function_decl><type><name>void</name></type> <name>DrainOverflowFrames</name><parameter_list>(<param><decl><type><name>nsPresContext</name>*</type> <name>aPresContext</name></decl></param>)</parameter_list>;</function_decl>
};

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* nsFirstLetterFrame_h__ */</comment>
</unit>
