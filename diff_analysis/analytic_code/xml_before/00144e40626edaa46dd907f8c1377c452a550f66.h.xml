<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="00144e40626edaa46dd907f8c1377c452a550f66.h"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla SVG project.
 *
 * The Initial Developer of the Original Code is IBM Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsSVGPathGeometryElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMSVGPoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsSVGPointList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMSVGAnimatedPoints.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsSVGUtils.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>nsSVGPathGeometryElement</name></type> <name>nsSVGPolyElementBase</name>;</typedef>

<expr_stmt><expr><name>class</name> <name>nsSVGPolyElement</name> : <name>public</name> <name>nsSVGPolyElementBase</name></expr>,
                         <expr><name>public</name> <name>nsIDOMSVGAnimatedPoints</name>
<block>{
<expr><name>protected</name>:
  <call><name>nsSVGPolyElement</name><argument_list>(<argument><expr><name>nsINodeInfo</name>* <name>aNodeInfo</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>nsresult</name> <call><name>Init</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name>:
  <comment type="line">//interfaces</comment>
  
  <name>NS_DECL_ISUPPORTS_INHERITED</name>
  <name>NS_DECL_NSIDOMSVGANIMATEDPOINTS</name>

  <comment type="line">// nsIContent interface</comment>
  <macro><name>NS_IMETHODIMP_</name><argument_list>(<argument>PRBool</argument>)</argument_list></macro> <macro><name>IsAttributeMapped</name><argument_list>(<argument>const nsIAtom* name</argument>)</argument_list></macro> const</expr>;
  
  <comment type="line">// nsSVGPathGeometryElement methods:</comment>
  <expr><name>virtual</name> <name>PRBool</name> <call><name>IsDependentAttribute</name><argument_list>(<argument><expr><name>nsIAtom</name> *<name>aName</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>virtual</name> <name>PRBool</name> <macro><name>IsMarkable</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>PR_TRUE</name></expr>;</return></block></expr> }</block>
  <name>virtual</name> <name>void</name> <call><name>GetMarkPoints</name><argument_list>(<argument><expr><name>nsTArray</name>&lt;<name>nsSVGMark</name>&gt; *<name>aMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>ConstructPath</name><parameter_list>(<param><decl><type><name>cairo_t</name> *</type><name>aCtx</name></decl></param>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIDOMSVGPointList</name>&gt; <name>mPoints</name></expr>;</expr_stmt>

};

</unit>
