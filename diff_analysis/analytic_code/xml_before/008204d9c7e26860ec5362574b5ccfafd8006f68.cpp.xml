<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="008204d9c7e26860ec5362574b5ccfafd8006f68.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */</comment>
<comment type="block">/* vim:set ts=4 sw=4 sts=4 ci et: */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Pierre Phaneuf &lt;pp@ludusdesign.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsProxyEventPrivate.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIComponentManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIServiceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsMemory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsHashtable.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAutoLock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xptcall.h"</cpp:file></cpp:include>

<comment type="line">// LIFETIME_CACHE will cache class for the entire cyle of the application.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIFETIME_CACHE</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name>zero_methods_descriptor</name></decl>;</decl_stmt>


<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">//  nsProxyEventClass</comment>
<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////////////////////////////////////////</comment>

<constructor><name><name>nsProxyEventClass</name>::<name>nsProxyEventClass</name></name><parameter_list>(<param><decl><type><name>REFNSIID</name></type> <name>aIID</name></decl></param>, <param><decl><type><name>nsIInterfaceInfo</name>*</type> <name>aInfo</name></decl></param>)</parameter_list>
    <member_list>: <call><name>mIID</name><argument_list>(<argument><expr><name>aIID</name></expr></argument>)</argument_list></call>,
      <call><name>mInfo</name><argument_list>(<argument><expr><name>aInfo</name></expr></argument>)</argument_list></call>,
      <call><name>mDescriptors</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
</member_list><block>{
    <decl_stmt><decl><type><name>uint16</name></type> <name>methodCount</name></decl>;</decl_stmt>
    <if>if<condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>mInfo</name>-&gt;<name>GetMethodCount</name></name><argument_list>(<argument><expr>&amp;<name>methodCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <if>if<condition>(<expr><name>methodCount</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>wordCount</name> <init>= <expr>(<name>methodCount</name>/32)+1</expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>NULL</name> != (<name>mDescriptors</name> = new <name><name>uint32</name><index>[<expr><name>wordCount</name></expr>]</index></name>)</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mDescriptors</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>wordCount</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>mDescriptors</name> = &amp;<name>zero_methods_descriptor</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>
}</block></constructor>

<destructor><name><name>nsProxyEventClass</name>::~<name>nsProxyEventClass</name></name><parameter_list>()</parameter_list>
<block>{
    <if>if <condition>(<expr><name>mDescriptors</name> &amp;&amp; <name>mDescriptors</name> != &amp;<name>zero_methods_descriptor</name></expr>)</condition><then>
        <expr_stmt><expr>delete <index>[]</index> <name>mDescriptors</name></expr>;</expr_stmt></then></if>
}</block></destructor>
</unit>
