<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="0066f35769d102a39761cd0d957839910ea3ba0c.h"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla MathML Project.
 *
 * The Initial Developer of the Original Code is
 * The University Of Queensland.
 * Portions created by the Initial Developer are Copyright (C) 1999
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Roger B. Sidje &lt;rbs@maths.uq.edu.au&gt;
 *   David J. Fiddes &lt;D.J.Fiddes@hw.ac.uk&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>nsMathMLmrowFrame_h___</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nsMathMLmrowFrame_h___</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsMathMLContainerFrame.h"</cpp:file></cpp:include>

<comment type="line">//</comment>
<comment type="line">// &lt;mrow&gt; -- horizontally group any number of subexpressions </comment>
<comment type="line">//</comment>

<expr_stmt><expr><name>class</name> <name>nsMathMLmrowFrame</name> : <name>public</name> <name>nsMathMLContainerFrame</name> <block>{
<expr><name>public</name>:
  <name>friend</name> <name>nsIFrame</name>* <call><name>NS_NewMathMLmrowFrame</name><argument_list>(<argument><expr><name>nsIPresShell</name>* <name>aPresShell</name></expr></argument>, <argument><expr><name>nsStyleContext</name>* <name>aContext</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>NS_IMETHOD</name>
  <macro><name>AttributeChanged</name><argument_list>(<argument>PRInt32  aNameSpaceID</argument>,
                   <argument>nsIAtom* aAttribute</argument>,
                   <argument>PRInt32  aModType</argument>)</argument_list></macro></expr>;

  <expr><name>virtual</name> <name>nsIFrame</name>*
  <call><name>GetContentInsertionFrame</name><argument_list>()</argument_list></call></expr>;

  <expr><name>NS_IMETHOD</name>
  <call><name>InheritAutomaticData</name><argument_list>(<argument><expr><name>nsIFrame</name>* <name>aParent</name></expr></argument>)</argument_list></call></expr>;

<expr><name>protected</name>:
  <call><name>nsMathMLmrowFrame</name><argument_list>(<argument><expr><name>nsStyleContext</name>* <name>aContext</name></expr></argument>)</argument_list></call> : <macro><name>nsMathMLContainerFrame</name><argument_list>(<argument>aContext</argument>)</argument_list></macro> <block>{}</block>
  <name>virtual</name> ~<call><name>nsMathMLmrowFrame</name><argument_list>()</argument_list></call></expr>;

  <expr><name>virtual</name> <name>PRIntn</name> <macro><name>GetSkipSides</name><argument_list>()</argument_list></macro> const <block>{ <return>return <expr>0</expr>;</return></block></expr> }</block></expr></expr_stmt>
};

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* nsMathMLmrowFrame_h___ */</comment>
</unit>
