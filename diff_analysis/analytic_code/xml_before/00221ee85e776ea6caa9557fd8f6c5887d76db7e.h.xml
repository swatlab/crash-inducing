<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="00221ee85e776ea6caa9557fd8f6c5887d76db7e.h"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla browser.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications, Inc.
 * Portions created by the Initial Developer are Copyright (C) 1999
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Travis Bogard &lt;travis@netscape.com&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>nsXULWindow_h__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nsXULWindow_h__</name></cpp:macro></cpp:define>

<comment type="line">// Local Includes</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsChromeTreeOwner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentTreeOwner.h"</cpp:file></cpp:include>

<comment type="line">// Helper classes</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsTArray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsWeakReference.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMArray.h"</cpp:file></cpp:include>

<comment type="line">// Interfaces needed</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIBaseWindow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShellTreeItem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMWindowInternal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIInterfaceRequestor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIInterfaceRequestorUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIXULWindow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrompt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIAuthPrompt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGUIEvent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIXULBrowserWindow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIWeakReference.h"</cpp:file></cpp:include>

<comment type="line">// nsXULWindow</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_XULWINDOW_IMPL_CID</name></cpp:macro>                         \
<cpp:value>{ <comment type="block">/* 8eaec2f3-ed02-4be2-8e0f-342798477298 */</comment>          \
     0x8eaec2f3,                                      \
     0xed02,                                          \
     0x4be2,                                          \
   { 0x8e, 0x0f, 0x34, 0x27, 0x98, 0x47, 0x72, 0x98 } \
}</cpp:value></cpp:define>

<decl_stmt><decl><type><name>class</name></type> <name>nsContentShellInfo</name></decl>;</decl_stmt>

<expr_stmt><expr><name>class</name> <name>nsXULWindow</name> : <name>public</name> <name>nsIBaseWindow</name></expr>,
                    <expr><name>public</name> <name>nsIInterfaceRequestor</name></expr>,
                    <expr><name>public</name> <name>nsIXULWindow</name></expr>,
                    <expr><name>public</name> <name>nsSupportsWeakReference</name>
<block>{
<expr><name>friend</name> <name>class</name> <name>nsChromeTreeOwner</name></expr>;
<expr><name>friend</name> <name>class</name> <name>nsContentTreeOwner</name></expr>;

<expr><name>public</name>:
   <name>NS_DECL_ISUPPORTS</name>

   <name>NS_DECL_NSIINTERFACEREQUESTOR</name>
   <name>NS_DECL_NSIXULWINDOW</name>
   <name>NS_DECL_NSIBASEWINDOW</name>

   <macro><name>NS_DECLARE_STATIC_IID_ACCESSOR</name><argument_list>(<argument>NS_XULWINDOW_IMPL_CID</argument>)</argument_list></macro>

   <name>void</name> <macro><name>LockUntilChromeLoad</name><argument_list>()</argument_list></macro> <block>{ <expr><name>mLockedUntilChromeLoad</name> = <name>PR_TRUE</name></expr>; }</block>
   <name>PRBool</name> <macro><name>IsLocked</name><argument_list>()</argument_list></macro> const <block>{ <return>return <expr><name>mLockedUntilChromeLoad</name></expr>;</return></block></expr> }</block>

<name>protected</name>:
   enum <name>persistentAttributes</name> <block>{
     <expr><name>PAD_MISC</name> =         0x1</expr>,
     <expr><name>PAD_POSITION</name> =     0x2</expr>,
     <expr><name>PAD_SIZE</name> =         0x4</expr>
   }</block></expr>;</expr_stmt>

   <macro><name>nsXULWindow</name><argument_list>(<argument>PRUint32 aChromeFlags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
   <expr_stmt><expr><name>virtual</name> ~<call><name>nsXULWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

   <function_decl><type><name>NS_IMETHOD</name></type> <name>EnsureChromeTreeOwner</name><parameter_list>()</parameter_list>;</function_decl>
   <function_decl><type><name>NS_IMETHOD</name></type> <name>EnsureContentTreeOwner</name><parameter_list>()</parameter_list>;</function_decl>
   <function_decl><type><name>NS_IMETHOD</name></type> <name>EnsurePrimaryContentTreeOwner</name><parameter_list>()</parameter_list>;</function_decl>
   <function_decl><type><name>NS_IMETHOD</name></type> <name>EnsurePrompter</name><parameter_list>()</parameter_list>;</function_decl>
   <function_decl><type><name>NS_IMETHOD</name></type> <name>EnsureAuthPrompter</name><parameter_list>()</parameter_list>;</function_decl>
   
   <function_decl><type><name>void</name></type> <name>OnChromeLoaded</name><parameter_list>()</parameter_list>;</function_decl>
   <function_decl><type><name>void</name></type> <name>StaggerPosition</name><parameter_list>(<param><decl><type><name>PRInt32</name> &amp;</type><name>aRequestedX</name></decl></param>, <param><decl><type><name>PRInt32</name> &amp;</type><name>aRequestedY</name></decl></param>,
                        <param><decl><type><name>PRInt32</name></type> <name>aSpecWidth</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aSpecHeight</name></decl></param>)</parameter_list>;</function_decl>
   <function_decl><type><name>PRBool</name></type>     <name>LoadPositionFromXUL</name><parameter_list>()</parameter_list>;</function_decl>
   <function_decl><type><name>PRBool</name></type>     <name>LoadSizeFromXUL</name><parameter_list>()</parameter_list>;</function_decl>
   <function_decl><type><name>PRBool</name></type>     <name>LoadMiscPersistentAttributesFromXUL</name><parameter_list>()</parameter_list>;</function_decl>
   <function_decl><type><name>void</name></type>       <name>SyncAttributesToWidget</name><parameter_list>()</parameter_list>;</function_decl>
   <function_decl><type><name>NS_IMETHOD</name></type> <name>SavePersistentAttributes</name><parameter_list>()</parameter_list>;</function_decl>

   <function_decl><type><name>NS_IMETHOD</name></type> <name>GetWindowDOMWindow</name><parameter_list>(<param><decl><type><name>nsIDOMWindowInternal</name>**</type> <name>aDOMWindow</name></decl></param>)</parameter_list>;</function_decl>
   <function_decl><type><name>NS_IMETHOD</name></type> <name>GetWindowDOMElement</name><parameter_list>(<param><decl><type><name>nsIDOMElement</name>**</type> <name>aDOMElement</name></decl></param>)</parameter_list>;</function_decl>

   <comment type="line">// See nsIDocShellTreeOwner for docs on next two methods</comment>
   <macro><name>NS_HIDDEN_</name><argument_list>(<argument>nsresult</argument>)</argument_list></macro> <macro><name>ContentShellAdded</name><argument_list>(<argument>nsIDocShellTreeItem* aContentShell</argument>,
                                          <argument>PRBool aPrimary</argument>, <argument>PRBool aTargetable</argument>,
                                          <argument>const nsAString&amp; aID</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
   <macro><name>NS_HIDDEN_</name><argument_list>(<argument>nsresult</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ContentShellRemoved</name><argument_list>(<argument><expr><name>nsIDocShellTreeItem</name>* <name>aContentShell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <function_decl><type><name>NS_IMETHOD</name></type> <name>SizeShellTo</name><parameter_list>(<param><decl><type><name>nsIDocShellTreeItem</name>*</type> <name>aShellItem</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aCX</name></decl></param>, 
      <param><decl><type><name>PRInt32</name></type> <name>aCY</name></decl></param>)</parameter_list>;</function_decl>
   <function_decl><type><name>NS_IMETHOD</name></type> <name>ExitModalLoop</name><parameter_list>(<param><decl><type><name>nsresult</name></type> <name>aStatus</name></decl></param>)</parameter_list>;</function_decl>
   <function_decl><type><name>NS_IMETHOD</name></type> <name>CreateNewChromeWindow</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aChromeFlags</name></decl></param>,
      <param><decl><type><name>nsIAppShell</name>*</type> <name>aAppShell</name></decl></param>, <param><decl><type><name>nsIXULWindow</name> **</type><name>_retval</name></decl></param>)</parameter_list>;</function_decl>
   <function_decl><type><name>NS_IMETHOD</name></type> <name>CreateNewContentWindow</name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>aChromeFlags</name></decl></param>,
      <param><decl><type><name>nsIAppShell</name>*</type> <name>aAppShell</name></decl></param>, <param><decl><type><name>nsIXULWindow</name> **</type><name>_retval</name></decl></param>)</parameter_list>;</function_decl>

   <function_decl><type><name>void</name></type>       <name>EnableParent</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aEnable</name></decl></param>)</parameter_list>;</function_decl>
   <function_decl><type><name>PRBool</name></type>     <name>ConstrainToZLevel</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aImmediate</name></decl></param>, <param><decl><type><name>nsWindowZ</name> *</type><name>aPlacement</name></decl></param>,
                                <param><decl><type><name>nsIWidget</name> *</type><name>aReqBelow</name></decl></param>, <param><decl><type><name>nsIWidget</name> **</type><name>aActualBelow</name></decl></param>)</parameter_list>;</function_decl>
   <function_decl><type><name>void</name></type>       <name>PlaceWindowLayersBehind</name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aLowLevel</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aHighLevel</name></decl></param>,
                                      <param><decl><type><name>nsIXULWindow</name> *</type><name>aBehind</name></decl></param>)</parameter_list>;</function_decl>
   <function_decl><type><name>void</name></type>       <name>SetContentScrollbarVisibility</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aVisible</name></decl></param>)</parameter_list>;</function_decl>
   <function_decl><type><name>PRBool</name></type>     <name>GetContentScrollbarVisibility</name><parameter_list>()</parameter_list>;</function_decl>
   <function_decl><type><name>void</name></type>       <name>PersistentAttributesDirty</name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aDirtyFlags</name></decl></param>)</parameter_list>;</function_decl>
   <function_decl><type><name>PRInt32</name></type>    <name>AppUnitsPerDevPixel</name><parameter_list>()</parameter_list>;</function_decl>

   <decl_stmt><decl><type><name>nsChromeTreeOwner</name>*</type>      <name>mChromeTreeOwner</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>nsContentTreeOwner</name>*</type>     <name>mContentTreeOwner</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>nsContentTreeOwner</name>*</type>     <name>mPrimaryContentTreeOwner</name></decl>;</decl_stmt>
   <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIWidget</name>&gt;     <name>mWindow</name></expr>;</expr_stmt>
   <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIDocShell</name>&gt;   <name>mDocShell</name></expr>;</expr_stmt>
   <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIDOMWindowInternal</name>&gt;  <name>mDOMWindow</name></expr>;</expr_stmt>
   <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIWeakReference</name>&gt; <name>mParentWindow</name></expr>;</expr_stmt>
   <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIPrompt</name>&gt;     <name>mPrompter</name></expr>;</expr_stmt>
   <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIAuthPrompt</name>&gt; <name>mAuthPrompter</name></expr>;</expr_stmt>
   <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIXULBrowserWindow</name>&gt; <name>mXULBrowserWindow</name></expr>;</expr_stmt>
   <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsIDocShellTreeItem</name>&gt; <name>mPrimaryContentShell</name></expr>;</expr_stmt>
   <expr_stmt><expr><name>nsTArray</name>&lt;<name>nsContentShellInfo</name>*&gt; <name>mContentShells</name></expr>;</expr_stmt> <comment type="line">// array of doc shells by id</comment>
   <decl_stmt><decl><type><name>nsresult</name></type>                <name>mModalStatus</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>PRPackedBool</name></type>            <name>mContinueModalLoop</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>PRPackedBool</name></type>            <name>mDebuting</name></decl>;</decl_stmt>       <comment type="line">// being made visible right now</comment>
   <decl_stmt><decl><type><name>PRPackedBool</name></type>            <name>mChromeLoaded</name></decl>;</decl_stmt> <comment type="line">// True when chrome has loaded</comment>
   <decl_stmt><decl><type><name>PRPackedBool</name></type>            <name>mShowAfterLoad</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>PRPackedBool</name></type>            <name>mIntrinsicallySized</name></decl>;</decl_stmt> 
   <decl_stmt><decl><type><name>PRPackedBool</name></type>            <name>mCenterAfterLoad</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>PRPackedBool</name></type>            <name>mIsHiddenWindow</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>PRPackedBool</name></type>            <name>mLockedUntilChromeLoad</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>PRUint32</name></type>                <name>mContextFlags</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>PRUint32</name></type>                <name>mBlurSuppressionLevel</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>PRUint32</name></type>                <name>mPersistentAttributesDirty</name></decl>;</decl_stmt> <comment type="line">// persistentAttributes</comment>
   <decl_stmt><decl><type><name>PRUint32</name></type>                <name>mPersistentAttributesMask</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>PRUint32</name></type>                <name>mChromeFlags</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>PRUint32</name></type>                <name>mAppPerDev</name></decl>;</decl_stmt> <comment type="line">// sometimes needed when we can't get</comment>
                                       <comment type="line">// it from the widget</comment>
   <decl_stmt><decl><type><name>nsString</name></type>                <name>mTitle</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>nsIntRect</name></type>               <name>mOpenerScreenRect</name></decl>;</decl_stmt> <comment type="line">// the screen rect of the opener</comment>

   <expr_stmt><expr><name>nsCOMArray</name>&lt;<name>nsIWeakReference</name>&gt; <name>mTargetableShells</name></expr>;</expr_stmt> <comment type="line">// targetable shells only</comment>
};

<macro><name>NS_DEFINE_STATIC_IID_ACCESSOR</name><argument_list>(<argument>nsXULWindow</argument>, <argument>NS_XULWINDOW_IMPL_CID</argument>)</argument_list></macro>

<comment type="line">// nsContentShellInfo</comment>
<comment type="line">// Used to map shell IDs to nsIDocShellTreeItems.</comment>

<decl_stmt><decl><type><name>class</name></type> <name>nsContentShellInfo</name>
<block>{
<label><name>public</name>:</label>
   <expr_stmt><expr><call><name>nsContentShellInfo</name><argument_list>(<argument><expr>const <name>nsAString</name>&amp; <name>aID</name></expr></argument>,
                      <argument><expr><name>nsIWeakReference</name>* <name>aContentShell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr>~<call><name>nsContentShellInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>public</name>:</label>
   <decl_stmt><decl><type><name>nsAutoString</name></type> <name>id</name></decl>;</decl_stmt> <comment type="line">// The identifier of the content shell</comment>
   <decl_stmt><decl><type><name>nsWeakPtr</name></type> <name>child</name></decl>;</decl_stmt> <comment type="line">// content shell (weak reference to nsIDocShellTreeItem)</comment>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* nsXULWindow_h__ */</comment>
</unit>
