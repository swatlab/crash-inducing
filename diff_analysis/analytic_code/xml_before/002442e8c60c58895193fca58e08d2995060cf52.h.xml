<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="002442e8c60c58895193fca58e08d2995060cf52.h"><comment type="block">/* cairo - a vector graphics library with display and print output
 *
 * Copyright Â© 2007 Chris Wilson
 *
 * This library is free software; you can redistribute it and/or
 * modify it either under the terms of the GNU Lesser General Public
 * License version 2.1 as published by the Free Software Foundation
 * (the "LGPL") or, at your option, under the terms of the Mozilla
 * Public License Version 1.1 (the "MPL"). If you do not alter this
 * notice, a recipient may use your version of this file under either
 * the MPL or the LGPL.
 *
 * You should have received a copy of the LGPL along with this library
 * in the file COPYING-LGPL-2.1; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * You should have received a copy of the MPL along with this library
 * in the file COPYING-MPL-1.1
 *
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY
 * OF ANY KIND, either express or implied. See the LGPL or the MPL for
 * the specific language governing rights and limitations.
 *
 * The Original Code is the cairo graphics library.
 *
 * The Initial Developer of the Original Code is University of Southern
 * California.
 *
 * Contributor(s):
 *	Chris Wilson &lt;chris@chris-wilson.co.uk&gt;
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CAIRO_REFRENCE_COUNT_PRIVATE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAIRO_REFRENCE_COUNT_PRIVATE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cairo-atomic-private.h"</cpp:file></cpp:include>

<macro><name>CAIRO_BEGIN_DECLS</name></macro>

<comment type="block">/* Encapsulate operations on the object's reference count */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>cairo_atomic_int_t</name></type> <name>ref_count</name></decl>;</decl_stmt>
}</block></struct></type> <name>cairo_reference_count_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_cairo_reference_count_inc</name><parameter_list>(<param><type><name>RC</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_cairo_atomic_int_inc (&amp;(RC)-&gt;ref_count)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_cairo_reference_count_dec_and_test</name><parameter_list>(<param><type><name>RC</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_cairo_atomic_int_dec_and_test (&amp;(RC)-&gt;ref_count)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAIRO_REFERENCE_COUNT_INIT</name><parameter_list>(<param><type><name>RC</name></type></param>, <param><type><name>VALUE</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((RC)-&gt;ref_count = (VALUE))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAIRO_REFERENCE_COUNT_GET_VALUE</name><parameter_list>(<param><type><name>RC</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_cairo_atomic_int_get (&amp;(RC)-&gt;ref_count)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAIRO_REFERENCE_COUNT_SET_VALUE</name><parameter_list>(<param><type><name>RC</name></type></param>, <param><type><name>VALUE</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_cairo_atomic_int_set (&amp;(RC)-&gt;ref_count, (VALUE))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAIRO_REFERENCE_COUNT_INVALID_VALUE</name></cpp:macro> <cpp:value>((cairo_atomic_int_t) -1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAIRO_REFERENCE_COUNT_INVALID</name></cpp:macro> <cpp:value>{CAIRO_REFERENCE_COUNT_INVALID_VALUE}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAIRO_REFERENCE_COUNT_IS_INVALID</name><parameter_list>(<param><type><name>RC</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(CAIRO_REFERENCE_COUNT_GET_VALUE (RC) == CAIRO_REFERENCE_COUNT_INVALID_VALUE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAIRO_REFERENCE_COUNT_HAS_REFERENCE</name><parameter_list>(<param><type><name>RC</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(CAIRO_REFERENCE_COUNT_GET_VALUE (RC) &gt; 0)</cpp:value></cpp:define>

<macro><name>CAIRO_END_DECLS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
