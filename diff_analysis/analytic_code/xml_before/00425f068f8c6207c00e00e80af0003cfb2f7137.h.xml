<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="00425f068f8c6207c00e00e80af0003cfb2f7137.h"><comment type="block">/* -*- Mode: C++; c-basic-offset: 4; indent-tabs-mode: t; tab-width: 4 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is [Open Source Virtual Machine].
 *
 * The Initial Developer of the Original Code is
 * Adobe System Incorporated.
 * Portions created by the Initial Developer are Copyright (C) 2004-2007
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Adobe AS3 Team
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__nanojit_h__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__nanojit_h__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avmplus.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AVMPLUS_IA32</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NANOJIT_IA32</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>AVMPLUS_ARM</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NANOJIT_ARM</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>AVMPLUS_PPC</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NANOJIT_PPC</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>AVMPLUS_AMD64</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NANOJIT_AMD64</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NANOJIT_64BIT</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> "unknown nanojit architecture"</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>nanojit</name>
<block>{
	<comment type="block">/**
	 * -------------------------------------------
	 * START AVM bridging definitions
	 * -------------------------------------------
	 */</comment>
	<decl_stmt><decl><type><name>class</name></type> <name>Fragment</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>class</name></type> <name>LIns</name></decl>;</decl_stmt>
	<struct_decl>struct <name>SideExit</name>;</struct_decl>
	<decl_stmt><decl><type><name>class</name></type> <name>RegAlloc</name></decl>;</decl_stmt>
	<typedef>typedef <expr_stmt><expr><name>avmplus</name>::<name>AvmCore</name> <name>AvmCore</name></expr>;</expr_stmt></typedef>
	<typedef>typedef <expr_stmt><expr><name>avmplus</name>::<name>OSDep</name> <name>OSDep</name></expr>;</expr_stmt></typedef>
	<typedef>typedef <expr_stmt><expr><name>avmplus</name>::<name>GCSortedMap</name>&lt;const <name>void</name>*</expr>,<expr><name>Fragment</name>*</expr>,<expr><name>avmplus</name>::<name>LIST_GCObjects</name>&gt; <name>FragmentMap</name></expr>;</expr_stmt></typedef>
	<typedef>typedef <expr_stmt><expr><name>avmplus</name>::<name>SortedMap</name>&lt;<name>SideExit</name>*</expr>,<expr><name>RegAlloc</name>*</expr>,<expr><name>avmplus</name>::<name>LIST_GCObjects</name>&gt; <name>RegAllocMap</name></expr>;</expr_stmt></typedef>
	<typedef>typedef <expr_stmt><expr><name>avmplus</name>::<name>List</name>&lt;<name>LIns</name>*</expr>,<expr><name>avmplus</name>::<name>LIST_NonGCObjects</name>&gt;	<name>InsList</name></expr>;</expr_stmt></typedef>
	<typedef>typedef <expr_stmt><expr><name>avmplus</name>::<name>List</name>&lt;<name>char</name>*</expr>, <expr><name>avmplus</name>::<name>LIST_GCObjects</name>&gt; <name>StringList</name></expr>;</expr_stmt></typedef>

	<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
		
		<comment type="line">// The NANO_DIE macro matches the JS_Assert function in jsutil.cpp.</comment>
		<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NANO_DIE</name></cpp:macro> <cpp:value>do { DebugBreak(); exit(3); } while(0)</cpp:value></cpp:define>
		<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_OS2</name></expr></argument>)</argument_list></call> || (<call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__i386</name></expr></argument>)</argument_list></call>)</expr></cpp:elif>
		<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NANO_DIE</name></cpp:macro> <cpp:value>do { asm("int $3"); abort(); } while(0)</cpp:value></cpp:define>
        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NANO_DIE</name></cpp:macro> <cpp:value>do { abort(); } while(0)</cpp:value></cpp:define>
		<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		
		<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__NanoAssertMsgf</name><parameter_list>(<param><type><name>a</name></type></param>, <param><type><name>file_</name></type></param>, <param><type><name>line_</name></type></param>, <param><type><name>f</name></type></param>, <param><type>...</type></param>)</parameter_list></cpp:macro>  \
			<cpp:value>if (!(a)) { \
				fprintf(stderr, "Assertion failed: " f "%s (%s:%d)\n", __VA_ARGS__, #a, file_, line_); \
				NANO_DIE; \
			}</cpp:value></cpp:define>
			
		<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_NanoAssertMsgf</name><parameter_list>(<param><type><name>a</name></type></param>, <param><type><name>file_</name></type></param>, <param><type><name>line_</name></type></param>, <param><type><name>f</name></type></param>, <param><type>...</type></param>)</parameter_list></cpp:macro>   <cpp:value>__NanoAssertMsgf(a, file_, line_, f, __VA_ARGS__)</cpp:value></cpp:define>

		<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NanoAssertMsgf</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>f</name></type></param>,<param><type>...</type></param>)</parameter_list></cpp:macro>   <cpp:value>do { __NanoAssertMsgf(a, __FILE__, __LINE__, f ": ", __VA_ARGS__); } while (0)</cpp:value></cpp:define>
		<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NanoAssertMsg</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>m</name></type></param>)</parameter_list></cpp:macro>        <cpp:value>do { __NanoAssertMsgf(a, __FILE__, __LINE__, "\"%s\": ", m); } while (0)</cpp:value></cpp:define>
		<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NanoAssert</name><parameter_list>(<param><type><name>a</name></type></param>)</parameter_list></cpp:macro>             <cpp:value>do { __NanoAssertMsgf(a, __FILE__, __LINE__, "%s", ""); } while (0)</cpp:value></cpp:define>
	<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NanoAssertMsgf</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>f</name></type></param>,<param><type>...</type></param>)</parameter_list></cpp:macro>   <cpp:value>do { } while (0)</cpp:value></cpp:define> <comment type="block">/* no semi */</comment>
		<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NanoAssertMsg</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>m</name></type></param>)</parameter_list></cpp:macro>        <cpp:value>do { } while (0)</cpp:value></cpp:define> <comment type="block">/* no semi */</comment>
		<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NanoAssert</name><parameter_list>(<param><type><name>a</name></type></param>)</parameter_list></cpp:macro>             <cpp:value>do { } while (0)</cpp:value></cpp:define> <comment type="block">/* no semi */</comment>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/**
	 * -------------------------------------------
	 * END AVM bridging definitions
	 * -------------------------------------------
	 */</comment>
}</block></decl></decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AVMPLUS_VERBOSE</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NJ_VERBOSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NJ_PROFILE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NJ_VERBOSE</name></cpp:ifdef>
	<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>verbose_output</name></cpp:macro>						<cpp:value>if (verbose_enabled()) Assembler::output</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>verbose_outputf</name></cpp:macro>						<cpp:value>if (verbose_enabled()) Assembler::outputf</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>verbose_enabled</name><parameter_list>()</parameter_list></cpp:macro>					<cpp:value>(_verbose)</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>verbose_only</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro>						<cpp:value>x</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>verbose_output</name></cpp:macro></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>verbose_outputf</name></cpp:macro></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>verbose_enabled</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>verbose_only</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/*NJ_VERBOSE*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_DEBUG</name></cpp:ifdef>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug_only</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro>			<cpp:value>x</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug_only</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DEBUG */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NJ_PROFILE</name></cpp:ifdef>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>counter_struct_begin</name><parameter_list>()</parameter_list></cpp:macro>  <cpp:value>struct {</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>counter_struct_end</name><parameter_list>()</parameter_list></cpp:macro>	<cpp:value>} _stats;</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>counter_define</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> 		<cpp:value>int32_t x</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>counter_value</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro>		<cpp:value>_stats.x</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>counter_set</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>v</name></type></param>)</parameter_list></cpp:macro>		<cpp:value>(counter_value(x)=(v))</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>counter_adjust</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>i</name></type></param>)</parameter_list></cpp:macro>		<cpp:value>(counter_value(x)+=(int32_t)(i))</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>counter_reset</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro>		<cpp:value>counter_set(x,0)</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>counter_increment</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>counter_adjust(x,1)</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>counter_decrement</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro>	<cpp:value>counter_adjust(x,-1)</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>profile_only</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro>			<cpp:value>x</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>counter_struct_begin</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>counter_struct_end</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>counter_define</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro></cpp:define> 		
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>counter_value</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>counter_set</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>v</name></type></param>)</parameter_list></cpp:macro></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>counter_adjust</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>i</name></type></param>)</parameter_list></cpp:macro></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>counter_reset</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>counter_increment</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro></cpp:define>	
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>counter_decrement</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro></cpp:define>	
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>profile_only</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro></cpp:define>	
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NJ_PROFILE */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isS8</name><parameter_list>(<param><type><name>i</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>( int32_t(i) == int8_t(i) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isU8</name><parameter_list>(<param><type><name>i</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>( int32_t(i) == uint8_t(i) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isS16</name><parameter_list>(<param><type><name>i</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( int32_t(i) == int16_t(i) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isU16</name><parameter_list>(<param><type><name>i</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( int32_t(i) == uint16_t(i) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>alignTo</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>s</name></type></param>)</parameter_list></cpp:macro>		<cpp:value>((((uintptr_t)(x)))&amp;~(((uintptr_t)s)-1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>alignUp</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>s</name></type></param>)</parameter_list></cpp:macro>		<cpp:value>((((uintptr_t)(x))+(((uintptr_t)s)-1))&amp;~(((uintptr_t)s)-1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pageTop</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro>			<cpp:value>( (int*)alignTo(x,NJ_PAGE_SIZE) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pageBottom</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro>		<cpp:value>( (int*)(alignTo(x,NJ_PAGE_SIZE)+NJ_PAGE_SIZE)-1 )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>samepage</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>y</name></type></param>)</parameter_list></cpp:macro>		<cpp:value>(pageTop(x) == pageTop(y))</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Native.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"LIR.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RegAlloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Fragmento.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Assembler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"TraceTreeDrawer.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// __nanojit_h__</comment>
</unit>
