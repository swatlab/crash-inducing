<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="007ef15ef8d56d39fa5434becf21d359091fcd5e.h"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>nsJSEnvironment_h___</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nsJSEnvironment_h___</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptRuntime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIObserver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIXPCScriptNotify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prtime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCycleCollectionParticipant.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsScriptNameSpaceManager.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>nsIXPConnectJSObjectHolder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>nsAutoPoolRelease</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>JSAutoTempValueRooter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>js</name> <block>{ <expr_stmt><expr><name>template</name> &lt;<name>class</name>&gt; <name>class</name> <name>LazilyConstructed</name></expr>;</expr_stmt> }</block></decl></decl_stmt>

<expr_stmt><expr><name>class</name> <name>nsJSContext</name> : <name>public</name> <name>nsIScriptContext</name></expr>,
                    <expr><name>public</name> <name>nsIXPCScriptNotify</name>
<block>{
<expr><name>public</name>:
  <call><name>nsJSContext</name><argument_list>(<argument><expr><name>JSRuntime</name> *<name>aRuntime</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>virtual</name> ~<call><name>nsJSContext</name><argument_list>()</argument_list></call></expr>;

  <expr><name>NS_DECL_CYCLE_COLLECTING_ISUPPORTS</name>
  <macro><name>NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_AMBIGUOUS</name><argument_list>(<argument>nsJSContext</argument>,
                                                         <argument>nsIScriptContext</argument>)</argument_list></macro>

  <name>virtual</name> <name>PRUint32</name> <macro><name>GetScriptTypeID</name><argument_list>()</argument_list></macro>
    <block>{ <return>return <expr><name>nsIProgrammingLanguage</name>::<name>JAVASCRIPT</name></expr>;</return></block></expr> }</block>

  <name>virtual</name> <name>nsresult</name> <macro><name>EvaluateString</name><argument_list>(<argument>const nsAString&amp; aScript</argument>,
                                  <argument>void *aScopeObject</argument>,
                                  <argument>nsIPrincipal *principal</argument>,
                                  <argument>const char *aURL</argument>,
                                  <argument>PRUint32 aLineNo</argument>,
                                  <argument>PRUint32 aVersion</argument>,
                                  <argument>nsAString *aRetValue</argument>,
                                  <argument>PRBool* aIsUndefined</argument>)</argument_list></macro></expr>;</expr_stmt>
  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>EvaluateStringWithValue</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aScript</name></decl></param>,
                                     <param><decl><type><name>void</name> *</type><name>aScopeObject</name></decl></param>,
                                     <param><decl><type><name>nsIPrincipal</name> *</type><name>aPrincipal</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aURL</name></decl></param>,
                                     <param><decl><type><name>PRUint32</name></type> <name>aLineNo</name></decl></param>,
                                     <param><decl><type><name>PRUint32</name></type> <name>aVersion</name></decl></param>,
                                     <param><decl><type><name>void</name>*</type> <name>aRetValue</name></decl></param>,
                                     <param><decl><type><name>PRBool</name>*</type> <name>aIsUndefined</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>CompileScript</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>PRUnichar</name>*</type> <name>aText</name></decl></param>,
                                 <param><decl><type><name>PRInt32</name></type> <name>aTextLength</name></decl></param>,
                                 <param><decl><type><name>void</name> *</type><name>aScopeObject</name></decl></param>,
                                 <param><decl><type><name>nsIPrincipal</name> *</type><name>principal</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aURL</name></decl></param>,
                                 <param><decl><type><name>PRUint32</name></type> <name>aLineNo</name></decl></param>,
                                 <param><decl><type><name>PRUint32</name></type> <name>aVersion</name></decl></param>,
                                 <param><decl><type><name>nsScriptObjectHolder</name> &amp;</type><name>aScriptObject</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>ExecuteScript</name><parameter_list>(<param><decl><type><name>void</name>*</type> <name>aScriptObject</name></decl></param>,
                                 <param><decl><type><name>void</name> *</type><name>aScopeObject</name></decl></param>,
                                 <param><decl><type><name>nsAString</name>*</type> <name>aRetValue</name></decl></param>,
                                 <param><decl><type><name>PRBool</name>*</type> <name>aIsUndefined</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>CompileEventHandler</name><parameter_list>(<param><decl><type><name>nsIAtom</name> *</type><name>aName</name></decl></param>,
                                       <param><decl><type><name>PRUint32</name></type> <name>aArgCount</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name>**</type> <name>aArgNames</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aBody</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aURL</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLineNo</name></decl></param>,
                                       <param><decl><type><name>PRUint32</name></type> <name>aVersion</name></decl></param>,
                                       <param><decl><type><name>nsScriptObjectHolder</name> &amp;</type><name>aHandler</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>CallEventHandler</name><parameter_list>(<param><decl><type><name>nsISupports</name>*</type> <name>aTarget</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aScope</name></decl></param>,
                                    <param><decl><type><name>void</name>*</type> <name>aHandler</name></decl></param>,
                                    <param><decl><type><name>nsIArray</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>nsIVariant</name> **</type><name>rv</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>BindCompiledEventHandler</name><parameter_list>(<param><decl><type><name>nsISupports</name> *</type><name>aTarget</name></decl></param>,
                                            <param><decl><type><name>void</name> *</type><name>aScope</name></decl></param>,
                                            <param><decl><type><name>nsIAtom</name> *</type><name>aName</name></decl></param>,
                                            <param><decl><type><name>void</name> *</type><name>aHandler</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>GetBoundEventHandler</name><parameter_list>(<param><decl><type><name>nsISupports</name>*</type> <name>aTarget</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aScope</name></decl></param>,
                                        <param><decl><type><name>nsIAtom</name>*</type> <name>aName</name></decl></param>,
                                        <param><decl><type><name>nsScriptObjectHolder</name> &amp;</type><name>aHandler</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>CompileFunction</name><parameter_list>(<param><decl><type><name>void</name>*</type> <name>aTarget</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aName</name></decl></param>,
                                   <param><decl><type><name>PRUint32</name></type> <name>aArgCount</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name>**</type> <name>aArgArray</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>nsAString</name>&amp;</type> <name>aBody</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>aURL</name></decl></param>,
                                   <param><decl><type><name>PRUint32</name></type> <name>aLineNo</name></decl></param>,
                                   <param><decl><type><name>PRUint32</name></type> <name>aVersion</name></decl></param>,
                                   <param><decl><type><name>PRBool</name></type> <name>aShared</name></decl></param>,
                                   <param><decl><type><name>void</name>**</type> <name>aFunctionObject</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetDefaultLanguageVersion</name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aVersion</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>nsIScriptGlobalObject</name> *</type><name>GetGlobalObject</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name> *</type><name>GetNativeContext</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name> *</type><name>GetNativeGlobal</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>CreateNativeGlobalForInner</name><parameter_list>(
                                      <param><decl><type><name>nsIScriptGlobalObject</name> *</type><name>aGlobal</name></decl></param>,
                                      <param><decl><type><name>PRBool</name></type> <name>aIsChrome</name></decl></param>,
                                      <param><decl><type><name>void</name> **</type><name>aNativeGlobal</name></decl></param>,
                                      <param><decl><type><name>nsISupports</name> **</type><name>aHolder</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>ConnectToInner</name><parameter_list>(<param><decl><type><name>nsIScriptGlobalObject</name> *</type><name>aNewInner</name></decl></param>,
                                  <param><decl><type><name>void</name> *</type><name>aOuterGlobal</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>InitContext</name><parameter_list>(<param><decl><type><name>nsIScriptGlobalObject</name> *</type><name>aGlobalObject</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>PRBool</name></type> <name>IsContextInitialized</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>FinalizeContext</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><name>virtual</name> <name>void</name></type> <name>GC</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><name>virtual</name> <name>void</name></type> <name>ScriptEvaluated</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aTerminated</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>SetTerminationFunction</name><parameter_list>(<param><decl><type><name>nsScriptTerminationFunc</name></type> <name>aFunc</name></decl></param>,
                                          <param><decl><type><name>nsISupports</name>*</type> <name>aRef</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>PRBool</name></type> <name>GetScriptsEnabled</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetScriptsEnabled</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aEnabled</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>aFireTimeouts</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>SetProperty</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>aTarget</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aPropName</name></decl></param>, <param><decl><type><name>nsISupports</name> *</type><name>aVal</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>virtual</name> <name>PRBool</name></type> <name>GetProcessingScriptTag</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetProcessingScriptTag</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aResult</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>virtual</name> <name>PRBool</name></type> <name>GetExecutingScript</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SetGCOnDestruction</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aGCOnDestruction</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>InitClasses</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>aGlobalObj</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>ClearScope</name><parameter_list>(<param><decl><type><name>void</name>*</type> <name>aGlobalObj</name></decl></param>, <param><decl><type><name>PRBool</name></type> <name>bClearPolluters</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>virtual</name> <name>void</name></type> <name>WillInitializeContext</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>DidInitializeContext</name><parameter_list>()</parameter_list>;</function_decl>
  <function><type><name>virtual</name> <name>void</name></type> <name>DidSetDocument</name><parameter_list>(<param><decl><type><name>nsISupports</name> *</type><name>aDocdoc</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aGlobal</name></decl></param>)</parameter_list> <block>{<empty_stmt>;</empty_stmt>}</block></function>

  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>Serialize</name><parameter_list>(<param><decl><type><name>nsIObjectOutputStream</name>*</type> <name>aStream</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aScriptObject</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>Deserialize</name><parameter_list>(<param><decl><type><name>nsIObjectInputStream</name>*</type> <name>aStream</name></decl></param>,
                               <param><decl><type><name>nsScriptObjectHolder</name> &amp;</type><name>aResult</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>DropScriptObject</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>object</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>HoldScriptObject</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>object</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>virtual</name> <name>void</name></type> <name>EnterModalState</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>LeaveModalState</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><name>NS_DECL_NSIXPCSCRIPTNOTIFY</name>

  <specifier>static</specifier> <name>void</name></type> <name>LoadStart</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>LoadEnd</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// CC does always call cycle collector and it also updates the counters</comment>
  <comment type="line">// that MaybeCC uses.</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CC</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// MaybeCC calls cycle collector if certain conditions are fulfilled.</comment>
  <comment type="line">// The conditions are:</comment>
  <comment type="line">// - The timer related to page load (sGCTimer) must not be active.</comment>
  <comment type="line">// - At least NS_MIN_CC_INTERVAL milliseconds must have elapsed since the</comment>
  <comment type="line">//   previous cycle collector call.</comment>
  <comment type="line">// - Certain number of MaybeCC calls have occurred.</comment>
  <comment type="line">//   The number of needed MaybeCC calls depends on the aHigherProbability</comment>
  <comment type="line">//   parameter. If the parameter is true, probability for calling cycle</comment>
  <comment type="line">//   collector rises increasingly. If the parameter is all the time false,</comment>
  <comment type="line">//   at least NS_MAX_DELAYED_CCOLLECT MaybeCC calls are needed.</comment>
  <comment type="line">//   If the previous call to cycle collector did collect something,</comment>
  <comment type="line">//   MaybeCC works effectively as if aHigherProbability was true.</comment>
  <comment type="line">// @return PR_TRUE if cycle collector was called.</comment>
  <function_decl><type><specifier>static</specifier> <name>PRBool</name></type> <name>MaybeCC</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aHigherProbability</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// IntervalCC() calls CC() if at least NS_MIN_CC_INTERVAL milliseconds have</comment>
  <comment type="line">// elapsed since the previous cycle collector call.</comment>
  <function_decl><type><specifier>static</specifier> <name>PRBool</name></type> <name>IntervalCC</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Calls IntervalCC() if user is currently inactive, otherwise MaybeCC(PR_TRUE)</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CCIfUserInactive</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FireGCTimer</name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aLoadInProgress</name></decl></param>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>
  <function_decl><type><name>nsresult</name></type> <name>InitializeExternalClasses</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="line">// Helper to convert xpcom datatypes to jsvals.</comment>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>ConvertSupportsTojsvals</name><argument_list>(<argument><expr><name>nsISupports</name> *<name>aArgs</name></expr></argument>,
                                   <argument><expr><name>void</name> *<name>aScope</name></expr></argument>,
                                   <argument><expr><name>PRUint32</name> *<name>aArgc</name></expr></argument>,
                                   <argument><expr><name>jsval</name> **<name>aArgv</name></expr></argument>,
                                   <argument><expr><name>js</name>::<name>LazilyConstructed</name>&lt;<name>nsAutoPoolRelease</name>&gt; &amp;<name>aPoolRelease</name></expr></argument>,
                                   <argument><expr><name>js</name>::<name>LazilyConstructed</name>&lt;<name>JSAutoTempValueRooter</name>&gt; &amp;<name>aRooter</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function_decl><type><name>nsresult</name></type> <name>AddSupportsPrimitiveTojsvals</name><parameter_list>(<param><decl><type><name>nsISupports</name> *</type><name>aArg</name></decl></param>, <param><decl><type><name>jsval</name> *</type><name>aArgv</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// given an nsISupports object (presumably an event target or some other</comment>
  <comment type="line">// DOM object), get (or create) the JSObject wrapping it.</comment>
  <function_decl><type><name>nsresult</name></type> <name>JSObjectFromInterface</name><parameter_list>(<param><decl><type><name>nsISupports</name> *</type><name>aSup</name></decl></param>, <param><decl><type><name>void</name> *</type><name>aScript</name></decl></param>, 
                                 <param><decl><type><name>JSObject</name> **</type><name>aRet</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="line">// Report the pending exception on our mContext, if any.  This</comment>
  <comment type="line">// function will set aside the frame chain on mContext before</comment>
  <comment type="line">// reporting.</comment>
  <function_decl><type><name>void</name></type> <name>ReportPendingException</name><parameter_list>()</parameter_list>;</function_decl>
<label><name>private</name>:</label>
  <function_decl><type><name>void</name></type> <name>DestroyJSContext</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><name>nsrefcnt</name></type> <name>GetCCRefcnt</name><parameter_list>()</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>JSContext</name> *</type><name>mContext</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>mNumEvaluations</name></decl>;</decl_stmt>

<label><name>protected</name>:</label>
  <struct_decl>struct <name>TerminationFuncHolder</name>;</struct_decl>
  <macro><name>friend</name></macro> <struct_decl>struct <name>TerminationFuncHolder</name>;</struct_decl>
  
  <struct>struct <name>TerminationFuncClosure</name>
  <block>{
    <macro><name>TerminationFuncClosure</name><argument_list>(<argument>nsScriptTerminationFunc aFunc</argument>,
                           <argument>nsISupports* aArg</argument>,
                           <argument>TerminationFuncClosure* aNext</argument>)</argument_list></macro> :
      <expr_stmt><expr><call><name>mTerminationFunc</name><argument_list>(<argument><expr><name>aFunc</name></expr></argument>)</argument_list></call></expr>,
      <expr><call><name>mTerminationFuncArg</name><argument_list>(<argument><expr><name>aArg</name></expr></argument>)</argument_list></call></expr>,
      <macro><name>mNext</name><argument_list>(<argument>aNext</argument>)</argument_list></macro>
    <expr><block>{
    }</block>
    ~<macro><name>TerminationFuncClosure</name><argument_list>()</argument_list></macro>
    <block>{
      <expr><name>delete</name> <name>mNext</name></expr>;
    }</block>
    
    <name>nsScriptTerminationFunc</name> <name>mTerminationFunc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsISupports</name>&gt; <name>mTerminationFuncArg</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TerminationFuncClosure</name>*</type> <name>mNext</name></decl>;</decl_stmt>
  }</block>;</struct>

  <struct>struct <name>TerminationFuncHolder</name>
  <block>{
    <expr_stmt><expr><call><name>TerminationFuncHolder</name><argument_list>(<argument><expr><name>nsJSContext</name>* <name>aContext</name></expr></argument>)</argument_list></call>
      : <call><name>mContext</name><argument_list>(<argument><expr><name>aContext</name></expr></argument>)</argument_list></call></expr>,
        <macro><name>mTerminations</name><argument_list>(<argument>aContext-&gt;mTerminations</argument>)</argument_list></macro>
    <expr><block>{
      <expr><name><name>aContext</name>-&gt;<name>mTerminations</name></name> = <name>nsnull</name></expr>;
    }</block>
    ~<macro><name>TerminationFuncHolder</name><argument_list>()</argument_list></macro>
    <block>{
      <comment type="line">// Have to be careful here.  mContext might have picked up new</comment>
      <comment type="line">// termination funcs while the script was evaluating.  Prepend whatever</comment>
      <comment type="line">// we have to the current termination funcs on the context (since our</comment>
      <comment type="line">// termination funcs were posted first).</comment>
      <if>if <condition>(<expr><name>mTerminations</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>TerminationFuncClosure</name>*</type> <name>cur</name> <init>= <expr><name>mTerminations</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name><name>cur</name>-&gt;<name>mNext</name></name></expr>)</condition> <block>{
          <expr_stmt><expr><name>cur</name> = <name><name>cur</name>-&gt;<name>mNext</name></name></expr>;</expr_stmt>
        <expr_stmt/></block></while></block></then></if>}</block>
        <name><name>cur</name>-&gt;<name>mNext</name></name> = <name><name>mContext</name>-&gt;<name>mTerminations</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mContext</name>-&gt;<name>mTerminations</name></name> = <name>mTerminations</name></expr>;</expr_stmt>
      }</block>
    <decl/></struct>}

    nsJSContext<expr_stmt><expr>* <name>mContext</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TerminationFuncClosure</name>*</type> <name>mTerminations</name></decl>;</decl_stmt>
  };
  
  <decl_stmt><decl><type><name>TerminationFuncClosure</name>*</type> <name>mTerminations</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
  <decl_stmt><decl><type><name>PRPackedBool</name></type> <name>mIsInitialized</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRPackedBool</name></type> <name>mScriptsEnabled</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRPackedBool</name></type> <name>mGCOnDestruction</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRPackedBool</name></type> <name>mProcessingScriptTag</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>mExecuteDepth</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>mDefaultJSOptions</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRTime</name></type> <name>mOperationCallbackTime</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PRTime</name></type> <name>mModalStateTime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>mModalStateDepth</name></decl>;</decl_stmt>

  <comment type="line">// mGlobalWrapperRef is used only to hold a strong reference to the</comment>
  <comment type="line">// global object wrapper while the nsJSContext is alive. This cuts</comment>
  <comment type="line">// down on the number of rooting and unrooting calls XPConnect has</comment>
  <comment type="line">// to make when the global object is touched in JS.</comment>

  <expr_stmt><expr><name>nsCOMPtr</name>&lt;<name>nsISupports</name>&gt; <name>mGlobalWrapperRef</name></expr>;</expr_stmt>

  <function_decl><type><specifier>static</specifier> <name>int</name></type> <name>JSOptionChangedCallback</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pref</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>JSBool</name></type> <name>DOMOperationCallback</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>)</parameter_list>;</function_decl>
};

<decl_stmt><decl><type><name>class</name></type> <name>nsIJSRuntimeService</name></decl>;</decl_stmt>

<expr_stmt><expr><name>class</name> <name>nsJSRuntime</name> : <name>public</name> <name>nsIScriptRuntime</name>
<block>{
<expr><name>public</name>:
  <comment type="line">// let people who can see us use our runtime for convenience.</comment>
  static <name>JSRuntime</name> *<name>sRuntime</name></expr>;

<expr><name>public</name>:
  <comment type="line">// nsISupports</comment>
  <name>NS_DECL_ISUPPORTS</name>

  <name>virtual</name> <name>PRUint32</name> <macro><name>GetScriptTypeID</name><argument_list>()</argument_list></macro> <block>{
            <return>return <expr><name>nsIProgrammingLanguage</name>::<name>JAVASCRIPT</name></expr>;</return></block></expr>
  }</block>

  <name>virtual</name> <name>nsresult</name> <call><name>CreateContext</name><argument_list>(<argument><expr><name>nsIScriptContext</name> **<name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>ParseVersion</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsString</name> &amp;</type><name>aVersionStr</name></decl></param>, <param><decl><type><name>PRUint32</name> *</type><name>flags</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>DropScriptObject</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>object</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>virtual</name> <name>nsresult</name></type> <name>HoldScriptObject</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>object</name></decl></param>)</parameter_list>;</function_decl>
  
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Startup</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Shutdown</name><parameter_list>()</parameter_list>;</function_decl>
  <comment type="line">// Setup all the statics etc - safe to call multiple times after Startup()</comment>
  <function_decl><type><specifier>static</specifier> <name>nsresult</name></type> <name>Init</name><parameter_list>()</parameter_list>;</function_decl>
  <comment type="line">// Get the NameSpaceManager, creating if necessary</comment>
  <function_decl><type><specifier>static</specifier> <name>nsScriptNameSpaceManager</name>*</type> <name>GetNameSpaceManager</name><parameter_list>()</parameter_list>;</function_decl>
};

<comment type="line">// An interface for fast and native conversion to/from nsIArray. If an object</comment>
<comment type="line">// supports this interface, JS can reach directly in for the argv, and avoid</comment>
<comment type="line">// nsISupports conversion. If this interface is not supported, the object will</comment>
<comment type="line">// be queried for nsIArray, and everything converted via xpcom objects.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_IJSARGARRAY_IID</name></cpp:macro> \
 <cpp:value>{ <comment type="block">/*{E96FB2AE-CB4F-44a0-81F8-D91C80AFE9A3} */</comment> \
 0xe96fb2ae, 0xcb4f, 0x44a0, \
 { 0x81, 0xf8, 0xd9, 0x1c, 0x80, 0xaf, 0xe9, 0xa3 } }</cpp:value></cpp:define>

<expr_stmt><expr><name>class</name> <name>nsIJSArgArray</name>: <name>public</name> <name>nsISupports</name>
<block>{
<expr><name>public</name>:
  <macro><name>NS_DECLARE_STATIC_IID_ACCESSOR</name><argument_list>(<argument>NS_IJSARGARRAY_IID</argument>)</argument_list></macro>
  <comment type="line">// Bug 312003 describes why this must be "void **", but after calling argv</comment>
  <comment type="line">// may be cast to jsval* and the args found at:</comment>
  <comment type="line">//    ((jsval*)argv)[0], ..., ((jsval*)argv)[argc - 1]</comment>
  <name>virtual</name> <name>nsresult</name> <call><name>GetArgs</name><argument_list>(<argument><expr><name>PRUint32</name> *<name>argc</name></expr></argument>, <argument><expr><name>void</name> **<name>argv</name></expr></argument>)</argument_list></call> = 0</expr>;
}</block></expr>;</expr_stmt>

<macro><name>NS_DEFINE_STATIC_IID_ACCESSOR</name><argument_list>(<argument>nsIJSArgArray</argument>, <argument>NS_IJSARGARRAY_IID</argument>)</argument_list></macro>

<comment type="block">/* factory functions */</comment>
<function_decl><type><name>nsresult</name></type> <name>NS_CreateJSRuntime</name><parameter_list>(<param><decl><type><name>nsIScriptRuntime</name> **</type><name>aRuntime</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* prototypes */</comment>
<function_decl><type><name>void</name></type> <name>NS_ScriptErrorReporter</name><parameter_list>(<param><decl><type><name>JSContext</name> *</type><name>cx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>, <param><decl><type><name>JSErrorReport</name> *</type><name>report</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* nsJSEnvironment_h___ */</comment>
</unit>
