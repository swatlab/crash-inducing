<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="005b809c979ba5e0d47b2f54b10157730c3b6885.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Original Author: David W. Hyatt (hyatt@netscape.com)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScrollBoxObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsBoxObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPresShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIContent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMNSDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPresContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFrame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScrollableView.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScrollableFrame.h"</cpp:file></cpp:include>


<class>class <name>nsScrollBoxObject</name> <super>: <specifier>public</specifier> <name>nsIScrollBoxObject</name>, <specifier>public</specifier> <name>nsBoxObject</name></super>
<block>{<private type="default">
</private><public>public:
  <function_decl><type><name>NS_DECL_ISUPPORTS_INHERITED</name>
  <name>NS_DECL_NSISCROLLBOXOBJECT</name></type>

  <name>nsScrollBoxObject</name><parameter_list>()</parameter_list>;</function_decl>
  <destructor_decl><specifier>virtual</specifier> <name>~<name>nsScrollBoxObject</name></name><parameter_list>()</parameter_list>;</destructor_decl>

  <function_decl><type><specifier>virtual</specifier> <name>nsIScrollableView</name>*</type> <name>GetScrollableView</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="block">/* additional members */</comment>
</public>}</block>;</class>

<comment type="block">/* Implementation file */</comment>

<macro><name>NS_INTERFACE_MAP_BEGIN</name><argument_list>(<argument>nsScrollBoxObject</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsIScrollBoxObject</argument>)</argument_list></macro>
<macro><name>NS_INTERFACE_MAP_END_INHERITING</name><argument_list>(<argument>nsBoxObject</argument>)</argument_list></macro>

<macro><name>NS_IMPL_ADDREF_INHERITED</name><argument_list>(<argument>nsScrollBoxObject</argument>, <argument>nsBoxObject</argument>)</argument_list></macro>
<macro><name>NS_IMPL_RELEASE_INHERITED</name><argument_list>(<argument>nsScrollBoxObject</argument>, <argument>nsBoxObject</argument>)</argument_list></macro>

<constructor><name><name>nsScrollBoxObject</name>::<name>nsScrollBoxObject</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="block">/* member initializers and constructor code */</comment>
}</block></constructor>

<destructor><name><name>nsScrollBoxObject</name>::~<name>nsScrollBoxObject</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="block">/* destructor code */</comment>
}</block></destructor>

<comment type="block">/* void scrollTo (in long x, in long y); */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsScrollBoxObject</name>::<name>ScrollTo</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>x</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>y</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIScrollableView</name>*</type> <name>scrollableView</name> <init>= <expr><call><name>GetScrollableView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>scrollableView</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <return>return <expr><call><name><name>scrollableView</name>-&gt;<name>ScrollTo</name></name><argument_list>(<argument><expr><call><name><name>nsPresContext</name>::<name>CSSPixelsToAppUnits</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name><name>nsPresContext</name>::<name>CSSPixelsToAppUnits</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* void scrollBy (in long dx, in long dy); */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsScrollBoxObject</name>::<name>ScrollBy</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>dx</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>dy</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>GetPosition</name><argument_list>(<argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>&amp;<name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <return>return <expr><call><name>ScrollTo</name><argument_list>(<argument><expr><name>x</name> + <name>dx</name></expr></argument>, <argument><expr><name>y</name> + <name>dy</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* void scrollByLine (in long dlines); */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsScrollBoxObject</name>::<name>ScrollByLine</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>dlines</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIScrollableView</name>*</type> <name>scrollableView</name> <init>= <expr><call><name>GetScrollableView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>scrollableView</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <return>return <expr><call><name><name>scrollableView</name>-&gt;<name>ScrollByLines</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>dlines</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">// XUL &lt;scrollbox&gt; elements have a single box child element.</comment>
<comment type="line">// Get a pointer to that box.</comment>
<comment type="line">// Note that now that the &lt;scrollbox&gt; is just a regular box</comment>
<comment type="line">// with 'overflow:hidden', the boxobject's frame is an nsXULScrollFrame,</comment>
<comment type="line">// the &lt;scrollbox&gt;'s box frame is the scrollframe's "scrolled frame", and</comment>
<comment type="line">// the &lt;scrollbox&gt;'s child box is a child of that.</comment>
<function><type><specifier>static</specifier> <name>nsIFrame</name>*</type> <name>GetScrolledBox</name><parameter_list>(<param><decl><type><name>nsBoxObject</name>*</type> <name>aScrollBox</name></decl></param>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>frame</name> <init>= <expr><call><name><name>aScrollBox</name>-&gt;<name>GetFrame</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>frame</name></expr>)</condition><then> 
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>
  <decl_stmt><decl><type><name>nsIScrollableFrame</name>*</type> <name>scrollFrame</name> <init>= <expr><call><name>do_QueryFrame</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>scrollFrame</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"nsIScrollBoxObject attached to something that's not a scroll frame!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>nsnull</name></expr>;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>scrolledFrame</name> <init>= <expr><call><name><name>scrollFrame</name>-&gt;<name>GetScrolledFrame</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>scrolledFrame</name></expr>)</condition><then>
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>
  <return>return <expr><call><name><name>scrolledFrame</name>-&gt;<name>GetChildBox</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* void scrollByIndex (in long dindexes); */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsScrollBoxObject</name>::<name>ScrollByIndex</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>dindexes</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nsIScrollableView</name>*</type> <name>scrollableView</name> <init>= <expr><call><name>GetScrollableView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>scrollableView</name></expr>)</condition><then>
       <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
    <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>scrolledBox</name> <init>= <expr><call><name>GetScrolledBox</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>scrolledBox</name></expr>)</condition><then>
       <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>nsRect</name></type> <name>rect</name></decl>;</decl_stmt>

    <comment type="line">// now get the scrolled boxes first child.</comment>
    <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>child</name> <init>= <expr><call><name><name>scrolledBox</name>-&gt;<name>GetChildBox</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PRBool</name></type> <name>horiz</name> <init>= <expr><call><name><name>scrolledBox</name>-&gt;<name>IsHorizontal</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsPoint</name></type> <name>cp</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>scrollableView</name>-&gt;<name>GetScrollPosition</name></name><argument_list>(<argument><expr><name><name>cp</name>.<name>x</name></name></expr></argument>,<argument><expr><name><name>cp</name>.<name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nscoord</name></type> <name>diff</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>curIndex</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>isLTR</name> <init>= <expr><call><name><name>scrolledBox</name>-&gt;<name>IsNormalDirection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PRInt32</name></type> <name>frameWidth</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>isLTR</name> &amp;&amp; <name>horiz</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>GetWidth</name><argument_list>(<argument><expr>&amp;<name>frameWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>shell</name> <init>= <expr><call><name>GetPresShell</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>shell</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return>
      }</block></then></if>
      <expr_stmt><expr><name>frameWidth</name> = <call><name><name>nsPresContext</name>::<name>CSSPixelsToAppUnits</name></name><argument_list>(<argument><expr><name>frameWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">// first find out what index we are currently at</comment>
    <while>while<condition>(<expr><name>child</name></expr>)</condition> <block>{
      <expr_stmt><expr><name>rect</name> = <call><name><name>child</name>-&gt;<name>GetRect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>horiz</name></expr>)</condition><then> <block>{
        <comment type="line">// In the left-to-right case we break from the loop when the center of</comment>
        <comment type="line">// the current child rect is greater than the scrolled position of</comment>
        <comment type="line">// the left edge of the scrollbox</comment>
        <comment type="line">// In the right-to-left case we break when the center of the current</comment>
        <comment type="line">// child rect is less than the scrolled position of the right edge of</comment>
        <comment type="line">// the scrollbox.</comment>
        <expr_stmt><expr><name>diff</name> = <name><name>rect</name>.<name>x</name></name> + <name><name>rect</name>.<name>width</name></name>/2</expr>;</expr_stmt> <comment type="line">// use the center, to avoid rounding errors</comment>
        <if>if <condition>(<expr>(<name>isLTR</name> &amp;&amp; <name>diff</name> &gt; <name><name>cp</name>.<name>x</name></name>) ||
            (!<name>isLTR</name> &amp;&amp; <name>diff</name> &lt; <name><name>cp</name>.<name>x</name></name> + <name>frameWidth</name>)</expr>)</condition><then> <block>{
          <break>break;</break>
        }</block></then></if>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>diff</name> = <name><name>rect</name>.<name>y</name></name> + <name><name>rect</name>.<name>height</name></name>/2</expr>;</expr_stmt><comment type="line">// use the center, to avoid rounding errors</comment>
        <if>if <condition>(<expr><name>diff</name> &gt; <name><name>cp</name>.<name>y</name></name></expr>)</condition><then> <block>{
          <break>break;</break>
        }</block></then></if>
      }</block></else></if>
      <expr_stmt><expr><name>child</name> = <call><name><name>child</name>-&gt;<name>GetNextBox</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>curIndex</name>++</expr>;</expr_stmt>
    }</block></while>

    <decl_stmt><decl><type><name>PRInt32</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>dindexes</name> == 0</expr>)</condition><then>
       <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>dindexes</name> &gt; 0</expr>)</condition><then> <block>{
      <while>while<condition>(<expr><name>child</name></expr>)</condition> <block>{
        <expr_stmt><expr><name>child</name> = <call><name><name>child</name>-&gt;<name>GetNextBox</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>child</name></expr>)</condition><then>
          <expr_stmt><expr><name>rect</name> = <call><name><name>child</name>-&gt;<name>GetRect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name>count</name>++</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>count</name> &gt;= <name>dindexes</name></expr>)</condition><then>
          <break>break;</break></then></if>
      }</block></while>

   }</block></then> <else>else <if>if <condition>(<expr><name>dindexes</name> &lt; 0</expr>)</condition><then> <block>{
      <expr_stmt><expr><name>child</name> = <call><name><name>scrolledBox</name>-&gt;<name>GetChildBox</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <while>while<condition>(<expr><name>child</name></expr>)</condition> <block>{
        <expr_stmt><expr><name>rect</name> = <call><name><name>child</name>-&gt;<name>GetRect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>count</name> &gt;= <name>curIndex</name> + <name>dindexes</name></expr>)</condition><then>
          <break>break;</break></then></if>

        <expr_stmt><expr><name>count</name>++</expr>;</expr_stmt>
        <expr_stmt><expr><name>child</name> = <call><name><name>child</name>-&gt;<name>GetNextBox</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      }</block></while>
   }</block></then></if></else></if>

   <if>if <condition>(<expr><name>horiz</name></expr>)</condition><then>
       <comment type="line">// In the left-to-right case we scroll so that the left edge of the</comment>
       <comment type="line">// selected child is scrolled to the left edge of the scrollbox.</comment>
       <comment type="line">// In the right-to-left case we scroll so that the right edge of the</comment>
       <comment type="line">// selected child is scrolled to the right edge of the scrollbox.</comment>
       <return>return <expr><call><name><name>scrollableView</name>-&gt;<name>ScrollTo</name></name><argument_list>(<argument><expr>(<name>isLTR</name>) ? <name><name>rect</name>.<name>x</name></name> :
                                       <name><name>rect</name>.<name>x</name></name> + <name><name>rect</name>.<name>width</name></name> - <name>frameWidth</name></expr></argument>, <argument><expr><name><name>cp</name>.<name>y</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return></then>
   <else>else
       <return>return <expr><call><name><name>scrollableView</name>-&gt;<name>ScrollTo</name></name><argument_list>(<argument><expr><name><name>cp</name>.<name>x</name></name></expr></argument>, <argument><expr><name><name>rect</name>.<name>y</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>

<comment type="block">/* void scrollToLine (in long line); */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsScrollBoxObject</name>::<name>ScrollToLine</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>line</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIScrollableView</name>*</type> <name>scrollableView</name> <init>= <expr><call><name>GetScrollableView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>scrollableView</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
  
  <decl_stmt><decl><type><name>nscoord</name></type> <name>height</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>scrollableView</name>-&gt;<name>GetLineHeight</name></name><argument_list>(<argument><expr>&amp;<name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>scrollableView</name>-&gt;<name>ScrollTo</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>height</name> * <name>line</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* void scrollToElement (in nsIDOMElement child); */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsScrollBoxObject</name>::<name>ScrollToElement</name></name><parameter_list>(<param><decl><type><name>nsIDOMElement</name> *</type><name>child</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nsIScrollableView</name>*</type> <name>scrollableView</name> <init>= <expr><call><name>GetScrollableView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>scrollableView</name></expr>)</condition><then>
       <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>shell</name> <init>= <expr><call><name>GetPresShell</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>shell</name></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>scrolledBox</name> <init>= <expr><call><name>GetScrolledBox</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>scrolledBox</name></expr>)</condition><then>
       <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>nsRect</name></type> <name>rect</name></decl>, <decl><type ref="prev"/><name>crect</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocument</name></expr></argument>&gt;</argument_list></name></type> <name>doc</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>child</name>-&gt;<name>GetOwnerDocument</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNSDocument</name></expr></argument>&gt;</argument_list></name></type> <name>nsDoc</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if<condition>(<expr>!<name>nsDoc</name></expr>)</condition><then>
      <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIBoxObject</name></expr></argument>&gt;</argument_list></name></type> <name>childBoxObject</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>nsDoc</name>-&gt;<name>GetBoxObjectFor</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>childBoxObject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr>!<name>childBoxObject</name></expr>)</condition><then>
      <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>PRInt32</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>childBoxObject</name>-&gt;<name>GetX</name></name><argument_list>(<argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>childBoxObject</name>-&gt;<name>GetY</name></name><argument_list>(<argument><expr>&amp;<name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// get the twips rectangle from the boxobject (which has pixels)    </comment>
    <expr_stmt><expr><name><name>rect</name>.<name>x</name></name> = <call><name><name>nsPresContext</name>::<name>CSSPixelsToAppUnits</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rect</name>.<name>y</name></name> = <call><name><name>nsPresContext</name>::<name>CSSPixelsToAppUnits</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TODO: make sure the child is inside the box</comment>

    <comment type="line">// get our current info</comment>
    <decl_stmt><decl><type><name>nsPoint</name></type> <name>cp</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>scrollableView</name>-&gt;<name>GetScrollPosition</name></name><argument_list>(<argument><expr><name><name>cp</name>.<name>x</name></name></expr></argument>,<argument><expr><name><name>cp</name>.<name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsIntRect</name></type> <name>prect</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetOffsetRect</name><argument_list>(<argument><expr><name>prect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>crect</name> = <call><name><name>nsIntRect</name>::<name>ToAppUnits</name></name><argument_list>(<argument><expr><name>prect</name></expr></argument>, <argument><expr><call><name><name>nsPresContext</name>::<name>AppUnitsPerCSSPixel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nscoord</name></type> <name>newx</name><init>=<expr><name><name>cp</name>.<name>x</name></name></expr></init>, <name>newy</name><init>=<expr><name><name>cp</name>.<name>y</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// we only scroll in the direction of the scrollbox orientation</comment>
    <comment type="line">// always scroll to left or top edge of child element</comment>
    <if>if <condition>(<expr><call><name><name>scrolledBox</name>-&gt;<name>IsHorizontal</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>newx</name> = <name><name>rect</name>.<name>x</name></name> - <name><name>crect</name>.<name>x</name></name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>newy</name> = <name><name>rect</name>.<name>y</name></name> - <name><name>crect</name>.<name>y</name></name></expr>;</expr_stmt>
    }</block></else></if>
    <comment type="line">// scroll away</comment>
    <return>return <expr><call><name><name>scrollableView</name>-&gt;<name>ScrollTo</name></name><argument_list>(<argument><expr><name>newx</name></expr></argument>, <argument><expr><name>newy</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* void scrollToIndex (in long index); */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsScrollBoxObject</name>::<name>ScrollToIndex</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>index</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<comment type="block">/* void getPosition (out long x, out long y); */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsScrollBoxObject</name>::<name>GetPosition</name></name><parameter_list>(<param><decl><type><name>PRInt32</name> *</type><name>x</name></decl></param>, <param><decl><type><name>PRInt32</name> *</type><name>y</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIScrollableView</name>*</type> <name>scrollableView</name> <init>= <expr><call><name>GetScrollableView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>scrollableView</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nscoord</name></type> <name>xc</name></decl>, <decl><type ref="prev"/><name>yc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>scrollableView</name>-&gt;<name>GetScrollPosition</name></name><argument_list>(<argument><expr><name>xc</name></expr></argument>, <argument><expr><name>yc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>rv</name></expr>;</return></then></if>

  <expr_stmt><expr>*<name>x</name> = <call><name><name>nsPresContext</name>::<name>AppUnitsToIntCSSPixels</name></name><argument_list>(<argument><expr><name>xc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>y</name> = <call><name><name>nsPresContext</name>::<name>AppUnitsToIntCSSPixels</name></name><argument_list>(<argument><expr><name>yc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>  
}</block></function>

<comment type="block">/* void getScrolledSize (out long width, out long height); */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsScrollBoxObject</name>::<name>GetScrolledSize</name></name><parameter_list>(<param><decl><type><name>PRInt32</name> *</type><name>width</name></decl></param>, <param><decl><type><name>PRInt32</name> *</type><name>height</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>scrolledBox</name> <init>= <expr><call><name>GetScrolledBox</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>scrolledBox</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>
        	
    <decl_stmt><decl><type><name>nsRect</name></type> <name>scrollRect</name> <init>= <expr><call><name><name>scrolledBox</name>-&gt;<name>GetRect</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr>*<name>width</name>  = <call><name><name>nsPresContext</name>::<name>AppUnitsToIntCSSPixels</name></name><argument_list>(<argument><expr><name><name>scrollRect</name>.<name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>height</name> = <call><name><name>nsPresContext</name>::<name>AppUnitsToIntCSSPixels</name></name><argument_list>(<argument><expr><name><name>scrollRect</name>.<name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<comment type="block">/* void ensureElementIsVisible (in nsIDOMElement child); */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsScrollBoxObject</name>::<name>EnsureElementIsVisible</name></name><parameter_list>(<param><decl><type><name>nsIDOMElement</name> *</type><name>child</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_ENSURE_ARG_POINTER</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Start with getting info about the child, since that will flush</comment>
    <comment type="line">// layout and possibly destroy scrollable views, presshells, etc.</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocument</name></expr></argument>&gt;</argument_list></name></type> <name>doc</name></decl>;</decl_stmt>
    <comment type="line">// XXXbz sXBL/XBL2 issue -- which document?</comment>
    <expr_stmt><expr><call><name><name>child</name>-&gt;<name>GetOwnerDocument</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMNSDocument</name></expr></argument>&gt;</argument_list></name></type> <name>nsDoc</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if<condition>(<expr>!<name>nsDoc</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIBoxObject</name></expr></argument>&gt;</argument_list></name></type> <name>childBoxObject</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>nsDoc</name>-&gt;<name>GetBoxObjectFor</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>childBoxObject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr>!<name>childBoxObject</name></expr>)</condition><then>
      <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>PRInt32</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>childBoxObject</name>-&gt;<name>GetX</name></name><argument_list>(<argument><expr>&amp;<name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>childBoxObject</name>-&gt;<name>GetY</name></name><argument_list>(<argument><expr>&amp;<name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>childBoxObject</name>-&gt;<name>GetWidth</name></name><argument_list>(<argument><expr>&amp;<name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>childBoxObject</name>-&gt;<name>GetHeight</name></name><argument_list>(<argument><expr>&amp;<name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsIScrollableView</name>*</type> <name>scrollableView</name> <init>= <expr><call><name>GetScrollableView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>scrollableView</name></expr>)</condition><then>
       <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>scrolledBox</name> <init>= <expr><call><name>GetScrolledBox</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>scrolledBox</name></expr>)</condition><then>
       <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>nsRect</name></type> <name>rect</name></decl>, <decl><type ref="prev"/><name>crect</name></decl>;</decl_stmt>
    <comment type="line">// get the twips rectangle from the boxobject (which has pixels)    </comment>
    <expr_stmt><expr><name><name>rect</name>.<name>x</name></name> = <call><name><name>nsPresContext</name>::<name>CSSPixelsToAppUnits</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rect</name>.<name>y</name></name> = <call><name><name>nsPresContext</name>::<name>CSSPixelsToAppUnits</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rect</name>.<name>width</name></name> = <call><name><name>nsPresContext</name>::<name>CSSPixelsToAppUnits</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rect</name>.<name>height</name></name> = <call><name><name>nsPresContext</name>::<name>CSSPixelsToAppUnits</name></name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TODO: make sure the child is inside the box</comment>

    <comment type="line">// get our current info</comment>
    <decl_stmt><decl><type><name>nsPoint</name></type> <name>cp</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>scrollableView</name>-&gt;<name>GetScrollPosition</name></name><argument_list>(<argument><expr><name><name>cp</name>.<name>x</name></name></expr></argument>,<argument><expr><name><name>cp</name>.<name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nsIntRect</name></type> <name>prect</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetOffsetRect</name><argument_list>(<argument><expr><name>prect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>crect</name> = <call><name><name>nsIntRect</name>::<name>ToAppUnits</name></name><argument_list>(<argument><expr><name>prect</name></expr></argument>, <argument><expr><call><name><name>nsPresContext</name>::<name>AppUnitsPerCSSPixel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nscoord</name></type> <name>newx</name><init>=<expr><name><name>cp</name>.<name>x</name></name></expr></init>, <name>newy</name><init>=<expr><name><name>cp</name>.<name>y</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// we only scroll in the direction of the scrollbox orientation</comment>
    <if>if <condition>(<expr><call><name><name>scrolledBox</name>-&gt;<name>IsHorizontal</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>(<name><name>rect</name>.<name>x</name></name> - <name><name>crect</name>.<name>x</name></name>) + <name><name>rect</name>.<name>width</name></name> &gt; <name><name>cp</name>.<name>x</name></name> + <name><name>crect</name>.<name>width</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>newx</name> = <name><name>cp</name>.<name>x</name></name> + (((<name><name>rect</name>.<name>x</name></name> - <name><name>crect</name>.<name>x</name></name>) + <name><name>rect</name>.<name>width</name></name>)-(<name><name>cp</name>.<name>x</name></name> + <name><name>crect</name>.<name>width</name></name>))</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name><name>rect</name>.<name>x</name></name> - <name><name>crect</name>.<name>x</name></name> &lt; <name><name>cp</name>.<name>x</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>newx</name> = <name><name>rect</name>.<name>x</name></name> - <name><name>crect</name>.<name>x</name></name></expr>;</expr_stmt>
        }</block></then></if></else></if>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr>(<name><name>rect</name>.<name>y</name></name> - <name><name>crect</name>.<name>y</name></name>) + <name><name>rect</name>.<name>height</name></name> &gt; <name><name>cp</name>.<name>y</name></name> + <name><name>crect</name>.<name>height</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>newy</name> = <name><name>cp</name>.<name>y</name></name> + (((<name><name>rect</name>.<name>y</name></name> - <name><name>crect</name>.<name>y</name></name>) + <name><name>rect</name>.<name>height</name></name>)-(<name><name>cp</name>.<name>y</name></name> + <name><name>crect</name>.<name>height</name></name>))</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name><name>rect</name>.<name>y</name></name> - <name><name>crect</name>.<name>y</name></name> &lt; <name><name>cp</name>.<name>y</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>newy</name> = <name><name>rect</name>.<name>y</name></name> - <name><name>crect</name>.<name>y</name></name></expr>;</expr_stmt>
        }</block></then></if></else></if>
    }</block></else></if>
    
    <comment type="line">// scroll away</comment>
    <return>return <expr><call><name><name>scrollableView</name>-&gt;<name>ScrollTo</name></name><argument_list>(<argument><expr><name>newx</name></expr></argument>, <argument><expr><name>newy</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* void ensureIndexIsVisible (in long index); */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsScrollBoxObject</name>::<name>EnsureIndexIsVisible</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>index</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<comment type="block">/* void ensureLineIsVisible (in long line); */</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsScrollBoxObject</name>::<name>EnsureLineIsVisible</name></name><parameter_list>(<param><decl><type><name>PRInt32</name></type> <name>line</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name>NS_ERROR_NOT_IMPLEMENTED</name></expr>;</return>
}</block></function>

<function><type><name>nsIScrollableView</name>*</type> 
<name><name>nsScrollBoxObject</name>::<name>GetScrollableView</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// get the frame.</comment>
  <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>frame</name> <init>= <expr><call><name>GetFrame</name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>frame</name></expr>)</condition><then> 
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>
  
  <decl_stmt><decl><type><name>nsIScrollableFrame</name>*</type> <name>scrollFrame</name> <init>= <expr><call><name>do_QueryFrame</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>scrollFrame</name></expr>)</condition><then>
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsIScrollableView</name>*</type> <name>scrollingView</name> <init>= <expr><call><name><name>scrollFrame</name>-&gt;<name>GetScrollableView</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>scrollingView</name></expr>)</condition><then>
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>

  <return>return <expr><name>scrollingView</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name>NS_NewScrollBoxObject</name><parameter_list>(<param><decl><type><name>nsIBoxObject</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>aResult</name> = new <name>nsScrollBoxObject</name></expr>;</expr_stmt>
  <if>if <condition>(<expr>!*<name>aResult</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

</unit>
