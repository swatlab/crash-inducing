<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="0018bae5e5fc20a3f6f7bd99a58281f69c0b5955.h"><comment type="block">/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code, released
 * March 31, 1998.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>jsstrinlines_h___</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jsstrinlines_h___</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsstr.h"</cpp:file></cpp:include>

<expr_stmt><expr>inline <name>JSString</name> *
<name>JSString</name>::<macro><name>unitString</name><argument_list>(<argument>jschar c</argument>)</argument_list></macro>
<block>{
    <expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>c</name> &lt; <name>UNIT_STRING_LIMIT</name></expr></argument>)</argument_list></call></expr>;
    <return>return <expr><name>const_cast</name>&lt;<name>JSString</name> *&gt;(&amp;<name><name>unitStringTable</name><index>[<expr><name>c</name></expr>]</index></name>)</expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr>inline <name>JSString</name> *
<name>JSString</name>::<macro><name>getUnitString</name><argument_list>(<argument>JSContext *cx</argument>, <argument>JSString *str</argument>, <argument>size_t index</argument>)</argument_list></macro>
<block>{
    <expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>index</name> &lt; <call><name><name>str</name>-&gt;<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>jschar</name> <name>c</name> = <call><name><name>str</name>-&gt;<name>chars</name></name><argument_list>()</argument_list></call><index>[<expr><name>index</name></expr>]</index></expr>;
    <if>if <condition>(<expr><name>c</name> &lt; <name>UNIT_STRING_LIMIT</name></expr>)</condition><then>
        <return>return <expr><call><name>unitString</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></then></if></block></expr></expr_stmt>
    <return>return <expr><call><name>js_NewDependentString</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}

inline <expr_stmt><expr><name>JSString</name> *
<name>JSString</name>::<macro><name>length2String</name><argument_list>(<argument>jschar c1</argument>, <argument>jschar c2</argument>)</argument_list></macro>
<block>{
    <expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>fitsInSmallChar</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>fitsInSmallChar</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <return>return <expr><name>const_cast</name>&lt;<name>JSString</name> *&gt;
           (&amp;<name><name>length2StringTable</name><index>[<expr>(((<name>size_t</name>)<name><name>toSmallChar</name><index>[<expr><name>c1</name></expr>]</index></name>) &lt;&lt; 6) + <name><name>toSmallChar</name><index>[<expr><name>c2</name></expr>]</index></name></expr>]</index></name>)</expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr>inline <name>JSString</name> *
<name>JSString</name>::<macro><name>length2String</name><argument_list>(<argument>uint32 i</argument>)</argument_list></macro>
<block>{
    <expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>i</name> &lt; 100</expr></argument>)</argument_list></call></expr>;
    <return>return <expr><call><name>length2String</name><argument_list>(<argument><expr>'0' + <name>i</name> / 10</expr></argument>, <argument><expr>'0' + <name>i</name> % 10</expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr>inline <name>JSString</name> *
<name>JSString</name>::<macro><name>intString</name><argument_list>(<argument>jsint i</argument>)</argument_list></macro>
<block>{
    <expr><name>jsuint</name> <name>u</name> = <call><name>jsuint</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><name>u</name> &lt; <name>INT_STRING_LIMIT</name></expr></argument>)</argument_list></call></expr>;
    <return>return <expr><name>const_cast</name>&lt;<name>JSString</name> *&gt;(<name>JSString</name>::<name><name>intStringTable</name><index>[<expr><name>u</name></expr>]</index></name>)</expr>;</return>
}</block></expr></expr_stmt>

<comment type="block">/* Get a static atomized string for chars if possible. */</comment>
<expr_stmt><expr>inline <name>JSString</name> *
<name>JSString</name>::<macro><name>lookupStaticString</name><argument_list>(<argument>const jschar *chars</argument>, <argument>size_t length</argument>)</argument_list></macro>
<block>{
    <if>if <condition>(<expr><name>length</name> == 1</expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>chars</name><index>[<expr>0</expr>]</index></name> &lt; <name>UNIT_STRING_LIMIT</name></expr>)</condition><then>
            <return>return <expr><call><name>unitString</name><argument_list>(<argument><expr><name><name>chars</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    <expr_stmt/></block></then></if>}</block></expr></expr_stmt>

    <if>if <condition>(<expr><name>length</name> == 2</expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>fitsInSmallChar</name><argument_list>(<argument><expr><name><name>chars</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>fitsInSmallChar</name><argument_list>(<argument><expr><name><name>chars</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><call><name>length2String</name><argument_list>(<argument><expr><name><name>chars</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>chars</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></then></if>

    <comment type="block">/*
     * Here we know that JSString::intStringTable covers only 256 (or at least
     * not 1000 or more) chars. We rely on order here to resolve the unit vs.
     * int string/length-2 string atom identity issue by giving priority to unit
     * strings for "0" through "9" and length-2 strings for "10" through "99".
     */</comment>
    <expr_stmt><expr><call><name>JS_STATIC_ASSERT</name><argument_list>(<argument><expr><name>INT_STRING_LIMIT</name> &lt;= 999</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>length</name> == 3</expr>)</condition><then> <block>{
        <if>if <condition>(<expr>'1' &lt;= <name><name>chars</name><index>[<expr>0</expr>]</index></name> &amp;&amp; <name><name>chars</name><index>[<expr>0</expr>]</index></name> &lt;= '9' &amp;&amp;
            '0' &lt;= <name><name>chars</name><index>[<expr>1</expr>]</index></name> &amp;&amp; <name><name>chars</name><index>[<expr>1</expr>]</index></name> &lt;= '9' &amp;&amp;
            '0' &lt;= <name><name>chars</name><index>[<expr>2</expr>]</index></name> &amp;&amp; <name><name>chars</name><index>[<expr>2</expr>]</index></name> &lt;= '9'</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>jsint</name></type> <name>i</name> <init>= <expr>(<name><name>chars</name><index>[<expr>0</expr>]</index></name> - '0') * 100 +
                      (<name><name>chars</name><index>[<expr>1</expr>]</index></name> - '0') * 10 +
                      (<name><name>chars</name><index>[<expr>2</expr>]</index></name> - '0')</expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name>jsuint</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> &lt; <name>INT_STRING_LIMIT</name></expr>)</condition><then>
                <return>return <expr><call><name>intString</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        }</block></then></if>
    }</block></then></if>

    <return>return <expr><name>NULL</name></expr>;</return>
}

inline <expr_stmt><expr><name>void</name>
<name>JSString</name>::<macro><name>finalize</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro> <block>{
    <expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name>JSString</name>::<call><name>isStatic</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>JS_RUNTIME_UNMETER</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>, <argument><expr><name>liveStrings</name></expr></argument>)</argument_list></call></expr>;
    <if>if <condition>(<expr><call><name>isDependent</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>dependentBase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JS_RUNTIME_UNMETER</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>, <argument><expr><name>liveDependentStrings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block></then></if>}</block></expr></expr_stmt> <else>else <if>if <condition>(<expr><call><name>isFlat</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/*
         * flatChars for stillborn string is null, but cx-&gt;free checks
         * for a null pointer on its own.
         */</comment>
        <expr_stmt><expr><call><name><name>cx</name>-&gt;<name>free</name></name><argument_list>(<argument><expr><call><name>flatChars</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else>
}

inline <expr_stmt><expr><name>void</name>
<name>JSShortString</name>::<macro><name>finalize</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<name>JSString</name>::<call><name>isStatic</name><argument_list>(<argument><expr>&amp;<name>mHeader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name><name>mHeader</name>.<name>isFlat</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>JS_RUNTIME_UNMETER</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>, <argument><expr><name>liveStrings</name></expr></argument>)</argument_list></call></expr>;
}</block>

inline <name>void</name>
<name>JSExternalString</name>::<macro><name>finalize</name><argument_list>(<argument>JSContext *cx</argument>)</argument_list></macro>
<block>{
    <expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>unsigned</name><argument_list>(<argument><expr><name>externalStringType</name></expr></argument>)</argument_list></call> &lt; <call><name>JS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>str_finalizers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>isStatic</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>isFlat</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>JS_RUNTIME_UNMETER</name><argument_list>(<argument><expr><name><name>cx</name>-&gt;<name>runtime</name></name></expr></argument>, <argument><expr><name>liveStrings</name></expr></argument>)</argument_list></call></expr>;

    <comment type="block">/* A stillborn string has null chars. */</comment>
    <expr><name>jschar</name> *<name>chars</name> = <call><name>flatChars</name><argument_list>()</argument_list></call></expr>;
    <if>if <condition>(<expr>!<name>chars</name></expr>)</condition><then>
        <return>return;</return></then></if>
    <name>JSStringFinalizeOp</name> <name>finalizer</name> = <name><name>str_finalizers</name><index>[<expr><name>externalStringType</name></expr>]</index></name></block></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>finalizer</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>finalizer</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}

inline <expr_stmt><expr><name>void</name>
<name>JSExternalString</name>::<macro><name>finalize</name><argument_list>()</argument_list></macro>
<block>{
    <expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name>unsigned</name><argument_list>(<argument><expr><name>externalStringType</name></expr></argument>)</argument_list></call> &lt; <call><name>JS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>str_finalizers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name>JSStringFinalizeOp</name> <name>finalizer</name> = <name><name>str_finalizers</name><index>[<expr><name>externalStringType</name></expr>]</index></name></expr>;
    <if>if <condition>(<expr><name>finalizer</name></expr>)</condition><then> <block>{
        <comment type="block">/*
         * Assume that the finalizer for the permanently interned
         * string knows how to deal with null context.
         */</comment>
        <expr_stmt><expr><call><name>finalizer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block></then></if>}</block></expr></expr_stmt>
}

namespace <macro><name>js</name></macro> <block>{

<decl_stmt><decl><type><name>class</name></type> <name>RopeBuilder</name> <block>{
    <decl_stmt><decl><type><name>JSContext</name> *</type><name>cx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>res</name></decl>;</decl_stmt>

  <label><name>public</name>:</label>
    <expr_stmt><expr><call><name>RopeBuilder</name><argument_list>(<argument><expr><name>JSContext</name> *<name>cx</name></expr></argument>)</argument_list></call>
      : <call><name>cx</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>, <macro><name>res</name><argument_list>(<argument>cx-&gt;runtime-&gt;emptyString</argument>)</argument_list></macro>
    <expr><block>{}</block>

    inline <name>bool</name> <macro><name>append</name><argument_list>(<argument>JSString *str</argument>)</argument_list></macro> <block>{
        <expr><name>res</name> = <call><name>js_ConcatStrings</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;
        <return>return <expr>!!<name>res</name></expr>;</return>
    }</block></expr></expr_stmt>

    <function><type><specifier>inline</specifier> <name>JSString</name> *</type><name>result</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>StringSegmentRange</name>
<block>{
    <comment type="block">/*
     * If malloc() shows up in any profiles from this vector, we can add a new
     * StackAllocPolicy which stashes a reusable freed-at-gc buffer in the cx.
     */</comment>
    <expr_stmt><expr><name>Vector</name>&lt;<name>JSString</name> *</expr>, <expr>32&gt; <name>stack</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSString</name> *</type><name>cur</name></decl>;</decl_stmt>

    <function><type><name>bool</name></type> <name>settle</name><parameter_list>(<param><decl><type><name>JSString</name> *</type><name>str</name></decl></param>)</parameter_list> <block>{
        <while>while <condition>(<expr><call><name><name>str</name>-&gt;<name>isRope</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <if>if <condition>(<expr>!<call><name><name>stack</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>str</name>-&gt;<name>ropeRight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
                <return>return <expr><name>false</name></expr>;</return></then></if>
            <expr_stmt><expr><name>str</name> = <call><name><name>str</name>-&gt;<name>ropeLeft</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>cur</name> = <name>str</name></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    }</block></function>

  <label><name>public</name>:</label>
    <expr_stmt><expr><call><name>StringSegmentRange</name><argument_list>(<argument><expr><name>JSContext</name> *<name>cx</name></expr></argument>)</argument_list></call>
      : <call><name>stack</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>, <macro><name>cur</name><argument_list>(<argument>NULL</argument>)</argument_list></macro>
    <expr><block>{}</block>

    <name>JS_WARN_UNUSED_RESULT</name> <name>bool</name> <macro><name>init</name><argument_list>(<argument>JSString *str</argument>)</argument_list></macro> <block>{
        <expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr><call><name><name>stack</name>.<name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><call><name>settle</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> const <block>{
        <return>return <expr><name>cur</name> == <name>NULL</name></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>JSString</name> *<macro><name>front</name><argument_list>()</argument_list></macro> const <block>{
        <expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name><name>cur</name>-&gt;<name>isRope</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><name>cur</name></expr>;</return>
    }</block></expr></expr_stmt>

    <function><type><name>JS_WARN_UNUSED_RESULT</name> <name>bool</name></type> <name>popFront</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>JS_ASSERT</name><argument_list>(<argument><expr>!<call><name>empty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>stack</name>.<name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cur</name> = <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>true</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>settle</name><argument_list>(<argument><expr><call><name><name>stack</name>.<name>popCopy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}</block>  <comment type="block">/* namespace js */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* jsstrinlines_h___ */</comment>
</unit>
