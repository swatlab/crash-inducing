<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="006b53807cf228e7e3c034bcc4cfb5b387131d62.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<comment type="block">/*
 * base class for rendering objects that can be split across lines,
 * columns, or pages
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsSplittableFrame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIContent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPresContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStyleContext.h"</cpp:file></cpp:include>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsSplittableFrame</name>::<name>Init</name></name><parameter_list>(<param><decl><type><name>nsIContent</name>*</type>      <name>aContent</name></decl></param>,
                        <param><decl><type><name>nsIFrame</name>*</type>        <name>aParent</name></decl></param>,
                        <param><decl><type><name>nsIFrame</name>*</type>        <name>aPrevInFlow</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>nsFrame</name>::<name>Init</name></name><argument_list>(<argument><expr><name>aContent</name></expr></argument>, <argument><expr><name>aParent</name></expr></argument>, <argument><expr><name>aPrevInFlow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>aPrevInFlow</name></expr>)</condition><then> <block>{
    <comment type="line">// Hook the frame into the flow</comment>
    <expr_stmt><expr><call><name>SetPrevInFlow</name><argument_list>(<argument><expr><name>aPrevInFlow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aPrevInFlow</name>-&gt;<name>SetNextInFlow</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsSplittableFrame</name>::<name>Destroy</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// Disconnect from the flow list</comment>
  <if>if <condition>(<expr><name>mPrevContinuation</name> || <name>mNextContinuation</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>RemoveFromFlow</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// Let the base class destroy the frame</comment>
  <expr_stmt><expr><call><name><name>nsFrame</name>::<name>Destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>nsSplittableType</name></type>
<name><name>nsSplittableFrame</name>::<name>GetSplittableType</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><name>NS_FRAME_SPLITTABLE</name></expr>;</return>
}</block></function>

<function><type><name>nsIFrame</name>*</type> <name><name>nsSplittableFrame</name>::<name>GetPrevContinuation</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><name>mPrevContinuation</name></expr>;</return>
}</block></function>

<function><type><name>NS_METHOD</name></type> <name><name>nsSplittableFrame</name>::<name>SetPrevContinuation</name></name><parameter_list>(<param><decl><type><name>nsIFrame</name>*</type> <name>aFrame</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name> <argument_list>(<argument><expr>!<name>aFrame</name> || <call><name>GetType</name><argument_list>()</argument_list></call> == <call><name><name>aFrame</name>-&gt;<name>GetType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"setting a prev continuation with incorrect type!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name> <argument_list>(<argument><expr>!<call><name>IsInPrevContinuationChain</name><argument_list>(<argument><expr><name>aFrame</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"creating a loop in continuation chain!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mPrevContinuation</name> = <name>aFrame</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RemoveStateBits</name><argument_list>(<argument><expr><name>NS_FRAME_IS_FLUID_CONTINUATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsIFrame</name>*</type> <name><name>nsSplittableFrame</name>::<name>GetNextContinuation</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><name>mNextContinuation</name></expr>;</return>
}</block></function>

<function><type><name>NS_METHOD</name></type> <name><name>nsSplittableFrame</name>::<name>SetNextContinuation</name></name><parameter_list>(<param><decl><type><name>nsIFrame</name>*</type> <name>aFrame</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name> <argument_list>(<argument><expr>!<name>aFrame</name> || <call><name>GetType</name><argument_list>()</argument_list></call> == <call><name><name>aFrame</name>-&gt;<name>GetType</name></name><argument_list>()</argument_list></call></expr></argument>,  <argument><expr>"setting a next continuation with incorrect type!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name> <argument_list>(<argument><expr>!<call><name>IsInNextContinuationChain</name><argument_list>(<argument><expr><name>aFrame</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"creating a loop in continuation chain!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mNextContinuation</name> = <name>aFrame</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>aFrame</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>aFrame</name>-&gt;<name>RemoveStateBits</name></name><argument_list>(<argument><expr><name>NS_FRAME_IS_FLUID_CONTINUATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsIFrame</name>*</type> <name><name>nsSplittableFrame</name>::<name>GetFirstContinuation</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <decl_stmt><decl><type><name>nsSplittableFrame</name>*</type> <name>firstContinuation</name> <init>= <expr><call><name><name>const_cast</name><argument_list>&lt;<argument><expr><name>nsSplittableFrame</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>firstContinuation</name>-&gt;<name>mPrevContinuation</name></name></expr>)</condition>  <block>{
    <expr_stmt><expr><name>firstContinuation</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsSplittableFrame</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>firstContinuation</name>-&gt;<name>mPrevContinuation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
  <expr_stmt><expr><call><name>NS_POSTCONDITION</name><argument_list>(<argument><expr><name>firstContinuation</name></expr></argument>, <argument><expr>"illegal state in continuation chain."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>firstContinuation</name></expr>;</return>
}</block></function>

<function><type><name>nsIFrame</name>*</type> <name><name>nsSplittableFrame</name>::<name>GetLastContinuation</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <decl_stmt><decl><type><name>nsSplittableFrame</name>*</type> <name>lastContinuation</name> <init>= <expr><call><name><name>const_cast</name><argument_list>&lt;<argument><expr><name>nsSplittableFrame</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>lastContinuation</name>-&gt;<name>mNextContinuation</name></name></expr>)</condition>  <block>{
    <expr_stmt><expr><name>lastContinuation</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsSplittableFrame</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>lastContinuation</name>-&gt;<name>mNextContinuation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
  <expr_stmt><expr><call><name>NS_POSTCONDITION</name><argument_list>(<argument><expr><name>lastContinuation</name></expr></argument>, <argument><expr>"illegal state in continuation chain."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>lastContinuation</name></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<function><type><name>PRBool</name></type> <name><name>nsSplittableFrame</name>::<name>IsInPrevContinuationChain</name></name><parameter_list>(<param><decl><type><name>nsIFrame</name>*</type> <name>aFrame1</name></decl></param>, <param><decl><type><name>nsIFrame</name>*</type> <name>aFrame2</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>iterations</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>aFrame1</name> &amp;&amp; <name>iterations</name> &lt; 10</expr>)</condition> <block>{
    <comment type="line">// Bail out after 10 iterations so we don't bog down debug builds too much</comment>
    <if>if <condition>(<expr><name>aFrame1</name> == <name>aFrame2</name></expr>)</condition><then>
      <return>return <expr><name>PR_TRUE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>aFrame1</name> = <call><name><name>aFrame1</name>-&gt;<name>GetPrevContinuation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>++<name>iterations</name></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type> <name><name>nsSplittableFrame</name>::<name>IsInNextContinuationChain</name></name><parameter_list>(<param><decl><type><name>nsIFrame</name>*</type> <name>aFrame1</name></decl></param>, <param><decl><type><name>nsIFrame</name>*</type> <name>aFrame2</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>iterations</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>aFrame1</name> &amp;&amp; <name>iterations</name> &lt; 10</expr>)</condition> <block>{
    <comment type="line">// Bail out after 10 iterations so we don't bog down debug builds too much</comment>
    <if>if <condition>(<expr><name>aFrame1</name> == <name>aFrame2</name></expr>)</condition><then>
      <return>return <expr><name>PR_TRUE</name></expr>;</return></then></if>
    <expr_stmt><expr><name>aFrame1</name> = <call><name><name>aFrame1</name>-&gt;<name>GetNextContinuation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>++<name>iterations</name></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>nsIFrame</name>*</type> <name><name>nsSplittableFrame</name>::<name>GetPrevInFlow</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr>(<call><name>GetStateBits</name><argument_list>()</argument_list></call> &amp; <name>NS_FRAME_IS_FLUID_CONTINUATION</name>) ? <name>mPrevContinuation</name> : <name>nsnull</name></expr>;</return>
}</block></function>

<function><type><name>NS_METHOD</name></type> <name><name>nsSplittableFrame</name>::<name>SetPrevInFlow</name></name><parameter_list>(<param><decl><type><name>nsIFrame</name>*</type> <name>aFrame</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name> <argument_list>(<argument><expr>!<name>aFrame</name> || <call><name>GetType</name><argument_list>()</argument_list></call> == <call><name><name>aFrame</name>-&gt;<name>GetType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"setting a prev in flow with incorrect type!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name> <argument_list>(<argument><expr>!<call><name>IsInPrevContinuationChain</name><argument_list>(<argument><expr><name>aFrame</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"creating a loop in continuation chain!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mPrevContinuation</name> = <name>aFrame</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddStateBits</name><argument_list>(<argument><expr><name>NS_FRAME_IS_FLUID_CONTINUATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsIFrame</name>*</type> <name><name>nsSplittableFrame</name>::<name>GetNextInFlow</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><name>mNextContinuation</name> &amp;&amp; (<call><name><name>mNextContinuation</name>-&gt;<name>GetStateBits</name></name><argument_list>()</argument_list></call> &amp; <name>NS_FRAME_IS_FLUID_CONTINUATION</name>) ? 
    <name>mNextContinuation</name> : <name>nsnull</name></expr>;</return>
}</block></function>

<function><type><name>NS_METHOD</name></type> <name><name>nsSplittableFrame</name>::<name>SetNextInFlow</name></name><parameter_list>(<param><decl><type><name>nsIFrame</name>*</type> <name>aFrame</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>NS_ASSERTION</name> <argument_list>(<argument><expr>!<name>aFrame</name> || <call><name>GetType</name><argument_list>()</argument_list></call> == <call><name><name>aFrame</name>-&gt;<name>GetType</name></name><argument_list>()</argument_list></call></expr></argument>,  <argument><expr>"setting a next in flow with incorrect type!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name> <argument_list>(<argument><expr>!<call><name>IsInNextContinuationChain</name><argument_list>(<argument><expr><name>aFrame</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"creating a loop in continuation chain!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mNextContinuation</name> = <name>aFrame</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>aFrame</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>aFrame</name>-&gt;<name>AddStateBits</name></name><argument_list>(<argument><expr><name>NS_FRAME_IS_FLUID_CONTINUATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsIFrame</name>*</type> <name><name>nsSplittableFrame</name>::<name>GetFirstInFlow</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <decl_stmt><decl><type><name>nsSplittableFrame</name>*</type> <name>firstInFlow</name> <init>= <expr><call><name><name>const_cast</name><argument_list>&lt;<argument><expr><name>nsSplittableFrame</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<decl><type><name>nsIFrame</name> *</type><name>prev</name> <init>= <expr><call><name><name>firstInFlow</name>-&gt;<name>GetPrevInFlow</name></name><argument_list>()</argument_list></call></expr></init></decl>)</condition>  <block>{
    <expr_stmt><expr><name>firstInFlow</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsSplittableFrame</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
  <expr_stmt><expr><call><name>NS_POSTCONDITION</name><argument_list>(<argument><expr><name>firstInFlow</name></expr></argument>, <argument><expr>"illegal state in flow chain."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>firstInFlow</name></expr>;</return>
}</block></function>

<function><type><name>nsIFrame</name>*</type> <name><name>nsSplittableFrame</name>::<name>GetLastInFlow</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <decl_stmt><decl><type><name>nsSplittableFrame</name>*</type> <name>lastInFlow</name> <init>= <expr><call><name><name>const_cast</name><argument_list>&lt;<argument><expr><name>nsSplittableFrame</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<decl><type><name>nsIFrame</name>*</type> <name>next</name> <init>= <expr><call><name><name>lastInFlow</name>-&gt;<name>GetNextInFlow</name></name><argument_list>()</argument_list></call></expr></init></decl>)</condition>  <block>{
    <expr_stmt><expr><name>lastInFlow</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsSplittableFrame</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
  <expr_stmt><expr><call><name>NS_POSTCONDITION</name><argument_list>(<argument><expr><name>lastInFlow</name></expr></argument>, <argument><expr>"illegal state in flow chain."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>lastInFlow</name></expr>;</return>
}</block></function>

<comment type="line">// Remove this frame from the flow. Connects prev in flow and next in flow</comment>
<function><type><name>void</name></type>
<name><name>nsSplittableFrame</name>::<name>RemoveFromFlow</name></name><parameter_list>(<param><decl><type><name>nsIFrame</name>*</type> <name>aFrame</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>prevContinuation</name> <init>= <expr><call><name><name>aFrame</name>-&gt;<name>GetPrevContinuation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsIFrame</name>*</type> <name>nextContinuation</name> <init>= <expr><call><name><name>aFrame</name>-&gt;<name>GetNextContinuation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// The new continuation is fluid only if the continuation on both sides</comment>
  <comment type="line">// of the removed frame was fluid</comment>
  <if>if <condition>(<expr><call><name><name>aFrame</name>-&gt;<name>GetPrevInFlow</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>aFrame</name>-&gt;<name>GetNextInFlow</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>prevContinuation</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>prevContinuation</name>-&gt;<name>SetNextInFlow</name></name><argument_list>(<argument><expr><name>nextContinuation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>nextContinuation</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>nextContinuation</name>-&gt;<name>SetPrevInFlow</name></name><argument_list>(<argument><expr><name>prevContinuation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then> <else>else <block>{
    <if>if <condition>(<expr><name>prevContinuation</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>prevContinuation</name>-&gt;<name>SetNextContinuation</name></name><argument_list>(<argument><expr><name>nextContinuation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>nextContinuation</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>nextContinuation</name>-&gt;<name>SetPrevContinuation</name></name><argument_list>(<argument><expr><name>prevContinuation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></else></if>

  <expr_stmt><expr><call><name><name>aFrame</name>-&gt;<name>SetPrevInFlow</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>aFrame</name>-&gt;<name>SetNextInFlow</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<function><type><name>void</name></type>
<name><name>nsSplittableFrame</name>::<name>DumpBaseRegressionData</name></name><parameter_list>(<param><decl><type><name>nsPresContext</name>*</type> <name>aPresContext</name></decl></param>, <param><decl><type><name>FILE</name>*</type> <name>out</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aIndent</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>nsFrame</name>::<name>DumpBaseRegressionData</name></name><argument_list>(<argument><expr><name>aPresContext</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>aIndent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>nsnull</name> != <name>mNextContinuation</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>IndentBy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>aIndent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"&lt;next-continuation va=\"%ld\"/&gt;\n"</expr></argument>, <argument><expr><call><name>PRUptrdiff</name><argument_list>(<argument><expr><name>mNextContinuation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr><name>nsnull</name> != <name>mPrevContinuation</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>IndentBy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>aIndent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"&lt;prev-continuation va=\"%ld\"/&gt;\n"</expr></argument>, <argument><expr><call><name>PRUptrdiff</name><argument_list>(<argument><expr><name>mPrevContinuation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
