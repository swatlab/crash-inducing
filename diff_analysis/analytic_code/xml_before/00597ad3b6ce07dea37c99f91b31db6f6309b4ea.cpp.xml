<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="00597ad3b6ce07dea37c99f91b31db6f6309b4ea.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Chris Waterson &lt;waterson@netscape.com&gt;
 *   Brendan Eich &lt;brendan@mozilla.org&gt;
 *   Ben Goodger &lt;ben@netscape.com&gt;
 *   Benjamin Smedberg &lt;bsmedberg@covad.net&gt;
 *   Mark Hammond &lt;mhammond@skippinet.com.au&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsXULPrototypeCache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsContentUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plstr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsXULPrototypeDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsICSSStyleSheet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptRuntime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIServiceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIURI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIXBLDocumentInfo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIChromeRegistry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFastLoadService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFastLoadFileControl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIObjectInputStream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIObjectOutputStream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIObserverService.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNetUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAppDirectoryServiceDefs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsxdrapi.h"</cpp:file></cpp:include>

<expr_stmt><expr>static <call><name>NS_DEFINE_CID</name><argument_list>(<argument><expr><name>kXULPrototypeCacheCID</name></expr></argument>, <argument><expr><name>NS_XULPROTOTYPECACHE_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PRBool</name></type> <name>gDisableXULCache</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt> <comment type="line">// enabled by default</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>kDisableXULCachePref</name><index>[]</index></name> <init>= <expr>"nglayout.debug.disable_xul_cache"</expr></init></decl>;</decl_stmt>

<comment type="line">//----------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>DisableXULCacheChangedCallback</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>aPref</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aClosure</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>gDisableXULCache</name> =
        <call><name><name>nsContentUtils</name>::<name>GetBoolPref</name></name><argument_list>(<argument><expr><name>kDisableXULCachePref</name></expr></argument>, <argument><expr><name>gDisableXULCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Flush the cache, regardless</comment>
    <decl_stmt><decl><type><name>nsXULPrototypeCache</name>*</type> <name>cache</name> <init>= <expr><call><name><name>nsXULPrototypeCache</name>::<name>GetInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>cache</name></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>cache</name>-&gt;<name>Flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="line">//----------------------------------------------------------------------</comment>


<decl_stmt><decl><type><name>nsIFastLoadService</name>*</type>   <name><name>nsXULPrototypeCache</name>::<name>gFastLoadService</name></name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nsIFile</name>*</type>              <name><name>nsXULPrototypeCache</name>::<name>gFastLoadFile</name></name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nsXULPrototypeCache</name>*</type>  <name><name>nsXULPrototypeCache</name>::<name>sInstance</name></name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>


<constructor><name><name>nsXULPrototypeCache</name>::<name>nsXULPrototypeCache</name></name><parameter_list>()</parameter_list>
<block>{
}</block></constructor>


<destructor><name><name>nsXULPrototypeCache</name>::~<name>nsXULPrototypeCache</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>FlushScripts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>NS_IF_RELEASE</name><argument_list>(<argument><expr><name>gFastLoadService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// don't need ReleaseService nowadays!</comment>
    <expr_stmt><expr><call><name>NS_IF_RELEASE</name><argument_list>(<argument><expr><name>gFastLoadFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></destructor>


<macro><name>NS_IMPL_THREADSAFE_ISUPPORTS2</name><argument_list>(<argument>nsXULPrototypeCache</argument>,
                              <argument>nsIXULPrototypeCache</argument>,
                              <argument>nsIObserver</argument>)</argument_list></macro>


<function><type><name>NS_IMETHODIMP</name></type>
<name>NS_NewXULPrototypeCache</name><parameter_list>(<param><decl><type><name>nsISupports</name>*</type> <name>aOuter</name></decl></param>, <param><decl><type><name>REFNSIID</name></type> <name>aIID</name></decl></param>, <param><decl><type><name>void</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>NS_PRECONDITION</name><argument_list>(<argument><expr>! <name>aOuter</name></expr></argument>, <argument><expr>"no aggregation"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>aOuter</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_NO_AGGREGATION</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsXULPrototypeCache</name></expr></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr>new <call><name>nsXULPrototypeCache</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>! <name>result</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!(<call><name><name>result</name>-&gt;<name>mPrototypeTable</name>.<name>Init</name></name><argument_list>()</argument_list></call> &amp;&amp;
          <call><name><name>result</name>-&gt;<name>mStyleSheetTable</name>.<name>Init</name></name><argument_list>()</argument_list></call> &amp;&amp;
          <call><name><name>result</name>-&gt;<name>mScriptTable</name>.<name>Init</name></name><argument_list>()</argument_list></call> &amp;&amp;
          <call><name><name>result</name>-&gt;<name>mXBLDocTable</name>.<name>Init</name></name><argument_list>()</argument_list></call> &amp;&amp;
          <call><name><name>result</name>-&gt;<name>mFastLoadURITable</name>.<name>Init</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// XXX Ignore return values.</comment>
    <expr_stmt><expr><name>gDisableXULCache</name> =
        <call><name><name>nsContentUtils</name>::<name>GetBoolPref</name></name><argument_list>(<argument><expr><name>kDisableXULCachePref</name></expr></argument>, <argument><expr><name>gDisableXULCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>RegisterPrefCallback</name></name><argument_list>(<argument><expr><name>kDisableXULCachePref</name></expr></argument>,
                                         <argument><expr><name>DisableXULCacheChangedCallback</name></expr></argument>,
                                         <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>result</name>-&gt;<name>QueryInterface</name></name><argument_list>(<argument><expr><name>aIID</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIObserverService</name></expr></argument>&gt;</argument_list></name></type> <name>obsSvc</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/observer-service;1"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>obsSvc</name> &amp;&amp; <call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>nsXULPrototypeCache</name> *</type><name>p</name> <init>= <expr><name>result</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>obsSvc</name>-&gt;<name>AddObserver</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"chrome-flush-skin-caches"</expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>obsSvc</name>-&gt;<name>AddObserver</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"chrome-flush-caches"</expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<comment type="block">/* static */</comment> <function><type><name>nsXULPrototypeCache</name>*</type>
<name><name>nsXULPrototypeCache</name>::<name>GetInstance</name></name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">// Theoretically this can return nsnull and callers should handle that.</comment>
    <if>if <condition>(<expr>!<name>sInstance</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>nsIXULPrototypeCache</name>*</type> <name>cache</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>CallGetService</name><argument_list>(<argument><expr><name>kXULPrototypeCacheCID</name></expr></argument>, <argument><expr>&amp;<name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>sInstance</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsXULPrototypeCache</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>sInstance</name></expr>;</return>
}</block></function>

<comment type="block">/* static */</comment> <function><type><name>nsIFastLoadService</name>*</type>
<name><name>nsXULPrototypeCache</name>::<name>GetFastLoadService</name></name><parameter_list>()</parameter_list>
<block>{
    <return>return <expr><name>gFastLoadService</name></expr>;</return>
}</block></function>

<comment type="line">//----------------------------------------------------------------------</comment>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsXULPrototypeCache</name>::<name>Observe</name></name><parameter_list>(<param><decl><type><name>nsISupports</name>*</type> <name>aSubject</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aTopic</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>PRUnichar</name> *</type><name>aData</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>aTopic</name></expr></argument>, <argument><expr>"chrome-flush-skin-caches"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>FlushSkinFiles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>aTopic</name></expr></argument>, <argument><expr>"chrome-flush-caches"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>Flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"Unexpected observer topic."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsXULPrototypeDocument</name>*</type>
<name><name>nsXULPrototypeCache</name>::<name>GetPrototype</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nsXULPrototypeDocument</name>*</type> <name>protoDoc</name> <init>= <expr><call><name><name>mPrototypeTable</name>.<name>GetWeak</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>protoDoc</name></expr>)</condition><then> <block>{
        <comment type="line">// No prototype in XUL memory cache. Spin up FastLoad Service and</comment>
        <comment type="line">// look in FastLoad file.</comment>
        <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>StartFastLoad</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIObjectInputStream</name></expr></argument>&gt;</argument_list></name></type> <name>objectInput</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>gFastLoadService</name>-&gt;<name>GetInputStream</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>objectInput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>rv</name> = <call><name>StartFastLoadingURI</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><name><name>nsIFastLoadService</name>::<name>NS_FASTLOAD_READ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>oldURI</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>gFastLoadService</name>-&gt;<name>SelectMuxedDocument</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>oldURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Create a new prototype document.</comment>
                <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>nsXULPrototypeDocument</name></expr></argument>&gt;</argument_list></name></type> <name>newProto</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>rv</name> = <call><name>NS_NewXULPrototypeDocument</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>newProto</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>nsnull</name></expr>;</return></then></if>

                <expr_stmt><expr><name>rv</name> = <call><name><name>newProto</name>-&gt;<name>Read</name></name><argument_list>(<argument><expr><name>objectInput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>rv</name> = <call><name>PutPrototype</name><argument_list>(<argument><expr><name>newProto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                        <expr_stmt><expr><name>newProto</name> = <name>nsnull</name></expr>;</expr_stmt></then></if>

                    <expr_stmt><expr><call><name><name>gFastLoadService</name>-&gt;<name>EndMuxedDocument</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>newProto</name> = <name>nsnull</name></expr>;</expr_stmt>
                }</block></else></if>

                <expr_stmt><expr><call><name>RemoveFromFastLoadSet</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>protoDoc</name> = <name>newProto</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></then></if>
    <return>return <expr><name>protoDoc</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsXULPrototypeCache</name>::<name>PutPrototype</name></name><parameter_list>(<param><decl><type><name>nsXULPrototypeDocument</name>*</type> <name>aDocument</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name> <init>= <expr><call><name><name>aDocument</name>-&gt;<name>GetURI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// Put() releases any old value and addrefs the new one</comment>
    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><call><name><name>mPrototypeTable</name>.<name>Put</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>aDocument</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsXULPrototypeCache</name>::<name>PutStyleSheet</name></name><parameter_list>(<param><decl><type><name>nsICSSStyleSheet</name>*</type> <name>aStyleSheet</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>aStyleSheet</name>-&gt;<name>GetSheetURI</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>

   <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><call><name><name>mStyleSheetTable</name>.<name>Put</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>aStyleSheet</name></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<function><type><name>void</name>*</type>
<name><name>nsXULPrototypeCache</name>::<name>GetScript</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>, <param><decl><type><name>PRUint32</name> *</type><name>aLangID</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>CacheScriptEntry</name></type> <name>entry</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name><name>mScriptTable</name>.<name>Get</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>aLangID</name> = <name><name>nsIProgrammingLanguage</name>::<name>UNKNOWN</name></name></expr>;</expr_stmt>
        <return>return <expr><name>nsnull</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr>*<name>aLangID</name> = <name><name>entry</name>.<name>mScriptTypeID</name></name></expr>;</expr_stmt>
    <return>return <expr><name><name>entry</name>.<name>mScriptObject</name></name></expr>;</return>
}</block></function>


<comment type="block">/* static */</comment>
<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>ReleaseScriptObjectCallback</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aKey</name></decl></param>, <param><decl><type><name>CacheScriptEntry</name> &amp;</type><name>aData</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aClosure</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScriptRuntime</name></expr></argument>&gt;</argument_list></name></type> <name>rt</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name>NS_GetScriptRuntimeByID</name><argument_list>(<argument><expr><name><name>aData</name>.<name>mScriptTypeID</name></name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>rt</name>-&gt;<name>DropScriptObject</name></name><argument_list>(<argument><expr><name><name>aData</name>.<name>mScriptObject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>PL_DHASH_REMOVE</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsXULPrototypeCache</name>::<name>PutScript</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLangID</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aScriptObject</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>CacheScriptEntry</name></type> <name>existingEntry</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>mScriptTable</name>.<name>Get</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr>&amp;<name>existingEntry</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"loaded the same script twice (bug 392650)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Reuse the callback used for enumeration in FlushScripts</comment>
        <expr_stmt><expr><call><name>ReleaseScriptObjectCallback</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><name>existingEntry</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>CacheScriptEntry</name></type> <name>entry</name> <init>= <expr><block>{<expr><name>aLangID</name></expr>, <expr><name>aScriptObject</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><call><name><name>mScriptTable</name>.<name>Put</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Lock the object from being gc'd until it is removed from the cache</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScriptRuntime</name></expr></argument>&gt;</argument_list></name></type> <name>rt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_GetScriptRuntimeByID</name><argument_list>(<argument><expr><name>aLangID</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>rv</name> = <call><name><name>rt</name>-&gt;<name>HoldScriptObject</name></name><argument_list>(<argument><expr><name>aScriptObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"Failed to GC lock the object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// On failure doing the lock, we should remove the map entry?</comment>
    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsXULPrototypeCache</name>::<name>FlushScripts</name></name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">// This callback will unlock each object so it can once again be gc'd.</comment>
    <comment type="line">// XXX - this might be slow - we fetch the runtime each and every object.</comment>
    <expr_stmt><expr><call><name><name>mScriptTable</name>.<name>Enumerate</name></name><argument_list>(<argument><expr><name>ReleaseScriptObjectCallback</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name>nsresult</name></type>
<name><name>nsXULPrototypeCache</name>::<name>PutXBLDocumentInfo</name></name><parameter_list>(<param><decl><type><name>nsIXBLDocumentInfo</name>*</type> <name>aDocumentInfo</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nsIURI</name>*</type> <name>uri</name> <init>= <expr><call><name><name>aDocumentInfo</name>-&gt;<name>DocumentURI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXBLDocumentInfo</name></expr></argument>&gt;</argument_list></name></type> <name>info</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mXBLDocTable</name>.<name>Get</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>info</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><call><name><name>mXBLDocTable</name>.<name>Put</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>aDocumentInfo</name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>FlushSkinXBL</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aKey</name></decl></param>, <param><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXBLDocumentInfo</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aDocInfo</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aClosure</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>str</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aKey</name>-&gt;<name>GetPath</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PLDHashOperator</name></type> <name>ret</name> <init>= <expr><name>PL_DHASH_NEXT</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><call><name><name>str</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"/skin"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>ret</name> = <name>PL_DHASH_REMOVE</name></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>FlushSkinSheets</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aKey</name></decl></param>, <param><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsICSSStyleSheet</name></expr></argument>&gt;</argument_list></name>&amp;</type> <name>aSheet</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aClosure</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aSheet</name>-&gt;<name>GetSheetURI</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>str</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>uri</name>-&gt;<name>GetPath</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PLDHashOperator</name></type> <name>ret</name> <init>= <expr><name>PL_DHASH_NEXT</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><call><name><name>str</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"/skin"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// This is a skin binding. Add the key to the list.</comment>
    <expr_stmt><expr><name>ret</name> = <name>PL_DHASH_REMOVE</name></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>FlushScopedSkinStylesheets</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aKey</name></decl></param>, <param><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXBLDocumentInfo</name></expr></argument>&gt;</argument_list></name> &amp;</type><name>aDocInfo</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aClosure</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>aDocInfo</name>-&gt;<name>FlushSkinStylesheets</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PL_DHASH_NEXT</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsXULPrototypeCache</name>::<name>FlushSkinFiles</name></name><parameter_list>()</parameter_list>
<block>{
  <comment type="line">// Flush out skin XBL files from the cache.</comment>
  <expr_stmt><expr><call><name><name>mXBLDocTable</name>.<name>Enumerate</name></name><argument_list>(<argument><expr><name>FlushSkinXBL</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Now flush out our skin stylesheets from the cache.</comment>
  <expr_stmt><expr><call><name><name>mStyleSheetTable</name>.<name>Enumerate</name></name><argument_list>(<argument><expr><name>FlushSkinSheets</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Iterate over all the remaining XBL and make sure cached</comment>
  <comment type="line">// scoped skin stylesheets are flushed and refetched by the</comment>
  <comment type="line">// prototype bindings.</comment>
  <expr_stmt><expr><call><name><name>mXBLDocTable</name>.<name>Enumerate</name></name><argument_list>(<argument><expr><name>FlushScopedSkinStylesheets</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name>void</name></type>
<name><name>nsXULPrototypeCache</name>::<name>Flush</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>mPrototypeTable</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Clear the script cache, as it refers to prototype-owned mJSObjects.</comment>
    <expr_stmt><expr><call><name>FlushScripts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>mStyleSheetTable</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mXBLDocTable</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name>PRBool</name></type>
<name><name>nsXULPrototypeCache</name>::<name>IsEnabled</name></name><parameter_list>()</parameter_list>
<block>{
    <return>return <expr>!<name>gDisableXULCache</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PRBool</name></type> <name>gDisableXULFastLoad</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>           <comment type="line">// enabled by default</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PRBool</name></type> <name>gChecksumXULFastLoadFile</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl>;</decl_stmt>       <comment type="line">// XXXbe too paranoid</comment>

<function><type><name>void</name></type>
<name><name>nsXULPrototypeCache</name>::<name>AbortFastLoads</name></name><parameter_list>()</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_brendan</name></cpp:ifdef>
    <expr_stmt><expr><call><name>NS_BREAK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// Save a strong ref to the FastLoad file, so we can remove it after we</comment>
    <comment type="line">// close open streams to it.</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name></type> <name>file</name> <init>= <expr><name>gFastLoadFile</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Flush the XUL cache for good measure, in case we cached a bogus/downrev</comment>
    <comment type="line">// script, somehow.</comment>
    <expr_stmt><expr><call><name>Flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Clear the FastLoad set</comment>
    <expr_stmt><expr><call><name><name>mFastLoadURITable</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>! <name>gFastLoadService</name></expr>)</condition><then>
        <return>return;</return></then></if>

    <comment type="line">// Fetch the current input (if FastLoad file existed) or output (if we're</comment>
    <comment type="line">// creating the FastLoad file during this app startup) stream.</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIObjectInputStream</name></expr></argument>&gt;</argument_list></name></type> <name>objectInput</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIObjectOutputStream</name></expr></argument>&gt;</argument_list></name></type> <name>objectOutput</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>gFastLoadService</name>-&gt;<name>GetInputStream</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>objectInput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gFastLoadService</name>-&gt;<name>GetOutputStream</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>objectOutput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>objectOutput</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>gFastLoadService</name>-&gt;<name>SetOutputStream</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>objectOutput</name>-&gt;<name>Close</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>gChecksumXULFastLoadFile</name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>gFastLoadService</name>-&gt;<name>CacheChecksum</name></name><argument_list>(<argument><expr><name>gFastLoadFile</name></expr></argument>,
                                            <argument><expr><name>objectOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>objectInput</name></expr>)</condition><then> <block>{
        <comment type="line">// If this is the last of one or more XUL master documents loaded</comment>
        <comment type="line">// together at app startup, close the FastLoad service's singleton</comment>
        <comment type="line">// input stream now.</comment>
        <expr_stmt><expr><call><name><name>gFastLoadService</name>-&gt;<name>SetInputStream</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>objectInput</name>-&gt;<name>Close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">// Now rename or remove the file.</comment>
    <if>if <condition>(<expr><name>file</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
        <comment type="line">// Remove any existing Aborted.mfasl files generated in previous runs.</comment>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name></type> <name>existingAbortedFile</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>file</name>-&gt;<name>Clone</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>existingAbortedFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>existingAbortedFile</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>existingAbortedFile</name>-&gt;<name>SetLeafName</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"Aborted.mfasl"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>PRBool</name></type> <name>fileExists</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>existingAbortedFile</name>-&gt;<name>Exists</name></name><argument_list>(<argument><expr>&amp;<name>fileExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>fileExists</name></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>existingAbortedFile</name>-&gt;<name>Remove</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>file</name>-&gt;<name>MoveToNative</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"Aborted.mfasl"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name><name>file</name>-&gt;<name>Remove</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then></if>

    <comment type="line">// If the list is empty now, the FastLoad process is done.</comment>
    <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name>gFastLoadService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name>gFastLoadFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name>void</name></type>
<name><name>nsXULPrototypeCache</name>::<name>RemoveFromFastLoadSet</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>mFastLoadURITable</name>.<name>Remove</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>kDisableXULFastLoadPref</name><index>[]</index></name> <init>= <expr>"nglayout.debug.disable_xul_fastload"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>kChecksumXULFastLoadFilePref</name><index>[]</index></name> <init>= <expr>"nglayout.debug.checksum_xul_fastload_file"</expr></init></decl>;</decl_stmt>

<function><type><name>nsresult</name></type>
<name><name>nsXULPrototypeCache</name>::<name>WritePrototype</name></name><parameter_list>(<param><decl><type><name>nsXULPrototypeDocument</name>*</type> <name>aPrototypeDocument</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init>, <name>rv2</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// We're here before the FastLoad service has been initialized, probably because</comment>
    <comment type="line">// of the profile manager. Bail quietly, don't worry, we'll be back later.</comment>
    <if>if <condition>(<expr>! <name>gFastLoadService</name></expr>)</condition><then>
        <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

    <comment type="line">// Fetch the current input (if FastLoad file existed) or output (if we're</comment>
    <comment type="line">// creating the FastLoad file during this app startup) stream.</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIObjectInputStream</name></expr></argument>&gt;</argument_list></name></type> <name>objectInput</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIObjectOutputStream</name></expr></argument>&gt;</argument_list></name></type> <name>objectOutput</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>gFastLoadService</name>-&gt;<name>GetInputStream</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>objectInput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gFastLoadService</name>-&gt;<name>GetOutputStream</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>objectOutput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>protoURI</name> <init>= <expr><call><name><name>aPrototypeDocument</name>-&gt;<name>GetURI</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Remove this document from the FastLoad table. We use the table's</comment>
    <comment type="line">// emptiness instead of a counter to decide when the FastLoad process</comment>
    <comment type="line">// has completed. When complete, we can write footer details to the</comment>
    <comment type="line">// FastLoad file.</comment>
    <expr_stmt><expr><call><name>RemoveFromFastLoadSet</name><argument_list>(<argument><expr><name>protoURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PRInt32</name></type> <name>count</name> <init>= <expr><call><name><name>mFastLoadURITable</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>objectOutput</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>StartFastLoadingURI</name><argument_list>(<argument><expr><name>protoURI</name></expr></argument>, <argument><expr><name><name>nsIFastLoadService</name>::<name>NS_FASTLOAD_WRITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// Re-select the URL of the current prototype, as out-of-line script loads</comment>
            <comment type="line">// may have changed</comment>
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>oldURI</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>gFastLoadService</name>-&gt;<name>SelectMuxedDocument</name></name><argument_list>(<argument><expr><name>protoURI</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>oldURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>aPrototypeDocument</name>-&gt;<name>Write</name></name><argument_list>(<argument><expr><name>objectOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>gFastLoadService</name>-&gt;<name>EndMuxedDocument</name></name><argument_list>(<argument><expr><name>protoURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// If this is the last of one or more XUL master documents loaded</comment>
        <comment type="line">// together at app startup, close the FastLoad service's singleton</comment>
        <comment type="line">// output stream now.</comment>
        <comment type="line">//</comment>
        <comment type="line">// NB: we must close input after output, in case the output stream</comment>
        <comment type="line">// implementation needs to read from the input stream, to compute a</comment>
        <comment type="line">// FastLoad file checksum.  In that case, the implementation used</comment>
        <comment type="line">// nsIFastLoadFileIO to get the corresponding input stream for this</comment>
        <comment type="line">// output stream.</comment>
        <if>if <condition>(<expr><name>count</name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>gFastLoadService</name>-&gt;<name>SetOutputStream</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rv</name> = <call><name><name>objectOutput</name>-&gt;<name>Close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; <name>gChecksumXULFastLoadFile</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>rv</name> = <call><name><name>gFastLoadService</name>-&gt;<name>CacheChecksum</name></name><argument_list>(<argument><expr><name>gFastLoadFile</name></expr></argument>,
                                                     <argument><expr><name>objectOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>objectInput</name></expr>)</condition><then> <block>{
        <comment type="line">// If this is the last of one or more XUL master documents loaded</comment>
        <comment type="line">// together at app startup, close the FastLoad service's singleton</comment>
        <comment type="line">// input stream now.</comment>
        <if>if <condition>(<expr><name>count</name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>gFastLoadService</name>-&gt;<name>SetInputStream</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rv2</name> = <call><name><name>objectInput</name>-&gt;<name>Close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <comment type="line">// If the list is empty now, the FastLoad process is done.</comment>
    <if>if <condition>(<expr><name>count</name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name>gFastLoadService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_RELEASE</name><argument_list>(<argument><expr><name>gFastLoadFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> ? <name>rv</name> : <name>rv2</name></expr>;</return>
}</block></function>


<function><type><name>nsresult</name></type>
<name><name>nsXULPrototypeCache</name>::<name>StartFastLoadingURI</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>aDirectionFlags</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>urlspec</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>aURI</name>-&gt;<name>GetAsciiSpec</name></name><argument_list>(<argument><expr><name>urlspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>rv</name></expr>;</return></then></if>

    <comment type="line">// If StartMuxedDocument returns NS_ERROR_NOT_AVAILABLE, then</comment>
    <comment type="line">// we must be reading the file, and urlspec was not associated</comment>
    <comment type="line">// with any multiplexed stream in it.  The FastLoad service</comment>
    <comment type="line">// will therefore arrange to update the file, writing new data</comment>
    <comment type="line">// at the end while old (available) data continues to be read</comment>
    <comment type="line">// from the pre-existing part of the file.</comment>
    <return>return <expr><call><name><name>gFastLoadService</name>-&gt;<name>StartMuxedDocument</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr><call><name><name>urlspec</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>aDirectionFlags</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>FastLoadPrefChangedCallback</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>aPref</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>aClosure</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PRBool</name></type> <name>wasEnabled</name> <init>= <expr>!<name>gDisableXULFastLoad</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>gDisableXULFastLoad</name> =
        <call><name><name>nsContentUtils</name>::<name>GetBoolPref</name></name><argument_list>(<argument><expr><name>kDisableXULFastLoadPref</name></expr></argument>,
                                    <argument><expr><name>gDisableXULFastLoad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>wasEnabled</name> &amp;&amp; <name>gDisableXULFastLoad</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>static <call><name>NS_DEFINE_CID</name><argument_list>(<argument><expr><name>kXULPrototypeCacheCID</name></expr></argument>, <argument><expr><name>NS_XULPROTOTYPECACHE_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXULPrototypeCache</name></expr></argument>&gt;</argument_list></name></type> <name>cache</name> <init>=
            <expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>kXULPrototypeCacheCID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>cache</name></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>cache</name>-&gt;<name>AbortFastLoads</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

    <expr_stmt><expr><name>gChecksumXULFastLoadFile</name> =
        <call><name><name>nsContentUtils</name>::<name>GetBoolPref</name></name><argument_list>(<argument><expr><name>kChecksumXULFastLoadFilePref</name></expr></argument>,
                                    <argument><expr><name>gChecksumXULFastLoadFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr>0</expr>;</return>
}</block></function>


<class>class <name>nsXULFastLoadFileIO</name> <super>: <specifier>public</specifier> <name>nsIFastLoadFileIO</name></super>
<block>{<private type="default">
  </private><public>public:
    <constructor><name>nsXULFastLoadFileIO</name><parameter_list>(<param><decl><type><name>nsIFile</name>*</type> <name>aFile</name></decl></param>)</parameter_list>
      <member_list>: <call><name>mFile</name><argument_list>(<argument><expr><name>aFile</name></expr></argument>)</argument_list></call>, <call><name>mTruncateOutputFile</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call> </member_list><block>{
    }</block></constructor>

    <destructor><specifier>virtual</specifier> <name>~<name>nsXULFastLoadFileIO</name></name><parameter_list>()</parameter_list> <block>{
    }</block></destructor>

    <decl_stmt><decl><type><name>NS_DECL_ISUPPORTS</name>
    <name>NS_DECL_NSIFASTLOADFILEIO</name>

    <name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name></type>         <name>mFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIInputStream</name></expr></argument>&gt;</argument_list></name></type>  <name>mInputStream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIOutputStream</name></expr></argument>&gt;</argument_list></name></type> <name>mOutputStream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>mTruncateOutputFile</name></decl>;</decl_stmt>
</public>}</block>;</class>


<macro><name>NS_IMPL_THREADSAFE_ISUPPORTS1</name><argument_list>(<argument>nsXULFastLoadFileIO</argument>, <argument>nsIFastLoadFileIO</argument>)</argument_list></macro>


<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsXULFastLoadFileIO</name>::<name>GetInputStream</name></name><parameter_list>(<param><decl><type><name>nsIInputStream</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>! <name>mInputStream</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIInputStream</name></expr></argument>&gt;</argument_list></name></type> <name>fileInput</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name>NS_NewLocalFileInputStream</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>fileInput</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>rv</name></expr>;</return></then></if>

        <expr_stmt><expr><name>rv</name> = <call><name>NS_NewBufferedInputStream</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mInputStream</name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><name>fileInput</name></expr></argument>,
                                       <argument><expr><name>XUL_DESERIALIZATION_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>rv</name></expr>;</return></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aResult</name> = <name>mInputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>


<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsXULFastLoadFileIO</name>::<name>GetOutputStream</name></name><parameter_list>(<param><decl><type><name>nsIOutputStream</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>! <name>mOutputStream</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PRInt32</name></type> <name>ioFlags</name> <init>= <expr><name>PR_WRONLY</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>mTruncateOutputFile</name></expr>)</condition><then>
            <expr_stmt><expr><name>ioFlags</name> |= <name>PR_CREATE_FILE</name> | <name>PR_TRUNCATE</name></expr>;</expr_stmt></then></if>

        <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIOutputStream</name></expr></argument>&gt;</argument_list></name></type> <name>fileOutput</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name>NS_NewLocalFileOutputStream</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>fileOutput</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mFile</name></expr></argument>,
                                         <argument><expr><name>ioFlags</name></expr></argument>, <argument><expr>0644</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>rv</name></expr>;</return></then></if>

        <expr_stmt><expr><name>rv</name> = <call><name>NS_NewBufferedOutputStream</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>mOutputStream</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><name>fileOutput</name></expr></argument>,
                                        <argument><expr><name>XUL_SERIALIZATION_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>rv</name></expr>;</return></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr>*<name>aResult</name> = <name>mOutputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsXULFastLoadFileIO</name>::<name>DisableTruncate</name></name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>mTruncateOutputFile</name> = false</expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsXULPrototypeCache</name>::<name>StartFastLoad</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>path</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>aURI</name>-&gt;<name>GetPath</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>StringEndsWith</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>".xul"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_NOT_AVAILABLE</name></expr>;</return></then></if>

    <comment type="line">// Test gFastLoadFile to decide whether this is the first nsXULDocument</comment>
    <comment type="line">// participating in FastLoad.  If gFastLoadFile is non-null, this document</comment>
    <comment type="line">// must not be first, but it can join the FastLoad process.  Examples of</comment>
    <comment type="line">// multiple master documents participating include hiddenWindow.xul and</comment>
    <comment type="line">// navigator.xul on the Mac, and multiple-app-component (e.g., mailnews</comment>
    <comment type="line">// and browser) startup due to command-line arguments.</comment>
    <comment type="line">//</comment>
    <comment type="line">// XXXbe we should attempt to update the FastLoad file after startup!</comment>
    <comment type="line">//</comment>
    <comment type="line">// XXXbe we do not yet use nsFastLoadPtrs, but once we do, we must keep</comment>
    <comment type="line">// the FastLoad input stream open for the life of the app.</comment>
    <if>if <condition>(<expr><name>gFastLoadService</name> &amp;&amp; <name>gFastLoadFile</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>mFastLoadURITable</name>.<name>Put</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>NS_OK</name></expr>;</return>
    }</block></then></if>

    <comment type="line">// Use a local to refer to the service till we're sure we succeeded, then</comment>
    <comment type="line">// commit to gFastLoadService.  Same for gFastLoadFile, which is used to</comment>
    <comment type="line">// delete the FastLoad file on abort.</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFastLoadService</name></expr></argument>&gt;</argument_list></name></type> <name>fastLoadService</name><argument_list>(<argument><expr><call><name>do_GetFastLoadService</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr>! <name>fastLoadService</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

    <expr_stmt><expr><name>gDisableXULFastLoad</name> =
        <call><name><name>nsContentUtils</name>::<name>GetBoolPref</name></name><argument_list>(<argument><expr><name>kDisableXULFastLoadPref</name></expr></argument>,
                                    <argument><expr><name>gDisableXULFastLoad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gChecksumXULFastLoadFile</name> =
        <call><name><name>nsContentUtils</name>::<name>GetBoolPref</name></name><argument_list>(<argument><expr><name>kChecksumXULFastLoadFilePref</name></expr></argument>,
                                    <argument><expr><name>gChecksumXULFastLoadFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>RegisterPrefCallback</name></name><argument_list>(<argument><expr><name>kDisableXULFastLoadPref</name></expr></argument>,
                                         <argument><expr><name>FastLoadPrefChangedCallback</name></expr></argument>,
                                         <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>nsContentUtils</name>::<name>RegisterPrefCallback</name></name><argument_list>(<argument><expr><name>kChecksumXULFastLoadFilePref</name></expr></argument>,
                                         <argument><expr><name>FastLoadPrefChangedCallback</name></expr></argument>,
                                         <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>gDisableXULFastLoad</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_NOT_AVAILABLE</name></expr>;</return></then></if>

    <comment type="line">// Get the chrome directory to validate against the one stored in the</comment>
    <comment type="line">// FastLoad file, or to store there if we're generating a new file.</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name></type> <name>chromeDir</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>NS_GetSpecialDirectory</name><argument_list>(<argument><expr><name>NS_APP_CHROME_DIR</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>chromeDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>chromePath</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>chromeDir</name>-&gt;<name>GetNativePath</name></name><argument_list>(<argument><expr><name>chromePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name></type> <name>file</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>fastLoadService</name>-&gt;<name>NewFastLoadFile</name></name><argument_list>(<argument><expr><name>XUL_FASTLOAD_FILE_BASENAME</name></expr></argument>,
                                          <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>

    <comment type="line">// Give the FastLoad service an object by which it can get or create a</comment>
    <comment type="line">// file output stream given an input stream on the same file.</comment>
    <decl_stmt><decl><type><name>nsXULFastLoadFileIO</name>*</type> <name>xio</name> <init>= <expr>new <call><name>nsXULFastLoadFileIO</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFastLoadFileIO</name></expr></argument>&gt;</argument_list></name></type> <name>io</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIFastLoadFileIO</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>xio</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>! <name>io</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name><name>fastLoadService</name>-&gt;<name>SetFileIO</name></name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXULChromeRegistry</name></expr></argument>&gt;</argument_list></name></type> <name>chromeReg</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_CHROMEREGISTRY_CONTRACTID</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>

    <comment type="line">// XXXbe we assume the first package's locale is the same as the locale of</comment>
    <comment type="line">// all subsequent packages of FastLoaded chrome URIs....</comment>
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>package</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>aURI</name>-&gt;<name>GetHost</name></name><argument_list>(<argument><expr><name>package</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>locale</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>chromeReg</name>-&gt;<name>GetSelectedLocale</name></name><argument_list>(<argument><expr><name>package</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>rv</name></expr>;</return></then></if>

    <comment type="line">// Try to read an existent FastLoad file.</comment>
    <decl_stmt><decl><type><name>PRBool</name></type> <name>exists</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>file</name>-&gt;<name>Exists</name></name><argument_list>(<argument><expr>&amp;<name>exists</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>exists</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIObjectInputStream</name></expr></argument>&gt;</argument_list></name></type> <name>objectInput</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name><name>fastLoadService</name>-&gt;<name>NewInputStream</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>objectInput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// Get the XUL fastload file version number, which should be</comment>
                <comment type="line">// decremented whenever the XUL-specific file format changes</comment>
                <comment type="line">// (see public/nsIXULPrototypeCache.h for the #define).</comment>
                <decl_stmt><decl><type><name>PRUint32</name></type> <name>xulFastLoadVersion</name></decl>, <decl><type ref="prev"/><name>jsByteCodeVersion</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>rv</name> = <call><name><name>objectInput</name>-&gt;<name>Read32</name></name><argument_list>(<argument><expr>&amp;<name>xulFastLoadVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rv</name> |= <call><name><name>objectInput</name>-&gt;<name>Read32</name></name><argument_list>(<argument><expr>&amp;<name>jsByteCodeVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>xulFastLoadVersion</name> != <name>XUL_FASTLOAD_FILE_VERSION</name> ||
                        <name>jsByteCodeVersion</name> != <name>JSXDR_BYTECODE_VERSION</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
                        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>(<name>xulFastLoadVersion</name> != <name>XUL_FASTLOAD_FILE_VERSION</name>)
                               ? "bad FastLoad file version\n"
                               : "bad JS bytecode version\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_UNEXPECTED</name></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>fileChromePath</name></decl>, <decl><type ref="prev"/><name>fileLocale</name></decl>;</decl_stmt>

                        <expr_stmt><expr><name>rv</name> = <call><name><name>objectInput</name>-&gt;<name>ReadCString</name></name><argument_list>(<argument><expr><name>fileChromePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rv</name> |= <call><name><name>objectInput</name>-&gt;<name>ReadCString</name></name><argument_list>(<argument><expr><name>fileLocale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp;
                            (!<call><name><name>fileChromePath</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>chromePath</name></expr></argument>)</argument_list></call> ||
                             !<call><name><name>fileLocale</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_UNEXPECTED</name></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></else></if>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>

        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>fastLoadService</name>-&gt;<name>SetInputStream</name></name><argument_list>(<argument><expr><name>objectInput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="line">// NB: we must close before attempting to remove, for non-Unix OSes</comment>
            <comment type="line">// that can't do open-unlink.</comment>
            <if>if <condition>(<expr><name>objectInput</name></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>objectInput</name>-&gt;<name>Close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><name><name>xio</name>-&gt;<name>mInputStream</name></name> = <name>nsnull</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
            <expr_stmt><expr><call><name><name>file</name>-&gt;<name>MoveToNative</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"Invalid.mfasl"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><call><name><name>file</name>-&gt;<name>Remove</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>exists</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>

    <comment type="line">// FastLoad file not found, or invalid: write a new one.</comment>
    <if>if <condition>(<expr>! <name>exists</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIOutputStream</name></expr></argument>&gt;</argument_list></name></type> <name>output</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name><name>io</name>-&gt;<name>GetOutputStream</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>rv</name></expr>;</return></then></if>

        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIObjectOutputStream</name></expr></argument>&gt;</argument_list></name></type> <name>objectOutput</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name><name>fastLoadService</name>-&gt;<name>NewOutputStream</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>,
                                              <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>objectOutput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rv</name> = <call><name><name>objectOutput</name>-&gt;<name>Write32</name></name><argument_list>(<argument><expr><name>XUL_FASTLOAD_FILE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rv</name> |= <call><name><name>objectOutput</name>-&gt;<name>Write32</name></name><argument_list>(<argument><expr><name>JSXDR_BYTECODE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rv</name> |= <call><name><name>objectOutput</name>-&gt;<name>WriteStringZ</name></name><argument_list>(<argument><expr><call><name><name>chromePath</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rv</name> |= <call><name><name>objectOutput</name>-&gt;<name>WriteStringZ</name></name><argument_list>(<argument><expr><call><name><name>locale</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// Remove here even though some errors above will lead to a FastLoad</comment>
        <comment type="line">// file invalidation.  Other errors (failure to note the dependency on</comment>
        <comment type="line">// installed-chrome.txt, e.g.) will not cause invalidation, and we may</comment>
        <comment type="line">// as well tidy up now.</comment>
        <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>objectOutput</name></expr>)</condition><then>
                <expr_stmt><expr><call><name><name>objectOutput</name>-&gt;<name>Close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><call><name><name>output</name>-&gt;<name>Close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if>
            <expr_stmt><expr><name><name>xio</name>-&gt;<name>mOutputStream</name></name> = <name>nsnull</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>file</name>-&gt;<name>Remove</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>fastLoadService</name>-&gt;<name>SetOutputStream</name></name><argument_list>(<argument><expr><name>objectOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">// Success!  Insert this URI into the mFastLoadURITable</comment>
    <comment type="line">// and commit locals to globals.</comment>
    <expr_stmt><expr><call><name><name>mFastLoadURITable</name>.<name>Put</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name>gFastLoadService</name> = <name>fastLoadService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ADDREF</name><argument_list>(<argument><expr><name>gFastLoadFile</name> = <name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

</unit>
