<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0053b8b77a68e080ea225656b8bda0bfcda25d5f.cpp"><comment type="block">/* -*- Mode: C++; c-basic-offset: 2; indent-tabs-mode: nil; tab-width: 8 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Firefox.
 *
 * The Initial Developer of the Original Code is
 * the Mozilla Foundation &lt;http://www.mozilla.org&gt;.
 * Portions created by the Initial Developer are Copyright (C) 2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base/basictypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozilla/jetpack/JetpackService.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozilla/jetpack/JetpackParent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIJetpack.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIGenericFactory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIXPConnect.h"</cpp:file></cpp:include>

<namespace>namespace <name>mozilla</name> <block>{
<namespace>namespace <name>jetpack</name> <block>{

<macro><name>NS_IMPL_ISUPPORTS1</name><argument_list>(<argument>JetpackService</argument>,
                   <argument>nsIJetpackService</argument>)</argument_list></macro>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>JetpackService</name>::<name>CreateJetpack</name></name><parameter_list>(<param><decl><type><name>nsIJetpack</name>**</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXPConnect</name></expr></argument>&gt;</argument_list></name></type> <name>xpc</name><argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><call><name><name>nsIXPConnect</name>::<name>GetCID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsAXPCNativeCallContext</name>*</type> <name>ncc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>xpc</name>-&gt;<name>GetCurrentNativeCallContext</name></name><argument_list>(<argument><expr>&amp;<name>ncc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>JSContext</name>*</type> <name>cx</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>ncc</name>-&gt;<name>GetJSContext</name></name><argument_list>(<argument><expr>&amp;<name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsRefPtr</name><argument_list>&lt;<argument><expr><name>JetpackParent</name></expr></argument>&gt;</argument_list></name></type> <name>j</name> <init>= <expr>new <call><name>JetpackParent</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr>*<name>aResult</name> = <call><name><name>j</name>.<name>forget</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<macro><name>NS_GENERIC_FACTORY_CONSTRUCTOR</name><argument_list>(<argument>JetpackService</argument>)</argument_list></macro>

}</block></namespace> <comment type="line">// namespace jetpack</comment>
}</block></namespace> <comment type="line">// namespace mozilla</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JETPACKSERVICE_CID</name></cpp:macro> \
<cpp:value>{ 0x4cf18fcd, 0x4247, 0x4388, \
  { 0xb1, 0x88, 0xb0, 0x72, 0x2a, 0xc0, 0x52, 0x21 } }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>nsModuleComponentInfo</name></type> <name><name>kComponents</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{
    <expr>"mozilla::jetpack::JetpackService"</expr>,
    <expr><name>JETPACKSERVICE_CID</name></expr>,
    <expr>"@mozilla.org/jetpack/service;1"</expr>,
    <expr><name><name>mozilla</name>::<name>jetpack</name>::<name>JetpackServiceConstructor</name></name></expr>
  }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<macro><name>NS_IMPL_NSGETMODULE</name><argument_list>(<argument>jetpack</argument>, <argument>kComponents</argument>)</argument_list></macro>

</unit>
