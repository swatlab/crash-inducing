<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="0020e449bbc414d8987ec19b13c8e54161b23462.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* vim: set ts=2 sw=2 et tw=78: */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Original Author: David W. Hyatt (hyatt@netscape.com)
 *   Gagan Saksena &lt;gagan@netscape.com&gt;
 *   Benjamin Smedberg &lt;benjamin@smedbergs.us&gt;
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsChromeRegistry.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prprf.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreServices/CoreServices.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MOZ_WIDGET_GTK2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtk/gtk.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsAppDirectoryServiceDefs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsArrayEnumerator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStringEnumerator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsEnumeratorUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCOMPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsEscape.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsInt64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsLayoutCID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNetCID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsNetUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsReadableUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsUnicharUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsWidgetsCID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsXPCOMCIDInternal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsXPIDLString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsXULAppAPI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsTextFormatter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIAtom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsICommandLine.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsICSSStyleSheet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIConsoleService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDirectoryService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocumentObserver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMWindowCollection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDOMWindowInternal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFileChannel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIFileURL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIIOService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIJARProtocolHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIJARURI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsILocalFile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsILocaleService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsILookAndFeel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIObserverService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefService.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefBranch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPrefBranch2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPresShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIProtocolHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIResProtocolHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIScriptError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIServiceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISimpleEnumerator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIStyleSheet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsISupportsArray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIVersionComparator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIWindowMediator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIXPConnect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIXULAppInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIXULRuntime.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UILOCALE_CMD_LINE_ARG</name></cpp:macro> <cpp:value>"UILocale"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH_OS_LOCALE_PREF</name></cpp:macro> <cpp:value>"intl.locale.matchOS"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECTED_LOCALE_PREF</name></cpp:macro> <cpp:value>"general.useragent.locale"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECTED_SKIN_PREF</name></cpp:macro>   <cpp:value>"general.skins.selectedSkin"</cpp:value></cpp:define>

<expr_stmt><expr>static <call><name>NS_DEFINE_CID</name><argument_list>(<argument><expr><name>kLookAndFeelCID</name></expr></argument>, <argument><expr><name>NS_LOOKANDFEEL_CID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>nsChromeRegistry</name>*</type> <name><name>nsChromeRegistry</name>::<name>gChromeRegistry</name></name></decl>;</decl_stmt>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>LogMessage</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>aMsg</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIConsoleService</name></expr></argument>&gt;</argument_list></name></type> <name>console</name> 
    <argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_CONSOLESERVICE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>console</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>aMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name>*</type> <name>formatted</name> <init>= <expr><call><name>PR_vsmprintf</name><argument_list>(<argument><expr><name>aMsg</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>formatted</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <expr_stmt><expr><call><name><name>console</name>-&gt;<name>LogStringMessage</name></name><argument_list>(<argument><expr><call><name>NS_ConvertUTF8toUTF16</name><argument_list>(<argument><expr><name>formatted</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PR_smprintf_free</name><argument_list>(<argument><expr><name>formatted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>LogMessageWithContext</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURL</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>aLineNumber</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>flags</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>aMsg</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIConsoleService</name></expr></argument>&gt;</argument_list></name></type> <name>console</name> 
    <argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_CONSOLESERVICE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIScriptError</name></expr></argument>&gt;</argument_list></name></type> <name>error</name>
    <argument_list>(<argument><expr><call><name>do_CreateInstance</name><argument_list>(<argument><expr><name>NS_SCRIPTERROR_CONTRACTID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>console</name> || !<name>error</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>aMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name>*</type> <name>formatted</name> <init>= <expr><call><name>PR_vsmprintf</name><argument_list>(<argument><expr><name>aMsg</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>formatted</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <decl_stmt><decl><type><name>nsCString</name></type> <name>spec</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>aURL</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>aURL</name>-&gt;<name>GetSpec</name></name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><name>rv</name> = <call><name><name>error</name>-&gt;<name>Init</name></name><argument_list>(<argument><expr><call><name>NS_ConvertUTF8toUTF16</name><argument_list>(<argument><expr><name>formatted</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>,
                   <argument><expr><call><name>NS_ConvertUTF8toUTF16</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>,
                   <argument><expr><name>nsnull</name></expr></argument>,
                   <argument><expr><name>aLineNumber</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr>"chrome registration"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PR_smprintf_free</name><argument_list>(<argument><expr><name>formatted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>

  <expr_stmt><expr><call><name><name>console</name>-&gt;<name>LogMessage</name></name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line">// We use a "best-fit" algorithm for matching locales and themes. </comment>
<comment type="line">// 1) the exact selected locale/theme</comment>
<comment type="line">// 2) (locales only) same language, different country</comment>
<comment type="line">//    e.g. en-GB is the selected locale, only en-US is available</comment>
<comment type="line">// 3) any available locale/theme</comment>

<comment type="block" format="doxygen">/**
 * Match the language-part of two lang-COUNTRY codes, hopefully but
 * not guaranteed to be in the form ab-CD or abz-CD. "ab" should also
 * work, any other garbage-in will produce undefined results as long
 * as it does not crash.
 */</comment>
<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>LanguagesMatch</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>b</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name><name>a</name>.<name>Length</name></name><argument_list>()</argument_list></call> &lt; 2 || <call><name><name>b</name>.<name>Length</name></name><argument_list>()</argument_list></call> &lt; 2</expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsACString</name>::<name>const_iterator</name></name></type> <name>as</name></decl>, <decl><type ref="prev"/><name>ae</name></decl>, <decl><type ref="prev"/><name>bs</name></decl>, <decl><type ref="prev"/><name>be</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>a</name>.<name>BeginReading</name></name><argument_list>(<argument><expr><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>a</name>.<name>EndReading</name></name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>b</name>.<name>BeginReading</name></name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>b</name>.<name>EndReading</name></name><argument_list>(<argument><expr><name>be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr>*<name>as</name> == *<name>bs</name></expr>)</condition> <block>{
    <if>if <condition>(<expr>*<name>as</name> == '-'</expr>)</condition><then>
      <return>return <expr><name>PR_TRUE</name></expr>;</return></then></if>
 
    <expr_stmt><expr>++<name>as</name></expr>;</expr_stmt> <expr_stmt><expr>++<name>bs</name></expr>;</expr_stmt>

    <comment type="line">// reached the end</comment>
    <if>if <condition>(<expr><name>as</name> == <name>ae</name> &amp;&amp; <name>bs</name> == <name>be</name></expr>)</condition><then>
      <return>return <expr><name>PR_TRUE</name></expr>;</return></then></if>

    <comment type="line">// "a" is short</comment>
    <if>if <condition>(<expr><name>as</name> == <name>ae</name></expr>)</condition><then>
      <return>return <expr>(*<name>bs</name> == '-')</expr>;</return></then></if>

    <comment type="line">// "b" is short</comment>
    <if>if <condition>(<expr><name>bs</name> == <name>be</name></expr>)</condition><then>
      <return>return <expr>(*<name>as</name> == '-')</expr>;</return></then></if>
  }</block></while>

  <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>CanLoadResource</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aResourceURI</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRBool</name></type> <name>isLocalResource</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr>(<name>void</name>)<call><name>NS_URIChainHasFlags</name><argument_list>(<argument><expr><name>aResourceURI</name></expr></argument>,
                            <argument><expr><name><name>nsIProtocolHandler</name>::<name>URI_IS_LOCAL_RESOURCE</name></name></expr></argument>,
                            <argument><expr>&amp;<name>isLocalResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>isLocalResource</name></expr>;</return>
}</block></function>

<function><type><name><name>nsChromeRegistry</name>::<name>ProviderEntry</name></name>*</type>
<name><name>nsChromeRegistry</name>::<name>nsProviderArray</name>::<name>GetProvider</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aPreferred</name></decl></param>, <param><decl><type><name>MatchType</name></type> <name>aType</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>i</name> <init>= <expr><call><name><name>mArray</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>i</name></expr>)</condition><then>
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>ProviderEntry</name>*</type> <name>found</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>  <comment type="line">// Only set if we find a partial-match locale</comment>
  <decl_stmt><decl><type><name>ProviderEntry</name>*</type> <name>entry</name></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>i</name>--</expr>)</condition> <block>{
    <expr_stmt><expr><name>entry</name> = <call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>ProviderEntry</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>mArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name><name>aPreferred</name>.<name>Equals</name></name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>provider</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <return>return <expr><name>entry</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>aType</name> != <name>LOCALE</name></expr>)</condition><then>
      <continue>continue;</continue></then></if>

    <if>if <condition>(<expr><call><name>LanguagesMatch</name><argument_list>(<argument><expr><name>aPreferred</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>provider</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>found</name> = <name>entry</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    }</block></then></if>

    <if>if <condition>(<expr>!<name>found</name> &amp;&amp; <call><name><name>entry</name>-&gt;<name>provider</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"en-US"</expr></argument>)</argument_list></call></expr>)</condition><then>
      <expr_stmt><expr><name>found</name> = <name>entry</name></expr>;</expr_stmt></then></if>
  }</block></while>

  <if>if <condition>(<expr>!<name>found</name> &amp;&amp; <name>aType</name> != <name>EXACT</name></expr>)</condition><then>
    <return>return <expr><name>entry</name></expr>;</return></then></if>

  <return>return <expr><name>found</name></expr>;</return>
}</block></function>

<function><type><name>nsIURI</name>*</type>
<name><name>nsChromeRegistry</name>::<name>nsProviderArray</name>::<name>GetBase</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aPreferred</name></decl></param>, <param><decl><type><name>MatchType</name></type> <name>aType</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ProviderEntry</name>*</type> <name>provider</name> <init>= <expr><call><name>GetProvider</name><argument_list>(<argument><expr><name>aPreferred</name></expr></argument>, <argument><expr><name>aType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>provider</name></expr>)</condition><then>
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>

  <return>return <expr><name><name>provider</name>-&gt;<name>baseURI</name></name></expr>;</return>
}</block></function>

<function><type><specifier>const</specifier> <name>nsACString</name>&amp;</type>
<name><name>nsChromeRegistry</name>::<name>nsProviderArray</name>::<name>GetSelected</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aPreferred</name></decl></param>, <param><decl><type><name>MatchType</name></type> <name>aType</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ProviderEntry</name>*</type> <name>entry</name> <init>= <expr><call><name>GetProvider</name><argument_list>(<argument><expr><name>aPreferred</name></expr></argument>, <argument><expr><name>aType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>entry</name></expr>)</condition><then>
    <return>return <expr><name><name>entry</name>-&gt;<name>provider</name></name></expr>;</return></then></if>

  <return>return <expr><call><name>EmptyCString</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsChromeRegistry</name>::<name>nsProviderArray</name>::<name>SetBase</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aProvider</name></decl></param>, <param><decl><type><name>nsIURI</name>*</type> <name>aBaseURL</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ProviderEntry</name>*</type> <name>provider</name> <init>= <expr><call><name>GetProvider</name><argument_list>(<argument><expr><name>aProvider</name></expr></argument>, <argument><expr><name>EXACT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>provider</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name><name>provider</name>-&gt;<name>baseURI</name></name> = <name>aBaseURL</name></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <comment type="line">// no existing entries, add a new one</comment>
  <expr_stmt><expr><name>provider</name> = new <call><name>ProviderEntry</name><argument_list>(<argument><expr><name>aProvider</name></expr></argument>, <argument><expr><name>aBaseURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>provider</name></expr>)</condition><then>
    <return>return;</return></then></if> <comment type="line">// It's safe to silently fail on OOM</comment>

  <expr_stmt><expr><call><name><name>mArray</name>.<name>AppendElement</name></name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsChromeRegistry</name>::<name>nsProviderArray</name>::<name>EnumerateToArray</name></name><parameter_list>(<param><decl><type><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsCString</name></expr></argument>&gt;</argument_list></name> *</type><name>a</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>i</name> <init>= <expr><call><name><name>mArray</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>i</name>--</expr>)</condition> <block>{
    <decl_stmt><decl><type><name>ProviderEntry</name> *</type><name>entry</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>ProviderEntry</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>mArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>a</name>-&gt;<name>AppendElement</name></name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>provider</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsChromeRegistry</name>::<name>nsProviderArray</name>::<name>Clear</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>i</name> <init>= <expr><call><name><name>mArray</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>i</name>--</expr>)</condition> <block>{
    <decl_stmt><decl><type><name>ProviderEntry</name>*</type> <name>entry</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><name>ProviderEntry</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>mArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr>delete <name>entry</name></expr>;</expr_stmt>
  }</block></while>

  <expr_stmt><expr><call><name><name>mArray</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<constructor><name><name>nsChromeRegistry</name>::<name>PackageEntry</name>::<name>PackageEntry</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>aPackage</name></decl></param>)</parameter_list> <member_list>:
  <call><name>package</name><argument_list>(<argument><expr><name>aPackage</name></expr></argument>)</argument_list></call>, <call><name>flags</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>
</member_list><block>{
}</block></constructor>

<function><type><name>PLHashNumber</name></type>
<name><name>nsChromeRegistry</name>::<name>HashKey</name></name><parameter_list>(<param><decl><type><name>PLDHashTable</name> *</type><name>table</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>str</name> <init>= <expr>*<call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><specifier>const</specifier> <name>nsACString</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>HashString</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsChromeRegistry</name>::<name>MatchKey</name></name><parameter_list>(<param><decl><type><name>PLDHashTable</name> *</type><name>table</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>PLDHashEntryHdr</name> *</type><name>entry</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>str</name> <init>= <expr>*<call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><specifier>const</specifier> <name>nsACString</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>PackageEntry</name>*</type> <name>pentry</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><specifier>const</specifier> <name>PackageEntry</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>str</name>.<name>Equals</name></name><argument_list>(<argument><expr><name><name>pentry</name>-&gt;<name>package</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsChromeRegistry</name>::<name>ClearEntry</name></name><parameter_list>(<param><decl><type><name>PLDHashTable</name> *</type><name>table</name></decl></param>, <param><decl><type><name>PLDHashEntryHdr</name> *</type><name>entry</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PackageEntry</name>*</type> <name>pentry</name> <init>= <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PackageEntry</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>pentry</name>-&gt;~<name>PackageEntry</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsChromeRegistry</name>::<name>InitEntry</name></name><parameter_list>(<param><decl><type><name>PLDHashTable</name> *</type><name>table</name></decl></param>, <param><decl><type><name>PLDHashEntryHdr</name> *</type><name>entry</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>nsACString</name>&amp;</type> <name>str</name> <init>= <expr>*<call><name><name>reinterpret_cast</name><argument_list>&lt;<argument><expr><specifier>const</specifier> <name>nsACString</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>new (<name>entry</name>) <call><name>PackageEntry</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>PLDHashTableOps</name></type>
<name><name>nsChromeRegistry</name>::<name>kTableOps</name></name> <init>= <expr><block>{
  <expr><name>PL_DHashAllocTable</name></expr>,
  <expr><name>PL_DHashFreeTable</name></expr>,
  <expr><name>HashKey</name></expr>,
  <expr><name>MatchKey</name></expr>,
  <expr><name>PL_DHashMoveEntryStub</name></expr>,
  <expr><name>ClearEntry</name></expr>,
  <expr><name>PL_DHashFinalizeStub</name></expr>,
  <expr><name>InitEntry</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name><name>nsChromeRegistry</name>::<name>OverlayListEntry</name>::<name>AddURI</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>i</name> <init>= <expr><call><name><name>mArray</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>i</name>--</expr>)</condition> <block>{
    <decl_stmt><decl><type><name>PRBool</name></type> <name>equals</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>aURI</name>-&gt;<name>Equals</name></name><argument_list>(<argument><expr><name><name>mArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>equals</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>equals</name></expr>)</condition><then>
        <return>return;</return></then></if>
  }</block></while>

  <expr_stmt><expr><call><name><name>mArray</name>.<name>AppendObject</name></name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsChromeRegistry</name>::<name>OverlayListHash</name>::<name>Add</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aBase</name></decl></param>, <param><decl><type><name>nsIURI</name>*</type> <name>aOverlay</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>OverlayListEntry</name>*</type> <name>entry</name> <init>= <expr><call><name><name>mTable</name>.<name>PutEntry</name></name><argument_list>(<argument><expr><name>aBase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>entry</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>entry</name>-&gt;<name>AddURI</name></name><argument_list>(<argument><expr><name>aOverlay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><specifier>const</specifier> <name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name>*</type>
<name><name>nsChromeRegistry</name>::<name>OverlayListHash</name>::<name>GetArray</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aBase</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>OverlayListEntry</name>*</type> <name>entry</name> <init>= <expr><call><name><name>mTable</name>.<name>GetEntry</name></name><argument_list>(<argument><expr><name>aBase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then>
    <return>return <expr><name>nsnull</name></expr>;</return></then></if>

  <return>return <expr>&amp;<name><name>entry</name>-&gt;<name>mArray</name></name></expr>;</return>
}</block></function>

<destructor><name><name>nsChromeRegistry</name>::~<name>nsChromeRegistry</name></name><parameter_list>()</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>mPackagesHash</name>.<name>ops</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>PL_DHashTableFinish</name><argument_list>(<argument><expr>&amp;<name>mPackagesHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <expr_stmt><expr><name>gChromeRegistry</name> = <name>nsnull</name></expr>;</expr_stmt>
}</block></destructor>

<macro><name>NS_INTERFACE_MAP_BEGIN</name><argument_list>(<argument>nsChromeRegistry</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsIChromeRegistry</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsIXULChromeRegistry</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsIToolkitChromeRegistry</argument>)</argument_list></macro>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_XUL</name></cpp:ifdef>
  <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsIXULOverlayProvider</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsIObserver</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_MAP_ENTRY</name><argument_list>(<argument>nsISupportsWeakReference</argument>)</argument_list></macro>
  <macro><name>NS_INTERFACE_MAP_ENTRY_AMBIGUOUS</name><argument_list>(<argument>nsISupports</argument>, <argument>nsIChromeRegistry</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>NS_INTERFACE_MAP_END</name></type>

<name>NS_IMPL_ADDREF</name><argument_list>(<argument><expr><name>nsChromeRegistry</name></expr></argument>)</argument_list>
<name>NS_IMPL_RELEASE</name><argument_list>(<argument><expr><name>nsChromeRegistry</name></expr></argument>)</argument_list>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// nsIChromeRegistry methods:</comment>

static <name>nsresult</name>
<name>getUILangCountry</name><argument_list>(<argument><expr><name>nsACString</name>&amp; <name>aUILang</name></expr></argument>)</argument_list>
<argument_list>{
  <argument><expr><name>nsresult</name> <name>rv</name></expr></argument>;

  <argument><expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocaleService</name></expr></argument>&gt;</argument_list></name> <name>localeService</name> = <call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_LOCALESERVICE_CONTRACTID</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>;

  <argument><expr><name>nsAutoString</name> <name>uiLang</name></expr></argument>;
  <argument><expr><name>rv</name> = <call><name><name>localeService</name>-&gt;<name>GetLocaleComponentForUserAgent</name></name><argument_list>(<argument><expr><name>uiLang</name></expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>;

  <argument><expr><call><name>CopyUTF16toUTF8</name><argument_list>(<argument><expr><name>uiLang</name></expr></argument>, <argument><expr><name>aUILang</name></expr></argument>)</argument_list></call></expr></argument>;
  return <argument><expr><name>NS_OK</name></expr></argument>;
}</argument_list>

<name>nsresult</name>
<name><name>nsChromeRegistry</name>::<name>Init</name></name><argument_list>()</argument_list>
<argument_list>{
  <argument><expr><name>nsresult</name> <name>rv</name></expr></argument>;

  <comment type="line">// Check to see if necko and the JAR protocol handler are registered yet</comment>
  <comment type="line">// if not, somebody is doing work during XPCOM registration that they</comment>
  <comment type="line">// shouldn't be doing. See bug 292549, where JS components are trying</comment>
  <comment type="line">// to call Components.utils.import("chrome:///") early in registration</comment>

  <argument><expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIIOService</name></expr></argument>&gt;</argument_list></name> <call><name>io</name> <argument_list>(<argument><expr><call><name>do_GetIOService</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
  if <argument><expr>(!<name>io</name>)</expr></argument> <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></argument_list></decl></decl_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIProtocolHandler</name></expr></argument>&gt;</argument_list></name></type> <name>ph</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>io</name>-&gt;<name>GetProtocolHandler</name></name><argument_list>(<argument><expr>"jar"</expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIJARProtocolHandler</name></expr></argument>&gt;</argument_list></name></type> <name>jph</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>jph</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_NOT_INITIALIZED</name></expr>;</return></then></if>

  <if>if <condition>(<expr>!<call><name>PL_DHashTableInit</name><argument_list>(<argument><expr>&amp;<name>mPackagesHash</name></expr></argument>, <argument><expr>&amp;<name>kTableOps</name></expr></argument>,
                         <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PackageEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <if>if <condition>(<expr>!<call><name><name>mOverlayHash</name>.<name>Init</name></name><argument_list>()</argument_list></call> ||
      !<call><name><name>mStyleHash</name>.<name>Init</name></name><argument_list>()</argument_list></call> ||
      !<call><name><name>mOverrideTable</name>.<name>Init</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <expr_stmt><expr><name>mSelectedLocale</name> = <call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"en-US"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mSelectedSkin</name> = <call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"classic/1.0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// This initialization process is fairly complicated and may cause reentrant</comment>
  <comment type="line">// getservice calls to resolve chrome URIs (especially locale files). We</comment>
  <comment type="line">// don't want that, so we inform the protocol handler about our existence</comment>
  <comment type="line">// before we are actually fully initialized.</comment>
  <expr_stmt><expr><name>gChromeRegistry</name> = <name>this</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>safeMode</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXULRuntime</name></expr></argument>&gt;</argument_list></name></type> <name>xulrun</name> <argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>XULAPPINFO_SERVICE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>xulrun</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>xulrun</name>-&gt;<name>GetInSafeMode</name></name><argument_list>(<argument><expr>&amp;<name>safeMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrefService</name></expr></argument>&gt;</argument_list></name></type> <name>prefserv</name> <argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_PREFSERVICE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrefBranch</name></expr></argument>&gt;</argument_list></name></type> <name>prefs</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>safeMode</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>prefserv</name>-&gt;<name>GetDefaultBranch</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>prefs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>prefs</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>prefserv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <if>if <condition>(<expr>!<name>prefs</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"Could not get pref service!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <decl_stmt><decl><type><name>nsXPIDLCString</name></type> <name>provider</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>prefs</name>-&gt;<name>GetCharPref</name></name><argument_list>(<argument><expr><name>SELECTED_SKIN_PREF</name></expr></argument>, <argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <expr_stmt><expr><name>mSelectedSkin</name> = <name>provider</name></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><call><name>SelectLocaleFromPref</name><argument_list>(<argument><expr><name>prefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrefBranch2</name></expr></argument>&gt;</argument_list></name></type> <name>prefs2</name> <argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>prefs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>prefs2</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>rv</name> = <call><name><name>prefs2</name>-&gt;<name>AddObserver</name></name><argument_list>(<argument><expr><name>MATCH_OS_LOCALE_PREF</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rv</name> = <call><name><name>prefs2</name>-&gt;<name>AddObserver</name></name><argument_list>(<argument><expr><name>SELECTED_LOCALE_PREF</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rv</name> = <call><name><name>prefs2</name>-&gt;<name>AddObserver</name></name><argument_list>(<argument><expr><name>SELECTED_SKIN_PREF</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></else></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIObserverService</name></expr></argument>&gt;</argument_list></name></type> <name>obsService</name> <argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/observer-service;1"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>obsService</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>obsService</name>-&gt;<name>AddObserver</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>"command-line-startup"</expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obsService</name>-&gt;<name>AddObserver</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>"profile-initial-state"</expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name>CheckForNewChrome</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mInitialized</name> = <name>PR_TRUE</name></expr>;</expr_stmt>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsChromeRegistry</name></macro><expr_stmt><expr><name>::<name>CheckForOSAccessibility</name></name>()
<block>{
  <expr><name>nsresult</name> <name>rv</name></expr>;

  <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILookAndFeel</name></expr></argument>&gt;</argument_list></name> <call><name>lookAndFeel</name> <argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>kLookAndFeelCID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
  <if>if <condition>(<expr><name>lookAndFeel</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>useAccessibilityTheme</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>rv</name> = <call><name><name>lookAndFeel</name>-&gt;<name>GetMetric</name></name><argument_list>(<argument><expr><name><name>nsILookAndFeel</name>::<name>eMetric_UseAccessibilityTheme</name></name></expr></argument>,
                                <argument><expr><name>useAccessibilityTheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; <name>useAccessibilityTheme</name></expr>)</condition><then> <block>{
      <comment type="block">/* Set the skin to classic and remove pref observers */</comment>
      <if>if <condition>(<expr>!<call><name><name>mSelectedSkin</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"classic/1.0"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>mSelectedSkin</name>.<name>AssignLiteral</name></name><argument_list>(<argument><expr>"classic/1.0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RefreshSkins</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/></block></then></if></block></then></if></block></then></if>}</block>

      <name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrefBranch2</name></expr></argument>&gt;</argument_list></name> <call><name>prefs</name> <argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_PREFSERVICE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>prefs</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>prefs</name>-&gt;<name>RemoveObserver</name></name><argument_list>(<argument><expr><name>SELECTED_SKIN_PREF</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }
  }

  <return>return <expr><name>NS_OK</name></expr>;</return>
}

nsresult
<macro><name>nsChromeRegistry</name></macro><expr_stmt><expr><name>::<name>GetProviderAndPath</name></name>(<name>nsIURL</name>* <name>aChromeURL</name>,
                                     <name>nsACString</name>&amp; <name>aProvider</name>, <name>nsACString</name>&amp; <name>aPath</name>)
<block>{
  <expr><name>nsresult</name> <name>rv</name></expr>;

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <expr><name>PRBool</name> <name>isChrome</name></expr>;
  <expr><call><name><name>aChromeURL</name>-&gt;<name>SchemeIs</name></name><argument_list>(<argument><expr>"chrome"</expr></argument>, <argument><expr>&amp;<name>isChrome</name></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>isChrome</name></expr></argument>, <argument><expr>"Non-chrome URI?"</expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr><name>nsCAutoString</name> <name>path</name></expr>;
  <expr><name>rv</name> = <call><name><name>aChromeURL</name>-&gt;<name>GetPath</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;

  <if>if <condition>(<expr><call><name><name>path</name>.<name>Length</name></name><argument_list>()</argument_list></call> &lt; 3</expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>LogMessage</name><argument_list>(<argument><expr>"Invalid chrome URI: %s"</expr></argument>, <argument><expr><call><name><name>path</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  <expr_stmt/></block></then></if>}</block>

  <call><name><name>path</name>.<name>SetLength</name></name><argument_list>(<argument><expr><call><name>nsUnescapeCount</name><argument_list>(<argument><expr><call><name><name>path</name>.<name>BeginWriting</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><call><name><name>path</name>.<name>First</name></name><argument_list>()</argument_list></call> == '/'</expr></argument>, <argument><expr>"Path should always begin with a slash!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>slash</name> <init>= <expr><call><name><name>path</name>.<name>FindChar</name></name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>slash</name> == 1</expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>LogMessage</name><argument_list>(<argument><expr>"Invalid chrome URI: %s"</expr></argument>, <argument><expr><call><name><name>path</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><name>slash</name> == -1</expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>aPath</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <if>if <condition>(<expr><name>slash</name> == (<name>PRInt32</name>) <call><name><name>path</name>.<name>Length</name></name><argument_list>()</argument_list></call> - 1</expr>)</condition><then>
      <expr_stmt><expr><call><name><name>aPath</name>.<name>Truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
    <else>else
      <expr_stmt><expr><call><name><name>aPath</name>.<name>Assign</name></name><argument_list>(<argument><expr><call><name><name>path</name>.<name>get</name></name><argument_list>()</argument_list></call> + <name>slash</name> + 1</expr></argument>, <argument><expr><call><name><name>path</name>.<name>Length</name></name><argument_list>()</argument_list></call> - <name>slash</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

    <expr_stmt><expr>--<name>slash</name></expr>;</expr_stmt>
  }</block></else></if>

  <expr_stmt><expr><call><name><name>aProvider</name>.<name>Assign</name></name><argument_list>(<argument><expr><call><name><name>path</name>.<name>get</name></name><argument_list>()</argument_list></call> + 1</expr></argument>, <argument><expr><name>slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}


nsresult
<macro><name>nsChromeRegistry</name></macro><expr_stmt><expr><name>::<name>Canonify</name></name>(<name>nsIURL</name>* <name>aChromeURL</name>)
<block>{
  <expr><call><name>NS_NAMED_LITERAL_CSTRING</name><argument_list>(<argument><expr><name>kSlash</name></expr></argument>, <argument><expr>"/"</expr></argument>)</argument_list></call></expr>;

  <expr><name>nsresult</name> <name>rv</name></expr>;

  <expr><name>nsCAutoString</name> <name>provider</name></expr>, <expr><name>path</name></expr>;
  <expr><name>rv</name> = <call><name>GetProviderAndPath</name><argument_list>(<argument><expr><name>aChromeURL</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;

  <if>if <condition>(<expr><call><name><name>path</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>package</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>aChromeURL</name>-&gt;<name>GetHost</name></name><argument_list>(<argument><expr><name>package</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// we re-use the "path" local string to build a new URL path</comment>
    <expr_stmt><expr><call><name><name>path</name>.<name>Assign</name></name><argument_list>(<argument><expr><name>kSlash</name> + <name>provider</name> + <name>kSlash</name> + <name>package</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name><name>provider</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"content"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>path</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>".xul"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block></then></if></block></then></if>}</block></expr></expr_stmt>
    <else>else <if>if <condition>(<expr><call><name><name>provider</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"locale"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>path</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>".dtd"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name><name>provider</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"skin"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>path</name>.<name>AppendLiteral</name></name><argument_list>(<argument><expr>".css"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
      <return>return <expr><name>NS_ERROR_INVALID_ARG</name></expr>;</return>
    }</block></else></if></else></if></else>
    <expr_stmt><expr><call><name><name>aChromeURL</name>-&gt;<name>SetPath</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }
  else <block>{
    <comment type="line">// prevent directory traversals ("..")</comment>
    <comment type="line">// path is already unescaped once, but uris can get unescaped twice</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>pos</name> <init>= <expr><call><name><name>path</name>.<name>BeginReading</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>end</name> <init>= <expr><call><name><name>path</name>.<name>EndReading</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>pos</name> &lt; <name>end</name></expr>)</condition> <block>{
      <switch>switch <condition>(<expr>*<name>pos</name></expr>)</condition> <block>{
        <case>case <expr>':'</expr>:
          <return>return <expr><name>NS_ERROR_DOM_BAD_URI</name></expr>;</return>
        </case><case>case <expr>'.'</expr>:
          <if>if <condition>(<expr><name><name>pos</name><index>[<expr>1</expr>]</index></name> == '.'</expr>)</condition><then>
            <return>return <expr><name>NS_ERROR_DOM_BAD_URI</name></expr>;</return></then></if>
          <break>break;</break>
        </case><case>case <expr>'%'</expr>:
          <comment type="line">// chrome: URIs with double-escapes are trying to trick us.</comment>
          <comment type="line">// watch for %2e, and %25 in case someone triple unescapes</comment>
          <if>if <condition>(<expr><name><name>pos</name><index>[<expr>1</expr>]</index></name> == '2' &amp;&amp;
               ( <name><name>pos</name><index>[<expr>2</expr>]</index></name> == 'e' || <name><name>pos</name><index>[<expr>2</expr>]</index></name> == 'E' || 
                 <name><name>pos</name><index>[<expr>2</expr>]</index></name> == '5' )</expr>)</condition><then>
            <return>return <expr><name>NS_ERROR_DOM_BAD_URI</name></expr>;</return></then></if>
          <break>break;</break>
        </case><case>case <expr>'?'</expr>:
        </case><case>case <expr>'#'</expr>:
          <expr_stmt><expr><name>pos</name> = <name>end</name></expr>;</expr_stmt>
          <continue>continue;</continue>
      </case>}</block></switch>
      <expr_stmt><expr>++<name>pos</name></expr>;</expr_stmt>
    }</block></while>
  }</block>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsChromeRegistry</name></macro><expr_stmt><expr><name>::<name>ConvertChromeURL</name></name>(<name>nsIURI</name>* <name>aChromeURI</name>, <name>nsIURI</name>* *<name>aResult</name>)
<block>{
  <expr><name>nsresult</name> <name>rv</name></expr>;
  <expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aChromeURI</name></expr></argument>, <argument><expr>"null url!"</expr></argument>)</argument_list></call></expr>;

  <if>if <condition>(<expr><call><name><name>mOverrideTable</name>.<name>Get</name></name><argument_list>(<argument><expr><name>aChromeURI</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURL</name></expr></argument>&gt;</argument_list></name> <call><name>chromeURL</name> <argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aChromeURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>chromeURL</name></expr></argument>, <argument><expr><name>NS_NOINTERFACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>package</name></decl>, <decl><type ref="prev"/><name>provider</name></decl>, <decl><type ref="prev"/><name>path</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>chromeURL</name>-&gt;<name>GetHostPort</name></name><argument_list>(<argument><expr><name>package</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rv</name> = <call><name>GetProviderAndPath</name><argument_list>(<argument><expr><name>chromeURL</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PackageEntry</name>*</type> <name>entry</name> <init>=
    <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PackageEntry</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>PL_DHashTableOperate</name><argument_list>(<argument><expr>&amp;<name>mPackagesHash</name></expr></argument>,
                                                    <argument><expr>&amp; (<name>nsACString</name>&amp;) <name>package</name></expr></argument>,
                                                    <argument><expr><name>PL_DHASH_LOOKUP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>PL_DHASH_ENTRY_IS_FREE</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <if>if <condition>(<expr>!<name>mInitialized</name></expr>)</condition><then>
      <return>return <expr><name>NS_ERROR_NOT_INITIALIZED</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>LogMessage</name><argument_list>(<argument><expr>"No chrome package registered for chrome://%s/%s/%s"</expr></argument>,
               <argument><expr><call><name><name>package</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>provider</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>path</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>flags</name></name> &amp; <name><name>PackageEntry</name>::<name>PLATFORM_PACKAGE</name></name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_WIN</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>XP_OS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name><name>path</name>.<name>Insert</name></name><argument_list>(<argument><expr>"win/"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><call><name><name>path</name>.<name>Insert</name></name><argument_list>(<argument><expr>"mac/"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name><name>path</name>.<name>Insert</name></name><argument_list>(<argument><expr>"unix/"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsIURI</name>*</type> <name>baseURI</name> <init>= <expr><name>nsnull</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name><name>provider</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"locale"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>baseURI</name> = <call><name><name>entry</name>-&gt;<name>locales</name>.<name>GetBase</name></name><argument_list>(<argument><expr><name>mSelectedLocale</name></expr></argument>, <argument><expr><name><name>nsProviderArray</name>::<name>LOCALE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name><name>provider</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"skin"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>baseURI</name> = <call><name><name>entry</name>-&gt;<name>skins</name>.<name>GetBase</name></name><argument_list>(<argument><expr><name>mSelectedSkin</name></expr></argument>, <argument><expr><name><name>nsProviderArray</name>::<name>ANY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name><name>provider</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"content"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>baseURI</name> = <name><name>entry</name>-&gt;<name>baseURI</name></name></expr>;</expr_stmt>
  }</block></then></if></else></if></else></if>

  <if>if <condition>(<expr>!<name>baseURI</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>LogMessage</name><argument_list>(<argument><expr>"No chrome package registered for chrome://%s/%s/%s"</expr></argument>,
               <argument><expr><call><name><name>package</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>provider</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>path</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><call><name>NS_NewURI</name><argument_list>(<argument><expr><name>aResult</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>baseURI</name></expr></argument>)</argument_list></call></expr>;</return>
}

nsresult
<macro><name>nsChromeRegistry</name></macro><expr_stmt><expr><name>::<name>GetSelectedLocale</name></name>(const <name>nsACString</name>&amp; <name>aPackage</name>, <name>nsACString</name>&amp; <name>aLocale</name>)
<block>{
  <expr><name>PackageEntry</name>* <name>entry</name> =
    <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PackageEntry</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>PL_DHashTableOperate</name><argument_list>(<argument><expr>&amp;<name>mPackagesHash</name></expr></argument>,
                                                       <argument><expr>&amp; <name>aPackage</name></expr></argument>,
                                                       <argument><expr><name>PL_DHASH_LOOKUP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

  <if>if <condition>(<expr><call><name>PL_DHASH_ENTRY_IS_FREE</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <name>aLocale</name> = <call><name><name>entry</name>-&gt;<name>locales</name>.<name>GetSelected</name></name><argument_list>(<argument><expr><name>mSelectedLocale</name></expr></argument>, <argument><expr><name><name>nsProviderArray</name>::<name>LOCALE</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name><name>aLocale</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsChromeRegistry</name></macro><expr_stmt><expr><name>::<name>IsLocaleRTL</name></name>(const <name>nsACString</name>&amp; <name>package</name>, <name>PRBool</name> *<name>aResult</name>)
<block>{
  <expr>*<name>aResult</name> = <name>PR_FALSE</name></expr>;

  <expr><name>nsCAutoString</name> <name>locale</name></expr>;
  <expr><call><name>GetSelectedLocale</name><argument_list>(<argument><expr><name>package</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;
  <if>if <condition>(<expr><call><name><name>locale</name>.<name>Length</name></name><argument_list>()</argument_list></call> &lt; 2</expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <comment type="line">// first check the intl.uidirection.&lt;locale&gt; preference, and if that is not</comment>
  <comment type="line">// set, check the same preference but with just the first two characters of</comment>
  <comment type="line">// the locale. If that isn't set, default to left-to-right.</comment>
  <name>nsCAutoString</name> <name>prefString</name> = <call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>"intl.uidirection."</expr></argument>)</argument_list></call> + <name>locale</name></block></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrefBranch</name></expr></argument>&gt;</argument_list></name></type> <name>prefBranch</name> <argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_PREFSERVICE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>prefBranch</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>
  
  <decl_stmt><decl><type><name>nsXPIDLCString</name></type> <name>dir</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>prefBranch</name>-&gt;<name>GetCharPref</name></name><argument_list>(<argument><expr><call><name><name>prefString</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name><name>dir</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>PRInt32</name></type> <name>hyphen</name> <init>= <expr><call><name><name>prefString</name>.<name>FindChar</name></name><argument_list>(<argument><expr>'-'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>hyphen</name> &gt;= 1</expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>shortPref</name><argument_list>(<argument><expr><call><name>Substring</name><argument_list>(<argument><expr><name>prefString</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>hyphen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>prefBranch</name>-&gt;<name>GetCharPref</name></name><argument_list>(<argument><expr><call><name><name>shortPref</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
  <expr_stmt><expr>*<name>aResult</name> = <call><name><name>dir</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"rtl"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsChromeRegistry</name></macro><expr_stmt><expr><name>::<name>GetLocalesForPackage</name></name>(const <name>nsACString</name>&amp; <name>aPackage</name>,
                                       <name>nsIUTF8StringEnumerator</name>* *<name>aResult</name>)
<block>{
  <expr><name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsCString</name></expr></argument>&gt;</argument_list></name> *<name>a</name> = new <name><name>nsTArray</name><argument_list>&lt;<argument><expr><name>nsCString</name></expr></argument>&gt;</argument_list></name></expr>;
  <if>if <condition>(<expr>!<name>a</name></expr>)</condition><then>
    <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

  <name>PackageEntry</name>* <name>entry</name> =
    <call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PackageEntry</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>PL_DHashTableOperate</name><argument_list>(<argument><expr>&amp;<name>mPackagesHash</name></expr></argument>,
                                                       <argument><expr>&amp; <name>aPackage</name></expr></argument>,
                                                       <argument><expr><name>PL_DHASH_LOOKUP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>PL_DHASH_ENTRY_IS_BUSY</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>entry</name>-&gt;<name>locales</name>.<name>EnumerateToArray</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name>NS_NewAdoptingUTF8StringEnumerator</name><argument_list>(<argument><expr><name>aResult</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr>delete <name>a</name></expr>;</expr_stmt></then></if>

  <return>return <expr><name>rv</name></expr>;</return>
}

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MOZ_XUL</name></cpp:ifdef>
NS_IMETHODIMP
<macro><name>nsChromeRegistry</name></macro><expr_stmt><expr><name>::<name>GetStyleOverlays</name></name>(<name>nsIURI</name> *<name>aChromeURL</name>,
                                   <name>nsISimpleEnumerator</name> **<name>aResult</name>)
<block>{
  <expr>const <name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name>* <name>parray</name> = <call><name><name>mStyleHash</name>.<name>GetArray</name></name><argument_list>(<argument><expr><name>aChromeURL</name></expr></argument>)</argument_list></call></expr>;
  <if>if <condition>(<expr>!<name>parray</name></expr>)</condition><then>
    <return>return <expr><call><name>NS_NewEmptyEnumerator</name><argument_list>(<argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return></then></if></block></expr></expr_stmt>

  <return>return <expr><call><name>NS_NewArrayEnumerator</name><argument_list>(<argument><expr><name>aResult</name></expr></argument>, <argument><expr>*<name>parray</name></expr></argument>)</argument_list></call></expr>;</return>
}

NS_IMETHODIMP
<macro><name>nsChromeRegistry</name></macro><expr_stmt><expr><name>::<name>GetXULOverlays</name></name>(<name>nsIURI</name> *<name>aChromeURL</name>, <name>nsISimpleEnumerator</name> **<name>aResult</name>)
<block>{
  <expr>const <name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name>* <name>parray</name> = <call><name><name>mOverlayHash</name>.<name>GetArray</name></name><argument_list>(<argument><expr><name>aChromeURL</name></expr></argument>)</argument_list></call></expr>;
  <if>if <condition>(<expr>!<name>parray</name></expr>)</condition><then>
    <return>return <expr><call><name>NS_NewEmptyEnumerator</name><argument_list>(<argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</return></then></if></block></expr></expr_stmt>

  <return>return <expr><call><name>NS_NewArrayEnumerator</name><argument_list>(<argument><expr><name>aResult</name></expr></argument>, <argument><expr>*<name>parray</name></expr></argument>)</argument_list></call></expr>;</return>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// MOZ_XUL</comment>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////</comment>

<comment type="line">// theme stuff</comment>


static <function><type><name>void</name></type> <name>FlushSkinBindingsForWindow</name><parameter_list>(<param><decl><type><name>nsIDOMWindowInternal</name>*</type> <name>aWindow</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Get the DOM document.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocument</name></expr></argument>&gt;</argument_list></name></type> <name>domDocument</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aWindow</name>-&gt;<name>GetDocument</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>domDocument</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>domDocument</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></type> <name>document</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>domDocument</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>document</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <comment type="line">// Annihilate all XBL bindings.</comment>
  <expr_stmt><expr><call><name><name>document</name>-&gt;<name>FlushSkinBindings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line">// XXXbsmedberg: move this to nsIWindowMediator</comment>
<function><type><name>NS_IMETHODIMP</name></type> <name><name>nsChromeRegistry</name>::<name>RefreshSkins</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIWindowMediator</name></expr></argument>&gt;</argument_list></name></type> <name>windowMediator</name>
    <argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_WINDOWMEDIATOR_CONTRACTID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>windowMediator</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISimpleEnumerator</name></expr></argument>&gt;</argument_list></name></type> <name>windowEnumerator</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>windowMediator</name>-&gt;<name>GetEnumerator</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>windowEnumerator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>more</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>windowEnumerator</name>-&gt;<name>HasMoreElements</name></name><argument_list>(<argument><expr>&amp;<name>more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>more</name></expr>)</condition> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>protoWindow</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>windowEnumerator</name>-&gt;<name>GetNext</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>protoWindow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>protoWindow</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMWindowInternal</name></expr></argument>&gt;</argument_list></name></type> <name>domWindow</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>protoWindow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>domWindow</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>FlushSkinBindingsForWindow</name><argument_list>(<argument><expr><name>domWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>windowEnumerator</name>-&gt;<name>HasMoreElements</name></name><argument_list>(<argument><expr>&amp;<name>more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>

  <expr_stmt><expr><call><name>FlushSkinCaches</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>windowMediator</name>-&gt;<name>GetEnumerator</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>windowEnumerator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>windowEnumerator</name>-&gt;<name>HasMoreElements</name></name><argument_list>(<argument><expr>&amp;<name>more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>more</name></expr>)</condition> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>protoWindow</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>windowEnumerator</name>-&gt;<name>GetNext</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>protoWindow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>protoWindow</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMWindowInternal</name></expr></argument>&gt;</argument_list></name></type> <name>domWindow</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>protoWindow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>domWindow</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>RefreshWindow</name><argument_list>(<argument><expr><name>domWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>windowEnumerator</name>-&gt;<name>HasMoreElements</name></name><argument_list>(<argument><expr>&amp;<name>more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
   
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsChromeRegistry</name>::<name>FlushSkinCaches</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIObserverService</name></expr></argument>&gt;</argument_list></name></type> <name>obsSvc</name> <init>=
    <expr><call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/observer-service;1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>obsSvc</name></expr></argument>, <argument><expr>"Couldn't get observer service."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>obsSvc</name>-&gt;<name>NotifyObservers</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>nsIChromeRegistry</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>,
                          <argument><expr><name>NS_CHROME_FLUSH_SKINS_TOPIC</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>PRBool</name></type> <name>IsChromeURI</name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aURI</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PRBool</name></type> <name>isChrome</name><init>=<expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>aURI</name>-&gt;<name>SchemeIs</name></name><argument_list>(<argument><expr>"chrome"</expr></argument>, <argument><expr>&amp;<name>isChrome</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>isChrome</name></expr>)</condition><then>
        <return>return <expr><name>PR_TRUE</name></expr>;</return></then></if>
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<comment type="line">// XXXbsmedberg: move this to windowmediator</comment>
<function><type><name>nsresult</name></type> <name><name>nsChromeRegistry</name>::<name>RefreshWindow</name></name><parameter_list>(<param><decl><type><name>nsIDOMWindowInternal</name>*</type> <name>aWindow</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">// Deal with our subframes first.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMWindowCollection</name></expr></argument>&gt;</argument_list></name></type> <name>frames</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aWindow</name>-&gt;<name>GetFrames</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>frames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>length</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>frames</name>-&gt;<name>GetLength</name></name><argument_list>(<argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>j</name></decl>;</decl_stmt>
  <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMWindow</name></expr></argument>&gt;</argument_list></name></type> <name>childWin</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>frames</name>-&gt;<name>Item</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>childWin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMWindowInternal</name></expr></argument>&gt;</argument_list></name></type> <name>childInt</name><argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>childWin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RefreshWindow</name><argument_list>(<argument><expr><name>childInt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
  <comment type="line">// Get the DOM document.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMDocument</name></expr></argument>&gt;</argument_list></name></type> <name>domDocument</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aWindow</name>-&gt;<name>GetDocument</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>domDocument</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>domDocument</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDocument</name></expr></argument>&gt;</argument_list></name></type> <name>document</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>domDocument</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>document</name></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <comment type="line">// Deal with the agent sheets first.  Have to do all the style sets by hand.</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name></type> <name>shell</name> <init>= <expr><call><name><name>document</name>-&gt;<name>GetPrimaryShell</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>shell</name></expr>)</condition><then> <block>{
    <comment type="line">// Reload only the chrome URL agent style sheets.</comment>
    <decl_stmt><decl><type><name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsIStyleSheet</name></expr></argument>&gt;</argument_list></name></type> <name>agentSheets</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>shell</name>-&gt;<name>GetAgentStyleSheets</name></name><argument_list>(<argument><expr><name>agentSheets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsIStyleSheet</name></expr></argument>&gt;</argument_list></name></type> <name>newAgentSheets</name></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>PRInt32</name></type> <name>l</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>l</name> &lt; <call><name><name>agentSheets</name>.<name>Count</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>l</name></expr></incr>) <block>{
      <decl_stmt><decl><type><name>nsIStyleSheet</name> *</type><name>sheet</name> <init>= <expr><name><name>agentSheets</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>uri</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rv</name> = <call><name><name>sheet</name>-&gt;<name>GetSheetURI</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>rv</name></expr>;</return></then></if>

      <if>if <condition>(<expr><call><name>IsChromeURI</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="line">// Reload the sheet.</comment>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsICSSStyleSheet</name></expr></argument>&gt;</argument_list></name></type> <name>newSheet</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name><name>document</name>-&gt;<name>LoadChromeSheetSync</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>,
                                           <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>newSheet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>rv</name></expr>;</return></then></if>
        <if>if <condition>(<expr><name>newSheet</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>rv</name> = <call><name><name>newAgentSheets</name>.<name>AppendObject</name></name><argument_list>(<argument><expr><name>newSheet</name></expr></argument>)</argument_list></call> ? <name>NS_OK</name> : <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt>
          <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>rv</name></expr>;</return></then></if>
        }</block></then></if>
      }</block></then>
      <else>else <block>{  <comment type="line">// Just use the same sheet.</comment>
        <expr_stmt><expr><name>rv</name> = <call><name><name>newAgentSheets</name>.<name>AppendObject</name></name><argument_list>(<argument><expr><name>sheet</name></expr></argument>)</argument_list></call> ? <name>NS_OK</name> : <name>NS_ERROR_FAILURE</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>rv</name></expr>;</return></then></if>
      }</block></else></if>
    }</block></for>

    <expr_stmt><expr><name>rv</name> = <call><name><name>shell</name>-&gt;<name>SetAgentStyleSheets</name></name><argument_list>(<argument><expr><name>newAgentSheets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="line">// Build an array of nsIURIs of style sheets we need to load.</comment>
  <decl_stmt><decl><type><name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsIStyleSheet</name></expr></argument>&gt;</argument_list></name></type> <name>oldSheets</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMArray</name><argument_list>&lt;<argument><expr><name>nsIStyleSheet</name></expr></argument>&gt;</argument_list></name></type> <name>newSheets</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>count</name> <init>= <expr><call><name><name>document</name>-&gt;<name>GetNumberOfStyleSheets</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// Iterate over the style sheets.</comment>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
    <comment type="line">// Get the style sheet</comment>
    <decl_stmt><decl><type><name>nsIStyleSheet</name> *</type><name>styleSheet</name> <init>= <expr><call><name><name>document</name>-&gt;<name>GetStyleSheetAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name><name>oldSheets</name>.<name>AppendObject</name></name><argument_list>(<argument><expr><name>styleSheet</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return>
    }</block></then></if>
  }</block></for>

  <comment type="line">// Iterate over our old sheets and kick off a sync load of the new</comment>
  <comment type="line">// sheet if and only if it's a chrome URL.</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsICSSStyleSheet</name></expr></argument>&gt;</argument_list></name></type> <name>sheet</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name><name>oldSheets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsIURI</name>*</type> <name>uri</name> <init>= <expr><name>sheet</name> ? <call><name><name>sheet</name>-&gt;<name>GetOriginalURI</name></name><argument_list>()</argument_list></call> : <name>nsnull</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>uri</name> &amp;&amp; <call><name>IsChromeURI</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <comment type="line">// Reload the sheet.</comment>
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsICSSStyleSheet</name></expr></argument>&gt;</argument_list></name></type> <name>newSheet</name></decl>;</decl_stmt>
      <comment type="line">// XXX what about chrome sheets that have a title or are disabled?  This</comment>
      <comment type="line">// only works by sheer dumb luck.</comment>
      <expr_stmt><expr><call><name><name>document</name>-&gt;<name>LoadChromeSheetSync</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>newSheet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// Even if it's null, we put in in there.</comment>
      <expr_stmt><expr><call><name><name>newSheets</name>.<name>AppendObject</name></name><argument_list>(<argument><expr><name>newSheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
      <comment type="line">// Just use the same sheet.</comment>
      <expr_stmt><expr><call><name><name>newSheets</name>.<name>AppendObject</name></name><argument_list>(<argument><expr><name>sheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></for>

  <comment type="line">// Now notify the document that multiple sheets have been added and removed.</comment>
  <expr_stmt><expr><call><name><name>document</name>-&gt;<name>UpdateStyleSheets</name></name><argument_list>(<argument><expr><name>oldSheets</name></expr></argument>, <argument><expr><name>newSheets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsChromeRegistry</name>::<name>FlushAllCaches</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIObserverService</name></expr></argument>&gt;</argument_list></name></type> <name>obsSvc</name> <init>=
    <expr><call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/observer-service;1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>obsSvc</name></expr></argument>, <argument><expr>"Couldn't get observer service."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>obsSvc</name>-&gt;<name>NotifyObservers</name></name><argument_list>(<argument><expr>(<name>nsIChromeRegistry</name>*) <name>this</name></expr></argument>,
                          <argument><expr><name>NS_CHROME_FLUSH_TOPIC</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>  

<comment type="line">// xxxbsmedberg Move me to nsIWindowMediator</comment>
<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsChromeRegistry</name>::<name>ReloadChrome</name></name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>FlushAllCaches</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Do a reload of all top level windows.</comment>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><name>NS_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Get the window mediator</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIWindowMediator</name></expr></argument>&gt;</argument_list></name></type> <name>windowMediator</name>
    <argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_WINDOWMEDIATOR_CONTRACTID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>windowMediator</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISimpleEnumerator</name></expr></argument>&gt;</argument_list></name></type> <name>windowEnumerator</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>rv</name> = <call><name><name>windowMediator</name>-&gt;<name>GetEnumerator</name></name><argument_list>(<argument><expr><name>nsnull</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>windowEnumerator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <comment type="line">// Get each dom window</comment>
      <decl_stmt><decl><type><name>PRBool</name></type> <name>more</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rv</name> = <call><name><name>windowEnumerator</name>-&gt;<name>HasMoreElements</name></name><argument_list>(<argument><expr>&amp;<name>more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>rv</name></expr>;</return></then></if>
      <while>while <condition>(<expr><name>more</name></expr>)</condition> <block>{
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>protoWindow</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name><name>windowEnumerator</name>-&gt;<name>GetNext</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>protoWindow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMWindowInternal</name></expr></argument>&gt;</argument_list></name></type> <name>domWindow</name> <init>=
            <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>protoWindow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>domWindow</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIDOMLocation</name></expr></argument>&gt;</argument_list></name></type> <name>location</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>domWindow</name>-&gt;<name>GetLocation</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>location</name></expr>)</condition><then> <block>{
              <expr_stmt><expr><name>rv</name> = <call><name><name>location</name>-&gt;<name>Reload</name></name><argument_list>(<argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>rv</name></expr>;</return></then></if>
            }</block></then></if>
          }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><name>rv</name> = <call><name><name>windowEnumerator</name>-&gt;<name>HasMoreElements</name></name><argument_list>(<argument><expr>&amp;<name>more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>rv</name></expr>;</return></then></if>
      }</block></while>
    }</block></then></if>
  }</block></then></if>
  <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsChromeRegistry</name>::<name>AllowScriptsForPackage</name></name><parameter_list>(<param><decl><type><name>nsIURI</name>*</type> <name>aChromeURI</name></decl></param>, <param><decl><type><name>PRBool</name> *</type><name>aResult</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>
  <expr_stmt><expr>*<name>aResult</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>isChrome</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aChromeURI</name>-&gt;<name>SchemeIs</name></name><argument_list>(<argument><expr>"chrome"</expr></argument>, <argument><expr>&amp;<name>isChrome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>isChrome</name></expr></argument>, <argument><expr>"Non-chrome URI passed to AllowScriptsForPackage!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURL</name></expr></argument>&gt;</argument_list></name></type> <name>url</name> <argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aChromeURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>NS_NOINTERFACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>provider</name></decl>, <decl><type ref="prev"/><name>file</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name>GetProviderAndPath</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<call><name><name>provider</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"skin"</expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr>*<name>aResult</name> = <name>PR_TRUE</name></expr>;</expr_stmt></then></if>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsChromeRegistry</name>::<name>AllowContentToAccess</name></name><parameter_list>(<param><decl><type><name>nsIURI</name> *</type><name>aURI</name></decl></param>, <param><decl><type><name>PRBool</name> *</type><name>aResult</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>aResult</name> = <name>PR_FALSE</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>isChrome</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>aURI</name>-&gt;<name>SchemeIs</name></name><argument_list>(<argument><expr>"chrome"</expr></argument>, <argument><expr>&amp;<name>isChrome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>isChrome</name></expr></argument>, <argument><expr>"Non-chrome URI passed to AllowContentToAccess!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURL</name></expr></argument>&gt;</argument_list></name></type> <name>url</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>url</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Chrome URL doesn't implement nsIURL."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NS_ERROR_UNEXPECTED</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>package</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>url</name>-&gt;<name>GetHostPort</name></name><argument_list>(<argument><expr><name>package</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>PackageEntry</name> *</type><name>entry</name> <init>=
    <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PackageEntry</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>PL_DHashTableOperate</name><argument_list>(<argument><expr>&amp;<name>mPackagesHash</name></expr></argument>,
                                                    <argument><expr>&amp; (<name>nsACString</name>&amp;) <name>package</name></expr></argument>,
                                                    <argument><expr><name>PL_DHASH_LOOKUP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>PL_DHASH_ENTRY_IS_BUSY</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr>*<name>aResult</name> = !!(<name><name>entry</name>-&gt;<name>flags</name></name> &amp; <name><name>PackageEntry</name>::<name>CONTENT_ACCESSIBLE</name></name>)</expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PLDHashOperator</name></type>
<name>RemoveAll</name><parameter_list>(<param><decl><type><name>PLDHashTable</name> *</type><name>table</name></decl></param>, <param><decl><type><name>PLDHashEntryHdr</name> *</type><name>entry</name></decl></param>, <param><decl><type><name>PRUint32</name></type> <name>number</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call>(<name>PLDHashOperator</name>) <argument_list>(<argument><expr><name>PL_DHASH_NEXT</name> | <name>PL_DHASH_REMOVE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>NS_IMETHODIMP</name></type>
<name><name>nsChromeRegistry</name>::<name>CheckForNewChrome</name></name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>PL_DHashTableEnumerate</name><argument_list>(<argument><expr>&amp;<name>mPackagesHash</name></expr></argument>, <argument><expr><name>RemoveAll</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mOverlayHash</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mStyleHash</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mOverrideTable</name>.<name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIProperties</name></expr></argument>&gt;</argument_list></name></type> <name>dirSvc</name> <argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_DIRECTORY_SERVICE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_TRUE</name><argument_list>(<argument><expr><name>dirSvc</name></expr></argument>, <argument><expr><name>NS_ERROR_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// check the extra chrome directories</comment>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISimpleEnumerator</name></expr></argument>&gt;</argument_list></name></type> <name>chromeML</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>dirSvc</name>-&gt;<name>Get</name></name><argument_list>(<argument><expr><name>NS_CHROME_MANIFESTS_FILE_LIST</name></expr></argument>, <argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsISimpleEnumerator</name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>chromeML</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// ok, then simply load all .manifest files in the app chrome dir.</comment>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIFile</name></expr></argument>&gt;</argument_list></name></type> <name>chromeDir</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>dirSvc</name>-&gt;<name>Get</name></name><argument_list>(<argument><expr><name>NS_APP_CHROME_DIR</name></expr></argument>, <argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsIFile</name></expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>chromeDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <return>return <expr><name>rv</name></expr>;</return></then></if>
    <expr_stmt><expr><name>rv</name> = <call><name>NS_NewSingletonEnumerator</name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>chromeML</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>chromeDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <return>return <expr><name>rv</name></expr>;</return></then></if>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>exists</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISupports</name></expr></argument>&gt;</argument_list></name></type> <name>next</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>chromeML</name>-&gt;<name>HasMoreElements</name></name><argument_list>(<argument><expr>&amp;<name>exists</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>exists</name></expr>)</condition> <block>{
    <expr_stmt><expr><call><name><name>chromeML</name>-&gt;<name>GetNext</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name></type> <name>lmanifest</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>lmanifest</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Directory enumerator returned a non-nsILocalFile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    }</block></then></if>

    <decl_stmt><decl><type><name>PRBool</name></type> <name>isDir</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>lmanifest</name>-&gt;<name>IsDirectory</name></name><argument_list>(<argument><expr>&amp;<name>isDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>isDir</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsISimpleEnumerator</name></expr></argument>&gt;</argument_list></name></type> <name>entries</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rv</name> = <call><name><name>lmanifest</name>-&gt;<name>GetDirectoryEntries</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <while>while <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>entries</name>-&gt;<name>HasMoreElements</name></name><argument_list>(<argument><expr>&amp;<name>exists</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>exists</name></expr>)</condition> <block>{
        <expr_stmt><expr><call><name><name>entries</name>-&gt;<name>GetNext</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lmanifest</name> = <call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>lmanifest</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>leafName</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>lmanifest</name>-&gt;<name>GetNativeLeafName</name></name><argument_list>(<argument><expr><name>leafName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><call><name>StringEndsWith</name><argument_list>(<argument><expr><name>leafName</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_CSTRING</name><argument_list>(<argument><expr>".manifest"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rv</name> = <call><name>ProcessManifest</name><argument_list>(<argument><expr><name>lmanifest</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
              <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>path</name></decl>;</decl_stmt>
              <expr_stmt><expr><call><name><name>lmanifest</name>-&gt;<name>GetNativePath</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>LogMessage</name><argument_list>(<argument><expr>"Failed to process chrome manifest '%s'."</expr></argument>,
                         <argument><expr><call><name><name>path</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            }</block></then></if>
          }</block></then></if>
        }</block></then></if>
      }</block></while>
    }</block></then>
    <else>else <block>{
      <expr_stmt><expr><name>rv</name> = <call><name>ProcessManifest</name><argument_list>(<argument><expr><name>lmanifest</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>path</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lmanifest</name>-&gt;<name>GetNativePath</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>LogMessage</name><argument_list>(<argument><expr>"Failed to process chrome manifest: '%s'."</expr></argument>,
                   <argument><expr><call><name><name>path</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></else></if>
  }</block></while>

  <expr_stmt><expr><name>rv</name> = <call><name><name>dirSvc</name>-&gt;<name>Get</name></name><argument_list>(<argument><expr><name>NS_SKIN_MANIFESTS_FILE_LIST</name></expr></argument>, <argument><expr><call><name>NS_GET_IID</name><argument_list>(<argument><expr><name>nsISimpleEnumerator</name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>chromeML</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>NS_OK</name></expr>;</return></then></if>

  <while>while <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><call><name><name>chromeML</name>-&gt;<name>HasMoreElements</name></name><argument_list>(<argument><expr>&amp;<name>exists</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>exists</name></expr>)</condition> <block>{
    <expr_stmt><expr><call><name><name>chromeML</name>-&gt;<name>GetNext</name></name><argument_list>(<argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsILocalFile</name></expr></argument>&gt;</argument_list></name></type> <name>lmanifest</name> <init>= <expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>lmanifest</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Directory enumerator returned a non-nsILocalFile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    }</block></then></if>

    <expr_stmt><expr><name>rv</name> = <call><name>ProcessManifest</name><argument_list>(<argument><expr><name>lmanifest</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>path</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>lmanifest</name>-&gt;<name>GetNativePath</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>LogMessage</name><argument_list>(<argument><expr>"Failed to process chrome manifest: '%s'."</expr></argument>,
                 <argument><expr><call><name><name>path</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></while>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>

<macro><name>NS_IMETHODIMP_</name><argument_list>(<argument>PRBool</argument>)</argument_list></macro>
<macro><name>nsChromeRegistry</name></macro><expr_stmt><expr><name>::<name>WrappersEnabled</name></name>(<name>nsIURI</name> *<name>aURI</name>)
<block>{
  <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURL</name></expr></argument>&gt;</argument_list></name> <call><name>chromeURL</name> <argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
  <if>if <condition>(<expr>!<name>chromeURL</name></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <name>PRBool</name> <name>isChrome</name> = <name>PR_FALSE</name></block></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>chromeURL</name>-&gt;<name>SchemeIs</name></name><argument_list>(<argument><expr>"chrome"</expr></argument>, <argument><expr>&amp;<name>isChrome</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> || !<name>isChrome</name></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>package</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>chromeURL</name>-&gt;<name>GetHostPort</name></name><argument_list>(<argument><expr><name>package</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>PackageEntry</name>*</type> <name>entry</name> <init>=
    <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PackageEntry</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>PL_DHashTableOperate</name><argument_list>(<argument><expr>&amp;<name>mPackagesHash</name></expr></argument>,
                                                    <argument><expr>&amp; (<name>nsACString</name>&amp;) <name>package</name></expr></argument>,
                                                    <argument><expr><name>PL_DHASH_LOOKUP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>PL_DHASH_ENTRY_IS_LIVE</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> &amp;&amp;
         <name><name>entry</name>-&gt;<name>flags</name></name> &amp; <name><name>PackageEntry</name>::<name>XPCNATIVEWRAPPERS</name></name></expr>;</return>
}

nsresult
<macro><name>nsChromeRegistry</name></macro><expr_stmt><expr><name>::<name>SelectLocaleFromPref</name></name>(<name>nsIPrefBranch</name>* <name>prefs</name>)
<block>{
  <expr><name>nsresult</name> <name>rv</name></expr>;
  <expr><name>PRBool</name> <name>matchOSLocale</name> = <name>PR_FALSE</name></expr>, <expr><name>userLocaleOverride</name> = <name>PR_FALSE</name></expr>;
  <expr><call><name><name>prefs</name>-&gt;<name>PrefHasUserValue</name></name><argument_list>(<argument><expr><name>SELECTED_LOCALE_PREF</name></expr></argument>, <argument><expr>&amp;<name>userLocaleOverride</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>rv</name> = <call><name><name>prefs</name>-&gt;<name>GetBoolPref</name></name><argument_list>(<argument><expr><name>MATCH_OS_LOCALE_PREF</name></expr></argument>, <argument><expr>&amp;<name>matchOSLocale</name></expr></argument>)</argument_list></call></expr>;

  <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; <name>matchOSLocale</name> &amp;&amp; !<name>userLocaleOverride</name></expr>)</condition><then> <block>{
    <comment type="line">// compute lang and region code only when needed!</comment>
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>uiLocale</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>getUILangCountry</name><argument_list>(<argument><expr><name>uiLocale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <expr_stmt><expr><name>mSelectedLocale</name> = <name>uiLocale</name></expr>;</expr_stmt></then></if>
  <expr_stmt/></block></then></if>}</block></expr></expr_stmt>
  <else>else <block>{
    <decl_stmt><decl><type><name>nsXPIDLCString</name></type> <name>provider</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>prefs</name>-&gt;<name>GetCharPref</name></name><argument_list>(<argument><expr><name>SELECTED_LOCALE_PREF</name></expr></argument>, <argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>mSelectedLocale</name> = <name>provider</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></else>

  <return>return <expr><name>rv</name></expr>;</return>
}

NS_IMETHODIMP <macro><name>nsChromeRegistry</name></macro><expr_stmt><expr><name>::<name>Observe</name></name>(<name>nsISupports</name> *<name>aSubject</name>, const <name>char</name> *<name>aTopic</name>, const <name>PRUnichar</name> *<name>someData</name>)
<block>{
  <expr><name>nsresult</name> <name>rv</name> = <name>NS_OK</name></expr>;

  <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>NS_PREFBRANCH_PREFCHANGE_TOPIC_ID</name></expr></argument>, <argument><expr><name>aTopic</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrefBranch</name></expr></argument>&gt;</argument_list></name></type> <name>prefs</name> <argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aSubject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>prefs</name></expr></argument>, <argument><expr>"Bad observer call!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>NS_ConvertUTF16toUTF8</name></type> <name>pref</name><parameter_list>(<param><decl><type><name>someData</name></type></decl></param>)</parameter_list>;</function_decl>

    <if>if <condition>(<expr><call><name><name>pref</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr><name>MATCH_OS_LOCALE_PREF</name></expr></argument>)</argument_list></call> ||
        <call><name><name>pref</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr><name>SELECTED_LOCALE_PREF</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>rv</name> = <call><name>SelectLocaleFromPref</name><argument_list>(<argument><expr><name>prefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; <name>mProfileLoaded</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>FlushAllCaches</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt/></block></then></if></block></then></if>}</block></expr></expr_stmt>
    <else>else <if>if <condition>(<expr><call><name><name>pref</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr><name>SELECTED_SKIN_PREF</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsXPIDLCString</name></type> <name>provider</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rv</name> = <call><name><name>prefs</name>-&gt;<name>GetCharPref</name></name><argument_list>(<argument><expr><call><name><name>pref</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getter_Copies</name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Couldn't get new locale pref!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rv</name></expr>;</return>
      }</block></then></if>

      <expr_stmt><expr><name>mSelectedSkin</name> = <name>provider</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RefreshSkins</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Unexpected pref!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else>
  }
  else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr>"command-line-startup"</expr></argument>, <argument><expr><name>aTopic</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsICommandLine</name></expr></argument>&gt;</argument_list></name></type> <name>cmdLine</name> <argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>aSubject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>cmdLine</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsAutoString</name></type> <name>uiLocale</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rv</name> = <call><name><name>cmdLine</name>-&gt;<name>HandleFlagWithParam</name></name><argument_list>(<argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr><name>UILOCALE_CMD_LINE_ARG</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>uiLocale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>uiLocale</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>CopyUTF16toUTF8</name><argument_list>(<argument><expr><name>uiLocale</name></expr></argument>, <argument><expr><name>mSelectedLocale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPrefBranch2</name></expr></argument>&gt;</argument_list></name></type> <name>prefs</name> <argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>NS_PREFSERVICE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>prefs</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>prefs</name>-&gt;<name>RemoveObserver</name></name><argument_list>(<argument><expr><name>SELECTED_LOCALE_PREF</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
    }</block></then></if>
  }</block></then>
  <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr>"profile-initial-state"</expr></argument>, <argument><expr><name>aTopic</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>mProfileLoaded</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
  }</block></then>
  <else>else <block>{
    <expr_stmt><expr><call><name>NS_ERROR</name><argument_list>(<argument><expr>"Unexpected observer topic!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if></else></if>

  <return>return <expr><name>rv</name></expr>;</return>
}

nsresult
<macro><name>nsChromeRegistry</name></macro><expr_stmt><expr><name>::<name>ProcessManifest</name></name>(<name>nsILocalFile</name>* <name>aManifest</name>, <name>PRBool</name> <name>aSkinOnly</name>)
<block>{
  <expr><name>nsresult</name> <name>rv</name></expr>;

  <expr><name>PRFileDesc</name>* <name>fd</name></expr>;
  <expr><name>rv</name> = <call><name><name>aManifest</name>-&gt;<name>OpenNSPRFileDesc</name></name><argument_list>(<argument><expr><name>PR_RDONLY</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>fd</name></expr></argument>)</argument_list></call></expr>;
  <expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>PRInt32</name> <name>n</name></expr>, <expr><name>size</name></expr>;
  <expr><name>char</name> *<name>buf</name></expr>;

  <expr><name>size</name> = <call><name>PR_Available</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;
  <if>if <condition>(<expr><name>size</name> == -1</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_UNEXPECTED</name></expr>;</expr_stmt>
    <goto>goto <name>mend</name>;</goto>
  <expr_stmt/></block></then></if>}</block>

  <name>buf</name> = (<name>char</name> *) <call><name>malloc</name><argument_list>(<argument><expr><name>size</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>buf</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>rv</name> = <name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>mend</name>;</goto>
  }</block></then></if>

  <expr_stmt><expr><name>n</name> = <call><name>PR_Read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>n</name> &gt; 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>size</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>ProcessManifestBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>aManifest</name></expr></argument>, <argument><expr><name>aSkinOnly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>mend</name>:</label>
  <expr_stmt><expr><call><name>PR_Close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rv</name></expr>;</return>
}

static <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>kWhitespace</name><index>[]</index></name> <init>= <expr>"\t "</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>kNewlines</name><index>[]</index></name>   <init>= <expr>"\r\n"</expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Check for a modifier flag of the following forms:
 *   "flag"   (same as "true")
 *   "flag=yes|true|1"
 *   "flag="no|false|0"
 * @param aFlag The flag to compare.
 * @param aData The tokenized data to check; this is lowercased
 *              before being passed in.
 * @param aResult If the flag is found, the value is assigned here.
 * @return Whether the flag was handled.
 */</comment>
<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>CheckFlag</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsSubstring</name>&amp;</type> <name>aFlag</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsSubstring</name>&amp;</type> <name>aData</name></decl></param>, <param><decl><type><name>PRBool</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<call><name>StringBeginsWith</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><name>aFlag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <if>if <condition>(<expr><call><name><name>aFlag</name>.<name>Length</name></name><argument_list>()</argument_list></call> == <call><name><name>aData</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <comment type="line">// the data is simply "flag", which is the same as "flag=yes"</comment>
    <expr_stmt><expr><name>aResult</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    <return>return <expr><name>PR_TRUE</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><call><name><name>aData</name>.<name>CharAt</name></name><argument_list>(<argument><expr><call><name><name>aFlag</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> != '='</expr>)</condition><then> <block>{
    <comment type="line">// the data is "flag2=", which is not anything we care about</comment>
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  }</block></then></if>

  <if>if <condition>(<expr><call><name><name>aData</name>.<name>Length</name></name><argument_list>()</argument_list></call> == <call><name><name>aFlag</name>.<name>Length</name></name><argument_list>()</argument_list></call> + 1</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>aResult</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <return>return <expr><name>PR_TRUE</name></expr>;</return>
  }</block></then></if>

  <switch>switch <condition>(<expr><call><name><name>aData</name>.<name>CharAt</name></name><argument_list>(<argument><expr><call><name><name>aFlag</name>.<name>Length</name></name><argument_list>()</argument_list></call> + 1</expr></argument>)</argument_list></call></expr>)</condition> <block>{
  <case>case <expr>'1'</expr>:
  </case><case>case <expr>'t'</expr>: <comment type="line">//true</comment>
  </case><case>case <expr>'y'</expr>: <comment type="line">//yes</comment>
    <expr_stmt><expr><name>aResult</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
    <return>return <expr><name>PR_TRUE</name></expr>;</return>

  </case><case>case <expr>'0'</expr>:
  </case><case>case <expr>'f'</expr>: <comment type="line">//false</comment>
  </case><case>case <expr>'n'</expr>: <comment type="line">//no</comment>
    <expr_stmt><expr><name>aResult</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    <return>return <expr><name>PR_TRUE</name></expr>;</return>
  </case>}</block></switch>

  <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<enum>enum <name>TriState</name> <block>{
  <decl><name>eUnspecified</name></decl>,
  <decl><name>eBad</name></decl>,
  <decl><name>eOK</name></decl>
}</block>;</enum>

<comment type="block" format="doxygen">/**
 * Check for a modifier flag of the following form:
 *   "flag=string"
 *   "flag!=string"
 * @param aFlag The flag to compare.
 * @param aData The tokenized data to check; this is lowercased
 *              before being passed in.
 * @param aValue The value that is expected.
 * @param aResult If this is "ok" when passed in, this is left alone.
 *                Otherwise if the flag is found it is set to eBad or eOK.
 * @return Whether the flag was handled.
 */</comment>
<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>CheckStringFlag</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsSubstring</name>&amp;</type> <name>aFlag</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsSubstring</name>&amp;</type> <name>aData</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>nsSubstring</name>&amp;</type> <name>aValue</name></decl></param>, <param><decl><type><name>TriState</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name><name>aData</name>.<name>Length</name></name><argument_list>()</argument_list></call> &lt; <call><name><name>aFlag</name>.<name>Length</name></name><argument_list>()</argument_list></call> + 1</expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <if>if <condition>(<expr>!<call><name>StringBeginsWith</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><name>aFlag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>PRBool</name></type> <name>comparison</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name><name>aData</name><index>[<expr><call><name><name>aFlag</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>]</index></name> != '='</expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name><name>aData</name><index>[<expr><call><name><name>aFlag</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>]</index></name> == '!' &amp;&amp;
        <call><name><name>aData</name>.<name>Length</name></name><argument_list>()</argument_list></call> &gt;= <call><name><name>aFlag</name>.<name>Length</name></name><argument_list>()</argument_list></call> + 2 &amp;&amp;
        <name><name>aData</name><index>[<expr><call><name><name>aFlag</name>.<name>Length</name></name><argument_list>()</argument_list></call> + 1</expr>]</index></name> == '='</expr>)</condition><then>
      <expr_stmt><expr><name>comparison</name> = <name>PR_FALSE</name></expr>;</expr_stmt></then>
    <else>else
      <return>return <expr><name>PR_FALSE</name></expr>;</return></else></if>
  }</block></then></if>

  <if>if <condition>(<expr><name>aResult</name> != <name>eOK</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsDependentSubstring</name></type> <name>testdata</name> <init>= <expr><call><name>Substring</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><call><name><name>aFlag</name>.<name>Length</name></name><argument_list>()</argument_list></call> + (<name>comparison</name> ? 1 : 2)</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>testdata</name>.<name>Equals</name></name><argument_list>(<argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <expr_stmt><expr><name>aResult</name> = <name>comparison</name> ? <name>eOK</name> : <name>eBad</name></expr>;</expr_stmt></then>
    <else>else
      <expr_stmt><expr><name>aResult</name> = <name>comparison</name> ? <name>eBad</name> : <name>eOK</name></expr>;</expr_stmt></else></if>
  }</block></then></if>

  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<comment type="block" format="doxygen">/**
 * Check for a modifier flag of the following form:
 *   "flag=version"
 *   "flag&lt;=version"
 *   "flag&lt;version"
 *   "flag&gt;=version"
 *   "flag&gt;version"
 * @param aFlag The flag to compare.
 * @param aData The tokenized data to check; this is lowercased
 *              before being passed in.
 * @param aValue The value that is expected. If this is empty then no
 *               comparison will match.
 * @param aChecker the version checker to use. If null, aResult will always
 *                 be eBad.
 * @param aResult If this is eOK when passed in, this is left alone.
 *                Otherwise if the flag is found it is set to eBad or eOK.
 * @return Whether the flag was handled.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPARE_EQ</name></cpp:macro>    <cpp:value>1 &lt;&lt; 0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPARE_LT</name></cpp:macro>    <cpp:value>1 &lt;&lt; 1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPARE_GT</name></cpp:macro>    <cpp:value>1 &lt;&lt; 2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>PRBool</name></type>
<name>CheckVersionFlag</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsSubstring</name>&amp;</type> <name>aFlag</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nsSubstring</name>&amp;</type> <name>aData</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>nsSubstring</name>&amp;</type> <name>aValue</name></decl></param>, <param><decl><type><name>nsIVersionComparator</name>*</type> <name>aChecker</name></decl></param>,
                 <param><decl><type><name>TriState</name>&amp;</type> <name>aResult</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name><name>aData</name>.<name>Length</name></name><argument_list>()</argument_list></call> &lt; <call><name><name>aFlag</name>.<name>Length</name></name><argument_list>()</argument_list></call> + 2</expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <if>if <condition>(<expr>!<call><name>StringBeginsWith</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><name>aFlag</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <if>if <condition>(<expr><call><name><name>aValue</name>.<name>Length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>aResult</name> != <name>eOK</name></expr>)</condition><then>
      <expr_stmt><expr><name>aResult</name> = <name>eBad</name></expr>;</expr_stmt></then></if>
    <return>return <expr><name>PR_TRUE</name></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>PRUint32</name></type> <name>comparison</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>testdata</name></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name><name>aData</name><index>[<expr><call><name><name>aFlag</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>)</condition> <block>{
  <case>case <expr>'='</expr>:
    <expr_stmt><expr><name>comparison</name> = <name>COMPARE_EQ</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>testdata</name> = <call><name>Substring</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><call><name><name>aFlag</name>.<name>Length</name></name><argument_list>()</argument_list></call> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>

  </case><case>case <expr>'&lt;'</expr>:
    <if>if <condition>(<expr><name><name>aData</name><index>[<expr><call><name><name>aFlag</name>.<name>Length</name></name><argument_list>()</argument_list></call> + 1</expr>]</index></name> == '='</expr>)</condition><then> <block>{
      <expr_stmt><expr><name>comparison</name> = <name>COMPARE_EQ</name> | <name>COMPARE_LT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>testdata</name> = <call><name>Substring</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><call><name><name>aFlag</name>.<name>Length</name></name><argument_list>()</argument_list></call> + 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
      <expr_stmt><expr><name>comparison</name> = <name>COMPARE_LT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>testdata</name> = <call><name>Substring</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><call><name><name>aFlag</name>.<name>Length</name></name><argument_list>()</argument_list></call> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <break>break;</break>

  </case><case>case <expr>'&gt;'</expr>:
    <if>if <condition>(<expr><name><name>aData</name><index>[<expr><call><name><name>aFlag</name>.<name>Length</name></name><argument_list>()</argument_list></call> + 1</expr>]</index></name> == '='</expr>)</condition><then> <block>{
      <expr_stmt><expr><name>comparison</name> = <name>COMPARE_EQ</name> | <name>COMPARE_GT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>testdata</name> = <call><name>Substring</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><call><name><name>aFlag</name>.<name>Length</name></name><argument_list>()</argument_list></call> + 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
      <expr_stmt><expr><name>comparison</name> = <name>COMPARE_GT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>testdata</name> = <call><name>Substring</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><call><name><name>aFlag</name>.<name>Length</name></name><argument_list>()</argument_list></call> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <break>break;</break>

  </case><default>default:
    <return>return <expr><name>PR_FALSE</name></expr>;</return>
  </default>}</block></switch>

  <if>if <condition>(<expr><call><name><name>testdata</name>.<name>Length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <if>if <condition>(<expr><name>aResult</name> != <name>eOK</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr>!<name>aChecker</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>aResult</name> = <name>eBad</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
      <decl_stmt><decl><type><name>PRInt32</name></type> <name>c</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name> <init>= <expr><call><name><name>aChecker</name>-&gt;<name>Compare</name></name><argument_list>(<argument><expr><call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><name>aValue</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><call><name>NS_ConvertUTF16toUTF8</name><argument_list>(<argument><expr><name>testdata</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>aResult</name> = <name>eBad</name></expr>;</expr_stmt>
      }</block></then>
      <else>else <block>{
        <if>if <condition>(<expr>(<name>c</name> == 0 &amp;&amp; <name>comparison</name> &amp; <name>COMPARE_EQ</name>) ||
            (<name>c</name> &lt; 0 &amp;&amp; <name>comparison</name> &amp; <name>COMPARE_LT</name>) ||
            (<name>c</name> &gt; 0 &amp;&amp; <name>comparison</name> &amp; <name>COMPARE_GT</name>)</expr>)</condition><then>
          <expr_stmt><expr><name>aResult</name> = <name>eOK</name></expr>;</expr_stmt></then>
        <else>else
          <expr_stmt><expr><name>aResult</name> = <name>eBad</name></expr>;</expr_stmt></else></if>
      }</block></else></if>
    }</block></else></if>
  }</block></then></if>

  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>EnsureLowerCase</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>aBuf</name></decl></param>)</parameter_list>
<block>{
  <for>for (<init>;</init> <condition><expr>*<name>aBuf</name></expr>;</condition> <incr><expr>++<name>aBuf</name></expr></incr>) <block>{
    <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr>*<name>aBuf</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>ch</name> &gt;= 'A' &amp;&amp; <name>ch</name> &lt;= 'Z'</expr>)</condition><then>
      <expr_stmt><expr>*<name>aBuf</name> = <name>ch</name> + 'a' - 'A'</expr>;</expr_stmt></then></if>
  }</block></for>
}</block></function>

<function><type><name>nsresult</name></type>
<name><name>nsChromeRegistry</name>::<name>ProcessManifestBuffer</name></name><parameter_list>(<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>PRInt32</name></type> <name>length</name></decl></param>,
                                        <param><decl><type><name>nsILocalFile</name>*</type> <name>aManifest</name></decl></param>,
                                        <param><decl><type><name>PRBool</name></type> <name>aSkinOnly</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>nsresult</name></type> <name>rv</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>NS_NAMED_LITERAL_STRING</name><argument_list>(<argument><expr><name>kPlatform</name></expr></argument>, <argument><expr>"platform"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_NAMED_LITERAL_STRING</name><argument_list>(<argument><expr><name>kXPCNativeWrappers</name></expr></argument>, <argument><expr>"xpcnativewrappers"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_NAMED_LITERAL_STRING</name><argument_list>(<argument><expr><name>kContentAccessible</name></expr></argument>, <argument><expr>"contentaccessible"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_NAMED_LITERAL_STRING</name><argument_list>(<argument><expr><name>kApplication</name></expr></argument>, <argument><expr>"application"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_NAMED_LITERAL_STRING</name><argument_list>(<argument><expr><name>kAppVersion</name></expr></argument>, <argument><expr>"appversion"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_NAMED_LITERAL_STRING</name><argument_list>(<argument><expr><name>kOs</name></expr></argument>, <argument><expr>"os"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_NAMED_LITERAL_STRING</name><argument_list>(<argument><expr><name>kOsVersion</name></expr></argument>, <argument><expr>"osversion"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIIOService</name></expr></argument>&gt;</argument_list></name></type> <name>io</name> <argument_list>(<argument><expr><call><name>do_GetIOService</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>io</name></expr>)</condition><then> <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIProtocolHandler</name></expr></argument>&gt;</argument_list></name></type> <name>ph</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>io</name>-&gt;<name>GetProtocolHandler</name></name><argument_list>(<argument><expr>"resource"</expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIResProtocolHandler</name></expr></argument>&gt;</argument_list></name></type> <name>rph</name> <argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>rph</name></expr>)</condition><then> <return>return <expr><name>NS_ERROR_FAILURE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>manifestURI</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rv</name> = <call><name><name>io</name>-&gt;<name>NewFileURI</name></name><argument_list>(<argument><expr><name>aManifest</name></expr></argument>, <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXPConnect</name></expr></argument>&gt;</argument_list></name></type> <name>xpc</name> <argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/js/xpc/XPConnect;1"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIVersionComparator</name></expr></argument>&gt;</argument_list></name></type> <name>vc</name> <argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr>"@mozilla.org/xpcom/version-comparator;1"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>appID</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>appVersion</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>osTarget</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXULAppInfo</name></expr></argument>&gt;</argument_list></name></type> <name>xapp</name> <argument_list>(<argument><expr><call><name>do_GetService</name><argument_list>(<argument><expr><name>XULAPPINFO_SERVICE_CONTRACTID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>xapp</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name><name>xapp</name>-&gt;<name>GetID</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <expr_stmt><expr><call><name>CopyUTF8toUTF16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>appID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name>rv</name> = <call><name><name>xapp</name>-&gt;<name>GetVersion</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <expr_stmt><expr><call><name>CopyUTF8toUTF16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>appVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    
    <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIXULRuntime</name></expr></argument>&gt;</argument_list></name></type> <name>xruntime</name> <argument_list>(<argument><expr><call><name>do_QueryInterface</name><argument_list>(<argument><expr><name>xapp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>xruntime</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>rv</name> = <call><name><name>xruntime</name>-&gt;<name>GetOS</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>CopyUTF8toUTF16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>osTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ToLowerCase</name><argument_list>(<argument><expr><name>osTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>
  
  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>osVersion</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>OSVERSIONINFO</name></type> <name>info</name> <init>= <expr><block>{ <expr>sizeof(<name>OSVERSIONINFO</name>)</expr> }</block></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>GetVersionEx</name><argument_list>(<argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>nsTextFormatter</name>::<name>ssprintf</name></name><argument_list>(<argument><expr><name>osVersion</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"%ld.%ld"</expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>,
                                         <argument><expr><name><name>info</name>.<name>dwMajorVersion</name></name></expr></argument>,
                                         <argument><expr><name><name>info</name>.<name>dwMinorVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XP_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name>SInt32</name></type> <name>majorVersion</name></decl>, <decl><type ref="prev"/><name>minorVersion</name></decl>;</decl_stmt>
  <if>if <condition>(<expr>(<call><name>Gestalt</name><argument_list>(<argument><expr><name>gestaltSystemVersionMajor</name></expr></argument>, <argument><expr>&amp;<name>majorVersion</name></expr></argument>)</argument_list></call> == <name>noErr</name>) &amp;&amp;
      (<call><name>Gestalt</name><argument_list>(<argument><expr><name>gestaltSystemVersionMinor</name></expr></argument>, <argument><expr>&amp;<name>minorVersion</name></expr></argument>)</argument_list></call> == <name>noErr</name>)</expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>nsTextFormatter</name>::<name>ssprintf</name></name><argument_list>(<argument><expr><name>osVersion</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"%ld.%ld"</expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>,
                                         <argument><expr><name>majorVersion</name></expr></argument>,
                                         <argument><expr><name>minorVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MOZ_WIDGET_GTK2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><call><name><name>nsTextFormatter</name>::<name>ssprintf</name></name><argument_list>(<argument><expr><name>osVersion</name></expr></argument>, <argument><expr><call><name>NS_LITERAL_STRING</name><argument_list>(<argument><expr>"%ld.%ld"</expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>,
                                       <argument><expr><name>gtk_major_version</name></expr></argument>,
                                       <argument><expr><name>gtk_minor_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>char</name> *</type><name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>newline</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRUint32</name></type> <name>line</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

  <comment type="line">// outer loop tokenizes by newline</comment>
  <while>while <condition>(<expr><name>nsnull</name> != (<name>token</name> = <call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>newline</name></expr></argument>, <argument><expr><name>kNewlines</name></expr></argument>, <argument><expr>&amp;<name>newline</name></expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
    <expr_stmt><expr>++<name>line</name></expr>;</expr_stmt>

    <if>if <condition>(<expr>*<name>token</name> == '#'</expr>)</condition><then> <comment type="line">// ignore lines that begin with # as comments</comment>
      <continue>continue;</continue></then></if>

    <decl_stmt><decl><type><name>char</name> *</type><name>whitespace</name> <init>= <expr><name>token</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>token</name> = <call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>token</name></expr>)</condition><then> <continue>continue;</continue></then></if>

    <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"content"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>aSkinOnly</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: Ignoring content registration in skin-only manifest."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>
      <decl_stmt><decl><type><name>char</name> *</type><name>package</name> <init>= <expr><call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> *</type><name>uri</name>     <init>= <expr><call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>package</name> || !<name>uri</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: Malformed content registration."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>

      <expr_stmt><expr><call><name>EnsureLowerCase</name><argument_list>(<argument><expr><name>package</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// NOTE: We check for platform and xpcnativewrappers modifiers on</comment>
      <comment type="line">// content packages, but they are *applied* to content|skin|locale.</comment>

      <decl_stmt><decl><type><name>PRBool</name></type> <name>platform</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>PRBool</name></type> <name>xpcNativeWrappers</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>PRBool</name></type> <name>contentAccessible</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stAppVersion</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stApp</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stOsVersion</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stOs</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>PRBool</name></type> <name>badFlag</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>

      <while>while <condition>(<expr><name>nsnull</name> != (<name>token</name> = <call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call>) &amp;&amp;
             !<name>badFlag</name></expr>)</condition> <block>{
        <function_decl><type><name>NS_ConvertASCIItoUTF16</name></type> <name>wtoken</name><parameter_list>(<param><decl><type><name>token</name></type></decl></param>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name>ToLowerCase</name><argument_list>(<argument><expr><name>wtoken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>CheckFlag</name><argument_list>(<argument><expr><name>kPlatform</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>platform</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckFlag</name><argument_list>(<argument><expr><name>kXPCNativeWrappers</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>xpcNativeWrappers</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckFlag</name><argument_list>(<argument><expr><name>kContentAccessible</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>contentAccessible</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckStringFlag</name><argument_list>(<argument><expr><name>kApplication</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>appID</name></expr></argument>, <argument><expr><name>stApp</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckStringFlag</name><argument_list>(<argument><expr><name>kOs</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>osTarget</name></expr></argument>, <argument><expr><name>stOs</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckVersionFlag</name><argument_list>(<argument><expr><name>kOsVersion</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>osVersion</name></expr></argument>, <argument><expr><name>vc</name></expr></argument>, <argument><expr><name>stOsVersion</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckVersionFlag</name><argument_list>(<argument><expr><name>kAppVersion</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>appVersion</name></expr></argument>, <argument><expr><name>vc</name></expr></argument>, <argument><expr><name>stAppVersion</name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <continue>continue;</continue></then></if>

        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: Unrecognized chrome registration modifier '%s'."</expr></argument>,
                              <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>badFlag</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
      }</block></while>

      <if>if <condition>(<expr><name>badFlag</name> || <name>stApp</name> == <name>eBad</name> || <name>stAppVersion</name> == <name>eBad</name> || 
          <name>stOs</name> == <name>eBad</name> || <name>stOsVersion</name> == <name>eBad</name></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>resolved</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rv</name> = <call><name><name>io</name>-&gt;<name>NewURI</name></name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>manifestURI</name></expr></argument>,
                      <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>resolved</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <if>if <condition>(<expr>!<call><name>CanLoadResource</name><argument_list>(<argument><expr><name>resolved</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>resolved</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: cannot register non-local URI '%s' as content."</expr></argument>,
                              <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>

      <decl_stmt><decl><type><name>PackageEntry</name>*</type> <name>entry</name> <init>=
        <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PackageEntry</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>PL_DHashTableOperate</name><argument_list>(<argument><expr>&amp;<name>mPackagesHash</name></expr></argument>,
                                                            <argument><expr>&amp; (const <name>nsACString</name>&amp;) <call><name>nsDependentCString</name><argument_list>(<argument><expr><name>package</name></expr></argument>)</argument_list></call></expr></argument>,
                                                            <argument><expr><name>PL_DHASH_ADD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

      <expr_stmt><expr><name><name>entry</name>-&gt;<name>baseURI</name></name> = <name>resolved</name></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>platform</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>entry</name>-&gt;<name>flags</name></name> |= <name><name>PackageEntry</name>::<name>PLATFORM_PACKAGE</name></name></expr>;</expr_stmt></then></if>
      <if>if <condition>(<expr><name>xpcNativeWrappers</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>entry</name>-&gt;<name>flags</name></name> |= <name><name>PackageEntry</name>::<name>XPCNATIVEWRAPPERS</name></name></expr>;</expr_stmt></then></if>
      <if>if <condition>(<expr><name>contentAccessible</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>entry</name>-&gt;<name>flags</name></name> |= <name><name>PackageEntry</name>::<name>CONTENT_ACCESSIBLE</name></name></expr>;</expr_stmt></then></if>
      <if>if <condition>(<expr><name>xpc</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>nsCAutoString</name></type> <name>urlp</name><argument_list>(<argument><expr>"chrome://"</expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>urlp</name>.<name>Append</name></name><argument_list>(<argument><expr><name>package</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>urlp</name>.<name>Append</name></name><argument_list>(<argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>rv</name> = <call><name><name>xpc</name>-&gt;<name>FlagSystemFilenamePrefix</name></name><argument_list>(<argument><expr><call><name><name>urlp</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>xpcNativeWrappers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"locale"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>aSkinOnly</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: Ignoring locale registration in skin-only manifest."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>
      <decl_stmt><decl><type><name>char</name> *</type><name>package</name>  <init>= <expr><call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> *</type><name>provider</name> <init>= <expr><call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> *</type><name>uri</name>      <init>= <expr><call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>package</name> || !<name>provider</name> || !<name>uri</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: Malformed locale registration."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>

      <expr_stmt><expr><call><name>EnsureLowerCase</name><argument_list>(<argument><expr><name>package</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>TriState</name></type> <name>stAppVersion</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stApp</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stOs</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stOsVersion</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>PRBool</name></type> <name>badFlag</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>

      <while>while <condition>(<expr><name>nsnull</name> != (<name>token</name> = <call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call>) &amp;&amp;
             !<name>badFlag</name></expr>)</condition> <block>{
        <function_decl><type><name>NS_ConvertASCIItoUTF16</name></type> <name>wtoken</name><parameter_list>(<param><decl><type><name>token</name></type></decl></param>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name>ToLowerCase</name><argument_list>(<argument><expr><name>wtoken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>CheckStringFlag</name><argument_list>(<argument><expr><name>kApplication</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>appID</name></expr></argument>, <argument><expr><name>stApp</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckStringFlag</name><argument_list>(<argument><expr><name>kOs</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>osTarget</name></expr></argument>, <argument><expr><name>stOs</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckVersionFlag</name><argument_list>(<argument><expr><name>kOsVersion</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>osVersion</name></expr></argument>, <argument><expr><name>vc</name></expr></argument>, <argument><expr><name>stOsVersion</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckVersionFlag</name><argument_list>(<argument><expr><name>kAppVersion</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>appVersion</name></expr></argument>, <argument><expr><name>vc</name></expr></argument>, <argument><expr><name>stAppVersion</name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <continue>continue;</continue></then></if>

        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: Unrecognized chrome registration modifier '%s'."</expr></argument>,
                              <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>badFlag</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
      }</block></while>

      <if>if <condition>(<expr><name>badFlag</name> || <name>stApp</name> == <name>eBad</name> || <name>stAppVersion</name> == <name>eBad</name> ||
          <name>stOs</name> == <name>eBad</name> || <name>stOsVersion</name> == <name>eBad</name></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>resolved</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rv</name> = <call><name><name>io</name>-&gt;<name>NewURI</name></name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>manifestURI</name></expr></argument>,
                      <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>resolved</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <if>if <condition>(<expr>!<call><name>CanLoadResource</name><argument_list>(<argument><expr><name>resolved</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>resolved</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: cannot register non-local URI '%s' as a locale."</expr></argument>,
                              <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>

      <decl_stmt><decl><type><name>PackageEntry</name>*</type> <name>entry</name> <init>=
        <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PackageEntry</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>PL_DHashTableOperate</name><argument_list>(<argument><expr>&amp;<name>mPackagesHash</name></expr></argument>,
                                                            <argument><expr>&amp; (const <name>nsACString</name>&amp;) <call><name>nsDependentCString</name><argument_list>(<argument><expr><name>package</name></expr></argument>)</argument_list></call></expr></argument>,
                                                            <argument><expr><name>PL_DHASH_ADD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

      <expr_stmt><expr><call><name><name>entry</name>-&gt;<name>locales</name>.<name>SetBase</name></name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>resolved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"skin"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>char</name> *</type><name>package</name>  <init>= <expr><call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> *</type><name>provider</name> <init>= <expr><call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> *</type><name>uri</name>      <init>= <expr><call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>package</name> || !<name>provider</name> || !<name>uri</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: Malformed skin registration."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>

      <expr_stmt><expr><call><name>EnsureLowerCase</name><argument_list>(<argument><expr><name>package</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>TriState</name></type> <name>stAppVersion</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stApp</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stOs</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stOsVersion</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>PRBool</name></type> <name>badFlag</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>

      <while>while <condition>(<expr><name>nsnull</name> != (<name>token</name> = <call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call>) &amp;&amp;
             !<name>badFlag</name></expr>)</condition> <block>{
        <function_decl><type><name>NS_ConvertASCIItoUTF16</name></type> <name>wtoken</name><parameter_list>(<param><decl><type><name>token</name></type></decl></param>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name>ToLowerCase</name><argument_list>(<argument><expr><name>wtoken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>CheckStringFlag</name><argument_list>(<argument><expr><name>kApplication</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>appID</name></expr></argument>, <argument><expr><name>stApp</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckStringFlag</name><argument_list>(<argument><expr><name>kOs</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>osTarget</name></expr></argument>, <argument><expr><name>stOs</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckVersionFlag</name><argument_list>(<argument><expr><name>kOsVersion</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>osVersion</name></expr></argument>, <argument><expr><name>vc</name></expr></argument>, <argument><expr><name>stOsVersion</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckVersionFlag</name><argument_list>(<argument><expr><name>kAppVersion</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>appVersion</name></expr></argument>, <argument><expr><name>vc</name></expr></argument>, <argument><expr><name>stAppVersion</name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <continue>continue;</continue></then></if>

        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: Unrecognized chrome registration modifier '%s'."</expr></argument>,
                              <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>badFlag</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
      }</block></while>

      <if>if <condition>(<expr><name>badFlag</name> || <name>stApp</name> == <name>eBad</name> || <name>stAppVersion</name> == <name>eBad</name> ||
          <name>stOs</name> == <name>eBad</name> || <name>stOsVersion</name> == <name>eBad</name></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>resolved</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rv</name> = <call><name><name>io</name>-&gt;<name>NewURI</name></name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>manifestURI</name></expr></argument>,
                      <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>resolved</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <if>if <condition>(<expr>!<call><name>CanLoadResource</name><argument_list>(<argument><expr><name>resolved</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>resolved</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: cannot register non-local URI '%s' as a skin."</expr></argument>,
                              <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>

      <decl_stmt><decl><type><name>PackageEntry</name>*</type> <name>entry</name> <init>=
        <expr><call><name><name>static_cast</name><argument_list>&lt;<argument><expr><name>PackageEntry</name>*</expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>PL_DHashTableOperate</name><argument_list>(<argument><expr>&amp;<name>mPackagesHash</name></expr></argument>,
                                                            <argument><expr>&amp; (const <name>nsACString</name>&amp;) <call><name>nsDependentCString</name><argument_list>(<argument><expr><name>package</name></expr></argument>)</argument_list></call></expr></argument>,
                                                            <argument><expr><name>PL_DHASH_ADD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then>
        <return>return <expr><name>NS_ERROR_OUT_OF_MEMORY</name></expr>;</return></then></if>

      <expr_stmt><expr><call><name><name>entry</name>-&gt;<name>skins</name>.<name>SetBase</name></name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>resolved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"overlay"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>aSkinOnly</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: Ignoring overlay registration in skin-only manifest."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>
      <decl_stmt><decl><type><name>char</name> *</type><name>base</name>    <init>= <expr><call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> *</type><name>overlay</name> <init>= <expr><call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>base</name> || !<name>overlay</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: malformed chrome overlay instruction."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>

      <decl_stmt><decl><type><name>TriState</name></type> <name>stAppVersion</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stApp</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stOs</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stOsVersion</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>PRBool</name></type> <name>badFlag</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>

      <while>while <condition>(<expr><name>nsnull</name> != (<name>token</name> = <call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call>) &amp;&amp;
             !<name>badFlag</name></expr>)</condition> <block>{
        <function_decl><type><name>NS_ConvertASCIItoUTF16</name></type> <name>wtoken</name><parameter_list>(<param><decl><type><name>token</name></type></decl></param>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name>ToLowerCase</name><argument_list>(<argument><expr><name>wtoken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>CheckStringFlag</name><argument_list>(<argument><expr><name>kApplication</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>appID</name></expr></argument>, <argument><expr><name>stApp</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckStringFlag</name><argument_list>(<argument><expr><name>kOs</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>osTarget</name></expr></argument>, <argument><expr><name>stOs</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckVersionFlag</name><argument_list>(<argument><expr><name>kOsVersion</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>osVersion</name></expr></argument>, <argument><expr><name>vc</name></expr></argument>, <argument><expr><name>stOsVersion</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckVersionFlag</name><argument_list>(<argument><expr><name>kAppVersion</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>appVersion</name></expr></argument>, <argument><expr><name>vc</name></expr></argument>, <argument><expr><name>stAppVersion</name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <continue>continue;</continue></then></if>

        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: Unrecognized chrome registration modifier '%s'."</expr></argument>,
                              <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>badFlag</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
      }</block></while>

      <if>if <condition>(<expr><name>badFlag</name> || <name>stApp</name> == <name>eBad</name> || <name>stAppVersion</name> == <name>eBad</name> ||
          <name>stOs</name> == <name>eBad</name> || <name>stOsVersion</name> == <name>eBad</name></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>baseuri</name></decl>, <decl><type ref="prev"/><name>overlayuri</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rv</name>  = <call><name><name>io</name>-&gt;<name>NewURI</name></name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                       <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>baseuri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rv</name> |= <call><name><name>io</name>-&gt;<name>NewURI</name></name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>overlay</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                       <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>overlayuri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>NS_WARNING</name><argument_list>(<argument><expr>"Could not make URIs for overlay directive. Ignoring."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>

      <if>if <condition>(<expr>!<call><name>CanLoadResource</name><argument_list>(<argument><expr><name>overlayuri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>overlayuri</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: cannot register non-local URI '%s' as an overlay."</expr></argument>,
                              <argument><expr><name>overlay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>

      <expr_stmt><expr><call><name><name>mOverlayHash</name>.<name>Add</name></name><argument_list>(<argument><expr><name>baseuri</name></expr></argument>, <argument><expr><name>overlayuri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"style"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>char</name> *</type><name>base</name>    <init>= <expr><call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> *</type><name>overlay</name> <init>= <expr><call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>base</name> || !<name>overlay</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: malformed chrome style instruction."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>

      <decl_stmt><decl><type><name>TriState</name></type> <name>stAppVersion</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stApp</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stOs</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stOsVersion</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>PRBool</name></type> <name>badFlag</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>

      <while>while <condition>(<expr><name>nsnull</name> != (<name>token</name> = <call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call>) &amp;&amp;
             !<name>badFlag</name></expr>)</condition> <block>{
        <function_decl><type><name>NS_ConvertASCIItoUTF16</name></type> <name>wtoken</name><parameter_list>(<param><decl><type><name>token</name></type></decl></param>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name>ToLowerCase</name><argument_list>(<argument><expr><name>wtoken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>CheckStringFlag</name><argument_list>(<argument><expr><name>kApplication</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>appID</name></expr></argument>, <argument><expr><name>stApp</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckStringFlag</name><argument_list>(<argument><expr><name>kOs</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>osTarget</name></expr></argument>, <argument><expr><name>stOs</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckVersionFlag</name><argument_list>(<argument><expr><name>kOsVersion</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>osVersion</name></expr></argument>, <argument><expr><name>vc</name></expr></argument>, <argument><expr><name>stOsVersion</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckVersionFlag</name><argument_list>(<argument><expr><name>kAppVersion</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>appVersion</name></expr></argument>, <argument><expr><name>vc</name></expr></argument>, <argument><expr><name>stAppVersion</name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <continue>continue;</continue></then></if>

        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: Unrecognized chrome registration modifier '%s'."</expr></argument>,
                              <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>badFlag</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
      }</block></while>

      <if>if <condition>(<expr><name>badFlag</name> || <name>stApp</name> == <name>eBad</name> || <name>stAppVersion</name> == <name>eBad</name> ||
          <name>stOs</name> == <name>eBad</name> || <name>stOsVersion</name> == <name>eBad</name></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>baseuri</name></decl>, <decl><type ref="prev"/><name>overlayuri</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rv</name>  = <call><name><name>io</name>-&gt;<name>NewURI</name></name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                      <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>baseuri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rv</name> |= <call><name><name>io</name>-&gt;<name>NewURI</name></name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>overlay</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                       <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>overlayuri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <if>if <condition>(<expr>!<call><name>CanLoadResource</name><argument_list>(<argument><expr><name>overlayuri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>overlayuri</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: cannot register non-local URI '%s' as a style overlay."</expr></argument>,
                              <argument><expr><name>overlay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>

      <expr_stmt><expr><call><name><name>mStyleHash</name>.<name>Add</name></name><argument_list>(<argument><expr><name>baseuri</name></expr></argument>, <argument><expr><name>overlayuri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"override"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>aSkinOnly</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: Ignoring override registration in skin-only manifest."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>

      <decl_stmt><decl><type><name>char</name> *</type><name>chrome</name>    <init>= <expr><call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> *</type><name>resolved</name>  <init>= <expr><call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>chrome</name> || !<name>resolved</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: malformed chrome override instruction."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>

      <decl_stmt><decl><type><name>TriState</name></type> <name>stAppVersion</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stApp</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stOs</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stOsVersion</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>PRBool</name></type> <name>badFlag</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>

      <while>while <condition>(<expr><name>nsnull</name> != (<name>token</name> = <call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call>) &amp;&amp;
             !<name>badFlag</name></expr>)</condition> <block>{
        <function_decl><type><name>NS_ConvertASCIItoUTF16</name></type> <name>wtoken</name><parameter_list>(<param><decl><type><name>token</name></type></decl></param>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name>ToLowerCase</name><argument_list>(<argument><expr><name>wtoken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>CheckStringFlag</name><argument_list>(<argument><expr><name>kApplication</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>appID</name></expr></argument>, <argument><expr><name>stApp</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckStringFlag</name><argument_list>(<argument><expr><name>kOs</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>osTarget</name></expr></argument>, <argument><expr><name>stOs</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckVersionFlag</name><argument_list>(<argument><expr><name>kOsVersion</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>osVersion</name></expr></argument>, <argument><expr><name>vc</name></expr></argument>, <argument><expr><name>stOsVersion</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckVersionFlag</name><argument_list>(<argument><expr><name>kAppVersion</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>appVersion</name></expr></argument>, <argument><expr><name>vc</name></expr></argument>, <argument><expr><name>stAppVersion</name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <continue>continue;</continue></then></if>

        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: Unrecognized chrome registration modifier '%s'."</expr></argument>,
                              <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>badFlag</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
      }</block></while>

      <if>if <condition>(<expr><name>badFlag</name> || <name>stApp</name> == <name>eBad</name> || <name>stAppVersion</name> == <name>eBad</name> ||
          <name>stOs</name> == <name>eBad</name> || <name>stOsVersion</name> == <name>eBad</name></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>chromeuri</name></decl>, <decl><type ref="prev"/><name>resolveduri</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rv</name>  = <call><name><name>io</name>-&gt;<name>NewURI</name></name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>chrome</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                      <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>chromeuri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rv</name> |= <call><name><name>io</name>-&gt;<name>NewURI</name></name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>resolved</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>manifestURI</name></expr></argument>,
                       <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>resolveduri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <if>if <condition>(<expr>!<call><name>CanLoadResource</name><argument_list>(<argument><expr><name>resolveduri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>resolveduri</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: cannot register non-local URI '%s' as an override."</expr></argument>,
                              <argument><expr><name>resolved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>

      <expr_stmt><expr><call><name><name>mOverrideTable</name>.<name>Put</name></name><argument_list>(<argument><expr><name>chromeuri</name></expr></argument>, <argument><expr><name>resolveduri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"resource"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>aSkinOnly</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: Ignoring resource registration in skin-only manifest."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>

      <decl_stmt><decl><type><name>char</name> *</type><name>package</name> <init>= <expr><call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> *</type><name>uri</name>     <init>= <expr><call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>package</name> || !<name>uri</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: Malformed resource registration."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>

      <expr_stmt><expr><call><name>EnsureLowerCase</name><argument_list>(<argument><expr><name>package</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>TriState</name></type> <name>stAppVersion</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stApp</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stOsVersion</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TriState</name></type> <name>stOs</name> <init>= <expr><name>eUnspecified</name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>PRBool</name></type> <name>badFlag</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>

      <while>while <condition>(<expr><name>nsnull</name> != (<name>token</name> = <call><name><name>nsCRT</name>::<name>strtok</name></name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr><name>kWhitespace</name></expr></argument>, <argument><expr>&amp;<name>whitespace</name></expr></argument>)</argument_list></call>) &amp;&amp;
             !<name>badFlag</name></expr>)</condition> <block>{
        <function_decl><type><name>NS_ConvertASCIItoUTF16</name></type> <name>wtoken</name><parameter_list>(<param><decl><type><name>token</name></type></decl></param>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name>ToLowerCase</name><argument_list>(<argument><expr><name>wtoken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>CheckStringFlag</name><argument_list>(<argument><expr><name>kApplication</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>appID</name></expr></argument>, <argument><expr><name>stApp</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckStringFlag</name><argument_list>(<argument><expr><name>kOs</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>osTarget</name></expr></argument>, <argument><expr><name>stOs</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckVersionFlag</name><argument_list>(<argument><expr><name>kOsVersion</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>osVersion</name></expr></argument>, <argument><expr><name>vc</name></expr></argument>, <argument><expr><name>stOsVersion</name></expr></argument>)</argument_list></call> ||
            <call><name>CheckVersionFlag</name><argument_list>(<argument><expr><name>kAppVersion</name></expr></argument>, <argument><expr><name>wtoken</name></expr></argument>, <argument><expr><name>appVersion</name></expr></argument>, <argument><expr><name>vc</name></expr></argument>, <argument><expr><name>stAppVersion</name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <continue>continue;</continue></then></if>

        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: Unrecognized chrome registration modifier '%s'."</expr></argument>,
                              <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>badFlag</name> = <name>PR_TRUE</name></expr>;</expr_stmt>
      }</block></while>

      <if>if <condition>(<expr><name>badFlag</name> || <name>stApp</name> == <name>eBad</name> || <name>stAppVersion</name> == <name>eBad</name> || 
          <name>stOs</name> == <name>eBad</name> || <name>stOsVersion</name> == <name>eBad</name></expr>)</condition><then>
        <continue>continue;</continue></then></if>
      
      <function_decl><type><name>nsDependentCString</name></type> <name>host</name><parameter_list>(<param><decl><type><name>package</name></type></decl></param>)</parameter_list>;</function_decl>

      <decl_stmt><decl><type><name>PRBool</name></type> <name>exists</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rv</name> = <call><name><name>rph</name>-&gt;<name>HasSubstitution</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr>&amp;<name>exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>exists</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: Duplicate resource declaration for '%s' ignored."</expr></argument>,
                              <argument><expr><name>package</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>

      <decl_stmt><decl><type><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIURI</name></expr></argument>&gt;</argument_list></name></type> <name>resolved</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rv</name> = <call><name><name>io</name>-&gt;<name>NewURI</name></name><argument_list>(<argument><expr><call><name>nsDependentCString</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>, <argument><expr><name>manifestURI</name></expr></argument>,
                      <argument><expr><call><name>getter_AddRefs</name><argument_list>(<argument><expr><name>resolved</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <if>if <condition>(<expr>!<call><name>CanLoadResource</name><argument_list>(<argument><expr><name>resolved</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>resolved</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                              <argument><expr>"Warning: cannot register non-local URI '%s' as a resource."</expr></argument>,
                              <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      }</block></then></if>

      <expr_stmt><expr><name>rv</name> = <call><name><name>rph</name>-&gt;<name>SetSubstitution</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>resolved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
      <expr_stmt><expr><call><name>LogMessageWithContext</name><argument_list>(<argument><expr><name>manifestURI</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>nsIScriptError</name>::<name>warningFlag</name></name></expr></argument>,
                            <argument><expr>"Warning: Ignoring unrecognized chrome manifest instruction."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
  }</block></while>

  <return>return <expr><name>NS_OK</name></expr>;</return>
}</block></function>
</unit>
