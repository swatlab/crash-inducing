<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="00744b85e7e4da4714ede502dbd00b4a0ff7e25d.cpp"><comment type="block">/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */</comment>
<comment type="block">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is MathML DOM code.
 *
 * The Initial Developer of the Original Code is
 * mozilla.org.
 * Portions created by the Initial Developer are Copyright (C) 2007
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *    Vlad Sukhoy &lt;vladimir.sukhoy@gmail.com&gt; (original developer)
 *    Daniel Kraft &lt;d@domob.eu&gt; (nsMathMLElement patch, attachment 262925)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsMathMLElement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMClassInfoID.h"</cpp:file></cpp:include> <comment type="line">// for eDOMClassInfo_MathElement_id.</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsGkAtoms.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCRT.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsRuleData.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsCSSValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsMappedAttributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsStyleConsts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIEventStateManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPresShellIterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsIPresShell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsPresContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nsDOMClassInfoID.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mozAutoDocUpdate.h"</cpp:file></cpp:include>

<comment type="line">//----------------------------------------------------------------------</comment>
<comment type="line">// nsISupports methods:</comment>

<macro><name>NS_INTERFACE_TABLE_HEAD</name><argument_list>(<argument>nsMathMLElement</argument>)</argument_list></macro>
  <macro><name>NS_NODE_OFFSET_AND_INTERFACE_TABLE_BEGIN</name><argument_list>(<argument>nsMathMLElement</argument>)</argument_list></macro>
    <macro><name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument>nsMathMLElement</argument>, <argument>nsIDOMNode</argument>)</argument_list></macro>
    <macro><name>NS_INTERFACE_TABLE_ENTRY</name><argument_list>(<argument>nsMathMLElement</argument>, <argument>nsIDOMElement</argument>)</argument_list></macro>
  <decl_stmt><decl><type><name>NS_OFFSET_AND_INTERFACE_TABLE_END</name>
  <name>NS_ELEMENT_INTERFACE_TABLE_TO_MAP_SEGUE</name></type>
  <name>NS_INTERFACE_MAP_ENTRY_CONTENT_CLASSINFO</name><argument_list>(<argument><expr><name>MathMLElement</name></expr></argument>)</argument_list>
<name>NS_ELEMENT_INTERFACE_MAP_END</name>

<name>NS_IMPL_ADDREF_INHERITED</name><argument_list>(<argument><expr><name>nsMathMLElement</name></expr></argument>, <argument><expr><name>nsMathMLElementBase</name></expr></argument>)</argument_list>
<name>NS_IMPL_RELEASE_INHERITED</name><argument_list>(<argument><expr><name>nsMathMLElement</name></expr></argument>, <argument><expr><name>nsMathMLElementBase</name></expr></argument>)</argument_list>

<name>nsresult</name>
<name><name>nsMathMLElement</name>::<name>BindToTree</name></name><argument_list>(<argument><expr><name>nsIDocument</name>* <name>aDocument</name></expr></argument>, <argument><expr><name>nsIContent</name>* <name>aParent</name></expr></argument>,
                            <argument><expr><name>nsIContent</name>* <name>aBindingParent</name></expr></argument>,
                            <argument><expr><name>PRBool</name> <name>aCompileEventHandlers</name></expr></argument>)</argument_list>
<argument_list>{
  <argument><expr>static const <name>char</name> <name><name>kMathMLStyleSheetURI</name><index>[]</index></name> = "resource://gre/res/mathml.css"</expr></argument>;

  <argument><expr><name>nsresult</name> <name>rv</name> = <call><name><name>nsMathMLElementBase</name>::<name>BindToTree</name></name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>, <argument><expr><name>aParent</name></expr></argument>,
                                                <argument><expr><name>aBindingParent</name></expr></argument>,
                                                <argument><expr><name>aCompileEventHandlers</name></expr></argument>)</argument_list></call></expr></argument>;
  <argument><expr><call><name>NS_ENSURE_SUCCESS</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>;

  if <argument><expr>(<name>aDocument</name> &amp;&amp; !<call><name><name>aDocument</name>-&gt;<name>GetMathMLEnabled</name></name><argument_list>()</argument_list></call>) <block>{
    <comment type="line">// Enable MathML and setup the style sheet during binding, not element</comment>
    <comment type="line">// construction, because we could move a MathML element from the document</comment>
    <comment type="line">// that created it to another document.</comment>
    <expr><call><name><name>aDocument</name>-&gt;<name>SetMathMLEnabled</name></name><argument_list>()</argument_list></call></expr>;
    <expr><call><name><name>aDocument</name>-&gt;<name>EnsureCatalogStyleSheet</name></name><argument_list>(<argument><expr><name>kMathMLStyleSheetURI</name></expr></argument>)</argument_list></call></expr>;

    <comment type="line">// Rebuild style data for all the presshells, because style system</comment>
    <comment type="line">// optimizations may have taken place assuming MathML was disabled.</comment>
    <comment type="line">// (See nsRuleNode::CheckSpecifiedProperties.)</comment>
    <comment type="line">// nsPresShellIterator skips hidden presshells, but that's OK because</comment>
    <comment type="line">// if we're changing the document for one of those presshells the whole</comment>
    <comment type="line">// presshell will be torn down.</comment>
    <expr><name>nsPresShellIterator</name> <call><name>iter</name><argument_list>(<argument><expr><name>aDocument</name></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>nsCOMPtr</name><argument_list>&lt;<argument><expr><name>nsIPresShell</name></expr></argument>&gt;</argument_list></name> <name>shell</name></expr>;
    <while>while <condition>(<expr>(<name>shell</name> = <call><name><name>iter</name>.<name>GetNextShell</name></name><argument_list>()</argument_list></call>) != <name>nsnull</name></expr>)</condition> <expr_stmt><expr><block>{
      <expr><call><name><name>shell</name>-&gt;<name>GetPresContext</name></name><argument_list>()</argument_list></call>-&gt;<call><name>PostRebuildAllStyleDataEvent</name><argument_list>()</argument_list></call></expr>;
    }</block></expr></expr_stmt></while>
  }</block></expr></argument>

  <return>return <expr><name>rv</name></expr>;</return></argument_list></decl></decl_stmt>
}

PRBool
<macro><name>nsMathMLElement</name></macro><expr_stmt><expr><name>::<name>ParseAttribute</name></name>(<name>PRInt32</name> <name>aNamespaceID</name>,
                                <name>nsIAtom</name>* <name>aAttribute</name>,
                                const <name>nsAString</name>&amp; <name>aValue</name>,
                                <name>nsAttrValue</name>&amp; <name>aResult</name>)
<block>{
  <if>if <condition>(<expr><name>aNamespaceID</name> == <name>kNameSpaceID_None</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>color</name></name> ||
        <name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>mathcolor_</name></name> ||
        <name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>background</name></name> ||
        <name>aAttribute</name> == <name><name>nsGkAtoms</name>::<name>mathbackground_</name></name></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>aResult</name>.<name>ParseColor</name></name><argument_list>(<argument><expr><name>aValue</name></expr></argument>, <argument><expr><call><name>GetOwnerDoc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <expr_stmt/></block></then></if></block></then></if>}</block></expr></expr_stmt>
  }

  return <expr_stmt><expr><call><name><name>nsMathMLElementBase</name>::<name>ParseAttribute</name></name><argument_list>(<argument><expr><name>aNamespaceID</name></expr></argument>, <argument><expr><name>aAttribute</name></expr></argument>,
                                             <argument><expr><name>aValue</name></expr></argument>, <argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

static <decl_stmt><decl><type><name><name>nsGenericElement</name>::<name>MappedAttributeEntry</name></name></type> <name><name>sTokenStyles</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>mathsize_</name></name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>fontsize_</name></name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>mathcolor_</name></name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>color</name></name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>mathbackground_</name></name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>fontfamily_</name></name></expr> }</block></expr>,
  <expr><block>{ <expr><name>nsnull</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>nsGenericElement</name>::<name>MappedAttributeEntry</name></name></type> <name><name>sEnvironmentStyles</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>scriptlevel_</name></name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>scriptminsize_</name></name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>scriptsizemultiplier_</name></name></expr> }</block></expr>,
  <expr><block>{ <expr>&amp;<name><name>nsGkAtoms</name>::<name>background</name></name></expr> }</block></expr>,
  <expr><block>{ <expr><name>nsnull</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>PRBool</name></type>
<name><name>nsMathMLElement</name>::<name>IsAttributeMapped</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsIAtom</name>*</type> <name>aAttribute</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>MappedAttributeEntry</name>* <specifier>const</specifier></type> <name><name>tokenMap</name><index>[]</index></name> <init>= <expr><block>{
    <expr><name>sTokenStyles</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>MappedAttributeEntry</name>* <specifier>const</specifier></type> <name><name>mstyleMap</name><index>[]</index></name> <init>= <expr><block>{
    <expr><name>sTokenStyles</name></expr>,
    <expr><name>sEnvironmentStyles</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  
  <comment type="line">// We don't support mglyph (yet).</comment>
  <decl_stmt><decl><type><name>nsIAtom</name>*</type> <name>tag</name> <init>= <expr><call><name>Tag</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>tag</name> == <name><name>nsGkAtoms</name>::<name>ms_</name></name> || <name>tag</name> == <name><name>nsGkAtoms</name>::<name>mi_</name></name> ||
      <name>tag</name> == <name><name>nsGkAtoms</name>::<name>mn_</name></name> || <name>tag</name> == <name><name>nsGkAtoms</name>::<name>mo_</name></name> ||
      <name>tag</name> == <name><name>nsGkAtoms</name>::<name>mtext_</name></name></expr>)</condition><then>
    <return>return <expr><call><name>FindAttributeDependence</name><argument_list>(<argument><expr><name>aAttribute</name></expr></argument>, <argument><expr><name>tokenMap</name></expr></argument>,
                                   <argument><expr><call><name>NS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>tokenMap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <if>if <condition>(<expr><name>tag</name> == <name><name>nsGkAtoms</name>::<name>mstyle_</name></name></expr>)</condition><then>
    <return>return <expr><call><name>FindAttributeDependence</name><argument_list>(<argument><expr><name>aAttribute</name></expr></argument>, <argument><expr><name>mstyleMap</name></expr></argument>,
                                   <argument><expr><call><name>NS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>mstyleMap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <return>return <expr><name>PR_FALSE</name></expr>;</return>
}</block></function>

<function><type><name>nsMapRuleToAttributesFunc</name></type>
<name><name>nsMathMLElement</name>::<name>GetAttributeMappingFunction</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <comment type="line">// It doesn't really matter what our tag is here, because only attributes</comment>
  <comment type="line">// that satisfy IsAttributeMapped will be stored in the mapped attributes</comment>
  <comment type="line">// list and available to the mapping function</comment>
  <return>return <expr>&amp;<name>MapMathMLAttributesInto</name></expr>;</return>
}</block></function>

<comment type="line">// ================</comment>
<comment type="line">// Utilities for parsing and retrieving numeric values</comment>

<comment type="block">/*
The REC says:
  An explicit plus sign ('+') is not allowed as part of a numeric value
  except when it is specifically listed in the syntax (as a quoted '+'
  or "+"),

  Units allowed
  ID  Description
  em  ems (font-relative unit traditionally used for horizontal lengths)
  ex  exs (font-relative unit traditionally used for vertical lengths)
  px  pixels, or pixel size of a "typical computer display"
  in  inches (1 inch = 2.54 centimeters)
  cm  centimeters
  mm  millimeters
  pt  points (1 point = 1/72 inch)
  pc  picas (1 pica = 12 points)
  %   percentage of default value

Implementation here:
  The numeric value is valid only if it is of the form [-] nnn.nnn
  [h/v-unit]
*/</comment>

<comment type="block">/* static */</comment> <function><type><name>PRBool</name></type>
<name><name>nsMathMLElement</name>::<name>ParseNumericValue</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsString</name>&amp;</type> <name>aString</name></decl></param>,
                                   <param><decl><type><name>nsCSSValue</name>&amp;</type>     <name>aCSSValue</name></decl></param>,
                                   <param><decl><type><name>PRUint32</name></type>        <name>aFlags</name></decl></param>)</parameter_list>
<block>{
  <function_decl><type><name>nsAutoString</name></type> <name>str</name><parameter_list>(<param><decl><type><name>aString</name></type></decl></param>)</parameter_list>;</function_decl>
  <expr_stmt><expr><call><name><name>str</name>.<name>CompressWhitespace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// aString is const in this code...</comment>

  <decl_stmt><decl><type><name>PRInt32</name></type> <name>stringLength</name> <init>= <expr><call><name><name>str</name>.<name>Length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>stringLength</name></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsAutoString</name></type> <name>number</name></decl>, <decl><type ref="prev"/><name>unit</name></decl>;</decl_stmt>

  <comment type="line">// see if the negative sign is there</comment>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PRUnichar</name></type> <name>c</name> <init>= <expr><name><name>str</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>c</name> == '-'</expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>number</name>.<name>Append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>

    <comment type="line">// skip any space after the negative sign</comment>
    <if>if <condition>(<expr><name>i</name> &lt; <name>stringLength</name> &amp;&amp; <call><name><name>nsCRT</name>::<name>IsAsciiSpace</name></name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt></then></if>
  }</block></then></if>

  <comment type="line">// Gather up characters that make up the number</comment>
  <decl_stmt><decl><type><name>PRBool</name></type> <name>gotDot</name> <init>= <expr><name>PR_FALSE</name></expr></init></decl>;</decl_stmt>
  <for>for ( <init>;</init> <condition><expr><name>i</name> &lt; <name>stringLength</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
    <expr_stmt><expr><name>c</name> = <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>gotDot</name> &amp;&amp; <name>c</name> == '.'</expr>)</condition><then>
      <return>return <expr><name>PR_FALSE</name></expr>;</return></then>  <comment type="line">// two dots encountered</comment>
    <else>else <if>if <condition>(<expr><name>c</name> == '.'</expr>)</condition><then>
      <expr_stmt><expr><name>gotDot</name> = <name>PR_TRUE</name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr>!<call><name><name>nsCRT</name>::<name>IsAsciiDigit</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>str</name>.<name>Right</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><name>stringLength</name> - <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// some authors leave blanks before the unit, but that shouldn't</comment>
      <comment type="line">// be allowed, so don't CompressWhitespace on 'unit'.</comment>
      <break>break;</break>
    }</block></then></if></else></if></else></if>
    <expr_stmt><expr><call><name><name>number</name>.<name>Append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <comment type="line">// Convert number to floating point</comment>
  <decl_stmt><decl><type><name>PRInt32</name></type> <name>errorCode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>float</name></type> <name>floatValue</name> <init>= <expr><call><name><name>number</name>.<name>ToFloat</name></name><argument_list>(<argument><expr>&amp;<name>errorCode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>NS_FAILED</name><argument_list>(<argument><expr><name>errorCode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>
  <if>if <condition>(<expr><name>floatValue</name> &lt; 0 &amp;&amp; !(<name>aFlags</name> &amp; <name>PARSE_ALLOW_NEGATIVE</name>)</expr>)</condition><then>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>

  <decl_stmt><decl><type><name>nsCSSUnit</name></type> <name>cssUnit</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name><name>unit</name>.<name>IsEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>aFlags</name> &amp; <name>PARSE_ALLOW_UNITLESS</name></expr>)</condition><then> <block>{
      <comment type="line">// no explicit unit, this is a number that will act as a multiplier</comment>
      <expr_stmt><expr><name>cssUnit</name> = <name>eCSSUnit_Number</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <comment type="line">// We are supposed to have a unit, but there isn't one.</comment>
      <comment type="line">// If the value is 0 we can just call it "pixels" otherwise</comment>
      <comment type="line">// this is illegal.</comment>
      <if>if <condition>(<expr><name>floatValue</name> != 0.0</expr>)</condition><then>
        <return>return <expr><name>PR_FALSE</name></expr>;</return></then></if>
      <expr_stmt><expr><name>cssUnit</name> = <name>eCSSUnit_Pixel</name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name><name>unit</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"%"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name><name>aCSSValue</name>.<name>SetPercentValue</name></name><argument_list>(<argument><expr><name>floatValue</name> / 100.0f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>PR_TRUE</name></expr>;</return>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name><name>unit</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"em"</expr></argument>)</argument_list></call></expr>)</condition><then> <expr_stmt><expr><name>cssUnit</name> = <name>eCSSUnit_EM</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name><name>unit</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"ex"</expr></argument>)</argument_list></call></expr>)</condition><then> <expr_stmt><expr><name>cssUnit</name> = <name>eCSSUnit_XHeight</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name><name>unit</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"px"</expr></argument>)</argument_list></call></expr>)</condition><then> <expr_stmt><expr><name>cssUnit</name> = <name>eCSSUnit_Pixel</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name><name>unit</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"in"</expr></argument>)</argument_list></call></expr>)</condition><then> <expr_stmt><expr><name>cssUnit</name> = <name>eCSSUnit_Inch</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name><name>unit</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"cm"</expr></argument>)</argument_list></call></expr>)</condition><then> <expr_stmt><expr><name>cssUnit</name> = <name>eCSSUnit_Centimeter</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name><name>unit</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"mm"</expr></argument>)</argument_list></call></expr>)</condition><then> <expr_stmt><expr><name>cssUnit</name> = <name>eCSSUnit_Millimeter</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name><name>unit</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"pt"</expr></argument>)</argument_list></call></expr>)</condition><then> <expr_stmt><expr><name>cssUnit</name> = <name>eCSSUnit_Point</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name><name>unit</name>.<name>EqualsLiteral</name></name><argument_list>(<argument><expr>"pc"</expr></argument>)</argument_list></call></expr>)</condition><then> <expr_stmt><expr><name>cssUnit</name> = <name>eCSSUnit_Pica</name></expr>;</expr_stmt></then>
  <else>else <comment type="line">// unexpected unit</comment>
    <return>return <expr><name>PR_FALSE</name></expr>;</return></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

  <expr_stmt><expr><call><name><name>aCSSValue</name>.<name>SetFloatValue</name></name><argument_list>(<argument><expr><name>floatValue</name></expr></argument>, <argument><expr><name>cssUnit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>PR_TRUE</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsMathMLElement</name>::<name>MapMathMLAttributesInto</name></name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nsMappedAttributes</name>*</type> <name>aAttributes</name></decl></param>,
                                         <param><decl><type><name>nsRuleData</name>*</type> <name>aData</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>aData</name>-&gt;<name>mSIDs</name></name> &amp; <call><name>NS_STYLE_INHERIT_BIT</name><argument_list>(<argument><expr><name>Font</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>value</name> <init>=
      <expr><call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>scriptsizemultiplier_</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>value</name> &amp;&amp; <call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eString</name></name> &amp;&amp;
        <call><name><name>aData</name>-&gt;<name>mFontData</name>-&gt;<name>mScriptSizeMultiplier</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsAutoString</name></type> <name>str</name><argument_list>(<argument><expr><call><name><name>value</name>-&gt;<name>GetStringValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>str</name>.<name>CompressWhitespace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// MathML numbers can't have leading '+'</comment>
      <if>if <condition>(<expr><call><name><name>str</name>.<name>Length</name></name><argument_list>()</argument_list></call> &gt; 0 &amp;&amp; <call><name><name>str</name>.<name>CharAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call> != '+'</expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PRInt32</name></type> <name>errorCode</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>floatValue</name> <init>= <expr><call><name><name>str</name>.<name>ToFloat</name></name><argument_list>(<argument><expr>&amp;<name>errorCode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Negative scriptsizemultipliers are not parsed</comment>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>errorCode</name></expr></argument>)</argument_list></call> &amp;&amp; <name>floatValue</name> &gt;= 0.0f</expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mFontData</name>-&gt;<name>mScriptSizeMultiplier</name>.
            <name>SetFloatValue</name></name><argument_list>(<argument><expr><name>floatValue</name></expr></argument>, <argument><expr><name>eCSSUnit_Number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><name>value</name> = <call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>scriptminsize_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>value</name> &amp;&amp; <call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eString</name></name> &amp;&amp;
        <call><name><name>aData</name>-&gt;<name>mFontData</name>-&gt;<name>mScriptMinSize</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>ParseNumericValue</name><argument_list>(<argument><expr><call><name><name>value</name>-&gt;<name>GetStringValue</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><name><name>aData</name>-&gt;<name>mFontData</name>-&gt;<name>mScriptMinSize</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>value</name> = <call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>scriptlevel_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>value</name> &amp;&amp; <call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eString</name></name> &amp;&amp;
        <call><name><name>aData</name>-&gt;<name>mFontData</name>-&gt;<name>mScriptLevel</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsAutoString</name></type> <name>str</name><argument_list>(<argument><expr><call><name><name>value</name>-&gt;<name>GetStringValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>str</name>.<name>CompressWhitespace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name><name>str</name>.<name>Length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>PRInt32</name></type> <name>errorCode</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PRInt32</name></type> <name>intValue</name> <init>= <expr><call><name><name>str</name>.<name>ToInteger</name></name><argument_list>(<argument><expr>&amp;<name>errorCode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>NS_SUCCEEDED</name><argument_list>(<argument><expr><name>errorCode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <comment type="line">// This is kind of cheesy ... if the scriptlevel has a sign,</comment>
          <comment type="line">// then it's a relative value and we store the nsCSSValue as an</comment>
          <comment type="line">// Integer to indicate that. Otherwise we store it as a Number</comment>
          <comment type="line">// to indicate that the scriptlevel is absolute.</comment>
          <decl_stmt><decl><type><name>PRUnichar</name></type> <name>ch</name> <init>= <expr><call><name><name>str</name>.<name>CharAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>ch</name> == '+' || <name>ch</name> == '-'</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mFontData</name>-&gt;<name>mScriptLevel</name>.<name>SetIntValue</name></name><argument_list>(<argument><expr><name>intValue</name></expr></argument>, <argument><expr><name>eCSSUnit_Integer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mFontData</name>-&gt;<name>mScriptLevel</name>.<name>SetFloatValue</name></name><argument_list>(<argument><expr><name>intValue</name></expr></argument>, <argument><expr><name>eCSSUnit_Number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></else></if>
        }</block></then></if>
      }</block></then></if>
    }</block></then></if>

    <decl_stmt><decl><type><name>PRBool</name></type> <name>parseSizeKeywords</name> <init>= <expr><name>PR_TRUE</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>value</name> = <call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>mathsize_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>parseSizeKeywords</name> = <name>PR_FALSE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>value</name> = <call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>fontsize_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>value</name> &amp;&amp; <call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eString</name></name> &amp;&amp;
        <call><name><name>aData</name>-&gt;<name>mFontData</name>-&gt;<name>mSize</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nsAutoString</name></type> <name>str</name><argument_list>(<argument><expr><call><name><name>value</name>-&gt;<name>GetStringValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<call><name>ParseNumericValue</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>aData</name>-&gt;<name>mFontData</name>-&gt;<name>mSize</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &amp;&amp;
          <name>parseSizeKeywords</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>sizes</name><index>[<expr>3</expr>]</index><index>[<expr>7</expr>]</index></name> <init>= <expr><block>{ <expr>"small"</expr>, <expr>"normal"</expr>, <expr>"big"</expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PRInt32</name></type> <name><name>values</name><index>[<expr><call><name>NS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></call></expr>]</index></name> <init>= <expr><block>{
          <expr><name>NS_STYLE_FONT_SIZE_SMALL</name></expr>, <expr><name>NS_STYLE_FONT_SIZE_MEDIUM</name></expr>,
          <expr><name>NS_STYLE_FONT_SIZE_LARGE</name></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>str</name>.<name>CompressWhitespace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>PRInt32</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name>NS_ARRAY_LENGTH</name><argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
          <if>if <condition>(<expr><call><name><name>str</name>.<name>EqualsASCII</name></name><argument_list>(<argument><expr><name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mFontData</name>-&gt;<name>mSize</name>.<name>SetIntValue</name></name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>eCSSUnit_Enumerated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          }</block></then></if>
        }</block></for>
      }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><name>value</name> = <call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>fontfamily_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>value</name> &amp;&amp; <call><name><name>value</name>-&gt;<name>Type</name></name><argument_list>()</argument_list></call> == <name><name>nsAttrValue</name>::<name>eString</name></name> &amp;&amp;
        <call><name><name>aData</name>-&gt;<name>mFontData</name>-&gt;<name>mFamily</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mFontData</name>-&gt;<name>mFamily</name>.<name>SetStringValue</name></name><argument_list>(<argument><expr><call><name><name>value</name>-&gt;<name>GetStringValue</name></name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr><name>eCSSUnit_String</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aData</name>-&gt;<name>mFontData</name>-&gt;<name>mFamilyFromHTML</name></name> = <name>PR_FALSE</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

  <if>if <condition>(<expr><name><name>aData</name>-&gt;<name>mSIDs</name></name> &amp; <call><name>NS_STYLE_INHERIT_BIT</name><argument_list>(<argument><expr><name>Background</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>value</name> <init>=
      <expr><call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>mathbackground_</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>value</name> = <call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>background</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>value</name> &amp;&amp; <call><name><name>aData</name>-&gt;<name>mColorData</name>-&gt;<name>mBackColor</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>nscolor</name></type> <name>color</name></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name><name>value</name>-&gt;<name>GetColorValue</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mColorData</name>-&gt;<name>mBackColor</name>.<name>SetColorValue</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>

  <if>if <condition>(<expr><name><name>aData</name>-&gt;<name>mSIDs</name></name> &amp; <call><name>NS_STYLE_INHERIT_BIT</name><argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>nsAttrValue</name>*</type> <name>value</name> <init>= <expr><call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>mathcolor_</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>value</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>value</name> = <call><name><name>aAttributes</name>-&gt;<name>GetAttr</name></name><argument_list>(<argument><expr><name><name>nsGkAtoms</name>::<name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <decl_stmt><decl><type><name>nscolor</name></type> <name>color</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>value</name> &amp;&amp; <call><name><name>value</name>-&gt;<name>GetColorValue</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> &amp;&amp;
        <call><name><name>aData</name>-&gt;<name>mColorData</name>-&gt;<name>mColor</name>.<name>GetUnit</name></name><argument_list>()</argument_list></call> == <name>eCSSUnit_Null</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>aData</name>-&gt;<name>mColorData</name>-&gt;<name>mColor</name>.<name>SetColorValue</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
}</block></function>

<macro><name>NS_IMPL_ELEMENT_CLONE</name><argument_list>(<argument>nsMathMLElement</argument>)</argument_list></macro>

<function><type><name>PRInt32</name></type>
<name><name>nsMathMLElement</name>::<name>IntrinsicState</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr><call><name><name>nsMathMLElementBase</name>::<name>IntrinsicState</name></name><argument_list>()</argument_list></call> |
    (<name>mIncrementScriptLevel</name> ? <name>NS_EVENT_STATE_INCREMENT_SCRIPT_LEVEL</name> : 0)</expr>;</return>
}</block></function>

<function><type><name>PRBool</name></type>
<name><name>nsMathMLElement</name>::<name>IsNodeOfType</name></name><parameter_list>(<param><decl><type><name>PRUint32</name></type> <name>aFlags</name></decl></param>)</parameter_list> <specifier>const</specifier>
<block>{
  <return>return <expr>!(<name>aFlags</name> &amp; ~(<name>eCONTENT</name> | <name>eELEMENT</name> | <name>eMATHML</name>))</expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name><name>nsMathMLElement</name>::<name>SetIncrementScriptLevel</name></name><parameter_list>(<param><decl><type><name>PRBool</name></type> <name>aIncrementScriptLevel</name></decl></param>,
                                         <param><decl><type><name>PRBool</name></type> <name>aNotify</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>aIncrementScriptLevel</name> == <name>mIncrementScriptLevel</name></expr>)</condition><then>
    <return>return;</return></then></if>
  <expr_stmt><expr><name>mIncrementScriptLevel</name> = <name>aIncrementScriptLevel</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>NS_ASSERTION</name><argument_list>(<argument><expr><name>aNotify</name></expr></argument>, <argument><expr>"We always notify!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>nsIDocument</name>*</type> <name>doc</name> <init>= <expr><call><name>GetCurrentDoc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<name>doc</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <function_decl><type><name>mozAutoDocUpdate</name></type> <name>upd</name><parameter_list>(<param><decl><type><name>doc</name></type></decl></param>, <param><decl><type><name>UPDATE_CONTENT_STATE</name></type></decl></param>, <param><decl><type><name>PR_TRUE</name></type></decl></param>)</parameter_list>;</function_decl>
  <expr_stmt><expr><call><name><name>doc</name>-&gt;<name>ContentStatesChanged</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>nsnull</name></expr></argument>,
                            <argument><expr><name>NS_EVENT_STATE_INCREMENT_SCRIPT_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
