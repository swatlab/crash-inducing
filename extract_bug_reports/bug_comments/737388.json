{"bugs":{"737388":{"comments":[{"is_private":false,"attachment_id":null,"creator":"choller@mozilla.com","time":"2012-03-20T12:53:01Z","author":"choller@mozilla.com","bug_id":737388,"tags":[],"text":"The following test crashes on mozilla-central revision 58a2cd0203ee (options -m -n):\n\n\nfunction toPrinted(value) {\n  if (typeof value == \"xml\") \n    value = value.toXMLString();\n}\nfunction reportCompare (expected, actual, description) {\n  if (typeof description == \"undefined\")\n    description = '';\n    \"', Actual value '\" + toPrinted(actual) + \"' \";\n}\nvar UBound = 0;\nvar actualvalues = [];\nvar expect= '';\nvar expectedvalues = [];\naddThis();\ntest();\nfunction addThis() {\n  expectedvalues[UBound] = expect;\n  UBound++;\n}\nfunction test() {\n  for (var i=(0); i<UBound; i++)\n    reportCompare(expectedvalues[i], actualvalues[i], (arguments)[i]);\n  void Number.NEGATIVE_INFINITY || -1, test();\n}\n\n\nCrash Trace:\n\n==13246== Invalid read of size 8\n==13246==    at 0x422C48: JSString::isAtom() const (String.h:381)\n==13246==    by 0x4255D5: js::CompartmentChecker::check(JSString*) (jscntxtinlines.h:184)\n==13246==    by 0x42566B: js::CompartmentChecker::check(JS::Value const&) (jscntxtinlines.h:192)\n==13246==    by 0x445F44: void js::assertSameCompartment<JS::Value>(JSContext*, JS::Value) (jscntxtinlines.h:254)\n==13246==    by 0x509D79: js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) (jsinterp.cpp:2992)\n==13246==    by 0x4FB710: js::RunScript(JSContext*, JSScript*, js::StackFrame*) (jsinterp.cpp:469)\n==13246==    by 0x4FC254: js::ExecuteKernel(JSContext*, JSScript*, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) (jsinterp.cpp:667)\n==13246==    by 0x4FC462: js::Execute(JSContext*, JSScript*, JSObject&, JS::Value*) (jsinterp.cpp:709)\n==13246==    by 0x441C92: JS_ExecuteScript (jsapi.cpp:5232)\n==13246==    by 0x408A0B: Process(JSContext*, JSObject*, char const*, bool) (js.cpp:478)\n==13246==    by 0x412FF8: ProcessArgs(JSContext*, JSObject*, js::cli::OptionParser*) (js.cpp:4736)\n==13246==    by 0x413270: Shell(JSContext*, js::cli::OptionParser*, char**) (js.cpp:4819)\n==13246==  Address 0x2 is not stack'd, malloc'd or (recently) free'd\n\n\nOpt crash trace:\n\n==11287== Invalid read of size 8\n==11287==    at 0x437C17: JSCompartment::wrap(JSContext*, JS::Value*) (jscompartment.cpp:183)\n==11287==    by 0x44B7DE: AppendWrappedArg::operator()(unsigned int, JS::Value*) (jsexn.cpp:324)\n==11287==    by 0x44BF43: InitExnPrivate(JSContext*, JSObject*, JSString*, JSString*, unsigned int, JSErrorReport*, int) (Stack-inl.h:227)\n==11287==    by 0x44C369: js_ErrorToException(JSContext*, char const*, JSErrorReport*, JSErrorFormatString const* (*)(void*, char const*, unsigned int), void*) (jsexn.cpp:1179)\n==11287==    by 0x433CB3: ReportError(JSContext*, char const*, JSErrorReport*, JSErrorFormatString const* (*)(void*, char const*, unsigned int), void*) (jscntxt.cpp:339)\n==11287==    by 0x434EC7: js_ReportErrorNumberVA(JSContext*, unsigned int, JSErrorFormatString const* (*)(void*, char const*, unsigned int), void*, unsigned int, int, __va_list_tag*) (jscntxt.cpp:723)\n==11287==    by 0x41A184: JS_ReportErrorNumber (jsapi.cpp:6111)\n==11287==    by 0x5EF8CC: js::mjit::stubs::HitStackQuota(js::VMFrame&) (InvokeHelpers.cpp:203)\n==11287==    by 0x403CCAA: ???\n==11287==    by 0x573E5B: js::mjit::EnterMethodJIT(JSContext*, js::StackFrame*, void*, JS::Value*, bool) (MethodJIT.cpp:1052)\n==11287==    by 0x573FA2: js::mjit::JaegerShot(JSContext*, bool) (MethodJIT.cpp:1111)\n==11287==    by 0x47EE8D: js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) (jsinterp.cpp:2730)\n==11287==  Address 0x0 is not stack'd, malloc'd or (recently) free'd","id":6154790,"creation_time":"2012-03-20T12:53:01Z","raw_text":"The following test crashes on mozilla-central revision 58a2cd0203ee (options -m -n):\n\n\nfunction toPrinted(value) {\n  if (typeof value == \"xml\") \n    value = value.toXMLString();\n}\nfunction reportCompare (expected, actual, description) {\n  if (typeof description == \"undefined\")\n    description = '';\n    \"', Actual value '\" + toPrinted(actual) + \"' \";\n}\nvar UBound = 0;\nvar actualvalues = [];\nvar expect= '';\nvar expectedvalues = [];\naddThis();\ntest();\nfunction addThis() {\n  expectedvalues[UBound] = expect;\n  UBound++;\n}\nfunction test() {\n  for (var i=(0); i<UBound; i++)\n    reportCompare(expectedvalues[i], actualvalues[i], (arguments)[i]);\n  void Number.NEGATIVE_INFINITY || -1, test();\n}\n\n\nCrash Trace:\n\n==13246== Invalid read of size 8\n==13246==    at 0x422C48: JSString::isAtom() const (String.h:381)\n==13246==    by 0x4255D5: js::CompartmentChecker::check(JSString*) (jscntxtinlines.h:184)\n==13246==    by 0x42566B: js::CompartmentChecker::check(JS::Value const&) (jscntxtinlines.h:192)\n==13246==    by 0x445F44: void js::assertSameCompartment<JS::Value>(JSContext*, JS::Value) (jscntxtinlines.h:254)\n==13246==    by 0x509D79: js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) (jsinterp.cpp:2992)\n==13246==    by 0x4FB710: js::RunScript(JSContext*, JSScript*, js::StackFrame*) (jsinterp.cpp:469)\n==13246==    by 0x4FC254: js::ExecuteKernel(JSContext*, JSScript*, JSObject&, JS::Value const&, js::ExecuteType, js::StackFrame*, JS::Value*) (jsinterp.cpp:667)\n==13246==    by 0x4FC462: js::Execute(JSContext*, JSScript*, JSObject&, JS::Value*) (jsinterp.cpp:709)\n==13246==    by 0x441C92: JS_ExecuteScript (jsapi.cpp:5232)\n==13246==    by 0x408A0B: Process(JSContext*, JSObject*, char const*, bool) (js.cpp:478)\n==13246==    by 0x412FF8: ProcessArgs(JSContext*, JSObject*, js::cli::OptionParser*) (js.cpp:4736)\n==13246==    by 0x413270: Shell(JSContext*, js::cli::OptionParser*, char**) (js.cpp:4819)\n==13246==  Address 0x2 is not stack'd, malloc'd or (recently) free'd\n\n\nOpt crash trace:\n\n==11287== Invalid read of size 8\n==11287==    at 0x437C17: JSCompartment::wrap(JSContext*, JS::Value*) (jscompartment.cpp:183)\n==11287==    by 0x44B7DE: AppendWrappedArg::operator()(unsigned int, JS::Value*) (jsexn.cpp:324)\n==11287==    by 0x44BF43: InitExnPrivate(JSContext*, JSObject*, JSString*, JSString*, unsigned int, JSErrorReport*, int) (Stack-inl.h:227)\n==11287==    by 0x44C369: js_ErrorToException(JSContext*, char const*, JSErrorReport*, JSErrorFormatString const* (*)(void*, char const*, unsigned int), void*) (jsexn.cpp:1179)\n==11287==    by 0x433CB3: ReportError(JSContext*, char const*, JSErrorReport*, JSErrorFormatString const* (*)(void*, char const*, unsigned int), void*) (jscntxt.cpp:339)\n==11287==    by 0x434EC7: js_ReportErrorNumberVA(JSContext*, unsigned int, JSErrorFormatString const* (*)(void*, char const*, unsigned int), void*, unsigned int, int, __va_list_tag*) (jscntxt.cpp:723)\n==11287==    by 0x41A184: JS_ReportErrorNumber (jsapi.cpp:6111)\n==11287==    by 0x5EF8CC: js::mjit::stubs::HitStackQuota(js::VMFrame&) (InvokeHelpers.cpp:203)\n==11287==    by 0x403CCAA: ???\n==11287==    by 0x573E5B: js::mjit::EnterMethodJIT(JSContext*, js::StackFrame*, void*, JS::Value*, bool) (MethodJIT.cpp:1052)\n==11287==    by 0x573FA2: js::mjit::JaegerShot(JSContext*, bool) (MethodJIT.cpp:1111)\n==11287==    by 0x47EE8D: js::Interpret(JSContext*, js::StackFrame*, js::InterpMode) (jsinterp.cpp:2730)\n==11287==  Address 0x0 is not stack'd, malloc'd or (recently) free'd"},{"is_private":false,"attachment_id":null,"creator":"wmccloskey@mozilla.com","time":"2012-03-21T01:42:41Z","author":"wmccloskey@mozilla.com","bug_id":737388,"tags":[],"text":"I added a print(description) statement to the top of reportCompare and then was able to bisect it to this:\n\nchangeset:   89455:d2107141265f\nuser:        Luke Wagner <luke@mozilla.com>\ndate:        Tue Jan 17 16:35:12 2012 -0800\nsummary:     Bug 730497 - create arguments object eagerly (r=bhackett)\n\nI tried the patch in bug 737575, but it didn't fix the problem.\n\nIt seems like when we access arguments[i] in the JIT, we're getting the value 2 tagged as a string. Marking s-s just in case.","id":6157821,"creation_time":"2012-03-21T01:42:41Z","raw_text":"I added a print(description) statement to the top of reportCompare and then was able to bisect it to this:\n\nchangeset:   89455:d2107141265f\nuser:        Luke Wagner <luke@mozilla.com>\ndate:        Tue Jan 17 16:35:12 2012 -0800\nsummary:     Bug 730497 - create arguments object eagerly (r=bhackett)\n\nI tried the patch in bug 737575, but it didn't fix the problem.\n\nIt seems like when we access arguments[i] in the JIT, we're getting the value 2 tagged as a string. Marking s-s just in case."},{"is_private":false,"attachment_id":607878,"creator":"luke@mozilla.com","time":"2012-03-21T08:48:53Z","author":"luke@mozilla.com","bug_id":737388,"tags":[],"text":"Created attachment 607878\nfix and test\n\nArg, I removed this\n  https://hg.mozilla.org/mozilla-central/rev/85bef04d1258#l14.31\nin the eager args earlier when I had a slightly different approach and then forgot to put it back.\n\nBrian: I don't see why being heavyweight or having an argsobj would force fp->u.numActual to be valid, so, the patch initializes fp->u.numActual in both cases.  Do you know of any good reasons?","id":6158237,"creation_time":"2012-03-21T08:48:53Z","raw_text":"Arg, I removed this\n  https://hg.mozilla.org/mozilla-central/rev/85bef04d1258#l14.31\nin the eager args earlier when I had a slightly different approach and then forgot to put it back.\n\nBrian: I don't see why being heavyweight or having an argsobj would force fp->u.numActual to be valid, so, the patch initializes fp->u.numActual in both cases.  Do you know of any good reasons?"},{"is_private":false,"attachment_id":607878,"creator":"bhackett1024@gmail.com","time":"2012-03-21T12:50:30Z","author":"bhackett1024@gmail.com","bug_id":737388,"tags":[],"text":"Comment on attachment 607878\nfix and test\n\nThat code was going back to when the fp's union could store either nactual or the args obj pointer itself.  If the function is heavyweight then it has an args obj and that pointer should not have been scribbled over by the prologue.  Optimization of arguments accesses for the script would have been avoided in such cases anyways, as it was disabled for any script which args objs have been created for.","id":6158585,"creation_time":"2012-03-21T12:50:30Z","raw_text":"That code was going back to when the fp's union could store either nactual or the args obj pointer itself.  If the function is heavyweight then it has an args obj and that pointer should not have been scribbled over by the prologue.  Optimization of arguments accesses for the script would have been avoided in such cases anyways, as it was disabled for any script which args objs have been created for."},{"is_private":false,"attachment_id":null,"creator":"luke@mozilla.com","time":"2012-03-21T16:34:49Z","author":"luke@mozilla.com","bug_id":737388,"tags":[],"text":"Ah, you're right about the argsobj + the old frame union.  Heavyweightness never forced an arguments object so I think your second explanation (that the optimization was off for heavyweight functions) would be the reason.","id":6159246,"creation_time":"2012-03-21T16:34:49Z","raw_text":"Ah, you're right about the argsobj + the old frame union.  Heavyweightness never forced an arguments object so I think your second explanation (that the optimization was off for heavyweight functions) would be the reason."},{"is_private":false,"attachment_id":null,"creator":"luke@mozilla.com","time":"2012-03-21T16:40:22Z","author":"luke@mozilla.com","bug_id":737388,"tags":[],"text":"https://hg.mozilla.org/integration/mozilla-inbound/rev/9ed51dce1e43","id":6159258,"creation_time":"2012-03-21T16:40:22Z","raw_text":"https://hg.mozilla.org/integration/mozilla-inbound/rev/9ed51dce1e43"},{"is_private":false,"attachment_id":null,"creator":"dveditz@mozilla.com","time":"2012-03-21T17:24:47Z","author":"dveditz@mozilla.com","bug_id":737388,"tags":[],"text":"Looks like we should get this fixed on beta and aurora, but don't need it in Firefox 11 or earlier.","id":6159424,"creation_time":"2012-03-21T17:24:47Z","raw_text":"Looks like we should get this fixed on beta and aurora, but don't need it in Firefox 11 or earlier."},{"is_private":false,"attachment_id":null,"creator":"luke@mozilla.com","time":"2012-03-21T17:29:10Z","author":"luke@mozilla.com","bug_id":737388,"tags":[],"text":"The bug is only on m-c.","id":6159442,"creation_time":"2012-03-21T17:29:10Z","raw_text":"The bug is only on m-c."},{"is_private":false,"attachment_id":null,"creator":"luke@mozilla.com","time":"2012-03-21T22:39:28Z","author":"luke@mozilla.com","bug_id":737388,"tags":[],"text":"*** Bug 737447 has been marked as a duplicate of this bug. ***","id":6160572,"creation_time":"2012-03-21T22:39:28Z","raw_text":""},{"is_private":false,"attachment_id":null,"creator":"luke@mozilla.com","time":"2012-03-21T22:59:09Z","author":"luke@mozilla.com","bug_id":737388,"tags":[],"text":"*** Bug 738065 has been marked as a duplicate of this bug. ***","id":6160634,"creation_time":"2012-03-21T22:59:09Z","raw_text":""},{"is_private":false,"attachment_id":null,"creator":"luke@mozilla.com","time":"2012-03-22T16:32:21Z","author":"luke@mozilla.com","bug_id":737388,"tags":[],"text":"https://hg.mozilla.org/mozilla-central/rev/9ed51dce1e43","id":6162660,"creation_time":"2012-03-22T16:32:21Z","raw_text":"https://hg.mozilla.org/mozilla-central/rev/9ed51dce1e43"},{"is_private":false,"attachment_id":null,"creator":"luke@mozilla.com","time":"2012-03-22T18:49:51Z","author":"luke@mozilla.com","bug_id":737388,"tags":[],"text":"*** Bug 736830 has been marked as a duplicate of this bug. ***","id":6163222,"creation_time":"2012-03-22T18:49:51Z","raw_text":""}]}},"comments":{}}