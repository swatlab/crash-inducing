{"bugs":{"795076":{"comments":[{"is_private":false,"attachment_id":null,"creator":"ehsan@mozilla.com","time":"2012-09-27T19:50:53Z","author":"ehsan@mozilla.com","bug_id":795076,"tags":[],"text":"I got this crash a couple of times when I was loading http://www.einslive.de/ to test another bug:\n\n(gdb) p clazz\n$1 = ('js::Class' *) 0xdadadadadadadada\n(gdb) bt 20\n#0  0x00000001045f66d0 in JS::StatsCellCallback (rt=0x10d423000, data=0x7fff5fbf48f0, thing=0x11a683ac0, traceKind=JSTRACE_OBJECT, thingSize=64) at /Users/ehsanakhgari/moz/inbound/js/src/jsmemorymetrics.cpp:144\n#1  0x0000000104570656 in js::IterateCellCallbackOp::operator() (this=0x7fff5fbf4748, cell=0x11a683ac0) at /Users/ehsanakhgari/moz/inbound/js/src/jsgc.cpp:4784\n#2  0x000000010456f403 in js::gc::ForEachArenaAndCell<js::IterateArenaCallbackOp, js::IterateCellCallbackOp> (compartment=0x10d4e5800, thingKind=js::gc::FINALIZE_OBJECT4_BACKGROUND, arenaOp={rt = 0x10d423000, data = 0x7fff5fbf48f0, callback = 0x1045f6510 <JS::StatsArenaCallback(JSRuntime*, void*, js::gc::Arena*, JSGCTraceKind, unsigned long)>, traceKind = JSTRACE_OBJECT, thingSize = 64}, cellOp={rt = 0x10d423000, data = 0x7fff5fbf48f0, callback = 0x1045f6590 <JS::StatsCellCallback(JSRuntime*, void*, void*, JSGCTraceKind, unsigned long)>, traceKind = JSTRACE_OBJECT, thingSize = 64}) at jsgcinlines.h:378\n#3  0x00000001045633ef in js::IterateCompartmentsArenasCells (rt=0x10d423000, data=0x7fff5fbf48f0, compartmentCallback=0x1045f63e0 <JS::StatsCompartmentCallback(JSRuntime*, void*, JSCompartment*)>, arenaCallback=0x1045f6510 <JS::StatsArenaCallback(JSRuntime*, void*, js::gc::Arena*, JSGCTraceKind, unsigned long)>, cellCallback=0x1045f6590 <JS::StatsCellCallback(JSRuntime*, void*, void*, JSGCTraceKind, unsigned long)>) at /Users/ehsanakhgari/moz/inbound/js/src/jsgc.cpp:4807\n#4  0x00000001045f6187 in JS::CollectRuntimeStats (rt=0x10d423000, rtStats=0x7fff5fbf5000, opv=0x7fff5fbf4fc8) at /Users/ehsanakhgari/moz/inbound/js/src/jsmemorymetrics.cpp:250\n#5  0x0000000102b629ee in xpc::JSMemoryMultiReporter::CollectReports (windowPaths=0x7fff5fbf5f88, cb=0x10fea8c40, closure=0x10fea8e00) at /Users/ehsanakhgari/moz/inbound/js/xpconnect/src/XPCJSRuntime.cpp:1937\n#6  0x00000001023ec6ba in nsWindowMemoryReporter::CollectReports (this=0x10b698c10, aCb=0x10fea8c40, aClosure=0x10fea8e00) at /Users/ehsanakhgari/moz/inbound/dom/base/nsWindowMemoryReporter.cpp:319\n#7  0x000000010384904d in nsMemoryReporterManager::GetExplicit (this=0x10b45bbc0, aExplicit=0x7fff5fbf65a0) at /Users/ehsanakhgari/moz/inbound/xpcom/base/nsMemoryReporterManager.cpp:895\n#8  0x000000010384cc20 in GetExplicit (n=0x7fff5fbf65a0) at /Users/ehsanakhgari/moz/inbound/xpcom/base/nsMemoryReporterManager.cpp:592\n#9  0x000000010384d4a9 in MemoryReporter_Explicit::GetAmount (this=0x10b45cda0, amount=0x7fff5fbf65a0) at /Users/ehsanakhgari/moz/inbound/xpcom/base/nsMemoryReporterManager.cpp:595\n#10 0x000000010384fe49 in NS_InvokeByIndex_P (that=0x10b45cda0, methodIndex=7, paramCount=1, params=0x7fff5fbf65a0) at /Users/ehsanakhgari/moz/inbound/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:162\n#11 0x0000000102b97c14 in CallMethodHelper::Invoke (this=0x7fff5fbf6560) at /Users/ehsanakhgari/moz/inbound/js/xpconnect/src/XPCWrappedNative.cpp:3110\n#12 0x0000000102b95f1c in CallMethodHelper::Call (this=0x7fff5fbf6560) at /Users/ehsanakhgari/moz/inbound/js/xpconnect/src/XPCWrappedNative.cpp:2444\n#13 0x0000000102b92311 in XPCWrappedNative::CallMethod (ccx=@0x7fff5fbf6740, mode=XPCWrappedNative::CALL_GETTER) at /Users/ehsanakhgari/moz/inbound/js/xpconnect/src/XPCWrappedNative.cpp:2410\n#14 0x0000000102ba704a in XPCWrappedNative::GetAttribute (ccx=@0x7fff5fbf6740) at xpcprivate.h:2816\n#15 0x0000000102ba30df in XPC_WN_GetterSetter (cx=0x10053d840, argc=0, vp=0x10d5001a0) at /Users/ehsanakhgari/moz/inbound/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1517\n#16 0x00000001045e10a7 in js::CallJSNative (cx=0x10053d840, native=0x102ba2d90 <XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*)>, args=@0x7fff5fbf69d0) at jscntxtinlines.h:370\n#17 0x00000001045d719e in js::InvokeKernel (cx=0x10053d840, args={<JS::CallReceiver> = {usedRval_ = false, argv_ = 0x10d5001b0}, argc_ = 0}, construct=js::NO_CONSTRUCT) at /Users/ehsanakhgari/moz/inbound/js/src/jsinterp.cpp:367\n#18 0x0000000104625e21 in js::Invoke (cx=0x10053d840, args=@0x7fff5fbf6ac0, construct=js::NO_CONSTRUCT) at jsinterp.h:109\n#19 0x00000001045d78b8 in js::Invoke (cx=0x10053d840, thisv=@0x7fff5fbf6b58, fval=@0x7fff5fbf6c50, argc=0, argv=0x0, rval=0x7fff5fbf6d70) at /Users/ehsanakhgari/moz/inbound/js/src/jsinterp.cpp:411\n(More stack frames follow...)","id":6673603,"creation_time":"2012-09-27T19:50:53Z","raw_text":"I got this crash a couple of times when I was loading http://www.einslive.de/ to test another bug:\n\n(gdb) p clazz\n$1 = ('js::Class' *) 0xdadadadadadadada\n(gdb) bt 20\n#0  0x00000001045f66d0 in JS::StatsCellCallback (rt=0x10d423000, data=0x7fff5fbf48f0, thing=0x11a683ac0, traceKind=JSTRACE_OBJECT, thingSize=64) at /Users/ehsanakhgari/moz/inbound/js/src/jsmemorymetrics.cpp:144\n#1  0x0000000104570656 in js::IterateCellCallbackOp::operator() (this=0x7fff5fbf4748, cell=0x11a683ac0) at /Users/ehsanakhgari/moz/inbound/js/src/jsgc.cpp:4784\n#2  0x000000010456f403 in js::gc::ForEachArenaAndCell<js::IterateArenaCallbackOp, js::IterateCellCallbackOp> (compartment=0x10d4e5800, thingKind=js::gc::FINALIZE_OBJECT4_BACKGROUND, arenaOp={rt = 0x10d423000, data = 0x7fff5fbf48f0, callback = 0x1045f6510 <JS::StatsArenaCallback(JSRuntime*, void*, js::gc::Arena*, JSGCTraceKind, unsigned long)>, traceKind = JSTRACE_OBJECT, thingSize = 64}, cellOp={rt = 0x10d423000, data = 0x7fff5fbf48f0, callback = 0x1045f6590 <JS::StatsCellCallback(JSRuntime*, void*, void*, JSGCTraceKind, unsigned long)>, traceKind = JSTRACE_OBJECT, thingSize = 64}) at jsgcinlines.h:378\n#3  0x00000001045633ef in js::IterateCompartmentsArenasCells (rt=0x10d423000, data=0x7fff5fbf48f0, compartmentCallback=0x1045f63e0 <JS::StatsCompartmentCallback(JSRuntime*, void*, JSCompartment*)>, arenaCallback=0x1045f6510 <JS::StatsArenaCallback(JSRuntime*, void*, js::gc::Arena*, JSGCTraceKind, unsigned long)>, cellCallback=0x1045f6590 <JS::StatsCellCallback(JSRuntime*, void*, void*, JSGCTraceKind, unsigned long)>) at /Users/ehsanakhgari/moz/inbound/js/src/jsgc.cpp:4807\n#4  0x00000001045f6187 in JS::CollectRuntimeStats (rt=0x10d423000, rtStats=0x7fff5fbf5000, opv=0x7fff5fbf4fc8) at /Users/ehsanakhgari/moz/inbound/js/src/jsmemorymetrics.cpp:250\n#5  0x0000000102b629ee in xpc::JSMemoryMultiReporter::CollectReports (windowPaths=0x7fff5fbf5f88, cb=0x10fea8c40, closure=0x10fea8e00) at /Users/ehsanakhgari/moz/inbound/js/xpconnect/src/XPCJSRuntime.cpp:1937\n#6  0x00000001023ec6ba in nsWindowMemoryReporter::CollectReports (this=0x10b698c10, aCb=0x10fea8c40, aClosure=0x10fea8e00) at /Users/ehsanakhgari/moz/inbound/dom/base/nsWindowMemoryReporter.cpp:319\n#7  0x000000010384904d in nsMemoryReporterManager::GetExplicit (this=0x10b45bbc0, aExplicit=0x7fff5fbf65a0) at /Users/ehsanakhgari/moz/inbound/xpcom/base/nsMemoryReporterManager.cpp:895\n#8  0x000000010384cc20 in GetExplicit (n=0x7fff5fbf65a0) at /Users/ehsanakhgari/moz/inbound/xpcom/base/nsMemoryReporterManager.cpp:592\n#9  0x000000010384d4a9 in MemoryReporter_Explicit::GetAmount (this=0x10b45cda0, amount=0x7fff5fbf65a0) at /Users/ehsanakhgari/moz/inbound/xpcom/base/nsMemoryReporterManager.cpp:595\n#10 0x000000010384fe49 in NS_InvokeByIndex_P (that=0x10b45cda0, methodIndex=7, paramCount=1, params=0x7fff5fbf65a0) at /Users/ehsanakhgari/moz/inbound/xpcom/reflect/xptcall/src/md/unix/xptcinvoke_x86_64_unix.cpp:162\n#11 0x0000000102b97c14 in CallMethodHelper::Invoke (this=0x7fff5fbf6560) at /Users/ehsanakhgari/moz/inbound/js/xpconnect/src/XPCWrappedNative.cpp:3110\n#12 0x0000000102b95f1c in CallMethodHelper::Call (this=0x7fff5fbf6560) at /Users/ehsanakhgari/moz/inbound/js/xpconnect/src/XPCWrappedNative.cpp:2444\n#13 0x0000000102b92311 in XPCWrappedNative::CallMethod (ccx=@0x7fff5fbf6740, mode=XPCWrappedNative::CALL_GETTER) at /Users/ehsanakhgari/moz/inbound/js/xpconnect/src/XPCWrappedNative.cpp:2410\n#14 0x0000000102ba704a in XPCWrappedNative::GetAttribute (ccx=@0x7fff5fbf6740) at xpcprivate.h:2816\n#15 0x0000000102ba30df in XPC_WN_GetterSetter (cx=0x10053d840, argc=0, vp=0x10d5001a0) at /Users/ehsanakhgari/moz/inbound/js/xpconnect/src/XPCWrappedNativeJSOps.cpp:1517\n#16 0x00000001045e10a7 in js::CallJSNative (cx=0x10053d840, native=0x102ba2d90 <XPC_WN_GetterSetter(JSContext*, unsigned int, JS::Value*)>, args=@0x7fff5fbf69d0) at jscntxtinlines.h:370\n#17 0x00000001045d719e in js::InvokeKernel (cx=0x10053d840, args={<JS::CallReceiver> = {usedRval_ = false, argv_ = 0x10d5001b0}, argc_ = 0}, construct=js::NO_CONSTRUCT) at /Users/ehsanakhgari/moz/inbound/js/src/jsinterp.cpp:367\n#18 0x0000000104625e21 in js::Invoke (cx=0x10053d840, args=@0x7fff5fbf6ac0, construct=js::NO_CONSTRUCT) at jsinterp.h:109\n#19 0x00000001045d78b8 in js::Invoke (cx=0x10053d840, thisv=@0x7fff5fbf6b58, fval=@0x7fff5fbf6c50, argc=0, argv=0x0, rval=0x7fff5fbf6d70) at /Users/ehsanakhgari/moz/inbound/js/src/jsinterp.cpp:411\n(More stack frames follow...)"},{"is_private":false,"attachment_id":null,"creator":"n.nethercote@gmail.com","time":"2012-09-27T23:16:30Z","author":"n.nethercote@gmail.com","bug_id":795076,"tags":[],"text":"I couldn't reproduce this.\n\nFWIW, the JS memory reporter touches every live thing on the GC heap, so it tends to be a canary-in-the-coal-mine when it comes to finding cases of GC heap corruption.  (That's my justification for thinking this probably isn't my fault... :)","id":6674332,"creation_time":"2012-09-27T23:16:30Z","raw_text":"I couldn't reproduce this.\n\nFWIW, the JS memory reporter touches every live thing on the GC heap, so it tends to be a canary-in-the-coal-mine when it comes to finding cases of GC heap corruption.  (That's my justification for thinking this probably isn't my fault... :)"},{"is_private":false,"attachment_id":null,"creator":"ehsan@mozilla.com","time":"2012-09-28T00:31:56Z","author":"ehsan@mozilla.com","bug_id":795076,"tags":[],"text":"(In reply to comment #1)\n> I couldn't reproduce this.\n\nThis happened perhaps two out of 10 times I opened that page...\n\n> FWIW, the JS memory reporter touches every live thing on the GC heap, so it\n> tends to be a canary-in-the-coal-mine when it comes to finding cases of GC heap\n> corruption.  (That's my justification for thinking this probably isn't my\n> fault... :)\n\nYeah..  The thing that is interesting here is the uninitialized value, but I don't know this code enough to see if that makes it possible/easy to diagnose this without reproducing...","id":6674467,"creation_time":"2012-09-28T00:31:56Z","raw_text":"(In reply to comment #1)\n> I couldn't reproduce this.\n\nThis happened perhaps two out of 10 times I opened that page...\n\n> FWIW, the JS memory reporter touches every live thing on the GC heap, so it\n> tends to be a canary-in-the-coal-mine when it comes to finding cases of GC heap\n> corruption.  (That's my justification for thinking this probably isn't my\n> fault... :)\n\nYeah..  The thing that is interesting here is the uninitialized value, but I don't know this code enough to see if that makes it possible/easy to diagnose this without reproducing..."},{"is_private":false,"attachment_id":null,"creator":"n.nethercote@gmail.com","time":"2012-09-28T01:42:15Z","author":"n.nethercote@gmail.com","bug_id":795076,"tags":[],"text":"> This happened perhaps two out of 10 times I opened that page...\n\nI just tried many more times and still couldn't trigger.  You must have telemetry on in that profile, right?  Because the memory reporters wouldn't run without prompting, otherwise.  (I refreshed about:memory frequently while reloading the site lots of times.)\n\n> Yeah..  The thing that is interesting here is the uninitialized value\n\nIt's been freed.","id":6674576,"creation_time":"2012-09-28T01:42:15Z","raw_text":"> This happened perhaps two out of 10 times I opened that page...\n\nI just tried many more times and still couldn't trigger.  You must have telemetry on in that profile, right?  Because the memory reporters wouldn't run without prompting, otherwise.  (I refreshed about:memory frequently while reloading the site lots of times.)\n\n> Yeah..  The thing that is interesting here is the uninitialized value\n\nIt's been freed."},{"is_private":false,"attachment_id":null,"creator":"ehsan@mozilla.com","time":"2012-09-28T15:24:19Z","author":"ehsan@mozilla.com","bug_id":795076,"tags":[],"text":"(In reply to comment #3)\n> > This happened perhaps two out of 10 times I opened that page...\n> \n> I just tried many more times and still couldn't trigger.  You must have\n> telemetry on in that profile, right?  Because the memory reporters wouldn't run\n> without prompting, otherwise.  (I refreshed about:memory frequently while\n> reloading the site lots of times.)\n\nYes, I do have telemetry enabled there.\n\n> > Yeah..  The thing that is interesting here is the uninitialized value\n> \n> It's been freed.\n\nOh isn't that value what the allocator fills in the memory it allocates with in debug builds?","id":6676180,"creation_time":"2012-09-28T15:24:19Z","raw_text":"(In reply to comment #3)\n> > This happened perhaps two out of 10 times I opened that page...\n> \n> I just tried many more times and still couldn't trigger.  You must have\n> telemetry on in that profile, right?  Because the memory reporters wouldn't run\n> without prompting, otherwise.  (I refreshed about:memory frequently while\n> reloading the site lots of times.)\n\nYes, I do have telemetry enabled there.\n\n> > Yeah..  The thing that is interesting here is the uninitialized value\n> \n> It's been freed.\n\nOh isn't that value what the allocator fills in the memory it allocates with in debug builds?"},{"is_private":false,"attachment_id":null,"creator":"n.nethercote@gmail.com","time":"2012-09-28T21:38:06Z","author":"n.nethercote@gmail.com","bug_id":795076,"tags":[],"text":"From js/src/public/Utility.h:\n\n/*\n * Pattern used to overwrite freed memory. If you are accessing an object with\n * this pattern, you probably have a dangling pointer.\n */\n#define JS_FREE_PATTERN 0xDA","id":6677508,"creation_time":"2012-09-28T21:38:06Z","raw_text":"From js/src/public/Utility.h:\n\n/*\n * Pattern used to overwrite freed memory. If you are accessing an object with\n * this pattern, you probably have a dangling pointer.\n */\n#define JS_FREE_PATTERN 0xDA"},{"is_private":false,"attachment_id":null,"creator":"wmccloskey@mozilla.com","time":"2012-10-11T23:36:11Z","author":"wmccloskey@mozilla.com","bug_id":795076,"tags":[],"text":"I'm pretty sure this is a dupe.\n\n*** This bug has been marked as a duplicate of bug 791174 ***","id":6721359,"creation_time":"2012-10-11T23:36:11Z","raw_text":"I'm pretty sure this is a dupe."},{"is_private":false,"attachment_id":null,"creator":"ehsan@mozilla.com","time":"2012-10-12T00:14:05Z","author":"ehsan@mozilla.com","bug_id":795076,"tags":[],"text":"Closing this since bug 791174 is a security bug.","id":6721477,"creation_time":"2012-10-12T00:14:05Z","raw_text":"Closing this since bug 791174 is a security bug."}]}},"comments":{}}