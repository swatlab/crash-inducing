124655: /* Any copyright is dedicated to the Public Domain.
124655:    http://creativecommons.org/publicdomain/zero/1.0/ */
124655: 
124655: var MockFilePicker = SpecialPowers.MockFilePicker;
124655: MockFilePicker.init();
116175: 
116175: function checkDiskCacheFor(filename) {
116175:   let visitor = {
116175:     visitDevice: function(deviceID, deviceInfo) {
116175:       if (deviceID == "disk")
116175:         info(deviceID + " device contains " + deviceInfo.entryCount + " entries");
116175:       return deviceID == "disk";
116175:     },
116175:     
116175:     visitEntry: function(deviceID, entryInfo) {
116175:       info(entryInfo.key);
116175:       is(entryInfo.key.contains(filename), false, "web content present in disk cache");
116175:     }
116175:   };
116175:   cache.visitEntries(visitor);
116175: }
116175: 
124655: var cache = Cc["@mozilla.org/network/cache-service;1"]
124655:               .getService(Ci.nsICacheService);
124655: 
124655: function test() {
124655:   waitForExplicitFinish();
124655:   var fileName;
124655: 
124655:   gPrefService.setBoolPref("browser.privatebrowsing.keep_current_session", true);
124655:   let pb = Cc["@mozilla.org/privatebrowsing;1"].
124655:            getService(Ci.nsIPrivateBrowsingService);
124655:   pb.privateBrowsingEnabled = true;
124655: 
124655:   gBrowser.loadURI("http://mochi.test:8888/browser/browser/base/content/test/bug792517.html");
124655: 
124655:   registerCleanupFunction(function () {
124655:     pb.privateBrowsingEnabled = false;
124655:     gPrefService.clearUserPref("browser.privatebrowsing.keep_current_session");
124655:     gBrowser.addTab();
124655:     gBrowser.removeCurrentTab();
124655:   });
124655: 
124655:   gBrowser.addEventListener("pageshow", function pageShown(event) {
124655:     if (event.target.location == "about:blank")
124655:       return;
124655:     gBrowser.removeEventListener("pageshow", pageShown);
124655: 
124655:     executeSoon(function () {
124655:       document.addEventListener("popupshown", contextMenuOpened);
124655: 
124655:       var img = gBrowser.contentDocument.getElementById("img");
124655:       EventUtils.synthesizeMouseAtCenter(img,
124655:                                          { type: "contextmenu", button: 2 },
124655:                                          gBrowser.contentWindow);
124655:     });
124655:   });
124655: 
124655:   function contextMenuOpened(event) {
116175:     cache.evictEntries(Ci.nsICache.STORE_ANYWHERE);
116175: 
116175:     event.currentTarget.removeEventListener("popupshown", contextMenuOpened);
116175: 
116175:     // Create the folder the image will be saved into.
116175:     var destDir = createTemporarySaveDirectory();
116175:     var destFile = destDir.clone();
116175: 
116175:     MockFilePicker.displayDirectory = destDir;
116175:     MockFilePicker.showCallback = function(fp) {
116175:       fileName = fp.defaultString;
116175:       destFile.append (fileName);
116175:       MockFilePicker.returnFiles = [destFile];
116175:       MockFilePicker.filterIndex = 1; // kSaveAsType_URL
116175:     };
116175: 
116175:     mockTransferCallback = onTransferComplete;
116175:     mockTransferRegisterer.register();
116175: 
116175:     registerCleanupFunction(function () {
116175:       mockTransferRegisterer.unregister();
116175:       MockFilePicker.cleanup();
116175:       destDir.remove(true);
116175:     });
116175: 
116175:     // Select "Save Image As" option from context menu
124655:     var saveVideoCommand = document.getElementById("context-saveimage");
116175:     saveVideoCommand.doCommand();
116175: 
116175:     event.target.hidePopup();
116175:   }
116175: 
116175:   function onTransferComplete(downloadSuccess) {
116175:     ok(downloadSuccess, "Image file should have been downloaded successfully");
116175: 
116175:     // Give the request a chance to finish and create a cache entry
116175:     executeSoon(function() {
116175:       checkDiskCacheFor(fileName);
116175:       finish();
116175:     });
116175:   }
124655: }
124655: 
124655: Cc["@mozilla.org/moz/jssubscript-loader;1"]
124655:   .getService(Ci.mozIJSSubScriptLoader)
124655:   .loadSubScript("chrome://mochitests/content/browser/toolkit/content/tests/browser/common/mockTransfer.js",
124655:                  this);
116175: 
116175: function createTemporarySaveDirectory() {
116175:   var saveDir = Cc["@mozilla.org/file/directory_service;1"]
116175:                   .getService(Ci.nsIProperties)
116175:                   .get("TmpD", Ci.nsIFile);
116175:   saveDir.append("testsavedir");
116175:   if (!saveDir.exists())
116175:     saveDir.create(Ci.nsIFile.DIRECTORY_TYPE, 0755);
116175:   return saveDir;
116175: }
