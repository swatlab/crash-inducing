    1: /* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
    1:  *
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corp.
    1:  * Portions created by the Initial Developer are Copyright (C) 1999
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *   Mike Pinkerton
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "nsISupports.idl"
    1: #include "nsISupportsArray.idl"
    1: #include "nsIDragSession.idl"
    1: #include "nsIScriptableRegion.idl"
    1: 
    1: 
    1: interface nsIDOMNode;
18445: interface nsIDOMDragEvent;
18445: interface nsIDOMDataTransfer;
    1: interface nsISelection;
    1: 
87781: [scriptable, uuid(82B58ADA-F490-4C3D-B737-1057C4F1D052), builtinclass]
    1: interface nsIDragService : nsISupports
    1: {
    1:   const long DRAGDROP_ACTION_NONE = 0;
    1:   const long DRAGDROP_ACTION_COPY = 1;
    1:   const long DRAGDROP_ACTION_MOVE = 2;
    1:   const long DRAGDROP_ACTION_LINK = 4;
18445:   const long DRAGDROP_ACTION_UNINITIALIZED = 64;
    1: 
    1:   /**
    1:     * Starts a modal drag session with an array of transaferables 
    1:     *
    1:     * @param  aTransferables - an array of transferables to be dragged
    1:     * @param  aRegion - a region containing rectangles for cursor feedback, 
    1:     *            in window coordinates.
    1:     * @param  aActionType - specified which of copy/move/link are allowed
    1:     */
    1:   void invokeDragSession ( in nsIDOMNode aDOMNode, in nsISupportsArray aTransferables, 
    1:                              in nsIScriptableRegion aRegion, in unsigned long aActionType );
    1: 
    1:   /**
    1:    * Starts a modal drag session using an image. The first four arguments are
    1:    * the same as invokeDragSession.
    1:    *
    1:    * A custom image may be specified using the aImage argument. If this is
    1:    * supplied, the aImageX and aImageY arguments specify the offset within
    1:    * the image where the cursor would be positioned. That is, when the image
    1:    * is drawn, it is offset up and left the amount so that the cursor appears
    1:    * at that location within the image.
    1:    *
    1:    * If aImage is null, aImageX and aImageY are not used and the image is instead
    1:    * determined from the source node aDOMNode, and the offset calculated so that
    1:    * the initial location for the image appears in the same screen position as
    1:    * where the element is located. The node must be within a document.
    1:    *
    1:    * Currently, supported images are all DOM nodes. If this is an HTML <image> or
    1:    * <canvas>, the drag image is taken from the image data. If the element is in
    1:    * a document, it will be rendered at its displayed size, othewise, it will be
    1:    * rendered at its real size. For other types of elements, the element is
    1:    * rendered into an offscreen buffer in the same manner as it is currently
    1:    * displayed. The document selection is hidden while drawing.
    1:    *
    1:    * The aDragEvent must be supplied as the current screen coordinates of the
    1:    * event are needed to calculate the image location.
    1:    */
    1:   void invokeDragSessionWithImage(in nsIDOMNode aDOMNode,
    1:                                   in nsISupportsArray aTransferableArray,
    1:                                   in nsIScriptableRegion aRegion,
    1:                                   in unsigned long aActionType,
    1:                                   in nsIDOMNode aImage,
    1:                                   in long aImageX,
    1:                                   in long aImageY,
18445:                                   in nsIDOMDragEvent aDragEvent,
18445:                                   in nsIDOMDataTransfer aDataTransfer);
    1: 
    1:   /**
    1:    * Start a modal drag session using the selection as the drag image.
    1:    * The aDragEvent must be supplied as the current screen coordinates of the
    1:    * event are needed to calculate the image location.
    1:    */
    1:   void invokeDragSessionWithSelection(in nsISelection aSelection,
    1:                                       in nsISupportsArray aTransferableArray,
    1:                                       in unsigned long aActionType,
18445:                                       in nsIDOMDragEvent aDragEvent,
18445:                                       in nsIDOMDataTransfer aDataTransfer);
    1: 
    1:   /**
    1:     * Returns the current Drag Session  
    1:     */
    1:   nsIDragSession getCurrentSession ( ) ;
    1: 
    1:   /**
    1:     * Tells the Drag Service to start a drag session. This is called when
    1:     * an external drag occurs
    1:     */
    1:   void startDragSession ( ) ;
    1: 
    1:   /**
    1:     * Tells the Drag Service to end a drag session. This is called when
    1:     * an external drag occurs
  482:     *
  482:     * If aDoneDrag is true, the drag has finished, otherwise the drag has
  482:     * just left the window.
    1:     */
74991:   void endDragSession ( in boolean aDoneDrag ) ;
    1: 
  482:   /**
  482:    * Fire a drag event at the source of the drag
  482:    */
  482:   void fireDragEventAtSource ( in unsigned long aMsg );
13279: 
13279:   /**
13279:    * Increase/decrease dragging suppress level by one.
13279:    * If level is greater than one, dragging is disabled.
13279:    */
13279:   void suppress();
13279:   void unsuppress();
77050: 
77050:   [noscript] void dragMoved(in long aX, in long aY);
    1: };
    1: 
    1: 
    1: %{ C++
    1: 
    1: %}
