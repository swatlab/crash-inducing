52558: /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
52558:  * vim: set ts=4 sw=4 et tw=99:
52558:  *
52558:  * ***** BEGIN LICENSE BLOCK *****
52558:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
52558:  *
52558:  * The contents of this file are subject to the Mozilla Public License Version
52558:  * 1.1 (the "License"); you may not use this file except in compliance with
52558:  * the License. You may obtain a copy of the License at
52558:  * http://www.mozilla.org/MPL/
52558:  *
52558:  * Software distributed under the License is distributed on an "AS IS" basis,
52558:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
52558:  * for the specific language governing rights and limitations under the
52558:  * License.
52558:  *
52558:  * The Original Code is Mozilla SpiderMonkey JavaScript 1.9 code, released
52558:  * May 28, 2008.
52558:  *
52558:  * The Initial Developer of the Original Code is
52558:  *   Brendan Eich <brendan@mozilla.org>
52558:  *
52558:  * Contributor(s):
52558:  *   David Anderson <danderson@mozilla.com>
52558:  *   David Mandelin <dmandelin@mozilla.com>
52558:  *
52558:  * Alternatively, the contents of this file may be used under the terms of
52558:  * either of the GNU General Public License Version 2 or later (the "GPL"),
52558:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
52558:  * in which case the provisions of the GPL or the LGPL are applicable instead
52558:  * of those above. If you wish to allow use of your version of this file only
52558:  * under the terms of either the GPL or the LGPL, and not to allow others to
52558:  * use your version of this file under the terms of the MPL, indicate your
52558:  * decision by deleting the provisions above and replace them with the notice
52558:  * and other provisions required by the GPL or the LGPL. If you do not delete
52558:  * the provisions above, a recipient may use your version of this file under
52558:  * the terms of any one of the MPL, the GPL or the LGPL.
52558:  *
52558:  * ***** END LICENSE BLOCK ***** */
53270: 
52558: #include "MethodJIT.h"
52651: #include "jsnum.h"
52686: #include "jsbool.h"
52737: #include "jsiter.h"
52558: #include "Compiler.h"
52611: #include "StubCalls.h"
52826: #include "MonoIC.h"
53270: #include "PolyIC.h"
53168: #include "Retcon.h"
52611: #include "assembler/jit/ExecutableAllocator.h"
52826: #include "assembler/assembler/LinkBuffer.h"
52618: #include "FrameState-inl.h"
55746: #include "jsobjinlines.h"
52668: #include "jsscriptinlines.h"
53590: #include "InlineFrameAssembler.h"
54707: #include "jscompartment.h"
54840: #include "jsobjinlines.h"
54855: #include "jsopcodeinlines.h"
52560: 
52560: #include "jsautooplen.h"
52558: 
52558: using namespace js;
52558: using namespace js::mjit;
53270: #if defined JS_POLYIC
53270: using namespace js::mjit::ic;
53270: #endif
52558: 
55521: #define ADD_CALLSITE(stub) if (debugMode) addCallSite(__LINE__, (stub))
53168: 
56037: #define RETURN_IF_OOM(retval)                    \
56037:     JS_BEGIN_MACRO                               \
56037:         if (masm.oom() || stubcc.masm.oom()) {   \
56037:             js_ReportOutOfMemory(cx);            \
56037:             return retval;                       \
56037:         }                                        \
56037:     JS_END_MACRO
56037: 
52558: #if defined(JS_METHODJIT_SPEW)
52558: static const char *OpcodeNames[] = {
52558: # define OPDEF(op,val,name,token,length,nuses,ndefs,prec,format) #name,
52558: # include "jsopcode.tbl"
52558: # undef OPDEF
52558: };
52558: #endif
52558: 
55503: mjit::Compiler::Compiler(JSContext *cx, JSStackFrame *fp)
55463:   : BaseCompiler(cx),
55503:     fp(fp),
55503:     script(fp->script()),
55503:     scopeChain(&fp->scopeChain()),
55463:     globalObj(scopeChain->getGlobal()),
55503:     fun(fp->isFunctionFrame() && !fp->isEvalFrame()
55503:         ? fp->fun()
55503:         : NULL),
55503:     isConstructing(fp->isConstructing()),
52617:     analysis(cx, script), jumpMap(NULL), frame(cx, script, masm),
53119:     branchPatches(ContextAllocPolicy(cx)),
53119: #if defined JS_MONOIC
53119:     mics(ContextAllocPolicy(cx)),
53590:     callICs(ContextAllocPolicy(cx)),
53119: #endif
53119: #if defined JS_POLYIC
53119:     pics(ContextAllocPolicy(cx)), 
53119: #endif
54832:     callPatches(ContextAllocPolicy(cx)),
53183:     callSites(ContextAllocPolicy(cx)), 
53183:     doubleList(ContextAllocPolicy(cx)),
55521:     stubcc(cx, *this, frame, script),
55521:     debugMode(cx->compartment->debugMode)
53136: #if defined JS_TRACER
54175:     ,addTraceHints(cx->traceJitEnabled)
53136: #endif
52558: {
52558: }
52558: 
55503: CompileStatus
55503: mjit::Compiler::compile()
55503: {
55503:     JS_ASSERT(!script->isEmpty());
55503:     JS_ASSERT_IF(isConstructing, !script->jitCtor);
55503:     JS_ASSERT_IF(!isConstructing, !script->jitNormal);
55503: 
55503:     JITScript **jit = isConstructing ? &script->jitCtor : &script->jitNormal;
55503:     void **checkAddr = isConstructing
55503:                        ? &script->jitArityCheckCtor
55503:                        : &script->jitArityCheckNormal;
55503: 
55503:     CompileStatus status = performCompilation(jit);
55503:     if (status == Compile_Okay) {
55503:         // Global scripts don't have an arity check entry. That's okay, we
55503:         // just need a pointer so the VM can quickly decide whether this
55503:         // method can be JIT'd or not. Global scripts cannot be IC'd, since
55503:         // they have no functions, so there is no danger.
55503:         *checkAddr = (*jit)->arityCheckEntry
55503:                      ? (*jit)->arityCheckEntry
55503:                      : (*jit)->invokeEntry;
55503:     } else {
55503:         *checkAddr = JS_UNJITTABLE_SCRIPT;
55503:     }
55503: 
55503:     return status;
55503: }
55503: 
52558: #define CHECK_STATUS(expr)              \
52558:     JS_BEGIN_MACRO                      \
52558:         CompileStatus status_ = (expr); \
52558:         if (status_ != Compile_Okay)    \
52558:             return status_;             \
52558:     JS_END_MACRO
52558: 
52558: CompileStatus
55503: mjit::Compiler::performCompilation(JITScript **jitp)
52558: {
52558:     JaegerSpew(JSpew_Scripts, "compiling script (file \"%s\") (line \"%d\") (length \"%d\")\n",
52558:                script->filename, script->lineno, script->length);
52558: 
52558:     /* Perform bytecode analysis. */
52558:     if (!analysis.analyze()) {
52558:         if (analysis.OOM())
52558:             return Compile_Error;
52558:         JaegerSpew(JSpew_Abort, "couldn't analyze bytecode; probably switchX or OOM\n");
52558:         return Compile_Abort;
52558:     }
52558: 
52560:     uint32 nargs = fun ? fun->nargs : 0;
52617:     if (!frame.init(nargs) || !stubcc.init(nargs))
52560:         return Compile_Abort;
52560: 
52558:     jumpMap = (Label *)cx->malloc(sizeof(Label) * script->length);
52558:     if (!jumpMap)
52558:         return Compile_Error;
52558: #ifdef DEBUG
52558:     for (uint32 i = 0; i < script->length; i++)
52558:         jumpMap[i] = Label();
52558: #endif
52558: 
52654: #ifdef JS_METHODJIT_SPEW
52558:     Profiler prof;
52558:     prof.start();
52654: #endif
52558: 
53590:     /* Initialize PC early so stub calls in the prologue can be fallible. */
53590:     PC = script->code;
53590: 
53590: #ifdef JS_METHODJIT
55521:     script->debugMode = debugMode;
53590: #endif
53590: 
54840:     for (uint32 i = 0; i < script->nClosedVars; i++)
54840:         frame.setClosedVar(script->getClosedVar(i));
54840: 
52558:     CHECK_STATUS(generatePrologue());
52558:     CHECK_STATUS(generateMethod());
52558:     CHECK_STATUS(generateEpilogue());
55503:     CHECK_STATUS(finishThisUp(jitp));
52558: 
52558: #ifdef JS_METHODJIT_SPEW
52558:     prof.stop();
52558:     JaegerSpew(JSpew_Prof, "compilation took %d us\n", prof.time_us());
52558: #endif
52558: 
52558:     JaegerSpew(JSpew_Scripts, "successfully compiled (code \"%p\") (size \"%ld\")\n",
55503:                (*jitp)->code.m_code.executableAddress(), (*jitp)->code.m_size);
52558: 
52560:     return Compile_Okay;
52558: }
52558: 
52558: #undef CHECK_STATUS
52558: 
52558: mjit::Compiler::~Compiler()
52558: {
52558:     cx->free(jumpMap);
52558: }
52558: 
54626: CompileStatus JS_NEVER_INLINE
55503: mjit::TryCompile(JSContext *cx, JSStackFrame *fp)
52611: {
55503:     JS_ASSERT(cx->fp() == fp);
55503: 
55503:     Compiler cc(cx, fp);
55503: 
55503:     return cc.compile();
52611: }
52611: 
52611: CompileStatus
52558: mjit::Compiler::generatePrologue()
52558: {
52873:     invokeLabel = masm.label();
53471: 
52873:     /*
52873:      * If there is no function, then this can only be called via JaegerShot(),
52873:      * which expects an existing frame to be initialized like the interpreter.
52873:      */
52872:     if (fun) {
52873:         Jump j = masm.jump();
53590: 
53590:         /*
53590:          * Entry point #2: The caller has partially constructed a frame, and
53590:          * either argc >= nargs or the arity check has corrected the frame.
53590:          */
52873:         invokeLabel = masm.label();
53590: 
53590:         Label fastPath = masm.label();
53590: 
54832:         /* Store this early on so slow paths can access it. */
53840:         masm.storePtr(ImmPtr(fun), Address(JSFrameReg, JSStackFrame::offsetOfExec()));
53590: 
53590:         {
53590:             /*
53590:              * Entry point #3: The caller has partially constructed a frame,
53590:              * but argc might be != nargs, so an arity check might be called.
53590:              *
53590:              * This loops back to entry point #2.
53590:              */
53590:             arityLabel = stubcc.masm.label();
53840:             Jump argMatch = stubcc.masm.branch32(Assembler::Equal, JSParamReg_Argc,
53590:                                                  Imm32(fun->nargs));
53590:             stubcc.crossJump(argMatch, fastPath);
53590: 
53840:             if (JSParamReg_Argc != Registers::ArgReg1)
53840:                 stubcc.masm.move(JSParamReg_Argc, Registers::ArgReg1);
53840: 
53590:             /* Slow path - call the arity check function. Returns new fp. */
53840:             stubcc.masm.storePtr(ImmPtr(fun), Address(JSFrameReg, JSStackFrame::offsetOfExec()));
53590:             stubcc.masm.storePtr(JSFrameReg, FrameAddress(offsetof(VMFrame, regs.fp)));
53840:             stubcc.call(stubs::FixupArity);
53590:             stubcc.masm.move(Registers::ReturnReg, JSFrameReg);
53590:             stubcc.crossJump(stubcc.masm.jump(), fastPath);
53590:         }
53590: 
53590:         /*
53590:          * Guard that there is enough stack space. Note we include the size of
53590:          * a second frame, to ensure we can create a frame from call sites.
53590:          */
53590:         masm.addPtr(Imm32((script->nslots + VALUES_PER_STACK_FRAME * 2) * sizeof(Value)),
53590:                     JSFrameReg,
53590:                     Registers::ReturnReg);
53590:         Jump stackCheck = masm.branchPtr(Assembler::AboveOrEqual, Registers::ReturnReg,
53590:                                          FrameAddress(offsetof(VMFrame, stackLimit)));
53590: 
53590:         /* If the stack check fails... */
53590:         {
53590:             stubcc.linkExitDirect(stackCheck, stubcc.masm.label());
53840:             stubcc.call(stubs::HitStackQuota);
53590:             stubcc.crossJump(stubcc.masm.jump(), masm.label());
53590:         }
53590: 
55483:         /* Set locals to undefined, as in initCallFrameLatePrologue */
53488:         for (uint32 i = 0; i < script->nfixed; i++) {
52873:             Address local(JSFrameReg, sizeof(JSStackFrame) + i * sizeof(Value));
53081:             masm.storeValue(UndefinedValue(), local);
52872:         }
52872: 
52873:         /* Create the call object. */
52873:         if (fun->isHeavyweight()) {
53087:             prepareStubCall(Uses(0));
53087:             stubCall(stubs::GetCallObject);
52873:         }
52873: 
52873:         j.linkTo(masm.label(), &masm);
55483: 
55483:         if (analysis.usesScopeChain() && !fun->isHeavyweight()) {
55483:             /*
55483:              * Load the scope chain into the frame if necessary.  The scope chain
55483:              * is always set for global and eval frames, and will have been set by
55483:              * GetCallObject for heavyweight function frames.
55483:              */
55483:             RegisterID t0 = Registers::ReturnReg;
55483:             Jump hasScope = masm.branchTest32(Assembler::NonZero,
55483:                                               FrameFlagsAddress(), Imm32(JSFRAME_HAS_SCOPECHAIN));
55483:             masm.loadPayload(Address(JSFrameReg, JSStackFrame::offsetOfCallee(fun)), t0);
55483:             masm.loadPtr(Address(t0, offsetof(JSObject, parent)), t0);
55483:             masm.storePtr(t0, Address(JSFrameReg, JSStackFrame::offsetOfScopeChain()));
55483:             hasScope.linkTo(masm.label(), &masm);
55483:         }
52873:     }
52872: 
52558:     return Compile_Okay;
52558: }
52558: 
52611: CompileStatus
52611: mjit::Compiler::generateEpilogue()
52611: {
52611:     return Compile_Okay;
52611: }
52611: 
52611: CompileStatus
55503: mjit::Compiler::finishThisUp(JITScript **jitp)
52611: {
56037:     RETURN_IF_OOM(Compile_Error);
56037: 
52611:     for (size_t i = 0; i < branchPatches.length(); i++) {
52611:         Label label = labelOf(branchPatches[i].pc);
52611:         branchPatches[i].jump.linkTo(label, &masm);
52611:     }
52611: 
53147: #ifdef JS_CPU_ARM
53147:     masm.forceFlushConstantPool();
53147:     stubcc.masm.forceFlushConstantPool();
53147: #endif
53147:     JaegerSpew(JSpew_Insns, "## Fast code (masm) size = %u, Slow code (stubcc) size = %u.\n", masm.size(), stubcc.size());
53147: 
53183:     size_t totalSize = masm.size() +
53183:                        stubcc.size() +
53183:                        doubleList.length() * sizeof(double);
53183: 
53183:     JSC::ExecutablePool *execPool = getExecPool(totalSize);
52611:     if (!execPool)
52611:         return Compile_Abort;
52611: 
53183:     uint8 *result = (uint8 *)execPool->alloc(totalSize);
53183:     JSC::ExecutableAllocator::makeWritable(result, totalSize);
53147:     masm.executableCopy(result);
53147:     stubcc.masm.executableCopy(result + masm.size());
52611:     
53498:     JSC::LinkBuffer fullCode(result, totalSize);
53498:     JSC::LinkBuffer stubCode(result + masm.size(), stubcc.size());
53498: 
53498:     size_t totalBytes = sizeof(JITScript) +
53498:                         sizeof(void *) * script->length +
53498: #if defined JS_MONOIC
53498:                         sizeof(ic::MICInfo) * mics.length() +
53590:                         sizeof(ic::CallICInfo) * callICs.length() +
53498: #endif
53498: #if defined JS_POLYIC
53498:                         sizeof(ic::PICInfo) * pics.length() +
53498: #endif
53498:                         sizeof(CallSite) * callSites.length();
53498: 
53498:     uint8 *cursor = (uint8 *)cx->calloc(totalBytes);
53498:     if (!cursor) {
52661:         execPool->release();
52661:         return Compile_Error;
52661:     }
52661: 
55503:     JITScript *jit = (JITScript *)cursor;
53498:     cursor += sizeof(JITScript);
53498: 
55503:     jit->code = JSC::MacroAssemblerCodeRef(result, execPool, masm.size() + stubcc.size());
55503:     jit->nCallSites = callSites.length();
55503:     jit->invokeEntry = result;
53498: 
53498:     /* Build the pc -> ncode mapping. */
53498:     void **nmap = (void **)cursor;
53498:     cursor += sizeof(void *) * script->length;
52669: 
52661:     for (size_t i = 0; i < script->length; i++) {
52661:         Label L = jumpMap[i];
52678:         if (analysis[i].safePoint) {
52661:             JS_ASSERT(L.isValid());
52661:             nmap[i] = (uint8 *)(result + masm.distanceOf(L));
52661:         }
52661:     }
52661: 
55503:     if (fun) {
55503:         jit->arityCheckEntry = stubCode.locationOf(arityLabel).executableAddress();
55503:         jit->fastEntry = fullCode.locationOf(invokeLabel).executableAddress();
55503:     }
53590: 
53119: #if defined JS_MONOIC
55503:     jit->nMICs = mics.length();
52826:     if (mics.length()) {
55503:         jit->mics = (ic::MICInfo *)cursor;
53498:         cursor += sizeof(ic::MICInfo) * mics.length();
53405:     } else {
55503:         jit->mics = NULL;
52826:     }
53498: 
55503:     if (ic::MICInfo *scriptMICs = jit->mics) {
52826:         for (size_t i = 0; i < mics.length(); i++) {
55503:             scriptMICs[i].kind = mics[i].kind;
55503:             scriptMICs[i].entry = fullCode.locationOf(mics[i].entry);
53301:             switch (mics[i].kind) {
53301:               case ic::MICInfo::GET:
53301:               case ic::MICInfo::SET:
55503:                 scriptMICs[i].load = fullCode.locationOf(mics[i].load);
55503:                 scriptMICs[i].shape = fullCode.locationOf(mics[i].shape);
55503:                 scriptMICs[i].stubCall = stubCode.locationOf(mics[i].call);
55503:                 scriptMICs[i].stubEntry = stubCode.locationOf(mics[i].stubEntry);
55503:                 scriptMICs[i].u.name.typeConst = mics[i].u.name.typeConst;
55503:                 scriptMICs[i].u.name.dataConst = mics[i].u.name.dataConst;
53269: #if defined JS_PUNBOX64
55503:                 scriptMICs[i].patchValueOffset = mics[i].patchValueOffset;
53269: #endif
53301:                 break;
53301:               case ic::MICInfo::TRACER: {
53133:                 uint32 offs = uint32(mics[i].jumpTarget - script->code);
53133:                 JS_ASSERT(jumpMap[offs].isValid());
55503:                 scriptMICs[i].traceHint = fullCode.locationOf(mics[i].traceHint);
55503:                 scriptMICs[i].load = fullCode.locationOf(jumpMap[offs]);
55503:                 scriptMICs[i].u.hints.hasSlowTraceHintOne = mics[i].slowTraceHintOne.isSet();
54160:                 if (mics[i].slowTraceHintOne.isSet())
55503:                     scriptMICs[i].slowTraceHintOne = stubCode.locationOf(mics[i].slowTraceHintOne.get());
55503:                 scriptMICs[i].u.hints.hasSlowTraceHintTwo = mics[i].slowTraceHintTwo.isSet();
54160:                 if (mics[i].slowTraceHintTwo.isSet())
55503:                     scriptMICs[i].slowTraceHintTwo = stubCode.locationOf(mics[i].slowTraceHintTwo.get());
53301:                 break;
53301:               }
53301:               default:
53301:                 JS_NOT_REACHED("Bad MIC kind");
53133:             }
55503:             stubCode.patch(mics[i].addrLabel, &scriptMICs[i]);
52826:         }
55503:     }
55503: 
55503:     jit->nCallICs = callICs.length();
53590:     if (callICs.length()) {
55503:         jit->callICs = (ic::CallICInfo *)cursor;
53590:         cursor += sizeof(ic::CallICInfo) * callICs.length();
53590:     } else {
55503:         jit->callICs = NULL;
53590:     }
53590: 
55503:     if (ic::CallICInfo *cics = jit->callICs) {
53590:         for (size_t i = 0; i < callICs.length(); i++) {
55503:             cics[i].reset();
55503:             cics[i].funGuard = fullCode.locationOf(callICs[i].funGuard);
55503:             cics[i].funJump = fullCode.locationOf(callICs[i].funJump);
55503:             cics[i].slowPathStart = stubCode.locationOf(callICs[i].slowPathStart);
53590: 
53590:             /* Compute the hot call offset. */
54832:             uint32 offset = fullCode.locationOf(callICs[i].hotJump) -
53590:                             fullCode.locationOf(callICs[i].funGuard);
55503:             cics[i].hotJumpOffset = offset;
55503:             JS_ASSERT(cics[i].hotJumpOffset == offset);
53590: 
53590:             /* Compute the join point offset. */
53590:             offset = fullCode.locationOf(callICs[i].joinPoint) -
53590:                      fullCode.locationOf(callICs[i].funGuard);
55503:             cics[i].joinPointOffset = offset;
55503:             JS_ASSERT(cics[i].joinPointOffset == offset);
53590:                                             
53590:             /* Compute the OOL call offset. */
53590:             offset = stubCode.locationOf(callICs[i].oolCall) -
53590:                      stubCode.locationOf(callICs[i].slowPathStart);
55503:             cics[i].oolCallOffset = offset;
55503:             JS_ASSERT(cics[i].oolCallOffset == offset);
53590: 
53590:             /* Compute the OOL jump offset. */
53590:             offset = stubCode.locationOf(callICs[i].oolJump) -
53590:                      stubCode.locationOf(callICs[i].slowPathStart);
55503:             cics[i].oolJumpOffset = offset;
55503:             JS_ASSERT(cics[i].oolJumpOffset == offset);
53590: 
53590:             /* Compute the slow join point offset. */
53590:             offset = stubCode.locationOf(callICs[i].slowJoinPoint) -
53590:                      stubCode.locationOf(callICs[i].slowPathStart);
55503:             cics[i].slowJoinOffset = offset;
55503:             JS_ASSERT(cics[i].slowJoinOffset == offset);
53590: 
53590:             /* Compute the join point offset for continuing on the hot path. */
53590:             offset = stubCode.locationOf(callICs[i].hotPathLabel) -
53590:                      stubCode.locationOf(callICs[i].funGuard);
55503:             cics[i].hotPathOffset = offset;
55503:             JS_ASSERT(cics[i].hotPathOffset == offset);
55503: 
55503:             cics[i].pc = callICs[i].pc;
55503:             cics[i].argc = callICs[i].argc;
55503:             cics[i].funObjReg = callICs[i].funObjReg;
55503:             cics[i].funPtrReg = callICs[i].funPtrReg;
55503:             cics[i].frameDepth = callICs[i].frameDepth;
55503:             stubCode.patch(callICs[i].addrLabel1, &cics[i]);
55503:             stubCode.patch(callICs[i].addrLabel2, &cics[i]);
55503:         } 
53590:     }
53119: #endif /* JS_MONOIC */
53119: 
54832:     for (size_t i = 0; i < callPatches.length(); i++) {
55463:         CallPatchInfo &patch = callPatches[i];
55463: 
55463:         fullCode.patch(patch.fastNcodePatch, fullCode.locationOf(patch.joinPoint));
55463:         if (patch.hasSlowNcode)
55463:             stubCode.patch(patch.slowNcodePatch, fullCode.locationOf(patch.joinPoint));
54832:     }
54832: 
53119: #if defined JS_POLYIC
55503:     jit->nPICs = pics.length();
52880:     if (pics.length()) {
55503:         jit->pics = (ic::PICInfo *)cursor;
53498:         cursor += sizeof(ic::PICInfo) * pics.length();
53391:     } else {
55503:         jit->pics = NULL;
52880:     }
52880: 
55503:     if (ic::PICInfo *scriptPICs = jit->pics) {
52880:         for (size_t i = 0; i < pics.length(); i++) {
55503:             pics[i].copySimpleMembersTo(scriptPICs[i]);
55503:             scriptPICs[i].fastPathStart = fullCode.locationOf(pics[i].fastPathStart);
55503:             scriptPICs[i].storeBack = fullCode.locationOf(pics[i].storeBack);
55503:             scriptPICs[i].slowPathStart = stubCode.locationOf(pics[i].slowPathStart);
55503:             scriptPICs[i].callReturn = uint16((uint8*)stubCode.locationOf(pics[i].callReturn).executableAddress() -
55503:                                                (uint8*)scriptPICs[i].slowPathStart.executableAddress());
55503:             scriptPICs[i].shapeGuard = masm.distanceOf(pics[i].shapeGuard) -
53270:                                          masm.distanceOf(pics[i].fastPathStart);
55503:             JS_ASSERT(scriptPICs[i].shapeGuard == masm.distanceOf(pics[i].shapeGuard) -
53426:                                          masm.distanceOf(pics[i].fastPathStart));
55503:             scriptPICs[i].shapeRegHasBaseShape = true;
52887: 
53315: # if defined JS_CPU_X64
55503:             memcpy(&scriptPICs[i].labels, &pics[i].labels, sizeof(PICLabels));
53315: # endif
53315: 
53620:             if (pics[i].kind == ic::PICInfo::SET ||
53620:                 pics[i].kind == ic::PICInfo::SETMETHOD) {
55503:                 scriptPICs[i].u.vr = pics[i].vr;
53054:             } else if (pics[i].kind != ic::PICInfo::NAME) {
52884:                 if (pics[i].hasTypeCheck) {
52884:                     int32 distance = stubcc.masm.distanceOf(pics[i].typeCheck) -
52884:                                      stubcc.masm.distanceOf(pics[i].slowPathStart);
53264:                     JS_ASSERT(distance <= 0);
55503:                     scriptPICs[i].u.get.typeCheckOffset = distance;
52887:                 }
52884:             }
55503:             new (&scriptPICs[i].execPools) ic::PICInfo::ExecPoolVector(SystemAllocPolicy());
55503:             scriptPICs[i].reset();
55503:             stubCode.patch(pics[i].addrLabel, &scriptPICs[i]);
55503:         }
52880:     }
53119: #endif /* JS_POLYIC */
52880: 
52613:     /* Link fast and slow paths together. */
52613:     stubcc.fixCrossJumps(result, masm.size(), masm.size() + stubcc.size());
52613: 
53183:     /* Patch all double references. */
53183:     size_t doubleOffset = masm.size() + stubcc.size();
53183:     double *doubleVec = (double *)(result + doubleOffset);
53183:     for (size_t i = 0; i < doubleList.length(); i++) {
53183:         DoublePatch &patch = doubleList[i];
53183:         doubleVec[i] = patch.d;
53183:         if (patch.ool)
53183:             stubCode.patch(patch.label, &doubleVec[i]);
53183:         else
53183:             fullCode.patch(patch.label, &doubleVec[i]);
53183:     }
53183: 
52613:     /* Patch all outgoing calls. */
55463:     masm.finalize(fullCode);
55463:     stubcc.masm.finalize(stubCode);
52611: 
52611:     JSC::ExecutableAllocator::makeExecutable(result, masm.size() + stubcc.size());
52611:     JSC::ExecutableAllocator::cacheFlush(result, masm.size() + stubcc.size());
52611: 
53168:     /* Build the table of call sites. */
55503:     jit->nCallSites = callSites.length();
53498:     if (callSites.length()) {
53498:         CallSite *callSiteList = (CallSite *)cursor;
53498:         cursor += sizeof(CallSite) * callSites.length();
53498: 
53168:         for (size_t i = 0; i < callSites.length(); i++) {
53168:             if (callSites[i].stub)
53498:                 callSiteList[i].codeOffset = masm.size() + stubcc.masm.distanceOf(callSites[i].location);
53168:             else
53498:                 callSiteList[i].codeOffset = masm.distanceOf(callSites[i].location);
53498:             callSiteList[i].pcOffset = callSites[i].pc - script->code;
53498:             callSiteList[i].id = callSites[i].id;
53168:         }
55503:         jit->callSites = callSiteList;
53498:     } else {
55503:         jit->callSites = NULL;
53498:     }
53498: 
55503:     JS_ASSERT(size_t(cursor - (uint8*)jit) == totalBytes);
55503: 
55687:     jit->nmap = nmap;
55503:     *jitp = jit;
53168: 
52611:     return Compile_Okay;
52611: }
52611: 
52776: #ifdef DEBUG
52776: #define SPEW_OPCODE()                                                         \
52776:     JS_BEGIN_MACRO                                                            \
52776:         if (IsJaegerSpewChannelActive(JSpew_JSOps)) {                         \
52776:             JaegerSpew(JSpew_JSOps, "    %2d ", frame.stackDepth());          \
52776:             js_Disassemble1(cx, script, PC, PC - script->code,                \
52776:                             JS_TRUE, stdout);                                 \
52776:         }                                                                     \
52776:     JS_END_MACRO;
52776: #else
52776: #define SPEW_OPCODE()
52776: #endif /* DEBUG */
52776: 
52560: #define BEGIN_CASE(name)        case name:
52560: #define END_CASE(name)                      \
52560:     JS_BEGIN_MACRO                          \
52560:         PC += name##_LENGTH;                \
52560:     JS_END_MACRO;                           \
52560:     break;
52560: 
52558: CompileStatus
52558: mjit::Compiler::generateMethod()
52558: {
53168:     mjit::AutoScriptRetrapper trapper(cx, script);
52558: 
52558:     for (;;) {
52558:         JSOp op = JSOp(*PC);
52558: 
52558:         OpcodeStatus &opinfo = analysis[PC];
53285:         frame.setInTryBlock(opinfo.inTryBlock);
53168:         if (opinfo.nincoming || opinfo.trap) {
54719:             frame.syncAndForgetEverything(opinfo.stackDepth);
52558:             opinfo.safePoint = true;
53133:         }
52599:         jumpMap[uint32(PC - script->code)] = masm.label();
52558: 
53168:         if (opinfo.trap) {
53168:             if (!trapper.untrap(PC))
53168:                 return Compile_Error;
53168:             op = JSOp(*PC);
53168:         }
53168: 
52558:         if (!opinfo.visited) {
52558:             if (op == JSOP_STOP)
52558:                 break;
52558:             if (js_CodeSpec[op].length != -1)
52558:                 PC += js_CodeSpec[op].length;
52558:             else
52558:                 PC += js_GetVariableBytecodeLength(PC);
52558:             continue;
52558:         }
52558: 
52776:         SPEW_OPCODE();
52599:         JS_ASSERT(frame.stackDepth() == opinfo.stackDepth);
52599: 
53168:         if (opinfo.trap) {
53168:             prepareStubCall(Uses(0));
53168:             masm.move(ImmPtr(PC), Registers::ArgReg1);
53168:             stubCall(stubs::Trap);
53168:         }
53326: #if defined(JS_NO_FASTCALL) && defined(JS_CPU_X86)
53326:         // In case of no fast call, when we change the return address,
53326:         // we need to make sure add esp by 8. For normal call, we need
53326:         // to make sure the esp is not changed.
53326:         else {
53326:             masm.subPtr(Imm32(8), Registers::StackPointer);
53326:             masm.callLabel = masm.label();
53326:             masm.addPtr(Imm32(8), Registers::StackPointer);
53326:         }
53477: #elif defined(_WIN64)
53477:         // In case of Win64 ABI, stub caller make 32-bytes spcae on stack
53477:         else {
53477:             masm.subPtr(Imm32(32), Registers::StackPointer);
53477:             masm.callLabel = masm.label();
53477:             masm.addPtr(Imm32(32), Registers::StackPointer);
53477:         }
53326: #endif
53168:         ADD_CALLSITE(false);
53168: 
52560:     /**********************
52560:      * BEGIN COMPILER OPS *
52560:      **********************/ 
52560: 
52558:         switch (op) {
52647:           BEGIN_CASE(JSOP_NOP)
52647:           END_CASE(JSOP_NOP)
52647: 
52769:           BEGIN_CASE(JSOP_PUSH)
53081:             frame.push(UndefinedValue());
52769:           END_CASE(JSOP_PUSH)
52769: 
52662:           BEGIN_CASE(JSOP_POPV)
52806:           BEGIN_CASE(JSOP_SETRVAL)
52662:           {
54832:             RegisterID reg = frame.allocReg();
54832:             masm.load32(FrameFlagsAddress(), reg);
55483:             masm.or32(Imm32(JSFRAME_HAS_RVAL), reg);
54832:             masm.store32(reg, FrameFlagsAddress());
54832:             frame.freeReg(reg);
54832: 
52662:             FrameEntry *fe = frame.peek(-1);
53840:             frame.storeTo(fe, Address(JSFrameReg, JSStackFrame::offsetOfReturnValue()), true);
52662:             frame.pop();
52662:           }
52662:           END_CASE(JSOP_POPV)
52662: 
52650:           BEGIN_CASE(JSOP_RETURN)
54832:             emitReturn(frame.peek(-1));
52650:           END_CASE(JSOP_RETURN)
52650: 
52599:           BEGIN_CASE(JSOP_GOTO)
52599:           {
52617:             /* :XXX: this isn't really necessary if we follow the branch. */
54719:             frame.syncAndForgetEverything();
52599:             Jump j = masm.jump();
53133:             jumpAndTrace(j, PC + GET_JUMP_OFFSET(PC));
52599:           }
52599:           END_CASE(JSOP_GOTO)
52599: 
52686:           BEGIN_CASE(JSOP_IFEQ)
52686:           BEGIN_CASE(JSOP_IFNE)
53102:             jsop_ifneq(op, PC + GET_JUMP_OFFSET(PC));
52737:           END_CASE(JSOP_IFNE)
52737: 
52778:           BEGIN_CASE(JSOP_ARGUMENTS)
53087:             prepareStubCall(Uses(0));
53087:             stubCall(stubs::Arguments);
52778:             frame.pushSynced();
52778:           END_CASE(JSOP_ARGUMENTS)
52778: 
52737:           BEGIN_CASE(JSOP_FORLOCAL)
52737:             iterNext();
52973:             frame.storeLocal(GET_SLOTNO(PC), true);
52737:             frame.pop();
52737:           END_CASE(JSOP_FORLOCAL)
52686: 
52714:           BEGIN_CASE(JSOP_DUP)
52714:             frame.dup();
52714:           END_CASE(JSOP_DUP)
52714: 
52715:           BEGIN_CASE(JSOP_DUP2)
52715:             frame.dup2();
52715:           END_CASE(JSOP_DUP2)
52715: 
52721:           BEGIN_CASE(JSOP_BITOR)
52718:           BEGIN_CASE(JSOP_BITXOR)
52685:           BEGIN_CASE(JSOP_BITAND)
52685:             jsop_bitop(op);
52685:           END_CASE(JSOP_BITAND)
52685: 
52651:           BEGIN_CASE(JSOP_LT)
52651:           BEGIN_CASE(JSOP_LE)
52651:           BEGIN_CASE(JSOP_GT)
52651:           BEGIN_CASE(JSOP_GE)
52679:           BEGIN_CASE(JSOP_EQ)
52679:           BEGIN_CASE(JSOP_NE)
52651:           {
52652:             /* Detect fusions. */
52652:             jsbytecode *next = &PC[JSOP_GE_LENGTH];
52652:             JSOp fused = JSOp(*next);
52652:             if ((fused != JSOP_IFEQ && fused != JSOP_IFNE) || analysis[next].nincoming)
52651:                 fused = JSOP_NOP;
52652: 
52652:             /* Get jump target, if any. */
52652:             jsbytecode *target = NULL;
52652:             if (fused != JSOP_NOP)
52652:                 target = next + GET_JUMP_OFFSET(next);
52651: 
52652:             BoolStub stub = NULL;
52652:             switch (op) {
52652:               case JSOP_LT:
52652:                 stub = stubs::LessThan;
52652:                 break;
52652:               case JSOP_LE:
52652:                 stub = stubs::LessEqual;
52652:                 break;
52652:               case JSOP_GT:
52652:                 stub = stubs::GreaterThan;
52652:                 break;
52652:               case JSOP_GE:
52652:                 stub = stubs::GreaterEqual;
52652:                 break;
52679:               case JSOP_EQ:
52679:                 stub = stubs::Equal;
52679:                 break;
52679:               case JSOP_NE:
52679:                 stub = stubs::NotEqual;
52679:                 break;
52652:               default:
52652:                 JS_NOT_REACHED("WAT");
52652:                 break;
52652:             }
52653: 
52653:             FrameEntry *rhs = frame.peek(-1);
52653:             FrameEntry *lhs = frame.peek(-2);
52653: 
52653:             /* Check for easy cases that the parser does not constant fold. */
52653:             if (lhs->isConstant() && rhs->isConstant()) {
52653:                 /* Primitives can be trivially constant folded. */
52653:                 const Value &lv = lhs->getValue();
52653:                 const Value &rv = rhs->getValue();
52653: 
52653:                 if (lv.isPrimitive() && rv.isPrimitive()) {
52653:                     bool result = compareTwoValues(cx, op, lv, rv);
52653: 
52652:                     frame.pop();
52652:                     frame.pop();
52652: 
52652:                     if (!target) {
53081:                         frame.push(Value(BooleanValue(result)));
52652:                     } else {
52653:                         if (fused == JSOP_IFEQ)
52653:                             result = !result;
52653: 
52653:                         /* Branch is never taken, don't bother doing anything. */
52653:                         if (result) {
54719:                             frame.syncAndForgetEverything();
52653:                             Jump j = masm.jump();
53133:                             jumpAndTrace(j, target);
52652:                         }
52652:                     }
52652:                 } else {
52653:                     emitStubCmpOp(stub, target, fused);
52653:                 }
52653:             } else {
52651:                 /* Anything else should go through the fast path generator. */
52653:                 jsop_relational(op, stub, target, fused);
52651:             }
52651: 
52651:             /* Advance PC manually. */
52679:             JS_STATIC_ASSERT(JSOP_LT_LENGTH == JSOP_GE_LENGTH);
52679:             JS_STATIC_ASSERT(JSOP_LE_LENGTH == JSOP_GE_LENGTH);
52679:             JS_STATIC_ASSERT(JSOP_GT_LENGTH == JSOP_GE_LENGTH);
52679:             JS_STATIC_ASSERT(JSOP_EQ_LENGTH == JSOP_GE_LENGTH);
52679:             JS_STATIC_ASSERT(JSOP_NE_LENGTH == JSOP_GE_LENGTH);
52679: 
52651:             PC += JSOP_GE_LENGTH;
52776:             if (fused != JSOP_NOP) {
52776:                 SPEW_OPCODE();
52651:                 PC += JSOP_IFNE_LENGTH;
52776:             }
52651:             break;
52651:           }
52651:           END_CASE(JSOP_GE)
52651: 
52685:           BEGIN_CASE(JSOP_LSH)
53230:             jsop_bitop(op);
53230:           END_CASE(JSOP_LSH)
53230: 
52685:           BEGIN_CASE(JSOP_RSH)
53230:             jsop_rsh();
52685:           END_CASE(JSOP_RSH)
52560: 
52725:           BEGIN_CASE(JSOP_URSH)
53581:             jsop_bitop(op);
52725:           END_CASE(JSOP_URSH)
52725: 
52692:           BEGIN_CASE(JSOP_ADD)
52692:             jsop_binary(op, stubs::Add);
52692:           END_CASE(JSOP_ADD)
52692: 
52692:           BEGIN_CASE(JSOP_SUB)
52692:             jsop_binary(op, stubs::Sub);
52692:           END_CASE(JSOP_SUB)
52692: 
52692:           BEGIN_CASE(JSOP_MUL)
52692:             jsop_binary(op, stubs::Mul);
52692:           END_CASE(JSOP_MUL)
52692: 
52692:           BEGIN_CASE(JSOP_DIV)
52692:             jsop_binary(op, stubs::Div);
52692:           END_CASE(JSOP_DIV)
52692: 
52692:           BEGIN_CASE(JSOP_MOD)
53156:             jsop_mod();
52692:           END_CASE(JSOP_MOD)
52692: 
52734:           BEGIN_CASE(JSOP_NOT)
52734:             jsop_not();
52734:           END_CASE(JSOP_NOT)
52734: 
52724:           BEGIN_CASE(JSOP_BITNOT)
52724:           {
52724:             FrameEntry *top = frame.peek(-1);
52724:             if (top->isConstant() && top->getValue().isPrimitive()) {
52724:                 int32_t i;
52724:                 ValueToECMAInt32(cx, top->getValue(), &i);
52724:                 i = ~i;
52724:                 frame.pop();
53081:                 frame.push(Int32Value(i));
52724:             } else {
52724:                 jsop_bitnot();
52724:             }
52724:           }
52724:           END_CASE(JSOP_BITNOT)
52724: 
52713:           BEGIN_CASE(JSOP_NEG)
52713:           {
52713:             FrameEntry *top = frame.peek(-1);
52713:             if (top->isConstant() && top->getValue().isPrimitive()) {
52713:                 double d;
52713:                 ValueToNumber(cx, top->getValue(), &d);
52713:                 d = -d;
52713:                 frame.pop();
53327:                 frame.push(NumberValue(d));
52713:             } else {
52713:                 jsop_neg();
52713:             }
52713:           }
52713:           END_CASE(JSOP_NEG)
52713: 
53039:           BEGIN_CASE(JSOP_POS)
53039:             jsop_pos();
53039:           END_CASE(JSOP_POS)
53039: 
54409:           BEGIN_CASE(JSOP_DELNAME)
54409:           {
54409:             uint32 index = fullAtomIndex(PC);
54409:             JSAtom *atom = script->getAtom(index);
54409: 
54409:             prepareStubCall(Uses(0));
54409:             masm.move(ImmPtr(atom), Registers::ArgReg1);
54409:             stubCall(stubs::DelName);
54409:             frame.pushSynced();
54409:           }
54409:           END_CASE(JSOP_DELNAME)
54409: 
54406:           BEGIN_CASE(JSOP_DELPROP)
54406:           {
54406:             uint32 index = fullAtomIndex(PC);
54406:             JSAtom *atom = script->getAtom(index);
54406: 
54406:             prepareStubCall(Uses(1));
54406:             masm.move(ImmPtr(atom), Registers::ArgReg1);
54406:             stubCall(STRICT_VARIANT(stubs::DelProp));
54406:             frame.pop();
54406:             frame.pushSynced();
54406:           }
54406:           END_CASE(JSOP_DELPROP) 
54406: 
54406:           BEGIN_CASE(JSOP_DELELEM)
54406:             prepareStubCall(Uses(2));
54406:             stubCall(STRICT_VARIANT(stubs::DelElem));
54406:             frame.popn(2);
54406:             frame.pushSynced();
54406:           END_CASE(JSOP_DELELEM)
54406: 
52738:           BEGIN_CASE(JSOP_TYPEOF)
52784:           BEGIN_CASE(JSOP_TYPEOFEXPR)
52738:             jsop_typeof();
52738:           END_CASE(JSOP_TYPEOF)
52738: 
52676:           BEGIN_CASE(JSOP_VOID)
52676:             frame.pop();
53081:             frame.push(UndefinedValue());
52676:           END_CASE(JSOP_VOID)
52676: 
52732:           BEGIN_CASE(JSOP_INCNAME)
56037:             if (!jsop_nameinc(op, STRICT_VARIANT(stubs::IncName), fullAtomIndex(PC)))
56037:                 return Compile_Error;
53118:             break;
52732:           END_CASE(JSOP_INCNAME)
52732: 
52825:           BEGIN_CASE(JSOP_INCGNAME)
54169:             jsop_gnameinc(op, STRICT_VARIANT(stubs::IncGlobalName), fullAtomIndex(PC));
53511:             break;
52825:           END_CASE(JSOP_INCGNAME)
52825: 
52746:           BEGIN_CASE(JSOP_INCPROP)
56037:             if (!jsop_propinc(op, STRICT_VARIANT(stubs::IncProp), fullAtomIndex(PC)))
56037:                 return Compile_Error;
52916:             break;
52746:           END_CASE(JSOP_INCPROP)
52746: 
52815:           BEGIN_CASE(JSOP_INCELEM)
54169:             jsop_eleminc(op, STRICT_VARIANT(stubs::IncElem));
52815:           END_CASE(JSOP_INCELEM)
52815: 
52732:           BEGIN_CASE(JSOP_DECNAME)
56037:             if (!jsop_nameinc(op, STRICT_VARIANT(stubs::DecName), fullAtomIndex(PC)))
56037:                 return Compile_Error;
53118:             break;
52732:           END_CASE(JSOP_DECNAME)
52732: 
52825:           BEGIN_CASE(JSOP_DECGNAME)
54169:             jsop_gnameinc(op, STRICT_VARIANT(stubs::DecGlobalName), fullAtomIndex(PC));
53511:             break;
52825:           END_CASE(JSOP_DECGNAME)
52825: 
52746:           BEGIN_CASE(JSOP_DECPROP)
56037:             if (!jsop_propinc(op, STRICT_VARIANT(stubs::DecProp), fullAtomIndex(PC)))
56037:                 return Compile_Error;
52916:             break;
52746:           END_CASE(JSOP_DECPROP)
52746: 
52815:           BEGIN_CASE(JSOP_DECELEM)
54169:             jsop_eleminc(op, STRICT_VARIANT(stubs::DecElem));
52815:           END_CASE(JSOP_DECELEM)
52815: 
53118:           BEGIN_CASE(JSOP_NAMEINC)
56037:             if (!jsop_nameinc(op, STRICT_VARIANT(stubs::NameInc), fullAtomIndex(PC)))
56037:                 return Compile_Error;
53118:             break;
53118:           END_CASE(JSOP_NAMEINC)
53118: 
52825:           BEGIN_CASE(JSOP_GNAMEINC)
54169:             jsop_gnameinc(op, STRICT_VARIANT(stubs::GlobalNameInc), fullAtomIndex(PC));
53511:             break;
52825:           END_CASE(JSOP_GNAMEINC)
52732: 
52746:           BEGIN_CASE(JSOP_PROPINC)
56037:             if (!jsop_propinc(op, STRICT_VARIANT(stubs::PropInc), fullAtomIndex(PC)))
56037:                 return Compile_Error;
52916:             break;
52746:           END_CASE(JSOP_PROPINC)
52746: 
52815:           BEGIN_CASE(JSOP_ELEMINC)
54169:             jsop_eleminc(op, STRICT_VARIANT(stubs::ElemInc));
52815:           END_CASE(JSOP_ELEMINC)
52815: 
52732:           BEGIN_CASE(JSOP_NAMEDEC)
56037:             if (!jsop_nameinc(op, STRICT_VARIANT(stubs::NameDec), fullAtomIndex(PC)))
56037:                 return Compile_Error;
53118:             break;
52732:           END_CASE(JSOP_NAMEDEC)
52732: 
52825:           BEGIN_CASE(JSOP_GNAMEDEC)
54169:             jsop_gnameinc(op, STRICT_VARIANT(stubs::GlobalNameDec), fullAtomIndex(PC));
53511:             break;
52825:           END_CASE(JSOP_GNAMEDEC)
52825: 
52746:           BEGIN_CASE(JSOP_PROPDEC)
56037:             if (!jsop_propinc(op, STRICT_VARIANT(stubs::PropDec), fullAtomIndex(PC)))
56037:                 return Compile_Error;
52916:             break;
52746:           END_CASE(JSOP_PROPDEC)
52746: 
52815:           BEGIN_CASE(JSOP_ELEMDEC)
54169:             jsop_eleminc(op, STRICT_VARIANT(stubs::ElemDec));
52815:           END_CASE(JSOP_ELEMDEC)
52815: 
52741:           BEGIN_CASE(JSOP_GETTHISPROP)
52741:             /* Push thisv onto stack. */
52741:             jsop_this();
56037:             if (!jsop_getprop(script->getAtom(fullAtomIndex(PC))))
56037:                 return Compile_Error;
52741:           END_CASE(JSOP_GETTHISPROP);
52741: 
52741:           BEGIN_CASE(JSOP_GETARGPROP)
52741:             /* Push arg onto stack. */
52741:             jsop_getarg(GET_SLOTNO(PC));
56037:             if (!jsop_getprop(script->getAtom(fullAtomIndex(&PC[ARGNO_LEN]))))
56037:                 return Compile_Error;
52741:           END_CASE(JSOP_GETARGPROP)
52741: 
52741:           BEGIN_CASE(JSOP_GETLOCALPROP)
52741:             frame.pushLocal(GET_SLOTNO(PC));
56037:             if (!jsop_getprop(script->getAtom(fullAtomIndex(&PC[SLOTNO_LEN]))))
56037:                 return Compile_Error;
52741:           END_CASE(JSOP_GETLOCALPROP)
52741: 
52741:           BEGIN_CASE(JSOP_GETPROP)
56037:             if (!jsop_getprop(script->getAtom(fullAtomIndex(PC))))
56037:                 return Compile_Error;
52741:           END_CASE(JSOP_GETPROP)
52741: 
52762:           BEGIN_CASE(JSOP_LENGTH)
56037:             if (!jsop_length())
56037:                 return Compile_Error;
52762:           END_CASE(JSOP_LENGTH)
52762: 
52693:           BEGIN_CASE(JSOP_GETELEM)
56037:             if (!jsop_getelem())
56037:                 return Compile_Error;
52693:           END_CASE(JSOP_GETELEM)
52693: 
52693:           BEGIN_CASE(JSOP_SETELEM)
52838:             jsop_setelem();
52693:           END_CASE(JSOP_SETELEM);
52693: 
52644:           BEGIN_CASE(JSOP_CALLNAME)
53087:             prepareStubCall(Uses(0));
52644:             masm.move(Imm32(fullAtomIndex(PC)), Registers::ArgReg1);
53087:             stubCall(stubs::CallName);
52644:             frame.pushSynced();
52771:             frame.pushSynced();
52644:           END_CASE(JSOP_CALLNAME)
52644: 
52645:           BEGIN_CASE(JSOP_CALL)
52767:           BEGIN_CASE(JSOP_EVAL)
52767:           BEGIN_CASE(JSOP_APPLY)
52645:           {
52648:             JaegerSpew(JSpew_Insns, " --- SCRIPTED CALL --- \n");
52850:             inlineCallHelper(GET_ARGC(PC), false);
52648:             JaegerSpew(JSpew_Insns, " --- END SCRIPTED CALL --- \n");
52645:           }
52645:           END_CASE(JSOP_CALL)
52645: 
52615:           BEGIN_CASE(JSOP_NAME)
53054:             jsop_name(script->getAtom(fullAtomIndex(PC)));
52615:           END_CASE(JSOP_NAME)
52615: 
52605:           BEGIN_CASE(JSOP_DOUBLE)
52605:           {
52605:             uint32 index = fullAtomIndex(PC);
53081:             double d = script->getConst(index).toDouble();
53081:             frame.push(Value(DoubleValue(d)));
52605:           }
52605:           END_CASE(JSOP_DOUBLE)
52605: 
52653:           BEGIN_CASE(JSOP_STRING)
52653:           {
52653:             JSAtom *atom = script->getAtom(fullAtomIndex(PC));
52653:             JSString *str = ATOM_TO_STRING(atom);
53081:             frame.push(Value(StringValue(str)));
52653:           }
52653:           END_CASE(JSOP_STRING)
52653: 
52560:           BEGIN_CASE(JSOP_ZERO)
52617:             frame.push(Valueify(JSVAL_ZERO));
52560:           END_CASE(JSOP_ZERO)
52560: 
52560:           BEGIN_CASE(JSOP_ONE)
52617:             frame.push(Valueify(JSVAL_ONE));
52560:           END_CASE(JSOP_ONE)
52560: 
52675:           BEGIN_CASE(JSOP_NULL)
53081:             frame.push(NullValue());
52675:           END_CASE(JSOP_NULL)
52675: 
52704:           BEGIN_CASE(JSOP_THIS)
52741:             jsop_this();
52704:           END_CASE(JSOP_THIS)
52704: 
52666:           BEGIN_CASE(JSOP_FALSE)
53081:             frame.push(Value(BooleanValue(false)));
52666:           END_CASE(JSOP_FALSE)
52666: 
52665:           BEGIN_CASE(JSOP_TRUE)
53081:             frame.push(Value(BooleanValue(true)));
52665:           END_CASE(JSOP_TRUE)
52665: 
52733:           BEGIN_CASE(JSOP_OR)
52733:           BEGIN_CASE(JSOP_AND)
53086:             jsop_andor(op, PC + GET_JUMP_OFFSET(PC));
52733:           END_CASE(JSOP_AND)
52733: 
52794:           BEGIN_CASE(JSOP_TABLESWITCH)
54719:             frame.syncAndForgetEverything();
52794:             masm.move(ImmPtr(PC), Registers::ArgReg1);
53338: 
54719:             /* prepareStubCall() is not needed due to syncAndForgetEverything() */
53087:             stubCall(stubs::TableSwitch);
53338:             frame.pop();
53338: 
52794:             masm.jump(Registers::ReturnReg);
52794:             PC += js_GetVariableBytecodeLength(PC);
52794:             break;
52794:           END_CASE(JSOP_TABLESWITCH)
52794: 
52793:           BEGIN_CASE(JSOP_LOOKUPSWITCH)
54719:             frame.syncAndForgetEverything();
52793:             masm.move(ImmPtr(PC), Registers::ArgReg1);
53338: 
54719:             /* prepareStubCall() is not needed due to syncAndForgetEverything() */
53087:             stubCall(stubs::LookupSwitch);
53338:             frame.pop();
53338: 
52793:             masm.jump(Registers::ReturnReg);
52793:             PC += js_GetVariableBytecodeLength(PC);
52793:             break;
52793:           END_CASE(JSOP_LOOKUPSWITCH)
52793: 
52739:           BEGIN_CASE(JSOP_STRICTEQ)
52855:             jsop_stricteq(op);
52739:           END_CASE(JSOP_STRICTEQ)
52739: 
52739:           BEGIN_CASE(JSOP_STRICTNE)
52855:             jsop_stricteq(op);
52739:           END_CASE(JSOP_STRICTNE)
52739: 
52736:           BEGIN_CASE(JSOP_ITER)
53404: # if defined JS_CPU_X64
53368:             prepareStubCall(Uses(1));
53368:             masm.move(Imm32(PC[1]), Registers::ArgReg1);
53368:             stubCall(stubs::Iter);
53368:             frame.pop();
53368:             frame.pushSynced();
53404: #else
53404:             iter(PC[1]);
53404: #endif
52736:           END_CASE(JSOP_ITER)
52736: 
52737:           BEGIN_CASE(JSOP_MOREITER)
52737:             /* This MUST be fused with IFNE or IFNEX. */
52737:             iterMore();
52737:             break;
52737:           END_CASE(JSOP_MOREITER)
52737: 
52737:           BEGIN_CASE(JSOP_ENDITER)
53404: # if defined JS_CPU_X64
53368:             prepareStubCall(Uses(1));
53368:             stubCall(stubs::EndIter);
53368:             frame.pop();
53404: #else
53404:             iterEnd();
53404: #endif
52737:           END_CASE(JSOP_ENDITER)
52737: 
52575:           BEGIN_CASE(JSOP_POP)
52575:             frame.pop();
52575:           END_CASE(JSOP_POP)
52575: 
52697:           BEGIN_CASE(JSOP_NEW)
52697:           {
52697:             JaegerSpew(JSpew_Insns, " --- NEW OPERATOR --- \n");
52850:             inlineCallHelper(GET_ARGC(PC), true);
52697:             JaegerSpew(JSpew_Insns, " --- END NEW OPERATOR --- \n");
52697:           }
52697:           END_CASE(JSOP_NEW)
52697: 
52656:           BEGIN_CASE(JSOP_GETARG)
52678:           BEGIN_CASE(JSOP_CALLARG)
52656:           {
52741:             jsop_getarg(GET_SLOTNO(PC));
52678:             if (op == JSOP_CALLARG)
55712:                 frame.push(UndefinedValue());
52656:           }
52656:           END_CASE(JSOP_GETARG)
52656: 
52825:           BEGIN_CASE(JSOP_BINDGNAME)
52826:             jsop_bindgname();
52825:           END_CASE(JSOP_BINDGNAME)
52825: 
52728:           BEGIN_CASE(JSOP_SETARG)
52728:           {
52728:             uint32 slot = GET_SLOTNO(PC);
52728:             FrameEntry *top = frame.peek(-1);
52728: 
52728:             bool popped = PC[JSOP_SETARG_LENGTH] == JSOP_POP;
52728: 
52728:             RegisterID reg = frame.allocReg();
53840:             Address address = Address(JSFrameReg, JSStackFrame::offsetOfFormalArg(fun, slot));
52728:             frame.storeTo(top, address, popped);
52728:             frame.freeReg(reg);
52728:           }
52728:           END_CASE(JSOP_SETARG)
52728: 
52670:           BEGIN_CASE(JSOP_GETLOCAL)
52670:           {
52670:             uint32 slot = GET_SLOTNO(PC);
52670:             frame.pushLocal(slot);
52670:           }
52670:           END_CASE(JSOP_GETLOCAL)
52670: 
52670:           BEGIN_CASE(JSOP_SETLOCAL)
54719:           {
54719:             jsbytecode *next = &PC[JSOP_SETLOCAL_LENGTH];
54719:             bool pop = JSOp(*next) == JSOP_POP && !analysis[next].nincoming;
54719:             frame.storeLocal(GET_SLOTNO(PC), pop);
54719:             if (pop) {
54719:                 frame.pop();
54719:                 PC += JSOP_SETLOCAL_LENGTH + JSOP_POP_LENGTH;
54719:                 break;
54719:             }
54719:           }
54719:           END_CASE(JSOP_SETLOCAL)
54719: 
54580:           BEGIN_CASE(JSOP_SETLOCALPOP)
54719:             frame.storeLocal(GET_SLOTNO(PC), true);
54575:             frame.pop();
54719:           END_CASE(JSOP_SETLOCALPOP)
54575: 
52575:           BEGIN_CASE(JSOP_UINT16)
53081:             frame.push(Value(Int32Value((int32_t) GET_UINT16(PC))));
52575:           END_CASE(JSOP_UINT16)
52575: 
52719:           BEGIN_CASE(JSOP_NEWINIT)
52719:           {
55746:             jsint i = GET_UINT16(PC);
55746:             uint32 count = GET_UINT16(PC + UINT16_LEN);
55746: 
52719:             JS_ASSERT(i == JSProto_Array || i == JSProto_Object);
52719: 
53087:             prepareStubCall(Uses(0));
55746:             masm.move(Imm32(count), Registers::ArgReg1);
53531:             if (i == JSProto_Array)
53087:                 stubCall(stubs::NewInitArray);
53531:             else
53087:                 stubCall(stubs::NewInitObject);
52719:             frame.takeReg(Registers::ReturnReg);
53025:             frame.pushTypedPayload(JSVAL_TYPE_OBJECT, Registers::ReturnReg);
52719:           }
52719:           END_CASE(JSOP_NEWINIT)
52719: 
52719:           BEGIN_CASE(JSOP_ENDINIT)
52719:           END_CASE(JSOP_ENDINIT)
52719: 
52735:           BEGIN_CASE(JSOP_INITPROP)
52735:           {
52735:             JSAtom *atom = script->getAtom(fullAtomIndex(PC));
53087:             prepareStubCall(Uses(2));
52735:             masm.move(ImmPtr(atom), Registers::ArgReg1);
53087:             stubCall(stubs::InitProp);
52735:             frame.pop();
52735:           }
52735:           END_CASE(JSOP_INITPROP)
52735: 
52723:           BEGIN_CASE(JSOP_INITELEM)
52723:           {
52723:             JSOp next = JSOp(PC[JSOP_INITELEM_LENGTH]);
53087:             prepareStubCall(Uses(3));
52723:             masm.move(Imm32(next == JSOP_ENDINIT ? 1 : 0), Registers::ArgReg1);
53087:             stubCall(stubs::InitElem);
52723:             frame.popn(2);
52723:           }
52723:           END_CASE(JSOP_INITELEM)
52723: 
52804:           BEGIN_CASE(JSOP_INCARG)
52804:           BEGIN_CASE(JSOP_DECARG)
52804:           BEGIN_CASE(JSOP_ARGINC)
52804:           BEGIN_CASE(JSOP_ARGDEC)
52804:           {
52804:             jsbytecode *next = &PC[JSOP_ARGINC_LENGTH];
52804:             bool popped = false;
52804:             if (JSOp(*next) == JSOP_POP && !analysis[next].nincoming)
52804:                 popped = true;
52804:             jsop_arginc(op, GET_SLOTNO(PC), popped);
52804:             PC += JSOP_ARGINC_LENGTH;
52804:             if (popped)
52804:                 PC += JSOP_POP_LENGTH;
52804:             break;
52804:           }
52804:           END_CASE(JSOP_ARGDEC)
52804: 
52773:           BEGIN_CASE(JSOP_FORNAME)
53087:             prepareStubCall(Uses(1));
52773:             masm.move(ImmPtr(script->getAtom(fullAtomIndex(PC))), Registers::ArgReg1);
54169:             stubCall(STRICT_VARIANT(stubs::ForName));
52773:           END_CASE(JSOP_FORNAME)
52773: 
52808:           BEGIN_CASE(JSOP_INCLOCAL)
52808:           BEGIN_CASE(JSOP_DECLOCAL)
52808:           BEGIN_CASE(JSOP_LOCALINC)
52808:           BEGIN_CASE(JSOP_LOCALDEC)
52808:           {
52808:             jsbytecode *next = &PC[JSOP_LOCALINC_LENGTH];
52808:             bool popped = false;
52808:             if (JSOp(*next) == JSOP_POP && !analysis[next].nincoming)
52808:                 popped = true;
52808:             /* These manually advance the PC. */
52808:             jsop_localinc(op, GET_SLOTNO(PC), popped);
52808:             PC += JSOP_LOCALINC_LENGTH;
52808:             if (popped)
52808:                 PC += JSOP_POP_LENGTH;
52808:             break;
52808:           }
52808:           END_CASE(JSOP_LOCALDEC)
52808: 
52560:           BEGIN_CASE(JSOP_BINDNAME)
56033:             jsop_bindname(fullAtomIndex(PC));
52560:           END_CASE(JSOP_BINDNAME)
52560: 
52886:           BEGIN_CASE(JSOP_SETPROP)
56037:             if (!jsop_setprop(script->getAtom(fullAtomIndex(PC))))
56037:                 return Compile_Error;
52886:           END_CASE(JSOP_SETPROP)
52886: 
52611:           BEGIN_CASE(JSOP_SETNAME)
52747:           BEGIN_CASE(JSOP_SETMETHOD)
56037:             if (!jsop_setprop(script->getAtom(fullAtomIndex(PC))))
56037:                 return Compile_Error;
52611:           END_CASE(JSOP_SETNAME)
52611: 
52772:           BEGIN_CASE(JSOP_THROW)
53087:             prepareStubCall(Uses(1));
53087:             stubCall(stubs::Throw);
52772:             frame.pop();
52772:           END_CASE(JSOP_THROW)
52772: 
54413:           BEGIN_CASE(JSOP_IN)
54413:             prepareStubCall(Uses(2));
54413:             stubCall(stubs::In);
54413:             frame.popn(2);
54413:             frame.takeReg(Registers::ReturnReg);
54413:             frame.pushTypedPayload(JSVAL_TYPE_BOOLEAN, Registers::ReturnReg);
54413:           END_CASE(JSOP_IN)
54413: 
52780:           BEGIN_CASE(JSOP_INSTANCEOF)
56037:             if (!jsop_instanceof())
56037:                 return Compile_Error;
52780:           END_CASE(JSOP_INSTANCEOF)
52780: 
52786:           BEGIN_CASE(JSOP_EXCEPTION)
52786:           {
52787:             JS_STATIC_ASSERT(sizeof(cx->throwing) == 4);
52786:             RegisterID reg = frame.allocReg();
52786:             masm.loadPtr(FrameAddress(offsetof(VMFrame, cx)), reg);
52786:             masm.store32(Imm32(JS_FALSE), Address(reg, offsetof(JSContext, throwing)));
52786: 
52786:             Address excn(reg, offsetof(JSContext, exception));
52786:             frame.freeReg(reg);
52786:             frame.push(excn);
52786:           }
52786:           END_CASE(JSOP_EXCEPTION)
52786: 
52768:           BEGIN_CASE(JSOP_LINENO)
52768:           END_CASE(JSOP_LINENO)
52768: 
54855:           BEGIN_CASE(JSOP_BLOCKCHAIN)
54855:           END_CASE(JSOP_BLOCKCHAIN)
54855: 
54855:           BEGIN_CASE(JSOP_NULLBLOCKCHAIN)
54855:           END_CASE(JSOP_NULLBLOCKCHAIN)
54855: 
54415:           BEGIN_CASE(JSOP_CONDSWITCH)
54415:             /* No-op for the decompiler. */
54415:           END_CASE(JSOP_CONDSWITCH)
54415: 
52647:           BEGIN_CASE(JSOP_DEFFUN)
53591:           {
53591:             uint32 index = fullAtomIndex(PC);
53591:             JSFunction *inner = script->getFunction(index);
53591: 
53591:             if (fun) {
53591:                 JSLocalKind localKind = fun->lookupLocal(cx, inner->atom, NULL);
53591:                 if (localKind != JSLOCAL_NONE)
54719:                     frame.syncAndForgetEverything();
53591:             }
53591: 
53087:             prepareStubCall(Uses(0));
53591:             masm.move(ImmPtr(inner), Registers::ArgReg1);
54169:             stubCall(STRICT_VARIANT(stubs::DefFun));
53591:           }
52647:           END_CASE(JSOP_DEFFUN)
52647: 
54408:           BEGIN_CASE(JSOP_DEFVAR)
54408:           {
54408:             uint32 index = fullAtomIndex(PC);
54408:             JSAtom *atom = script->getAtom(index);
54408: 
54408:             prepareStubCall(Uses(0));
54408:             masm.move(ImmPtr(atom), Registers::ArgReg1);
54408:             stubCall(stubs::DefVar);
54408:           }
54408:           END_CASE(JSOP_DEFVAR)
54408: 
53038:           BEGIN_CASE(JSOP_DEFLOCALFUN_FC)
53038:           {
53038:             uint32 slot = GET_SLOTNO(PC);
53038:             JSFunction *fun = script->getFunction(fullAtomIndex(&PC[SLOTNO_LEN]));
53087:             prepareStubCall(Uses(frame.frameDepth()));
53038:             masm.move(ImmPtr(fun), Registers::ArgReg1);
53087:             stubCall(stubs::DefLocalFun_FC);
53038:             frame.takeReg(Registers::ReturnReg);
53038:             frame.pushTypedPayload(JSVAL_TYPE_OBJECT, Registers::ReturnReg);
53309:             frame.storeLocal(slot, true);
53038:             frame.pop();
53038:           }
53340:           END_CASE(JSOP_DEFLOCALFUN_FC)
53038: 
52730:           BEGIN_CASE(JSOP_LAMBDA)
52730:           {
52730:             JSFunction *fun = script->getFunction(fullAtomIndex(PC));
53249: 
53249:             JSObjStubFun stub = stubs::Lambda;
53249:             uint32 uses = 0;
53249: 
54855:             jsbytecode *pc2 = js_AdvanceOverBlockchain(PC + JSOP_LAMBDA_LENGTH);
54855:             JSOp next = JSOp(*pc2);
54855:             
53249:             if (next == JSOP_INITMETHOD) {
53249:                 stub = stubs::LambdaForInit;
53249:             } else if (next == JSOP_SETMETHOD) {
53249:                 stub = stubs::LambdaForSet;
53249:                 uses = 1;
53249:             } else if (fun->joinable()) {
53249:                 if (next == JSOP_CALL) {
53249:                     stub = stubs::LambdaJoinableForCall;
53249:                     uses = frame.frameDepth();
53249:                 } else if (next == JSOP_NULL) {
53249:                     stub = stubs::LambdaJoinableForNull;
53249:                 }
53249:             }
53249: 
53249:             prepareStubCall(Uses(uses));
52730:             masm.move(ImmPtr(fun), Registers::ArgReg1);
53128: 
54855:             if (stub == stubs::Lambda) {
53249:                 stubCall(stub);
54855:             } else {
54855:                 jsbytecode *savedPC = PC;
54855:                 PC = pc2;
54855:                 stubCall(stub);
54855:                 PC = savedPC;
54855:             }
53249: 
52730:             frame.takeReg(Registers::ReturnReg);
53025:             frame.pushTypedPayload(JSVAL_TYPE_OBJECT, Registers::ReturnReg);
52730:           }
52730:           END_CASE(JSOP_LAMBDA)
52730: 
52774:           BEGIN_CASE(JSOP_TRY)
54719:             frame.syncAndForgetEverything();
52774:           END_CASE(JSOP_TRY)
52774: 
53531:           BEGIN_CASE(JSOP_GETFCSLOT)
53531:           BEGIN_CASE(JSOP_CALLFCSLOT)
52716:           {
53531:             uintN index = GET_UINT16(PC);
53531:             // JSObject *obj = &fp->argv[-2].toObject();
52716:             RegisterID reg = frame.allocReg();
53840:             masm.loadPayload(Address(JSFrameReg, JSStackFrame::offsetOfCallee(fun)), reg);
53531:             // obj->getFlatClosureUpvars()
55746:             masm.loadPtr(Address(reg, offsetof(JSObject, slots)), reg);
55746:             Address upvarAddress(reg, JSObject::JSSLOT_FLAT_CLOSURE_UPVARS * sizeof(Value));
53531:             masm.loadPrivate(upvarAddress, reg);
53531:             // push ((Value *) reg)[index]
52716:             frame.freeReg(reg);
53531:             frame.push(Address(reg, index * sizeof(Value)));
53531:             if (op == JSOP_CALLFCSLOT)
55712:                 frame.push(UndefinedValue());
52716:           }
53531:           END_CASE(JSOP_CALLFCSLOT)
52716: 
53037:           BEGIN_CASE(JSOP_ARGSUB)
53087:             prepareStubCall(Uses(0));
53037:             masm.move(Imm32(GET_ARGNO(PC)), Registers::ArgReg1);
53087:             stubCall(stubs::ArgSub);
53037:             frame.pushSynced();
53037:           END_CASE(JSOP_ARGSUB)
53037: 
52781:           BEGIN_CASE(JSOP_ARGCNT)
53087:             prepareStubCall(Uses(0));
53087:             stubCall(stubs::ArgCnt);
52781:             frame.pushSynced();
52781:           END_CASE(JSOP_ARGCNT)
52781: 
52727:           BEGIN_CASE(JSOP_DEFLOCALFUN)
52727:           {
52727:             uint32 slot = GET_SLOTNO(PC);
52727:             JSFunction *fun = script->getFunction(fullAtomIndex(&PC[SLOTNO_LEN]));
53087:             prepareStubCall(Uses(0));
52727:             masm.move(ImmPtr(fun), Registers::ArgReg1);
53087:             stubCall(stubs::DefLocalFun);
52727:             frame.takeReg(Registers::ReturnReg);
53025:             frame.pushTypedPayload(JSVAL_TYPE_OBJECT, Registers::ReturnReg);
53309:             frame.storeLocal(slot, true);
52727:             frame.pop();
52727:           }
52727:           END_CASE(JSOP_DEFLOCALFUN)
52727: 
52806:           BEGIN_CASE(JSOP_RETRVAL)
54832:             emitReturn(NULL);
52806:           END_CASE(JSOP_RETRVAL)
52806: 
52825:           BEGIN_CASE(JSOP_GETGNAME)
52825:           BEGIN_CASE(JSOP_CALLGNAME)
52826:             jsop_getgname(fullAtomIndex(PC));
52825:             if (op == JSOP_CALLGNAME)
55712:                 frame.push(UndefinedValue());
52825:           END_CASE(JSOP_GETGNAME)
52825: 
52825:           BEGIN_CASE(JSOP_SETGNAME)
52831:             jsop_setgname(fullAtomIndex(PC));
52825:           END_CASE(JSOP_SETGNAME)
52825: 
52729:           BEGIN_CASE(JSOP_REGEXP)
52729:           {
52729:             JSObject *regex = script->getRegExp(fullAtomIndex(PC));
53087:             prepareStubCall(Uses(0));
52729:             masm.move(ImmPtr(regex), Registers::ArgReg1);
53087:             stubCall(stubs::RegExp);
52729:             frame.takeReg(Registers::ReturnReg);
53025:             frame.pushTypedPayload(JSVAL_TYPE_OBJECT, Registers::ReturnReg);
52729:           }
52729:           END_CASE(JSOP_REGEXP)
52729: 
52761:           BEGIN_CASE(JSOP_CALLPROP)
52903:             if (!jsop_callprop(script->getAtom(fullAtomIndex(PC))))
52903:                 return Compile_Error;
52761:           END_CASE(JSOP_CALLPROP)
52761: 
52726:           BEGIN_CASE(JSOP_GETUPVAR)
52726:           BEGIN_CASE(JSOP_CALLUPVAR)
52726:           {
52726:             uint32 index = GET_UINT16(PC);
52726:             JSUpvarArray *uva = script->upvars();
52726:             JS_ASSERT(index < uva->length);
52726: 
53087:             prepareStubCall(Uses(0));
53081:             masm.move(Imm32(uva->vector[index].asInteger()), Registers::ArgReg1);
53087:             stubCall(stubs::GetUpvar);
52726:             frame.pushSynced();
52726:             if (op == JSOP_CALLUPVAR)
55712:                 frame.push(UndefinedValue());
52726:           }
52726:           END_CASE(JSOP_CALLUPVAR)
52726: 
52575:           BEGIN_CASE(JSOP_UINT24)
53081:             frame.push(Value(Int32Value((int32_t) GET_UINT24(PC))));
52575:           END_CASE(JSOP_UINT24)
52575: 
52771:           BEGIN_CASE(JSOP_CALLELEM)
53087:             prepareStubCall(Uses(2));
53087:             stubCall(stubs::CallElem);
52771:             frame.popn(2);
52771:             frame.pushSynced();
52771:             frame.pushSynced();
52771:           END_CASE(JSOP_CALLELEM)
52771: 
52560:           BEGIN_CASE(JSOP_STOP)
52560:             /* Safe point! */
54832:             emitReturn(NULL);
52560:             goto done;
52560:           END_CASE(JSOP_STOP)
52560: 
54847:           BEGIN_CASE(JSOP_GETXPROP)
56037:             if (!jsop_xname(script->getAtom(fullAtomIndex(PC))))
56037:                 return Compile_Error;
54847:           END_CASE(JSOP_GETXPROP)
54847: 
52785:           BEGIN_CASE(JSOP_ENTERBLOCK)
54840:             enterBlock(script->getObject(fullAtomIndex(PC)));
54840:           END_CASE(JSOP_ENTERBLOCK);
52785: 
52785:           BEGIN_CASE(JSOP_LEAVEBLOCK)
54840:             leaveBlock();
52785:           END_CASE(JSOP_LEAVEBLOCK)
52785: 
52742:           BEGIN_CASE(JSOP_CALLLOCAL)
52742:             frame.pushLocal(GET_SLOTNO(PC));
55712:             frame.push(UndefinedValue());
52742:           END_CASE(JSOP_CALLLOCAL)
52742: 
52575:           BEGIN_CASE(JSOP_INT8)
53081:             frame.push(Value(Int32Value(GET_INT8(PC))));
52575:           END_CASE(JSOP_INT8)
52575: 
52575:           BEGIN_CASE(JSOP_INT32)
53081:             frame.push(Value(Int32Value(GET_INT32(PC))));
52575:           END_CASE(JSOP_INT32)
52575: 
52703:           BEGIN_CASE(JSOP_NEWARRAY)
52703:           {
52703:             uint32 len = GET_UINT16(PC);
53087:             prepareStubCall(Uses(len));
52703:             masm.move(Imm32(len), Registers::ArgReg1);
53087:             stubCall(stubs::NewArray);
52703:             frame.popn(len);
52703:             frame.takeReg(Registers::ReturnReg);
53025:             frame.pushTypedPayload(JSVAL_TYPE_OBJECT, Registers::ReturnReg);
52703:           }
52703:           END_CASE(JSOP_NEWARRAY)
52703: 
54415:           BEGIN_CASE(JSOP_HOLE)
54415:             frame.push(MagicValue(JS_ARRAY_HOLE));
54415:           END_CASE(JSOP_HOLE)
54415: 
52775:           BEGIN_CASE(JSOP_LAMBDA_FC)
52775:           {
52775:             JSFunction *fun = script->getFunction(fullAtomIndex(PC));
53087:             prepareStubCall(Uses(frame.frameDepth()));
52775:             masm.move(ImmPtr(fun), Registers::ArgReg1);
53087:             stubCall(stubs::FlatLambda);
52775:             frame.takeReg(Registers::ReturnReg);
53025:             frame.pushTypedPayload(JSVAL_TYPE_OBJECT, Registers::ReturnReg);
52775:           }
52775:           END_CASE(JSOP_LAMBDA_FC)
52775: 
52617:           BEGIN_CASE(JSOP_TRACE)
52753:           {
53223:             if (analysis[PC].nincoming > 0)
53223:                 interruptCheckHelper();
52753:           }
52617:           END_CASE(JSOP_TRACE)
52617: 
53395:           BEGIN_CASE(JSOP_DEBUGGER)
53395:             prepareStubCall(Uses(0));
53396:             masm.move(ImmPtr(PC), Registers::ArgReg1);
53395:             stubCall(stubs::Debugger);
53395:           END_CASE(JSOP_DEBUGGER)
53395: 
52783:           BEGIN_CASE(JSOP_INITMETHOD)
52783:           {
52783:             JSAtom *atom = script->getAtom(fullAtomIndex(PC));
53087:             prepareStubCall(Uses(2));
52783:             masm.move(ImmPtr(atom), Registers::ArgReg1);
53087:             stubCall(stubs::InitMethod);
52783:             frame.pop();
52783:           }
52783:           END_CASE(JSOP_INITMETHOD)
52783: 
52874:           BEGIN_CASE(JSOP_UNBRAND)
52874:             jsop_unbrand();
52874:           END_CASE(JSOP_UNBRAND)
52874: 
52874:           BEGIN_CASE(JSOP_UNBRANDTHIS)
52874:             jsop_this();
52874:             jsop_unbrand();
52875:             frame.pop();
52874:           END_CASE(JSOP_UNBRANDTHIS)
52874: 
52560:           BEGIN_CASE(JSOP_GETGLOBAL)
52779:           BEGIN_CASE(JSOP_CALLGLOBAL)
52560:             jsop_getglobal(GET_SLOTNO(PC));
52779:             if (op == JSOP_CALLGLOBAL)
55712:                 frame.push(UndefinedValue());
52560:           END_CASE(JSOP_GETGLOBAL)
52560: 
52560:           BEGIN_CASE(JSOP_SETGLOBAL)
52560:             jsop_setglobal(GET_SLOTNO(PC));
52560:           END_CASE(JSOP_SETGLOBAL)
52560: 
52623:           BEGIN_CASE(JSOP_INCGLOBAL)
52623:           BEGIN_CASE(JSOP_DECGLOBAL)
52623:           BEGIN_CASE(JSOP_GLOBALINC)
52623:           BEGIN_CASE(JSOP_GLOBALDEC)
52623:             /* Advances PC automatically. */
52623:             jsop_globalinc(op, GET_SLOTNO(PC));
52623:             break;
52623:           END_CASE(JSOP_GLOBALINC)
52623: 
56033:           BEGIN_CASE(JSOP_BEGIN)
56037:             if (isConstructing) {
56037:                 if (!constructThis())
56037:                     return Compile_Error;
56037:             }
56033:           END_CASE(JSOP_BEGIN)
56033: 
52558:           default:
52558:            /* Sorry, this opcode isn't implemented yet. */
52558: #ifdef JS_METHODJIT_SPEW
52825:             JaegerSpew(JSpew_Abort, "opcode %s not handled yet (%s line %d)\n", OpcodeNames[op],
52825:                        script->filename, js_PCToLineNumber(cx, script, PC));
52558: #endif
52558:             return Compile_Abort;
52558:         }
52560: 
52560:     /**********************
52560:      *  END COMPILER OPS  *
52560:      **********************/ 
52578: 
52618: #ifdef DEBUG
52578:         frame.assertValidRegisterState();
52618: #endif
52558:     }
52558: 
52560:   done:
52558:     return Compile_Okay;
52558: }
52558: 
52560: #undef END_CASE
52560: #undef BEGIN_CASE
52560: 
52653: JSC::MacroAssembler::Label
52599: mjit::Compiler::labelOf(jsbytecode *pc)
52599: {
52599:     uint32 offs = uint32(pc - script->code);
52599:     JS_ASSERT(jumpMap[offs].isValid());
52599:     return jumpMap[offs];
52599: }
52599: 
52560: uint32
52560: mjit::Compiler::fullAtomIndex(jsbytecode *pc)
52560: {
52560:     return GET_SLOTNO(pc);
52560: 
52560:     /* If we ever enable INDEXBASE garbage, use this below. */
52560: #if 0
52560:     return GET_SLOTNO(pc) + (atoms - script->atomMap.vector);
52560: #endif
52560: }
52560: 
52653: bool
52653: mjit::Compiler::knownJump(jsbytecode *pc)
52653: {
52653:     return pc < PC;
52653: }
52653: 
53168: void *
53168: mjit::Compiler::findCallSite(const CallSite &callSite)
53168: {
53498:     JS_ASSERT(callSite.pcOffset < script->length);
53168: 
55503:     JITScript *jit = script->getJIT(fp->isConstructing());
55503:     uint8* ilPath = (uint8 *)jit->code.m_code.executableAddress();
55503:     uint8* oolPath = ilPath + masm.size();
55503: 
53168:     for (uint32 i = 0; i < callSites.length(); i++) {
53498:         if (callSites[i].pc == script->code + callSite.pcOffset &&
53498:             callSites[i].id == callSite.id) {
53168:             if (callSites[i].stub) {
55503:                 return oolPath + stubcc.masm.distanceOf(callSites[i].location);
53168:             }
55503:             return ilPath + masm.distanceOf(callSites[i].location);
53168:         }
53168:     }
53168: 
53168:     /* We have no idea where to patch up to. */
53168:     JS_NOT_REACHED("Call site vanished.");
53168:     return NULL;
53168: }
53168: 
52599: void
52599: mjit::Compiler::jumpInScript(Jump j, jsbytecode *pc)
52599: {
52599:     JS_ASSERT(pc >= script->code && uint32(pc - script->code) < script->length);
52599: 
52599:     /* :TODO: OOM failure possible here. */
52599: 
52599:     if (pc < PC)
52599:         j.linkTo(jumpMap[uint32(pc - script->code)], &masm);
52599:     else
52599:         branchPatches.append(BranchPatch(j, pc));
52599: }
52599: 
52560: void
52560: mjit::Compiler::jsop_setglobal(uint32 index)
52560: {
52560:     JS_ASSERT(globalObj);
52560:     uint32 slot = script->getGlobalSlot(index);
52560: 
52560:     FrameEntry *fe = frame.peek(-1);
52560:     bool popped = PC[JSOP_SETGLOBAL_LENGTH] == JSOP_POP;
52560: 
52560:     RegisterID reg = frame.allocReg();
52622:     Address address = masm.objSlotRef(globalObj, reg, slot);
52622:     frame.storeTo(fe, address, popped);
52560:     frame.freeReg(reg);
52560: }
52560: 
52560: void
52560: mjit::Compiler::jsop_getglobal(uint32 index)
52560: {
52560:     JS_ASSERT(globalObj);
52560:     uint32 slot = script->getGlobalSlot(index);
52560: 
52560:     RegisterID reg = frame.allocReg();
52622:     Address address = masm.objSlotRef(globalObj, reg, slot);
52560:     frame.freeReg(reg);
52622:     frame.push(address);
52560: }
52560: 
52560: void
54832: mjit::Compiler::emitFinalReturn(Assembler &masm)
54832: {
54832:     masm.loadPtr(Address(JSFrameReg, JSStackFrame::offsetOfncode()), Registers::ReturnReg);
54832:     masm.jump(Registers::ReturnReg);
54832: }
54832: 
55503: // Emits code to load a return value of the frame into the scripted-ABI
55503: // type & data register pair. If the return value is in fp->rval, then |fe|
55503: // is NULL. Otherwise, |fe| contains the return value.
55503: //
55503: // If reading from fp->rval, |undefined| is loaded optimistically, before
55503: // checking if fp->rval is set in the frame flags and loading that instead.
55503: //
55503: // Otherwise, if |masm| is the inline path, it is loaded as efficiently as
55503: // the FrameState can manage. If |masm| is the OOL path, the value is simply
55503: // loaded from its slot in the frame, since the caller has guaranteed it's
55503: // been synced.
55503: //
54832: void
55503: mjit::Compiler::loadReturnValue(Assembler *masm, FrameEntry *fe)
52560: {
55503:     RegisterID typeReg = JSReturnReg_Type;
55503:     RegisterID dataReg = JSReturnReg_Data;
55503: 
55503:     if (fe) {
55503:         // If using the OOL assembler, the caller signifies that the |fe| is
55503:         // synced, but not to rely on its register state.
55503:         if (masm != &this->masm) {
55503:             if (fe->isConstant()) {
55503:                 stubcc.masm.loadValueAsComponents(fe->getValue(), typeReg, dataReg);
55503:             } else {
55503:                 Address rval(frame.addressOf(fe));
55503:                 if (fe->isTypeKnown()) {
55503:                     stubcc.masm.loadPayload(rval, dataReg);
55503:                     stubcc.masm.move(ImmType(fe->getKnownType()), typeReg);
55503:                 } else {
55503:                     stubcc.masm.loadValueAsComponents(rval, typeReg, dataReg);
55503:                 }
55503:             }
55503:         } else {
55503:             frame.loadTo(fe, typeReg, dataReg, Registers::ReturnReg);
55503:         }
55503:     } else {
55503:          // Load a return value from POPV or SETRVAL into the return registers,
55503:          // otherwise return undefined.
55503:         masm->loadValueAsComponents(UndefinedValue(), typeReg, dataReg);
55490:         if (analysis.usesReturnValue()) {
55503:             Jump rvalClear = masm->branchTest32(Assembler::Zero,
55503:                                                FrameFlagsAddress(),
55503:                                                Imm32(JSFRAME_HAS_RVAL));
55490:             Address rvalAddress(JSFrameReg, JSStackFrame::offsetOfReturnValue());
55503:             masm->loadValueAsComponents(rvalAddress, typeReg, dataReg);
55503:             rvalClear.linkTo(masm->label(), masm);
55487:         }
55487:     }
55503: }
55503: 
55503: // This ensures that constructor return values are an object. If a non-object
55503: // is returned, either explicitly or implicitly, the newly created object is
55503: // loaded out of the frame. Otherwise, the explicitly returned object is kept.
55503: //
55503: void
55503: mjit::Compiler::fixPrimitiveReturn(Assembler *masm, FrameEntry *fe)
55503: {
55503:     JS_ASSERT(isConstructing);
55503: 
55503:     Address thisv(JSFrameReg, JSStackFrame::offsetOfThis(fun));
55503: 
55503:     // Easy cases - no return value, or known primitive, so just return thisv.
55503:     if (!fe || (fe->isTypeKnown() && fe->getKnownType() != JSVAL_TYPE_OBJECT)) {
55503:         masm->loadValueAsComponents(thisv, JSReturnReg_Type, JSReturnReg_Data);
55503:         return;
55503:     }
55503: 
55503:     // If the type is known to be an object, just load the return value as normal.
55503:     if (fe->isTypeKnown() && fe->getKnownType() == JSVAL_TYPE_OBJECT) {
55503:         loadReturnValue(masm, fe);
55503:         return;
55503:     }
55503: 
55503:     // There's a return value, and its type is unknown. Test the type and load
55503:     // |thisv| if necessary.
55503:     loadReturnValue(masm, fe);
55503:     Jump j = masm->testObject(Assembler::Equal, JSReturnReg_Type);
55503:     masm->loadValueAsComponents(thisv, JSReturnReg_Type, JSReturnReg_Data);
55503:     j.linkTo(masm->label(), masm);
55503: }
55503: 
55503: // Loads the return value into the scripted ABI register pair, such that JS
55503: // semantics in constructors are preserved.
55503: //
55503: void
55503: mjit::Compiler::emitReturnValue(Assembler *masm, FrameEntry *fe)
55503: {
55503:     if (isConstructing)
55503:         fixPrimitiveReturn(masm, fe);
55503:     else
55503:         loadReturnValue(masm, fe);
55503: }
54832: 
54832: void
54832: mjit::Compiler::emitReturn(FrameEntry *fe)
54832: {
52847:     JS_ASSERT_IF(!fun, JSOp(*PC) == JSOP_STOP);
52847: 
54832:     /* Only the top of the stack can be returned. */
54832:     JS_ASSERT_IF(fe, fe == frame.peek(-1));
54832: 
52847:     /*
52847:      * If there's a function object, deal with the fact that it can escape.
52847:      * Note that after we've placed the call object, all tracked state can
52847:      * be thrown away. This will happen anyway because the next live opcode
52847:      * (if any) must have an incoming edge.
52847:      *
52847:      * However, it's an optimization to throw it away early - the tracker
52847:      * won't be spilled on further exits or join points.
52847:      */
52847:     if (fun) {
52847:         if (fun->isHeavyweight()) {
52847:             /* There will always be a call object. */
54832:             prepareStubCall(Uses(fe ? 1 : 0));
54832:             stubCall(stubs::PutActivationObjects);
54832: 
54832:             if (fe) {
55503:                 emitReturnValue(&masm, fe);
54832:                 emitFinalReturn(masm);
54719:                 frame.discardFrame();
54832:                 return;
54832:             }
52847:         } else {
53840:             /* if (hasCallObj() || hasArgsObj()) stubs::PutActivationObjects() */
53840:             Jump putObjs = masm.branchTest32(Assembler::NonZero,
53840:                                              Address(JSFrameReg, JSStackFrame::offsetOfFlags()),
53840:                                              Imm32(JSFRAME_HAS_CALL_OBJ | JSFRAME_HAS_ARGS_OBJ));
53840:             stubcc.linkExit(putObjs, Uses(frame.frameDepth()));
52847: 
52847:             stubcc.leave();
53840:             stubcc.call(stubs::PutActivationObjects);
54832: 
55503:             emitReturnValue(&stubcc.masm, fe);
54832:             emitFinalReturn(stubcc.masm);
52847:         }
54832:     }
54832: 
55503:     emitReturnValue(&masm, fe);
54832:     emitFinalReturn(masm);
54832:     frame.discardFrame();
52560: }
52560: 
52611: void
53087: mjit::Compiler::prepareStubCall(Uses uses)
52611: {
52613:     JaegerSpew(JSpew_Insns, " ---- STUB CALL, SYNCING FRAME ---- \n");
53087:     frame.syncAndKill(Registers(Registers::TempRegs), uses);
52611:     JaegerSpew(JSpew_Insns, " ---- FRAME SYNCING DONE ---- \n");
52611: }
52611: 
52611: JSC::MacroAssembler::Call
53087: mjit::Compiler::stubCall(void *ptr)
52611: {
52611:     JaegerSpew(JSpew_Insns, " ---- CALLING STUB ---- \n");
52611:     Call cl = masm.stubCall(ptr, PC, frame.stackDepth() + script->nfixed);
52613:     JaegerSpew(JSpew_Insns, " ---- END STUB CALL ---- \n");
52611:     return cl;
52611: }
52611: 
52645: void
53223: mjit::Compiler::interruptCheckHelper()
53223: {
54427:     RegisterID reg = frame.allocReg();
54427: 
54427:     /*
54427:      * Bake in and test the address of the interrupt counter for the runtime.
54427:      * This is faster than doing two additional loads for the context's
54427:      * thread data, but will cause this thread to run slower if there are
54427:      * pending interrupts on some other thread.  For non-JS_THREADSAFE builds
54427:      * we can skip this, as there is only one flag to poll.
54427:      */
53223: #ifdef JS_THREADSAFE
54427:     void *interrupt = (void*) &cx->runtime->interruptCounter;
53223: #else
54427:     void *interrupt = (void*) &JS_THREAD_DATA(cx)->interruptFlags;
53223: #endif
54427: 
54427: #if defined(JS_CPU_X86) || defined(JS_CPU_ARM)
54427:     Jump jump = masm.branch32(Assembler::NotEqual, AbsoluteAddress(interrupt), Imm32(0));
54427: #else
54427:     /* Handle processors that can't load from absolute addresses. */
54427:     masm.move(ImmPtr(interrupt), reg);
54427:     Jump jump = masm.branchTest32(Assembler::NonZero, Address(reg, 0));
54427: #endif
54427: 
54427:     stubcc.linkExitDirect(jump, stubcc.masm.label());
54427: 
54427: #ifdef JS_THREADSAFE
54427:     /*
54427:      * Do a slightly slower check for an interrupt on this thread.
54427:      * We don't want this thread to slow down excessively if the pending
54427:      * interrupt is on another thread.
54427:      */
54427:     stubcc.masm.loadPtr(FrameAddress(offsetof(VMFrame, cx)), reg);
54427:     stubcc.masm.loadPtr(Address(reg, offsetof(JSContext, thread)), reg);
54427:     Address flag(reg, offsetof(JSThread, data.interruptFlags));
54427:     Jump noInterrupt = stubcc.masm.branchTest32(Assembler::Zero, flag);
54427: #endif
54427: 
54719:     frame.freeReg(reg);
54719: 
54427:     frame.sync(stubcc.masm, Uses(0));
53223:     stubcc.masm.move(ImmPtr(PC), Registers::ArgReg1);
53223:     stubcc.call(stubs::Interrupt);
53223:     ADD_CALLSITE(true);
53223:     stubcc.rejoin(Changes(0));
54427: 
54427: #ifdef JS_THREADSAFE
54427:     stubcc.linkRejoin(noInterrupt);
54427: #endif
53223: }
53223: 
53223: void
53590: mjit::Compiler::emitUncachedCall(uint32 argc, bool callingNew)
53590: {
54832:     CallPatchInfo callPatch;
54832:     callPatch.hasSlowNcode = false;
54832: 
53590:     RegisterID r0 = Registers::ReturnReg;
53590:     VoidPtrStubUInt32 stub = callingNew ? stubs::UncachedNew : stubs::UncachedCall;
53590: 
53590:     frame.syncAndKill(Registers(Registers::AvailRegs), Uses(argc + 2));
53590:     prepareStubCall(Uses(argc + 2));
53590:     masm.move(Imm32(argc), Registers::ArgReg1);
53590:     stubCall(stub);
53590:     ADD_CALLSITE(false);
53590: 
53590:     Jump notCompiled = masm.branchTestPtr(Assembler::Zero, r0, r0);
53590: 
54832:     masm.loadPtr(FrameAddress(offsetof(VMFrame, regs.fp)), JSFrameReg);
54832:     callPatch.fastNcodePatch =
54832:         masm.storePtrWithPatch(ImmPtr(NULL),
54832:                                Address(JSFrameReg, JSStackFrame::offsetOfncode()));
54832: 
54832:     masm.jump(r0);
54832: 
53862: #if (defined(JS_NO_FASTCALL) && defined(JS_CPU_X86)) || defined(_WIN64)
53590:     masm.callLabel = masm.label();
53590: #endif
53590:     ADD_CALLSITE(false);
53590: 
54832:     callPatch.joinPoint = masm.label();
54832:     masm.loadPtr(Address(JSFrameReg, JSStackFrame::offsetOfPrev()), JSFrameReg);
54832: 
52850:     frame.popn(argc + 2);
52850:     frame.takeReg(JSReturnReg_Type);
52850:     frame.takeReg(JSReturnReg_Data);
52850:     frame.pushRegs(JSReturnReg_Type, JSReturnReg_Data);
52850: 
54578:     stubcc.linkExitDirect(notCompiled, stubcc.masm.label());
53088:     stubcc.rejoin(Changes(0));
54832:     callPatches.append(callPatch);
53590: }
53590: 
53590: /* See MonoIC.cpp, CallCompiler for more information on call ICs. */
53590: void
53590: mjit::Compiler::inlineCallHelper(uint32 argc, bool callingNew)
53590: {
53590:     /* Check for interrupts on function call */
53590:     interruptCheckHelper();
53590: 
55503:     // |thisv| does not need to be synced for constructing.
55503:     if (callingNew)
55503:         frame.discardFe(frame.peek(-int(argc + 1)));
55503: 
53590:     FrameEntry *fe = frame.peek(-int(argc + 2));
53590: 
53590:     /* Currently, we don't support constant functions. */
55521:     if (fe->isConstant() || fe->isNotType(JSVAL_TYPE_OBJECT) || debugMode) {
53590:         emitUncachedCall(argc, callingNew);
53590:         return;
53590:     }
53301: 
53301: #ifdef JS_MONOIC
53590:     CallGenInfo callIC(argc);
54832:     CallPatchInfo callPatch;
54832: 
53590:     /*
53590:      * Save constant |this| to optimize thisv stores for common call cases
53590:      * like CALL[LOCAL, GLOBAL, ARG] which push NULL.
53590:      */
54163:     callIC.pc = PC;
53590:     callIC.frameDepth = frame.frameDepth();
53590: 
53590:     /* Grab type and data registers up-front. */
53590:     MaybeRegisterID typeReg;
53590:     frame.ensureFullRegs(fe);
53590: 
53590:     if (!fe->isTypeKnown()) {
53590:         typeReg = frame.tempRegForType(fe);
53590:         frame.pinReg(typeReg.reg());
53590:     }
53590:     RegisterID dataReg = frame.tempRegForData(fe);
53590:     frame.pinReg(dataReg);
53590: 
53590:     /*
53590:      * We rely on the fact that syncAndKill() is not allowed to touch the
53590:      * registers we've preserved.
53590:      */
53590:     frame.syncAndKill(Registers(Registers::AvailRegs), Uses(argc + 2));
54719:     frame.unpinKilledReg(dataReg);
54719:     if (typeReg.isSet())
54719:         frame.unpinKilledReg(typeReg.reg());
53590: 
53590:     Registers tempRegs;
53590: 
53590:     /* Test the type if necessary. Failing this always takes a really slow path. */
53590:     MaybeJump notObjectJump;
53590:     if (typeReg.isSet())
53590:         notObjectJump = masm.testObject(Assembler::NotEqual, typeReg.reg());
53590: 
53590:     tempRegs.takeReg(dataReg);
53590:     RegisterID t0 = tempRegs.takeAnyReg();
53590:     RegisterID t1 = tempRegs.takeAnyReg();
53590: 
53590:     /*
53590:      * Guard on the callee identity. This misses on the first run. If the
53590:      * callee is scripted, compiled/compilable, and argc == nargs, then this
53590:      * guard is patched, and the compiled code address is baked in.
53590:      */
53590:     Jump j = masm.branchPtrWithPatch(Assembler::NotEqual, dataReg, callIC.funGuard);
53590:     callIC.funJump = j;
53590: 
53590:     Jump rejoin1, rejoin2;
53590:     {
53590:         stubcc.linkExitDirect(j, stubcc.masm.label());
53590:         callIC.slowPathStart = stubcc.masm.label();
53590: 
53590:         /*
53590:          * Test if the callee is even a function. If this doesn't match, we
53590:          * take a _really_ slow path later.
53590:          */
53590:         Jump notFunction = stubcc.masm.testFunction(Assembler::NotEqual, dataReg);
53590: 
53590:         /* Test if the function is scripted. */
53590:         stubcc.masm.loadFunctionPrivate(dataReg, t0);
53590:         stubcc.masm.load16(Address(t0, offsetof(JSFunction, flags)), t1);
53590:         stubcc.masm.and32(Imm32(JSFUN_KINDMASK), t1);
53590:         Jump isNative = stubcc.masm.branch32(Assembler::Below, t1, Imm32(JSFUN_INTERPRETED));
53590: 
53590:         /*
53590:          * No-op jump that gets re-patched. This is so ArgReg1 won't be
53590:          * clobbered, with the added bonus that the generated stub doesn't
53590:          * need to pop its own return address.
53590:          */
53590:         Jump toPatch = stubcc.masm.jump();
53590:         toPatch.linkTo(stubcc.masm.label(), &stubcc.masm);
53590:         callIC.oolJump = toPatch;
53590: 
53590:         /* At this point the function is definitely scripted. Call the link routine. */
55503:         callIC.addrLabel1 = stubcc.masm.moveWithPatch(ImmPtr(NULL), Registers::ArgReg1);
53590:         callIC.oolCall = stubcc.call(callingNew ? ic::New : ic::Call);
53590: 
53590:         callIC.funObjReg = dataReg;
53590:         callIC.funPtrReg = t0;
53590: 
53590:         /*
53590:          * The IC call either returns NULL, meaning call completed, or a
53590:          * function pointer to jump to. Caveat: Must restore JSFrameReg
53590:          * because a new frame has been pushed.
53590:          *
53590:          * This function only executes once. If hit, it will generate a stub
53590:          * to compile and execute calls on demand.
53590:          */
53590:         rejoin1 = stubcc.masm.branchTestPtr(Assembler::Zero, Registers::ReturnReg,
53590:                                             Registers::ReturnReg);
53590:         stubcc.masm.move(Imm32(argc), JSParamReg_Argc);
53590:         stubcc.masm.loadPtr(FrameAddress(offsetof(VMFrame, regs.fp)), JSFrameReg);
54832:         callPatch.hasSlowNcode = true;
54832:         callPatch.slowNcodePatch =
54832:             stubcc.masm.storePtrWithPatch(ImmPtr(NULL),
54832:                                           Address(JSFrameReg, JSStackFrame::offsetOfncode()));
54832:         stubcc.masm.jump(Registers::ReturnReg);
53590: 
53590:         /* Catch-all case, for natives this will turn into a MIC. */
53590:         if (notObjectJump.isSet())
53590:             stubcc.linkExitDirect(notObjectJump.get(), stubcc.masm.label());
53590:         notFunction.linkTo(stubcc.masm.label(), &stubcc.masm);
53590:         isNative.linkTo(stubcc.masm.label(), &stubcc.masm);
53590: 
55503:         callIC.addrLabel2 = stubcc.masm.moveWithPatch(ImmPtr(NULL), Registers::ArgReg1);
53590:         stubcc.call(callingNew ? ic::NativeNew : ic::NativeCall);
53590: 
53590:         rejoin2 = stubcc.masm.jump();
53590:     }
53590: 
53590:     /*
53590:      * If the call site goes to a closure over the same function, it will
53590:      * generate an out-of-line stub that joins back here.
53590:      */
53590:     callIC.hotPathLabel = masm.label();
53590: 
53590:     uint32 flags = 0;
53590:     if (callingNew)
53590:         flags |= JSFRAME_CONSTRUCTING;
53590: 
54163:     InlineFrameAssembler inlFrame(masm, callIC, flags);
54832:     callPatch.fastNcodePatch = inlFrame.assemble(NULL);
54832: 
54832:     callIC.hotJump = masm.jump();
54832:     callIC.joinPoint = callPatch.joinPoint = masm.label();
54832:     masm.loadPtr(Address(JSFrameReg, JSStackFrame::offsetOfPrev()), JSFrameReg);
53590: 
53590:     frame.popn(argc + 2);
53590:     frame.takeReg(JSReturnReg_Type);
53590:     frame.takeReg(JSReturnReg_Data);
53590:     frame.pushRegs(JSReturnReg_Type, JSReturnReg_Data);
53590: 
53590:     callIC.slowJoinPoint = stubcc.masm.label();
53590:     rejoin1.linkTo(callIC.slowJoinPoint, &stubcc.masm);
53590:     rejoin2.linkTo(callIC.slowJoinPoint, &stubcc.masm);
53590:     stubcc.rejoin(Changes(0));
53590: 
53590:     callICs.append(callIC);
54832:     callPatches.append(callPatch);
53590: #else
53590:     emitUncachedCall(argc, callingNew);
53301: #endif
52645: }
52645: 
53168: /*
53168:  * This function must be called immediately after any instruction which could
53168:  * cause a new JSStackFrame to be pushed and could lead to a new debug trap
53168:  * being set. This includes any API callbacks and any scripted or native call.
53168:  */
53168: void
53168: mjit::Compiler::addCallSite(uint32 id, bool stub)
53168: {
53168:     InternalCallSite site;
53168:     site.stub = stub;
53477: #if (defined(JS_NO_FASTCALL) && defined(JS_CPU_X86)) || defined(_WIN64)
53326:     site.location = stub ? stubcc.masm.callLabel : masm.callLabel;
53326: #else
53168:     site.location = stub ? stubcc.masm.label() : masm.label();
53326: #endif
53477: 
53168:     site.pc = PC;
53168:     site.id = id;
53168:     callSites.append(site);
53168: }
53168: 
52645: void
53133: mjit::Compiler::restoreFrameRegs(Assembler &masm)
52645: {
53482:     masm.loadPtr(FrameAddress(offsetof(VMFrame, regs.fp)), JSFrameReg);
52645: }
52645: 
52651: bool
52651: mjit::Compiler::compareTwoValues(JSContext *cx, JSOp op, const Value &lhs, const Value &rhs)
52651: {
52651:     JS_ASSERT(lhs.isPrimitive());
52651:     JS_ASSERT(rhs.isPrimitive());
52651: 
52651:     if (lhs.isString() && rhs.isString()) {
53081:         int cmp = js_CompareStrings(lhs.toString(), rhs.toString());
52651:         switch (op) {
52651:           case JSOP_LT:
52651:             return cmp < 0;
52651:           case JSOP_LE:
52651:             return cmp <= 0;
52651:           case JSOP_GT:
52651:             return cmp > 0;
52651:           case JSOP_GE:
52651:             return cmp >= 0;
52679:           case JSOP_EQ:
52679:             return cmp == 0;
52679:           case JSOP_NE:
52679:             return cmp != 0;
52651:           default:
52651:             JS_NOT_REACHED("NYI");
52651:         }
52651:     } else {
52651:         double ld, rd;
52651:         
52651:         /* These should be infallible w/ primitives. */
52651:         ValueToNumber(cx, lhs, &ld);
52651:         ValueToNumber(cx, rhs, &rd);
52651:         switch(op) {
52651:           case JSOP_LT:
52651:             return ld < rd;
52651:           case JSOP_LE:
52651:             return ld <= rd;
52651:           case JSOP_GT:
52651:             return ld > rd;
52651:           case JSOP_GE:
52651:             return ld >= rd;
52679:           case JSOP_EQ: /* fall through */
52679:           case JSOP_NE:
52679:             /* Special case null/undefined/void comparisons. */
52679:             if (lhs.isNullOrUndefined()) {
52679:                 if (rhs.isNullOrUndefined())
52679:                     return op == JSOP_EQ;
52679:                 return op == JSOP_NE;
52679:             }
52679:             if (rhs.isNullOrUndefined())
52679:                 return op == JSOP_NE;
52679: 
52679:             /* Normal return. */
52679:             return (op == JSOP_EQ) ? (ld == rd) : (ld != rd);
52651:           default:
52651:             JS_NOT_REACHED("NYI");
52651:         }
52651:     }
52651: 
52651:     JS_NOT_REACHED("NYI");
52651:     return false;
52651: }
52651: 
52653: void
52653: mjit::Compiler::emitStubCmpOp(BoolStub stub, jsbytecode *target, JSOp fused)
52653: {
53087:     prepareStubCall(Uses(2));
53087:     stubCall(stub);
52653:     frame.pop();
52653:     frame.pop();
52653: 
52653:     if (!target) {
52653:         frame.takeReg(Registers::ReturnReg);
53025:         frame.pushTypedPayload(JSVAL_TYPE_BOOLEAN, Registers::ReturnReg);
52653:     } else {
52679:         JS_ASSERT(fused == JSOP_IFEQ || fused == JSOP_IFNE);
52679: 
54719:         frame.syncAndForgetEverything();
52653:         Assembler::Condition cond = (fused == JSOP_IFEQ)
52653:                                     ? Assembler::Zero
52653:                                     : Assembler::NonZero;
52653:         Jump j = masm.branchTest32(cond, Registers::ReturnReg,
52653:                                    Registers::ReturnReg);
53133:         jumpAndTrace(j, target);
52653:     }
52653: }
52653: 
52692: void
56033: mjit::Compiler::jsop_setprop_slow(JSAtom *atom)
52886: {
53087:     prepareStubCall(Uses(2));
52886:     masm.move(ImmPtr(atom), Registers::ArgReg1);
54169:     stubCall(STRICT_VARIANT(stubs::SetName));
52886:     JS_STATIC_ASSERT(JSOP_SETNAME_LENGTH == JSOP_SETPROP_LENGTH);
52886:     frame.shimmy(1);
52886: }
52886: 
52886: void
56033: mjit::Compiler::jsop_getprop_slow()
52743: {
53087:     prepareStubCall(Uses(1));
53087:     stubCall(stubs::GetProp);
52743:     frame.pop();
52743:     frame.pushSynced();
52743: }
52743: 
52903: bool
52896: mjit::Compiler::jsop_callprop_slow(JSAtom *atom)
52896: {
53087:     prepareStubCall(Uses(1));
52896:     masm.move(ImmPtr(atom), Registers::ArgReg1);
53087:     stubCall(stubs::CallProp);
52896:     frame.pop();
52896:     frame.pushSynced();
52896:     frame.pushSynced();
52903:     return true;
52896: }
52896: 
56037: bool
52884: mjit::Compiler::jsop_length()
52884: {
52884:     FrameEntry *top = frame.peek(-1);
52884: 
53025:     if (top->isTypeKnown() && top->getKnownType() == JSVAL_TYPE_STRING) {
52884:         if (top->isConstant()) {
53081:             JSString *str = top->getValue().toString();
52884:             Value v;
52885:             v.setNumber(uint32(str->length()));
52884:             frame.pop();
52884:             frame.push(v);
52884:         } else {
52884:             RegisterID str = frame.ownRegForData(top);
53125:             masm.loadPtr(Address(str, offsetof(JSString, mLengthAndFlags)), str);
53125:             masm.rshiftPtr(Imm32(JSString::FLAGS_LENGTH_SHIFT), str);
52884:             frame.pop();
53025:             frame.pushTypedPayload(JSVAL_TYPE_INT32, str);
52884:         }
56037:         return true;
52884:     }
52884: 
53119: #if defined JS_POLYIC
56037:     return jsop_getprop(cx->runtime->atomState.lengthAtom);
52884: #else
53087:     prepareStubCall(Uses(1));
53087:     stubCall(stubs::Length);
52884:     frame.pop();
52884:     frame.pushSynced();
56037:     return true;
52884: #endif
52884: }
52884: 
55503: #ifdef JS_MONOIC
55503: void
55503: mjit::Compiler::passMICAddress(MICGenInfo &mic)
55503: {
55503:     mic.addrLabel = stubcc.masm.moveWithPatch(ImmPtr(NULL), Registers::ArgReg1);
55503: }
55503: #endif
55503: 
53119: #if defined JS_POLYIC
52880: void
55503: mjit::Compiler::passPICAddress(PICGenInfo &pic)
55503: {
55503:     pic.addrLabel = stubcc.masm.moveWithPatch(ImmPtr(NULL), Registers::ArgReg1);
55503: }
55503: 
56037: bool
56033: mjit::Compiler::jsop_getprop(JSAtom *atom, bool doTypeCheck)
52880: {
52880:     FrameEntry *top = frame.peek(-1);
52880: 
52884:     /* If the incoming type will never PIC, take slow path. */
53025:     if (top->isTypeKnown() && top->getKnownType() != JSVAL_TYPE_OBJECT) {
52892:         JS_ASSERT_IF(atom == cx->runtime->atomState.lengthAtom,
53025:                      top->getKnownType() != JSVAL_TYPE_STRING);
56033:         jsop_getprop_slow();
56037:         return true;
52880:     }
52880: 
52884:     /*
52884:      * These two must be loaded first. The objReg because the string path
52884:      * wants to read it, and the shapeReg because it could cause a spill that
52884:      * the string path wouldn't sink back.
52884:      */
52884:     RegisterID objReg = Registers::ReturnReg;
52884:     RegisterID shapeReg = Registers::ReturnReg;
52892:     if (atom == cx->runtime->atomState.lengthAtom) {
52884:         objReg = frame.copyDataIntoReg(top);
52884:         shapeReg = frame.allocReg();
52884:     }
52884: 
56033:     PICGenInfo pic(ic::PICInfo::GET);
52880: 
52880:     /* Guard that the type is an object. */
52884:     Jump typeCheck;
52894:     if (doTypeCheck && !top->isTypeKnown()) {
52880:         RegisterID reg = frame.tempRegForType(top);
52884:         pic.typeReg = reg;
52884: 
52884:         /* Start the hot path where it's easy to patch it. */
53270:         pic.fastPathStart = masm.label();
53023:         Jump j = masm.testObject(Assembler::NotEqual, reg);
52884: 
53270:         /* GETPROP_INLINE_TYPE_GUARD is used to patch the jmp, not cmp. */
56037:         RETURN_IF_OOM(false);
53270:         JS_ASSERT(masm.differenceBetween(pic.fastPathStart, masm.label()) == GETPROP_INLINE_TYPE_GUARD);
53270: 
53479:         pic.typeCheck = stubcc.linkExit(j, Uses(1));
52884:         pic.hasTypeCheck = true;
52884:     } else {
53270:         pic.fastPathStart = masm.label();
52884:         pic.hasTypeCheck = false;
52884:         pic.typeReg = Registers::ReturnReg;
52880:     }
52880: 
52892:     if (atom != cx->runtime->atomState.lengthAtom) {
52884:         objReg = frame.copyDataIntoReg(top);
52884:         shapeReg = frame.allocReg();
52884:     }
52884: 
52880:     pic.shapeReg = shapeReg;
52892:     pic.atom = atom;
52880:     pic.objRemat = frame.dataRematInfo(top);
52880: 
52880:     /* Guard on shape. */
53445:     masm.loadShape(objReg, shapeReg);
52880:     pic.shapeGuard = masm.label();
53270: 
53408:     DataLabel32 inlineShapeLabel;
53270:     Jump j = masm.branch32WithPatch(Assembler::NotEqual, shapeReg,
53270:                                     Imm32(int32(JSObjectMap::INVALID_SHAPE)),
53315:                                     inlineShapeLabel);
53270:     DBGLABEL(dbgInlineShapeJump);
53270: 
53479:     pic.slowPathStart = stubcc.linkExit(j, Uses(1));
52880: 
52880:     stubcc.leave();
55503:     passPICAddress(pic);
52880:     pic.callReturn = stubcc.call(ic::GetProp);
52880: 
52880:     /* Load dslots. */
53315: #if defined JS_NUNBOX32
53270:     DBGLABEL(dbgDslotsLoad);
53315: #elif defined JS_PUNBOX64
53315:     Label dslotsLoadLabel = masm.label();
53315: #endif
55746:     masm.loadPtr(Address(objReg, offsetof(JSObject, slots)), objReg);
52880: 
52880:     /* Copy the slot value to the expression stack. */
52880:     Address slot(objReg, 1 << 24);
52880:     frame.pop();
53270: 
53315: #if defined JS_NUNBOX32
52880:     masm.loadTypeTag(slot, shapeReg);
53270:     DBGLABEL(dbgTypeLoad);
53270: 
53144:     masm.loadPayload(slot, objReg);
53270:     DBGLABEL(dbgDataLoad);
53315: #elif defined JS_PUNBOX64
53386:     Label inlineValueLoadLabel =
53386:         masm.loadValueAsComponents(slot, shapeReg, objReg);
53315: #endif
53270:     pic.storeBack = masm.label();
53270: 
53270:     /* Assert correctness of hardcoded offsets. */
56037:     RETURN_IF_OOM(false);
53315: #if defined JS_NUNBOX32
53270:     JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgDslotsLoad) == GETPROP_DSLOTS_LOAD);
53270:     JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgTypeLoad) == GETPROP_TYPE_LOAD);
53270:     JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgDataLoad) == GETPROP_DATA_LOAD);
53315:     JS_ASSERT(masm.differenceBetween(pic.shapeGuard, inlineShapeLabel) == GETPROP_INLINE_SHAPE_OFFSET);
53315:     JS_ASSERT(masm.differenceBetween(pic.shapeGuard, dbgInlineShapeJump) == GETPROP_INLINE_SHAPE_JUMP);
53315: #elif defined JS_PUNBOX64
53315:     pic.labels.getprop.dslotsLoadOffset = masm.differenceBetween(pic.storeBack, dslotsLoadLabel);
53426:     JS_ASSERT(pic.labels.getprop.dslotsLoadOffset == masm.differenceBetween(pic.storeBack, dslotsLoadLabel));
53426: 
53315:     pic.labels.getprop.inlineShapeOffset = masm.differenceBetween(pic.shapeGuard, inlineShapeLabel);
53426:     JS_ASSERT(pic.labels.getprop.inlineShapeOffset == masm.differenceBetween(pic.shapeGuard, inlineShapeLabel));
53426: 
53315:     pic.labels.getprop.inlineValueOffset = masm.differenceBetween(pic.storeBack, inlineValueLoadLabel);
53426:     JS_ASSERT(pic.labels.getprop.inlineValueOffset == masm.differenceBetween(pic.storeBack, inlineValueLoadLabel));
53426: 
53315:     JS_ASSERT(masm.differenceBetween(inlineShapeLabel, dbgInlineShapeJump) == GETPROP_INLINE_SHAPE_JUMP);
53315: #endif
53270:     /* GETPROP_INLINE_TYPE_GUARD's validity is asserted above. */
53270: 
52880:     pic.objReg = objReg;
52880:     frame.pushRegs(shapeReg, objReg);
52880: 
53088:     stubcc.rejoin(Changes(1));
52880: 
52880:     pics.append(pic);
56037:     return true;
52880: }
52880: 
53137: #ifdef JS_POLYIC
56037: bool
53137: mjit::Compiler::jsop_getelem_pic(FrameEntry *obj, FrameEntry *id, RegisterID objReg,
53137:                                  RegisterID idReg, RegisterID shapeReg)
53137: {
56033:     PICGenInfo pic(ic::PICInfo::GETELEM);
53137: 
53137:     pic.objRemat = frame.dataRematInfo(obj);
53137:     pic.idRemat = frame.dataRematInfo(id);
53137:     pic.shapeReg = shapeReg;
53137:     pic.hasTypeCheck = false;
53137: 
53270:     pic.fastPathStart = masm.label();
53137: 
53137:     /* Guard on shape. */
53445:     masm.loadShape(objReg, shapeReg);
53137:     pic.shapeGuard = masm.label();
53315: 
53408:     DataLabel32 inlineShapeOffsetLabel;
53270:     Jump jmpShapeGuard = masm.branch32WithPatch(Assembler::NotEqual, shapeReg,
53270:                                  Imm32(int32(JSObjectMap::INVALID_SHAPE)),
53315:                                  inlineShapeOffsetLabel);
53270:     DBGLABEL(dbgInlineShapeJump);
53137: 
53137:     /* Guard on id identity. */
53315: #if defined JS_NUNBOX32
53315:     static const void *BOGUS_ATOM = (void *)0xdeadbeef;
53315: #elif defined JS_PUNBOX64
53315:     static const void *BOGUS_ATOM = (void *)0xfeedfacedeadbeef;
53315: #endif
53315: 
53315:     DataLabelPtr inlineAtomOffsetLabel;
53315:     Jump idGuard = masm.branchPtrWithPatch(Assembler::NotEqual, idReg,
53315:                                  inlineAtomOffsetLabel, ImmPtr(BOGUS_ATOM));
53270:     DBGLABEL(dbgInlineAtomJump);
53270: 
53551:     /*
53551:      * The state between these two exits is identical, so this safe. The
53551:      * GETELEM PIC repatches both jumps to the slowPathStart on reset.
53551:      */
53137:     stubcc.linkExit(idGuard, Uses(2));
53290:     pic.slowPathStart = stubcc.linkExit(jmpShapeGuard, Uses(2));
53137: 
53137:     stubcc.leave();
55503:     passPICAddress(pic);
53137:     pic.callReturn = stubcc.call(ic::GetElem);
53137: 
53137:     /* Load dslots. */
53315: #if defined JS_NUNBOX32
53270:     DBGLABEL(dbgDslotsLoad);
53315: #elif defined JS_PUNBOX64
53315:     Label dslotsLoadLabel = masm.label();
53315: #endif
55746:     masm.loadPtr(Address(objReg, offsetof(JSObject, slots)), objReg);
53137: 
53137:     /* Copy the slot value to the expression stack. */
53137:     Address slot(objReg, 1 << 24);
53315: #if defined JS_NUNBOX32
53137:     masm.loadTypeTag(slot, shapeReg);
53270:     DBGLABEL(dbgTypeLoad);
53144:     masm.loadPayload(slot, objReg);
53270:     DBGLABEL(dbgDataLoad);
53315: #elif defined JS_PUNBOX64
53386:     Label inlineValueOffsetLabel =
53386:         masm.loadValueAsComponents(slot, shapeReg, objReg);
53315: #endif
53137:     pic.storeBack = masm.label();
53315: 
53137:     pic.objReg = objReg;
53137:     pic.idReg = idReg;
53270: 
56037:     RETURN_IF_OOM(false);
53315: #if defined JS_NUNBOX32
53270:     JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgDslotsLoad) == GETELEM_DSLOTS_LOAD);
53270:     JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgTypeLoad) == GETELEM_TYPE_LOAD);
53270:     JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgDataLoad) == GETELEM_DATA_LOAD);
53315:     JS_ASSERT(masm.differenceBetween(pic.shapeGuard, inlineAtomOffsetLabel) == GETELEM_INLINE_ATOM_OFFSET);
53270:     JS_ASSERT(masm.differenceBetween(pic.shapeGuard, dbgInlineAtomJump) == GETELEM_INLINE_ATOM_JUMP);
53315:     JS_ASSERT(masm.differenceBetween(pic.shapeGuard, inlineShapeOffsetLabel) == GETELEM_INLINE_SHAPE_OFFSET);
53270:     JS_ASSERT(masm.differenceBetween(pic.shapeGuard, dbgInlineShapeJump) == GETELEM_INLINE_SHAPE_JUMP);
53315: #elif defined JS_PUNBOX64
53315:     pic.labels.getelem.dslotsLoadOffset = masm.differenceBetween(pic.storeBack, dslotsLoadLabel);
53426:     JS_ASSERT(pic.labels.getelem.dslotsLoadOffset == masm.differenceBetween(pic.storeBack, dslotsLoadLabel));
53426: 
53315:     pic.labels.getelem.inlineShapeOffset = masm.differenceBetween(pic.shapeGuard, inlineShapeOffsetLabel);
53426:     JS_ASSERT(pic.labels.getelem.inlineShapeOffset == masm.differenceBetween(pic.shapeGuard, inlineShapeOffsetLabel));
53426: 
53315:     pic.labels.getelem.inlineAtomOffset = masm.differenceBetween(pic.shapeGuard, inlineAtomOffsetLabel);
53426:     JS_ASSERT(pic.labels.getelem.inlineAtomOffset == masm.differenceBetween(pic.shapeGuard, inlineAtomOffsetLabel));
53426: 
53315:     pic.labels.getelem.inlineValueOffset = masm.differenceBetween(pic.storeBack, inlineValueOffsetLabel);
53426:     JS_ASSERT(pic.labels.getelem.inlineValueOffset == masm.differenceBetween(pic.storeBack, inlineValueOffsetLabel));
53426: 
53315:     JS_ASSERT(masm.differenceBetween(inlineShapeOffsetLabel, dbgInlineShapeJump) == GETELEM_INLINE_SHAPE_JUMP);
53315:     JS_ASSERT(masm.differenceBetween(pic.shapeGuard, dbgInlineAtomJump) ==
53315:               pic.labels.getelem.inlineAtomOffset + GETELEM_INLINE_ATOM_JUMP);
53315: #endif
53270: 
53137:     JS_ASSERT(pic.idReg != pic.objReg);
53137:     JS_ASSERT(pic.idReg != pic.shapeReg);
53137:     JS_ASSERT(pic.objReg != pic.shapeReg);
53270: 
53137:     pics.append(pic);
56037:     return true;
53137: }
53137: #endif
53137: 
52903: bool
52906: mjit::Compiler::jsop_callprop_generic(JSAtom *atom)
52906: {
52906:     FrameEntry *top = frame.peek(-1);
52906: 
52906:     /*
52906:      * These two must be loaded first. The objReg because the string path
52906:      * wants to read it, and the shapeReg because it could cause a spill that
52906:      * the string path wouldn't sink back.
52906:      */
52906:     RegisterID objReg = frame.copyDataIntoReg(top);
52906:     RegisterID shapeReg = frame.allocReg();
52906: 
56033:     PICGenInfo pic(ic::PICInfo::CALL);
52906: 
52906:     /* Guard that the type is an object. */
52906:     pic.typeReg = frame.copyTypeIntoReg(top);
52906: 
52906:     /* Start the hot path where it's easy to patch it. */
53270:     pic.fastPathStart = masm.label();
52906: 
52906:     /*
52906:      * Guard that the value is an object. This part needs some extra gunk
52906:      * because the leave() after the shape guard will emit a jump from this
52906:      * path to the final call. We need a label in between that jump, which
52906:      * will be the target of patched jumps in the PIC.
52906:      */
53023:     Jump typeCheck = masm.testObject(Assembler::NotEqual, pic.typeReg);
53307:     DBGLABEL(dbgInlineTypeGuard);
53307: 
53479:     pic.typeCheck = stubcc.linkExit(typeCheck, Uses(1));
52906:     pic.hasTypeCheck = true;
52906:     pic.objReg = objReg;
52906:     pic.shapeReg = shapeReg;
52906:     pic.atom = atom;
52906:     pic.objRemat = frame.dataRematInfo(top);
52906: 
52906:     /*
52906:      * Store the type and object back. Don't bother keeping them in registers,
52906:      * since a sync will be needed for the upcoming call.
52906:      */
52906:     uint32 thisvSlot = frame.frameDepth();
52906:     Address thisv = Address(JSFrameReg, sizeof(JSStackFrame) + thisvSlot * sizeof(Value));
53315: #if defined JS_NUNBOX32
54582:     masm.storeValueFromComponents(pic.typeReg, pic.objReg, thisv);
53315: #elif defined JS_PUNBOX64
53315:     masm.orPtr(pic.objReg, pic.typeReg);
53315:     masm.storePtr(pic.typeReg, thisv);
53315: #endif
52906:     frame.freeReg(pic.typeReg);
52906: 
52906:     /* Guard on shape. */
53445:     masm.loadShape(objReg, shapeReg);
52906:     pic.shapeGuard = masm.label();
53307: 
53408:     DataLabel32 inlineShapeLabel;
53307:     Jump j = masm.branch32WithPatch(Assembler::NotEqual, shapeReg,
53307:                            Imm32(int32(JSObjectMap::INVALID_SHAPE)),
53315:                            inlineShapeLabel);
53307:     DBGLABEL(dbgInlineShapeJump);
53307: 
53479:     pic.slowPathStart = stubcc.linkExit(j, Uses(1));
52906: 
52906:     /* Slow path. */
52906:     stubcc.leave();
55503:     passPICAddress(pic);
52906:     pic.callReturn = stubcc.call(ic::CallProp);
52906: 
52906:     /* Adjust the frame. None of this will generate code. */
52906:     frame.pop();
52906:     frame.pushRegs(shapeReg, objReg);
52906:     frame.pushSynced();
52906: 
52906:     /* Load dslots. */
53315: #if defined JS_NUNBOX32
53307:     DBGLABEL(dbgDslotsLoad);
53315: #elif defined JS_PUNBOX64
53315:     Label dslotsLoadLabel = masm.label();
53315: #endif
55746:     masm.loadPtr(Address(objReg, offsetof(JSObject, slots)), objReg);
52906: 
52906:     /* Copy the slot value to the expression stack. */
52906:     Address slot(objReg, 1 << 24);
53307: 
53315: #if defined JS_NUNBOX32
52906:     masm.loadTypeTag(slot, shapeReg);
53307:     DBGLABEL(dbgTypeLoad);
53307: 
53144:     masm.loadPayload(slot, objReg);
53307:     DBGLABEL(dbgDataLoad);
53315: #elif defined JS_PUNBOX64
53386:     Label inlineValueLoadLabel =
53386:         masm.loadValueAsComponents(slot, shapeReg, objReg);
53315: #endif
52906:     pic.storeBack = masm.label();
52906: 
53307:     /* Assert correctness of hardcoded offsets. */
56037:     RETURN_IF_OOM(false);
53315:     JS_ASSERT(masm.differenceBetween(pic.fastPathStart, dbgInlineTypeGuard) == GETPROP_INLINE_TYPE_GUARD);
53315: #if defined JS_NUNBOX32
53307:     JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgDslotsLoad) == GETPROP_DSLOTS_LOAD);
53307:     JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgTypeLoad) == GETPROP_TYPE_LOAD);
53307:     JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgDataLoad) == GETPROP_DATA_LOAD);
53315:     JS_ASSERT(masm.differenceBetween(pic.shapeGuard, inlineShapeLabel) == GETPROP_INLINE_SHAPE_OFFSET);
53307:     JS_ASSERT(masm.differenceBetween(pic.shapeGuard, dbgInlineShapeJump) == GETPROP_INLINE_SHAPE_JUMP);
53315: #elif defined JS_PUNBOX64
53315:     pic.labels.getprop.dslotsLoadOffset = masm.differenceBetween(pic.storeBack, dslotsLoadLabel);
53426:     JS_ASSERT(pic.labels.getprop.dslotsLoadOffset == masm.differenceBetween(pic.storeBack, dslotsLoadLabel));
53426: 
53315:     pic.labels.getprop.inlineShapeOffset = masm.differenceBetween(pic.shapeGuard, inlineShapeLabel);
53426:     JS_ASSERT(pic.labels.getprop.inlineShapeOffset == masm.differenceBetween(pic.shapeGuard, inlineShapeLabel));
53426: 
53315:     pic.labels.getprop.inlineValueOffset = masm.differenceBetween(pic.storeBack, inlineValueLoadLabel);
53426:     JS_ASSERT(pic.labels.getprop.inlineValueOffset == masm.differenceBetween(pic.storeBack, inlineValueLoadLabel));
53426: 
53315:     JS_ASSERT(masm.differenceBetween(inlineShapeLabel, dbgInlineShapeJump) == GETPROP_INLINE_SHAPE_JUMP);
53315: #endif
53307: 
53088:     stubcc.rejoin(Changes(2));
52906:     pics.append(pic);
52906: 
52906:     return true;
52906: }
52906: 
52906: bool
52903: mjit::Compiler::jsop_callprop_str(JSAtom *atom)
52903: {
52903:     if (!script->compileAndGo) {
52903:         jsop_callprop_slow(atom);
52903:         return true; 
52903:     }
52903: 
52903:     /* Bake in String.prototype. Is this safe? */
52903:     JSObject *obj;
52903:     if (!js_GetClassPrototype(cx, NULL, JSProto_String, &obj))
52903:         return false;
52903: 
52903:     /* Force into a register because getprop won't expect a constant. */
52903:     RegisterID reg = frame.allocReg();
54832: 
52903:     masm.move(ImmPtr(obj), reg);
53025:     frame.pushTypedPayload(JSVAL_TYPE_OBJECT, reg);
52903: 
52903:     /* Get the property. */
56037:     if (!jsop_getprop(atom))
56037:         return false;
52903: 
52903:     /* Perform a swap. */
52903:     frame.dup2();
52903:     frame.shift(-3);
52903:     frame.shift(-1);
52903: 
52903:     /* 4) Test if the function can take a primitive. */
55750: #ifdef DEBUG
52903:     FrameEntry *funFe = frame.peek(-2);
55750: #endif
52903:     JS_ASSERT(!funFe->isTypeKnown());
52903: 
53374:     /*
53374:      * See bug 584579 - need to forget string type, since wrapping could
53374:      * create an object. forgetType() alone is not valid because it cannot be
53374:      * used on copies or constants.
53374:      */
53374:     RegisterID strReg;
53374:     FrameEntry *strFe = frame.peek(-1);
53374:     if (strFe->isConstant()) {
53374:         strReg = frame.allocReg();
53374:         masm.move(ImmPtr(strFe->getValue().toString()), strReg);
53374:     } else {
53374:         strReg = frame.ownRegForData(strFe);
53374:     }
53374:     frame.pop();
53374:     frame.pushTypedPayload(JSVAL_TYPE_STRING, strReg);
53374:     frame.forgetType(frame.peek(-1));
53374: 
52903:     return true;
52903: }
52903: 
52903: bool
52896: mjit::Compiler::jsop_callprop_obj(JSAtom *atom)
52896: {
52896:     FrameEntry *top = frame.peek(-1);
52896: 
56033:     PICGenInfo pic(ic::PICInfo::CALL);
52896: 
52896:     JS_ASSERT(top->isTypeKnown());
53025:     JS_ASSERT(top->getKnownType() == JSVAL_TYPE_OBJECT);
52896: 
53270:     pic.fastPathStart = masm.label();
52896:     pic.hasTypeCheck = false;
52896:     pic.typeReg = Registers::ReturnReg;
52896: 
52896:     RegisterID objReg = frame.copyDataIntoReg(top);
52896:     RegisterID shapeReg = frame.allocReg();
52896: 
52896:     pic.shapeReg = shapeReg;
52896:     pic.atom = atom;
52896:     pic.objRemat = frame.dataRematInfo(top);
52896: 
52896:     /* Guard on shape. */
53445:     masm.loadShape(objReg, shapeReg);
52896:     pic.shapeGuard = masm.label();
53307: 
53408:     DataLabel32 inlineShapeLabel;
53307:     Jump j = masm.branch32WithPatch(Assembler::NotEqual, shapeReg,
53307:                            Imm32(int32(JSObjectMap::INVALID_SHAPE)),
53315:                            inlineShapeLabel);
53307:     DBGLABEL(dbgInlineShapeJump);
53307: 
53588:     pic.slowPathStart = stubcc.linkExit(j, Uses(1));
52896: 
52896:     stubcc.leave();
55503:     passPICAddress(pic);
52896:     pic.callReturn = stubcc.call(ic::CallProp);
52896: 
52896:     /* Load dslots. */
53315: #if defined JS_NUNBOX32
53307:     DBGLABEL(dbgDslotsLoad);
53315: #elif defined JS_PUNBOX64
53315:     Label dslotsLoadLabel = masm.label();
53315: #endif
55746:     masm.loadPtr(Address(objReg, offsetof(JSObject, slots)), objReg);
52896: 
52896:     /* Copy the slot value to the expression stack. */
52896:     Address slot(objReg, 1 << 24);
53307: 
53315: #if defined JS_NUNBOX32
52896:     masm.loadTypeTag(slot, shapeReg);
53307:     DBGLABEL(dbgTypeLoad);
53307: 
53144:     masm.loadPayload(slot, objReg);
53307:     DBGLABEL(dbgDataLoad);
53315: #elif defined JS_PUNBOX64
53386:     Label inlineValueLoadLabel =
53386:         masm.loadValueAsComponents(slot, shapeReg, objReg);
53315: #endif
53307: 
53307:     pic.storeBack = masm.label();
52896:     pic.objReg = objReg;
52896: 
52896:     /*
52896:      * 1) Dup the |this| object.
52896:      * 2) Push the property value onto the stack.
52896:      * 3) Move the value below the dup'd |this|, uncopying it. This could
52896:      * generate code, thus the storeBack label being prior. This is safe
52896:      * as a stack transition, because JSOP_CALLPROP has JOF_TMPSLOT. It is
52896:      * also safe for correctness, because if we know the LHS is an object, it
52896:      * is the resulting vp[1].
52896:      */
52896:     frame.dup();
52896:     frame.pushRegs(shapeReg, objReg);
52896:     frame.shift(-2);
52896: 
53315:     /* 
53315:      * Assert correctness of hardcoded offsets.
53315:      * No type guard: type is asserted.
53315:      */
56037:     RETURN_IF_OOM(false);
53315: #if defined JS_NUNBOX32
53307:     JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgDslotsLoad) == GETPROP_DSLOTS_LOAD);
53307:     JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgTypeLoad) == GETPROP_TYPE_LOAD);
53307:     JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgDataLoad) == GETPROP_DATA_LOAD);
53315:     JS_ASSERT(masm.differenceBetween(pic.shapeGuard, inlineShapeLabel) == GETPROP_INLINE_SHAPE_OFFSET);
53307:     JS_ASSERT(masm.differenceBetween(pic.shapeGuard, dbgInlineShapeJump) == GETPROP_INLINE_SHAPE_JUMP);
53315: #elif defined JS_PUNBOX64
53315:     pic.labels.getprop.dslotsLoadOffset = masm.differenceBetween(pic.storeBack, dslotsLoadLabel);
53426:     JS_ASSERT(pic.labels.getprop.dslotsLoadOffset == masm.differenceBetween(pic.storeBack, dslotsLoadLabel));
53426: 
53315:     pic.labels.getprop.inlineShapeOffset = masm.differenceBetween(pic.shapeGuard, inlineShapeLabel);
53426:     JS_ASSERT(pic.labels.getprop.inlineShapeOffset == masm.differenceBetween(pic.shapeGuard, inlineShapeLabel));
53426: 
53315:     pic.labels.getprop.inlineValueOffset = masm.differenceBetween(pic.storeBack, inlineValueLoadLabel);
53426:     JS_ASSERT(pic.labels.getprop.inlineValueOffset == masm.differenceBetween(pic.storeBack, inlineValueLoadLabel));
53426: 
53315:     JS_ASSERT(masm.differenceBetween(inlineShapeLabel, dbgInlineShapeJump) == GETPROP_INLINE_SHAPE_JUMP);
53315: #endif
53307: 
53088:     stubcc.rejoin(Changes(2));
52896:     pics.append(pic);
52903: 
52903:     return true;
52896: }
52896: 
52903: bool
52896: mjit::Compiler::jsop_callprop(JSAtom *atom)
52896: {
52896:     FrameEntry *top = frame.peek(-1);
52896: 
52896:     /* If the incoming type will never PIC, take slow path. */
53025:     if (top->isTypeKnown() && top->getKnownType() != JSVAL_TYPE_OBJECT) {
53025:         if (top->getKnownType() == JSVAL_TYPE_STRING)
52903:             return jsop_callprop_str(atom);
52903:         return jsop_callprop_slow(atom);
52896:     }
52896: 
52896:     if (top->isTypeKnown())
52903:         return jsop_callprop_obj(atom);
52906:     return jsop_callprop_generic(atom);
52896: }
52896: 
56037: bool
56033: mjit::Compiler::jsop_setprop(JSAtom *atom)
52886: {
52887:     FrameEntry *lhs = frame.peek(-2);
52887:     FrameEntry *rhs = frame.peek(-1);
52887: 
52887:     /* If the incoming type will never PIC, take slow path. */
53025:     if (lhs->isTypeKnown() && lhs->getKnownType() != JSVAL_TYPE_OBJECT) {
56033:         jsop_setprop_slow(atom);
56037:         return true;
52887:     }
52887: 
53620:     JSOp op = JSOp(*PC);
53620: 
56033:     PICGenInfo pic(op == JSOP_SETMETHOD ? ic::PICInfo::SETMETHOD : ic::PICInfo::SET);
52892:     pic.atom = atom;
52887: 
52887:     /* Guard that the type is an object. */
52887:     Jump typeCheck;
52887:     if (!lhs->isTypeKnown()) {
52887:         RegisterID reg = frame.tempRegForType(lhs);
52887:         pic.typeReg = reg;
52887: 
52887:         /* Start the hot path where it's easy to patch it. */
53270:         pic.fastPathStart = masm.label();
53025:         Jump j = masm.testObject(Assembler::NotEqual, reg);
52887: 
53588:         pic.typeCheck = stubcc.linkExit(j, Uses(2));
52887:         stubcc.leave();
53492: 
56033:         /*
56033:          * This gets called from PROPINC/PROPDEC which aren't compatible with
56033:          * the normal SETNAME property cache logic.
56033:          */
56033:         JSOp op = JSOp(*PC);
55503:         stubcc.masm.move(ImmPtr(atom), Registers::ArgReg1);
56033:         if (op == JSOP_SETNAME || op == JSOP_SETPROP || op == JSOP_SETGNAME || op ==
56033:             JSOP_SETMETHOD) {
54169:             stubcc.call(STRICT_VARIANT(stubs::SetName));
56033:         } else {
55503:             stubcc.call(STRICT_VARIANT(stubs::SetPropNoCache));
56033:         }
56033: 
52887:         typeCheck = stubcc.masm.jump();
52887:         pic.hasTypeCheck = true;
52887:     } else {
53270:         pic.fastPathStart = masm.label();
52887:         pic.hasTypeCheck = false;
52887:         pic.typeReg = Registers::ReturnReg;
52887:     }
52887: 
52887:     /* Get the object into a mutable register. */
52887:     RegisterID objReg = frame.copyDataIntoReg(lhs);
52887:     pic.objReg = objReg;
52887: 
52887:     /* Get info about the RHS and pin it. */
52887:     ValueRemat vr;
54160:     frame.pinEntry(rhs, vr);
52887:     pic.vr = vr;
52887: 
52887:     RegisterID shapeReg = frame.allocReg();
52887:     pic.shapeReg = shapeReg;
52887:     pic.objRemat = frame.dataRematInfo(lhs);
52887: 
54160:     frame.unpinEntry(vr);
52887: 
52887:     /* Guard on shape. */
53445:     masm.loadShape(objReg, shapeReg);
52887:     pic.shapeGuard = masm.label();
53408:     DataLabel32 inlineShapeOffsetLabel;
53270:     Jump j = masm.branch32WithPatch(Assembler::NotEqual, shapeReg,
53270:                                     Imm32(int32(JSObjectMap::INVALID_SHAPE)),
53315:                                     inlineShapeOffsetLabel);
53270:     DBGLABEL(dbgInlineShapeJump);
52887: 
52887:     /* Slow path. */
52887:     {
53588:         pic.slowPathStart = stubcc.linkExit(j, Uses(2));
52887: 
52887:         stubcc.leave();
55503:         passPICAddress(pic);
52887:         pic.callReturn = stubcc.call(ic::SetProp);
52887:     }
52887: 
52887:     /* Load dslots. */
53315: #if defined JS_NUNBOX32
53270:     DBGLABEL(dbgDslots);
53315: #elif defined JS_PUNBOX64
53315:     Label dslotsLoadLabel = masm.label();
53315: #endif
55746:     masm.loadPtr(Address(objReg, offsetof(JSObject, slots)), objReg);
52887: 
52887:     /* Store RHS into object slot. */
53315:     Address slot(objReg, 1 << 24);
53315: #if defined JS_NUNBOX32
54582:     Label dbgInlineStoreType = masm.storeValue(vr, slot);
53315: #elif defined JS_PUNBOX64
54582:     masm.storeValue(vr, slot);
53315: #endif
54582:     DBGLABEL(dbgAfterValueStore);
53315:     pic.storeBack = masm.label();
53315: 
52887:     frame.freeReg(objReg);
52887:     frame.freeReg(shapeReg);
52887: 
52887:     /* "Pop under", taking out object (LHS) and leaving RHS. */
52887:     frame.shimmy(1);
52887: 
52887:     /* Finish slow path. */
52887:     {
52887:         if (pic.hasTypeCheck)
52887:             typeCheck.linkTo(stubcc.masm.label(), &stubcc.masm);
53088:         stubcc.rejoin(Changes(1));
52887:     }
52887: 
56037:     RETURN_IF_OOM(false);
53315: #if defined JS_PUNBOX64
53315:     pic.labels.setprop.dslotsLoadOffset = masm.differenceBetween(pic.storeBack, dslotsLoadLabel);
53315:     pic.labels.setprop.inlineShapeOffset = masm.differenceBetween(pic.shapeGuard, inlineShapeOffsetLabel);
53315:     JS_ASSERT(masm.differenceBetween(inlineShapeOffsetLabel, dbgInlineShapeJump) == SETPROP_INLINE_SHAPE_JUMP);
54582:     JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgAfterValueStore) == SETPROP_INLINE_STORE_VALUE);
53315: #elif defined JS_NUNBOX32
53315:     JS_ASSERT(masm.differenceBetween(pic.shapeGuard, inlineShapeOffsetLabel) == SETPROP_INLINE_SHAPE_OFFSET);
53270:     JS_ASSERT(masm.differenceBetween(pic.shapeGuard, dbgInlineShapeJump) == SETPROP_INLINE_SHAPE_JUMP);
53270:     if (vr.isConstant) {
53270:         /* Constants are offset inside the opcode by 4. */
53270:         JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgInlineStoreType)-4 == SETPROP_INLINE_STORE_CONST_TYPE);
54582:         JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgAfterValueStore)-4 == SETPROP_INLINE_STORE_CONST_DATA);
53270:         JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgDslots) == SETPROP_DSLOTS_BEFORE_CONSTANT);
53315:     } else if (vr.u.s.isTypeKnown) {
53270:         JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgInlineStoreType)-4 == SETPROP_INLINE_STORE_KTYPE_TYPE);
54582:         JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgAfterValueStore) == SETPROP_INLINE_STORE_KTYPE_DATA);
53270:         JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgDslots) == SETPROP_DSLOTS_BEFORE_KTYPE);
53270:     } else {
53270:         JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgInlineStoreType) == SETPROP_INLINE_STORE_DYN_TYPE);
54582:         JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgAfterValueStore) == SETPROP_INLINE_STORE_DYN_DATA);
53270:         JS_ASSERT(masm.differenceBetween(pic.storeBack, dbgDslots) == SETPROP_DSLOTS_BEFORE_DYNAMIC);
53270:     }
53270: #endif
53270: 
52887:     pics.append(pic);
56037:     return true;
52886: }
52886: 
53054: void
53054: mjit::Compiler::jsop_name(JSAtom *atom)
53054: {
56033:     PICGenInfo pic(ic::PICInfo::NAME);
53054: 
53054:     pic.shapeReg = frame.allocReg();
53054:     pic.objReg = frame.allocReg();
53054:     pic.typeReg = Registers::ReturnReg;
53054:     pic.atom = atom;
53054:     pic.hasTypeCheck = false;
53270:     pic.fastPathStart = masm.label();
53054: 
53054:     pic.shapeGuard = masm.label();
53054:     Jump j = masm.jump();
53270:     DBGLABEL(dbgJumpOffset);
53054:     {
53588:         pic.slowPathStart = stubcc.linkExit(j, Uses(0));
53054:         stubcc.leave();
55503:         passPICAddress(pic);
53054:         pic.callReturn = stubcc.call(ic::Name);
53054:     }
53054: 
53054:     pic.storeBack = masm.label();
53054:     frame.pushRegs(pic.shapeReg, pic.objReg);
53054: 
53270:     JS_ASSERT(masm.differenceBetween(pic.fastPathStart, dbgJumpOffset) == SCOPENAME_JUMP_OFFSET);
53270: 
53088:     stubcc.rejoin(Changes(1));
53054: 
53054:     pics.append(pic);
53054: }
53054: 
56037: bool
54847: mjit::Compiler::jsop_xname(JSAtom *atom)
54847: {
56033:     PICGenInfo pic(ic::PICInfo::XNAME);
54847: 
54847:     FrameEntry *fe = frame.peek(-1);
54847:     if (fe->isNotType(JSVAL_TYPE_OBJECT)) {
56037:         return jsop_getprop(atom);
54847:     }
54847: 
54847:     if (!fe->isTypeKnown()) {
54847:         Jump notObject = frame.testObject(Assembler::NotEqual, fe);
54847:         stubcc.linkExit(notObject, Uses(1));
54847:     }
54847: 
54847:     pic.shapeReg = frame.allocReg();
54847:     pic.objReg = frame.copyDataIntoReg(fe);
54847:     pic.typeReg = Registers::ReturnReg;
54847:     pic.atom = atom;
54847:     pic.hasTypeCheck = false;
54847:     pic.fastPathStart = masm.label();
54847: 
54847:     pic.shapeGuard = masm.label();
54847:     Jump j = masm.jump();
54847:     DBGLABEL(dbgJumpOffset);
54847:     {
54847:         pic.slowPathStart = stubcc.linkExit(j, Uses(1));
54847:         stubcc.leave();
55503:         passPICAddress(pic);
54847:         pic.callReturn = stubcc.call(ic::XName);
54847:     }
54847: 
54847:     pic.storeBack = masm.label();
54847:     frame.pop();
54847:     frame.pushRegs(pic.shapeReg, pic.objReg);
54847: 
54847:     JS_ASSERT(masm.differenceBetween(pic.fastPathStart, dbgJumpOffset) == SCOPENAME_JUMP_OFFSET);
54847: 
54847:     stubcc.rejoin(Changes(1));
54847: 
54847:     pics.append(pic);
56037:     return true;
54847: }
54847: 
54847: void
56033: mjit::Compiler::jsop_bindname(uint32 index)
53055: {
56033:     PICGenInfo pic(ic::PICInfo::BIND);
53055: 
53055:     pic.shapeReg = frame.allocReg();
53055:     pic.objReg = frame.allocReg();
53055:     pic.typeReg = Registers::ReturnReg;
53055:     pic.atom = script->getAtom(index);
53055:     pic.hasTypeCheck = false;
53270:     pic.fastPathStart = masm.label();
53055: 
53244:     Address parent(pic.objReg, offsetof(JSObject, parent));
53840:     masm.loadPtr(Address(JSFrameReg, JSStackFrame::offsetOfScopeChain()), pic.objReg);
53055: 
53055:     pic.shapeGuard = masm.label();
53224: #if defined JS_NUNBOX32
53055:     Jump j = masm.branchPtr(Assembler::NotEqual, masm.payloadOf(parent), ImmPtr(0));
53317:     DBGLABEL(inlineJumpOffset);
53224: #elif defined JS_PUNBOX64
53162:     masm.loadPayload(parent, Registers::ValueReg);
53162:     Jump j = masm.branchPtr(Assembler::NotEqual, Registers::ValueReg, ImmPtr(0));
53317:     Label inlineJumpOffset = masm.label();
53162: #endif
53055:     {
53588:         pic.slowPathStart = stubcc.linkExit(j, Uses(0));
53055:         stubcc.leave();
55503:         passPICAddress(pic);
53055:         pic.callReturn = stubcc.call(ic::BindName);
53055:     }
53055: 
53055:     pic.storeBack = masm.label();
53055:     frame.pushTypedPayload(JSVAL_TYPE_OBJECT, pic.objReg);
53055:     frame.freeReg(pic.shapeReg);
53055: 
53317: #if defined JS_NUNBOX32
53317:     JS_ASSERT(masm.differenceBetween(pic.shapeGuard, inlineJumpOffset) == BINDNAME_INLINE_JUMP_OFFSET);
53317: #elif defined JS_PUNBOX64
53317:     pic.labels.bindname.inlineJumpOffset = masm.differenceBetween(pic.shapeGuard, inlineJumpOffset);
53426:     JS_ASSERT(pic.labels.bindname.inlineJumpOffset == masm.differenceBetween(pic.shapeGuard, inlineJumpOffset));
53317: #endif
53270: 
53088:     stubcc.rejoin(Changes(1));
53055: 
53055:     pics.append(pic);
53055: }
53055: 
53119: #else /* JS_POLYIC */
52880: 
52880: void
53054: mjit::Compiler::jsop_name(JSAtom *atom)
53054: {
53087:     prepareStubCall(Uses(0));
53087:     stubCall(stubs::Name);
53054:     frame.pushSynced();
53054: }
53054: 
56037: bool
54860: mjit::Compiler::jsop_xname(JSAtom *atom)
54860: {
56037:     return jsop_getprop(atom);
54860: }
54860: 
56037: bool
56033: mjit::Compiler::jsop_getprop(JSAtom *atom, bool typecheck)
52880: {
56033:     jsop_getprop_slow();
56037:     return true;
52886: }
52886: 
53119: bool
52896: mjit::Compiler::jsop_callprop(JSAtom *atom)
52896: {
53119:     return jsop_callprop_slow(atom);
52896: }
52896: 
56037: bool
56033: mjit::Compiler::jsop_setprop(JSAtom *atom)
52886: {
56033:     jsop_setprop_slow(atom);
56037:     return true;
52880: }
53055: 
53055: void
56033: mjit::Compiler::jsop_bindname(uint32 index)
53055: {
53055:     RegisterID reg = frame.allocReg();
53840:     Address scopeChain(JSFrameReg, JSStackFrame::offsetOfScopeChain());
53162:     masm.loadPtr(scopeChain, reg);
53055: 
53246:     Address address(reg, offsetof(JSObject, parent));
53246: 
53055:     Jump j = masm.branchPtr(Assembler::NotEqual, masm.payloadOf(address), ImmPtr(0));
53055: 
53088:     stubcc.linkExit(j, Uses(0));
53055:     stubcc.leave();
53055:     stubcc.call(stubs::BindName);
53055: 
53055:     frame.pushTypedPayload(JSVAL_TYPE_OBJECT, reg);
53055: 
53088:     stubcc.rejoin(Changes(1));
53055: }
52880: #endif
52880: 
52743: void
52741: mjit::Compiler::jsop_getarg(uint32 index)
52741: {
53840:     frame.push(Address(JSFrameReg, JSStackFrame::offsetOfFormalArg(fun, index)));
52741: }
52741: 
52741: void
52741: mjit::Compiler::jsop_this()
52741: {
53840:     Address thisvAddr(JSFrameReg, JSStackFrame::offsetOfThis(fun));
53023:     frame.push(thisvAddr);
55713:     /* 
55713:      * In strict mode code, we don't wrap 'this'.
55713:      * In direct-call eval code, we wrapped 'this' before entering the eval.
55713:      * In global code, 'this' is always an object.
55713:      */
55713:     if (fun && !script->strictModeCode) {
55713:         Jump notObj = frame.testObject(Assembler::NotEqual, frame.peek(-1));
55713:         stubcc.linkExit(notObj, Uses(1));
52854:         stubcc.leave();
52854:         stubcc.call(stubs::This);
53088:         stubcc.rejoin(Changes(1));
52741:     }
53023: }
52741: 
52741: void
53118: mjit::Compiler::jsop_gnameinc(JSOp op, VoidStubAtom stub, uint32 index)
52732: {
53511: #if defined JS_MONOIC
53511:     jsbytecode *next = &PC[JSOP_GNAMEINC_LENGTH];
53511:     bool pop = (JSOp(*next) == JSOP_POP) && !analysis[next].nincoming;
53511:     int amt = (op == JSOP_GNAMEINC || op == JSOP_INCGNAME) ? -1 : 1;
53511: 
53511:     if (pop || (op == JSOP_INCGNAME || op == JSOP_DECGNAME)) {
53511:         /* These cases are easy, the original value is not observed. */
53511: 
53511:         jsop_getgname(index);
53511:         // V
53511: 
53511:         frame.push(Int32Value(amt));
53511:         // V 1
53511: 
53511:         /* Use sub since it calls ValueToNumber instead of string concat. */
53511:         jsop_binary(JSOP_SUB, stubs::Sub);
53511:         // N+1
53511: 
53511:         jsop_bindgname();
53511:         // V+1 OBJ
53511: 
53511:         frame.dup2();
53511:         // V+1 OBJ V+1 OBJ
53511: 
53511:         frame.shift(-3);
53511:         // OBJ OBJ V+1
53511: 
53511:         frame.shift(-1);
53511:         // OBJ V+1
53511: 
53511:         jsop_setgname(index);
53511:         // V+1
53511: 
53511:         if (pop)
53511:             frame.pop();
53511:     } else {
53511:         /* The pre-value is observed, making this more tricky. */
53511: 
53511:         jsop_getgname(index);
53511:         // V
53511: 
53511:         jsop_pos();
53511:         // N
53511: 
53511:         frame.dup();
53511:         // N N
53511: 
53511:         frame.push(Int32Value(-amt));
53511:         // N N 1
53511: 
53511:         jsop_binary(JSOP_ADD, stubs::Add);
53511:         // N N+1
53511: 
53511:         jsop_bindgname();
53511:         // N N+1 OBJ
53511: 
53511:         frame.dup2();
53511:         // N N+1 OBJ N+1 OBJ
53511: 
53511:         frame.shift(-3);
53511:         // N OBJ OBJ N+1
53511: 
53511:         frame.shift(-1);
53511:         // N OBJ N+1
53511: 
53511:         jsop_setgname(index);
53511:         // N N+1
53511: 
53511:         frame.pop();
53511:         // N
53511:     }
53511: 
53511:     if (pop)
53511:         PC += JSOP_POP_LENGTH;
53511: #else
53536:     JSAtom *atom = script->getAtom(index);
53087:     prepareStubCall(Uses(0));
52732:     masm.move(ImmPtr(atom), Registers::ArgReg1);
53087:     stubCall(stub);
52732:     frame.pushSynced();
53511: #endif
53511: 
53511:     PC += JSOP_GNAMEINC_LENGTH;
52732: }
52732: 
56037: bool
53118: mjit::Compiler::jsop_nameinc(JSOp op, VoidStubAtom stub, uint32 index)
53118: {
53118:     JSAtom *atom = script->getAtom(index);
53119: #if defined JS_POLYIC
53118:     jsbytecode *next = &PC[JSOP_NAMEINC_LENGTH];
53118:     bool pop = (JSOp(*next) == JSOP_POP) && !analysis[next].nincoming;
53118:     int amt = (op == JSOP_NAMEINC || op == JSOP_INCNAME) ? -1 : 1;
53118: 
53118:     if (pop || (op == JSOP_INCNAME || op == JSOP_DECNAME)) {
53118:         /* These cases are easy, the original value is not observed. */
53118: 
53118:         jsop_name(atom);
53118:         // V
53118: 
53118:         frame.push(Int32Value(amt));
53118:         // V 1
53118: 
53118:         /* Use sub since it calls ValueToNumber instead of string concat. */
53118:         jsop_binary(JSOP_SUB, stubs::Sub);
53118:         // N+1
53118: 
56033:         jsop_bindname(index);
53118:         // V+1 OBJ
53118: 
53118:         frame.dup2();
53118:         // V+1 OBJ V+1 OBJ
53118: 
53118:         frame.shift(-3);
53118:         // OBJ OBJ V+1
53118: 
53118:         frame.shift(-1);
53118:         // OBJ V+1
53118: 
56037:         if (!jsop_setprop(atom))
56037:             return false;
53118:         // V+1
53118: 
53118:         if (pop)
53118:             frame.pop();
53118:     } else {
53118:         /* The pre-value is observed, making this more tricky. */
53118: 
53118:         jsop_name(atom);
53118:         // V
53118: 
53118:         jsop_pos();
53118:         // N
53118: 
53118:         frame.dup();
53118:         // N N
53118: 
53118:         frame.push(Int32Value(-amt));
53118:         // N N 1
53118: 
53118:         jsop_binary(JSOP_ADD, stubs::Add);
53118:         // N N+1
53118: 
56033:         jsop_bindname(index);
53118:         // N N+1 OBJ
53118: 
53118:         frame.dup2();
53118:         // N N+1 OBJ N+1 OBJ
53118: 
53118:         frame.shift(-3);
53118:         // N OBJ OBJ N+1
53118: 
53118:         frame.shift(-1);
53118:         // N OBJ N+1
53118: 
56037:         if (!jsop_setprop(atom))
56037:             return false;
53118:         // N N+1
53118: 
53118:         frame.pop();
53118:         // N
53118:     }
53119: 
53119:     if (pop)
53119:         PC += JSOP_POP_LENGTH;
53118: #else
53122:     prepareStubCall(Uses(0));
53118:     masm.move(ImmPtr(atom), Registers::ArgReg1);
53118:     stubCall(stub);
53118:     frame.pushSynced();
53118: #endif
53118: 
53118:     PC += JSOP_NAMEINC_LENGTH;
56037:     return true;
53118: }
53118: 
56037: bool
52746: mjit::Compiler::jsop_propinc(JSOp op, VoidStubAtom stub, uint32 index)
52746: {
52746:     JSAtom *atom = script->getAtom(index);
53119: #if defined JS_POLYIC
53172:     FrameEntry *objFe = frame.peek(-1);
53172:     if (!objFe->isTypeKnown() || objFe->getKnownType() == JSVAL_TYPE_OBJECT) {
52916:         jsbytecode *next = &PC[JSOP_PROPINC_LENGTH];
52916:         bool pop = (JSOp(*next) == JSOP_POP) && !analysis[next].nincoming;
52916:         int amt = (op == JSOP_PROPINC || op == JSOP_INCPROP) ? -1 : 1;
52916: 
52916:         if (pop || (op == JSOP_INCPROP || op == JSOP_DECPROP)) {
52916:             /* These cases are easy, the original value is not observed. */
52916: 
52916:             frame.dup();
52916:             // OBJ OBJ
52916: 
56037:             if (!jsop_getprop(atom))
56037:                 return false;
52916:             // OBJ V
52916: 
53081:             frame.push(Int32Value(amt));
52916:             // OBJ V 1
52916: 
52916:             /* Use sub since it calls ValueToNumber instead of string concat. */
52916:             jsop_binary(JSOP_SUB, stubs::Sub);
52916:             // OBJ V+1
52916: 
56037:             if (!jsop_setprop(atom))
56037:                 return false;
52916:             // V+1
52916: 
52916:             if (pop)
52916:                 frame.pop();
52916:         } else {
52916:             /* The pre-value is observed, making this more tricky. */
52916: 
52916:             frame.dup();
52916:             // OBJ OBJ 
52916: 
56037:             if (!jsop_getprop(atom))
56037:                 return false;
52916:             // OBJ V
52916: 
52916:             jsop_pos();
52916:             // OBJ N
52916: 
52916:             frame.dup();
52916:             // OBJ N N
52916: 
53081:             frame.push(Int32Value(-amt));
52916:             // OBJ N N 1
52916: 
52916:             jsop_binary(JSOP_ADD, stubs::Add);
52916:             // OBJ N N+1
52916: 
52916:             frame.dupAt(-3);
52916:             // OBJ N N+1 OBJ
52916: 
52916:             frame.dupAt(-2);
52916:             // OBJ N N+1 OBJ N+1
52916: 
56037:             if (!jsop_setprop(atom))
56037:                 return false;
52916:             // OBJ N N+1 N+1
52916: 
52916:             frame.popn(2);
52916:             // OBJ N
52916: 
52916:             frame.shimmy(1);
52916:             // N
52916:         }
53119:         if (pop)
53119:             PC += JSOP_POP_LENGTH;
53172:     } else
53173: #endif
53172:     {
53087:         prepareStubCall(Uses(1));
52746:         masm.move(ImmPtr(atom), Registers::ArgReg1);
53087:         stubCall(stub);
52746:         frame.pop();
52746:         frame.pushSynced();
53172:     }
52916: 
52916:     PC += JSOP_PROPINC_LENGTH;
56037:     return true;
52746: }
52746: 
53404: void
53404: mjit::Compiler::iter(uintN flags)
53404: {
53404:     FrameEntry *fe = frame.peek(-1);
53404: 
53404:     /*
53404:      * Stub the call if this is not a simple 'for in' loop or if the iterated
53404:      * value is known to not be an object.
53404:      */
53404:     if ((flags != JSITER_ENUMERATE) || fe->isNotType(JSVAL_TYPE_OBJECT)) {
53404:         prepareStubCall(Uses(1));
53404:         masm.move(Imm32(flags), Registers::ArgReg1);
53404:         stubCall(stubs::Iter);
53404:         frame.pop();
53404:         frame.pushSynced();
53404:         return;
53404:     }
53404: 
53404:     if (!fe->isTypeKnown()) {
53404:         Jump notObject = frame.testObject(Assembler::NotEqual, fe);
53404:         stubcc.linkExit(notObject, Uses(1));
53404:     }
53404: 
53404:     RegisterID reg = frame.tempRegForData(fe);
53404: 
53404:     frame.pinReg(reg);
53404:     RegisterID ioreg = frame.allocReg();  /* Will hold iterator JSObject */
53404:     RegisterID nireg = frame.allocReg();  /* Will hold NativeIterator */
53404:     RegisterID T1 = frame.allocReg();
53404:     RegisterID T2 = frame.allocReg();
53404:     frame.unpinReg(reg);
53404: 
53404:     /*
53404:      * Fetch the most recent iterator. TODO: bake this pointer in when
53404:      * iterator caches become per-compartment.
53404:      */
53404:     masm.loadPtr(FrameAddress(offsetof(VMFrame, cx)), T1);
53404: #ifdef JS_THREADSAFE
53404:     masm.loadPtr(Address(T1, offsetof(JSContext, thread)), T1);
53404:     masm.loadPtr(Address(T1, offsetof(JSThread, data.lastNativeIterator)), ioreg);
53404: #else
53404:     masm.loadPtr(Address(T1, offsetof(JSContext, runtime)), T1);
53404:     masm.loadPtr(Address(T1, offsetof(JSRuntime, threadData.lastNativeIterator)), ioreg);
53404: #endif
53404: 
53404:     /* Test for NULL. */
53404:     Jump nullIterator = masm.branchTest32(Assembler::Zero, ioreg, ioreg);
53404:     stubcc.linkExit(nullIterator, Uses(1));
53404: 
53404:     /* Get NativeIterator from iter obj. :FIXME: X64, also most of this function */
55746:     masm.loadPtr(Address(ioreg, offsetof(JSObject, privateData)), nireg);
53404: 
53404:     /* Test for active iterator. */
53404:     Address flagsAddr(nireg, offsetof(NativeIterator, flags));
53404:     masm.load32(flagsAddr, T1);
53841:     Jump activeIterator = masm.branchTest32(Assembler::NonZero, T1, Imm32(JSITER_ACTIVE));
53404:     stubcc.linkExit(activeIterator, Uses(1));
53404: 
53404:     /* Compare shape of object with iterator. */
53404:     masm.loadShape(reg, T1);
53404:     masm.loadPtr(Address(nireg, offsetof(NativeIterator, shapes_array)), T2);
53404:     masm.load32(Address(T2, 0), T2);
53404:     Jump mismatchedObject = masm.branch32(Assembler::NotEqual, T1, T2);
53404:     stubcc.linkExit(mismatchedObject, Uses(1));
53404: 
53404:     /* Compare shape of object's prototype with iterator. */
53404:     masm.loadPtr(Address(reg, offsetof(JSObject, proto)), T1);
53404:     masm.loadShape(T1, T1);
53404:     masm.loadPtr(Address(nireg, offsetof(NativeIterator, shapes_array)), T2);
53404:     masm.load32(Address(T2, sizeof(uint32)), T2);
53404:     Jump mismatchedProto = masm.branch32(Assembler::NotEqual, T1, T2);
53404:     stubcc.linkExit(mismatchedProto, Uses(1));
53404: 
53404:     /*
53404:      * Compare object's prototype's prototype with NULL. The last native
53404:      * iterator will always have a prototype chain length of one
53404:      * (i.e. it must be a plain object), so we do not need to generate
53404:      * a loop here.
53404:      */
53404:     masm.loadPtr(Address(reg, offsetof(JSObject, proto)), T1);
53404:     masm.loadPtr(Address(T1, offsetof(JSObject, proto)), T1);
53404:     Jump overlongChain = masm.branchPtr(Assembler::NonZero, T1, T1);
53404:     stubcc.linkExit(overlongChain, Uses(1));
53404: 
53404:     /* Found a match with the most recent iterator. Hooray! */
53404: 
53404:     /* Mark iterator as active. */
53404:     masm.load32(flagsAddr, T1);
53404:     masm.or32(Imm32(JSITER_ACTIVE), T1);
53404:     masm.store32(T1, flagsAddr);
53404: 
53404:     /* Chain onto the active iterator stack. */
53404:     masm.loadPtr(FrameAddress(offsetof(VMFrame, cx)), T1);
53404:     masm.loadPtr(Address(T1, offsetof(JSContext, enumerators)), T2);
53404:     masm.storePtr(T2, Address(nireg, offsetof(NativeIterator, next)));
53404:     masm.storePtr(ioreg, Address(T1, offsetof(JSContext, enumerators)));
53404: 
53404:     frame.freeReg(nireg);
53404:     frame.freeReg(T1);
53404:     frame.freeReg(T2);
53404: 
53404:     stubcc.leave();
53404:     stubcc.masm.move(Imm32(flags), Registers::ArgReg1);
53404:     stubcc.call(stubs::Iter);
53404: 
53404:     /* Push the iterator object. */
53404:     frame.pop();
53404:     frame.pushTypedPayload(JSVAL_TYPE_OBJECT, ioreg);
53404: 
53404:     stubcc.rejoin(Changes(1));
53404: }
53404: 
52737: /*
52737:  * This big nasty function emits a fast-path for native iterators, producing
52737:  * a temporary value on the stack for FORLOCAL,ARG,GLOBAL,etc ops to use.
52737:  */
52737: void
52737: mjit::Compiler::iterNext()
52737: {
52737:     FrameEntry *fe = frame.peek(-1);
52737:     RegisterID reg = frame.tempRegForData(fe);
52737: 
52737:     /* Is it worth trying to pin this longer? Prolly not. */
52737:     frame.pinReg(reg);
52737:     RegisterID T1 = frame.allocReg();
52737:     frame.unpinReg(reg);
52737: 
52737:     /* Test clasp */
52737:     masm.loadPtr(Address(reg, offsetof(JSObject, clasp)), T1);
53244:     Jump notFast = masm.branchPtr(Assembler::NotEqual, T1, ImmPtr(&js_IteratorClass));
53088:     stubcc.linkExit(notFast, Uses(1));
52737: 
53178:     /* Get private from iter obj. */
53157:     masm.loadFunctionPrivate(reg, T1);
52737: 
52737:     RegisterID T3 = frame.allocReg();
52973:     RegisterID T4 = frame.allocReg();
52737: 
52737:     /* Test if for-each. */
52737:     masm.load32(Address(T1, offsetof(NativeIterator, flags)), T3);
53841:     notFast = masm.branchTest32(Assembler::NonZero, T3, Imm32(JSITER_FOREACH));
53088:     stubcc.linkExit(notFast, Uses(1));
52973: 
52973:     RegisterID T2 = frame.allocReg();
52973: 
52973:     /* Get cursor. */
52973:     masm.loadPtr(Address(T1, offsetof(NativeIterator, props_cursor)), T2);
52973: 
52973:     /* Test if the jsid is a string. */
52973:     masm.loadPtr(T2, T3);
52973:     masm.move(T3, T4);
52973:     masm.andPtr(Imm32(JSID_TYPE_MASK), T4);
52973:     notFast = masm.branchTestPtr(Assembler::NonZero, T4, T4);
53088:     stubcc.linkExit(notFast, Uses(1));
52737: 
52737:     /* It's safe to increase the cursor now. */
52973:     masm.addPtr(Imm32(sizeof(jsid)), T2, T4);
52973:     masm.storePtr(T4, Address(T1, offsetof(NativeIterator, props_cursor)));
52973: 
52973:     frame.freeReg(T4);
52737:     frame.freeReg(T1);
52973:     frame.freeReg(T2);
52737: 
52737:     stubcc.leave();
52737:     stubcc.call(stubs::IterNext);
52737: 
53025:     frame.pushUntypedPayload(JSVAL_TYPE_STRING, T3);
52737: 
52737:     /* Join with the stub call. */
53088:     stubcc.rejoin(Changes(1));
52737: }
52737: 
52737: void
52737: mjit::Compiler::iterMore()
52737: {
52737:     FrameEntry *fe= frame.peek(-1);
52737:     RegisterID reg = frame.tempRegForData(fe);
52737: 
52737:     frame.pinReg(reg);
52737:     RegisterID T1 = frame.allocReg();
52737:     frame.unpinReg(reg);
52737: 
52737:     /* Test clasp */
52737:     masm.loadPtr(Address(reg, offsetof(JSObject, clasp)), T1);
53244:     Jump notFast = masm.branchPtr(Assembler::NotEqual, T1, ImmPtr(&js_IteratorClass));
53277:     stubcc.linkExitForBranch(notFast);
52737: 
53178:     /* Get private from iter obj. */
53157:     masm.loadFunctionPrivate(reg, T1);
52737: 
52737:     /* Get props_cursor, test */
52737:     RegisterID T2 = frame.allocReg();
54719:     frame.syncAndForgetEverything();
52737:     masm.loadPtr(Address(T1, offsetof(NativeIterator, props_cursor)), T2);
52737:     masm.loadPtr(Address(T1, offsetof(NativeIterator, props_end)), T1);
53133:     Jump jFast = masm.branchPtr(Assembler::LessThan, T2, T1);
52737: 
52737:     jsbytecode *target = &PC[JSOP_MOREITER_LENGTH];
52737:     JSOp next = JSOp(*target);
52737:     JS_ASSERT(next == JSOP_IFNE || next == JSOP_IFNEX);
52737: 
52737:     target += (next == JSOP_IFNE)
52737:               ? GET_JUMP_OFFSET(target)
52737:               : GET_JUMPX_OFFSET(target);
52737: 
52737:     stubcc.leave();
52737:     stubcc.call(stubs::IterMore);
53133:     Jump j = stubcc.masm.branchTest32(Assembler::NonZero, Registers::ReturnReg,
53133:                                       Registers::ReturnReg);
53133: 
52737:     PC += JSOP_MOREITER_LENGTH;
52737:     PC += js_CodeSpec[next].length;
52737: 
53088:     stubcc.rejoin(Changes(1));
53133: 
53277:     jumpAndTrace(jFast, target, &j);
52737: }
52737: 
52815: void
53404: mjit::Compiler::iterEnd()
53404: {
53404:     FrameEntry *fe= frame.peek(-1);
53404:     RegisterID reg = frame.tempRegForData(fe);
53404: 
53404:     frame.pinReg(reg);
53404:     RegisterID T1 = frame.allocReg();
53404:     frame.unpinReg(reg);
53404: 
53404:     /* Test clasp */
53404:     masm.loadPtr(Address(reg, offsetof(JSObject, clasp)), T1);
53404:     Jump notIterator = masm.branchPtr(Assembler::NotEqual, T1, ImmPtr(&js_IteratorClass));
53404:     stubcc.linkExit(notIterator, Uses(1));
53404: 
53404:     /* Get private from iter obj. :FIXME: X64 */
55746:     masm.loadPtr(Address(reg, offsetof(JSObject, privateData)), T1);
53404: 
53404:     RegisterID T2 = frame.allocReg();
53404: 
53404:     /* Load flags. */
53404:     Address flagAddr(T1, offsetof(NativeIterator, flags));
53404:     masm.loadPtr(flagAddr, T2);
53404: 
53404:     /* Test for (flags == ENUMERATE | ACTIVE). */
53404:     Jump notEnumerate = masm.branch32(Assembler::NotEqual, T2,
53404:                                       Imm32(JSITER_ENUMERATE | JSITER_ACTIVE));
53404:     stubcc.linkExit(notEnumerate, Uses(1));
53404: 
53404:     /* Clear active bit. */
53404:     masm.and32(Imm32(~JSITER_ACTIVE), T2);
53404:     masm.storePtr(T2, flagAddr);
53404: 
53404:     /* Reset property cursor. */
53404:     masm.loadPtr(Address(T1, offsetof(NativeIterator, props_array)), T2);
53404:     masm.storePtr(T2, Address(T1, offsetof(NativeIterator, props_cursor)));
53404: 
53404:     /* Advance enumerators list. */
53404:     masm.loadPtr(FrameAddress(offsetof(VMFrame, cx)), T2);
53404:     masm.loadPtr(Address(T1, offsetof(NativeIterator, next)), T1);
53404:     masm.storePtr(T1, Address(T2, offsetof(JSContext, enumerators)));
53404: 
53404:     frame.freeReg(T1);
53404:     frame.freeReg(T2);
53404: 
53404:     stubcc.leave();
53404:     stubcc.call(stubs::EndIter);
53404: 
53404:     frame.pop();
53404: 
53404:     stubcc.rejoin(Changes(1));
53404: }
53404: 
53404: void
52815: mjit::Compiler::jsop_eleminc(JSOp op, VoidStub stub)
52815: {
53087:     prepareStubCall(Uses(2));
53087:     stubCall(stub);
52815:     frame.popn(2);
52815:     frame.pushSynced();
52815: }
52815: 
52826: void
52826: mjit::Compiler::jsop_getgname_slow(uint32 index)
52826: {
53087:     prepareStubCall(Uses(0));
53087:     stubCall(stubs::GetGlobalName);
52826:     frame.pushSynced();
52826: }
52826: 
52826: void
52826: mjit::Compiler::jsop_bindgname()
52826: {
52826:     if (script->compileAndGo && globalObj) {
53081:         frame.push(ObjectValue(*globalObj));
52826:         return;
52826:     }
52826: 
52826:     /* :TODO: this is slower than it needs to be. */
53087:     prepareStubCall(Uses(0));
53087:     stubCall(stubs::BindGlobalName);
52826:     frame.takeReg(Registers::ReturnReg);
53025:     frame.pushTypedPayload(JSVAL_TYPE_OBJECT, Registers::ReturnReg);
52826: }
52826: 
52826: void
52826: mjit::Compiler::jsop_getgname(uint32 index)
52826: {
53119: #if defined JS_MONOIC
52826:     jsop_bindgname();
52826: 
52826:     FrameEntry *fe = frame.peek(-1);
53025:     JS_ASSERT(fe->isTypeKnown() && fe->getKnownType() == JSVAL_TYPE_OBJECT);
52826: 
53116:     MICGenInfo mic(ic::MICInfo::GET);
52826:     RegisterID objReg;
52826:     Jump shapeGuard;
52826: 
52826:     mic.entry = masm.label();
52826:     if (fe->isConstant()) {
53081:         JSObject *obj = &fe->getValue().toObject();
52826:         frame.pop();
52826:         JS_ASSERT(obj->isNative());
52826: 
52826:         objReg = frame.allocReg();
52826: 
53531:         masm.load32FromImm(&obj->objShape, objReg);
53408:         shapeGuard = masm.branch32WithPatch(Assembler::NotEqual, objReg,
53408:                                             Imm32(int32(JSObjectMap::INVALID_SHAPE)), mic.shape);
52826:         masm.move(ImmPtr(obj), objReg);
52826:     } else {
52826:         objReg = frame.ownRegForData(fe);
52826:         frame.pop();
52826:         RegisterID reg = frame.allocReg();
52826: 
53445:         masm.loadShape(objReg, reg);
53408:         shapeGuard = masm.branch32WithPatch(Assembler::NotEqual, reg,
53408:                                             Imm32(int32(JSObjectMap::INVALID_SHAPE)), mic.shape);
52826:         frame.freeReg(reg);
52826:     }
53088:     stubcc.linkExit(shapeGuard, Uses(0));
52826: 
52826:     stubcc.leave();
55503:     passMICAddress(mic);
52826:     mic.stubEntry = stubcc.masm.label();
52826:     mic.call = stubcc.call(ic::GetGlobalName);
52826: 
52826:     /* Garbage value. */
52826:     uint32 slot = 1 << 24;
52826: 
55746:     masm.loadPtr(Address(objReg, offsetof(JSObject, slots)), objReg);
52826:     Address address(objReg, slot);
53269:     
53269:     /*
53269:      * On x86_64, the length of the movq instruction used is variable
53269:      * depending on the registers used. For example, 'movq $0x5(%r12), %r12'
53269:      * is one byte larger than 'movq $0x5(%r14), %r14'. This means that
53269:      * the constant '0x5' that we want to write is at a variable position.
53269:      *
53269:      * x86_64 only performs a single load. The constant offset is always
53269:      * at the end of the bytecode. Knowing the start and end of the move
53269:      * bytecode is sufficient for patching.
53269:      */
53269: 
53269:     /* Allocate any register other than objReg. */
53269:     RegisterID dreg = frame.allocReg();
53269:     /* After dreg is loaded, it's safe to clobber objReg. */
53269:     RegisterID treg = objReg;
53269: 
53269:     mic.load = masm.label();
53269: # if defined JS_NUNBOX32
53451: #  if defined JS_CPU_ARM
53451:     DataLabel32 offsetAddress = masm.load64WithAddressOffsetPatch(address, treg, dreg);
53451:     JS_ASSERT(masm.differenceBetween(mic.load, offsetAddress) == 0);
53451: #  else
53269:     masm.loadPayload(address, dreg);
53269:     masm.loadTypeTag(address, treg);
53451: #  endif
53269: # elif defined JS_PUNBOX64
53386:     Label inlineValueLoadLabel =
53386:         masm.loadValueAsComponents(address, treg, dreg);
53386:     mic.patchValueOffset = masm.differenceBetween(mic.load, inlineValueLoadLabel);
53426:     JS_ASSERT(mic.patchValueOffset == masm.differenceBetween(mic.load, inlineValueLoadLabel));
53269: # endif
53269: 
53269:     frame.pushRegs(treg, dreg);
52826: 
53088:     stubcc.rejoin(Changes(1));
52826:     mics.append(mic);
53269: 
52826: #else
52826:     jsop_getgname_slow(index);
52826: #endif
52826: }
52826: 
52831: void
52831: mjit::Compiler::jsop_setgname_slow(uint32 index)
52831: {
52831:     JSAtom *atom = script->getAtom(index);
53087:     prepareStubCall(Uses(2));
52831:     masm.move(ImmPtr(atom), Registers::ArgReg1);
54169:     stubCall(STRICT_VARIANT(stubs::SetGlobalName));
52831:     frame.popn(2);
52831:     frame.pushSynced();
52831: }
52831: 
52831: void
52831: mjit::Compiler::jsop_setgname(uint32 index)
52831: {
53119: #if defined JS_MONOIC
52831:     FrameEntry *objFe = frame.peek(-2);
53025:     JS_ASSERT_IF(objFe->isTypeKnown(), objFe->getKnownType() == JSVAL_TYPE_OBJECT);
52831: 
53116:     MICGenInfo mic(ic::MICInfo::SET);
52831:     RegisterID objReg;
52831:     Jump shapeGuard;
52831: 
52831:     mic.entry = masm.label();
52831:     if (objFe->isConstant()) {
53081:         JSObject *obj = &objFe->getValue().toObject();
52831:         JS_ASSERT(obj->isNative());
52831: 
52831:         objReg = frame.allocReg();
52831: 
53531:         masm.load32FromImm(&obj->objShape, objReg);
53408:         shapeGuard = masm.branch32WithPatch(Assembler::NotEqual, objReg,
53408:                                             Imm32(int32(JSObjectMap::INVALID_SHAPE)),
53408:                                             mic.shape);
52831:         masm.move(ImmPtr(obj), objReg);
52831:     } else {
54719:         objReg = frame.copyDataIntoReg(objFe);
52831:         RegisterID reg = frame.allocReg();
52831: 
53445:         masm.loadShape(objReg, reg);
53408:         shapeGuard = masm.branch32WithPatch(Assembler::NotEqual, reg,
53408:                                             Imm32(int32(JSObjectMap::INVALID_SHAPE)),
53408:                                             mic.shape);
52831:         frame.freeReg(reg);
52831:     }
53113:     stubcc.linkExit(shapeGuard, Uses(2));
52831: 
52831:     stubcc.leave();
55503:     passMICAddress(mic);
52831:     mic.stubEntry = stubcc.masm.label();
52831:     mic.call = stubcc.call(ic::SetGlobalName);
52831: 
52831:     /* Garbage value. */
52831:     uint32 slot = 1 << 24;
52831: 
52831:     /* Get both type and reg into registers. */
52831:     FrameEntry *fe = frame.peek(-1);
52831: 
52831:     Value v;
52831:     RegisterID typeReg = Registers::ReturnReg;
52831:     RegisterID dataReg = Registers::ReturnReg;
53025:     JSValueType typeTag = JSVAL_TYPE_INT32;
52831: 
53133:     mic.u.name.typeConst = fe->isTypeKnown();
53133:     mic.u.name.dataConst = fe->isConstant();
53133: 
53133:     if (!mic.u.name.dataConst) {
52831:         dataReg = frame.ownRegForData(fe);
53133:         if (!mic.u.name.typeConst)
52831:             typeReg = frame.ownRegForType(fe);
52831:         else
53025:             typeTag = fe->getKnownType();
52831:     } else {
52831:         v = fe->getValue();
52831:     }
52831: 
55746:     masm.loadPtr(Address(objReg, offsetof(JSObject, slots)), objReg);
52831:     Address address(objReg, slot);
52831: 
53451:     mic.load = masm.label();
53451: 
53451: #if defined JS_CPU_ARM
53451:     DataLabel32 offsetAddress;
53451:     if (mic.u.name.dataConst) {
53451:         offsetAddress = masm.moveWithPatch(Imm32(address.offset), JSC::ARMRegisters::S0);
53451:         masm.add32(address.base, JSC::ARMRegisters::S0);
53451:         masm.storeValue(v, Address(JSC::ARMRegisters::S0, 0));
53451:     } else {
53451:         if (mic.u.name.typeConst) {
53451:             offsetAddress = masm.store64WithAddressOffsetPatch(ImmType(typeTag), dataReg, address);
53451:         } else {
53451:             offsetAddress = masm.store64WithAddressOffsetPatch(typeReg, dataReg, address);
53451:         }
53451:     }
53451:     JS_ASSERT(masm.differenceBetween(mic.load, offsetAddress) == 0);
53451: #else
53133:     if (mic.u.name.dataConst) {
52831:         masm.storeValue(v, address);
54582:     } else if (mic.u.name.typeConst) {
54582:         masm.storeValueFromComponents(ImmType(typeTag), dataReg, address);
52831:     } else {
54582:         masm.storeValueFromComponents(typeReg, dataReg, address);
52831:     }
53451: #endif
54582: 
54582: #if defined JS_PUNBOX64
53269:     /* 
53269:      * Instructions on x86_64 can vary in size based on registers
53269:      * used. Since we only need to patch the last instruction in
53269:      * both paths above, remember the distance between the
53269:      * load label and after the instruction to be patched.
53269:      */
53269:     mic.patchValueOffset = masm.differenceBetween(mic.load, masm.label());
53426:     JS_ASSERT(mic.patchValueOffset == masm.differenceBetween(mic.load, masm.label()));
53269: #endif
52831: 
52831:     frame.freeReg(objReg);
52831:     frame.popn(2);
53133:     if (mic.u.name.dataConst) {
52831:         frame.push(v);
52831:     } else {
53133:         if (mic.u.name.typeConst)
52831:             frame.pushTypedPayload(typeTag, dataReg);
52831:         else
52831:             frame.pushRegs(typeReg, dataReg);
52831:     }
52831: 
53088:     stubcc.rejoin(Changes(1));
52831: 
52831:     mics.append(mic);
52831: #else
52831:     jsop_setgname_slow(index);
52831: #endif
52831: }
52831: 
52838: void
52838: mjit::Compiler::jsop_setelem_slow()
52838: {
53087:     prepareStubCall(Uses(3));
54169:     stubCall(STRICT_VARIANT(stubs::SetElem));
52838:     frame.popn(3);
52838:     frame.pushSynced();
52838: }
52838: 
52843: void
52843: mjit::Compiler::jsop_getelem_slow()
52843: {
53087:     prepareStubCall(Uses(2));
53087:     stubCall(stubs::GetElem);
52843:     frame.popn(2);
52843:     frame.pushSynced();
52843: }
52843: 
52874: void
52874: mjit::Compiler::jsop_unbrand()
52874: {
53087:     prepareStubCall(Uses(1));
53087:     stubCall(stubs::Unbrand);
52874: }
52874: 
56037: bool
52894: mjit::Compiler::jsop_instanceof()
52894: {
53124:     FrameEntry *lhs = frame.peek(-2);
52894:     FrameEntry *rhs = frame.peek(-1);
52894: 
53124:     // The fast path applies only when both operands are objects.
53124:     if (rhs->isNotType(JSVAL_TYPE_OBJECT) || lhs->isNotType(JSVAL_TYPE_OBJECT)) {
53087:         prepareStubCall(Uses(2));
53087:         stubCall(stubs::InstanceOf);
52894:         frame.popn(2);
52894:         frame.takeReg(Registers::ReturnReg);
53025:         frame.pushTypedPayload(JSVAL_TYPE_BOOLEAN, Registers::ReturnReg);
56037:         return true;
52894:     }
52894: 
53124:     MaybeJump firstSlow;
53124:     if (!rhs->isTypeKnown()) {
53023:         Jump j = frame.testObject(Assembler::NotEqual, rhs);
53088:         stubcc.linkExit(j, Uses(2));
53023:         RegisterID reg = frame.tempRegForData(rhs);
53023:         j = masm.testFunction(Assembler::NotEqual, reg);
53088:         stubcc.linkExit(j, Uses(2));
54410:     }
54410: 
54410:     /* Test for bound functions. */
54410:     RegisterID obj = frame.tempRegForData(rhs);
54410:     Jump isBound = masm.branchTest32(Assembler::NonZero, Address(obj, offsetof(JSObject, flags)),
54410:                                      Imm32(JSObject::BOUND_FUNCTION));
54410:     {
54410:         stubcc.linkExit(isBound, Uses(2));
52894:         stubcc.leave();
52894:         stubcc.call(stubs::InstanceOf);
52911:         firstSlow = stubcc.masm.jump();
52911:     }
52911:     
54410: 
52911:     /* This is sadly necessary because the error case needs the object. */
52894:     frame.dup();
52894: 
56037:     if (!jsop_getprop(cx->runtime->atomState.classPrototypeAtom, false))
56037:         return false;
52894: 
52911:     /* Primitive prototypes are invalid. */
52911:     rhs = frame.peek(-1);
52911:     Jump j = frame.testPrimitive(Assembler::Equal, rhs);
53088:     stubcc.linkExit(j, Uses(3));
52911: 
52911:     /* Allocate registers up front, because of branchiness. */
54410:     obj = frame.copyDataIntoReg(lhs);
52911:     RegisterID proto = frame.copyDataIntoReg(rhs);
52911:     RegisterID temp = frame.allocReg();
52911: 
53124:     MaybeJump isFalse;
53124:     if (!lhs->isTypeKnown())
53124:         isFalse = frame.testPrimitive(Assembler::Equal, lhs);
52911: 
52911:     /* Quick test to avoid wrapped objects. */
52911:     masm.loadPtr(Address(obj, offsetof(JSObject, clasp)), temp);
53445:     masm.loadPtr(Address(temp, offsetof(Class, ext) +
53445:                               offsetof(ClassExtension, wrappedObject)), temp);
53445:     j = masm.branchTestPtr(Assembler::NonZero, temp, temp);
53088:     stubcc.linkExit(j, Uses(3));
52911: 
53081:     Address protoAddr(obj, offsetof(JSObject, proto));
52911:     Label loop = masm.label();
52911: 
52911:     /* Walk prototype chain, break out on NULL or hit. */
53144:     masm.loadPayload(protoAddr, obj);
52911:     Jump isFalse2 = masm.branchTestPtr(Assembler::Zero, obj, obj);
52911:     Jump isTrue = masm.branchPtr(Assembler::NotEqual, obj, proto);
52911:     isTrue.linkTo(loop, &masm);
52911:     masm.move(Imm32(1), temp);
52911:     isTrue = masm.jump();
52911: 
53124:     if (isFalse.isSet())
53124:         isFalse.getJump().linkTo(masm.label(), &masm);
52911:     isFalse2.linkTo(masm.label(), &masm);
52911:     masm.move(Imm32(0), temp);
52911:     isTrue.linkTo(masm.label(), &masm);
52911: 
52911:     frame.freeReg(proto);
52911:     frame.freeReg(obj);
52911: 
52911:     stubcc.leave();
52911:     stubcc.call(stubs::FastInstanceOf);
52911: 
52894:     frame.popn(3);
53025:     frame.pushTypedPayload(JSVAL_TYPE_BOOLEAN, temp);
52911: 
53124:     if (firstSlow.isSet())
53124:         firstSlow.getJump().linkTo(stubcc.masm.label(), &stubcc.masm);
53088:     stubcc.rejoin(Changes(1));
56037:     return true;
52894: }
52894: 
53133: /*
53133:  * Note: This function emits tracer hooks into the OOL path. This means if
53460:  * it is used in the middle of an in-progress slow path, the stream will be
53133:  * hopelessly corrupted. Take care to only call this before linkExits() and
53133:  * after rejoin()s.
53133:  */
53133: void
54160: mjit::Compiler::jumpAndTrace(Jump j, jsbytecode *target, Jump *slowOne, Jump *slowTwo)
53133: {
53133: #ifndef JS_TRACER
53133:     jumpInScript(j, target);
55473:     if (slowOne)
55473:         stubcc.jumpInScript(*slowOne, target);
55473:     if (slowTwo)
55473:         stubcc.jumpInScript(*slowTwo, target);
53133: #else
53133:     if (!addTraceHints || target >= PC || JSOp(*target) != JSOP_TRACE) {
53133:         jumpInScript(j, target);
54160:         if (slowOne)
54160:             stubcc.jumpInScript(*slowOne, target);
54160:         if (slowTwo)
54160:             stubcc.jumpInScript(*slowTwo, target);
53133:         return;
53133:     }
53133: 
53133: # if JS_MONOIC
53133:     MICGenInfo mic(ic::MICInfo::TRACER);
53133: 
53133:     mic.entry = masm.label();
53133:     mic.jumpTarget = target;
53133:     mic.traceHint = j;
54160:     if (slowOne)
54160:         mic.slowTraceHintOne = *slowOne;
54160:     if (slowTwo)
54160:         mic.slowTraceHintTwo = *slowTwo;
53133: # endif
53133: 
54160:     Label traceStart = stubcc.masm.label();
54160: 
54160:     stubcc.linkExitDirect(j, traceStart);
54160:     if (slowOne)
54160:         slowOne->linkTo(traceStart, &stubcc.masm);
54160:     if (slowTwo)
54160:         slowTwo->linkTo(traceStart, &stubcc.masm);
53133: # if JS_MONOIC
55503:     passMICAddress(mic);
53133: # endif
53133: 
53133:     /* Save and restore compiler-tracked PC, so cx->regs is right in InvokeTracer. */
53133:     {
53133:         jsbytecode* pc = PC;
53133:         PC = target;
53133: 
53133:         stubcc.call(stubs::InvokeTracer);
53133: 
53133:         PC = pc;
53133:     }
53133: 
53133:     Jump no = stubcc.masm.branchTestPtr(Assembler::Zero, Registers::ReturnReg,
53133:                                         Registers::ReturnReg);
53133:     restoreFrameRegs(stubcc.masm);
53133:     stubcc.masm.jump(Registers::ReturnReg);
53133:     no.linkTo(stubcc.masm.label(), &stubcc.masm);
53133:     stubcc.jumpInScript(stubcc.masm.jump(), target);
53133: 
53133: # if JS_MONOIC
53133:     mics.append(mic);
53133: # endif
53133: #endif
53133: }
53133: 
54840: void
54840: mjit::Compiler::enterBlock(JSObject *obj)
54840: {
54840:     // If this is an exception entry point, then jsl_InternalThrow has set
54840:     // VMFrame::fp to the correct fp for the entry point. We need to copy
54840:     // that value here to FpReg so that FpReg also has the correct sp.
54840:     // Otherwise, we would simply be using a stale FpReg value.
54840:     if (analysis[PC].exceptionEntry)
54840:         restoreFrameRegs(masm);
54840: 
54840:     uint32 oldFrameDepth = frame.frameDepth();
54840: 
54840:     /* For now, don't bother doing anything for this opcode. */
54840:     frame.syncAndForgetEverything();
54840:     masm.move(ImmPtr(obj), Registers::ArgReg1);
54840:     uint32 n = js_GetEnterBlockStackDefs(cx, script, PC);
54840:     stubCall(stubs::EnterBlock);
54840:     frame.enterBlock(n);
54840: 
54840:     uintN base = JSSLOT_FREE(&js_BlockClass);
54840:     uintN count = OBJ_BLOCK_COUNT(cx, obj);
54840:     uintN limit = base + count;
54840:     for (uintN slot = base, i = 0; slot < limit; slot++, i++) {
54840:         const Value &v = obj->getSlotRef(slot);
54840:         if (v.isBoolean() && v.toBoolean())
54840:             frame.setClosedVar(oldFrameDepth + i);
54840:     }
54840: }
54840: 
54840: void
54840: mjit::Compiler::leaveBlock()
54840: {
54840:     /*
54840:      * Note: After bug 535912, we can pass the block obj directly, inline
54840:      * PutBlockObject, and do away with the muckiness in PutBlockObject.
54840:      */
54840:     uint32 n = js_GetVariableStackUses(JSOP_LEAVEBLOCK, PC);
54855:     JSObject *obj = script->getObject(fullAtomIndex(PC + UINT16_LEN));
54840:     prepareStubCall(Uses(n));
54855:     masm.move(ImmPtr(obj), Registers::ArgReg1);
54840:     stubCall(stubs::LeaveBlock);
54840:     frame.leaveBlock(n);
54840: }
54840: 
55503: // Creates the new object expected for constructors, and places it in |thisv|.
55503: // It is broken down into the following operations:
55503: //   CALLEE
55503: //   GETPROP "prototype"
55503: //   IFPRIMTOP:
55503: //       NULL
55503: //   call js_CreateThisFromFunctionWithProto(...)
55503: //
56037: bool
55503: mjit::Compiler::constructThis()
55503: {
55503:     JS_ASSERT(isConstructing);
55503: 
55503:     // Load the callee.
55503:     Address callee(JSFrameReg, JSStackFrame::offsetOfCallee(fun));
55503:     RegisterID calleeReg = frame.allocReg();
55503:     masm.loadPayload(callee, calleeReg);
55503:     frame.pushTypedPayload(JSVAL_TYPE_OBJECT, calleeReg);
55503: 
55503:     // Get callee.prototype.
56037:     if (!jsop_getprop(cx->runtime->atomState.classPrototypeAtom))
56037:         return false;
55503: 
55503:     // Reach into the proto Value and grab a register for its data.
55503:     FrameEntry *protoFe = frame.peek(-1);
55503:     RegisterID protoReg = frame.ownRegForData(protoFe);
55503: 
55503:     // Now, get the type. If it's not an object, set protoReg to NULL.
55503:     Jump isNotObject = frame.testObject(Assembler::NotEqual, protoFe);
55503:     stubcc.linkExitDirect(isNotObject, stubcc.masm.label());
55503:     stubcc.masm.move(ImmPtr(NULL), protoReg);
55503:     stubcc.crossJump(stubcc.masm.jump(), masm.label());
55503: 
55503:     // Done with the protoFe.
55503:     frame.pop();
55503: 
55503:     prepareStubCall(Uses(0));
55503:     if (protoReg != Registers::ArgReg1)
55503:         masm.move(protoReg, Registers::ArgReg1);
55503:     stubCall(stubs::CreateThis);
55503:     frame.freeReg(protoReg);
56037:     return true;
55503: }
55503: 
