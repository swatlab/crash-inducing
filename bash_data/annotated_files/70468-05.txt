    1: /* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
    1:  * vim: set ts=8 sw=4 et tw=78:
    1:  *
    1:  * ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is Mozilla Communicator client code, released
    1:  * March 31, 1998.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Netscape Communications Corporation.
    1:  * Portions created by the Initial Developer are Copyright (C) 1998
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either of the GNU General Public License Version 2 or later (the "GPL"),
    1:  * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #ifndef jsxdrapi_h___
    1: #define jsxdrapi_h___
    1: 
    1: /*
    1:  * JS external data representation interface API.
    1:  *
    1:  * The XDR system is comprised of three major parts:
    1:  *
    1:  * - the state serialization/deserialization APIs, which allow consumers
    1:  *   of the API to serialize JS runtime state (script bytecodes, atom maps,
    1:  *   object graphs, etc.) for later restoration.  These portions
    1:  *   are implemented in various appropriate files, such as jsscript.c
    1:  *   for the script portions and jsobj.c for object state.
    1:  * - the callback APIs through which the runtime requests an opaque
    1:  *   representation of a native object, and through which the runtime
    1:  *   constructs a live native object from an opaque representation. These
    1:  *   portions are the responsibility of the native object implementor.
    1:  * - utility functions for en/decoding of primitive types, such as
    1:  *   JSStrings.  This portion is implemented in jsxdrapi.c.
    1:  *
    1:  * Spiritually guided by Sun's XDR, where appropriate.
    1:  */
    1: 
64322: #include "jsatom.h"
    1: #include "jspubtd.h"
    1: #include "jsprvtd.h"
64322: #include "jsvector.h"
64322: #include "jshashtable.h"
    1: 
    1: JS_BEGIN_EXTERN_C
    1: 
    1: /* We use little-endian byteorder for all encoded data */
    1: 
    1: #if defined IS_LITTLE_ENDIAN
    1: #define JSXDR_SWAB32(x) x
    1: #define JSXDR_SWAB16(x) x
    1: #elif defined IS_BIG_ENDIAN
    1: #define JSXDR_SWAB32(x) (((uint32)(x) >> 24) |                                \
    1:                          (((uint32)(x) >> 8) & 0xff00) |                      \
    1:                          (((uint32)(x) << 8) & 0xff0000) |                    \
    1:                          ((uint32)(x) << 24))
    1: #define JSXDR_SWAB16(x) (((uint16)(x) >> 8) | ((uint16)(x) << 8))
    1: #else
    1: #error "unknown byte order"
    1: #endif
    1: 
    1: #define JSXDR_ALIGN     4
64322: #define JSXDR_MASK      (JSXDR_ALIGN - 1)
    1: 
    1: typedef enum JSXDRMode {
    1:     JSXDR_ENCODE,
64244:     JSXDR_DECODE
    1: } JSXDRMode;
    1: 
    1: typedef enum JSXDRWhence {
    1:     JSXDR_SEEK_SET,
    1:     JSXDR_SEEK_CUR,
    1:     JSXDR_SEEK_END
    1: } JSXDRWhence;
    1: 
    1: typedef struct JSXDROps {
    1:     JSBool      (*get32)(JSXDRState *, uint32 *);
    1:     JSBool      (*set32)(JSXDRState *, uint32 *);
    1:     JSBool      (*getbytes)(JSXDRState *, char *, uint32);
    1:     JSBool      (*setbytes)(JSXDRState *, char *, uint32);
    1:     void *      (*raw)(JSXDRState *, uint32);
    1:     JSBool      (*seek)(JSXDRState *, int32, JSXDRWhence);
    1:     uint32      (*tell)(JSXDRState *);
    1:     void        (*finalize)(JSXDRState *);
    1: } JSXDROps;
    1: 
64322: typedef js::Vector<JSAtom *, 1, js::SystemAllocPolicy> XDRAtoms;
64322: typedef js::HashMap<JSAtom *, uint32, js::DefaultHasher<JSAtom *>, js::SystemAllocPolicy> XDRAtomsHashMap;
64322: 
    1: struct JSXDRState {
    1:     JSXDRMode   mode;
    1:     JSXDROps    *ops;
    1:     JSContext   *cx;
    1:     JSClass     **registry;
    1:     uintN       numclasses;
    1:     uintN       maxclasses;
    1:     void        *reghash;
    1:     void        *userdata;
    1:     JSScript    *script;
70468:     XDRAtoms    *atoms;
70468:     XDRAtomsHashMap *atomsMap;
    1: };
    1: 
    1: extern JS_PUBLIC_API(void)
    1: JS_XDRInitBase(JSXDRState *xdr, JSXDRMode mode, JSContext *cx);
    1: 
    1: extern JS_PUBLIC_API(JSXDRState *)
    1: JS_XDRNewMem(JSContext *cx, JSXDRMode mode);
    1: 
    1: extern JS_PUBLIC_API(void *)
    1: JS_XDRMemGetData(JSXDRState *xdr, uint32 *lp);
    1: 
    1: extern JS_PUBLIC_API(void)
    1: JS_XDRMemSetData(JSXDRState *xdr, void *data, uint32 len);
    1: 
    1: extern JS_PUBLIC_API(uint32)
    1: JS_XDRMemDataLeft(JSXDRState *xdr);
    1: 
    1: extern JS_PUBLIC_API(void)
    1: JS_XDRMemResetData(JSXDRState *xdr);
    1: 
    1: extern JS_PUBLIC_API(void)
    1: JS_XDRDestroy(JSXDRState *xdr);
    1: 
    1: extern JS_PUBLIC_API(JSBool)
    1: JS_XDRUint8(JSXDRState *xdr, uint8 *b);
    1: 
    1: extern JS_PUBLIC_API(JSBool)
    1: JS_XDRUint16(JSXDRState *xdr, uint16 *s);
    1: 
    1: extern JS_PUBLIC_API(JSBool)
    1: JS_XDRUint32(JSXDRState *xdr, uint32 *lp);
    1: 
    1: extern JS_PUBLIC_API(JSBool)
    1: JS_XDRBytes(JSXDRState *xdr, char *bytes, uint32 len);
    1: 
    1: extern JS_PUBLIC_API(JSBool)
    1: JS_XDRCString(JSXDRState *xdr, char **sp);
    1: 
    1: extern JS_PUBLIC_API(JSBool)
    1: JS_XDRCStringOrNull(JSXDRState *xdr, char **sp);
    1: 
    1: extern JS_PUBLIC_API(JSBool)
    1: JS_XDRString(JSXDRState *xdr, JSString **strp);
    1: 
    1: extern JS_PUBLIC_API(JSBool)
    1: JS_XDRStringOrNull(JSXDRState *xdr, JSString **strp);
    1: 
    1: extern JS_PUBLIC_API(JSBool)
48470: JS_XDRDouble(JSXDRState *xdr, jsdouble *dp);
    1: 
    1: extern JS_PUBLIC_API(JSBool)
    1: JS_XDRValue(JSXDRState *xdr, jsval *vp);
    1: 
    1: extern JS_PUBLIC_API(JSBool)
64190: JS_XDRScriptObject(JSXDRState *xdr, JSObject **scriptObjp);
    1: 
    1: extern JS_PUBLIC_API(JSBool)
    1: JS_XDRRegisterClass(JSXDRState *xdr, JSClass *clasp, uint32 *lp);
    1: 
    1: extern JS_PUBLIC_API(uint32)
    1: JS_XDRFindClassIdByName(JSXDRState *xdr, const char *name);
    1: 
    1: extern JS_PUBLIC_API(JSClass *)
    1: JS_XDRFindClassById(JSXDRState *xdr, uint32 id);
    1: 
    1: /*
    1:  * Magic numbers.
    1:  */
    1: #define JSXDR_MAGIC_SCRIPT_1        0xdead0001
    1: #define JSXDR_MAGIC_SCRIPT_2        0xdead0002
    1: #define JSXDR_MAGIC_SCRIPT_3        0xdead0003
    1: #define JSXDR_MAGIC_SCRIPT_4        0xdead0004
    1: #define JSXDR_MAGIC_SCRIPT_5        0xdead0005
 3235: #define JSXDR_MAGIC_SCRIPT_6        0xdead0006
 4875: #define JSXDR_MAGIC_SCRIPT_7        0xdead0007
17182: #define JSXDR_MAGIC_SCRIPT_8        0xdead0008
18308: #define JSXDR_MAGIC_SCRIPT_9        0xdead0009
34290: #define JSXDR_MAGIC_SCRIPT_10       0xdead000a
59968: #define JSXDR_MAGIC_SCRIPT_11       0xdead000b
59968: #define JSXDR_MAGIC_SCRIPT_CURRENT  JSXDR_MAGIC_SCRIPT_11
    1: 
    1: /*
14688:  * Bytecode version number. Increment the subtrahend whenever JS bytecode
    1:  * changes incompatibly.
    1:  *
    1:  * This version number should be XDR'ed once near the front of any file or
    1:  * larger storage unit containing XDR'ed bytecode and other data, and checked
    1:  * before deserialization of bytecode.  If the saved version does not match
    1:  * the current version, abort deserialization and invalidate the file.
    1:  */
70468: #define JSXDR_BYTECODE_VERSION      (0xb973c0de - 86)
    1: 
    1: /*
    1:  * Library-private functions.
    1:  */
    1: extern JSBool
    1: js_XDRAtom(JSXDRState *xdr, JSAtom **atomp);
    1: 
    1: JS_END_EXTERN_C
    1: 
    1: #endif /* ! jsxdrapi_h___ */
