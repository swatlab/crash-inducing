    1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    1: /* ***** BEGIN LICENSE BLOCK *****
    1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
    1:  *
    1:  * The contents of this file are subject to the Mozilla Public License Version
    1:  * 1.1 (the "License"); you may not use this file except in compliance with
    1:  * the License. You may obtain a copy of the License at
    1:  * http://www.mozilla.org/MPL/
    1:  *
    1:  * Software distributed under the License is distributed on an "AS IS" basis,
    1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
    1:  * for the specific language governing rights and limitations under the
    1:  * License.
    1:  *
    1:  * The Original Code is mozilla.org code.
    1:  *
    1:  * The Initial Developer of the Original Code is
    1:  * Boris Zbarsky <bzbarsky@mit.edu>.
    1:  * Portions created by the Initial Developer are Copyright (C) 2003
    1:  * the Initial Developer. All Rights Reserved.
    1:  *
    1:  * Contributor(s):
    1:  *
    1:  * Alternatively, the contents of this file may be used under the terms of
    1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
    1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
    1:  * in which case the provisions of the GPL or the LGPL are applicable instead
    1:  * of those above. If you wish to allow use of your version of this file only
    1:  * under the terms of either the GPL or the LGPL, and not to allow others to
    1:  * use your version of this file under the terms of the MPL, indicate your
    1:  * decision by deleting the provisions above and replace them with the notice
    1:  * and other provisions required by the GPL or the LGPL. If you do not delete
    1:  * the provisions above, a recipient may use your version of this file under
    1:  * the terms of any one of the MPL, the GPL or the LGPL.
    1:  *
    1:  * ***** END LICENSE BLOCK ***** */
    1: 
    1: #include "imgIDecoderObserver.idl"
    1: 
    1: interface imgIRequest;
    1: interface nsIChannel;
    1: interface nsIStreamListener;
    1: interface nsIURI;
51587: interface nsIDocument;
    1: 
    1: /**
    1:  * This interface represents a content node that loads images.  The interface
    1:  * exists to allow getting information on the images that the content node
    1:  * loads and to allow registration of observers for the image loads.
    1:  *
    1:  * Implementors of this interface should handle all the mechanics of actually
    1:  * loading an image -- getting the URI, checking with content policies and
    1:  * the security manager to see whether loading the URI is allowed, performing
    1:  * the load, firing any DOM events as needed.
    1:  *
    1:  * An implementation of this interface may support the concepts of a
    1:  * "current" image and a "pending" image.  If it does, a request to change
    1:  * the currently loaded image will start a "pending" request which will
    1:  * become current only when the image is loaded.  It is the responsibility of
    1:  * observers to check which request they are getting notifications for.
    1:  *
    1:  * Observers added in mid-load will not get any notifications they
    1:  * missed.  We should NOT freeze this interface without considering
    1:  * this issue.  (It could be that the image status on imgIRequest is
    1:  * sufficient, when combined with the imageBlockingStatus information.)
    1:  */
    1: 
51587: [scriptable, uuid(7974082c-3267-4ab1-96fa-bd47d7e3a093)]
    1: interface nsIImageLoadingContent : imgIDecoderObserver
    1: {
    1:   /**
    1:    * Request types.  Image loading content nodes attempt to do atomic
    1:    * image changes when the image url is changed.  This means that
    1:    * when the url changes the new image load will start, but the old
    1:    * image will remain the "current" request until the new image is
    1:    * fully loaded.  At that point, the old "current" request will be
    1:    * discarded and the "pending" request will become "current".
    1:    */
    1:   const long UNKNOWN_REQUEST = -1;
    1:   const long CURRENT_REQUEST = 0;
    1:   const long PENDING_REQUEST = 1;
    1: 
    1:   /**
    1:    * loadingEnabled is used to enable and disable loading in
    1:    * situations where loading images is unwanted.  Note that enabling
    1:    * loading will *not* automatically trigger an image load.
    1:    */
    1:   attribute boolean loadingEnabled;
    1: 
    1:   /**
    1:    * Returns the image blocking status (@see nsIContentPolicy).  This
    1:    * will always be an nsIContentPolicy REJECT_* status for cases when
    1:    * the image was blocked.  This status always refers to the
    1:    * CURRENT_REQUEST load.
    1:    */
    1:   readonly attribute short imageBlockingStatus;
    1: 
    1:   /**
    1:    * Used to register an image decoder observer.  Typically, this will
    1:    * be a proxy for a frame that wants to paint the image.
    1:    * Notifications from ongoing image loads will be passed to all
    1:    * registered observers.  Notifications for all request types,
    1:    * current and pending, will be passed through.
    1:    *
    1:    * @param aObserver the observer to register
    1:    *
    1:    * @throws NS_ERROR_OUT_OF_MEMORY
    1:    */
    1:   void addObserver(in imgIDecoderObserver aObserver);
    1: 
    1:   /**
    1:    * Used to unregister an image decoder observer.
    1:    *
    1:    * @param aObserver the observer to unregister
    1:    */
    1:   void removeObserver(in imgIDecoderObserver aObserver);
    1:   
    1:   /**
    1:    * Accessor to get the image requests
    1:    *
    1:    * @param aRequestType a value saying which request is wanted
    1:    *
    1:    * @return the imgIRequest object (may be null, even when no error
    1:    * is thrown)
    1:    *
    1:    * @throws NS_ERROR_UNEXPECTED if the request type requested is not
    1:    * known
    1:    */
    1:   imgIRequest getRequest(in long aRequestType);
    1: 
    1:   /**
    1:    * Used to find out what type of request one is dealing with (eg
    1:    * which request got passed through to the imgIDecoderObserver
    1:    * interface of an observer)
    1:    *
    1:    * @param aRequest the request whose type we want to know
    1:    *
    1:    * @return an enum value saying what type this request is
    1:    *
    1:    * @throws NS_ERROR_UNEXPECTED if aRequest is not known
    1:    */
    1:   long getRequestType(in imgIRequest aRequest);
    1: 
    1:   /**
    1:    * Gets the URI of the current request, if available.
    1:    * Otherwise, returns the last URI that this content tried to load, or
    1:    * null if there haven't been any such attempts.
    1:    */
    1:   readonly attribute nsIURI currentURI;
    1: 
    1:   /**
    1:    * loadImageWithChannel allows data from an existing channel to be
    1:    * used as the image data for this content node.
    1:    *
    1:    * @param aChannel the channel that will deliver the data
    1:    *
    1:    * @return a stream listener to pump the image data into
    1:    *
    1:    * @see imgILoader::loadImageWithChannel
    1:    *
    1:    * @throws NS_ERROR_NULL_POINTER if aChannel is null
    1:    */
    1:   nsIStreamListener loadImageWithChannel(in nsIChannel aChannel);
    1: 
    1:   /**
    1:    * forceReload forces reloading of the image pointed to by currentURI
    1:    *
    1:    * @throws NS_ERROR_NOT_AVAILABLE if there is no current URI to reload
    1:    */
    1:   void forceReload();
29590: 
29590:   /**
29590:    * Enables/disables image state forcing. When |aForce| is PR_TRUE, we force
29590:    * nsImageLoadingContent::ImageState() to return |aState|. Call again with |aForce|
29590:    * as PR_FALSE to revert ImageState() to its original behaviour.
29590:    */
29590:   void forceImageState(in boolean aForce, in long aState);
29590: 
51587:   /**
51587:     * We need to be notified when our document changes.
51587:     */
51587:   [noscript, notxpcom] void NotifyOwnerDocumentChanged(in nsIDocument aOldDoc);
    1: };
