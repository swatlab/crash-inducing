43113: /* vim:set ts=2 sw=2 sts=2 et cin: */
43113: /* ***** BEGIN LICENSE BLOCK *****
43113:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
43113:  *
43113:  * The contents of this file are subject to the Mozilla Public License Version
43113:  * 1.1 (the "License"); you may not use this file except in compliance with
43113:  * the License. You may obtain a copy of the License at
43113:  * http://www.mozilla.org/MPL/
43113:  *
43113:  * Software distributed under the License is distributed on an "AS IS" basis,
43113:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
43113:  * for the specific language governing rights and limitations under the
43113:  * License.
43113:  *
43113:  * The Original Code is Mozilla.
43113:  *
43113:  * The Initial Developer of the Original Code is IBM Corporation.
43113:  * Portions created by IBM Corporation are Copyright (C) 2004
43113:  * IBM Corporation. All Rights Reserved.
43113:  *
43113:  * Contributor(s):
43113:  *   Darin Fisher <darin@meer.net>
43113:  *
43113:  * Alternatively, the contents of this file may be used under the terms of
43113:  * either the GNU General Public License Version 2 or later (the "GPL"), or
43113:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
43113:  * in which case the provisions of the GPL or the LGPL are applicable instead
43113:  * of those above. If you wish to allow use of your version of this file only
43113:  * under the terms of either the GPL or the LGPL, and not to allow others to
43113:  * use your version of this file under the terms of the MPL, indicate your
43113:  * decision by deleting the provisions above and replace them with the notice
43113:  * and other provisions required by the GPL or the LGPL. If you do not delete
43113:  * the provisions above, a recipient may use your version of this file under
43113:  * the terms of any one of the MPL, the GPL or the LGPL.
43113:  *
43113:  * ***** END LICENSE BLOCK ***** */
43113: 
43113: #ifndef nsOfflineCacheDevice_h__
43113: #define nsOfflineCacheDevice_h__
43113: 
43113: #include "nsCacheDevice.h"
43113: #include "nsIApplicationCache.h"
43113: #include "nsIApplicationCacheService.h"
43113: #include "nsILocalFile.h"
43113: #include "nsIObserver.h"
43113: #include "mozIStorageConnection.h"
43113: #include "mozIStorageFunction.h"
43113: #include "nsIFile.h"
43113: #include "nsAutoPtr.h"
43113: #include "nsCOMPtr.h"
43113: #include "nsCOMArray.h"
43113: #include "nsInterfaceHashtable.h"
43113: #include "nsClassHashtable.h"
43113: #include "nsWeakReference.h"
43113: 
43113: class nsIURI;
43113: class nsOfflineCacheDevice;
43113: 
43113: class nsApplicationCacheNamespace : public nsIApplicationCacheNamespace
43113: {
43113: public:
43113:   NS_DECL_ISUPPORTS
43113:   NS_DECL_NSIAPPLICATIONCACHENAMESPACE
43113: 
43113:   nsApplicationCacheNamespace() : mItemType(0) {}
43113: 
43113: private:
43113:   PRUint32 mItemType;
43113:   nsCString mNamespaceSpec;
43113:   nsCString mData;
43113: };
43113: 
43113: class nsOfflineCacheEvictionFunction : public mozIStorageFunction {
43113: public:
43113:   NS_DECL_ISUPPORTS
43113:   NS_DECL_MOZISTORAGEFUNCTION
43113: 
43113:   nsOfflineCacheEvictionFunction(nsOfflineCacheDevice *device)
43113:     : mDevice(device)
43113:   {}
43113: 
43113:   void Reset() { mItems.Clear(); }
43113:   void Apply();
43113: 
43113: private:
43113:   nsOfflineCacheDevice *mDevice;
43113:   nsCOMArray<nsIFile> mItems;
43113: 
43113: };
43113: 
43113: class nsOfflineCacheDevice : public nsCacheDevice
96032:                            , public nsISupports
43113: {
43113: public:
43113:   nsOfflineCacheDevice();
43113: 
43113:   NS_DECL_ISUPPORTS
43113: 
43113:   /**
43113:    * nsCacheDevice methods
43113:    */
43113: 
43113:   virtual nsresult        Init();
43113:   virtual nsresult        Shutdown();
43113: 
43113:   virtual const char *    GetDeviceID(void);
79445:   virtual nsCacheEntry *  FindEntry(nsCString * key, bool *collision);
43113:   virtual nsresult        DeactivateEntry(nsCacheEntry * entry);
43113:   virtual nsresult        BindEntry(nsCacheEntry * entry);
43113:   virtual void            DoomEntry( nsCacheEntry * entry );
43113: 
43113:   virtual nsresult OpenInputStreamForEntry(nsCacheEntry *    entry,
43113:                                            nsCacheAccessMode mode,
43113:                                            PRUint32          offset,
43113:                                            nsIInputStream ** result);
43113: 
43113:   virtual nsresult OpenOutputStreamForEntry(nsCacheEntry *     entry,
43113:                                             nsCacheAccessMode  mode,
43113:                                             PRUint32           offset,
43113:                                             nsIOutputStream ** result);
43113: 
43113:   virtual nsresult        GetFileForEntry(nsCacheEntry *    entry,
43113:                                           nsIFile **        result);
43113: 
43113:   virtual nsresult        OnDataSizeChange(nsCacheEntry * entry, PRInt32 deltaSize);
43113:   
43113:   virtual nsresult        Visit(nsICacheVisitor * visitor);
43113: 
43113:   virtual nsresult        EvictEntries(const char * clientID);
43113: 
43113:   /* Entry ownership */
43113:   nsresult                GetOwnerDomains(const char *        clientID,
43113:                                           PRUint32 *          count,
43113:                                           char ***            domains);
43113:   nsresult                GetOwnerURIs(const char *           clientID,
43113:                                        const nsACString &     ownerDomain,
43113:                                        PRUint32 *             count,
43113:                                        char ***               uris);
43113:   nsresult                SetOwnedKeys(const char *           clientID,
43113:                                        const nsACString &     ownerDomain,
43113:                                        const nsACString &     ownerUrl,
43113:                                        PRUint32               count,
43113:                                        const char **          keys);
43113:   nsresult                GetOwnedKeys(const char *           clientID,
43113:                                        const nsACString &     ownerDomain,
43113:                                        const nsACString &     ownerUrl,
43113:                                        PRUint32 *             count,
43113:                                        char ***               keys);
43113:   nsresult                AddOwnedKey(const char *            clientID,
43113:                                       const nsACString &      ownerDomain,
43113:                                       const nsACString &      ownerURI,
43113:                                       const nsACString &      key);
43113:   nsresult                RemoveOwnedKey(const char *         clientID,
43113:                                          const nsACString &   ownerDomain,
43113:                                          const nsACString &   ownerURI,
43113:                                          const nsACString &   key);
43113:   nsresult                KeyIsOwned(const char *             clientID,
43113:                                      const nsACString &       ownerDomain,
43113:                                      const nsACString &       ownerURI,
43113:                                      const nsACString &       key,
79445:                                      bool *                 isOwned);
43113: 
43113:   nsresult                ClearKeysOwnedByDomain(const char *clientID,
43113:                                                  const nsACString &ownerDomain);
43113:   nsresult                EvictUnownedEntries(const char *clientID);
43113: 
43113:   nsresult                ActivateCache(const nsCSubstring &group,
43113:                                         const nsCSubstring &clientID);
79445:   bool                    IsActiveCache(const nsCSubstring &group,
43113:                                         const nsCSubstring &clientID);
43113:   nsresult                GetGroupForCache(const nsCSubstring &clientID,
43113:                                            nsCString &out);
43113: 
96032:   nsresult                CreateApplicationCache(const nsACString &group,
96032:                                                  nsIApplicationCache **out);
96032: 
96032:   nsresult                GetApplicationCache(const nsACString &clientID,
96032:                                               nsIApplicationCache **out);
96032: 
96032:   nsresult                GetActiveCache(const nsACString &group,
96032:                                          nsIApplicationCache **out);
96032: 
96032:   nsresult                DeactivateGroup(const nsACString &group);
96032: 
96032:   nsresult                ChooseApplicationCache(const nsACString &key,
96032:                                                  nsIApplicationCache **out);
96032: 
96032:   nsresult                CacheOpportunistically(nsIApplicationCache* cache,
96032:                                                  const nsACString &key);
96032: 
96032:   nsresult                GetGroups(PRUint32 *count,char ***keys);
96032: 
96032:   nsresult                GetGroupsTimeOrdered(PRUint32 *count,
96032:                                                char ***keys);
96032: 
43113:   /**
43113:    * Preference accessors
43113:    */
43113: 
43113:   void                    SetCacheParentDirectory(nsILocalFile * parentDir);
43113:   void                    SetCapacity(PRUint32  capacity);
43113: 
43113:   nsILocalFile *          CacheDirectory() { return mCacheDirectory; }
43113:   PRUint32                CacheCapacity() { return mCacheCapacity; }
43113:   PRUint32                CacheSize();
43113:   PRUint32                EntryCount();
43113:   
43113: private:
43113:   friend class nsApplicationCache;
43113: 
43113:   static PLDHashOperator ShutdownApplicationCache(const nsACString &key,
43113:                                                   nsIWeakReference *weakRef,
43113:                                                   void *ctx);
43113: 
79445:   static bool GetStrictFileOriginPolicy();
43113: 
79445:   bool     Initialized() { return mDB != nsnull; }
43113: 
43113:   nsresult InitActiveCaches();
43113:   nsresult UpdateEntry(nsCacheEntry *entry);
43113:   nsresult UpdateEntrySize(nsCacheEntry *entry, PRUint32 newSize);
79445:   nsresult DeleteEntry(nsCacheEntry *entry, bool deleteData);
43113:   nsresult DeleteData(nsCacheEntry *entry);
43113:   nsresult EnableEvictionObserver();
43113:   nsresult DisableEvictionObserver();
43113: 
79445:   bool CanUseCache(nsIURI *keyURI, const nsCString &clientID);
43113: 
43113:   nsresult MarkEntry(const nsCString &clientID,
43113:                      const nsACString &key,
43113:                      PRUint32 typeBits);
43113:   nsresult UnmarkEntry(const nsCString &clientID,
43113:                        const nsACString &key,
43113:                        PRUint32 typeBits);
43113: 
43113:   nsresult CacheOpportunistically(const nsCString &clientID,
43113:                                   const nsACString &key);
43113:   nsresult GetTypes(const nsCString &clientID,
43113:                     const nsACString &key,
43113:                     PRUint32 *typeBits);
43113: 
43113:   nsresult GetMatchingNamespace(const nsCString &clientID,
43113:                                 const nsACString &key,
43113:                                 nsIApplicationCacheNamespace **out);
43113:   nsresult GatherEntries(const nsCString &clientID,
43113:                          PRUint32 typeBits,
43113:                          PRUint32 *count,
43113:                          char *** values);
43113:   nsresult AddNamespace(const nsCString &clientID,
43113:                         nsIApplicationCacheNamespace *ns);
43113: 
43113:   nsresult GetUsage(const nsACString &clientID,
43113:                     PRUint32 *usage);
43113: 
43113:   nsresult RunSimpleQuery(mozIStorageStatement *statment,
43113:                           PRUint32 resultIndex,
43113:                           PRUint32 * count,
43113:                           char *** values);
43113: 
43113:   nsCOMPtr<mozIStorageConnection>          mDB;
43113:   nsRefPtr<nsOfflineCacheEvictionFunction> mEvictionFunction;
43113: 
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_CacheSize;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_ApplicationCacheSize;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_EntryCount;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_UpdateEntry;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_UpdateEntrySize;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_UpdateEntryFlags;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_DeleteEntry;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_FindEntry;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_BindEntry;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_ClearDomain;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_MarkEntry;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_UnmarkEntry;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_GetTypes;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_FindNamespaceEntry;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_InsertNamespaceEntry;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_CleanupUnmarked;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_GatherEntries;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_ActivateClient;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_DeactivateGroup;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_FindClient;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_FindClientByNamespace;
43113:   nsCOMPtr<mozIStorageStatement>  mStatement_EnumerateGroups;
94502:   nsCOMPtr<mozIStorageStatement>  mStatement_EnumerateGroupsTimeOrder;
43113: 
43113:   nsCOMPtr<nsILocalFile>          mCacheDirectory;
43113:   PRUint32                        mCacheCapacity; // in bytes
43113:   PRInt32                         mDeltaCounter;
43113: 
43113:   nsInterfaceHashtable<nsCStringHashKey, nsIWeakReference> mCaches;
43113:   nsClassHashtable<nsCStringHashKey, nsCString> mActiveCachesByGroup;
91014:   nsTHashtable<nsCStringHashKey> mActiveCaches;
51302: 
51302:   nsCOMPtr<nsIThread> mInitThread;
43113: };
43113: 
43113: #endif // nsOfflineCacheDevice_h__
