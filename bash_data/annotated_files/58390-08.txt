43113: /* vim:set ts=4 sw=4 sts=4 et cin: */
43113: /* ***** BEGIN LICENSE BLOCK *****
43113:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
43113:  *
43113:  * The contents of this file are subject to the Mozilla Public License Version
43113:  * 1.1 (the "License"); you may not use this file except in compliance with
43113:  * the License. You may obtain a copy of the License at
43113:  * http://www.mozilla.org/MPL/
43113:  *
43113:  * Software distributed under the License is distributed on an "AS IS" basis,
43113:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
43113:  * for the specific language governing rights and limitations under the
43113:  * License.
43113:  *
43113:  * The Original Code is Mozilla.
43113:  *
43113:  * The Initial Developer of the Original Code is
43113:  * Netscape Communications Corporation.
43113:  * Portions created by the Initial Developer are Copyright (C) 2002
43113:  * the Initial Developer. All Rights Reserved.
43113:  *
43113:  * Contributor(s):
43113:  *   Darin Fisher <darin@netscape.com>
43113:  *
43113:  * Alternatively, the contents of this file may be used under the terms of
43113:  * either the GNU General Public License Version 2 or later (the "GPL"), or
43113:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
43113:  * in which case the provisions of the GPL or the LGPL are applicable instead
43113:  * of those above. If you wish to allow use of your version of this file only
43113:  * under the terms of either the GPL or the LGPL, and not to allow others to
43113:  * use your version of this file under the terms of the MPL, indicate your
43113:  * decision by deleting the provisions above and replace them with the notice
43113:  * and other provisions required by the GPL or the LGPL. If you do not delete
43113:  * the provisions above, a recipient may use your version of this file under
43113:  * the terms of any one of the MPL, the GPL or the LGPL.
43113:  *
43113:  * ***** END LICENSE BLOCK ***** */
43113: 
43113: #ifndef nsHttpConnectionMgr_h__
43113: #define nsHttpConnectionMgr_h__
43113: 
43113: #include "nsHttpConnectionInfo.h"
43113: #include "nsHttpConnection.h"
43113: #include "nsHttpTransaction.h"
43113: #include "nsTArray.h"
43113: #include "nsThreadUtils.h"
43113: #include "nsHashtable.h"
43113: #include "nsAutoPtr.h"
43113: #include "prmon.h"
43113: 
55822: #include "nsIObserver.h"
55822: #include "nsITimer.h"
55822: 
43113: class nsHttpPipeline;
43113: 
43113: //-----------------------------------------------------------------------------
43113: 
55822: class nsHttpConnectionMgr : public nsIObserver
43113: {
43113: public:
55822:     NS_DECL_ISUPPORTS
55822:     NS_DECL_NSIOBSERVER
43113: 
43113:     // parameter names
43113:     enum nsParamName {
43113:         MAX_CONNECTIONS,
43113:         MAX_CONNECTIONS_PER_HOST,
43113:         MAX_CONNECTIONS_PER_PROXY,
43113:         MAX_PERSISTENT_CONNECTIONS_PER_HOST,
43113:         MAX_PERSISTENT_CONNECTIONS_PER_PROXY,
43113:         MAX_REQUEST_DELAY,
43113:         MAX_PIPELINED_REQUESTS
43113:     };
43113: 
43113:     //-------------------------------------------------------------------------
43113:     // NOTE: functions below may only be called on the main thread.
43113:     //-------------------------------------------------------------------------
43113: 
43113:     nsHttpConnectionMgr();
43113: 
43113:     nsresult Init(PRUint16 maxConnections,
43113:                   PRUint16 maxConnectionsPerHost,
43113:                   PRUint16 maxConnectionsPerProxy,
43113:                   PRUint16 maxPersistentConnectionsPerHost,
43113:                   PRUint16 maxPersistentConnectionsPerProxy,
43113:                   PRUint16 maxRequestDelay,
43113:                   PRUint16 maxPipelinedRequests);
43113:     nsresult Shutdown();
43113: 
43113:     //-------------------------------------------------------------------------
43113:     // NOTE: functions below may be called on any thread.
43113:     //-------------------------------------------------------------------------
43113: 
55822:     // Schedules next pruning of dead connection to happen after
55822:     // given time.
55822:     void PruneDeadConnectionsAfter(PRUint32 time);
43113: 
55822:     // Stops timer scheduled for next pruning of dead connections.
55822:     void StopPruneDeadConnectionsTimer();
43113: 
43113:     // adds a transaction to the list of managed transactions.
43113:     nsresult AddTransaction(nsHttpTransaction *, PRInt32 priority);
43113: 
43113:     // called to reschedule the given transaction.  it must already have been
43113:     // added to the connection manager via AddTransaction.
43113:     nsresult RescheduleTransaction(nsHttpTransaction *, PRInt32 priority);
43113: 
43113:     // cancels a transaction w/ the given reason.
43113:     nsresult CancelTransaction(nsHttpTransaction *, nsresult reason);
43113: 
43113:     // called to force the connection manager to prune its list of idle
43113:     // connections.
43113:     nsresult PruneDeadConnections();
43113: 
43113:     // called to get a reference to the socket transport service.  the socket
43113:     // transport service is not available when the connection manager is down.
43113:     nsresult GetSocketThreadTarget(nsIEventTarget **);
43113: 
43113:     // called when a connection is done processing a transaction.  if the 
43113:     // connection can be reused then it will be added to the idle list, else
43113:     // it will be closed.
43113:     nsresult ReclaimConnection(nsHttpConnection *conn);
43113: 
43113:     // called to update a parameter after the connection manager has already
43113:     // been initialized.
43113:     nsresult UpdateParam(nsParamName name, PRUint16 value);
43113: 
43113:     //-------------------------------------------------------------------------
43113:     // NOTE: functions below may be called only on the socket thread.
43113:     //-------------------------------------------------------------------------
43113: 
43113:     // removes the next transaction for the specified connection from the
43113:     // pending transaction queue.
43113:     void AddTransactionToPipeline(nsHttpPipeline *);
43113: 
43113:     // called to force the transaction queue to be processed once more, giving
43113:     // preference to the specified connection.
43113:     nsresult ProcessPendingQ(nsHttpConnectionInfo *);
43113: 
43113: private:
43113:     virtual ~nsHttpConnectionMgr();
43113: 
43113:     // nsConnectionEntry
43113:     //
43113:     // mCT maps connection info hash key to nsConnectionEntry object, which
43113:     // contains list of active and idle connections as well as the list of
43113:     // pending transactions.
43113:     //
43113:     struct nsConnectionEntry
43113:     {
43113:         nsConnectionEntry(nsHttpConnectionInfo *ci)
43113:             : mConnInfo(ci)
43113:         {
43113:             NS_ADDREF(mConnInfo);
43113:         }
43113:        ~nsConnectionEntry() { NS_RELEASE(mConnInfo); }
43113: 
43113:         nsHttpConnectionInfo        *mConnInfo;
43113:         nsTArray<nsHttpTransaction*> mPendingQ;    // pending transaction queue
43113:         nsTArray<nsHttpConnection*>  mActiveConns; // active connections
43113:         nsTArray<nsHttpConnection*>  mIdleConns;   // idle persistent connections
43113:     };
43113: 
43113:     // nsConnectionHandle
43113:     //
43113:     // thin wrapper around a real connection, used to keep track of references
43113:     // to the connection to determine when the connection may be reused.  the
43113:     // transaction (or pipeline) owns a reference to this handle.  this extra
43113:     // layer of indirection greatly simplifies consumer code, avoiding the
43113:     // need for consumer code to know when to give the connection back to the
43113:     // connection manager.
43113:     //
43113:     class nsConnectionHandle : public nsAHttpConnection
43113:     {
43113:     public:
43113:         NS_DECL_ISUPPORTS
43113:         NS_DECL_NSAHTTPCONNECTION
43113: 
43113:         nsConnectionHandle(nsHttpConnection *conn) { NS_ADDREF(mConn = conn); }
43113:         virtual ~nsConnectionHandle();
43113: 
43113:         nsHttpConnection *mConn;
43113:     };
43113: 
43113:     //-------------------------------------------------------------------------
43113:     // NOTE: these members may be accessed from any thread (use mMonitor)
43113:     //-------------------------------------------------------------------------
43113: 
43113:     PRInt32                      mRef;
43113:     PRMonitor                   *mMonitor;
43113:     nsCOMPtr<nsIEventTarget>     mSocketThreadTarget;
43113: 
43113:     // connection limits
43113:     PRUint16 mMaxConns;
43113:     PRUint16 mMaxConnsPerHost;
43113:     PRUint16 mMaxConnsPerProxy;
43113:     PRUint16 mMaxPersistConnsPerHost;
43113:     PRUint16 mMaxPersistConnsPerProxy;
43113:     PRUint16 mMaxRequestDelay; // in seconds
43113:     PRUint16 mMaxPipelinedRequests;
43113: 
43113:     //-------------------------------------------------------------------------
43113:     // NOTE: these members are only accessed on the socket transport thread
43113:     //-------------------------------------------------------------------------
43113: 
43113:     static PRIntn ProcessOneTransactionCB(nsHashKey *, void *, void *);
57969: 
43113:     static PRIntn PruneDeadConnectionsCB(nsHashKey *, void *, void *);
43113:     static PRIntn ShutdownPassCB(nsHashKey *, void *, void *);
57969:     static PRIntn PurgeExcessIdleConnectionsCB(nsHashKey *, void *, void *);
43113:     PRBool   ProcessPendingQForEntry(nsConnectionEntry *);
43113:     PRBool   AtActiveConnectionLimit(nsConnectionEntry *, PRUint8 caps);
43113:     void     GetConnection(nsConnectionEntry *, PRUint8 caps, nsHttpConnection **);
43113:     nsresult DispatchTransaction(nsConnectionEntry *, nsAHttpTransaction *,
43113:                                  PRUint8 caps, nsHttpConnection *);
43113:     PRBool   BuildPipeline(nsConnectionEntry *, nsAHttpTransaction *, nsHttpPipeline **);
43113:     nsresult ProcessNewTransaction(nsHttpTransaction *);
43113: 
43113:     // message handlers have this signature
43113:     typedef void (nsHttpConnectionMgr:: *nsConnEventHandler)(PRInt32, void *);
43113: 
43113:     // nsConnEvent
43113:     //
43113:     // subclass of nsRunnable used to marshall events to the socket transport
43113:     // thread.  this class is used to implement PostEvent.
43113:     //
43113:     class nsConnEvent;
43113:     friend class nsConnEvent;
43113:     class nsConnEvent : public nsRunnable
43113:     {
43113:     public:
43113:         nsConnEvent(nsHttpConnectionMgr *mgr,
43113:                     nsConnEventHandler handler,
43113:                     PRInt32 iparam,
43113:                     void *vparam)
43113:             : mMgr(mgr)
43113:             , mHandler(handler)
43113:             , mIParam(iparam)
43113:             , mVParam(vparam)
43113:         {
43113:             NS_ADDREF(mMgr);
43113:         }
43113: 
43113:         NS_IMETHOD Run()
43113:         {
43113:             (mMgr->*mHandler)(mIParam, mVParam);
43113:             return NS_OK;
43113:         }
43113: 
43113:     private:
43113:         virtual ~nsConnEvent()
43113:         {
43113:             NS_RELEASE(mMgr);
43113:         }
43113: 
43113:         nsHttpConnectionMgr *mMgr;
43113:         nsConnEventHandler   mHandler;
43113:         PRInt32              mIParam;
43113:         void                *mVParam;
43113:     };
43113: 
43113:     nsresult PostEvent(nsConnEventHandler  handler,
43113:                        PRInt32             iparam = 0,
43113:                        void               *vparam = nsnull);
43113: 
43113:     // message handlers
43113:     void OnMsgShutdown             (PRInt32, void *);
43113:     void OnMsgNewTransaction       (PRInt32, void *);
43113:     void OnMsgReschedTransaction   (PRInt32, void *);
43113:     void OnMsgCancelTransaction    (PRInt32, void *);
43113:     void OnMsgProcessPendingQ      (PRInt32, void *);
43113:     void OnMsgPruneDeadConnections (PRInt32, void *);
43113:     void OnMsgReclaimConnection    (PRInt32, void *);
43113:     void OnMsgUpdateParam          (PRInt32, void *);
43113: 
55822:     // Total number of active connections in all of the ConnectionEntry objects
55822:     // that are accessed from mCT connection table.
43113:     PRUint16 mNumActiveConns;
55822:     // Total number of idle connections in all of the ConnectionEntry objects
55822:     // that are accessed from mCT connection table.
43113:     PRUint16 mNumIdleConns;
43113: 
55822:     // Holds time in seconds for next wake-up to prune dead connections. 
55822:     PRUint64 mTimeOfNextWakeUp;
55822:     // Timer for next pruning of dead connections.
55822:     nsCOMPtr<nsITimer> mTimer;
55822: 
43113:     //
43113:     // the connection table
43113:     //
43113:     // this table is indexed by connection key.  each entry is a
43113:     // ConnectionEntry object.
43113:     //
43113:     nsHashtable mCT;
43113: };
43113: 
43113: #endif // !nsHttpConnectionMgr_h__
