58092: /* -*- Mode: C++; c-basic-offset: 2; indent-tabs-mode: nil; tab-width: 8 -*- */
58092: /* vim: set sw=4 ts=8 et tw=80 ft=cpp : */
98983: /* This Source Code Form is subject to the terms of the Mozilla Public
98983:  * License, v. 2.0. If a copy of the MPL was not distributed with this
98983:  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
58092: 
58092: #ifndef mozilla_dom_StorageChild_h
58092: #define mozilla_dom_StorageChild_h
58092: 
58092: #include "mozilla/dom/PStorageChild.h"
58092: #include "nsDOMStorage.h"
58092: #include "nsCycleCollectionParticipant.h"
58092: 
58092: namespace mozilla {
58092: namespace dom {
58092: 
58092: class StorageChild : public PStorageChild
58092:                    , public DOMStorageBase
58092: {
58092: public:
99466:   NS_DECL_CYCLE_COLLECTION_CLASS(StorageChild)
58092:   NS_DECL_CYCLE_COLLECTING_ISUPPORTS
58092:   
58092:   StorageChild(nsDOMStorage* aOwner);
58092:   StorageChild(nsDOMStorage* aOwner, StorageChild& aOther);
58092: 
99466:   virtual void InitAsSessionStorage(nsIURI* aDomainURI);
99466:   virtual void InitAsLocalStorage(nsIURI* aDomainURI, bool aCanUseChromePersist);
58092: 
58092:   virtual bool CacheStoragePermissions();
58092:   
58092:   virtual nsTArray<nsString>* GetKeys(bool aCallerSecure);
58092:   virtual nsresult GetLength(bool aCallerSecure, PRUint32* aLength);
58092:   virtual nsresult GetKey(bool aCallerSecure, PRUint32 aIndex, nsAString& aKey);
58092:   virtual nsIDOMStorageItem* GetValue(bool aCallerSecure, const nsAString& aKey,
58092:                                       nsresult* rv);
58092:   virtual nsresult SetValue(bool aCallerSecure, const nsAString& aKey,
58092:                             const nsAString& aData, nsAString& aOldValue);
58092:   virtual nsresult RemoveValue(bool aCallerSecure, const nsAString& aKey,
58092:                                nsAString& aOldValue);
58092:   virtual nsresult Clear(bool aCallerSecure, PRInt32* aOldCount);
58092: 
58092:   virtual bool CanUseChromePersist();
58092: 
58092:   virtual nsresult GetDBValue(const nsAString& aKey,
58092:                               nsAString& aValue,
79445:                               bool* aSecure);
58092:   virtual nsresult SetDBValue(const nsAString& aKey,
58092:                               const nsAString& aValue,
79445:                               bool aSecure);
79445:   virtual nsresult SetSecure(const nsAString& aKey, bool aSecure);
58092: 
58092:   virtual nsresult CloneFrom(bool aCallerSecure, DOMStorageBase* aThat);
58092: 
58092:   void AddIPDLReference();
58092:   void ReleaseIPDLReference();
58092: 
58092: private:
58092:   void InitRemote();
58092: 
58092:   // Unimplemented
58092:   StorageChild(const StorageChild&);
58092: 
58092:   nsCOMPtr<nsIDOMStorageObsolete> mStorage;
58092:   bool mIPCOpen;
58092: };
58092: 
58092: }
58092: }
58092: 
58092: #endif
