105949: <?xml version="1.0"?>
105949: <?xml-stylesheet href="chrome://global/skin" type="text/css"?>
105949: <?xml-stylesheet href="chrome://mochikit/content/tests/SimpleTest/test.css"
105949:                  type="text/css"?>
105949: <window title="Mozilla Bug 761723"
105949:   xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
105949:   <script type="application/javascript"
105949:           src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
105949: 
105949:   <!-- test results are displayed in the html:body -->
105949:   <body xmlns="http://www.w3.org/1999/xhtml">
105949:   <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=761723" target="_blank">Mozilla Bug 761723</a>
105949:   </body>
105949: 
105949:   <!-- test code goes here -->
105949:   <script type="application/javascript" src="outoflinexulscript.js"></script>
105949:   <script type="application/javascript"><![CDATA[
105949: const Cu = Components.utils;
106256: const Cc = Components.classes;
106256: const Ci = Components.interfaces;
105949: Cu.import("resource://gre/modules/NetUtil.jsm");
106075: Cu.import("resource://gre/modules/Services.jsm");
105949: 
105949: function inlinefunction() {
105949:          return 42;
105949: }
105949: 
106069: var src;
106069: src = inlinefunction.toSource();
106069: isnot(src.indexOf("return 42"), -1, "inline XUL script should have source");
106069: is(src.charAt(src.length - 1), "}", "inline XUL source should end with '}'");
106069: src = outoflinefunction.toSource();
106069: isnot(src.indexOf("return 42"), -1, "out of line XUL script should have source")
106069: is(src.charAt(src.length - 1), "}", "out of line XUL source should end with '}'");
106075: src = NetUtil.asyncFetch.toSource();
106069: isnot(src.indexOf("return"), -1, "JSM should have source");
106075: var ns = {};
106075: Services.scriptloader.loadSubScript("resource://gre/modules/NetUtil.jsm", ns);
106075: src = ns.NetUtil.asyncFetch.toSource();
106075: isnot(src.indexOf("return"), -1, "subscript should have source");
106256: 
106256: var base = /.*\//.exec(window.location.href)[0];
106256: var reg = Cc["@mozilla.org/chrome/chrome-registry;1"].getService(Ci.nsIChromeRegistry);
106256: var resolvedBase = reg.convertChromeURL(NetUtil.newURI(base)).spec;
110383: 
106256: ns = {};
106256: Services.scriptloader.loadSubScript(resolvedBase + "subscript.js", ns);
106256: src = ns.NetUtil.asyncFetch.toSource();
106256: isnot(src.indexOf("return"), -1, "subscript of a subscript should have source");
110383: 
110383: ns = {};
110383: Services.scriptloader.loadSubScript(resolvedBase + "utf8_subscript.js", ns, "UTF-8");
110383: src = ns.f.toSource();
110383: isnot(src.indexOf("return 42;"), -1, "encoded subscript should have correct source");
105949:   ]]></script>
105949: </window>
