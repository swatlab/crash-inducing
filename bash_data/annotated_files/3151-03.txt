   1: /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
   1: /* ***** BEGIN LICENSE BLOCK *****
   1:  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
   1:  *
   1:  * The contents of this file are subject to the Mozilla Public License Version
   1:  * 1.1 (the "License"); you may not use this file except in compliance with
   1:  * the License. You may obtain a copy of the License at
   1:  * http://www.mozilla.org/MPL/
   1:  *
   1:  * Software distributed under the License is distributed on an "AS IS" basis,
   1:  * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   1:  * for the specific language governing rights and limitations under the
   1:  * License.
   1:  *
   1:  * The Original Code is mozilla.org code.
   1:  *
   1:  * The Initial Developer of the Original Code is
   1:  * Sun Microsystems, Inc.
   1:  * Portions created by the Initial Developer are Copyright (C) 2002
   1:  * the Initial Developer. All Rights Reserved.
   1:  *
   1:  * Contributor(s):
   1:  *   Pete Zha (pete.zha@sun.com)
   1:  *   Kyle Yuan (kyle.yuan@sun.com)
   1:  *
   1:  * Alternatively, the contents of this file may be used under the terms of
   1:  * either the GNU General Public License Version 2 or later (the "GPL"), or
   1:  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   1:  * in which case the provisions of the GPL or the LGPL are applicable instead
   1:  * of those above. If you wish to allow use of your version of this file only
   1:  * under the terms of either the GPL or the LGPL, and not to allow others to
   1:  * use your version of this file under the terms of the MPL, indicate your
   1:  * decision by deleting the provisions above and replace them with the notice
   1:  * and other provisions required by the GPL or the LGPL. If you do not delete
   1:  * the provisions above, a recipient may use your version of this file under
   1:  * the terms of any one of the MPL, the GPL or the LGPL.
   1:  *
   1:  * ***** END LICENSE BLOCK ***** */
   1: 
   1: #include "nsIDOMElement.h"
   1: #include "nsITreeSelection.h"
   1: #include "nsITreeColumns.h"
   1: #include "nsXULTreeAccessibleWrap.h"
   1: 
   1: // --------------------------------------------------------
   1: // nsXULTreeAccessibleWrap Accessible
   1: // --------------------------------------------------------
   1: NS_IMPL_ISUPPORTS_INHERITED1(nsXULTreeAccessibleWrap, nsXULTreeAccessible, nsIAccessibleTable)
   1: 
   1: nsXULTreeAccessibleWrap::nsXULTreeAccessibleWrap(nsIDOMNode *aDOMNode, nsIWeakReference *aShell):
   1: nsXULTreeAccessible(aDOMNode, aShell)
   1: {
   1: }
   1: 
   1: // tree's children count is row count * col count + treecols count
   1: // override "children count = row count + treecols count" defined in
   1: // nsXULTreeAccessible
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::GetChildCount(PRInt32 *aAccChildCount)
   1: {
   1:   NS_ENSURE_TRUE(mTree && mTreeView, NS_ERROR_FAILURE);
   1: 
   1:   // get treecols count, which is cached by nsAccessibleTreeWalker
   1:   // by going through DOM structure of XUL tree
   1:   nsAccessible::GetChildCount(aAccChildCount);
   1: 
1632:   if (*aAccChildCount != 0 && *aAccChildCount != eChildCountUninitialized) {
   1:     // add the count of table cell (or tree item) accessibles, which are
   1:     // created and appended by XUL tree accessible implementation
   1:     PRInt32 rowCount, colCount = 1;
   1:     mTreeView->GetRowCount(&rowCount);
   1:     mFirstChild->GetChildCount(&colCount);
   1: 
   1:     *aAccChildCount += rowCount * colCount;
   1:   }
   1:   return NS_OK;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::GetCaption(nsIAccessible **aCaption)
   1: {
3151:   *aCaption = nsnull;
   1:   return NS_OK;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::GetSummary(nsAString &aSummary)
   1: {
3151:   aSummary.Truncate();
   1:   return NS_OK;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::GetColumns(PRInt32 *aColumns)
   1: {
   1:   nsresult rv = NS_OK;
   1: 
   1:   nsCOMPtr<nsIAccessible> acc;
   1:   rv = nsAccessible::GetFirstChild(getter_AddRefs(acc));
   1:   NS_ENSURE_TRUE(acc, NS_ERROR_FAILURE);
   1: 
2190:   rv = acc->GetChildCount(aColumns);
2190:   return *aColumns > 0 ? rv : NS_ERROR_FAILURE;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::GetColumnHeader(nsIAccessibleTable **aColumnHeader)
   1: {
   1:   nsresult rv = NS_OK;
   1: 
   1:   nsCOMPtr<nsIAccessible> acc;
   1:   nsAccessible::GetFirstChild(getter_AddRefs(acc));
   1:   NS_ENSURE_TRUE(acc, NS_ERROR_FAILURE);
   1: 
   1:   nsCOMPtr<nsIAccessibleTable> accTable(do_QueryInterface(acc, &rv));
   1:   NS_ENSURE_SUCCESS(rv, rv);
   1: 
   1:   *aColumnHeader = accTable;
   1:   NS_IF_ADDREF(*aColumnHeader);
   1: 
   1:   return rv;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::GetRows(PRInt32 *aRows)
   1: {
   1:   NS_ENSURE_TRUE(mTree && mTreeView, NS_ERROR_FAILURE);
   1: 
   1:   return mTreeView->GetRowCount(aRows);
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::GetRowHeader(nsIAccessibleTable **aRowHeader)
   1: {
   1:   // Row header not supported
   1:   return NS_ERROR_NOT_IMPLEMENTED;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::GetSelectedColumns(PRUint32 *aNumColumns, PRInt32 **aColumns)
   1: {
   1:   // If all the row has been selected, then all the columns are selected.
   1:   // Because we can't select a column alone.
   1:   NS_ENSURE_TRUE(mTree && mTreeView, NS_ERROR_FAILURE);
   1:   NS_ENSURE_ARG_POINTER(aNumColumns);
   1: 
   1:   nsresult rv = NS_OK;
   1: 
   1:   PRInt32 rows;
   1:   rv = GetRows(&rows);
   1:   NS_ENSURE_SUCCESS(rv, rv);
   1: 
   1:   PRInt32 selectedRows;
   1:   rv = GetSelectionCount(&selectedRows);
   1:   NS_ENSURE_SUCCESS(rv, rv);
   1: 
   1:   if (rows == selectedRows) {
   1:     PRInt32 columns;
   1:     rv = GetColumns(&columns);
   1:     NS_ENSURE_SUCCESS(rv, rv);
   1: 
   1:     *aNumColumns = columns;
   1:   } else {
   1:     *aNumColumns = 0;
   1:     return rv;
   1:   }
   1: 
   1:   PRInt32 *outArray = (PRInt32 *)nsMemory::Alloc((*aNumColumns) * sizeof(PRInt32));
   1:   NS_ENSURE_TRUE(outArray, NS_ERROR_OUT_OF_MEMORY);
   1: 
   1:   for (PRUint32 index = 0; index < *aNumColumns; index++) {
   1:     outArray[index] = index;
   1:   }
   1: 
   1:   *aColumns = outArray;
   1:   return rv;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::GetSelectedRows(PRUint32 *aNumRows, PRInt32 **aRows)
   1: {
   1:   NS_ENSURE_TRUE(mTree && mTreeView, NS_ERROR_FAILURE);
   1:   NS_ENSURE_ARG_POINTER(aNumRows);
   1: 
   1:   nsresult rv = NS_OK;
   1: 
   1:   rv = GetSelectionCount((PRInt32 *)aNumRows);
   1:   NS_ENSURE_SUCCESS(rv, rv);
   1: 
   1:   PRInt32 *outArray = (PRInt32 *)nsMemory::Alloc((*aNumRows) * sizeof(PRInt32));
   1:   NS_ENSURE_TRUE(outArray, NS_ERROR_OUT_OF_MEMORY);
   1: 
   1:   nsCOMPtr<nsITreeView> view;
   1:   rv = mTree->GetView(getter_AddRefs(view));
   1:   NS_ENSURE_SUCCESS(rv, rv);
   1: 
   1:   nsCOMPtr<nsITreeSelection> selection;
   1:   rv = view->GetSelection(getter_AddRefs(selection));
   1:   NS_ENSURE_SUCCESS(rv, rv);
   1: 
   1:   PRInt32 rowCount;
   1:   rv = GetRows(&rowCount);
   1:   NS_ENSURE_SUCCESS(rv, rv);
   1: 
   1:   PRBool isSelected;
   1:   PRInt32 index, curr = 0;
   1:   for (index = 0; index < rowCount; index++) {
   1:     selection->IsSelected(index, &isSelected);
   1:     if (isSelected) {
   1:       outArray[curr++] = index;
   1:     }
   1:   }
   1: 
   1:   *aRows = outArray;
   1:   return rv;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::CellRefAt(PRInt32 aRow, PRInt32 aColumn, nsIAccessible **aAccessibleCell)
   1: {
   1:   NS_ENSURE_TRUE(mDOMNode && mTree, NS_ERROR_FAILURE);
   1: 
   1:   nsresult rv = NS_OK;
   1: 
   1:   PRInt32 index;
   1:   rv = GetIndexAt(aRow, aColumn, &index);
   1:   NS_ENSURE_SUCCESS(rv, rv);
   1: 
   1:   return GetChildAt(index, aAccessibleCell);
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::GetIndexAt(PRInt32 aRow, PRInt32 aColumn, PRInt32 *aIndex)
   1: {
   1:   NS_ENSURE_TRUE(mDOMNode, NS_ERROR_FAILURE);
   1:   NS_ENSURE_ARG_POINTER(aIndex);
   1: 
   1:   nsresult rv = NS_OK;
   1: 
   1:   PRInt32 columns;
   1:   rv = GetColumns(&columns);
   1:   NS_ENSURE_SUCCESS(rv, rv);
   1: 
   1:   PRInt32 treeCols;
   1:   nsAccessible::GetChildCount(&treeCols);
   1:   *aIndex = aRow * columns + aColumn + treeCols;
   1:   return NS_OK;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::GetColumnAtIndex(PRInt32 aIndex, PRInt32 *_retval)
   1: {
   1:   NS_ENSURE_ARG_POINTER(_retval);
   1: 
   1:   nsresult rv = NS_OK;
   1: 
   1:   PRInt32 columns;
   1:   rv = GetColumns(&columns);
   1:   NS_ENSURE_SUCCESS(rv, rv);
   1: 
   1:   PRInt32 treeCols;
   1:   nsAccessible::GetChildCount(&treeCols);
   1: 
   1:   *_retval = (aIndex - treeCols) % columns;
   1:   
   1:   return NS_OK;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::GetRowAtIndex(PRInt32 aIndex, PRInt32 *_retval)
   1: {
   1:   NS_ENSURE_ARG_POINTER(_retval);
   1: 
   1:   nsresult rv = NS_OK;
   1: 
   1:   PRInt32 columns;
   1:   rv = GetColumns(&columns);
   1:   NS_ENSURE_SUCCESS(rv, rv);
   1: 
   1:   PRInt32 treeCols;
   1:   nsAccessible::GetChildCount(&treeCols);
   1: 
   1:   *_retval = (aIndex - treeCols) / columns;
   1: 
   1:   return NS_OK;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::GetColumnExtentAt(PRInt32 aRow, PRInt32 aColumn, PRInt32 *_retval)
   1: {
   1:   NS_ENSURE_ARG_POINTER(_retval);
   1: 
   1:   *_retval = 1;
   1:   return NS_OK;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::GetRowExtentAt(PRInt32 aRow, PRInt32 aColumn, PRInt32 *_retval)
   1: {
   1:   NS_ENSURE_ARG_POINTER(_retval);
   1: 
   1:   *_retval = 1;
   1:   return NS_OK;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::GetColumnDescription(PRInt32 aColumn, nsAString & _retval)
   1: {
   1:   nsCOMPtr<nsIAccessibleTable> columnHeader;
   1:   nsresult rv = GetColumnHeader(getter_AddRefs(columnHeader));
   1:   if (NS_SUCCEEDED(rv) && columnHeader) {
   1:     return columnHeader->GetColumnDescription(aColumn, _retval);
   1:   }
   1:   return NS_ERROR_FAILURE;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::GetRowDescription(PRInt32 aRow, nsAString & _retval)
   1: {
   1:   return NS_ERROR_NOT_IMPLEMENTED;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::IsColumnSelected(PRInt32 aColumn, PRBool *_retval)
   1: {
   1:   // If all the row has been selected, then all the columns are selected.
   1:   // Because we can't select a column alone.
   1:   NS_ENSURE_TRUE(mTree && mTreeView, NS_ERROR_FAILURE);
   1:   NS_ENSURE_ARG_POINTER(_retval);
   1: 
   1:   nsresult rv = NS_OK;
   1: 
   1:   PRInt32 rows;
   1:   rv = GetRows(&rows);
   1:   NS_ENSURE_SUCCESS(rv, rv);
   1: 
   1:   PRInt32 selectedRows;
   1:   rv = GetSelectionCount(&selectedRows);
   1:   NS_ENSURE_SUCCESS(rv, rv);
   1: 
   1:   *_retval = rows == selectedRows;
   1:   return rv;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::IsRowSelected(PRInt32 aRow, PRBool *_retval)
   1: {
   1:   NS_ENSURE_TRUE(mTree && mTreeView, NS_ERROR_FAILURE);
   1: 
   1:   nsresult rv = NS_OK;
   1: 
   1:   nsCOMPtr<nsITreeView> view;
   1:   rv = mTree->GetView(getter_AddRefs(view));
   1:   NS_ENSURE_SUCCESS(rv, rv);
   1: 
   1:   nsCOMPtr<nsITreeSelection> selection;
   1:   rv = view->GetSelection(getter_AddRefs(selection));
   1:   NS_ENSURE_SUCCESS(rv, rv);
   1: 
   1:   return selection->IsSelected(aRow, _retval);
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::IsCellSelected(PRInt32 aRow, PRInt32 aColumn, PRBool *_retval)
   1: {
   1:   return IsRowSelected(aRow, _retval);
   1: }
   1: 
1371: NS_IMETHODIMP
1371: nsXULTreeAccessibleWrap::SelectRow(PRInt32 aRow)
1371: {
1371:   return NS_ERROR_NOT_IMPLEMENTED;
1371: }
1371: 
1371: NS_IMETHODIMP
1371: nsXULTreeAccessibleWrap::SelectColumn(PRInt32 aColumn)
1371: {
1371:   return NS_ERROR_NOT_IMPLEMENTED;
1371: }
1371: 
1371: NS_IMETHODIMP
1371: nsXULTreeAccessibleWrap::UnselectRow(PRInt32 aRow)
1371: {
1371:   return NS_ERROR_NOT_IMPLEMENTED;
1371: }
1371: 
1371: NS_IMETHODIMP
1371: nsXULTreeAccessibleWrap::UnselectColumn(PRInt32 aColumn)
1371: {
1371:   return NS_ERROR_NOT_IMPLEMENTED;
1371: }
1371: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::ChangeSelection(PRInt32 aIndex, PRUint8 aMethod, PRBool *aSelState)
   1: {
   1:   NS_ENSURE_TRUE(mTree && mTreeView, NS_ERROR_FAILURE);
   1: 
   1:   PRInt32 rowIndex;
   1:   nsresult rv = GetRowAtIndex(aIndex, &rowIndex);
   1: 
   1:   nsCOMPtr<nsITreeSelection> selection;
   1:   rv = mTreeView->GetSelection(getter_AddRefs(selection));
   1:   NS_ASSERTION(selection, "Can't get selection from mTreeView");
   1: 
   1:   if (selection) {
   1:     selection->IsSelected(rowIndex, aSelState);
   1:     // XXX: Can move to nsXULTreeAccessible if this can be applied to cross-platform
   1:     if ((!(*aSelState) && eSelection_Add == aMethod)) {
   1:       nsresult rv = selection->Select(rowIndex);
   1:       mTree->EnsureRowIsVisible(aIndex);
   1:       return rv;
   1:     }
   1:     // XXX: Will eSelection_Remove happen for XULTree? Leave the original implementation here
   1:     if ((*aSelState) && eSelection_Remove == aMethod) {
   1:       return selection->ToggleSelect(rowIndex);
   1:     }
   1:   }
   1: 
   1:   return NS_OK;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeAccessibleWrap::IsProbablyForLayout(PRBool *aIsProbablyForLayout)
   1: {
   1:   *aIsProbablyForLayout = PR_FALSE;
   1:   return NS_OK;
   1: }
   1: 
   1: // --------------------------------------------------------
   1: // nsXULTreeAccessibleWrap Accessible
   1: // --------------------------------------------------------
   1: NS_IMPL_ISUPPORTS_INHERITED1(nsXULTreeColumnsAccessibleWrap, nsXULTreeColumnsAccessible, nsIAccessibleTable)
   1: 
   1: nsXULTreeColumnsAccessibleWrap::nsXULTreeColumnsAccessibleWrap(nsIDOMNode *aDOMNode, nsIWeakReference *aShell):
   1: nsXULTreeColumnsAccessible(aDOMNode, aShell)
   1: {
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeColumnsAccessibleWrap::GetCaption(nsIAccessible **aCaption)
   1: {
3151:   *aCaption = nsnull;
   1:   return NS_OK;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeColumnsAccessibleWrap::GetSummary(nsAString &aSummary)
   1: {
3151:   aSummary.Truncate();
   1:   return NS_OK;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeColumnsAccessibleWrap::GetColumns(PRInt32 *aColumns)
   1: {
2190:   nsresult rv = GetChildCount(aColumns);
2190:   return *aColumns > 0 ? rv : NS_ERROR_FAILURE;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeColumnsAccessibleWrap::GetColumnHeader(nsIAccessibleTable * *aColumnHeader)
   1: {
   1:   // Column header not supported.
   1:   return NS_ERROR_NOT_IMPLEMENTED;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeColumnsAccessibleWrap::GetRows(PRInt32 *aRows)
   1: {
   1:   NS_ENSURE_ARG_POINTER(aRows);
   1: 
   1:   *aRows = 1;
   1:   return NS_OK;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeColumnsAccessibleWrap::GetRowHeader(nsIAccessibleTable * *aRowHeader)
   1: {
   1:   // Row header not supported.
   1:   return NS_ERROR_NOT_IMPLEMENTED;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeColumnsAccessibleWrap::GetSelectedColumns(PRUint32 *columnsSize, PRInt32 **columns)
   1: {
   1:   // Header can not be selected.
   1:   return NS_ERROR_NOT_IMPLEMENTED;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeColumnsAccessibleWrap::GetSelectedRows(PRUint32 *rowsSize, PRInt32 **rows)
   1: {
   1:   // Header can not be selected.
   1:   return NS_ERROR_NOT_IMPLEMENTED;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeColumnsAccessibleWrap::CellRefAt(PRInt32 aRow, PRInt32 aColumn, nsIAccessible **_retval)
   1: {
   1:   nsCOMPtr<nsIAccessible> next, temp;
   1:   GetFirstChild(getter_AddRefs(next));
   1:   NS_ENSURE_TRUE(next, NS_ERROR_FAILURE);
   1: 
   1:   for (PRInt32 col = 0; col < aColumn; col++) {
   1:     next->GetNextSibling(getter_AddRefs(temp));
   1:     NS_ENSURE_TRUE(temp, NS_ERROR_FAILURE);
   1: 
   1:     next = temp;
   1:   }
   1: 
   1:   *_retval = next;
   1:   NS_IF_ADDREF(*_retval);
   1: 
   1:   return NS_OK;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeColumnsAccessibleWrap::GetIndexAt(PRInt32 aRow, PRInt32 aColumn, PRInt32 *_retval)
   1: {
   1:   NS_ENSURE_ARG_POINTER(_retval);
   1: 
   1:   *_retval = aColumn;
   1:   return NS_OK;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeColumnsAccessibleWrap::GetColumnAtIndex(PRInt32 aIndex, PRInt32 *_retval)
   1: {
   1:   NS_ENSURE_ARG_POINTER(_retval);
   1: 
   1:   *_retval = aIndex;
   1:   return NS_OK;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeColumnsAccessibleWrap::GetRowAtIndex(PRInt32 aIndex, PRInt32 *_retval)
   1: {
   1:   NS_ENSURE_ARG_POINTER(_retval);
   1: 
   1:   *_retval = 0;
   1:   return NS_OK;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeColumnsAccessibleWrap::GetColumnExtentAt(PRInt32 aRow, PRInt32 aColumn, PRInt32 *_retval)
   1: {
   1:   NS_ENSURE_ARG_POINTER(_retval);
   1: 
   1:   *_retval = 1;
   1:   return NS_OK;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeColumnsAccessibleWrap::GetRowExtentAt(PRInt32 aRow, PRInt32 aColumn, PRInt32 *_retval)
   1: {
   1:   NS_ENSURE_ARG_POINTER(_retval);
   1: 
   1:   *_retval = 1;
   1:   return NS_OK;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeColumnsAccessibleWrap::GetColumnDescription(PRInt32 aColumn, nsAString & _retval)
   1: {
   1:   nsCOMPtr<nsIAccessible> column;  
   1:   nsresult rv = CellRefAt(0, aColumn, getter_AddRefs(column));
   1:   if (NS_SUCCEEDED(rv) && column) {
   1:     return column->GetName(_retval);
   1:   }
   1:   return NS_ERROR_FAILURE;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeColumnsAccessibleWrap::GetRowDescription(PRInt32 aRow, nsAString & _retval)
   1: {
   1:   return NS_ERROR_NOT_IMPLEMENTED;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeColumnsAccessibleWrap::IsColumnSelected(PRInt32 aColumn, PRBool *_retval)
   1: {
   1:   // Header can not be selected.
   1:   return NS_ERROR_NOT_IMPLEMENTED;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeColumnsAccessibleWrap::IsRowSelected(PRInt32 aRow, PRBool *_retval)
   1: {
   1:   // Header can not be selected.
   1:   return NS_ERROR_NOT_IMPLEMENTED;
   1: }
   1: 
   1: NS_IMETHODIMP nsXULTreeColumnsAccessibleWrap::IsCellSelected(PRInt32 aRow, PRInt32 aColumn, PRBool *_retval)
   1: {
   1:   // Header can not be selected.
   1:   return NS_ERROR_NOT_IMPLEMENTED;
   1: }
   1: 
1372: NS_IMETHODIMP
1372: nsXULTreeColumnsAccessibleWrap::SelectRow(PRInt32 aRow)
1372: {
1372:   return NS_ERROR_NOT_IMPLEMENTED;
1372: }
1372: 
1372: NS_IMETHODIMP
1372: nsXULTreeColumnsAccessibleWrap::SelectColumn(PRInt32 aColumn)
1372: {
1372:   return NS_ERROR_NOT_IMPLEMENTED;
1372: }
1372: 
1372: NS_IMETHODIMP
1372: nsXULTreeColumnsAccessibleWrap::UnselectRow(PRInt32 aRow)
1372: {
1372:   return NS_ERROR_NOT_IMPLEMENTED;
1372: }
1372: 
1372: NS_IMETHODIMP
1372: nsXULTreeColumnsAccessibleWrap::UnselectColumn(PRInt32 aColumn)
1372: {
1372:   return NS_ERROR_NOT_IMPLEMENTED;
1372: }
1372: 
   1: NS_IMETHODIMP nsXULTreeColumnsAccessibleWrap::IsProbablyForLayout(PRBool *aIsProbablyForLayout)
   1: {
   1:   *aIsProbablyForLayout = PR_FALSE;
   1:   return NS_OK;
   1: }
