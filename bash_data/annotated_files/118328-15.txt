  3869: // Copyright (c) 2006, Google Inc.
  3869: // All rights reserved.
  3869: //
  3869: // Redistribution and use in source and binary forms, with or without
  3869: // modification, are permitted provided that the following conditions are
  3869: // met:
  3869: //
  3869: //     * Redistributions of source code must retain the above copyright
  3869: // notice, this list of conditions and the following disclaimer.
  3869: //     * Redistributions in binary form must reproduce the above
  3869: // copyright notice, this list of conditions and the following disclaimer
  3869: // in the documentation and/or other materials provided with the
  3869: // distribution.
  3869: //     * Neither the name of Google Inc. nor the names of its
  3869: // contributors may be used to endorse or promote products derived from
  3869: // this software without specific prior written permission.
  3869: //
  3869: // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  3869: // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  3869: // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  3869: // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  3869: // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  3869: // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  3869: // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  3869: // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  3869: // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  3869: // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  3869: // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  3869: 
  3869: // file_id.cc: Return a unique identifier for a file
  3869: //
  3869: // See file_id.h for documentation
  3869: //
  3869: // Author: Dan Waylonis
  3869: 
  3869: #include <fcntl.h>
  3869: #include <string.h>
  3869: #include <unistd.h>
  3869: 
  3869: #include "common/mac/file_id.h"
  3869: #include "common/mac/macho_id.h"
  3869: 
  3869: using MacFileUtilities::MachoID;
  3869: 
  3869: namespace google_breakpad {
  3869: 
  3869: FileID::FileID(const char *path) {
  3869:   strlcpy(path_, path, sizeof(path_));
  3869: }
  3869: 
  3869: bool FileID::FileIdentifier(unsigned char identifier[16]) {
  3869:   int fd = open(path_, O_RDONLY);
  3869:   if (fd == -1)
  3869:     return false;
  3869: 
 57961:   MD5Context md5;
 57961:   MD5Init(&md5);
  3869: 
  3869:   // Read 4k x 2 bytes at a time.  This is faster than just 4k bytes, but
  3869:   // doesn't seem to be an unreasonable size for the stack.
  3869:   unsigned char buffer[4096 * 2];
  3869:   size_t buffer_size = sizeof(buffer);
  3869:   while ((buffer_size = read(fd, buffer, buffer_size) > 0)) {
 57961:     MD5Update(&md5, buffer, buffer_size);
  3869:   }
  3869: 
  3869:   close(fd);
 57961:   MD5Final(identifier, &md5);
  3869: 
  3869:   return true;
  3869: }
  3869: 
118328: bool FileID::MachoIdentifier(cpu_type_t cpu_type,
118328:                              cpu_subtype_t cpu_subtype,
118328:                              unsigned char identifier[16]) {
  3869:   MachoID macho(path_);
  3869: 
118328:   if (macho.UUIDCommand(cpu_type, cpu_subtype, identifier))
  3869:     return true;
  3869: 
118328:   return macho.MD5(cpu_type, cpu_subtype, identifier);
  3869: }
  3869: 
  3869: // static
  3869: void FileID::ConvertIdentifierToString(const unsigned char identifier[16],
  3869:                                        char *buffer, int buffer_length) {
  3869:   int buffer_idx = 0;
  3869:   for (int idx = 0; (buffer_idx < buffer_length) && (idx < 16); ++idx) {
  3869:     int hi = (identifier[idx] >> 4) & 0x0F;
  3869:     int lo = (identifier[idx]) & 0x0F;
  3869: 
  3869:     if (idx == 4 || idx == 6 || idx == 8 || idx == 10)
  3869:       buffer[buffer_idx++] = '-';
  3869: 
114869:     buffer[buffer_idx++] =
114869:         static_cast<char>((hi >= 10) ? ('A' + hi - 10) : ('0' + hi));
114869:     buffer[buffer_idx++] =
114869:         static_cast<char>((lo >= 10) ? ('A' + lo - 10) : ('0' + lo));
  3869:   }
  3869: 
  3869:   // NULL terminate
  3869:   buffer[(buffer_idx < buffer_length) ? buffer_idx : buffer_idx - 1] = 0;
  3869: }
  3869: 
  3869: }  // namespace google_breakpad
