35729: // Copyright (c) 2009 The Chromium Authors. All rights reserved.
35729: // Use of this source code is governed by a BSD-style license that can be
35729: // found in the LICENSE file.
35729: 
35729: #ifndef BASE_FILE_DESCRIPTOR_SHUFFLE_H_
35729: #define BASE_FILE_DESCRIPTOR_SHUFFLE_H_
35729: 
35729: // This code exists to perform the shuffling of file descriptors which is
35729: // commonly needed when forking subprocesses. The naive approve is very simple,
35729: // just call dup2 to setup the desired descriptors, but wrong. It's tough to
35729: // handle the edge cases (like mapping 0 -> 1, 1 -> 0) correctly.
35729: //
35729: // In order to unittest this code, it's broken into the abstract action (an
35729: // injective multimap) and the concrete code for dealing with file descriptors.
35729: // Users should use the code like this:
35729: //   base::InjectiveMultimap file_descriptor_map;
35729: //   file_descriptor_map.push_back(base::InjectionArc(devnull, 0, true));
35729: //   file_descriptor_map.push_back(base::InjectionArc(devnull, 2, true));
35729: //   file_descriptor_map.push_back(base::InjectionArc(pipe[1], 1, true));
35729: //   base::ShuffleFileDescriptors(file_descriptor_map);
35729: //
35729: // and trust the the Right Thing will get done.
35729: 
35729: #include <vector>
35729: 
35729: namespace base {
35729: 
35729: // A Delegate which performs the actions required to perform an injective
35729: // multimapping in place.
35729: class InjectionDelegate {
35729:  public:
35729:   // Duplicate |fd|, an element of the domain, and write a fresh element of the
35729:   // domain into |result|. Returns true iff successful.
35729:   virtual bool Duplicate(int* result, int fd) = 0;
35729:   // Destructively move |src| to |dest|, overwriting |dest|. Returns true iff
35729:   // successful.
35729:   virtual bool Move(int src, int dest) = 0;
35729:   // Delete an element of the domain.
35729:   virtual void Close(int fd) = 0;
35729: };
35729: 
35729: // An implementation of the InjectionDelegate interface using the file
35729: // descriptor table of the current process as the domain.
35729: class FileDescriptorTableInjection : public InjectionDelegate {
35729:   bool Duplicate(int* result, int fd);
35729:   bool Move(int src, int dest);
35729:   void Close(int fd);
35729: };
35729: 
35729: // A single arc of the directed graph which describes an injective multimapping.
35729: struct InjectionArc {
35729:   InjectionArc(int in_source, int in_dest, bool in_close)
35729:       : source(in_source),
35729:         dest(in_dest),
35729:         close(in_close) {
35729:   }
35729: 
35729:   int source;
35729:   int dest;
35729:   bool close;  // if true, delete the source element after performing the
35729:                // mapping.
35729: };
35729: 
35729: typedef std::vector<InjectionArc> InjectiveMultimap;
35729: 
35729: bool PerformInjectiveMultimap(const InjectiveMultimap& map,
35729:                               InjectionDelegate* delegate);
79174: bool PerformInjectiveMultimapDestructive(InjectiveMultimap* map,
79174:                                          InjectionDelegate* delegate);
35729: 
79174: // This function will not call malloc but will mutate |map|
79174: static inline bool ShuffleFileDescriptors(InjectiveMultimap *map) {
35729:   FileDescriptorTableInjection delegate;
79174:   return PerformInjectiveMultimapDestructive(map, &delegate);
35729: }
35729: 
35729: }  // namespace base
35729: 
35729: #endif  // !BASE_FILE_DESCRIPTOR_SHUFFLE_H_
